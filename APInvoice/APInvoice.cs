using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Transactions;
using Epicor.Data;
using Epicor.Security.Cryptography.SHA;  // used in place of ABL Encode function 
using Epicor.Utilities;
using Erp.Intercepts.BO;
using Erp.Internal.AP;
using Erp.Internal.Drv;
using Erp.Internal.Lib;
using Erp.Internal.PE;
using Erp.Services.Lib.Resources;
using Erp.Tables;
using Erp.Tablesets;
using Ice;
using Ice.ExtendedData;
using Ice.Lib;
using Ice.Services;
using StringExtensions = Epicor.Utilities.StringExtensions;
using Strings = Erp.BO.APInvoice.Resources.Strings;


namespace Erp.Services.BO
{
    /// <summary>
    /// AP Invoice Service
    /// </summary>
    public partial class APInvoiceSvc
    {
        System.Diagnostics.StackTrace stackTrace = new System.Diagnostics.StackTrace();

        const string PY_KEY = "[PY]";
        const string APInvoiceRestrictionString = "Erp.UI.APInvoiceEntry.dll";
        string modList = string.Empty;
        string opMessage = string.Empty;
        string cErrors = string.Empty;
        string opErrorMessage = string.Empty;
        int i = 0;
        string v_currCode = string.Empty;
        string pCurrList = string.Empty;
        string pFieldList = string.Empty;
        string pRateList = string.Empty;
        string vRateGrpCode = string.Empty;
        string taxRateList = string.Empty;
        string taxCurrList = string.Empty;
        int vUseDate = 0;
        DateTime? vExDate = null;
        bool ReCalcTaxes = false;
        bool refreshAPInvSched = true;

        /* Variables for cost calculations */
        string gCPCodeList = "ECM";
        decimal[] gCPFactorList = new decimal[] { 1, 100, 1000 };

        /* Local variables */
        bool lDtlTaxExemptChanged = false;
        bool lApInvDtlChanged = false;
        bool lGetAcctForUnrcvd = false;
        string cOldPartNum = string.Empty;
        decimal dOldMiscAmt = decimal.Zero;
        Guid rSaveAPInvHedRowid = Guid.Empty;
        Guid rSaveAPInvDtlRowid = Guid.Empty;
        bool lAPInvExpUpdated = false;
        bool lCalledFromGetByID = false;
        int iVendNum = 0;
        string cInvoiceNum = string.Empty;
        bool isNewCorrectionCancellationInvoice = false;
        int miscInvLine = 0;

        Erp.Internal.Lib.ProcessTaxes.LineTypes ttLineTypes;
        List<Erp.Internal.Lib.ProcessTaxes.LineTypes> ttLineTypesRows;
        List<Erp.Internal.Lib.ProcessTaxes.LineExempt> ttLineExemptRows;
        List<Erp.Internal.Lib.ProcessTaxes._TaxSvcHead> ttTxSvcHeadRows;
        Erp.Internal.Lib.ProcessTaxes._TaxSvcHead ttTaxSvcHead;
        List<Erp.Internal.Lib.ProcessTaxes.TxSvcDetail> ttTxSvcDetailRows;
        List<Erp.Internal.Lib.ProcessTaxes._OTaxSvcJurDtl> ttOTTxSvcJurDtlRows = new List<Internal.Lib.ProcessTaxes._OTaxSvcJurDtl>();


        private List<CurrExChain> ttChainRows;
        private List<CurrExChain> tmpChainRows;
        private List<CurrExChain> tmpTaxChainRows;
        private List<CurrExChain> ttPEChain2Rows;

        private APInvExpRow deletedAPInvExp;
        private List<APInvExpRow> deletedAPInvExpRows;
        private APInvExpTGLCRow deletedAPInvExpTGLC;
        private List<APInvExpTGLCRow> deletedAPInvExpTGLCRows;

        private APInvTaxRow tmpAPInvTax;
        private List<APInvTaxRow> tmpAPInvTaxRows;
        private APInvTaxRow testAPInvTax;
        private List<APInvTaxRow> testAPInvTaxRows;
        private APLnTaxRow testAPLnTax;
        private List<APLnTaxRow> testAPLnTaxRows;
        private APInvLnMscTaxRow testAPInvLnMscTax;
        private List<APInvLnMscTaxRow> testAPInvLnMscTaxRows;
        private APInvHedMscTaxRow testAPInvHedMscTax;
        private List<APInvHedMscTaxRow> testAPInvHedMscTaxRows;
        private APInvExpRow testAPInvExp;
        private List<APInvExpRow> testAPInvExpRows;
        private APInvExpRow testapihAPInvExp;
        private List<APInvExpRow> testapihAPInvExpRows;
        private APInvSchedRow tmpAPInvSchedRow;
        private List<APInvSchedRow> tmpAPInvSchedRows;

        string AUInvoiceNumber = string.Empty;
        bool opCommFailure = false;
        DateTime? vEffectiveFrom = null;
        string glbExtCompanyID = string.Empty;
        int curInvoiceLine = 0;
        string CompanyFiscalCalendarID = string.Empty;
        bool CalcAllInvoiceAmts = false;
        bool CopyExcRate = true; // Used for both Corrections and Cancellations (ApInvHed.CopyExcRateCorrInv and ApInvHed.CopyExcRateCancelInv)

        bool isDiscountforDebitM = false;

        /* PathFld library */
        bool isBOEInvoice = false;
        string vInvoiceType = string.Empty;
        decimal dOldBOEWithholdAmt = decimal.Zero;
        decimal dOldBOEDocWithholdAmt = decimal.Zero;
        decimal dOldBOERpt1WithholdAmt = decimal.Zero;
        decimal dOldBOERpt2WithholdAmt = decimal.Zero;
        decimal dOldBOERpt3WithholdAmt = decimal.Zero;
        bool isNewReturnDebitMemo = false;
        decimal dOldExtCost = decimal.Zero;
        decimal dOldDocExtCost = decimal.Zero;
        decimal dOldRpt1ExtCost = decimal.Zero;
        decimal dOldRpt2ExtCost = decimal.Zero;
        decimal dOldRpt3ExtCost = decimal.Zero;

        bool lUseBankReferencing = false;
        string cKIDDerivedFrom = string.Empty;
        int iCheckDigitModulus = 10; // Default Modulus 10

        /* SCR 120544 Use LNBasedOnDate defined by company to generate legal numbers using Invoice(0) or Apply(1) date */
        int vLNBasedOnDate = 0;
        DateTime? vLNDate = null;

        /*Localization Vars*/
        string vLocalization = string.Empty;
        bool isSEOrFILocalization = false;
        bool isEstoniaLocalization = false;
        //bool isCZLocalization = false;
        bool isThaiLocalization = false;
        bool isDenmarkLocalization = false;
        bool isVNLocalization = false;
        bool isPolandLocalization = false;
        bool isPeruLocalization = false;
        bool isNorwayLocalization = false;
        bool isIndiaLocalization = false;
        bool isTaiwanLocalization = false;
        bool isSwissLocalization = false;
        bool isArgentinaLocalization = false;
        bool isUSLocalization = false;
        bool isGermanyLocalization = false;
        bool isMexicoLocalization = false;
        bool isBelgiumLocalization = false;
        bool isNOorEEorFIorDKLocalization = false;
        bool isMalaysiaLocalization = false;
        bool isColLocalization = false;
        bool isJapanLocalization = false;
        bool isNetherlandsLocalization = false;
        string TWAPLegNumSource = string.Empty;
        decimal dNOThresholdAmt = decimal.Zero;
        decimal vCOIFRSInterestRate = decimal.Zero;
        private XbSystPartialRow bXbSyst;
        private APSystPartialRow apSystPartial;
        VendorPartialRow PartialVendor = null;
        bool XbSystLACTax = false;
        Dictionary<string, APInvDtlExpression20ColumnResult> SumAllAPInvDtl = null;
        Dictionary<string, APInvMscExpression13ColumnResult> SumAllAPInvMsc = null;
        Dictionary<string, APInvExpExpression13ColumnResult> SumAllAPInvExp = null;
        Dictionary<string, APInvTaxExpression10ColumnResult> SumAllAPInvTax = null;
        Dictionary<string, ExistsAPRecordsColumnResult> ExistAPRecords = null;

        private enum TypeOfCreation
        {
            Correction,
            Cancellation
        }

        private class APDtlsWithVariance
        {
            public APInvDtlRow NewAPInvDtl { get; set; }
            public APInvDtlRow OldAPInvDtl { get; set; }
        }
        #region Implicit buffers
        Erp.Tables.Company Company;
        Erp.Tables.XbSyst XbSyst;
        Erp.Tables.POMisc POMisc;
        Erp.Tables.UOMClass UOMClass;
        Erp.Tables.RcvDtl RcvDtl;
        Erp.Tables.Local010 Local010;
        Erp.Tables.PurTerms PurTerms;
        Erp.Tables.PurTermD PurTermD;
        Erp.Tables.PurMisc PurMisc;
        Erp.Tables.DMRActn DMRActn;
        Erp.Tables.TaxCat TaxCat;
        Erp.Tables.GLSyst GLSyst;
        Erp.Tables.GLPurch GLPurch;
        Erp.Tables.PORel PORel;
        Erp.Tables.PartXRefVend PartXRefVend;
        Erp.Tables.JobHead JobHead;
        Erp.Tables.TaxRgn TaxRgn;
        Erp.Tables.TaxRgnSalesTax TaxRgnSalesTax;
        Erp.Tables.SalesTax SalesTax;
        Erp.Tables.SalesTRC SalesTRC;
        Erp.Tables.TaxRate TaxRate;
        Erp.Tables.RebateTrans RebateTrans;
        Erp.Tables.POHeader POHeader;
        Erp.Tables.PODetail PODetail;
        Erp.Tables.TranGLC TranGLC;
        Erp.Tables.ExtCompany ExtCompany;
        Erp.Tables.APInvGrp APInvGrp;
        Erp.Tables.APChkGrp APChkGrp;
        Erp.Tables.Currency Currency;
        Erp.Tables.TranDocType TranDocType;
        Erp.Tables.Vendor Vendor;
        Erp.Tables.CheckHed CheckHed;
        Erp.Tables.CurrExChain CurrExChain;
        Erp.Tables.LogAPInv LogAPInv;
        Erp.Tables.LegalNumCnfg LegalNumCnfg;
        Ice.Tables.Memo Memo;
        Erp.Tables.TaxSvcHead TaxSvcHead;
        Erp.Tables.VendBank VendBank;
        Erp.Tables.APLOC APLOC;
        Erp.Tables.APTran APTran;
        Erp.Tables.ProjPhase ProjPhase;
        Erp.Tables.FSCallhd FSCallhd;
        Erp.Tables.JobMtl JobMtl;
        Erp.Tables.RoleCd RoleCd;
        Erp.Tables.JobOper JobOper;
        Erp.Tables.TaxGRate TaxGRate;
        Erp.Tables.FiscalPer FiscalPer;
        Erp.Tables.GLBCOA GLBCOA;
        Erp.Tables.PurMiscVend PurMiscVend;
        Erp.Tables.GlbGLSyst GlbGLSyst;
        Erp.Tables.Project Project;
        Erp.Tables.Part Part;
        Erp.Tables.PartClass PartClass;
        Erp.Tables.PayMethod PayMethod;
        Erp.Tables.EFTHead EFTHead;
        Erp.Tables.XaSyst XaSyst;
        Erp.Tables.DropShipHead DropShipHead;
        Erp.Tables.DropShipDtl DropShipDtl;
        Erp.Tables.RcvHead RcvHead;
        Erp.Tables.DMRHead DMRHead;
        Erp.Tables.Customer Customer;
        Erp.Tables.Warehse Warehse;
        Erp.Tables.Country Country;
        Erp.Tables.LogAPInvTax LogAPInvTax;
        Erp.Tables.ContainerHeader ContainerHeader;
        Erp.Tables.RcvDtlXRef RcvDtlXRef;
        Erp.Tables.CurrConvRule CurrConvRule;
        Erp.Tables.APInvSel APInvSel;
        Erp.Tables.VendorPP VendorPP;
        Erp.Tables.RecurringCycle RecurringCycle;
        Erp.Tables.GLAcctDisp GLAcctDisp;
        #endregion

        partial void AfterUpdateMaster(ref APInvoiceTableset ds);

        #region Lazy Loads        
        private Lazy<Erp.Internal.AP.CreateAPLinesFromDropShipDtl> apCreateAPLinesFromDropShipDtl;
        private Erp.Internal.AP.CreateAPLinesFromDropShipDtl APCreateAPLinesFromDropShipDtl
        {
            get { return this.apCreateAPLinesFromDropShipDtl.Value; }
        }

        private Lazy<Erp.Internal.AP.CreateAPLinesFromRcptDtl> apCreateAPLinesFromRcptDtl;
        private Erp.Internal.AP.CreateAPLinesFromRcptDtl APCreateAPLinesFromRcptDtl
        {
            get { return this.apCreateAPLinesFromRcptDtl.Value; }
        }

        private Lazy<Erp.Internal.AP.CreateAPLateCosts> apCreateAPLateCosts;
        private Erp.Internal.AP.CreateAPLateCosts APCreateAPLateCosts
        {
            get { return this.apCreateAPLateCosts.Value; }
        }

        private Lazy<Erp.Internal.AP.CreateMiscChrgFromPO> apCreateMiscChrgFromPO;
        private Erp.Internal.AP.CreateMiscChrgFromPO APCreateMiscChrgFromPO
        {
            get { return this.apCreateMiscChrgFromPO.Value; }
        }

        private Lazy<Erp.Internal.AP.CreateTranGLCForAPInvExp> apCreateTranGLCForAPInvExp;
        private Erp.Internal.AP.CreateTranGLCForAPInvExp APCreateTranGLCForAPInvExp
        {
            get { return this.apCreateTranGLCForAPInvExp.Value; }
        }

        private Lazy<Erp.Internal.AP.GetDMRDebitMemos> apGetDMRDebitMemos;
        private Erp.Internal.AP.GetDMRDebitMemos APGetDMRDebitMemos
        {
            get { return this.apGetDMRDebitMemos.Value; }
        }

        private Lazy<Erp.Internal.AP.CreateGLAlloc> apCreateGLAlloc;
        private Erp.Internal.AP.CreateGLAlloc APCreateGLAlloc
        {
            get { return this.apCreateGLAlloc.Value; }
        }

        private Lazy<Erp.Internal.AP.GeneratePaymentFromBOE> apGeneratePaymentFromBOE;
        private Erp.Internal.AP.GeneratePaymentFromBOE APGeneratePaymentFromBOE
        {
            get { return this.apGeneratePaymentFromBOE.Value; }
        }

        private Lazy<Erp.Internal.AP.SyncAPInvExp> apSyncAPInvExp;
        private Erp.Internal.AP.SyncAPInvExp APSyncAPInvExp
        {
            get { return this.apSyncAPInvExp.Value; }
        }

        private Lazy<Erp.Internal.AR.RebateInv> arRebateInv;
        private Erp.Internal.AR.RebateInv ARRebateInv
        {
            get { return this.arRebateInv.Value; }
        }

        private Lazy<Erp.Internal.Lib.AddrBld> libAddrBld = new Lazy<Internal.Lib.AddrBld>();
        private Erp.Internal.Lib.AddrBld LibAddrBld
        {
            get { return this.libAddrBld.Value; }
        }

        private Lazy<Erp.Internal.Lib.AppService> libAppService;
        private Erp.Internal.Lib.AppService LibAppService
        {
            get { return this.libAppService.Value; }
        }

        private Lazy<Erp.Internal.Lib.EntityGLCLib> libEntityGLC;
        private Erp.Internal.Lib.EntityGLCLib LibEntityGLC
        {
            get { return this.libEntityGLC.Value; }
        }

        private Lazy<Erp.Internal.Lib.TranGLCBO> libAPInvExpTranGLCBO;
        private Erp.Internal.Lib.TranGLCBO LibAPInvExpTranGLCBO
        {
            get { return this.libAPInvExpTranGLCBO.Value; }
        }

        private Lazy<Erp.Internal.Lib.TranGLCBO> libAPInvDtlTranGLCBO;
        private Erp.Internal.Lib.TranGLCBO LibAPInvDtlTranGLCBO
        {
            get { return this.libAPInvDtlTranGLCBO.Value; }
        }

        private Lazy<Erp.Internal.Lib.CalcInvDueDate> libCalcInvDueDate = new Lazy<Internal.Lib.CalcInvDueDate>();
        private Erp.Internal.Lib.CalcInvDueDate LibCalcInvDueDate
        {
            get { return this.libCalcInvDueDate.Value; }
        }

        private Lazy<Erp.Internal.Lib.RoundAmountEF> libRoundAmountEF;
        private Erp.Internal.Lib.RoundAmountEF LibRoundAmountEF
        {
            get { return this.libRoundAmountEF.Value; }
        }

        private Lazy<Erp.Internal.Lib.RoundRulesEF> libRoundRulesEF;
        private Erp.Internal.Lib.RoundRulesEF LibRoundRulesEF
        {
            get { return this.libRoundRulesEF.Value; }
        }

        private Lazy<Erp.Internal.Lib.ConvertAmtEF> libConvertAmtEF;
        private Erp.Internal.Lib.ConvertAmtEF LibConvertAmtEF
        {
            get { return this.libConvertAmtEF.Value; }
        }

        private Lazy<Erp.Internal.Lib.GetCurrencyRatesEF> libGetCurrencyRatesEF;
        private Erp.Internal.Lib.GetCurrencyRatesEF LibGetCurrencyRatesEF
        {
            get { return this.libGetCurrencyRatesEF.Value; }
        }

        private Lazy<Erp.Internal.Lib.CalcTaxAmtEF> libCalcTaxAmtEF;
        private Erp.Internal.Lib.CalcTaxAmtEF LibCalcTaxAmtEF
        {
            get { return this.libCalcTaxAmtEF.Value; }
        }

        private Lazy<Erp.Internal.Lib.DeleteRelatedToFile> libDeleteRelatedToFile;
        private Erp.Internal.Lib.DeleteRelatedToFile LibDeleteRelatedToFile
        {
            get { return this.libDeleteRelatedToFile.Value; }
        }

        private Lazy<Erp.Internal.Lib.GetDecimalsNumber> libGetDecimalsNumber;
        private Erp.Internal.Lib.GetDecimalsNumber LibGetDecimalsNumber
        {
            get { return this.libGetDecimalsNumber.Value; }
        }

        private Lazy<Erp.Internal.Lib.LegalNumberGenerate> libLegalNumberGenerate;
        Erp.Internal.Lib.LegalNumberGenerate LibLegalNumberGenerate
        {
            get { return this.libLegalNumberGenerate.Value; }
        }

        private Lazy<Erp.Internal.Lib.LegalNumberGetDflts> libLegalNumberGetDflts;
        Erp.Internal.Lib.LegalNumberGetDflts LibLegalNumberGetDflts
        {
            get { return this.libLegalNumberGetDflts.Value; }
        }

        private Lazy<Erp.Internal.Lib.LegalNumberVoid> libLegalNumberVoid;
        Erp.Internal.Lib.LegalNumberVoid LibLegalNumberVoid
        {
            get { return this.libLegalNumberVoid.Value; }
        }

        private Lazy<Erp.Internal.Lib.XRateLabelEF> libXRateLabelEF;
        private Erp.Internal.Lib.XRateLabelEF LibXRateLabelEF
        {
            get { return this.libXRateLabelEF.Value; }
        }

        private Lazy<Erp.Internal.Lib.ProcessTaxes> libProcessTaxes;
        private Erp.Internal.Lib.ProcessTaxes LibProcessTaxes
        {
            get { return this.libProcessTaxes.Value; }
        }

        private Lazy<Erp.Internal.Lib.Rptfieldscalc> libRptfieldscalc;
        private Erp.Internal.Lib.Rptfieldscalc LibRptfieldscalc
        {
            get { return this.libRptfieldscalc.Value; }
        }

        private Lazy<Erp.Internal.Lib.GetAvailTranDocTypes> libGetAvailTranDocTypes;
        private Erp.Internal.Lib.GetAvailTranDocTypes LibGetAvailTranDocTypes
        {
            get { return this.libGetAvailTranDocTypes.Value; }
        }

        private Lazy<Erp.Internal.Lib.EADValidation> libEADValidation;
        private Erp.Internal.Lib.EADValidation LibEADValidation
        {
            get { return this.libEADValidation.Value; }
        }

        private Lazy<Erp.Internal.Lib.SetDefaultInvoiceDates> libSetDefaultInvoiceDates;
        private Erp.Internal.Lib.SetDefaultInvoiceDates LibSetDefaultInvoiceDates
        {
            get { return this.libSetDefaultInvoiceDates.Value; }
        }

        private Lazy<Erp.Internal.Lib.ValidateTranDocType> libValidateTranDocType;
        private Erp.Internal.Lib.ValidateTranDocType LibValidateTranDocType
        {
            get { return this.libValidateTranDocType.Value; }
        }

        private Lazy<Erp.Internal.Lib.CheckDigitGenerate> libCheckDigitGenerate;
        private Erp.Internal.Lib.CheckDigitGenerate LibCheckDigitGenerate
        {
            get { return this.libCheckDigitGenerate.Value; }
        }

        private Lazy<Erp.Internal.PE.PELock> peLock;
        private Erp.Internal.PE.PELock PELock
        {
            get { return this.peLock.Value; }
        }

        private Lazy<Ice.Lib.UsePatchFld> libUsePatchFld;
        private Ice.Lib.UsePatchFld LibUsePatchFld
        {
            get { return this.libUsePatchFld.Value; }
        }

        private Lazy<Ice.Lib.ExecuteQuery> libExecuteQuery;
        private Ice.Lib.ExecuteQuery LibExecuteQuery
        {
            get { return this.libExecuteQuery.Value; }
        }

        private Lazy<Ice.Lib.LongSequence> libLongSequence;
        private Ice.Lib.LongSequence LibLongSequence
        {
            get { return libLongSequence.Value; }
        }

        private Lazy<Ice.Core.Getcodedesclist> libGetcodedesclist;
        private Ice.Core.Getcodedesclist LibGetcodedesclist
        {
            get
            {
                return libGetcodedesclist.Value;
            }
        }

        private Lazy<Erp.Internal.Lib.LegalNumDocLib> libLegalNumDocLib;
        private Erp.Internal.Lib.LegalNumDocLib LibLegalNumDocLib
        {
            get { return this.libLegalNumDocLib.Value; }
        }

        private Lazy<Erp.Internal.AP.CopyAPInvoice> libCopyAPInvoice;
        private Erp.Internal.AP.CopyAPInvoice LibCopyAPInvoice
        {
            get
            {
                return this.libCopyAPInvoice.Value;
            }
        }


        private Lazy<CreateAmortizations> libCreateAmort;
        private CreateAmortizations LibCreateAmort { get { return libCreateAmort.Value; } }

        private Lazy<Erp.Internal.Lib.CalcCurrencyRatesEF> libCalcCurrencyRatesEF;
        private Erp.Internal.Lib.CalcCurrencyRatesEF CalcCurrencyRatesEF
        {
            get
            {
                return libCalcCurrencyRatesEF.Value;
            }
        }

        private Lazy<Erp.Internal.AP.GRNICLearingSequence> apGRNICLearingSequence;
        private Erp.Internal.AP.GRNICLearingSequence APGRNICLearingSequence
        {
            get { return this.apGRNICLearingSequence.Value; }
        }

        private Lazy<Erp.Internal.Lib.PstVar> libPstVar;
        private Erp.Internal.Lib.PstVar LibPstVar
        {
            get { return libPstVar.Value; }
        }

        private Lazy<Erp.Internal.Lib.INShared> libINShared;
        private Erp.Internal.Lib.INShared LibINShared
        {
            get { return libINShared.Value; }
        }

        private Lazy<Erp.Internal.AP.CalculateGLAnalysisVariance> apCalculateGLAnalysisVariance;
        private Erp.Internal.AP.CalculateGLAnalysisVariance APCalculateGLAnalysisVariance
        {
            get { return apCalculateGLAnalysisVariance.Value; }
        }

        private Lazy<Erp.Internal.AP.ReceiptInv> apReceiptInv;
        private Erp.Internal.AP.ReceiptInv APReceiptInv
        {
            get { return apReceiptInv.Value; }
        }

        private Lazy<Erp.Internal.Lib.ValidateUDCodes> libValidateUDCodes;
        private Erp.Internal.Lib.ValidateUDCodes LibValidateUDCodes
        {
            get { return libValidateUDCodes.Value; }
        }
        private Lazy<IBOPostedAPInvoice> postedAPInvoiceExtension;
        private IBOPostedAPInvoice PostedAPInvoiceExtension
        {
            get { return postedAPInvoiceExtension.Value; }
        }

        private Lazy<Erp.Internal.GL.GLAccountCore> libGLAccountCore;
        private Erp.Internal.GL.GLAccountCore LibGLAccountCore { get { return libGLAccountCore.Value; } }

        private Lazy<Erp.Internal.Lib.PlantAuthorized> libPlant;
        private Erp.Internal.Lib.PlantAuthorized LibPlant
        {
            get
            {
                return this.libPlant.Value;
            }
        }

        private Lazy<Erp.Internal.GL.CreateGLAcctDisp> glCreateGLAcctDisp;
        private Erp.Internal.GL.CreateGLAcctDisp GLCreateGLAcctDisp
        {
            get
            {
                return this.glCreateGLAcctDisp.Value;
            }
        }
        #endregion

        /// <summary>
        /// Initialize method
        /// </summary>
        protected override void Initialize()
        {
            this.libCalcCurrencyRatesEF = new Lazy<Internal.Lib.CalcCurrencyRatesEF>(() => new Erp.Internal.Lib.CalcCurrencyRatesEF(this.Db));
            this.apCreateAPLinesFromDropShipDtl = new Lazy<Internal.AP.CreateAPLinesFromDropShipDtl>(() => new Internal.AP.CreateAPLinesFromDropShipDtl(this.Db));
            this.apCreateAPLinesFromRcptDtl = new Lazy<Internal.AP.CreateAPLinesFromRcptDtl>(() => new Internal.AP.CreateAPLinesFromRcptDtl(this.Db));
            this.apCreateAPLateCosts = new Lazy<CreateAPLateCosts>(() => new Internal.AP.CreateAPLateCosts(this.Db));
            this.apCreateMiscChrgFromPO = new Lazy<Internal.AP.CreateMiscChrgFromPO>(() => new Internal.AP.CreateMiscChrgFromPO(this.Db));
            this.apCreateTranGLCForAPInvExp = new Lazy<Internal.AP.CreateTranGLCForAPInvExp>(() => new Internal.AP.CreateTranGLCForAPInvExp(this.Db));
            this.apGetDMRDebitMemos = new Lazy<Internal.AP.GetDMRDebitMemos>(() => new Internal.AP.GetDMRDebitMemos(this.Db));
            this.apCreateGLAlloc = new Lazy<Internal.AP.CreateGLAlloc>(() => new Internal.AP.CreateGLAlloc(this.Db));
            this.apSyncAPInvExp = new Lazy<Internal.AP.SyncAPInvExp>(() => new Internal.AP.SyncAPInvExp(this.Db));
            this.libAppService = new Lazy<Internal.Lib.AppService>(() => new Internal.Lib.AppService(this.Db));
            this.libRoundAmountEF = new Lazy<Internal.Lib.RoundAmountEF>(() => new Internal.Lib.RoundAmountEF(this.Db));
            this.libRoundRulesEF = new Lazy<Internal.Lib.RoundRulesEF>(() => new Internal.Lib.RoundRulesEF(this.Db));
            this.libConvertAmtEF = new Lazy<Internal.Lib.ConvertAmtEF>(() => new Internal.Lib.ConvertAmtEF(this.Db));
            this.libGetCurrencyRatesEF = new Lazy<Internal.Lib.GetCurrencyRatesEF>(() => new Internal.Lib.GetCurrencyRatesEF(this.Db));
            this.libCalcTaxAmtEF = new Lazy<Internal.Lib.CalcTaxAmtEF>(() => new Internal.Lib.CalcTaxAmtEF(this.Db));
            this.libDeleteRelatedToFile = new Lazy<Internal.Lib.DeleteRelatedToFile>(() => new Internal.Lib.DeleteRelatedToFile(this.Db));
            this.libGetDecimalsNumber = new Lazy<Internal.Lib.GetDecimalsNumber>(() => new Internal.Lib.GetDecimalsNumber(this.Db));
            this.libLegalNumberVoid = new Lazy<Internal.Lib.LegalNumberVoid>(() => new Internal.Lib.LegalNumberVoid(this.Db));
            this.libXRateLabelEF = new Lazy<Internal.Lib.XRateLabelEF>(() => new Internal.Lib.XRateLabelEF(this.Db));
            this.libProcessTaxes = new Lazy<Internal.Lib.ProcessTaxes>(() => new Internal.Lib.ProcessTaxes(this.Db));
            this.libRptfieldscalc = new Lazy<Internal.Lib.Rptfieldscalc>(() => new Internal.Lib.Rptfieldscalc(this.Db));
            this.libGetAvailTranDocTypes = new Lazy<Internal.Lib.GetAvailTranDocTypes>(() => new Internal.Lib.GetAvailTranDocTypes(this.Db));
            this.libEADValidation = new Lazy<Internal.Lib.EADValidation>(() => new Internal.Lib.EADValidation(this.Db));
            this.libSetDefaultInvoiceDates = new Lazy<Internal.Lib.SetDefaultInvoiceDates>(() => new Internal.Lib.SetDefaultInvoiceDates(this.Db));
            this.libValidateTranDocType = new Lazy<Internal.Lib.ValidateTranDocType>(() => new Internal.Lib.ValidateTranDocType(this.Db));
            this.libUsePatchFld = new Lazy<Ice.Lib.UsePatchFld>(() => new Ice.Lib.UsePatchFld(this.Db));
            this.libGetcodedesclist = new Lazy<Ice.Core.Getcodedesclist>(() => new Ice.Core.Getcodedesclist(this.Db));
            string[] tranGLCKeyFields = { "VendorNum", "InvoiceNum", "InvoiceLine", "InvExpSeq", "GroupID" };
            libEntityGLC = new Lazy<Internal.Lib.EntityGLCLib>(() => new Erp.Internal.Lib.EntityGLCLib(Db, "APInvHed"));
            libAPInvExpTranGLCBO = new Lazy<Internal.Lib.TranGLCBO>(() => new Erp.Internal.Lib.TranGLCBO(Db, "APInvExp", "AP Invoice Expense", "Expense", "A", tranGLCKeyFields));
            string[] apInvDtlTranGLCKeyFields = { "VendorNum", "InvoiceNum", "InvoiceLine" };
            libAPInvDtlTranGLCBO = new Lazy<Internal.Lib.TranGLCBO>(() => new Erp.Internal.Lib.TranGLCBO(Db, "APInvDtl", "AP Invoice Line", "Deferred Expense", "A", apInvDtlTranGLCKeyFields));
            peLock = new Lazy<Internal.PE.PELock>(() => new Erp.Internal.PE.PELock(Db));
            libExecuteQuery = new Lazy<Ice.Lib.ExecuteQuery>(() => new Ice.Lib.ExecuteQuery(Db));
            libLongSequence = new Lazy<Ice.Lib.LongSequence>(() => new Ice.Lib.LongSequence(Db));
            this.apCreateAPLinesFromRcptDtl = new Lazy<Internal.AP.CreateAPLinesFromRcptDtl>(() => new Erp.Internal.AP.CreateAPLinesFromRcptDtl(Db));
            this.libCopyAPInvoice = new Lazy<Internal.AP.CopyAPInvoice>(() => new Erp.Internal.AP.CopyAPInvoice(Db));
            this.arRebateInv = new Lazy<Internal.AR.RebateInv>(() => new Erp.Internal.AR.RebateInv(Db));
            this.libLegalNumberGetDflts = new Lazy<Erp.Internal.Lib.LegalNumberGetDflts>(() => new Erp.Internal.Lib.LegalNumberGetDflts(Db));
            this.libLegalNumberGenerate = new Lazy<Internal.Lib.LegalNumberGenerate>(() => new Erp.Internal.Lib.LegalNumberGenerate(Db));
            apGeneratePaymentFromBOE = new Lazy<Internal.AP.GeneratePaymentFromBOE>(() => new Internal.AP.GeneratePaymentFromBOE(Db));
            libCheckDigitGenerate = new Lazy<Internal.Lib.CheckDigitGenerate>(() => new Internal.Lib.CheckDigitGenerate(Db));
            this.libLegalNumDocLib = new Lazy<Erp.Internal.Lib.LegalNumDocLib>(() => new Erp.Internal.Lib.LegalNumDocLib(Db));
            libCreateAmort = new Lazy<CreateAmortizations>(() => new CreateAmortizations(Db));
            this.apGRNICLearingSequence = new Lazy<Internal.AP.GRNICLearingSequence>(() => new Internal.AP.GRNICLearingSequence(this.Db));
            this.libPstVar = new Lazy<Internal.Lib.PstVar>(() => new Internal.Lib.PstVar(this.Db));
            this.libINShared = new Lazy<Internal.Lib.INShared>(() => new Internal.Lib.INShared(this.Db));
            this.apCalculateGLAnalysisVariance = new Lazy<Internal.AP.CalculateGLAnalysisVariance>(() => new Internal.AP.CalculateGLAnalysisVariance(this.Db));
            this.apReceiptInv = new Lazy<Internal.AP.ReceiptInv>(() => new Internal.AP.ReceiptInv(this.Db));
            this.libValidateUDCodes = new Lazy<Internal.Lib.ValidateUDCodes>(() => new Internal.Lib.ValidateUDCodes(this.Db));
            this.postedAPInvoiceExtension = new Lazy<IBOPostedAPInvoice>(() => Resolver.GetExtension<IBOPostedAPInvoice>());
            this.libGLAccountCore = new Lazy<Internal.GL.GLAccountCore>(() => new Erp.Internal.GL.GLAccountCore(Db));
            this.libPlant = new Lazy<Internal.Lib.PlantAuthorized>(() => new Internal.Lib.PlantAuthorized(Db));
            this.glCreateGLAcctDisp = new Lazy<Internal.GL.CreateGLAcctDisp>(() => new Internal.GL.CreateGLAcctDisp(Db));
            modList = IceRow.ROWSTATE_ADDED + "," + IceRow.ROWSTATE_UPDATED;

            Company = Company.FindFirstByPrimaryKey(Db, Session.CompanyID);
            CompanyFiscalCalendarID = Company.FiscalCalendarID;

            #region Localization
            vLocalization = Session.CountryCode;
            switch (Session.CountryCode.ToUpperInvariant())
            {
                case "SE":
                    {
                        isSEOrFILocalization = true;
                    }
                    break;/* Sweden Localization */
                case "FI":
                    {
                        isSEOrFILocalization = true;
                        isNOorEEorFIorDKLocalization = true;
                    }
                    break;/* Finland Localization */
                case "EE":
                    {
                        isEstoniaLocalization = true;
                        isNOorEEorFIorDKLocalization = true;
                    }
                    break;
                case "DK":
                    {
                        isDenmarkLocalization = true;
                        isNOorEEorFIorDKLocalization = true;
                    }
                    break;
                case "TH":
                    {
                        isThaiLocalization = true;
                    }
                    break;
                case "VN":
                    {
                        isVNLocalization = true;
                    }
                    break;
                case "PL":
                    {
                        isPolandLocalization = true;
                    }
                    break;/* Poland Localization */
                case "PE":
                    {
                        isPeruLocalization = true;
                    }
                    break;/* Peru Localization */
                case "NO":
                    {
                        isNorwayLocalization = true;
                        isNOorEEorFIorDKLocalization = true;
                    }
                    break;
                case "IN":
                    {
                        isIndiaLocalization = true;
                    }
                    break;
                case "TW":
                    {
                        isTaiwanLocalization = true;
                        TWAPLegNumSource = FindFirstAPSystTWAPLegNumSource(Session.CompanyID);
                    }
                    break;
                case "CH":
                    {
                        isSwissLocalization = true;
                    }
                    break;
                case "AR":
                    {
                        isArgentinaLocalization = true;
                    }
                    break;
                case "US":
                    {
                        isUSLocalization = true;
                    }
                    break;

                case "DE":
                    isGermanyLocalization = true;
                    break;

                case "MX":
                    isMexicoLocalization = true;
                    break;
                case "BE":
                    isBelgiumLocalization = true;
                    break;
                case "MY":
                    isMalaysiaLocalization = true;
                    break;
                case "CO":
                    isColLocalization = true;
                    break;
                case "JP":
                    isJapanLocalization = true;
                    break;
                case "NL":
                    isNetherlandsLocalization = true;
                    break;
            }
            #endregion

            apSystPartial = FindPartialAPSyst(Session.CompanyID);
            if (apSystPartial != null)
            {
                vUseDate = apSystPartial.ExchangeDateToUse;
                /* SCR 120544 Use LNBasedOnDate defined by company to generate legal numbers using Invoice(0) or Apply(1) date */
                vLNBasedOnDate = apSystPartial.LNBasedOnDate;
            }

            bXbSyst = SelectXbSystRow(Session.CompanyID);
            isDiscountforDebitM = (bXbSyst != null) ? bXbSyst.IsDiscountforDebitM : false;
            if (isNorwayLocalization || isSEOrFILocalization || isSwissLocalization || isEstoniaLocalization || isBelgiumLocalization)
            {
                if (bXbSyst != null)
                {
                    lUseBankReferencing = bXbSyst.OCRCalcType;
                    cKIDDerivedFrom = bXbSyst.OCRNumDrivenFrom;
                    dNOThresholdAmt = bXbSyst.NOThresholdAmt;
                }
            }
            if (bXbSyst != null && isColLocalization)
            {
                vCOIFRSInterestRate = bXbSyst.COIFRSInterestRate;
            }
            base.Initialize();
        }

        #region AddPOMiscChrg Methods

        /// <summary>
        /// Method to call when adding a po miscellaneous charge to an ap invoice line. 
        /// </summary>
        /// <param name="invHedVendorNum">The vendor number of the invoice line to add the charge to</param>
        /// <param name="invHedInvoiceNum">The invoice number of the invoice line to add the charge to</param>
        /// <param name="poMiscMiscCode">The miscellaneous code on the po misc charge record to create the 
        /// invoice miscellaneous charge from.</param>
        /// <param name="poMiscPONum">The PO number of the invoice line to add the charge to.</param>
        /// <param name="poMiscSeqNum">The SeqNum of the po misc charge record.</param>
        /// <param name="ds">The APInvoice data set</param>
        public void AddPOMiscChrgToInvoiceHead(int invHedVendorNum, string invHedInvoiceNum, string poMiscMiscCode, int poMiscPONum, int poMiscSeqNum, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            Guid rAPInvMsc = Guid.Empty;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, invHedVendorNum, invHedInvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvalidInvoice, "APIHAPInvMsc");
            }


            var POMiscQuery = DBExpressionCompiler.Compile(POMiscExpression);
            POMisc = POMiscQuery(Db, APInvHed.Company, poMiscPONum, 0, poMiscMiscCode, poMiscSeqNum);

            if (POMisc == null)
            {
                throw new BLException(Strings.InvalidPOMiscellaneousCharge, "APIHAPInvMsc");
            }

            if (!ExistsPurMisc(Session.CompanyID, POMisc.MiscCode, false))
            {
                throw new BLException(Strings.MiscChargeInactive(POMisc.Description), "APIHAPInvMsc");
            }

            /* If the balance is zero, don't allow the add. */
            if (POMisc.DocMiscAmt - POMisc.DocInvoicedAmt == 0)
            {
                throw new BLException(Strings.TheBalanceOnThePOMisceChargeIsAddNotAllowed, "APIHAPInvMsc");
            }

            APCreateMiscChrgFromPO.RunCreateMiscChrgFromPO("APInvHed", Guid.Empty, APInvHed.SysRowID, POMisc.SysRowID, out rAPInvMsc);

            if (rAPInvMsc != null)
            {

                Db.ReadCurrent(ref APInvHed);
                if (APInvHed != null)
                {
                    refreshttAPInvHed();


                    var APInvMscQuery = DBExpressionCompiler.Compile(APInvMscExpression);
                    APInvMsc = APInvMscQuery(Db, rAPInvMsc);
                    refreshttAPIHAPInvMsc();


                    foreach (var APInvExp_iterator in (SelectAPInvExp(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                    {
                        APInvExp = APInvExp_iterator;
                        refreshttAPIHAPInvExp();
                    }
                }
            }

            /* SCR 106746 Recalculate after adding PO Misc charge */
            SetReadyToCalc("", APInvHed.InvoiceNum, APInvHed.VendorNum, false, false, ref ds);
            CurrentFullTableset = ds;

            APSyncAPInvExp.RunSyncAPInvExp("HedMsc", Guid.Empty, Guid.Empty, rAPInvMsc, Guid.Empty, false, string.Empty, decimal.Zero, "Tax", "APInvHedMscTax", out lAPInvExpUpdated);
        }

        /// <summary>
        /// Method to call when adding a po miscellaneous charge to an ap invoice line. 
        /// </summary>
        /// <param name="InvDtlVendorNum">The vendor number of the invoice line to add the charge to</param>
        /// <param name="InvDtlInvoiceNum">The invoice number of the invoice line to add the charge to</param>
        /// <param name="InvDtlInvoiceLine">The line number of the invoice line to add the charge to</param>
        /// <param name="POMiscPOLine">The po line of the po misc charge record</param>
        /// <param name="POMiscSeqNum">The SeqNum of the po misc charge record</param>
        /// <param name="ds">The APInvoice data set</param>
        public void AddPOMiscChrgToInvoiceLine(int InvDtlVendorNum, string InvDtlInvoiceNum, int InvDtlInvoiceLine, int POMiscPOLine, int POMiscSeqNum, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            Guid rAPInvMsc = Guid.Empty;

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, InvDtlVendorNum, InvDtlInvoiceNum, InvDtlInvoiceLine);
            if (APInvDtl == null)
            {
                throw new BLException(Strings.InvalidInvoiceLine, "APInvMsc");
            }/* if not available APInvDtl */
            if (APInvDtl.PONum == 0)
            {
                throw new BLException(Strings.POMisceChargeCanOnlyBeAddedToInvoiceLinesWithA, "APInvMsc");
            }/* if APInvDtl.PONum = 0 */
            if (POMiscPOLine > 0 && POMiscPOLine != APInvDtl.POLine)
            {
                throw new BLException(Strings.ThePOLineNumberDoesNotMatchThePOLineNumberOnThe, "APInvMsc");
            }


            var POMiscQuery2 = DBExpressionCompiler.Compile(POMiscExpression2);
            POMisc = POMiscQuery2(Db, APInvDtl.Company, APInvDtl.PONum, POMiscPOLine, POMiscSeqNum);
            if (POMisc == null)
            {
                throw new BLException(Strings.InvalidPOMiscellaneousCharge, "APInvMsc");
            }

            if (!ExistsPurMisc(Session.CompanyID, POMisc.MiscCode, false))
            {
                throw new BLException(Strings.MiscChargeInactive(POMisc.Description), "APInvMsc");
            }

            ExceptionManager.AssertNoBLExceptions();

            /* If the balance is zero, don't allow the add. */
            if (POMisc.DocMiscAmt - POMisc.DocInvoicedAmt == 0)
            {
                throw new BLException(Strings.TheBalanceOnThePOMisceChargeIsAddNotAllowed, "APInvMsc");
            }
            APCreateMiscChrgFromPO.RunCreateMiscChrgFromPO("APInvDtl", APInvDtl.SysRowID, Guid.Empty, POMisc.SysRowID, out rAPInvMsc);

            if (rAPInvMsc != null)
            {


                Db.ReadCurrent(ref APInvDtl);
                if (APInvDtl != null)
                {
                    refreshttAPInvDtl();


                    var APInvMscQuery = DBExpressionCompiler.Compile(APInvMscExpression);
                    APInvMsc = APInvMscQuery(Db, rAPInvMsc);
                    refreshttAPInvMsc();


                    foreach (var APInvExp_iterator in (SelectAPInvExp(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine)))
                    {
                        APInvExp = APInvExp_iterator;
                        refreshttAPInvExp();
                    }/* for each APInvExp */

                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum);
                    if (APInvHed != null)
                    {
                        refreshttAPInvHed();
                    }
                }
                ErpCallContext.Add("NonRecTax-APInvMsc");
                ErpCallContext.SetDisposableKeyValue(new KeyValuePair<string, object>("NonRecTax-APInvMsc", APInvDtl.SysRowID + Ice.Constants.LIST_DELIM + APInvMsc.SysRowID));
                /* SCR 106746 Recalculate after adding PO Misc charge */
                SetReadyToCalc("", APInvHed.InvoiceNum, APInvHed.VendorNum, false, false, ref ds);
                CurrentFullTableset = ds;
            }
        }

        #endregion

        partial void AfterGetRows()
        {
            foreach (var ttAPInvHed_iterator in (from ttAPInvHed_Row in CurrentFullTableset.APInvHed
                                                 where ttAPInvHed_Row.Company.KeyEquals(Session.CompanyID)
                                                 select ttAPInvHed_Row))
            {
                ttAPInvHed = ttAPInvHed_iterator;
                if (lCalledFromGetByID == false &&
                ttAPInvHed.StartUp == true && ttAPInvHed.Posted == false)
                {
                    CurrentFullTableset.APInvHed.Remove(ttAPInvHed);
                }
            }

            ttTaxConnectStatus = (
                from ttTaxConnectStatus_Row in CurrentFullTableset.TaxConnectStatus
                where ttTaxConnectStatus_Row.Company.KeyEquals(Session.CompanyID)
                select ttTaxConnectStatus_Row).FirstOrDefault();
            if (ttTaxConnectStatus == null)
            {
                ttTaxConnectStatus = new Erp.Tablesets.TaxConnectStatusRow();
                CurrentFullTableset.TaxConnectStatus.Add(ttTaxConnectStatus);
                ttTaxConnectStatus.Company = Session.CompanyID;
                ttTaxConnectStatus.ETCOffline = false;
                ttTaxConnectStatus.TCStatus = true;
                ttTaxConnectStatus.ErrorMessage = "";
                ttTaxConnectStatus.SysRowID = ttTaxConnectStatus.SysRowID;
                ttTaxConnectStatus.RowMod = "";
            }

            foreach (var apLnTaxRow in CurrentFullTableset.APLnTax)
            {
                apLnTaxRow.ExemptReasonCodeDesc = string.IsNullOrEmpty(apLnTaxRow.ExemptReasonCode) ? string.Empty : Ice.Tables.UDCodes.FindFirstByPrimaryKey(this.Db, apLnTaxRow.Company, "ExmptRsnCd", apLnTaxRow.ExemptReasonCode)?.CodeDesc ?? string.Empty;
            }

            foreach (var apInvTaxRow in CurrentFullTableset.APInvTax)
            {
                apInvTaxRow.ExemptReasonCodeDesc = string.IsNullOrEmpty(apInvTaxRow.ExemptReasonCode) ? string.Empty : Ice.Tables.UDCodes.FindFirstByPrimaryKey(this.Db, apInvTaxRow.Company, "ExmptRsnCd", apInvTaxRow.ExemptReasonCode)?.CodeDesc ?? string.Empty;
            }
        }

        partial void BeforeUpdate()
        {
            if (CurrentFullTableset.APInvSched.Count > 0)
            {
                List<APInvSchedRow> tmpAPInvSchedRows = new List<APInvSchedRow>();

                foreach (var APInvSched_RowByDate in (from tmpAPInvSched_RowByDate in CurrentFullTableset.APInvSched
                                                      where tmpAPInvSched_RowByDate.Company.KeyEquals(Session.CompanyID) &&
                                                      tmpAPInvSched_RowByDate.RowMod.KeyEquals(IceRow.ROWSTATE_UPDATED)
                                                      orderby tmpAPInvSched_RowByDate.PayDueDate
                                                      select tmpAPInvSched_RowByDate).ToList())
                {
                    tmpAPInvSchedRow = new APInvSchedRow();
                    BufferCopy.Copy(APInvSched_RowByDate, ref tmpAPInvSchedRow);
                    tmpAPInvSchedRows.Add(tmpAPInvSchedRow);
                }

                int currentPaySeq = 1;
                foreach (var tmpRow in (from row in tmpAPInvSchedRows
                                        orderby row.PayDueDate
                                        select row))
                {
                    var CurrentAPInvSchedRow = (from ttAPInvSched_Row in CurrentFullTableset.APInvSched
                                                where ttAPInvSched_Row.Company.KeyEquals(Session.CompanyID) &&
                                                ttAPInvSched_Row.PaySeq == currentPaySeq &&
                                                ttAPInvSched_Row.RowMod.KeyEquals(IceRow.ROWSTATE_UPDATED)
                                                select ttAPInvSched_Row).FirstOrDefault();

                    if (CurrentAPInvSchedRow != null)
                    {
                        BufferCopy.CopyExceptFor(tmpRow, CurrentAPInvSchedRow, APInvSched.ColumnNames.PaySeq, APInvSched.ColumnNames.SysRevID, APInvSched.ColumnNames.SysRowID);
                    }

                    currentPaySeq++;
                }
            }

            if (isUSLocalization)
            {
                using (Erp.Internal.CSF.USA usa = new Erp.Internal.CSF.USA(this.Db))
                {
                    usa.VerifyAPInvoice1099Info(this.CurrentFullTableset);
                }
            }

            if (isArgentinaLocalization)
            {
                foreach (var agAPInvHed in this.CurrentFullTableset.APInvHed.Where(r => (r.Added() || r.Updated())))
                {
                    agAPInvHed.AGDocPageNum = agAPInvHed.InvoiceNum.SubString(0, 8);
                    bool bShouldValidateAGCAICAE = true;
                    var agvendor = Vendor.FindFirstByPrimaryKey(Db, agAPInvHed.Company, agAPInvHed.VendorNum);
                    var agcompany = Company.FindFirstByPrimaryKey(Db, agAPInvHed.Company);
                    if (agvendor != null && agcompany != null)
                    {
                        if (agvendor.CountryNum != agcompany.CountryNum)
                        {
                            bShouldValidateAGCAICAE = false;
                        }
                    }

                    if (bShouldValidateAGCAICAE)
                    {
                        if (String.IsNullOrEmpty(agAPInvHed.AGCAICAENum))
                        {
                            throw new BLException(Strings.TheCAICAENumberMustBeDifferentOfBlank, "APInvHed", "AGCAICAENum");
                        }
                        if (!agAPInvHed.AGCAICAEExpirationDate.HasValue)
                        {
                            throw new BLException(Strings.TheCAICAEExpirationDateMustBeDifferentOfBlank, "APInvHed", "AGCAICAEExpirationDate");
                        }
                    }

                }
            }
        }

        partial void AfterUpdate()
        {
            if (iVendNum != 0 && !String.IsNullOrEmpty(cInvoiceNum))
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, iVendNum, cInvoiceNum);
                if (APInvHed != null)
                {
                    CurrentFullTableset.APInvHed.Clear();
                    CurrentFullTableset.APInvHedAttch.Clear();
                    CurrentFullTableset.APIHAPInvExp.Clear();
                    CurrentFullTableset.APIHAPInvMsc.Clear();
                    CurrentFullTableset.APInvDtl.Clear();
                    CurrentFullTableset.APInvDtlAttch.Clear();
                    CurrentFullTableset.APInvExp.Clear();
                    CurrentFullTableset.APInvJob.Clear();
                    CurrentFullTableset.APInvMsc.Clear();
                    CurrentFullTableset.APInvTax.Clear();
                    CurrentFullTableset.APLnTax.Clear();
                    CurrentFullTableset.PEAPInvTax.Clear();
                    CurrentFullTableset.LegalNumGenOpts.Clear();
                    CurrentFullTableset = GetByID(iVendNum, cInvoiceNum);
                }
            }

            iVendNum = 0;
            cInvoiceNum = "";

            /* SCR #44624 - send the actual ttAPInvTax with RowMod of "D" *
             * if reverse charge or EC acquisition tax line got deleted.  */
            if (tmpAPInvTaxRows != null)
            {
                foreach (var tmpAPInvTax in tmpAPInvTaxRows)
                {

                    ttAPInvTax = (from ttAPInvTax_Row in CurrentFullTableset.APInvTax
                                  where ttAPInvTax_Row.Company.KeyEquals(tmpAPInvTax.Company) &&
                                  ttAPInvTax_Row.VendorNum == tmpAPInvTax.VendorNum &&
                                  ttAPInvTax_Row.InvoiceNum.KeyEquals(tmpAPInvTax.InvoiceNum) &&
                                  ttAPInvTax_Row.TaxCode.KeyEquals(tmpAPInvTax.TaxCode) &&
                                  ttAPInvTax_Row.RateCode.KeyEquals(tmpAPInvTax.RateCode) &&
                                  ttAPInvTax_Row.ECAcquisitionSeq == tmpAPInvTax.ECAcquisitionSeq
                                  select ttAPInvTax_Row).FirstOrDefault();
                    if (ttAPInvTax == null)
                    {
                        ttAPInvTax = new Erp.Tablesets.APInvTaxRow();
                        CurrentFullTableset.APInvTax.Add(ttAPInvTax);
                    }
                    BufferCopy.Copy(tmpAPInvTax, ref ttAPInvTax);
                }

                tmpAPInvTaxRows = null;
            }

            if (testAPInvTaxRows != null)
            {
                foreach (var testAPInvTax in testAPInvTaxRows)
                {


                    ttAPInvTax = (from ttAPInvTax_Row in CurrentFullTableset.APInvTax
                                  where ttAPInvTax_Row.Company.KeyEquals(testAPInvTax.Company) &&
                                  ttAPInvTax_Row.VendorNum == testAPInvTax.VendorNum &&
                                  ttAPInvTax_Row.InvoiceNum.KeyEquals(testAPInvTax.InvoiceNum) &&
                                  ttAPInvTax_Row.TaxCode.KeyEquals(testAPInvTax.TaxCode) &&
                                  ttAPInvTax_Row.RateCode.KeyEquals(testAPInvTax.RateCode) &&
                                  ttAPInvTax_Row.ECAcquisitionSeq == testAPInvTax.ECAcquisitionSeq
                                  select ttAPInvTax_Row).FirstOrDefault();

                    if (ttAPInvTax == null)
                    {
                        ttAPInvTax = new Erp.Tablesets.APInvTaxRow();
                        CurrentFullTableset.APInvTax.Add(ttAPInvTax);
                        BufferCopy.Copy(testAPInvTax, ref ttAPInvTax);
                    }
                }

                testAPInvTaxRows = null;
            }


            //testAPLnTax
            if (testAPLnTaxRows != null)
            {
                foreach (var testAPLnTax in testAPLnTaxRows)
                {

                    ttAPLnTax = (from ttAPLnTax_Row in CurrentFullTableset.APLnTax
                                 where ttAPLnTax_Row.Company.KeyEquals(testAPLnTax.Company) &&
                                 ttAPLnTax_Row.VendorNum == testAPLnTax.VendorNum &&
                                 ttAPLnTax_Row.InvoiceNum.KeyEquals(testAPLnTax.InvoiceNum) &&
                                 ttAPLnTax_Row.InvoiceLine == testAPLnTax.InvoiceLine &&
                                 ttAPLnTax_Row.TaxCode.KeyEquals(testAPLnTax.TaxCode) &&
                                 ttAPLnTax_Row.RateCode.KeyEquals(testAPLnTax.RateCode) &&
                                 ttAPLnTax_Row.ECAcquisitionSeq == testAPLnTax.ECAcquisitionSeq
                                 select ttAPLnTax_Row).FirstOrDefault();

                    if (ttAPLnTax == null)
                    {
                        ttAPLnTax = new Erp.Tablesets.APLnTaxRow();
                        CurrentFullTableset.APLnTax.Add(ttAPLnTax);
                        BufferCopy.Copy(testAPLnTax, ref ttAPLnTax);
                    }
                }

                testAPLnTaxRows = null;
            }

            //testAPInvLnMscTax
            if (testAPInvLnMscTaxRows != null)
            {
                foreach (var testAPInvLnMscTax in testAPInvLnMscTaxRows)
                {

                    ttAPInvLnMscTax = (from ttAPInvLnMscTax_Row in CurrentFullTableset.APInvLnMscTax
                                       where ttAPInvLnMscTax_Row.Company.KeyEquals(testAPInvLnMscTax.Company) &&
                                       ttAPInvLnMscTax_Row.VendorNum == testAPInvLnMscTax.VendorNum &&
                                       ttAPInvLnMscTax_Row.InvoiceNum.KeyEquals(testAPInvLnMscTax.InvoiceNum) &&
                                       ttAPInvLnMscTax_Row.InvoiceLine == testAPInvLnMscTax.InvoiceLine &&
                                       ttAPInvLnMscTax_Row.TaxCode.KeyEquals(testAPInvLnMscTax.TaxCode) &&
                                       ttAPInvLnMscTax_Row.RateCode.KeyEquals(testAPInvLnMscTax.RateCode) &&
                                       ttAPInvLnMscTax_Row.MscNum == testAPInvLnMscTax.MscNum &&
                                       ttAPInvLnMscTax_Row.ECAcquisitionSeq == testAPInvLnMscTax.ECAcquisitionSeq
                                       select ttAPInvLnMscTax_Row).FirstOrDefault();

                    if (ttAPInvLnMscTax == null)
                    {
                        ttAPInvLnMscTax = new Erp.Tablesets.APInvLnMscTaxRow();
                        CurrentFullTableset.APInvLnMscTax.Add(ttAPInvLnMscTax);
                        BufferCopy.Copy(testAPInvLnMscTax, ref ttAPInvLnMscTax);
                    }
                }

                testAPInvLnMscTaxRows = null;
            }

            //testAPInvHedMscTax
            if (testAPInvHedMscTaxRows != null)
            {
                foreach (var testAPInvHedMscTax in testAPInvHedMscTaxRows)
                {

                    ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in CurrentFullTableset.APInvHedMscTax
                                        where ttAPInvHedMscTax_Row.Company.KeyEquals(testAPInvHedMscTax.Company) &&
                                        ttAPInvHedMscTax_Row.VendorNum == testAPInvHedMscTax.VendorNum &&
                                        ttAPInvHedMscTax_Row.InvoiceNum.KeyEquals(testAPInvHedMscTax.InvoiceNum) &&
                                        ttAPInvHedMscTax_Row.TaxCode.KeyEquals(testAPInvHedMscTax.TaxCode) &&
                                        ttAPInvHedMscTax_Row.RateCode.KeyEquals(testAPInvHedMscTax.RateCode) &&
                                        ttAPInvHedMscTax_Row.MscNum == testAPInvHedMscTax.MscNum &&
                                        ttAPInvHedMscTax_Row.ECAcquisitionSeq == testAPInvHedMscTax.ECAcquisitionSeq
                                        select ttAPInvHedMscTax_Row).FirstOrDefault();

                    if (ttAPInvHedMscTax == null)
                    {
                        ttAPInvHedMscTax = new Erp.Tablesets.APInvHedMscTaxRow();
                        CurrentFullTableset.APInvHedMscTax.Add(ttAPInvHedMscTax);
                        BufferCopy.Copy(testAPInvHedMscTax, ref ttAPInvHedMscTax);
                    }
                }

                testAPInvHedMscTaxRows = null;
            }


            //testAPInvExp
            if (testAPInvExpRows != null)
            {
                foreach (var testAPInvExp in testAPInvExpRows)
                {

                    ttAPInvExp = (from ttAPInvExp_Row in CurrentFullTableset.APInvExp
                                  where ttAPInvExp_Row.Company.KeyEquals(testAPInvExp.Company) &&
                                 ttAPInvExp_Row.VendorNum == testAPInvExp.VendorNum &&
                                 ttAPInvExp_Row.InvoiceNum.KeyEquals(testAPInvExp.InvoiceNum) &&
                                 ttAPInvExp_Row.InvoiceLine == testAPInvExp.InvoiceLine &&
                                 ttAPInvExp_Row.InvExpSeq == testAPInvExp.InvExpSeq
                                  select ttAPInvExp_Row).FirstOrDefault();

                    if (ttAPInvExp == null)
                    {
                        ttAPInvExp = new Erp.Tablesets.APInvExpRow();
                        CurrentFullTableset.APInvExp.Add(ttAPInvExp);
                        BufferCopy.Copy(testAPInvExp, ref ttAPInvExp);
                    }
                }

                testAPInvExpRows = null;
            }

            //tesaptAPInvExp
            if (testapihAPInvExpRows != null)
            {
                foreach (var testapihAPInvExp in testapihAPInvExpRows)
                {

                    ttAPIHAPInvExp = (from ttapihAPInvExp_Row in CurrentFullTableset.APIHAPInvExp
                                      where ttapihAPInvExp_Row.Company.KeyEquals(testapihAPInvExp.Company) &&
                                 ttapihAPInvExp_Row.VendorNum == testapihAPInvExp.VendorNum &&
                                 ttapihAPInvExp_Row.InvoiceNum.KeyEquals(testapihAPInvExp.InvoiceNum) &&
                                 ttapihAPInvExp_Row.InvoiceLine == testapihAPInvExp.InvoiceLine &&
                                 ttapihAPInvExp_Row.InvExpSeq == testapihAPInvExp.InvExpSeq
                                      select ttapihAPInvExp_Row).FirstOrDefault();

                    if (ttAPIHAPInvExp == null)
                    {
                        ttAPIHAPInvExp = new Erp.Tablesets.APIHAPInvExpRow();
                        CurrentFullTableset.APIHAPInvExp.Add(ttAPIHAPInvExp);
                        BufferCopy.Copy(testapihAPInvExp, ref ttAPIHAPInvExp);
                    }
                }

                testapihAPInvExpRows = null;
            }

            if (tmpAPInvSchedRows != null)
            {
                foreach (var testAPInvSchedRow in tmpAPInvSchedRows)
                {

                    ttAPInvSched = (from ttAPInvSched_Row in CurrentFullTableset.APInvSched
                                    where ttAPInvSched_Row.Company.KeyEquals(testAPInvSchedRow.Company) &&
                                          ttAPInvSched_Row.VendorNum == testAPInvSchedRow.VendorNum &&
                                          ttAPInvSched_Row.InvoiceNum.KeyEquals(testAPInvSchedRow.InvoiceNum) &&
                                          ttAPInvSched_Row.PaySeq == testAPInvSchedRow.PaySeq
                                    select ttAPInvSched_Row).FirstOrDefault();

                    if (ttAPInvSched == null)
                    {
                        ttAPInvSched = new Erp.Tablesets.APInvSchedRow();
                        CurrentFullTableset.APInvSched.Add(ttAPInvSched);
                        BufferCopy.Copy(testAPInvSchedRow, ref ttAPInvSched);
                    }
                }

                tmpAPInvSchedRows = null;
            }

            TranGLCBO.PrepareRowsToDeleteFromClient(CurrentFullTableset.APInvDtlTGLC);
            TranGLCBO.PrepareRowsToDeleteFromClient(CurrentFullTableset.GlbAPIETGLC);

            if (vInvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
            {
                foreach (var ttAPInvDtl_iterator in CurrentFullTableset.APInvDtl)
                {
                    ttAPInvDtl = ttAPInvDtl_iterator;
                    getLineTotals();
                }
            }

            ttTaxConnectStatus = (
                from ttTaxConnectStatus_Row in CurrentFullTableset.TaxConnectStatus
                where ttTaxConnectStatus_Row.Company.KeyEquals(Session.CompanyID)
                select ttTaxConnectStatus_Row).FirstOrDefault();
            if (ttTaxConnectStatus == null)
            {
                ttTaxConnectStatus = new Erp.Tablesets.TaxConnectStatusRow();
                CurrentFullTableset.TaxConnectStatus.Add(ttTaxConnectStatus);
                ttTaxConnectStatus.Company = Session.CompanyID;
                ttTaxConnectStatus.ETCOffline = false;
                ttTaxConnectStatus.TCStatus = true;
                ttTaxConnectStatus.ErrorMessage = "";
                ttTaxConnectStatus.SysRowID = ttTaxConnectStatus.SysRowID;
                ttTaxConnectStatus.RowMod = "";
            }

            if (lAPInvExpUpdated)
                RefreshAfterSyncAPInvExp();

            RemoveTableSetDuplicates(CurrentFullTableset);
        }

        /// <summary>
        /// Method to allocate late cost.
        /// </summary>
        /// <param name="ds"></param>
        public void AllocateLateCost(ref LateCostLinesTableset ds)
        {
            ttLateCostLinesTablesetDS = ds;

            Erp.Tables.APInvMsc bufAPInvMsc = null;
            Erp.Tables.RcvMisc bufRcvMisc = null;
            Erp.Tables.APInvHed bufAPInvHed = null;
            decimal miscAmt = decimal.Zero;
            decimal docMiscAmt = decimal.Zero;
            int nDec = 0;
            string baseWUOM = string.Empty;
            string baseVUOM = string.Empty;
            string lcDM = string.Empty;
            decimal totBasis = decimal.Zero;
            decimal curBasis = decimal.Zero;
            int nextSeq = 0;
            decimal actualDocHighestAmt = decimal.Zero;
            decimal actualDocTotalAmt = decimal.Zero;
            decimal actualBaseTotalAmt = decimal.Zero;
            decimal actualBaseHighestAmt = decimal.Zero;
            int numLines = 0;
            int vendorNum = 0;
            int docVendorNum = 0;
            string purPoint = string.Empty;
            string packSlip = string.Empty;
            string docPurPoint = string.Empty;
            string docPackSlip = string.Empty;
            int miscSeq = 0;
            int docMiscSeq = 0;

            /* SCR 119063 Add transaction scopt to handle exclusivelock used in BufRcvMiscExpression2 */
            using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
            {


                ttLateCostLines = (from ttLateCostLines_Row in ds.LateCostLines
                                   where StringExtensions.Lookup(modList, ttLateCostLines_Row.RowMod) != -1
                                   select ttLateCostLines_Row).FirstOrDefault();


                var BufAPInvMscQuery = DBExpressionCompiler.Compile(BufAPInvMscExpression);
                bufAPInvMsc = BufAPInvMscQuery(Db, Session.CompanyID, ttLateCostLines.APInvVendorNum, ttLateCostLines.InvoiceNum, ttLateCostLines.InvoiceLine, ttLateCostLines.MscNum);
                miscAmt = bufAPInvMsc.MiscAmt;
                docMiscAmt = bufAPInvMsc.DocMiscAmt;
                nDec = LibGetDecimalsNumber.getDecimalsNumberByName("RcvDtl", "AppliedRCptLCAmt", "");
                lcDM = bufAPInvMsc.LCDisburseMethod;

                UOMClass = FindFirstUOMClassByType(Session.CompanyID, "Weight");
                if (UOMClass != null)
                {
                    baseWUOM = UOMClass.BaseUOMCode;
                }

                UOMClass = FindFirstUOMClassByType(Session.CompanyID, "Volume");
                if (UOMClass != null)
                {
                    baseVUOM = UOMClass.BaseUOMCode;
                }

                /* Calculate total basis */

                var BufRcvMiscQuery = DBExpressionCompiler.Compile(BufRcvMiscExpression);
                foreach (var bufRcvMisc_iterator in (BufRcvMiscQuery(Db, Session.CompanyID, bufAPInvMsc.VendorNum, bufAPInvMsc.InvoiceNum, bufAPInvMsc.InvoiceLine, bufAPInvMsc.MscNum)))
                {
                    bufRcvMisc = bufRcvMisc_iterator;


                    RcvDtl = FindFirstRcvDtl(Session.CompanyID, bufRcvMisc.VendorNum, bufRcvMisc.PurPoint, bufRcvMisc.PackSlip, bufRcvMisc.PackLine);
                    curBasis = calcAllocBasis(RcvDtl, lcDM, nDec, baseWUOM, baseVUOM);
                    totBasis = totBasis + curBasis;
                    numLines = numLines + 1;
                }
                foreach (var ttLateCostLines_iterator in (from ttLateCostLines_Row in ds.LateCostLines
                                                          where ttLateCostLines_Row.Selected == true &&
                                                          StringExtensions.Compare(ttLateCostLines_Row.RowMod, IceRow.ROWSTATE_UPDATED) == 0
                                                          select ttLateCostLines_Row))
                {
                    ttLateCostLines = ttLateCostLines_iterator;
                    curBasis = calcAllocBasis(ttLateCostLines, lcDM, nDec, baseWUOM, baseVUOM);
                    totBasis = totBasis + curBasis;
                    numLines = numLines + 1;
                }

                bufAPInvHed = FindFirstAPInvHed(Session.CompanyID, ttLateCostLines.APInvVendorNum, ttLateCostLines.InvoiceNum);
                if (bufAPInvHed == null)
                {
                    throw new BLException(Strings.InvoiceNotFound, "APInvHed", "InvoiceNum");
                }
                /* Recalculate Actual Amount */

                var BufRcvMiscQuery2 = DBExpressionCompiler.Compile(BufRcvMiscExpression2);
                foreach (var bufRcvMisc_iterator in (BufRcvMiscQuery2(Db, Session.CompanyID, bufAPInvMsc.VendorNum, bufAPInvMsc.InvoiceNum, bufAPInvMsc.InvoiceLine, bufAPInvMsc.MscNum)))
                {
                    bufRcvMisc = bufRcvMisc_iterator;

                    RcvDtl = FindFirstRcvDtl(Session.CompanyID, bufRcvMisc.VendorNum, bufRcvMisc.PurPoint, bufRcvMisc.PackSlip, bufRcvMisc.PackLine);

                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(bufAPInvHed.ApplyDate, "RcvMisc", Compatibility.Convert.ToString(bufRcvMisc.VendorNum), bufRcvMisc.PurPoint, bufRcvMisc.PackSlip, Compatibility.Convert.ToString(bufRcvMisc.MiscSeq), "", "", "", "", bufAPInvHed.CurrencyCode, bufAPInvHed.RateGrpCode, bufAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

                    curBasis = calcAllocBasis(RcvDtl, lcDM, nDec, baseWUOM, baseVUOM);

                    bufRcvMisc.ActualAmt = LibRoundAmountEF.RoundDecimalsApply(((totBasis == 0) ? (miscAmt / numLines) : (curBasis * miscAmt / totBasis)), pCurrList.Entry(0, Ice.Constants.LIST_DELIM), "RcvMisc", "ActualAmt");
                    bufRcvMisc.LCDisburseMethod = bufAPInvMsc.LCDisburseMethod;

                    decimal outActualAmt = bufRcvMisc.ActualAmt;
                    decimal outDocActualAmt = bufRcvMisc.DocActualAmt;
                    decimal outRpt1ActualAmt = bufRcvMisc.Rpt1ActualAmt;
                    decimal outRpt2ActualAmt = bufRcvMisc.Rpt2ActualAmt;
                    decimal outRpt3ActualAmt = bufRcvMisc.Rpt3ActualAmt;
                    string outRateGrpCode = bufRcvMisc.RateGrpCode;
                    string outCurrencyCode = bufRcvMisc.CurrencyCode;
                    DateTime? outApplyDate = bufRcvMisc.ApplyDate;

                    actualBaseTotalAmt += outActualAmt;

                    CalcDocAmtByTableName(ref outActualAmt, bufRcvMisc.APInvVendorNum, bufRcvMisc.InvoiceNum, "RcvMisc", "DocActualAmt", "ActualAmt", out outDocActualAmt, out outRpt1ActualAmt, out outRpt2ActualAmt, out outRpt3ActualAmt, out outRateGrpCode, out outCurrencyCode, out outApplyDate);

                    bufRcvMisc.ActualAmt = outActualAmt;
                    bufRcvMisc.DocActualAmt = outDocActualAmt;
                    bufRcvMisc.Rpt1ActualAmt = outRpt1ActualAmt;
                    bufRcvMisc.Rpt2ActualAmt = outRpt2ActualAmt;
                    bufRcvMisc.Rpt3ActualAmt = outRpt3ActualAmt;
                    bufRcvMisc.RateGrpCode = outRateGrpCode;
                    bufRcvMisc.CurrencyCode = outCurrencyCode;
                    bufRcvMisc.ApplyDate = outApplyDate;

                    actualDocTotalAmt += outDocActualAmt;
                }

                /*Calulate new allocation lines*/
                foreach (var ttLateCostLines_iterator in (from ttLateCostLines_Row in ds.LateCostLines
                                                          where ttLateCostLines_Row.Selected == true &&
                                                          StringExtensions.Compare(ttLateCostLines_Row.RowMod, IceRow.ROWSTATE_UPDATED) == 0
                                                          select ttLateCostLines_Row))
                {
                    ttLateCostLines = ttLateCostLines_iterator;


                    var BufRcvMiscQuery3 = DBExpressionCompiler.Compile(BufRcvMiscExpression3);
                    bufRcvMisc = BufRcvMiscQuery3(Db, Session.CompanyID, ttLateCostLines.VendorNum, ttLateCostLines.PurPoint, ttLateCostLines.PackSlip);
                    nextSeq = 1;
                    if (bufRcvMisc != null)
                    {
                        nextSeq = bufRcvMisc.MiscSeq + 1;
                    }

                    RcvMisc = new Erp.Tables.RcvMisc();
                    Db.RcvMisc.Insert(RcvMisc);
                    BufferCopy.Copy(ttLateCostLines, ref RcvMisc);

                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(bufAPInvHed.ApplyDate, "RcvMisc", Compatibility.Convert.ToString(RcvMisc.VendorNum), RcvMisc.PurPoint, RcvMisc.PackSlip, Compatibility.Convert.ToString(RcvMisc.MiscSeq), "", "", "", "", bufAPInvHed.CurrencyCode, bufAPInvHed.RateGrpCode, bufAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

                    curBasis = calcAllocBasis(ttLateCostLines, lcDM, nDec, baseWUOM, baseVUOM);
                    RcvMisc.ActualAmt = LibRoundAmountEF.RoundDecimalsApply(((totBasis == 0) ? (miscAmt / numLines) : (curBasis * miscAmt / totBasis)), pCurrList.Entry(0, Ice.Constants.LIST_DELIM), "RcvMisc", "ActualAmt");
                    RcvMisc.LCDisburseMethod = bufAPInvMsc.LCDisburseMethod;
                    RcvMisc.MiscCode = bufAPInvMsc.MiscCode;
                    RcvMisc.MiscSeq = nextSeq;

                    decimal outActualAmt2 = RcvMisc.ActualAmt;
                    decimal outDocActualAmt2 = RcvMisc.DocActualAmt;
                    decimal outRpt1ActualAmt2 = RcvMisc.Rpt1ActualAmt;
                    decimal outRpt2ActualAmt2 = RcvMisc.Rpt2ActualAmt;
                    decimal outRpt3ActualAmt2 = RcvMisc.Rpt3ActualAmt;
                    string outRateGrpCode = RcvMisc.RateGrpCode;
                    string outCurrencyCode = RcvMisc.CurrencyCode;
                    DateTime? outApplyDate = RcvMisc.ApplyDate;

                    actualBaseTotalAmt += outActualAmt2;
                    if ((!bufAPInvHed.DebitMemo && outActualAmt2 > actualBaseHighestAmt) ||
                        (bufAPInvHed.DebitMemo && outActualAmt2 < actualBaseHighestAmt))
                    {
                        actualBaseHighestAmt = outActualAmt2;
                        vendorNum = ttLateCostLines.VendorNum;
                        purPoint = ttLateCostLines.PurPoint;
                        packSlip = ttLateCostLines.PackSlip;
                        miscSeq = nextSeq;
                    }

                    CalcDocAmtByTableName(ref outActualAmt2, RcvMisc.APInvVendorNum, RcvMisc.InvoiceNum, "RcvMisc", "DocActualAmt", "ActualAmt", out outDocActualAmt2, out outRpt1ActualAmt2, out outRpt2ActualAmt2, out outRpt3ActualAmt2, out outRateGrpCode, out outCurrencyCode, out outApplyDate);

                    RcvMisc.ActualAmt = outActualAmt2;
                    RcvMisc.DocActualAmt = outDocActualAmt2;
                    RcvMisc.Rpt1ActualAmt = outRpt1ActualAmt2;
                    RcvMisc.Rpt2ActualAmt = outRpt2ActualAmt2;
                    RcvMisc.Rpt3ActualAmt = outRpt3ActualAmt2;
                    RcvMisc.RateGrpCode = outRateGrpCode;
                    RcvMisc.CurrencyCode = outCurrencyCode;
                    RcvMisc.ApplyDate = outApplyDate;

                    actualDocTotalAmt += outDocActualAmt2;

                    if ((!bufAPInvHed.DebitMemo && outDocActualAmt2 > actualDocHighestAmt) ||
                        (bufAPInvHed.DebitMemo && outDocActualAmt2 < actualDocHighestAmt))
                    {
                        actualDocHighestAmt = outDocActualAmt2;
                        docVendorNum = ttLateCostLines.VendorNum;
                        docPurPoint = ttLateCostLines.PurPoint;
                        docPackSlip = ttLateCostLines.PackSlip;
                        docMiscSeq = nextSeq;
                    }

                    Db.Validate(RcvMisc);
                }

                if (actualDocTotalAmt != bufAPInvMsc.DocMiscAmt) //Handle rounding errors so need to adjust the highest amount.
                {
                    AllocateRoundingValidation(docVendorNum, docPurPoint, docPackSlip, docMiscSeq, bufAPInvMsc.DocMiscAmt, actualDocTotalAmt, true);
                }

                if (actualBaseTotalAmt != bufAPInvMsc.MiscAmt)
                {
                    AllocateRoundingValidation(vendorNum, purPoint, packSlip, miscSeq, bufAPInvMsc.MiscAmt, actualBaseTotalAmt, false);
                }

                Db.Validate();
                trans.Complete();
            }

        }

        private void AllocateRoundingValidation(int vendorNum, string purPoint, string packSlip, int miscSeq, decimal miscAmt, decimal actualTotalAmt, bool docAmt)
        {
            Erp.Tables.RcvMisc bufRcvMisc = null;

            bufRcvMisc = FindFirstRcvMisc(Session.CompanyID, vendorNum, purPoint, packSlip, miscSeq);
            if (bufRcvMisc == null)
                return;

            if (docAmt)
            {

                bufRcvMisc.DocActualAmt += (miscAmt - actualTotalAmt);
            }
            else
            {
                bufRcvMisc.ActualAmt += (miscAmt - actualTotalAmt);
            }

            Db.Validate(bufRcvMisc);
        }

        #region APIHAPInvExp Table Methods

        partial void APIHAPInvExpAfterDelete()
        {
            ApInvHedChildDeleted();
        }

        partial void APIHAPInvExpAfterGetNew()
        {
            APIHAPInvExpAfterGetRows();
            if (!Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt"))
            {
                APIHAPInvExpTGLCRunPE();
                LibAPInvExpTranGLCBO.AssignForeignKey(CurrentFullTableset.APIHAPInvExpTGLC, ttAPIHAPInvExp, true);
            }

        }

        partial void APIHAPInvExpAfterGetRows()
        {
            var outDebitMemo = ttAPIHAPInvExp.DebitMemo;
            var outPosted = ttAPIHAPInvExp.Posted;
            var outGroupID = ttAPIHAPInvExp.GroupID;
            getAPInvHedAttributes(ttAPIHAPInvExp.VendorNum, ttAPIHAPInvExp.InvoiceNum, out outDebitMemo, out outPosted, out outGroupID);
            ttAPIHAPInvExp.DebitMemo = outDebitMemo;
            ttAPIHAPInvExp.Posted = outPosted;
            ttAPIHAPInvExp.GroupID = outGroupID;
            if (ttAPIHAPInvExp.DebitMemo == true)
            {
                ttAPIHAPInvExp.ScrExpAmt = -ttAPIHAPInvExp.ExpAmt;
                ttAPIHAPInvExp.DocScrExpAmt = -ttAPIHAPInvExp.DocExpAmt;
                ttAPIHAPInvExp.Rpt1ScrExpAmt = -ttAPIHAPInvExp.Rpt1ExpAmt;
                ttAPIHAPInvExp.Rpt2ScrExpAmt = -ttAPIHAPInvExp.Rpt2ExpAmt;
                ttAPIHAPInvExp.Rpt3ScrExpAmt = -ttAPIHAPInvExp.Rpt3ExpAmt;
            }
            else
            {
                ttAPIHAPInvExp.ScrExpAmt = ttAPIHAPInvExp.ExpAmt;
                ttAPIHAPInvExp.DocScrExpAmt = ttAPIHAPInvExp.DocExpAmt;
                ttAPIHAPInvExp.Rpt1ScrExpAmt = ttAPIHAPInvExp.Rpt1ExpAmt;
                ttAPIHAPInvExp.Rpt2ScrExpAmt = ttAPIHAPInvExp.Rpt2ExpAmt;
                ttAPIHAPInvExp.Rpt3ScrExpAmt = ttAPIHAPInvExp.Rpt3ExpAmt;
            }
            if (APInvHed != null)
            {
                ttAPIHAPInvExp.CurrencyCode = APInvHed.CurrencyCode;
            }
            var TranGLCQuery2 = DBExpressionCompiler.Compile(TranGLCExpression2);
            TranGLC = TranGLCQuery2(Db, ttAPIHAPInvExp.Company, "APInvExp", Compatibility.Convert.ToString(ttAPIHAPInvExp.VendorNum), Compatibility.Convert.ToString(ttAPIHAPInvExp.InvoiceNum), Compatibility.Convert.ToString(ttAPIHAPInvExp.InvoiceLine), Compatibility.Convert.ToString(ttAPIHAPInvExp.InvExpSeq), false);
            if (TranGLC != null)
                ttAPIHAPInvExp.GLAccount = TranGLC.GLAccount;
        }

        partial void APInvDtlDEASchAfterGetRows()
        {
            APInvHed = FindFirstAPInvHed(ttAPInvDtlDEASch.Company, ttAPInvDtlDEASch.VendorNum, ttAPInvDtlDEASch.InvoiceNum);
            if (APInvHed != null)
            {
                ttAPInvDtlDEASch.GroupID = APInvHed.GroupID;
                ttAPInvDtlDEASch.CurrencyCode = APInvHed.CurrencyCode;
            }
            ttAPInvDtlDEASch.DocAmortAmt = ttAPInvDtlDEASch.DocAmortAmount;
            bool debitMemo = APInvHed.DebitMemo;
            ttAPInvDtlDEASch.DspAmortAmt = debitMemo ? -ttAPInvDtlDEASch.AmortAmt : ttAPInvDtlDEASch.AmortAmt;
            ttAPInvDtlDEASch.DocDspAmortAmt = debitMemo ? -ttAPInvDtlDEASch.DocAmortAmt : ttAPInvDtlDEASch.DocAmortAmt;
            ttAPInvDtlDEASch.Rpt1DspAmortAmt = debitMemo ? -ttAPInvDtlDEASch.Rpt1AmortAmt : ttAPInvDtlDEASch.Rpt1AmortAmt;
            ttAPInvDtlDEASch.Rpt2DspAmortAmt = debitMemo ? -ttAPInvDtlDEASch.Rpt2AmortAmt : ttAPInvDtlDEASch.Rpt2AmortAmt;
            ttAPInvDtlDEASch.Rpt3DspAmortAmt = debitMemo ? -ttAPInvDtlDEASch.Rpt3AmortAmt : ttAPInvDtlDEASch.Rpt3AmortAmt;
        }
        partial void APInvDtlDEASchBeforeUpdate()
        {
            if (ttAPInvDtlDEASch.DspAmortAmt < 0m || ttAPInvDtlDEASch.DocDspAmortAmt < 0m)
            {
                throw new BLException(Strings.AmortAmtMustBePositive);
            }
            ValidateAmortDate();

            bool debitMemo = ttAPInvDtl.DebitMemo;
            ttAPInvDtlDEASch.AmortAmt = debitMemo ? -ttAPInvDtlDEASch.DspAmortAmt : ttAPInvDtlDEASch.DspAmortAmt;
            ttAPInvDtlDEASch.DocAmortAmt = debitMemo ? -ttAPInvDtlDEASch.DocDspAmortAmt : ttAPInvDtlDEASch.DocDspAmortAmt;
            ttAPInvDtlDEASch.Rpt1AmortAmt = debitMemo ? -ttAPInvDtlDEASch.Rpt1DspAmortAmt : ttAPInvDtlDEASch.Rpt1DspAmortAmt;
            ttAPInvDtlDEASch.Rpt2AmortAmt = debitMemo ? -ttAPInvDtlDEASch.Rpt2DspAmortAmt : ttAPInvDtlDEASch.Rpt2DspAmortAmt;
            ttAPInvDtlDEASch.Rpt3AmortAmt = debitMemo ? -ttAPInvDtlDEASch.Rpt3DspAmortAmt : ttAPInvDtlDEASch.Rpt3DspAmortAmt;
            ttAPInvDtlDEASch.DocAmortAmount = ttAPInvDtlDEASch.DocAmortAmt;
        }

        private void ValidateAmortDate()
        {
            ttAPInvDtl = (
                from ttAPInvDtl_Row in CurrentFullTableset.APInvDtl
                where ttAPInvDtl_Row.Company.Compare(ttAPInvDtlDEASch.Company) == 0 && ttAPInvDtl_Row.VendorNum == ttAPInvDtlDEASch.VendorNum &&
                      ttAPInvDtl_Row.InvoiceNum.Compare(ttAPInvDtlDEASch.InvoiceNum) == 0 && ttAPInvDtl_Row.InvoiceLine == ttAPInvDtlDEASch.InvoiceLine
                select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.TtApInvDtlNotFound);
            }
            if (ttAPInvDtlDEASch.AmortDate < ttAPInvDtl.DEAStartDate || ttAPInvDtlDEASch.AmortDate > ttAPInvDtl.DEAEndDate)
            {
                throw new BLException(Strings.AmortDateMustBeBetweenStartAndEndDates(ttAPInvDtlDEASch.AmortDate));
            }

            var fiscalPer = FindFirstFiscalPer(Session.CompanyID, ttAPInvDtlDEASch.FiscalCalendarID, ttAPInvDtlDEASch.AmortDate, ttAPInvDtlDEASch.AmortDate);
            if (fiscalPer == null)
            {
                throw new BLException(Strings.CannotFindAValidFiscalPeriodForAmortDate(ttAPInvDtlDEASch.AmortDate));
            }

            if (fiscalPer.FiscalYear != ttAPInvDtlDEASch.FiscalYear || fiscalPer.FiscalYearSuffix.Compare(ttAPInvDtlDEASch.FiscalYearSuffix) != 0 || fiscalPer.FiscalPeriod != ttAPInvDtlDEASch.FiscalPeriod)
            {
                throw new BLException(Strings.AmortDateIsWithinFiscalYearSuffixPeriod(ttAPInvDtlDEASch.AmortDate, fiscalPer.FiscalYear, fiscalPer.FiscalYearSuffix, fiscalPer.FiscalPeriod));
            }
        }

        partial void APInvDtlDEASchAfterUpdate()
        {
            ttAPInvDtl = (
                from ttAPInvDtl_Row in CurrentFullTableset.APInvDtl
                where ttAPInvDtl_Row.Company.Compare(ttAPInvDtlDEASch.Company) == 0 && ttAPInvDtl_Row.VendorNum == ttAPInvDtlDEASch.VendorNum &&
                      ttAPInvDtl_Row.InvoiceNum.Compare(ttAPInvDtlDEASch.InvoiceNum) == 0 && ttAPInvDtl_Row.InvoiceLine == ttAPInvDtlDEASch.InvoiceLine
                select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl != null)
            {
                calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, false);
                ttAPInvDtl.DEAScheduled = CurrentFullTableset.APInvDtlDEASch.Any(row => row.RowMod.Compare(IceRow.ROWSTATE_DELETED) != 0);
            }
        }

        partial void APInvDtlDEASchAfterDelete()
        {
            ttAPInvDtl = (
                from ttAPInvDtl_Row in CurrentFullTableset.APInvDtl
                where ttAPInvDtl_Row.Company.Compare(ttAPInvDtlDEASch.Company) == 0 && ttAPInvDtl_Row.VendorNum == ttAPInvDtlDEASch.VendorNum &&
                      ttAPInvDtl_Row.InvoiceNum.Compare(ttAPInvDtlDEASch.InvoiceNum) == 0 && ttAPInvDtl_Row.InvoiceLine == ttAPInvDtlDEASch.InvoiceLine
                select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl != null)
            {
                calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, false);
                ttAPInvDtl.DEAScheduled = ExistsAPInvDtlDEASch(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, posted: false);
            }
        }

        partial void APIHAPInvExpAfterUpdate()
        {
            BufferCopy.Copy(APIHAPInvExp, ref ttAPIHAPInvExp);
            APIHAPInvExpAfterGetRows();

            /* Create a ttAPInvDtl record to pass back since it may have changed. */
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, APIHAPInvExp.Company, APIHAPInvExp.VendorNum, APIHAPInvExp.InvoiceNum);
            if (APInvHed != null)
            {
                refreshttAPInvHed();
            }
        }

        partial void APIHAPInvExpBeforeCreate()
        {
            Erp.Tables.APInvExp bAPInvExp = null;
            int NextSeq = 0;
            NextSeq = 1;


            bAPInvExp = FindLastAPInvExp(ttAPIHAPInvExp.Company, ttAPIHAPInvExp.VendorNum, ttAPIHAPInvExp.InvoiceNum, ttAPIHAPInvExp.InvoiceLine);
            if (bAPInvExp != null)
            {
                NextSeq = bAPInvExp.InvExpSeq + 1;
            }

            ttAPIHAPInvExp.InvExpSeq = NextSeq;

            /* Update related fields in ttAPIHAPInvExpTGLC */
            LibAPInvExpTranGLCBO.AssignForeignKey(CurrentFullTableset.APIHAPInvExpTGLC, ttAPIHAPInvExp, true);
        }

        partial void APIHAPInvExpBeforeDelete()
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPIHAPInvExp.Company, ttAPIHAPInvExp.VendorNum, ttAPIHAPInvExp.InvoiceNum);
            if (APInvHed != null)
            {
                rSaveAPInvHedRowid = APInvHed.SysRowID;
            }
        }

        partial void APIHAPInvExpBeforeUpdate()
        {
            if (canUpdateInvoice(ttAPIHAPInvExp.VendorNum, ttAPIHAPInvExp.InvoiceNum).canUpdateInvoice == false)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvExp");
            }
            if (ttAPIHAPInvExp.ScrExpAmt == 0)
            {
                ExceptionManager.AddBLException(Strings.InvalidDistributionAmount, "APInvExp", "ExpAmt");
            }
            if (ExceptionManager.Exceptions.Count == 0)
            {
                if (ttAPIHAPInvExp.DebitMemo == false)
                {
                    ttAPIHAPInvExp.ExpAmt = ttAPIHAPInvExp.ScrExpAmt;
                    ttAPIHAPInvExp.DocExpAmt = ttAPIHAPInvExp.DocScrExpAmt;
                    ttAPIHAPInvExp.Rpt1ExpAmt = ttAPIHAPInvExp.Rpt1ScrExpAmt;
                    ttAPIHAPInvExp.Rpt2ExpAmt = ttAPIHAPInvExp.Rpt2ScrExpAmt;
                    ttAPIHAPInvExp.Rpt3ExpAmt = ttAPIHAPInvExp.Rpt3ScrExpAmt;
                }
                else
                {
                    ttAPIHAPInvExp.ExpAmt = -ttAPIHAPInvExp.ScrExpAmt;
                    ttAPIHAPInvExp.DocExpAmt = -ttAPIHAPInvExp.DocScrExpAmt;
                    ttAPIHAPInvExp.Rpt1ExpAmt = -ttAPIHAPInvExp.Rpt1ScrExpAmt;
                    ttAPIHAPInvExp.Rpt2ExpAmt = -ttAPIHAPInvExp.Rpt2ScrExpAmt;
                    ttAPIHAPInvExp.Rpt3ExpAmt = -ttAPIHAPInvExp.Rpt3ScrExpAmt;
                }
            }
        }

        #endregion

        #region APIHAPInvExpTGLC Table Methods

        private void APIHAPInvExpTGLCAfterGetNewLocal()
        {
            Erp.Tables.APInvHed bAPInvHed = null;

            ttAPIHAPInvExp = (from ttAPIHAPInvExp_Row in CurrentFullTableset.APIHAPInvExp
                              where StringExtensions.Compare(ttAPIHAPInvExp_Row.Company, Session.CompanyID) == 0
                                  && ttAPIHAPInvExp_Row.VendorNum == ttAPIHAPInvExpTGLC.VendorNum
                                  && StringExtensions.Compare(ttAPIHAPInvExp_Row.InvoiceNum, ttAPIHAPInvExpTGLC.InvoiceNum) == 0
                                  && ttAPIHAPInvExp_Row.InvoiceLine == ttAPIHAPInvExpTGLC.InvoiceLine
                                  && ttAPIHAPInvExp_Row.InvExpSeq == ttAPIHAPInvExpTGLC.InvExpSeq
                                  && StringExtensions.Compare(ttAPIHAPInvExp_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                              select ttAPIHAPInvExp_Row).FirstOrDefault();
            if (ttAPIHAPInvExp != null)
            {
                ttAPIHAPInvExpTGLC.GroupID = ttAPIHAPInvExp.GroupID;
                ttAPIHAPInvExpTGLC.Key5 = ttAPIHAPInvExp.GroupID;
            }
            else
            {
                bAPInvHed = FindFirstAPInvHed(Session.CompanyID, ttAPIHAPInvExpTGLC.VendorNum, ttAPIHAPInvExpTGLC.InvoiceNum);
                if (bAPInvHed != null)
                {
                    ttAPIHAPInvExpTGLC.GroupID = bAPInvHed.GroupID;
                    ttAPIHAPInvExpTGLC.Key5 = bAPInvHed.GroupID;
                }
            }
        }

        partial void APIHAPInvExpTGLCAfterGetNew()
        {
            APIHAPInvExpTGLCAfterGetNewLocal();
            LibAPInvExpTranGLCBO.AfterGetNew(ttAPIHAPInvExpTGLC, CurrentFullTableset.APIHAPInvExpTGLC);
        }

        partial void APIHAPInvExpTGLCAfterGetRows()
        {
            LibAPInvExpTranGLCBO.AfterGetRows(ttAPIHAPInvExpTGLC);


            ttAPIHAPInvExp = (from ttAPIHAPInvExp_Row in CurrentFullTableset.APIHAPInvExp
                              where StringExtensions.Compare(ttAPIHAPInvExp_Row.Company, ttAPIHAPInvExpTGLC.Company) == 0
                              && StringExtensions.Compare(ttAPIHAPInvExp_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) == 0
                              && ttAPIHAPInvExp_Row.VendorNum == ttAPIHAPInvExpTGLC.VendorNum
                              && StringExtensions.Compare(ttAPIHAPInvExp_Row.InvoiceNum, ttAPIHAPInvExpTGLC.InvoiceNum) == 0
                              && ttAPIHAPInvExp_Row.InvoiceLine == ttAPIHAPInvExpTGLC.InvoiceLine
                              && ttAPIHAPInvExp_Row.InvExpSeq == ttAPIHAPInvExpTGLC.InvExpSeq
                              select ttAPIHAPInvExp_Row).FirstOrDefault();

            if (ttAPIHAPInvExp == null)
            {

                var APInvExpQuery3 = DBExpressionCompiler.Compile(APInvExpExpression3);
                APInvExp = APInvExpQuery3(Db, ttAPIHAPInvExpTGLC.Company, ttAPIHAPInvExpTGLC.VendorNum, ttAPIHAPInvExpTGLC.InvoiceNum, ttAPIHAPInvExpTGLC.InvoiceLine, ttAPIHAPInvExpTGLC.InvExpSeq);
                if (APInvExp != null)
                {
                    ttAPIHAPInvExp = new Erp.Tablesets.APIHAPInvExpRow();
                    CurrentFullTableset.APIHAPInvExp.Add(ttAPIHAPInvExp);
                    BufferCopy.Copy(APInvExp, ref ttAPIHAPInvExp);
                    ttAPIHAPInvExp.SysRowID = APInvExp.SysRowID;
                    APIHAPInvExpAfterGetRows();
                }
            }/* if not available ttAPIHAPInvExp */

            if (ttAPIHAPInvExp != null)
            {
                if (String.IsNullOrEmpty(ttAPIHAPInvExp.DispGLAcct))
                {
                    ttAPIHAPInvExp.DispGLAcct = ttAPIHAPInvExpTGLC.GLAccountGLAcctDisp;
                }
            }
        }

        partial void APIHAPInvExpTGLCBeforeCreate()
        {
            LibAPInvExpTranGLCBO.BeforeCreate(ttAPIHAPInvExpTGLC);
        }

        partial void APIHAPInvExpTGLCBeforeDelete()
        {
            LibAPInvExpTranGLCBO.BeforeDelete(ttAPIHAPInvExpTGLC, CurrentFullTableset.APIHAPInvExpTGLC);
        }

        partial void APIHAPInvExpTGLCBeforeUpdate()
        {
            LibAPInvExpTranGLCBO.BeforeUpdate(ttAPIHAPInvExpTGLC);
            var vParams = LibAPInvExpTranGLCBO.GetDefaultValidateParams(ttAPIHAPInvExpTGLC);
            vParams.MessageDoc = Strings.InvalidHeaderAccountDoc(vParams.DocumentKeys.Key2, vParams.GLAccount, ttAPIHAPInvExpTGLC.BookID);
            vParams.MessageTab = Strings.ReviewHeaderGLAnalysisTab;
            vParams.RestrictID = APInvoiceRestrictionString;
            var ttAPInvHedRow = FindFirstAPInvHed(ttAPIHAPInvExpTGLC.Company, ttAPIHAPInvExpTGLC.VendorNum, ttAPIHAPInvExpTGLC.InvoiceNum);
            if (ttAPInvHedRow != null)
                vParams.EffectiveDate = ttAPInvHedRow.InvoiceDate;

            LibAPInvExpTranGLCBO.ValidateGLAccount(vParams);

            //It validates inside if it exists a GLAcctDisp. If not, it creates a new record for it.
            GLCreateGLAcctDisp.CheckDispAccountGeneral(ttAPIHAPInvExpTGLC.Company, ttAPIHAPInvExpTGLC.COACode, ttAPIHAPInvExpTGLC.GLAccount);

            //Look for GLAcctDisp that corresponds to the GL Account. If not found create it.
            GLAcctDisp glAcctDisp = FindFirstGLAcctDispByGLAccount(ttAPIHAPInvExpTGLC.Company, ttAPIHAPInvExpTGLC.COACode, ttAPIHAPInvExpTGLC.GLAccount);

            //If GLAcctDisp was created or already existed, set the proper information.
            if (glAcctDisp != null)
            {
                ttAPIHAPInvExpTGLC.GLAccountGLAcctDisp = glAcctDisp.GLAcctDisp1;
                ttAPIHAPInvExpTGLC.GLAccountAccountDesc = glAcctDisp.AccountDesc;
            }
        }

        #endregion

        private void APIHAPInvExpTGLCRunPE()
        {
            LibAPInvExpTranGLCBO.CreateDefaultForMultiBook(CurrentFullTableset.APIHAPInvExpTGLC, ttAPIHAPInvExp, "AP Invoice");
            SetTranDate(
                (from ttTRANGLC_Row in CurrentFullTableset.APIHAPInvExpTGLC
                 where StringExtensions.Compare(ttTRANGLC_Row.RowMod, IceRow.ROWSTATE_ADDED) == 0
                 select ttTRANGLC_Row).FirstOrDefault()
                );
            ttAPIHAPInvExp = (from ttAPIHAPInvExp_Row in CurrentFullTableset.APIHAPInvExp
                              where StringExtensions.Compare(ttAPIHAPInvExp_Row.RowMod, IceRow.ROWSTATE_ADDED) == 0
                              select ttAPIHAPInvExp_Row).FirstOrDefault();
        }

        #region APIHAPInvMsc Table Methods

        partial void APIHAPInvMscAfterDelete()
        {

            decimal totalExp = 0;
            decimal totalMisc = 0;
            HashSet<string> rcvMiscDeleted = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            if (ttAPIHAPInvMsc == null)
            {
                ttAPIHAPInvMsc = (from APIHAPInvMscRow in CurrentFullTableset.APIHAPInvMsc
                                  where APIHAPInvMscRow.RowMod.Equals(IceRow.ROWSTATE_DELETED, StringComparison.OrdinalIgnoreCase)
                                  select APIHAPInvMscRow).FirstOrDefault();
            }
            foreach (var ttRcvMiscIterator in from ttRcvMiscRow in CurrentFullTableset.RcvMisc
                                              where ttRcvMiscRow.RowMod.Equals(IceRow.ROWSTATE_DELETED, StringComparison.OrdinalIgnoreCase)
                                              select ttRcvMiscRow)
            {
                string key = ttRcvMiscIterator.Company + ttRcvMiscIterator.APInvVendorNum + ttRcvMiscIterator.InvoiceNum
                             + ttRcvMiscIterator.InvoiceLine + ttRcvMiscIterator.MscNum + ttRcvMiscIterator.MiscSeq;
                if (!rcvMiscDeleted.Contains(key, StringComparer.OrdinalIgnoreCase))
                {
                    rcvMiscDeleted.Add(key);
                }
            }
            if (ttAPIHAPInvMsc != null)
            {
                foreach (var rcvMiscIterator in SelectRcvMiscWithUpdLock(ttAPIHAPInvMsc.Company, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, ttAPIHAPInvMsc.InvoiceLine, ttAPIHAPInvMsc.MscNum))
                {
                    string key = rcvMiscIterator.Company + rcvMiscIterator.APInvVendorNum + rcvMiscIterator.InvoiceNum
                                 + rcvMiscIterator.InvoiceLine + rcvMiscIterator.MscNum + rcvMiscIterator.MiscSeq;
                    if (!rcvMiscDeleted.Contains(key, StringComparer.OrdinalIgnoreCase))
                    {
                        Db.RcvMisc.Delete(rcvMiscIterator);
                    }
                }
            }
            //if any of Header related APInvExp do not have any matching APInvExp  and total misc charge and expense amounts are not the same then we need to take care of extra APInvExp records
            var APInvHedQuery30 = DBExpressionCompiler.Compile(APInvHedExpression30);
            APInvHed = APInvHedQuery30(Db, rSaveAPInvHedRowid);
            if (APInvHed != null)
            {

                foreach (var aPInvExpPartial_row in (this.SelectAPInvExp2(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                {
                    totalExp = totalExp + aPInvExpPartial_row.DocExpAmt;
                }

                foreach (var aPInvMscPartial_row in (this.SelectPartialAPInvMsc(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                {

                    totalMisc = totalMisc + aPInvMscPartial_row.DocMiscAmt;
                }
                if (totalExp != totalMisc)
                {
                    APSyncAPInvExp.RunSyncAPInvExp("APInvHed", Guid.Empty, APInvHed.SysRowID, Guid.Empty, Guid.Empty, false, "", 0M, "MiscCharge", string.Empty, out lAPInvExpUpdated);
                }
            }
            ApInvHedChildDeleted();
            /* Call TaxEngine Procedure  */
            if ((APInvHed.ReadyToCalc && ReCalcTaxes))
            {
                APInvoiceTableset ds = CurrentFullTableset;
                SetReadyToCalc("", APInvHed.InvoiceNum, APInvHed.VendorNum, false, false, ref ds);
                CurrentFullTableset = ds;
            }

            if (ExistsXbSystLineTax(Session.CompanyID, false))
            {
                using (Erp.Internal.AP.SyncAPInvExp APSyncAPInvExp = new Internal.AP.SyncAPInvExp(Db))
                {
                    foreach (Guid InvTax in GetNonDedTaxForInvoice(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum))
                    {
                        APSyncAPInvExp.RunSyncAPInvExp(string.Empty, Guid.Empty, Guid.Empty, Guid.Empty, InvTax, false, string.Empty, decimal.Zero, "Tax", "APInvTax", out lAPInvExpUpdated);
                    }
                }
            }
            else
            {
                using (Erp.Internal.AP.SyncAPInvExp APSyncAPInvExp = new Internal.AP.SyncAPInvExp(Db))
                {
                    foreach (Guid invMscTax in GetNonDedTaxesForInvHedMsc(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum))
                    {
                        APSyncAPInvExp.RunSyncAPInvExp("HedMsc", Guid.Empty, Guid.Empty, invMscTax, Guid.Empty, false, string.Empty, decimal.Zero, "Tax", "APInvHedMscTax", out lAPInvExpUpdated);
                    }
                }
            }
        }

        partial void APIHAPInvMscAfterGetNew()
        {
            APIHAPInvMscAfterGetRows();

            if (isUSLocalization)
            {
                using (Erp.Internal.CSF.USA usa = new Erp.Internal.CSF.USA(this.Db))
                {
                    usa.SetAPIHAPInvMsc1099VendorDefaults(ttAPIHAPInvMsc);
                }
            }
        }

        partial void APIHAPInvMscAfterGetRows()
        {
            string currid = string.Empty;
            decimal[] allocAmt = new decimal[] { 0, 0, 0, 0, 0 };
            int nDec = 0;
            string baseWUOM = string.Empty;
            string baseVUOM = string.Empty;
            string lcDM = string.Empty;
            decimal totBasis = decimal.Zero;

            var outDebitMemo2 = ttAPIHAPInvMsc.DebitMemo;
            var outPosted2 = ttAPIHAPInvMsc.Posted;
            var outGroupID2 = ttAPIHAPInvMsc.GroupID;
            getAPInvHedAttributes(ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, out outDebitMemo2, out outPosted2, out outGroupID2);
            ttAPIHAPInvMsc.DebitMemo = outDebitMemo2;
            ttAPIHAPInvMsc.Posted = outPosted2;
            ttAPIHAPInvMsc.GroupID = outGroupID2;

            ttAPIHAPInvMsc.InPrice = APInvHed.InPrice;

            if (ttAPIHAPInvMsc.InPrice == false)
            {
                if (ttAPIHAPInvMsc.DebitMemo == true)
                {
                    ttAPIHAPInvMsc.ScrMiscAmt = -ttAPIHAPInvMsc.MiscAmt;
                    ttAPIHAPInvMsc.ScrDocMiscAmt = -ttAPIHAPInvMsc.DocMiscAmt;
                }
                else
                {
                    ttAPIHAPInvMsc.ScrMiscAmt = ttAPIHAPInvMsc.MiscAmt;
                    ttAPIHAPInvMsc.ScrDocMiscAmt = ttAPIHAPInvMsc.DocMiscAmt;
                }
            }
            else
            {
                if (ttAPIHAPInvMsc.DebitMemo == true)
                {
                    ttAPIHAPInvMsc.ScrMiscAmt = -ttAPIHAPInvMsc.InMiscAmt;
                    ttAPIHAPInvMsc.ScrDocMiscAmt = -ttAPIHAPInvMsc.DocInMiscAmt;
                }
                else
                {
                    ttAPIHAPInvMsc.ScrMiscAmt = ttAPIHAPInvMsc.InMiscAmt;
                    ttAPIHAPInvMsc.ScrDocMiscAmt = ttAPIHAPInvMsc.DocInMiscAmt;
                }
            }



            if (String.IsNullOrEmpty(pCurrList))
            {
                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
            }

            string scrMiscAmtFldName = string.Empty;
            for (i = 2; i <= 4; i++)
            {
                if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                {
                    scrMiscAmtFldName = "Rpt" + (i - 1).ToString() + "ScrMiscAmt";
                    ttAPIHAPInvMsc[scrMiscAmtFldName] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPIHAPInvMsc.ScrDocMiscAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPIHAPInvMsc", "ScrInvoiceVendorAmt");
                }
            }

            /* Set Currency fields */
            ttAPIHAPInvMsc.CurrencyCode = APInvHed.CurrencyCode;
            ttAPIHAPInvMsc.BaseCurrSymbol = getBaseCurrSymbol();
            var outCurrSymbol = ttAPIHAPInvMsc.CurrSymbol;
            var outCurrencySwitch = ttAPIHAPInvMsc.CurrencySwitch;
            getCurrencyInfo(APInvHed.CurrencyCode, out outCurrSymbol, out outCurrencySwitch, out currid);
            ttAPIHAPInvMsc.CurrSymbol = outCurrSymbol;
            ttAPIHAPInvMsc.CurrencySwitch = outCurrencySwitch;
            ttAPIHAPInvMsc.RecordSource = ((ttAPIHAPInvMsc.PONum > 0) ? ((ttAPIHAPInvMsc.POLine > 0) ? Strings.POLine : Strings.POHeader) : Strings.Manual);

            /* SCR #55657 - Do not allow LCFlag to be changed if misc charge is already linked */
            if (ttAPIHAPInvMsc.ContainerID != 0 || !String.IsNullOrEmpty(ttAPIHAPInvMsc.PackSlip))
            {
                ttAPIHAPInvMsc.LCEnabled = false;
            }
            else
            {
                ttAPIHAPInvMsc.LCEnabled = true;
            }

            nDec = LibGetDecimalsNumber.getDecimalsNumberByName("RcvDtl", "AppliedRCptLCAmt", "");
            lcDM = ttAPIHAPInvMsc.LCDisburseMethod;

            UOMClass = FindFirstUOMClassByType(Session.CompanyID, "Weight");
            if (UOMClass != null)
            {
                baseWUOM = UOMClass.BaseUOMCode;
            }

            UOMClass = FindFirstUOMClassByType(Session.CompanyID, "Volume");
            if (UOMClass != null)
            {
                baseVUOM = UOMClass.BaseUOMCode;
            }

            /* Calculate total basis */


            var RcvMiscQuery = DBExpressionCompiler.Compile(RcvMiscExpression);
            foreach (var RcvMisc_iterator in (RcvMiscQuery(Db, Session.CompanyID, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, ttAPIHAPInvMsc.InvoiceLine, ttAPIHAPInvMsc.MscNum)))
            {
                RcvMisc = RcvMisc_iterator;


                RcvDtl = FindFirstRcvDtl(Session.CompanyID, RcvMisc.VendorNum, RcvMisc.PurPoint, RcvMisc.PackSlip, RcvMisc.PackLine);
                totBasis = totBasis + calcAllocBasis(RcvDtl, lcDM, nDec, baseWUOM, baseVUOM);
                allocAmt[0] = allocAmt[0] + RcvMisc.ActualAmt;
                allocAmt[1] = allocAmt[1] + RcvMisc.DocActualAmt;
                allocAmt[2] = allocAmt[2] + RcvMisc.Rpt1ActualAmt;
                allocAmt[3] = allocAmt[3] + RcvMisc.Rpt2ActualAmt;
                allocAmt[4] = allocAmt[4] + RcvMisc.Rpt3ActualAmt;
            }

            ttAPIHAPInvMsc.AllocBasis = totBasis;
            ttAPIHAPInvMsc.AllocAmt = allocAmt[0];
            ttAPIHAPInvMsc.DocAllocAmt = allocAmt[1];
            ttAPIHAPInvMsc.Rpt1AllocAmt = allocAmt[2];
            ttAPIHAPInvMsc.Rpt2AllocAmt = allocAmt[3];
            ttAPIHAPInvMsc.Rpt3AllocAmt = allocAmt[4];
            ttAPIHAPInvMsc.UnallocAmt = ttAPIHAPInvMsc.MiscAmt - allocAmt[0];
            ttAPIHAPInvMsc.DocUnallocAmt = ttAPIHAPInvMsc.DocMiscAmt - allocAmt[1];
            ttAPIHAPInvMsc.Rpt1UnallocAmt = ttAPIHAPInvMsc.Rpt1MiscAmt - allocAmt[2];
            ttAPIHAPInvMsc.Rpt2UnallocAmt = ttAPIHAPInvMsc.Rpt2MiscAmt - allocAmt[3];
            ttAPIHAPInvMsc.Rpt3UnallocAmt = ttAPIHAPInvMsc.Rpt3MiscAmt - allocAmt[4];

            AssignAPIHAPInvMscExtAmtFields();
        }

        partial void APIHAPInvMscAfterUpdate()
        {
            int saveVendorNum = 0;
            string saveInvoiceNum = string.Empty;
            int saveInvoiceLine = 0;
            int saveMscNum = 0;
            Guid rCurrentAPInvMscSysRowID = APIHAPInvMsc.SysRowID;
            bool afterTaxCalc = false;


            if (APInvHed != null && (APInvHed.ReadyToCalc && ReCalcTaxes))
            {
                saveVendorNum = APIHAPInvMsc.VendorNum;
                saveInvoiceNum = APIHAPInvMsc.InvoiceNum;
                saveInvoiceLine = APIHAPInvMsc.InvoiceLine;
                saveMscNum = APIHAPInvMsc.MscNum;

                if (!ExistsAPInvDtl3(Session.CompanyID, APIHAPInvMsc.VendorNum, APIHAPInvMsc.InvoiceNum) && !HaveAPTaxToLineLevel(Session.CompanyID))
                    ErpCallContext.SetDisposableKey("NonRecTax-APInvDtl");

                APInvoiceTableset ds = CurrentFullTableset;
                SetReadyToCalc("", APIHAPInvMsc.InvoiceNum, APIHAPInvMsc.VendorNum, false, false, ref ds);
                CurrentFullTableset = ds;
                afterTaxCalc = true;
                var APInvMscQuery2 = DBExpressionCompiler.Compile(APInvMscExpression2);
                APIHAPInvMsc = APInvMscQuery2(Db, Session.CompanyID, saveVendorNum, saveInvoiceNum, saveInvoiceLine, saveMscNum);
            }

            /* Calcaptax.i is in the APInvHed
               write trigger code, but since the APInvMsc trigger code updates the
               APInvHed record, the APInvMsc record used in calcaptax.i is not yet
               available because the record hasn't been committed to the db yet. */
            Guid rCurrentAPInvMscRowid = Guid.Empty;
            rCurrentAPInvMscRowid = APIHAPInvMsc.SysRowID;
            Db.DisableTriggers(APInvHed.GetTableName(), TriggerType.Write);
            APInvHed = FindFirstAPInvHedWithUpdLock(APIHAPInvMsc.Company, APIHAPInvMsc.VendorNum, APIHAPInvMsc.InvoiceNum);

            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
            APInvHed.TaxAmt = 0;
            APInvHed.DocTaxAmt = 0;
            APInvHed.Rpt1TaxAmt = 0;
            APInvHed.Rpt2TaxAmt = 0;
            APInvHed.Rpt3TaxAmt = 0;
            APInvHed.WithholdAmt = 0;
            APInvHed.DocWithholdAmt = 0;
            APInvHed.Rpt1WithholdAmt = 0;
            APInvHed.Rpt2WithholdAmt = 0;
            APInvHed.Rpt3WithholdAmt = 0;

            var APInvTaxQuery = DBExpressionCompiler.Compile(APInvTaxExpression);
            foreach (var APInvTax_iterator in (APInvTaxQuery(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
            {
                APInvTax = APInvTax_iterator;
                if (APInvTax.CollectionType != 1)
                {
                    APInvHed.TaxAmt = APInvHed.TaxAmt + APInvTax.TaxAmt + APInvTax.TaxAmtVar;
                    APInvHed.DocTaxAmt = APInvHed.DocTaxAmt + APInvTax.DocTaxAmt + APInvTax.DocTaxAmtVar;
                }
                else
                {
                    APInvHed.WithholdAmt = APInvHed.WithholdAmt + APInvTax.TaxAmt + APInvTax.TaxAmtVar;
                    APInvHed.DocWithholdAmt = APInvHed.DocWithholdAmt + APInvTax.DocTaxAmt + APInvTax.DocTaxAmtVar;
                    APInvHed.Rpt1WithholdAmt = APInvHed.Rpt1WithholdAmt + APInvTax.Rpt1TaxAmt + APInvTax.Rpt1TaxAmtVar;
                    APInvHed.Rpt2WithholdAmt = APInvHed.Rpt2WithholdAmt + APInvTax.Rpt2TaxAmt + APInvTax.Rpt2TaxAmtVar;
                    APInvHed.Rpt3WithholdAmt = APInvHed.Rpt3WithholdAmt + APInvTax.Rpt3TaxAmt + APInvTax.Rpt3TaxAmtVar;
                }
            }

            LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvHed, false, "TaxAmt", pCurrList, "APInvHed", APInvHed.CurrencyCode, ttChainRows);

            UpdateHeaderDiscounts(ref APInvHed);


            Db.EnableTriggers(APInvHed.GetTableName(), TriggerType.Write);

            var APInvMscQuery4 = DBExpressionCompiler.Compile(APInvMscExpression4);
            APIHAPInvMsc = APInvMscQuery4(Db, rCurrentAPInvMscRowid);

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, APIHAPInvMsc.Company, APIHAPInvMsc.VendorNum, APIHAPInvMsc.InvoiceNum);

            bool updateExtSourceExists = false;
            if (!((APInvHed.InPrice == true) && (afterTaxCalc == true)))
            {
                if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt_sourceTs"))
                {
                    Erp.Tablesets.UpdExtAPInvoiceTableset ds = (UpdExtAPInvoiceTableset)Erp.Internal.Lib.ErpCallContext.GetValue("UpdateExt_sourceTs");
                    var sourceAPInvExpRow = (from sourceAPInvExp_Row in ds.APIHAPInvExp
                                             where sourceAPInvExp_Row.Company.KeyEquals(APIHAPInvMsc.Company) &&
                                            sourceAPInvExp_Row.VendorNum == APIHAPInvMsc.VendorNum &&
                                            sourceAPInvExp_Row.InvoiceNum.KeyEquals(APIHAPInvMsc.InvoiceNum) &&
                                            sourceAPInvExp_Row.InvoiceLine == APIHAPInvMsc.InvoiceLine
                                             select sourceAPInvExp_Row).FirstOrDefault();

                    if (sourceAPInvExpRow != null)
                    {
                        updateExtSourceExists = true;
                    }
                }

                if (!Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") || (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") && !updateExtSourceExists))
                {
                    APSyncAPInvExp.RunSyncAPInvExp("APInvHed", Guid.Empty, APInvHed.SysRowID, APIHAPInvMsc.SysRowID, Guid.Empty, lGetAcctForUnrcvd, "", dOldMiscAmt, "MiscCharge", string.Empty, out lAPInvExpUpdated);
                }

            }

            /* Refresh tt values */

            Db.ReadCurrent(ref APIHAPInvMsc);
            BufferCopy.Copy(APIHAPInvMsc, ref ttAPIHAPInvMsc);

            /* Refind APInvHed */
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, APIHAPInvMsc.Company, APIHAPInvMsc.VendorNum, APIHAPInvMsc.InvoiceNum);
            if (APInvHed != null)
            {
                refreshttAPInvHed();
                if (lAPInvExpUpdated == true)
                {
                    foreach (var APInvExp_iterator in (SelectAPInvExp(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                    {
                        APInvExp = APInvExp_iterator;
                        refreshttAPIHAPInvExp();
                    }

                    RefreshAfterSyncAPInvExp();
                }
            }/* if available APInvHed */

            iVendNum = ttAPIHAPInvMsc.VendorNum;
            cInvoiceNum = ttAPIHAPInvMsc.InvoiceNum;
            if (APIHAPInvMsc.InvoiceLine == 0)
            {
                if (!ExistsAPInvDtl3(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum) && ExistsXbSystLineTax(Session.CompanyID, false))
                    return;

                APSyncAPInvExp.RunSyncAPInvExp("HedMsc", Guid.Empty, Guid.Empty, APIHAPInvMsc.SysRowID, Guid.Empty, false, string.Empty, decimal.Zero, "Tax", "APInvHedMscTax", out lAPInvExpUpdated);

            }
        }

        partial void APIHAPInvMscBeforeCreate()
        {
            Erp.Tables.APInvMsc bAPInvMsc = null;
            int NextSeqNum = 1;
            /* Get next sequence number */
            bAPInvMsc = FindLastAPInvMsc(ttAPIHAPInvMsc.Company, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, 0);
            if (bAPInvMsc != null)
            {
                NextSeqNum = bAPInvMsc.MscNum + 1;
            }
            ttAPIHAPInvMsc.MscNum = NextSeqNum;
        }

        partial void APIHAPInvMscBeforeDelete()
        {
            if (ttAPIHAPInvMsc.ContainerID != 0 || !String.IsNullOrEmpty(ttAPIHAPInvMsc.PackSlip))
            {
                throw new BLException(Strings.APInvoiceMisceChargeIsLinkedToAContaShipmOrAReceipt, "APIHAPInvMsc");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPIHAPInvMsc.Company, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum);
            if (APInvHed != null)
            {
                rSaveAPInvHedRowid = APInvHed.SysRowID;
            }
            ReCalcTaxes = true;
        }

        partial void APIHAPInvMscBeforeUpdate()
        {
            if (canUpdateInvoice(ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum).canUpdateInvoice == false)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvMsc");
            }    /* SCR #55657 - Verifies if a Miscellaneous Charge can be marked as Landed Cost. */



            var PurMiscQuery = DBExpressionCompiler.Compile(PurMiscExpression);
            if ((ttAPIHAPInvMsc.LCFlag == true) &&
            !(PurMiscQuery(Db, Session.CompanyID, ttAPIHAPInvMsc.MiscCode, true)))
            {
                throw new BLException(Strings.MisceChargeCannotBeMarkedAsLandedCost, "APIHAPInvMsc", "LCFlag");
            }
            else if ((ttAPIHAPInvMsc.LCFlag == false) &&
               (ttAPIHAPInvMsc.ContainerID != 0 || !String.IsNullOrEmpty(ttAPIHAPInvMsc.PackSlip)))
            {
                throw new BLException(Strings.APInvoiceMisceChargeIsLinkedAndMustStayMarkedAs, "APIHAPInvMsc", "LCFlag");
            }

            if (!ExistsPurMisc(Session.CompanyID, ttAPIHAPInvMsc.MiscCode, false))
            {
                ExceptionManager.AddBLException(Strings.MiscChargeInactive(ttAPIHAPInvMsc.Description));
            }

            bool updateExtSkipValidateMsc = false;
            if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt_sourceTs"))
            {
                if (ttAPIHAPInvMsc.Type.Equals("P", StringComparison.OrdinalIgnoreCase))
                {
                    Erp.Tablesets.UpdExtAPInvoiceTableset ds = (UpdExtAPInvoiceTableset)Erp.Internal.Lib.ErpCallContext.GetValue("UpdateExt_sourceTs");
                    var sourceAPInvDtlRow = (from sourceAPInvDtl_Row in ds.APInvDtl
                                             where sourceAPInvDtl_Row.Company.KeyEquals(ttAPIHAPInvMsc.Company) &&
                                                   sourceAPInvDtl_Row.VendorNum == ttAPIHAPInvMsc.VendorNum &&
                                                   sourceAPInvDtl_Row.InvoiceNum.KeyEquals(ttAPIHAPInvMsc.InvoiceNum) &&
                                                   sourceAPInvDtl_Row.InvoiceLine > 0
                                             select sourceAPInvDtl_Row).FirstOrDefault();

                    if (sourceAPInvDtlRow != null && !ExistsAPInvDtl(ttAPIHAPInvMsc.Company, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum))
                    {
                        updateExtSkipValidateMsc = true;
                    }
                }
            }

            if (!Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") || (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") && !updateExtSkipValidateMsc))
            {
                validateMiscChrg(ttAPIHAPInvMsc.MiscCode, ttAPIHAPInvMsc.CurrencySwitch, ttAPIHAPInvMsc.ScrMiscAmt, ttAPIHAPInvMsc.ScrDocMiscAmt, "APIHAPInvMsc");
            }

            if (ExceptionManager.Exceptions.Count == 0)
            {
                if (StringExtensions.Compare(ttAPIHAPInvMsc.RowMod, IceRow.ROWSTATE_ADDED) == 0)
                {
                    dOldMiscAmt = 0;
                }
                else
                {
                    dOldMiscAmt = ttAPIHAPInvMsc.DocMiscAmt;
                }

                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPIHAPInvMsc.Company, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum);
                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                if (!APInvHed.CancellationInv)
                {

                    if (ttAPIHAPInvMsc.DebitMemo == false)
                    {
                        ttAPIHAPInvMsc.MiscAmt = ttAPIHAPInvMsc.ScrMiscAmt;
                        ttAPIHAPInvMsc.DocMiscAmt = ttAPIHAPInvMsc.ScrDocMiscAmt;
                    }
                    else
                    {
                        ttAPIHAPInvMsc.MiscAmt = -ttAPIHAPInvMsc.ScrMiscAmt;
                        ttAPIHAPInvMsc.DocMiscAmt = -ttAPIHAPInvMsc.ScrDocMiscAmt;
                    }
                }

                this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPIHAPInvMsc, false, "MiscAmt", pCurrList, "ttAPIHAPInvMsc", APInvHed.CurrencyCode, ttChainRows);
            }

            ReCalcTaxes = true;
        }

        #endregion

        #region APInvDtl Table Methods

        partial void APInvDtlAfterCreate()
        {
            string tmpDiv = string.Empty;
            string tmpDep = string.Empty;
            string tmpChart = string.Empty;

            if (APInvHed == null)
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            }
            if (StringExtensions.Compare(ttAPInvDtl.LineType, "J") != 0)
            {
                if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt_sourceTs"))
                {
                    Erp.Tablesets.UpdExtAPInvoiceTableset ds = (UpdExtAPInvoiceTableset)Erp.Internal.Lib.ErpCallContext.GetValue("UpdateExt_sourceTs");
                    var sourceAPInvExpRow = (from sourceAPInvExp_Row in ds.APInvExp
                                             where sourceAPInvExp_Row.Company.Trim().KeyEquals(ttAPInvDtl.Company.Trim()) &&
                                                   sourceAPInvExp_Row.VendorNum == ttAPInvDtl.VendorNum &&
                                                   sourceAPInvExp_Row.InvoiceNum.Trim().KeyEquals(ttAPInvDtl.InvoiceNum.Trim()) &&
                                                   sourceAPInvExp_Row.InvoiceLine == ttAPInvDtl.InvoiceLine
                                             select sourceAPInvExp_Row).FirstOrDefault();

                    if (sourceAPInvExpRow == null)
                    {
                        ttAPInvDtl.UpdateExtCreateLineGL = true;
                    }
                    else
                    {
                        ttAPInvDtl.UpdateExtCreateLineGL = false;
                    }
                }

                if (!Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") || (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") && ttAPInvDtl.UpdateExtCreateLineGL))
                {
                    APInvExp = new Erp.Tables.APInvExp();
                    Db.APInvExp.Insert(APInvExp);
                    APInvExp.Company = ttAPInvDtl.Company;
                    APInvExp.VendorNum = ttAPInvDtl.VendorNum;
                    APInvExp.InvoiceNum = ttAPInvDtl.InvoiceNum;
                    APInvExp.InvoiceLine = ttAPInvDtl.InvoiceLine;
                    APInvExp.InvExpSeq = 1;
                    Db.Validate(APInvExp);    /* Create TranGLC records for the APInvExp record that was just created. */

                    APCreateTranGLCForAPInvExp.RunCreateTranGLCForAPInvExp(ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, 1);
                }
            }
            if (ttAPInvDtl.DMRNum != 0 && ttAPInvDtl.DMRActionNum != 0)
            {

                var DMRActnQuery = DBExpressionCompiler.Compile(DMRActnExpression);
                DMRActn = DMRActnQuery(Db, Session.CompanyID, APInvDtl.DMRNum, APInvDtl.DMRActionNum, "C");
                if (DMRActn != null)
                {
                    DMRActn.DebitMemoNum = APInvDtl.InvoiceNum;
                    DMRActn.DebitMemoLine = APInvDtl.InvoiceLine;
                }
            }
        }

        partial void APInvDtlAfterDelete()
        {
            ApInvHedChildDeleted();        /* Call TaxEngine Procedure  */
            if ((APInvHed != null && APInvHed.ReadyToCalc && ReCalcTaxes))
            {
                APInvoiceTableset ds = CurrentFullTableset;
                SetReadyToCalc("", APInvHed.InvoiceNum, APInvHed.VendorNum, false, false, ref ds);
                CurrentFullTableset = ds;

                if (ExistsXbSystLineTax(Session.CompanyID, false) || (ExistsXbSystLineTax(Session.CompanyID, true) &&
                    APInvHed.MatchedFromLI && !APInvHed.AllowOverrideLI))
                {
                    using (Erp.Internal.AP.SyncAPInvExp APSyncAPInvExp = new Internal.AP.SyncAPInvExp(Db))
                    {
                        foreach (Guid InvTax in GetNonDedTaxForInvoice(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum))
                        {
                            APSyncAPInvExp.RunSyncAPInvExp(string.Empty, Guid.Empty, Guid.Empty, Guid.Empty, InvTax, false, string.Empty, decimal.Zero, "Tax", "APInvTax", out lAPInvExpUpdated);
                        }
                    }
                }
            }
        }

        partial void APInvDtlAfterGetRows()
        {
            string currid = string.Empty;
            bool forceRefreshed = false;

            Erp.Tables.APInvDtl bufAPInvDtl = null;
            var outDebitMemo3 = ttAPInvDtl.DebitMemo;
            var outPosted3 = ttAPInvDtl.Posted;
            var outGroupID3 = ttAPInvDtl.GroupID;
            getAPInvHedAttributes(ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, out outDebitMemo3, out outPosted3, out outGroupID3);
            ttAPInvDtl.DebitMemo = outDebitMemo3;
            ttAPInvDtl.Posted = outPosted3;
            ttAPInvDtl.GroupID = outGroupID3;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (ttAPInvHed != null)
                ttAPInvDtl.InPrice = ttAPInvHed.InPrice;
            else
                ttAPInvDtl.InPrice = APInvHed.InPrice;

            /* Set Currency fields */
            ttAPInvDtl.CurrencyCode = APInvHed.CurrencyCode;
            ttAPInvDtl.BaseCurrSymbol = getBaseCurrSymbol();
            ttAPInvDtl.BaseCurrencyID = getBaseCurrID();
            var outCurrSymbol2 = ttAPInvDtl.CurrSymbol;
            var outCurrencySwitch2 = ttAPInvDtl.CurrencySwitch;
            var outCurrencyID = ttAPInvDtl.CurrencyID;
            getCurrencyInfo(APInvHed.CurrencyCode, out outCurrSymbol2, out outCurrencySwitch2, out outCurrencyID);
            ttAPInvDtl.CurrSymbol = outCurrSymbol2;
            ttAPInvDtl.CurrencySwitch = outCurrencySwitch2;
            ttAPInvDtl.CurrencyID = outCurrencyID;
            ttAPInvDtl.ScrLineType = TranslateString(ttAPInvDtl.LineType);

            if (ttAPInvDtl.DebitMemo == true)
            {
                ttAPInvDtl.ScrExtCost = -ttAPInvDtl.ExtCost;
                ttAPInvDtl.ScrDocExtCost = -ttAPInvDtl.DocExtCost;
                ttAPInvDtl.ScrTotalMiscChrg = -ttAPInvDtl.TotalMiscChrg;
                ttAPInvDtl.ScrDocTotalMiscChrg = -ttAPInvDtl.DocTotalMiscChrg;
                ttAPInvDtl.ScrVendorQty = -ttAPInvDtl.VendorQty;
                ttAPInvDtl.ScrOurQty = -ttAPInvDtl.OurQty;
                ttAPInvDtl.ScrLineDiscAmt = -ttAPInvDtl.LineDiscAmt;
                ttAPInvDtl.ScrDocLineDiscAmt = -ttAPInvDtl.DocLineDiscAmt;
            }
            else
            {
                ttAPInvDtl.ScrExtCost = ttAPInvDtl.ExtCost;
                ttAPInvDtl.ScrDocExtCost = ttAPInvDtl.DocExtCost;
                ttAPInvDtl.ScrTotalMiscChrg = ttAPInvDtl.TotalMiscChrg;
                ttAPInvDtl.ScrDocTotalMiscChrg = ttAPInvDtl.DocTotalMiscChrg;
                ttAPInvDtl.ScrVendorQty = ttAPInvDtl.VendorQty;
                ttAPInvDtl.ScrOurQty = ttAPInvDtl.OurQty;
                ttAPInvDtl.ScrLineDiscAmt = ttAPInvDtl.LineDiscAmt;
                ttAPInvDtl.ScrDocLineDiscAmt = ttAPInvDtl.DocLineDiscAmt;
            }

            //ttAPInvDtl.ScrUnitCost         = IF ttAPInvDtl.InPrice THEN  ttAPInvDtl.InUnitCost ELSE  ttAPInvDtl.UnitCost
            //       ttAPInvDtl.DocScrUnitCost      = IF ttAPInvDtl.InPrice THEN  ttAPInvDtl.DocInUnitCost ELSE  ttAPInvDtl.DocUnitCost
            //       ttAPInvDtl.Rpt1ScrUnitCost     = IF ttAPInvDtl.InPrice THEN  ttAPInvDtl.Rpt1InUnitCost ELSE  ttAPInvDtl.Rpt1UnitCost
            //       ttAPInvDtl.Rpt2ScrUnitCost     = IF ttAPInvDtl.InPrice THEN  ttAPInvDtl.Rpt2InUnitCost ELSE  ttAPInvDtl.Rpt2UnitCost
            //       ttAPInvDtl.Rpt3ScrUnitCost     = IF ttAPInvDtl.InPrice THEN  ttAPInvDtl.Rpt3InUnitCost ELSE  ttAPInvDtl.Rpt3UnitCost.

            if (ttAPInvDtl.InPrice)
            {
                ttAPInvDtl.DocScrUnitCost = ttAPInvDtl.DocInUnitCost;
                ttAPInvDtl.ScrUnitCost = ttAPInvDtl.InUnitCost;
                ttAPInvDtl.Rpt1ScrUnitCost = ttAPInvDtl.Rpt1InUnitCost;
                ttAPInvDtl.Rpt2ScrUnitCost = ttAPInvDtl.Rpt2InUnitCost;
                ttAPInvDtl.Rpt3ScrUnitCost = ttAPInvDtl.Rpt3InUnitCost;
            }
            else
            {
                ttAPInvDtl.DocScrUnitCost = ttAPInvDtl.DocUnitCost;
                ttAPInvDtl.ScrUnitCost = ttAPInvDtl.UnitCost;
                ttAPInvDtl.Rpt1ScrUnitCost = ttAPInvDtl.Rpt1UnitCost;
                ttAPInvDtl.Rpt2ScrUnitCost = ttAPInvDtl.Rpt2UnitCost;
                ttAPInvDtl.Rpt3ScrUnitCost = ttAPInvDtl.Rpt3UnitCost;
            }

            AssignAPInvDtlExtAmtFields();

            if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                if (String.IsNullOrEmpty(pCurrList))
                {
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                }

                string fieldNameScrExtCost = string.Empty;
                string fieldNameScrTotalMiscChrg = string.Empty;
                string fieldnameScrLineDiscAmt = string.Empty;
                string curNum = string.Empty;
                string curRnd = string.Empty;
                for (i = 2; i <= 4; i++)
                {
                    if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                    {
                        curNum = "Rpt" + (i - 1).ToString();
                        curRnd = curNum + "ExtCost";
                        fieldNameScrExtCost = "Rpt" + (i - 1).ToString() + "ScrExtCost";
                        fieldnameScrLineDiscAmt = "Rpt" + (i - 1).ToString() + "ScrLineDiscAmt";
                        fieldNameScrTotalMiscChrg = "Rpt" + (i - 1).ToString() + "ScrTotalMiscChrg";
                        curRnd = curNum + "ExtCost";
                        ttAPInvDtl[fieldNameScrExtCost] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.ScrDocExtCost, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvDtl", curRnd);
                        curRnd = curNum + "TotalMiscChrg";
                        ttAPInvDtl[fieldNameScrTotalMiscChrg] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.ScrDocTotalMiscChrg, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvDtl", curRnd);
                        curRnd = curNum + "LineDiscAmt";
                        ttAPInvDtl[fieldnameScrLineDiscAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.ScrLineDiscAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvDtl", curRnd);
                    }
                }
            }

            switch (ttAPInvDtl.LineType.ToUpperInvariant())
            {
                case "R":
                    {
                        ttAPInvDtl.LineTypeDescription = Strings.ReceiptOfGoods;

                        var APInvDtlQuery33 = DBExpressionCompiler.Compile(APInvDtlExpression33);
                        Erp.Tables.APInvDtl aAPInvDtl = APInvDtlQuery33(Db, Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.PONum, ttAPInvDtl.InvoiceNum, "A", ttAPInvDtl.POLine);

                        if (aAPInvDtl != null)
                        {
                            ttAPInvDtl.IsAdvance = true;
                        }
                    }
                    break;
                case "A":
                    {
                        ttAPInvDtl.LineTypeDescription = Strings.AdvanceBilling;
                    }
                    break;
                case "M":
                    {
                        ttAPInvDtl.LineTypeDescription = Strings.MiscellaneousBilling;
                    }
                    break;
                case "U":
                    {
                        ttAPInvDtl.LineTypeDescription = Strings.UnreceivedGoods;
                    }
                    break;
                case "J":
                    {
                        ttAPInvDtl.LineTypeDescription = Strings.JobMiscellaneousCharge;
                    }
                    break;
                case "S":
                    {
                        ttAPInvDtl.LineTypeDescription = Strings.Asset;
                    }
                    break;
            }

            if (isUSLocalization)
            {
                using (Erp.Internal.CSF.USA usa = new Erp.Internal.CSF.USA(this.Db))
                {
                    usa.SetAPInvDtl1099VendorDefaults(ttAPInvDtl);
                }
            }

            if (isGermanyLocalization)
            {
                ttAPInvDtl.DEPayStatCodeDescr = LibValidateUDCodes.checkUDCode("PmtStatCod", ttAPInvDtl.DEPayStatCode, false);
                ttAPInvDtl.DEDenominationDescr = LibValidateUDCodes.checkUDCode("PmtDenomin", ttAPInvDtl.DEDenomination, false);
            }

            if (!String.IsNullOrEmpty(ttAPInvDtl.VenPartNum))
            {
                ttAPInvDtl.GridVenPartNum = ttAPInvDtl.VenPartNum;
            }
            else
            {
                ttAPInvDtl.GridVenPartNum = ttAPInvDtl.PartNum;
            }
            /* if ttAPInvDtl.Posted = false */
            if (ttAPInvDtl.Posted == false)
            {
                ttAPInvDtl.EnableIntrastat = getEnableIntrastat();
                ttAPInvDtl.EnableIntrastatDsp = ttAPInvDtl.EnableIntrastat;
                /* Initialize enable flags for G/L Distribution */
                switch (ttAPInvDtl.LineType.ToUpperInvariant())
                {
                    case "A":
                    case "R":
                    case "U":
                        {
                            GLSyst = GLSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
                            if (GLSyst != null)
                            {
                                if (GLSyst.PostInvtyWipCos == true)
                                {
                                    ttAPInvDtl.AllowGLDistAdd = false;
                                    ttAPInvDtl.AllowGLDistAllocation = false;
                                    ttAPInvDtl.AllowGLDistDelete = false;
                                }
                                else
                                {


                                    var APInvExpQuery5 = DBExpressionCompiler.Compile(APInvExpExpression5);
                                    ttAPInvDtl.AllowGLDistAdd = ttAPInvDtl.InvoiceLine > 0;
                                    ttAPInvDtl.AllowGLDistDelete = (APInvExpQuery5(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine));
                                    ttAPInvDtl.AllowGLDistAllocation = ttAPInvDtl.InvoiceLine > 0;
                                }
                            }
                        }
                        break;/* when "A":U */
                    case "M":
                        {


                            var APInvExpQuery6 = DBExpressionCompiler.Compile(APInvExpExpression6);
                            ttAPInvDtl.AllowGLDistAdd = ttAPInvDtl.InvoiceLine > 0;
                            ttAPInvDtl.AllowGLDistDelete = (APInvExpQuery6(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine));
                            ttAPInvDtl.AllowGLDistAllocation = ttAPInvDtl.InvoiceLine > 0;
                        }
                        break;
                    case "J":
                        {


                            var APInvJobQuery = DBExpressionCompiler.Compile(APInvJobExpression);
                            ttAPInvDtl.AllowJobMiscAdd = ttAPInvDtl.InvoiceLine > 0;
                            ttAPInvDtl.AllowJobMiscDelete = (APInvJobQuery(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine));
                            ttAPInvDtl.AllowJobMiscUpdate = ttAPInvDtl.AllowJobMiscDelete;
                        }
                        break;
                }
            }
            else
            {
                ttAPInvDtl.EnableIntrastat = false;
                ttAPInvDtl.EnableIntrastatDsp = this.ExistsIStatTrn(ttAPInvDtl.Company, "AP", ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine);
                ttAPInvDtl.AllowGLDistAdd = false;
                ttAPInvDtl.AllowGLDistAllocation = false;
                ttAPInvDtl.AllowGLDistDelete = false;
                ttAPInvDtl.AllowJobMiscAdd = false;
                ttAPInvDtl.AllowJobMiscDelete = false;
                ttAPInvDtl.AllowJobMiscUpdate = false;
            }

            /* SCR106476 Handle rounding issue in base currency, we need to subtract the variance from the largest APInvExp record to handle rounding. */

            CalculateGLAnalysisVariance.APInvVariance APInvVariance = new CalculateGLAnalysisVariance.APInvVariance();
            CalculateGLAnalysisVariance.APNonDedTaxSum APNonDedTaxSum = null;
            APInvDtl tempAPInvDtl = null;
            BufferCopy.Copy(ttAPInvDtl, ref tempAPInvDtl);
            bool calledFromPE = false;
            bool isAPTaxLnLevel = IsAPTaxLnLevel(Session.CompanyID);

            APCalculateGLAnalysisVariance.CalcLineGLAnalysisVariance(ref APInvVariance, APInvHed, tempAPInvDtl, null, null, APNonDedTaxSum, isAPTaxLnLevel, calledFromPE);

            if (IsAPInvoiceDebitMemo(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum))
            {
                ttAPInvDtl.Variance = -APInvVariance.Variance;
                ttAPInvDtl.DocVariance = -APInvVariance.DocVariance;
                ttAPInvDtl.Rpt1Variance = -APInvVariance.Rpt1Variance;
                ttAPInvDtl.Rpt2Variance = -APInvVariance.Rpt2Variance;
                ttAPInvDtl.Rpt3Variance = -APInvVariance.Rpt3Variance;
                ttAPInvDtl.AllocationAmount = -ttAPInvDtl.Variance;
                ttAPInvDtl.DocAllocationAmount = -ttAPInvDtl.DocVariance;
                ttAPInvDtl.Rpt1AllocationAmount = -ttAPInvDtl.Rpt1Variance;
                ttAPInvDtl.Rpt2AllocationAmount = -ttAPInvDtl.Rpt2Variance;
                ttAPInvDtl.Rpt3AllocationAmount = -ttAPInvDtl.Rpt3Variance;
            }
            else
            {
                ttAPInvDtl.Variance = APInvVariance.Variance;
                ttAPInvDtl.DocVariance = APInvVariance.DocVariance;
                ttAPInvDtl.Rpt1Variance = APInvVariance.Rpt1Variance;
                ttAPInvDtl.Rpt2Variance = APInvVariance.Rpt2Variance;
                ttAPInvDtl.Rpt3Variance = APInvVariance.Rpt3Variance;
                ttAPInvDtl.AllocationAmount = ttAPInvDtl.Variance;
                ttAPInvDtl.DocAllocationAmount = ttAPInvDtl.DocVariance;
                ttAPInvDtl.Rpt1AllocationAmount = ttAPInvDtl.Rpt1Variance;
                ttAPInvDtl.Rpt2AllocationAmount = ttAPInvDtl.Rpt2Variance;
                ttAPInvDtl.Rpt3AllocationAmount = ttAPInvDtl.Rpt3Variance;
            }

            if (StringExtensions.Compare(ttAPInvDtl.LineType, "U") == 0 ||
                StringExtensions.Compare(ttAPInvDtl.LineType, "M") == 0 ||
                StringExtensions.Compare(ttAPInvDtl.LineType, "R") == 0 ||
                StringExtensions.Compare(ttAPInvDtl.LineType, "S") == 0)
            {
                var XbSystQuery2 = DBExpressionCompiler.Compile(XbSystExpression2);
                ttAPInvDtl.UsePurchaseCode = (XbSystQuery2(Db, Session.CompanyID, true));
                if (ttAPInvDtl.UsePurchaseCode == true && APInvHed.Posted == false)
                {
                    if (StringExtensions.Compare(ttAPInvDtl.LineType, "R") == 0)
                    {
                        GLPurch = FindFirstGLPurch(ttAPInvDtl.Company, ttAPInvDtl.PurchCode);
                        if (GLPurch != null && GLPurch.POExp)
                        {
                            ttAPInvDtl.EnablePurchaseCode = false;
                        }
                        else
                        {
                            ttAPInvDtl.EnablePurchaseCode = true;
                        }
                    }
                    else
                    {
                        ttAPInvDtl.EnablePurchaseCode = true;
                    }
                }
                else
                {
                    ttAPInvDtl.EnablePurchaseCode = false;
                }
                /* set discount flag */
                var XbSystQuery3 = DBExpressionCompiler.Compile(XbSystExpression3);
                ttAPInvDtl.EnableDiscountAmt = (XbSystQuery3(Db, Session.CompanyID, true)) && APInvHed.Posted == false;
            }/* if ttAPInvDtl.LineType = "U":U */

            if (!String.IsNullOrEmpty(ttAPInvDtl.PackSlip))
            {
                getLineRcptInfo();
            }

            if (!String.IsNullOrEmpty(ttAPInvDtl.DropShipPackSlip))
            {
                getLineDropShipInfo();
            }

            if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.AdvancedUnitOfMeasure) && ttAPInvDtl.PartNumTrackInventoryAttributes && ttAPInvDtl.LineType.Equals("R", StringComparison.OrdinalIgnoreCase))
            {
                ttAPInvDtl.EnableAttributeSetBtn = true;
            }
            else
            {
                ttAPInvDtl.EnableAttributeSetBtn = false;
            }

            if (ttAPInvDtl.PONum != 0)
            {
                getLinePOInfo();
            }
            /*     /* Get the line totals * / */
            /*     run getLineTotals.        */

            var PORelQuery = DBExpressionCompiler.Compile(PORelExpression);
            ttAPInvDtl.DropShipment = (PORelQuery(Db, ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ttAPInvDtl.PORelNum));
            /*Enable\Disable the Supplier Part XRef button*/

            var PartXRefVendQuery = DBExpressionCompiler.Compile(PartXRefVendExpression);
            PartXRefVend = PartXRefVendQuery(Db, Session.CompanyID, ttAPInvDtl.PartNum, ttAPInvDtl.VendorNum);
            if (PartXRefVend != null)
            {
                ttAPInvDtl.EnableSupplierXRef = true;
            }
            if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.ProjectBilling))
            {
                PORel = FindFirstPORel(Session.CompanyID, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ttAPInvDtl.PORelNum);
                if (PORel != null)
                {
                    JobHead = JobHead.FindFirstByPrimaryKey(Db, Session.CompanyID, PORel.JobNum);
                }
            }
            if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.ProjectBilling) && PORel != null && StringExtensions.Compare(PORel.TranType, "PUR-SUB") == 0 && JobHead != null && !String.IsNullOrEmpty(JobHead.ProjectID))
            {
                ttAPInvDtl.EnableSubCData = true;
            }
            else
            {
                ttAPInvDtl.EnableSubCData = false;
            }

            if (APInvHed.InvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
            {
                setBOEDtlFields();
            }
            else
            {
                ttAPInvDtl.EnableScrWithholdAmt = false;
            }
            /*     ttapInvDtl.EnableSubCData = TRUE. /*delete before checking in* /  */

            if (APInvHed.CorrectionInv == true && ttAPInvDtl.CorrectionDtl == false)
            {
                bufAPInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, APInvHed.InvoiceRef, ttAPInvDtl.InvoiceLineRef);
                ttAPInvDtl.AdjustmentValue = ttAPInvDtl.ScrExtCost - bufAPInvDtl.ExtCost;
                ttAPInvDtl.DocAdjustmentValue = ttAPInvDtl.ScrDocExtCost - bufAPInvDtl.DocExtCost;
                ttAPInvDtl.Rpt1AdjustmentValue = ttAPInvDtl.Rpt1ScrExtCost - bufAPInvDtl.Rpt1ExtCost;
                ttAPInvDtl.Rpt2AdjustmentValue = ttAPInvDtl.Rpt2ScrExtCost - bufAPInvDtl.Rpt2ExtCost;
                ttAPInvDtl.Rpt3AdjustmentValue = ttAPInvDtl.Rpt3ScrExtCost - bufAPInvDtl.Rpt3ExtCost;
                /*Poland CSF - setting values of Original Extended Costs for adjustment lines*/
                ttAPInvDtl.DocOrgExtCost = bufAPInvDtl.DocExtCost;
                ttAPInvDtl.OrgExtCost = bufAPInvDtl.ExtCost;
                ttAPInvDtl.Rpt1OrgExtCost = bufAPInvDtl.Rpt1ExtCost;
                ttAPInvDtl.Rpt2OrgExtCost = bufAPInvDtl.Rpt2ExtCost;
                ttAPInvDtl.Rpt3OrgExtCost = bufAPInvDtl.Rpt3ExtCost;
            }
            /* Get the line totals */
            getLineTotals();

            if (forceRefreshed)
            {
                foreach (var APInvExp_iterator in (SelectAPInvExp(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine)))
                {
                    APInvExp = APInvExp_iterator;
                    refreshttAPInvExp();
                }
            }

            ttAPInvDtl.DEAScheduled = ttAPInvDtl.DeferredExp ? ExistsAPInvDtlDEASch(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, posted: false) : false;
            ttAPInvDtl.DEACodeDesc = getDEACodeDesc(ttAPInvDtl.DEACode);
            calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, false);
        }

        partial void APInvDtlAfterUpdate()
        {
            int SaveVendorNum = 0;
            string SaveInvoiceNum = string.Empty;
            int SaveInvoiceLine = 0;
            Erp.Tables.APInvHed bRefAPInvHed = null;
            bool lRefreshLines = false;
            SaveVendorNum = APInvDtl.VendorNum;
            SaveInvoiceNum = APInvDtl.InvoiceNum;
            SaveInvoiceLine = APInvDtl.InvoiceLine;

            if (StringExtensions.Compare(APInvDtl.LineType, "A") == 0)
            {
                APInvDtl.Description = Strings.AdvBillPO(APInvDtl.PONum, APInvDtl.POLine);
            }

            if ((StringExtensions.Compare(APInvDtl.LineType, "M") == 0 && APInvDtl.DMRNum == 0) || StringExtensions.Compare(APInvDtl.LineType, "S") == 0 || StringExtensions.Compare(APInvDtl.LineType, "J") == 0)
            {
                APInvDtl.OurQty = APInvDtl.VendorQty;
                APInvDtl.IUM = APInvDtl.PUM;
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum);

            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceNotFound);
            }

            if (!(isUSLocalization && APInvHed.StartUp && APInvHed.Posted))
            {
                /* G/L Expense does not apply to Job Misc lines */
                if (StringExtensions.Compare(ttAPInvDtl.LineType, "J") != 0)
                {
                    if (!Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") || (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") && ttAPInvDtl.UpdateExtCreateLineGL))
                    {
                        APSyncAPInvExp.RunSyncAPInvExp("APInvDtl", APInvDtl.SysRowID, Guid.Empty, Guid.Empty, Guid.Empty, lGetAcctForUnrcvd, cOldPartNum, 0M, "InvoiceLine", string.Empty, out lAPInvExpUpdated);
                    }
                }
            }

            if (ttAPInvDtl.RecalcGLAcct)
            {
                APInvDtlTGLCRunPE();
                ttAPInvDtl.RecalcGLAcct = false;
            }

            /* Update APInvHed.UpdateTax if the TaxExempt flag changed */
            if (lDtlTaxExemptChanged == true)
            {


                APInvHed = FindFirstAPInvHedWithUpdLock(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum);
                APInvHed.UpdateTax = true;
            }

            /* Create patchfld against the reference invoice to indicate the invoice
               has been added to a BOE invoice */
            vInvoiceType = APInvHed.InvoiceType;
            lRefreshLines = false;

            if (vInvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
            {

                bRefAPInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceRef);
                if (bRefAPInvHed != null)
                {
                    bRefAPInvHed.ReferencedByBOE = ttAPInvDtl.InvoiceNum;
                    Db.Validate(bRefAPInvHed);

                    if (!String.IsNullOrEmpty(bRefAPInvHed.TaxRegionCode))
                    {
                        TaxRgn = TaxRgn.FindFirstByPrimaryKey(Db, Session.CompanyID, bRefAPInvHed.TaxRegionCode);
                        if (TaxRgn != null)
                        {
                            var TaxRgnSalesTaxQuery = DBExpressionCompiler.Compile(TaxRgnSalesTaxExpression);
                            foreach (var TaxRgnSalesTax_iterator in (TaxRgnSalesTaxQuery(Db, TaxRgn.Company, TaxRgn.TaxRegionCode)))
                            {
                                TaxRgnSalesTax = TaxRgnSalesTax_iterator;


                                var SalesTaxQuery = DBExpressionCompiler.Compile(SalesTaxExpression);
                                SalesTax = SalesTaxQuery(Db, Session.CompanyID, TaxRgnSalesTax.TaxCode, 1);
                                if (SalesTax != null)
                                {
                                    if (SalesTax.Timing == 1 || SalesTax.Timing == 2)
                                    {
                                        ttAPInvDtl.EnableScrWithholdAmt = true;
                                    }
                                }
                            }
                        }
                    }
                }
                APGeneratePaymentFromBOE.CreateDetails(ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine);


                //SCR 119338 - Uplift
                CalculateGLAnalysisVariance.APInvVariance APInvVariance = new CalculateGLAnalysisVariance.APInvVariance();
                CalculateGLAnalysisVariance.APNonDedTaxSum APNonDedTaxSum = null;
                APInvDtl tempAPInvDtl = null;
                BufferCopy.Copy(ttAPInvDtl, ref tempAPInvDtl);
                bool calledFromPE = false;
                bool isAPTaxLnLevel = IsAPTaxLnLevel(Session.CompanyID);
                APCalculateGLAnalysisVariance.CalcLineGLAnalysisVariance(ref APInvVariance, APInvHed, tempAPInvDtl, null, null, APNonDedTaxSum, isAPTaxLnLevel, calledFromPE);

                if (IsAPInvoiceDebitMemo(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum))
                {
                    ttAPInvDtl.Variance = -APInvVariance.Variance;
                    ttAPInvDtl.DocVariance = -APInvVariance.DocVariance;
                    ttAPInvDtl.Rpt1Variance = -APInvVariance.Rpt1Variance;
                    ttAPInvDtl.Rpt2Variance = -APInvVariance.Rpt2Variance;
                    ttAPInvDtl.Rpt3Variance = -APInvVariance.Rpt3Variance;
                }
                else
                {
                    ttAPInvDtl.Variance = APInvVariance.Variance;
                    ttAPInvDtl.DocVariance = APInvVariance.DocVariance;
                    ttAPInvDtl.Rpt1Variance = APInvVariance.Rpt1Variance;
                    ttAPInvDtl.Rpt2Variance = APInvVariance.Rpt2Variance;
                    ttAPInvDtl.Rpt3Variance = APInvVariance.Rpt3Variance;
                }

                lRefreshLines = (dOldBOEWithholdAmt != ttAPInvDtl.ScrWithholdAmt) ||
                                (dOldBOEDocWithholdAmt != ttAPInvDtl.DocScrWithholdAmt) ||
                                (dOldBOERpt1WithholdAmt != ttAPInvDtl.Rpt1ScrWithholdAmt) ||
                                (dOldBOERpt2WithholdAmt != ttAPInvDtl.Rpt2ScrWithholdAmt) ||
                                (dOldBOERpt3WithholdAmt != ttAPInvDtl.Rpt3ScrWithholdAmt);

            }/* BOE */

            if (((APInvHed.ReadyToCalc || !ReCalcTaxes) && StringExtensions.Compare(ttAPInvDtl.LineType, "J") != 0 &&
               !Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt")) ||
               (APInvHed.MatchedFromLI && !APInvHed.AllowOverrideLI && ExistsNonDedTaxForInvoice(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum)))
            {
                generateNonDeducExpenses(APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine);
            }
            /* Call TaxEngine Procedure  */
            ErpCallContext.Add("NonRecTax-APInvDtl");
            ErpCallContext.SetDisposableKeyValue(new KeyValuePair<string, object>("NonRecTax-APInvDtl", APInvDtl.SysRowID));

            if ((APInvHed.ReadyToCalc && ReCalcTaxes))
            {
                APInvoiceTableset ds = CurrentFullTableset;
                SetReadyToCalc("", APInvHed.InvoiceNum, APInvHed.VendorNum, false, false, ref ds);
                CurrentFullTableset = ds;
            }

            /*   find current APInvDtl no-lock no-error. */


            // must update the database before the rows are copied to the tableset otherwise if updates occur during the triggers the tableset is out of sync with the database and the user
            // experiences 'row has been modified' exceptions.
            Db.Validate();

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, SaveVendorNum, SaveInvoiceNum, SaveInvoiceLine);
            /* Refresh ttAPInvDtl with APInvDtl because db triggers may have
               changed values in APInvDtl. */
            if (APInvDtl != null)
            {
                //  CurrentFullTableset = ds;



                ttAPInvDtl = (from ttAPInvDtl_Row in CurrentFullTableset.APInvDtl
                              where ttAPInvDtl_Row.Company.KeyEquals(APInvDtl.Company) &&
                              ttAPInvDtl_Row.VendorNum == APInvDtl.VendorNum &&
                              ttAPInvDtl_Row.InvoiceNum.KeyEquals(APInvDtl.InvoiceNum) &&
                              ttAPInvDtl_Row.InvoiceLine == APInvDtl.InvoiceLine
                              select ttAPInvDtl_Row).FirstOrDefault();
                if (ttAPInvDtl != null)
                {
                    BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
                }
                /* Create a ttAPInvHed record to send back current values for amounts. */

                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum);
                if (APInvHed != null)
                {
                    refreshttAPInvHed();
                    /* Refresh tax records */


                    var APInvTaxQuery2 = DBExpressionCompiler.Compile(APInvTaxExpression2);
                    foreach (var APInvTax_iterator in (APInvTaxQuery2(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                    {
                        APInvTax = APInvTax_iterator;
                        refreshttAPInvTax();
                    }/* for each APInvTax */

                    if (isPeruLocalization == true)
                    {
                        refreshttPEAPInvTax(APInvHed.VendorNum, APInvHed.InvoiceNum, APInvHed.GroupID);
                    }
                }
            }

            SetARInvDtlXRef();


            if (lApInvDtlChanged == true)
            {
                if (lAPInvExpUpdated == true)
                {


                    foreach (var APInvExp_iterator in (SelectAPInvExp(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine)))
                    {
                        APInvExp = APInvExp_iterator;
                        refreshttAPInvExp();
                    }
                }

                /* Refresh Misc Charge records */


                foreach (var APInvMsc_iterator in (SelectAPInvMsc(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine)))
                {
                    APInvMsc = APInvMsc_iterator;
                    refreshttAPInvMsc();
                }


                foreach (var APInvMsc_iterator in (SelectAPInvMsc(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, 0)))
                {
                    APInvMsc = APInvMsc_iterator;
                    refreshttAPIHAPInvMsc();
                }
            }

            if (lRefreshLines)
            {
                Erp.Tables.APInvDtl bAPInvDtl = null;
                APInvDtlAfterGetRows();


                var BAPInvDtlQuery = DBExpressionCompiler.Compile(BAPInvDtlExpression);
                foreach (var bAPInvDtl_iterator in (BAPInvDtlQuery(Db, Session.CompanyID, SaveVendorNum, SaveInvoiceNum, SaveInvoiceLine)))
                {
                    bAPInvDtl = bAPInvDtl_iterator;
                    ttAPInvDtl = new Erp.Tablesets.APInvDtlRow();
                    CurrentFullTableset.APInvDtl.Add(ttAPInvDtl);
                    BufferCopy.Copy(bAPInvDtl, ref ttAPInvDtl);
                    ttAPInvDtl.SysRowID = bAPInvDtl.SysRowID;
                    APInvDtlAfterGetRows();
                }


                ttAPInvDtl = (from ttAPInvDtl_Row in CurrentFullTableset.APInvDtl
                              where ttAPInvDtl_Row.Company.KeyEquals(Session.CompanyID) &&
                              ttAPInvDtl_Row.VendorNum == SaveVendorNum &&
                              StringExtensions.Compare(ttAPInvDtl_Row.InvoiceNum, SaveInvoiceNum) == 0 &&
                              ttAPInvDtl_Row.InvoiceLine == SaveInvoiceLine
                              select ttAPInvDtl_Row).FirstOrDefault();

                APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, SaveVendorNum, SaveInvoiceNum, SaveInvoiceLine);
            }
            if (StringExtensions.Compare(ttAPInvDtl.LineType, "R") == 0 && !(APInvHed != null && APInvHed.CorrectionInv && ttAPInvDtl.CorrectionDtl))
            {
                UpdateVendorQtyRelatedFields(APInvHed.CancellationInv);
            }

            if (APInvHed.ReadyToCalc || (APInvHed.MatchedFromLI && !APInvHed.AllowOverrideLI && ExistsNonDedTaxForInvoice(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                foreach (var APInvExp_iterator in (SelectAPInvExp(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, 0)))
                {
                    APInvExp = APInvExp_iterator;
                    refreshttAPIHAPInvExp();
                }
            foreach (var APInvExp_iterator in (SelectAPInvExp(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine)))
            {
                APInvExp = APInvExp_iterator;
                refreshttAPInvExp();
            }
            refreshttAPInvDtl();
        }

        partial void APInvDtlBeforeCreate()
        {
            if (ttAPInvDtl.InvoiceLine == 0)
                ttAPInvDtl.InvoiceLine = GetNextInvoiceLine(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);

            curInvoiceLine = ttAPInvDtl.InvoiceLine;

            if (StringExtensions.Compare(ttAPInvDtl.LineType, "A") == 0 || StringExtensions.Compare(ttAPInvDtl.LineType, "U") == 0)
            {
                if (ttAPInvDtl.PONum == 0 || ttAPInvDtl.POLine == 0)
                {
                    throw new BLException(Strings.POLineFieldsAreRequired, "ttAPInvDtl", "PONum");
                }
            }

            if (isIndiaLocalization
                && !ErpCallContext.ContainsKey("RunNetting"))
            {
                if (string.IsNullOrEmpty(ttAPInvDtl.CommodityCode) && !ttAPInvDtl.LineType.Equals("S", StringComparison.OrdinalIgnoreCase))
                {
                    throw new BLException(Strings.EmptyCommodityCode, APInvDtl.GetTableName());
                }
                if (string.IsNullOrEmpty(ttAPInvDtl.TaxCatID))
                {
                    throw new BLException(Strings.EmptyProductTaxCategory, APInvDtl.GetTableName());
                }
            }
        }

        partial void APInvDtlBeforeDelete()
        {
            if (ErpCallContext.ContainsKey("UpdateExt") && IsAPInvoicePosted(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum))
                throw new BLException(Strings.CannotDeleteLineOfPostedInvoice, "APInvDtl");

            var APInvMscQuery7 = DBExpressionCompiler.Compile(APInvMscExpression7);
            if ((APInvMscQuery7(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, 0)))
            {
                throw new BLException(Strings.LineMisceChargesLinkedToContaShipmOrReceiptExist, "APInvDtl");
            }

            if (isJapanLocalization && this.ExistsJPAPPerBillStmtHeadBillingNo(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum))
            {
                throw new BLException(Strings.CannotDeleteTaxAdjustmentLine, "APInvDtl");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (APInvHed != null)
            {
                rSaveAPInvHedRowid = APInvHed.SysRowID;
            }



            var RebateTransQuery = DBExpressionCompiler.Compile(RebateTransExpression);
            foreach (var RebateTrans_iterator in (RebateTransQuery(Db, Session.CompanyID, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine)))
            {
                RebateTrans = RebateTrans_iterator;
                RebateTrans.Applied = false;
                RebateTrans.APInvoiceNum = "";
                RebateTrans.APInvoiceLine = 0;
            }

            ReCalcTaxes = true;
        }

        partial void APInvDtlBeforeUpdate()
        {
            decimal temAdvTax = decimal.Zero;
            decimal temBaseAdvTax = decimal.Zero;
            decimal temRpt1AdvTax = decimal.Zero;
            decimal temRpt2AdvTax = decimal.Zero;
            decimal temRpt3AdvTax = decimal.Zero;

            decimal totTax = decimal.Zero;
            decimal totBaseTax = decimal.Zero;
            decimal totRpt1Tax = decimal.Zero;
            decimal totRpt2Tax = decimal.Zero;
            decimal totRpt3Tax = decimal.Zero;

            decimal totAdv = decimal.Zero;
            decimal totBaseAdv = decimal.Zero;
            decimal totRpt1Adv = decimal.Zero;
            decimal totRpt2Adv = decimal.Zero;
            decimal totRpt3Adv = decimal.Zero;

            if (isUSLocalization)
            {
                using (Internal.CSF.USA usa = new Internal.CSF.USA(this.Db))
                {
                    if (usa.APInvDtlBeforeUpdate(ttAPInvDtl, BIttAPInvDtl))
                        return;
                }
            }

            if (isGermanyLocalization)
            {
                if (ttAPInvDtl.DEIsSecurityFinancialDerivative)
                {
                    if (ttAPInvDtl.DEInternationalSecuritiesID.Length < 12 ||
                       !System.Text.RegularExpressions.Regex.IsMatch(ttAPInvDtl.DEInternationalSecuritiesID.Substring(0, 2), @"^[A-Z]{2}") ||
                       (!System.Text.RegularExpressions.Regex.IsMatch(ttAPInvDtl.DEInternationalSecuritiesID.Substring(2, 10), @"^\d{10}") &&
                        !System.Text.RegularExpressions.Regex.IsMatch(ttAPInvDtl.DEInternationalSecuritiesID.Substring(2, 10), @"^[A-Z]{10}")))
                    {
                        throw new BLException(Strings.InternationSecutitiesIdNumIsWrong);
                    }
                }

                if (BIttAPInvDtl != null && BIttAPInvDtl.Posted == true)
                {
                    List<string> changedList = new List<string>();

                    BufferCompare.Compare(ttAPInvDtl, BIttAPInvDtl, null, new List<string>(new string[] { "RowMod", "DEDenomination", "DEDenominationDescr", "DEInternationalSecuritiesID", "DEIsInvestment", "DEIsSecurityFinancialDerivative", "DEIsServices", "DEPayStatCode", "DEPayStatCodeDescr" }), changedList);
                    if (!changedList.Any())
                        return;
                }
            }

            (bool canUpdateAPInvcDtl, bool skipValidations) = canUpdateInvoice(ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);

            if (!canUpdateAPInvcDtl)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvDtl");
            }
            if (ttAPInvDtl.PUM.Length <= 0 && StringExtensions.Compare(ttAPInvDtl.LineType, "A") != 0)
            {
                throw new BLException(Strings.ThereIsNoUOMSelected, "APInvDtl", "PUM");
            }

            /* Validate PO Number/PO Line for Advance and Unreceived lines */
            if (!skipValidations
                && (StringExtensions.Compare(ttAPInvDtl.LineType, "A") == 0
                || StringExtensions.Compare(ttAPInvDtl.LineType, "U") == 0))
            {


                var POHeaderQuery = DBExpressionCompiler.Compile(POHeaderExpression);
                POHeader = POHeaderQuery(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.PONum, true);
                if (POHeader == null)
                {
                    throw new BLException(Strings.InvalidPONumber, "APInvDtl", "PONum");
                }

                /* Validate the invoice currency matches the po currency */
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
                if (APInvHed != null && StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) != 0 && !String.IsNullOrEmpty(APInvHed.APLOCID))
                {
                    throw new BLException(Strings.POCurreDoesNotMatchInvoiceCurre, "APInvDtl", "PONum");
                }


                var PODetailQuery = DBExpressionCompiler.Compile(PODetailExpression);
                if (!((PODetailQuery(Db, ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine, true))))
                {
                    throw new BLException(Strings.InvalidPOLine, "APInvDtl", "POLine");
                }/* if not(can-find(PODetail */

                /* Validate PORelNum for an unreceived line */
                if (StringExtensions.Compare(ttAPInvDtl.LineType, "U") == 0)
                {


                    var PORelQuery3 = DBExpressionCompiler.Compile(PORelExpression3);
                    if (!((PORelQuery3(Db, ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ttAPInvDtl.PORelNum, true))))
                    {
                        throw new BLException(Strings.InvalidPOReleaseNum, "APInvDtl", "PORelNum");
                    }
                }
            }/* if ttAPInvDtl.LineType = "A":U or ttAPInvDtl.LineType = "U":U */

            /* SCR #3119 - do not allow central payment for consolidated PO */
            if (ttAPInvDtl.PONum != 0)
            {


                var POHeaderQuery2 = DBExpressionCompiler.Compile(POHeaderExpression2);
                var APInvHedQuery19 = DBExpressionCompiler.Compile(APInvHedExpression19);
                if ((POHeaderQuery2(Db, ttAPInvDtl.Company, ttAPInvDtl.PONum, true)) && (APInvHedQuery19(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, true)))
                {
                    throw new BLException(Strings.AConsoPOMayNotBeSelecForCentralPaymentProcess, "APInvDtl", "CPay");
                }
            } /* ttAPInvHed.PONum <> 0 */

            /* For asset line, the line total cannot be 0 */
            /* if ttAPInvDtl.LineType = "S"*/
            if (StringExtensions.Lookup("S", ttAPInvDtl.LineType) > -1)
            {
                if (((ttAPInvDtl.CurrencySwitch && ttAPInvDtl.LineTotal == 0)
                    || (!ttAPInvDtl.CurrencySwitch && ttAPInvDtl.DocLineTotal == 0))
                    && !ttAPInvDtl.JPTaxAdjustment)
                {
                    throw new BLException(Strings.TheLineTotalIsInvalid, "APInvDtl", "ScrExtCost");
                }
            }
            else
            {
                if (!ttAPInvDtl.LineType.Equals("R", StringComparison.OrdinalIgnoreCase)
                    && !ttAPInvDtl.LineType.Equals("U", StringComparison.OrdinalIgnoreCase)
                    && !ttAPInvDtl.LineType.Equals("M", StringComparison.OrdinalIgnoreCase))
                {
                    if ((ttAPInvDtl.CurrencySwitch && ttAPInvDtl.ScrExtCost == 0)
                       || (!ttAPInvDtl.CurrencySwitch && ttAPInvDtl.ScrDocExtCost == 0))
                    {
                        throw new BLException(Strings.InvalidLineAmount, "APInvDtl", "ExtCost");
                    }
                }
            }/* else do */

            /* Validate TaxCatID */
            if (String.IsNullOrEmpty(ttAPInvDtl.TaxCatID))
            {


                var TaxCatQuery2 = DBExpressionCompiler.Compile(TaxCatExpression2);
                TaxCat = TaxCatQuery2(Db, Session.CompanyID);
                if (TaxCat != null)
                {
                    ttAPInvDtl.TaxCatID = TaxCat.TaxCatID;
                    ttAPInvDtl.TaxCatIDDescription = TaxCat.Description;
                }
            }

            if (!String.IsNullOrEmpty(ttAPInvDtl.TaxCatID))
            {


                var TaxCatQuery3 = DBExpressionCompiler.Compile(TaxCatExpression3);
                if (!((TaxCatQuery3(Db, ttAPInvDtl.Company, ttAPInvDtl.TaxCatID))))
                {
                    throw new BLException(Strings.InvalidTaxCategory, "APInvDtl", "TaxCatID");
                }
            }/* if ttAPInvDtl.TaxCatID <> "":U */

            var altAPInvHed = FindFirstAPInvHed(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            vInvoiceType = altAPInvHed != null ? altAPInvHed.InvoiceType : string.Empty;
            if (ttAPInvDtl.UsePurchaseCode &&
                String.IsNullOrEmpty(ttAPInvDtl.PurchCode) &&
                !vInvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
            {
                throw new BLException(Strings.AValidPurchaseCodeIsRequired, "APInvDtl", "PurchCode");
            }

            if (vInvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
            {
                validateLineInvoiceRef(ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceRef);
                getOldBOEAmounts();
                validateLineBOE();
                ExceptionManager.AssertNoBLExceptions();
            }

            /* Set flags for use in apInvDtlAfterUpdate */
            if (StringExtensions.Compare(ttAPInvDtl.RowMod, IceRow.ROWSTATE_ADDED) == 0 ||
                (BIttAPInvDtl != null &&
                (StringExtensions.Compare(BIttAPInvDtl.TaxExempt, ttAPInvDtl.TaxExempt) != 0 ||
                    StringExtensions.Compare(BIttAPInvDtl.TaxCatID, ttAPInvDtl.TaxCatID) != 0)))
            {
                lDtlTaxExemptChanged = true;
                ReCalcTaxes = true;
            }



            if ((StringExtensions.Compare(ttAPInvDtl.RowMod, IceRow.ROWSTATE_ADDED) == 0) || ((BIttAPInvDtl != null) && ((BIttAPInvDtl.DocExtCost != ttAPInvDtl.DocExtCost) || (BIttAPInvDtl.ScrDocExtCost != ttAPInvDtl.ScrDocExtCost) || (!BIttAPInvDtl.PartNum.KeyEquals(ttAPInvDtl.PartNum)))))
            {
                lApInvDtlChanged = true;

            }

            if (StringExtensions.Compare(ttAPInvDtl.LineType, "U") == 0)
            {
                if (StringExtensions.Compare(ttAPInvDtl.RowMod, IceRow.ROWSTATE_ADDED) == 0 ||
                    (BIttAPInvDtl != null &&
                    (BIttAPInvDtl.PORelNum != ttAPInvDtl.PORelNum ||
                    StringExtensions.Compare(BIttAPInvDtl.PartNum, ttAPInvDtl.PartNum) != 0)))
                {
                    lGetAcctForUnrcvd = true;
                }
                else
                {
                    lGetAcctForUnrcvd = false;
                }
            }
            else
            {
                lGetAcctForUnrcvd = false;
            }

            if (StringExtensions.Compare(ttAPInvDtl.LineType, "M") == 0)
            {
                if (BIttAPInvDtl != null)
                {
                    cOldPartNum = BIttAPInvDtl.PartNum;
                }
            }

            if (ExceptionManager.Exceptions.Count == 0)
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
                if (!APInvHed.CancellationInv)
                {
                    if (ttAPInvDtl.DebitMemo == false)
                    {
                        ttAPInvDtl.ExtCost = ttAPInvDtl.ScrExtCost;
                        ttAPInvDtl.DocExtCost = ttAPInvDtl.ScrDocExtCost;
                        ttAPInvDtl.TotalMiscChrg = ttAPInvDtl.ScrTotalMiscChrg;
                        ttAPInvDtl.DocTotalMiscChrg = ttAPInvDtl.ScrDocTotalMiscChrg;
                        ttAPInvDtl.VendorQty = ttAPInvDtl.ScrVendorQty;
                        ttAPInvDtl.OurQty = ttAPInvDtl.ScrOurQty;
                        ttAPInvDtl.LineDiscAmt = ttAPInvDtl.ScrLineDiscAmt;
                        ttAPInvDtl.DocLineDiscAmt = ttAPInvDtl.ScrDocLineDiscAmt;
                    }
                    else
                    {
                        ttAPInvDtl.ExtCost = -ttAPInvDtl.ScrExtCost;
                        ttAPInvDtl.DocExtCost = -ttAPInvDtl.ScrDocExtCost;
                        ttAPInvDtl.TotalMiscChrg = -ttAPInvDtl.ScrTotalMiscChrg;
                        ttAPInvDtl.DocTotalMiscChrg = -ttAPInvDtl.ScrDocTotalMiscChrg;
                        ttAPInvDtl.VendorQty = -ttAPInvDtl.ScrVendorQty;
                        ttAPInvDtl.OurQty = -ttAPInvDtl.ScrOurQty;
                        ttAPInvDtl.LineDiscAmt = -ttAPInvDtl.ScrLineDiscAmt;
                        ttAPInvDtl.DocLineDiscAmt = -ttAPInvDtl.ScrDocLineDiscAmt;
                    }
                }
                if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {

                    if (String.IsNullOrEmpty(pCurrList))
                    {
                        if (vUseDate == 1)
                        {
                            vExDate = APInvHed.InvoiceDate;
                        }
                        else
                        {
                            vExDate = APInvHed.ApplyDate;
                        }

                        this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                    }

                    pFieldList = "ExtCost" + Ice.Constants.LIST_DELIM + "TotalMiscChrg" + Ice.Constants.LIST_DELIM + "LineDiscAmt";
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvDtl, false, pFieldList, pCurrList, "ttAPInvDtl", APInvHed.CurrencyCode, ttChainRows);
                }
            }


            if (APInvHed == null)
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);

            }
            if (APInvHed != null)
            {
                if (APInvHed.InPrice && APInvHed.ReadyToCalc && BIttAPInvDtl != null && ttAPInvDtl.DocAdvancePayAmt != BIttAPInvDtl.DocAdvancePayAmt)
                {
                    // Need to know the total of all Advance Billing Lines and taxes for Advance Bill Lines
                    foreach (var advAPInvDtl_iterator in (this.SelectAPInvDtl(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.PONum, ttAPInvDtl.POLine, 0, "A")))
                    {

                        totAdv = totAdv + advAPInvDtl_iterator.DocInExtCost;
                        totBaseAdv = totBaseAdv + advAPInvDtl_iterator.InExtCost;
                        totRpt1Adv = totRpt1Adv + advAPInvDtl_iterator.Rpt1InExtCost;
                        totRpt2Adv = totRpt2Adv + advAPInvDtl_iterator.Rpt2InExtCost;
                        totRpt3Adv = totRpt3Adv + advAPInvDtl_iterator.Rpt3InExtCost;
                        totTax = totTax + (advAPInvDtl_iterator.DocInExtCost - advAPInvDtl_iterator.DocExtCost);
                        totBaseTax = totBaseTax + (advAPInvDtl_iterator.InExtCost - advAPInvDtl_iterator.ExtCost);
                        totRpt1Tax = totRpt1Tax + (advAPInvDtl_iterator.Rpt1InExtCost - advAPInvDtl_iterator.Rpt1ExtCost);
                        totRpt2Tax = totRpt2Tax + (advAPInvDtl_iterator.Rpt2InExtCost - advAPInvDtl_iterator.Rpt2ExtCost);
                        totRpt3Tax = totRpt3Tax + (advAPInvDtl_iterator.Rpt3InExtCost - advAPInvDtl_iterator.Rpt3ExtCost);

                    }  //for each related Advance bill detail line

                    if (totAdv == ttAPInvDtl.DocAdvancePayAmt)
                    {
                        temAdvTax = totTax;
                        temBaseAdvTax = totBaseTax;
                        temRpt1AdvTax = totRpt1Tax;
                        temRpt2AdvTax = totRpt2Tax;
                        temRpt3AdvTax = totRpt3Tax;
                    }
                    else
                    {
                        if (totAdv != 0)
                        {
                            temAdvTax = LibRoundRulesEF.RoundRuleApply((totTax * ttAPInvDtl.DocAdvancePayAmt / totAdv), LibRoundRulesEF.TypeAmt_UnitTax, APInvHed.CurrencyCode);
                        }
                        else
                        {
                            temAdvTax = 0;
                        }

                        if (totBaseAdv != 0)
                        {
                            temBaseAdvTax = LibRoundRulesEF.RoundRuleApply((totBaseTax * ttAPInvDtl.AdvancePayAmt / totBaseAdv), LibRoundRulesEF.TypeAmt_UnitTax, APInvHed.CurrencyCode);
                        }
                        else
                        {
                            temBaseAdvTax = 0;
                        }

                        if (totRpt1Adv != 0)
                        {
                            temRpt1AdvTax = LibRoundRulesEF.RoundRuleApply((totRpt1Tax * ttAPInvDtl.Rpt1AdvancePayAmt / totRpt1Adv), LibRoundRulesEF.TypeAmt_UnitTax, APInvHed.CurrencyCode);
                        }
                        else
                        {
                            temRpt1AdvTax = 0;
                        }

                        if (totRpt2Adv != 0)
                        {
                            temRpt2AdvTax = LibRoundRulesEF.RoundRuleApply((totRpt2Tax * ttAPInvDtl.Rpt2AdvancePayAmt / totRpt2Adv), LibRoundRulesEF.TypeAmt_UnitTax, APInvHed.CurrencyCode);
                        }
                        else
                        {
                            temRpt2AdvTax = 0;
                        }

                        if (totRpt3Adv != 0)
                        {
                            temRpt3AdvTax = LibRoundRulesEF.RoundRuleApply((totRpt3Tax * ttAPInvDtl.Rpt3AdvancePayAmt / totRpt3Adv), LibRoundRulesEF.TypeAmt_UnitTax, APInvHed.CurrencyCode);
                        }
                        else
                        {
                            temRpt3AdvTax = 0;
                        }

                    }


                    ttAPInvDtl.DocInAdvancePayAmt = ttAPInvDtl.DocAdvancePayAmt;
                    ttAPInvDtl.InAdvancePayAmt = ttAPInvDtl.AdvancePayAmt;
                    ttAPInvDtl.Rpt1InAdvancePayAmt = ttAPInvDtl.Rpt1AdvancePayAmt;
                    ttAPInvDtl.Rpt2InAdvancePayAmt = ttAPInvDtl.Rpt2AdvancePayAmt;
                    ttAPInvDtl.Rpt3InAdvancePayAmt = ttAPInvDtl.Rpt3AdvancePayAmt;

                    ttAPInvDtl.DocAdvancePayAmt = ttAPInvDtl.DocAdvancePayAmt - temAdvTax;
                    ttAPInvDtl.AdvancePayAmt = ttAPInvDtl.AdvancePayAmt - temBaseAdvTax;
                    ttAPInvDtl.Rpt1AdvancePayAmt = ttAPInvDtl.Rpt1AdvancePayAmt - temRpt1AdvTax;
                    ttAPInvDtl.Rpt2AdvancePayAmt = ttAPInvDtl.Rpt2AdvancePayAmt - temRpt2AdvTax;
                    ttAPInvDtl.Rpt3AdvancePayAmt = ttAPInvDtl.Rpt3AdvancePayAmt - temRpt3AdvTax;
                }
            } //APInvHed not null


            if (BIttAPInvDtl == null ||
                (BIttAPInvDtl != null &&
                (BIttAPInvDtl.DocExtCost != ttAPInvDtl.DocExtCost ||
                 BIttAPInvDtl.DocAdvancePayAmt != ttAPInvDtl.DocAdvancePayAmt ||
                 BIttAPInvDtl.ScrExtCost != ttAPInvDtl.ScrExtCost ||
                 BIttAPInvDtl.ScrDocExtCost != ttAPInvDtl.ScrDocExtCost ||
                 BIttAPInvDtl.DocScrUnitCost != ttAPInvDtl.DocScrUnitCost ||
                 BIttAPInvDtl.ScrVendorQty != ttAPInvDtl.ScrVendorQty ||
                 BIttAPInvDtl.DocTotalMiscChrg != ttAPInvDtl.DocTotalMiscChrg ||
                 !BIttAPInvDtl.TaxCatID.KeyEquals(ttAPInvDtl.TaxCatID) ||
                 (BIttAPInvDtl.NoTaxRecal != ttAPInvDtl.NoTaxRecal && ttAPInvDtl.NoTaxRecal == false) ||
                StringExtensions.Compare(BIttAPInvDtl.PartNum, ttAPInvDtl.PartNum) != 0)))
            {
                ReCalcTaxes = true;
            }

            if (BIttAPInvDtl != null)
            {
                if (BIttAPInvDtl.PONum != ttAPInvDtl.PONum ||
                    BIttAPInvDtl.POLine != ttAPInvDtl.POLine ||
                    BIttAPInvDtl.PORelNum != ttAPInvDtl.PORelNum)
                {
                    Erp.Tables.PORel AltPORel = null;


                    PORel = FindFirstPORel(Session.CompanyID, BIttAPInvDtl.PONum, BIttAPInvDtl.POLine, BIttAPInvDtl.PORelNum);



                    AltPORel = FindFirstPORel(Session.CompanyID, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ttAPInvDtl.PORelNum);
                    if (StringExtensions.Compare(PORel.JobNum, AltPORel.JobNum) != 0 || PORel.AssemblySeq != AltPORel.AssemblySeq ||
                    PORel.JobSeq != AltPORel.JobSeq)
                    {


                        var APInvPBQuery = DBExpressionCompiler.Compile(APInvPBExpression);
                        foreach (var APInvPB_iterator in (APInvPBQuery(Db, Session.CompanyID, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine)))
                        {
                            APInvPB = APInvPB_iterator;
                            ttAPInvPB = new Erp.Tablesets.APInvPBRow();
                            CurrentFullTableset.APInvPB.Add(ttAPInvPB);
                            BufferCopy.Copy(APInvPB, ref ttAPInvPB);
                            ttAPInvPB.SysRowID = APInvPB.SysRowID;
                            ttAPInvPB.RowMod = IceRow.ROWSTATE_DELETED;
                            Db.APInvPB.Delete(APInvPB);
                        }
                    }
                }
            }

            if (ttAPInvDtl.DeferredExp)
            {
                if (string.IsNullOrEmpty(ttAPInvDtl.DEACode))
                    throw new BLException(Strings.AmortizationCodeIsRequired, "APInvDtl", "DEACode");
                else
                {
                    var raSchedCd = FindFirstRASchedCd(Session.CompanyID, ttAPInvDtl.DEACode, scope1: "AP", scope2: "GA", active: true);
                    if (raSchedCd == null)
                        throw new BLException(Strings.IsNotValidExpenseAmortCode(ttAPInvDtl.DEACode), "APInvDtl", "DEACode");
                }

                if (ttAPInvDtl.DEAStartDate != null)
                {
                    string errMessage = LibEADValidation.validateEAD(ttAPInvDtl.DEAStartDate, "AP", "Apply");
                    if (!string.IsNullOrEmpty(errMessage))
                        throw new BLException(errMessage);

                    if (ttAPInvDtl.DEAEndDate != null)
                    {
                        if (ttAPInvDtl.DEAEndDate <= ttAPInvDtl.DEAStartDate)
                            throw new BLException(Strings.EndDateMustBeLaterStartDate);

                        if (!String.IsNullOrEmpty(ttAPInvDtl.DEACode))
                        {
                            // validates that fiscal calendar is properly set up for DEA Start Date - End Date range
                            LibCreateAmort.BuildFiscalPeriods(ttAPInvDtl.DEACode, ttAPInvDtl.DEAStartDate, ttAPInvDtl.DEAEndDate);
                        }
                    }
                }
            }

            if (StringExtensions.Compare(ttAPInvDtl.LineType, "R") == 0 && !(APInvHed != null && APInvHed.CorrectionInv && ttAPInvDtl.CorrectionDtl))
            {
                UpdateFinalInvoiceFlag();
            }

            SaveBeforeSyncAPInvExp();
        }

        private void ApInvDtlChildDeleted(bool inRunSyncAPInvExp)
        {


            var APInvDtlQuery4 = DBExpressionCompiler.Compile(APInvDtlExpression4);
            APInvDtl = APInvDtlQuery4(Db, rSaveAPInvDtlRowid);
            if (APInvDtl != null)
            {
                if ((StringExtensions.Compare(APInvDtl.LineType, "U") == 0 || StringExtensions.Compare(APInvDtl.LineType, "R") == 0 || StringExtensions.Compare(APInvDtl.LineType, "M") == 0) && inRunSyncAPInvExp)
                {
                    APSyncAPInvExp.RunSyncAPInvExp("APInvDtl", APInvDtl.SysRowID, Guid.Empty, Guid.Empty, Guid.Empty, false, "", 0M, "InvoiceLine", string.Empty, out lAPInvExpUpdated);
                }

                if (lAPInvExpUpdated == true)
                {


                    foreach (var APInvExp_iterator in (SelectAPInvExp(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine)))
                    {
                        APInvExp = APInvExp_iterator;
                        refreshttAPInvExp();
                    }

                    RefreshAfterSyncAPInvExp();


                    ttAPInvExp = (from ttAPInvExp_Row in CurrentFullTableset.APInvExp
                                  where StringExtensions.Compare(ttAPInvExp_Row.RowMod, IceRow.ROWSTATE_DELETED) == 0
                                  select ttAPInvExp_Row).FirstOrDefault();
                }
                refreshttAPInvDtl();

                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum);
                if (APInvHed != null)
                {
                    refreshttAPInvHed();
                }
                /* Refresh line misc charges */


                foreach (var APInvMsc_iterator in (SelectAPInvMsc(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine)))
                {
                    APInvMsc = APInvMsc_iterator;
                    refreshttAPInvMsc();
                }
            }
        }

        private void ApInvDtlInvoiceRefChanged(string inNewInvoiceRef)
        {
            Erp.Tables.APInvHed RefApInvHed = null;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvDtl.VendorNum, inNewInvoiceRef);
            if (APInvHed == null)
            {
                ExceptionManager.AddBLException(Strings.InvoiceNotFound, "ttApInvDtl");
            }
            validateLineInvoiceRef(ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, inNewInvoiceRef);
            ExceptionManager.AssertNoBLExceptions();
            ttAPInvDtl.InvoiceRef = inNewInvoiceRef;

            RefApInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvDtl.VendorNum, inNewInvoiceRef);
            if (RefApInvHed != null)
            {
                ttAPInvDtl.Description = Strings.Invoice(RefApInvHed.InvoiceNum);
            }
            else
            {
                ttAPInvDtl.Description = "";
            }

            /* if ttAPInvDtl.CurrencySwitch = true */
            if (ttAPInvDtl.CurrencySwitch == true)
            {
                ttAPInvDtl.UnitCost = ((RefApInvHed != null) ? RefApInvHed.UnpostedBal : 0);
                var outUnitCost = ttAPInvDtl.UnitCost;
                var outDocUnitCost = ttAPInvDtl.DocUnitCost;
                var outRpt1UnitCost = ttAPInvDtl.Rpt1UnitCost;
                var outRpt2UnitCost = ttAPInvDtl.Rpt2UnitCost;
                var outRpt3UnitCost = ttAPInvDtl.Rpt3UnitCost;
                CalcDocAmt(ref outUnitCost, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "DocUnitCost", "UnitCost", out outDocUnitCost, out outRpt1UnitCost, out outRpt2UnitCost, out outRpt3UnitCost);
                ttAPInvDtl.UnitCost = outUnitCost;
                ttAPInvDtl.DocUnitCost = outDocUnitCost;
                ttAPInvDtl.Rpt1UnitCost = outRpt1UnitCost;
                ttAPInvDtl.Rpt2UnitCost = outRpt2UnitCost;
                ttAPInvDtl.Rpt3UnitCost = outRpt3UnitCost;
            }
            else
            {
                ttAPInvDtl.DocUnitCost = ((RefApInvHed != null) ? RefApInvHed.DocUnpostedBal : 0);
                var outUnitCost2 = ttAPInvDtl.UnitCost;
                var outRpt1UnitCost2 = ttAPInvDtl.Rpt1UnitCost;
                var outRpt2UnitCost2 = ttAPInvDtl.Rpt2UnitCost;
                var outRpt3UnitCost2 = ttAPInvDtl.Rpt3UnitCost;
                CalcBaseAmt(ttAPInvDtl.DocUnitCost, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "UnitCost", out outUnitCost2, out outRpt1UnitCost2, out outRpt2UnitCost2, out outRpt3UnitCost2);
                ttAPInvDtl.UnitCost = outUnitCost2;
                ttAPInvDtl.Rpt1UnitCost = outRpt1UnitCost2;
                ttAPInvDtl.Rpt2UnitCost = outRpt2UnitCost2;
                ttAPInvDtl.Rpt3UnitCost = outRpt3UnitCost2;
            }/* else do */

            CalcExtCost();
            getLineTotals();
        }

        partial void APInvExpAfterDelete()
        {
            ApInvDtlChildDeleted(false);
        }

        private int GetNextInvoiceLine(string company, int vendorNum, string invoiceNum)
        {
            var BAPInvDtlQuery2 = DBExpressionCompiler.Compile(BAPInvDtlExpression2);
            var bAPInvDtl = BAPInvDtlQuery2(Db, company, vendorNum, invoiceNum);
            if (bAPInvDtl != null)
                return bAPInvDtl.InvoiceLine + 1;

            return 1;
        }

        #endregion

        private void SaveBeforeSyncAPInvExp()
        {
            APInvExp bAPInvExp;
            TranGLC bAPInvExpTGLC;
            IEnumerable<APInvExp> SaveAPInvExpTax = null;

            if (deletedAPInvExpRows == null)
            {
                deletedAPInvExpRows = new List<APInvExpRow>();
            }

            if (ttAPInvHedMscTax != null)
            {
                SaveAPInvExpTax = SelectAPInvExpTax(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, "APInvHedMscTax", ttAPInvHedMscTax.SysRowID);
            }
            else if (ttAPInvLnMscTax != null)
            {
                SaveAPInvExpTax = SelectAPInvExpTax(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, "APInvLnMscTax", ttAPInvLnMscTax.SysRowID);
            }
            else if (ttAPInvTax != null)
            {
                SaveAPInvExpTax = SelectAPInvExpTax(ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum, "APInvTax", ttAPInvTax.SysRowID);
            }
            else if (ttAPLnTax != null)
            {
                SaveAPInvExpTax = SelectAPInvExpTax(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, "APLnTax", ttAPLnTax.SysRowID);
            }
            else if (ttAPInvDtl != null)
            {
                SaveAPInvExpTax = SelectAPInvExp(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine);
            }
            else if (ttAPInvMsc != null)
            {
                SaveAPInvExpTax = SelectAPInvExp(ttAPInvMsc.Company, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, ttAPInvMsc.InvoiceLine);
            }

            if (SaveAPInvExpTax != null)
            {
                foreach (var bAPInvExp_iterator in SaveAPInvExpTax)
                {
                    bAPInvExp = bAPInvExp_iterator;
                    deletedAPInvExp = new APInvExpRow();
                    deletedAPInvExpRows.Add(deletedAPInvExp);
                    BufferCopy.Copy(bAPInvExp, ref deletedAPInvExp);

                    if (deletedAPInvExpTGLCRows == null)
                    {
                        deletedAPInvExpTGLCRows = new List<APInvExpTGLCRow>();
                    }

                    var BAPInvExpTGLCQuery = DBExpressionCompiler.Compile(BAPInvExpTGLCExpression);
                    foreach (var bAPInvExpTGLC_iterator in (BAPInvExpTGLCQuery(Db, bAPInvExp.Company, "APInvExp", Compatibility.Convert.ToString(bAPInvExp.VendorNum), Compatibility.Convert.ToString(bAPInvExp.InvoiceNum), Compatibility.Convert.ToString(bAPInvExp.InvoiceLine), Compatibility.Convert.ToString(bAPInvExp.InvExpSeq))))
                    {
                        bAPInvExpTGLC = bAPInvExpTGLC_iterator;
                        deletedAPInvExpTGLC = new APInvExpTGLCRow();
                        deletedAPInvExpTGLCRows.Add(deletedAPInvExpTGLC);
                        BufferCopy.Copy(bAPInvExpTGLC, ref deletedAPInvExpTGLC);
                    }
                }
            }
        }

        private void RefreshAfterSyncAPInvExp()
        {
            if (lAPInvExpUpdated)
            {
                if (deletedAPInvExpRows != null)
                {
                    foreach (var deletedAPInvExp in deletedAPInvExpRows)
                    {
                        if (!ExistsAPInvExp(deletedAPInvExp.SysRowID))
                        {
                            var APInvExp = FindFirstAPInvExp(deletedAPInvExp.Company, deletedAPInvExp.VendorNum, deletedAPInvExp.InvoiceNum, deletedAPInvExp.InvoiceLine, deletedAPInvExp.InvExpSeq);
                            if (APInvExp == null)
                            {
                                if (ttAPInvHedMscTax != null)
                                {
                                    ttAPIHAPInvExp = new Erp.Tablesets.APIHAPInvExpRow();
                                    CurrentFullTableset.APIHAPInvExp.Add(ttAPIHAPInvExp);
                                    BufferCopy.Copy(deletedAPInvExp, ref ttAPIHAPInvExp);
                                    ttAPIHAPInvExp.RowMod = IceRow.ROWSTATE_DELETED;
                                }
                                else
                                {
                                    ttAPInvExp = new Erp.Tablesets.APInvExpRow();
                                    CurrentFullTableset.APInvExp.Add(ttAPInvExp);
                                    BufferCopy.Copy(deletedAPInvExp, ref ttAPInvExp);
                                    ttAPInvExp.RowMod = IceRow.ROWSTATE_DELETED;
                                }
                            }
                        }
                    }
                }

                if (deletedAPInvExpTGLCRows != null)
                {
                    foreach (var deletedAPInvExpTGLC in deletedAPInvExpTGLCRows)
                    {
                        if (!ExistsTranGLC(deletedAPInvExpTGLC.SysRowID))
                        {
                            if (deletedAPInvExpTGLC.GLAcctContext.KeyEquals("External Expense"))
                            {
                                ttGlbAPIETGLC = new Erp.Tablesets.GlbAPIETGLCRow();
                                CurrentFullTableset.GlbAPIETGLC.Add(ttGlbAPIETGLC);
                                BufferCopy.Copy(deletedAPInvExpTGLC, ref ttGlbAPIETGLC);
                                this.LibAPInvExpTranGLCBO.AfterGetRows(ttGlbAPIETGLC);
                                ttGlbAPIETGLC.RowMod = IceRow.ROWSTATE_DELETED;
                            }
                            else
                            {
                                if (ttAPInvHedMscTax != null)
                                {
                                    ttAPIHAPInvExpTGLC = new Erp.Tablesets.APIHAPInvExpTGLCRow();
                                    CurrentFullTableset.APIHAPInvExpTGLC.Add(ttAPIHAPInvExpTGLC);
                                    BufferCopy.Copy(deletedAPInvExpTGLC, ref ttAPIHAPInvExpTGLC);
                                    this.LibAPInvExpTranGLCBO.AfterGetRows(ttAPIHAPInvExpTGLC);
                                    ttAPIHAPInvExpTGLC.RowMod = IceRow.ROWSTATE_DELETED;
                                }
                                else
                                {
                                    ttAPInvExpTGLC = new Erp.Tablesets.APInvExpTGLCRow();
                                    CurrentFullTableset.APInvExpTGLC.Add(ttAPInvExpTGLC);
                                    BufferCopy.Copy(deletedAPInvExpTGLC, ref ttAPInvExpTGLC);
                                    this.LibAPInvExpTranGLCBO.AfterGetRows(ttAPInvExpTGLC);
                                    ttAPInvExpTGLC.RowMod = IceRow.ROWSTATE_DELETED;
                                }
                            }
                        }
                    }
                }
            }
        }

        #region APInvExp Table Methods

        partial void APInvExpAfterGetNew()
        {
            Erp.Tables.APInvExp bAPInvExp = null;
            int NextSeq = 0;
            NextSeq = 1;


            bAPInvExp = FindLastAPInvExp(ttAPInvExp.Company, ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, ttAPInvExp.InvoiceLine);
            if (bAPInvExp != null)
            {
                NextSeq = bAPInvExp.InvExpSeq + 1;
            }

            ttAPInvExp.InvExpSeq = NextSeq;
            if (ttAPInvExp.SysRowID.CompareTo(Guid.Empty) == 0)
                ttAPInvExp.SysRowID = Guid.NewGuid();
            APInvExpAfterGetRows();

            // SCR 120861 Add back CreateDefault call because 9.05.7xx program was calling CreateDefault to populate G/L controls
            //            If this is removed then the G/L number is disabled and you are unable to change the amount column.
            // Note: Because the posting engine requires physical records to assign the G/L information, we can't use APInvExpTGCLRunPE.

            if (!Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt"))
            {

                if (!(from ttAPInvExpTGLC_Row in CurrentFullTableset.APInvExpTGLC
                      where ttAPInvExpTGLC_Row.Company.KeyEquals(ttAPInvExp.Company) &&
                      ttAPInvExpTGLC_Row.RelatedToFile.KeyEquals("APInvExp") &&
                      ttAPInvExpTGLC_Row.Key1.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.VendorNum)) &&
                      ttAPInvExpTGLC_Row.Key2.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvoiceNum)) &&
                      ttAPInvExpTGLC_Row.Key3.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvoiceLine)) &&
                      ttAPInvExpTGLC_Row.Key4.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvExpSeq))
                      select ttAPInvExpTGLC_Row).Any())
                {
                    APInvExpTGLC_CreateDefault();
                }

                foreach (var ttAPInvExpTGLC in (from ttAPInvExpTGLC_Row in CurrentFullTableset.APInvExpTGLC
                                                where ttAPInvExpTGLC_Row.Company.KeyEquals(ttAPInvExp.Company) &&
                                                ttAPInvExpTGLC_Row.RelatedToFile.KeyEquals("APInvExp") &&
                                                ttAPInvExpTGLC_Row.Key1.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.VendorNum)) &&
                                                ttAPInvExpTGLC_Row.Key2.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvoiceNum)) &&
                                                ttAPInvExpTGLC_Row.Key3.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvoiceLine)) &&
                                                ttAPInvExpTGLC_Row.Key4.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvExpSeq))
                                                select ttAPInvExpTGLC_Row))
                {
                    if (ttAPInvExpTGLC.SysRowID.CompareTo(Guid.Empty) == 0)
                        ttAPInvExpTGLC.SysRowID = Guid.NewGuid();

                    ttAPInvExp.COACode = ttAPInvExpTGLC.COACode;
                    ttAPInvExp.BookID = ttAPInvExpTGLC.BookID;
                }
            }
        }

        partial void APInvExpAfterGetRows()
        {
            var outDebitMemo4 = ttAPInvExp.DebitMemo;
            var outPosted4 = ttAPInvExp.Posted;
            var outGroupID4 = ttAPInvExp.GroupID;

            getAPInvHedAttributes(ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, out outDebitMemo4, out outPosted4, out outGroupID4);
            ttAPInvExp.DebitMemo = outDebitMemo4;
            ttAPInvExp.Posted = outPosted4;
            ttAPInvExp.GroupID = outGroupID4;

            if (APInvHed != null)
            {
                ttAPInvExp.CurrencyCode = APInvHed.CurrencyCode;
            }

            if (ttAPInvExp.DebitMemo == true)
            {
                ttAPInvExp.ScrExpAmt = -ttAPInvExp.ExpAmt;
                ttAPInvExp.DocScrExpAmt = -ttAPInvExp.DocExpAmt;
                ttAPInvExp.Rpt1ScrExpAmt = -ttAPInvExp.Rpt1ExpAmt;
                ttAPInvExp.Rpt2ScrExpAmt = -ttAPInvExp.Rpt2ExpAmt;
                ttAPInvExp.Rpt3ScrExpAmt = -ttAPInvExp.Rpt3ExpAmt;
            }
            else
            {
                ttAPInvExp.ScrExpAmt = ttAPInvExp.ExpAmt;
                ttAPInvExp.DocScrExpAmt = ttAPInvExp.DocExpAmt;
                ttAPInvExp.Rpt1ScrExpAmt = ttAPInvExp.Rpt1ExpAmt;
                ttAPInvExp.Rpt2ScrExpAmt = ttAPInvExp.Rpt2ExpAmt;
                ttAPInvExp.Rpt3ScrExpAmt = ttAPInvExp.Rpt3ExpAmt;
            }
            ttAPInvExp.EnableMultiCompany = checkEnableMulti();
            if (ttAPInvExp.Posted == false)
            {
                APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPInvExp.Company, ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, ttAPInvExp.InvoiceLine);
                if (APInvDtl != null)
                {
                    switch (APInvDtl.LineType.ToUpperInvariant())
                    {
                        case "A":
                        case "R":
                        case "U":
                            {
                                GLSyst = GLSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
                                if (GLSyst != null)
                                {
                                    ttAPInvExp.AllowUpdate = !(GLSyst.PostInvtyWipCos);
                                }
                            }
                            break;
                        case "M":
                            {
                                ttAPInvExp.AllowUpdate = true;
                            }
                            break;
                        default:
                            ttAPInvExp.AllowUpdate = false;
                            break;
                    }
                }
            }
            else
            {
                ttAPInvExp.AllowUpdate = false;
            }

            FillAPInvExpGLAccountData(ttAPInvExp);

            if (ttAPInvExp.MultiCompany == true)
            {
                var TranGLCQuery3 = DBExpressionCompiler.Compile(TranGLCExpression3);
                TranGLC = TranGLCQuery3(Db, ttAPInvExp.Company, "APInvExp", Compatibility.Convert.ToString(ttAPInvExp.VendorNum), Compatibility.Convert.ToString(ttAPInvExp.InvoiceNum), Compatibility.Convert.ToString(ttAPInvExp.InvoiceLine), Compatibility.Convert.ToString(ttAPInvExp.InvExpSeq), true);
                if (TranGLC != null)
                {
                    ttAPInvExp.BookID = TranGLC.BookID;
                    ttAPInvExp.ExtGLAccount = TranGLC.GLAccount;
                    ttAPInvExp.ExtCOACode = TranGLC.COACode;

                    var GLBGLAcctDisp = FindFirstGLBGLAcctDisp(Session.CompanyID, ttAPInvExp.ExtCompanyID, ttAPInvExp.ExtCOACode, ttAPInvExp.ExtGLAccount);
                    if (GLBGLAcctDisp != null)
                    {
                        ttAPInvExp.ExpGlbDispGLAcct = GLBGLAcctDisp.GLAcctDisp;
                        ttAPInvExp.ExtGLAccountDesc = GLBGLAcctDisp.AccountDesc;
                    }
                }
            }
        }

        private void FillAPInvExpGLAccountData(APInvExpRow aPInvExpRow)
        {
            var TranGLCQuery = DBExpressionCompiler.Compile(APInvExpTranGLCExpression);
            foreach (TranGLC APInvExpTranGLC in TranGLCQuery(Db, ttAPInvExp.Company, "APInvExp", Compatibility.Convert.ToString(ttAPInvExp.VendorNum), Compatibility.Convert.ToString(ttAPInvExp.InvoiceNum), Compatibility.Convert.ToString(ttAPInvExp.InvoiceLine), Compatibility.Convert.ToString(ttAPInvExp.InvExpSeq)))
            {
                if (!XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID).SiteIsLegalEntity || LibPlant.IsAuthorizedForPlant(APInvExpTranGLC.Plant) || String.IsNullOrEmpty(APInvExpTranGLC.Plant))
                {
                    aPInvExpRow.BookID = APInvExpTranGLC.BookID;
                    aPInvExpRow.GLAccount = APInvExpTranGLC.GLAccount;
                    aPInvExpRow.COACode = APInvExpTranGLC.COACode;

                    if (!String.IsNullOrEmpty(aPInvExpRow.GLAccount))
                    {
                        GLAcctDisp = FindFirstGLAcctDispByGLAccount(aPInvExpRow.Company, aPInvExpRow.COACode, aPInvExpRow.GLAccount);
                        if (GLAcctDisp != null)
                        {
                            aPInvExpRow.GLAccountDesc = GLAcctDisp.AccountDesc;
                            aPInvExpRow.ExpDispGLAcct = GLAcctDisp.GLAcctDisp1;
                        }
                    }

                    break;
                }
                else
                    continue;
            }
        }

        /// <summary>
        /// NOTE: this method is called from Frameworks's InnerUpdate during PasteInsert operations.
        /// </summary>
        partial void APInvExpAfterUpdate()
        {
            if (ttAPInvExp.EnableMultiCompany)
            {
                if (ttAPInvExp.MultiCompany)
                {
                    if (string.IsNullOrEmpty(ttAPInvExp.ExtCompanyID) || string.IsNullOrEmpty(ttAPInvExp.GLAccount) || ttAPInvExp.RowMod == IceRow.ROWSTATE_ADDED)
                    {
                        var AltAPInvMscQuery2 = DBExpressionCompiler.Compile(AltAPInvMscExpression);
                        APInvMsc = AltAPInvMscQuery2(Db, Session.CompanyID, ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, ttAPInvExp.InvoiceLine, ttAPInvExp.InvExpSeq);

                        if (APInvMsc == null)
                        {
                            // Override TranGLC record for G/L Expense Account when external company selected
                            glbExtCompanyID = ttAPInvExp.ExtCompanyID;
                            APInvExpTGLCRunPE(true);
                        }
                    }
                    if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt"))
                    {
                        string glAcct = ttAPInvExp.GLAccount;
                        ErpCallContext.SetDisposableKeyValue(new KeyValuePair<string, object>("UpdateExt_GlAccount", glAcct));

                    }
                }
                else
                {
                    CurrentFullTableset.GlbAPIETGLC.Clear();
                    var TranGLC = FindFirstTranGLC2(Session.CompanyID, "APInvExp",
                                Compatibility.Convert.ToString(ttAPInvExp.VendorNum),
                                Compatibility.Convert.ToString(ttAPInvExp.InvoiceNum),
                                Compatibility.Convert.ToString(ttAPInvExp.InvoiceLine),
                                Compatibility.Convert.ToString(ttAPInvExp.InvExpSeq),
                                ttAPInvExp.GroupID, "", "External Expense");
                    if (TranGLC != null)
                        LibAPInvExpTranGLCBO.PrepareRowToDeleteFromDB(TranGLC, CurrentFullTableset.GlbAPIETGLC);
                }
            }

            var APInvDtlQuery6 = DBExpressionCompiler.Compile(APInvDtlExpression6);
            foreach (var APInvDtl_iterator in (APInvDtlQuery6(Db, ttAPInvExp.Company, ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, ttAPInvExp.InvoiceLine)))
            {
                APInvDtl = APInvDtl_iterator;
                refreshttAPInvDtl();
            }
        }

        partial void APInvExpBeforeCreate()
        {

            if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt"))
            {
                APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPInvExp.Company, ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, ttAPInvExp.InvoiceLine);
                if (APInvDtl != null)
                {
                    if (StringExtensions.Compare(APInvDtl.LineType, "A") == 0 || StringExtensions.Compare(APInvDtl.LineType, "R") == 0 ||
                        StringExtensions.Compare(APInvDtl.LineType, "U") == 0)
                    {
                        GLSyst = GLSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
                        if (GLSyst != null)
                        {
                            if (GLSyst.PostInvtyWipCos == true)
                            {
                                var bAPInvExp = FindLastAPInvExp(Session.CompanyID, ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, ttAPInvExp.InvoiceLine, ttAPInvExp.InvExpSeq);
                                if (bAPInvExp != null)
                                {
                                    ExceptionManager.AddBLException(Strings.NewGLNotAllowed, "APInvTax");
                                }


                            }

                        }

                    }
                }
            }
        }

        partial void APInvExpBeforeDelete()
        {
            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPInvExp.Company, ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, ttAPInvExp.InvoiceLine);
            if (APInvDtl != null)
            {
                rSaveAPInvDtlRowid = APInvDtl.SysRowID;
                SaveBeforeSyncAPInvExp();
            }
        }

        partial void APInvExpBeforeUpdate()
        {
            if (canUpdateInvoice(ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum).canUpdateInvoice == false)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvExp");
            }
            /* SCR #3088 - do similar validations for the multi-company account and *
             * reference code if needed.  This logic needs to happen prior to the   *
             * validations of the regular G/L Acct and Reference Code just in case  *
             * we need to override them with the defaults from ExtCompany.          */
            /* ttAPInvExp.ExtCompanyID <> "" */
            if (!String.IsNullOrEmpty(ttAPInvExp.ExtCompanyID))
            {
                if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiSiteGLJournals) == false)
                {
                    throw new BLException(Strings.MultiCompanyJournalLicenseIsRequi, "APInvExp", "ExtCompanyID");
                }
                /* check if the external company is valid */



                ExtCompany = FindFirstExtCompany(ttAPInvExp.Company, "MULTI", ttAPInvExp.ExtCompanyID);
                if (ExtCompany == null)
                {
                    throw new BLException(Strings.AValidExterCompanyIDIsRequi, "APInvExp", "ExtCompanyID");
                }
                /* check if allowed to send multi-company GJ allocation */
                if (ExtCompany.AllowAPAlloc == false)
                {
                    throw new BLException(Strings.TheExterCompanyIDIsNotAllowedToSendMultiCompany, "APInvExp", "ExtCompanyID");
                }
                /* set the multi-company flag to true */
                ttAPInvExp.MultiCompany = true;

                // SCR 127350 Update multi-company external expense account information if not assigned.
                if (String.IsNullOrEmpty(ttAPInvExp.ExtGLAccount))
                {
                    ttGlbAPIETGLC = (from ttGlbAPIETGLC_Row in CurrentFullTableset.GlbAPIETGLC
                                     where ttGlbAPIETGLC_Row.Company.KeyEquals(Session.CompanyID)
                                     && StringExtensions.Compare(ttGlbAPIETGLC_Row.RelatedToFile, "APInvExp") == 0
                                     && ttGlbAPIETGLC_Row.Key1.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.VendorNum))
                                     && ttGlbAPIETGLC_Row.Key2.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvoiceNum))
                                     && ttGlbAPIETGLC_Row.Key3.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvoiceLine))
                                     && ttGlbAPIETGLC_Row.Key4.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvExpSeq))
                                     select ttGlbAPIETGLC_Row).LastOrDefault();
                    if (ttGlbAPIETGLC != null)
                    {
                        ttAPInvExp.ExtGLAccount = ttGlbAPIETGLC.GLAccount;
                        GLAcctDisp = FindFirstGLAcctDispByGLAccount(ttAPInvExp.ExtCompanyID, ttAPInvExp.ExtCOACode, ttAPInvExp.ExtGLAccount);
                        if (GLAcctDisp != null)
                        {
                            ttAPInvExp.ExpGlbDispGLAcct = GLAcctDisp.GLAcctDisp1;
                            ttAPInvExp.ExtGLAccountDesc = GLAcctDisp.AccountDesc;
                        }
                    }
                }
            }
            else
            {
                ttAPInvExp.MultiCompany = false;
                ttAPInvExp.ExtGLAccount = string.Empty;
                ttAPInvExp.ExtGLAccountDesc = string.Empty;

            } /* ttAPInvExp.ExtCompanyID = "" */
            if (ttAPInvExp.ScrExpAmt == 0)
            {
                ExceptionManager.AddBLException(Strings.InvalidDistributionAmount, "APInvExp", "ExpAmt");
            }
            ExceptionManager.AssertNoBLExceptions();
            if (ttAPInvExp.DebitMemo == false)
            {
                ttAPInvExp.ExpAmt = ttAPInvExp.ScrExpAmt;
                ttAPInvExp.DocExpAmt = ttAPInvExp.DocScrExpAmt;
                ttAPInvExp.Rpt1ExpAmt = ttAPInvExp.Rpt1ScrExpAmt;
                ttAPInvExp.Rpt2ExpAmt = ttAPInvExp.Rpt2ScrExpAmt;
                ttAPInvExp.Rpt3ExpAmt = ttAPInvExp.Rpt3ScrExpAmt;
            }
            else
            {
                ttAPInvExp.ExpAmt = -ttAPInvExp.ScrExpAmt;
                ttAPInvExp.DocExpAmt = -ttAPInvExp.DocScrExpAmt;
                ttAPInvExp.Rpt1ExpAmt = -ttAPInvExp.Rpt1ScrExpAmt;
                ttAPInvExp.Rpt2ExpAmt = -ttAPInvExp.Rpt2ScrExpAmt;
                ttAPInvExp.Rpt3ExpAmt = -ttAPInvExp.Rpt3ScrExpAmt;
            }
            SaveBeforeSyncAPInvExp();
        }

        #endregion

        #region APInvExpTGLC Table Methods

        partial void APInvExpTGLCAfterGetNew()
        {
            Erp.Tables.APInvHed bAPInvHed = null;
            /* Need to assign ttAPInvExpTGLC.GroupID.  Could not do this generically
              in lib/tranglc.i */
            /* First see if a ttAPInvExp record exists.  If it does, get the GroupID
               from that. */


            ttAPInvExp = (from ttAPInvExp_Row in CurrentFullTableset.APInvExp
                          where ttAPInvExp_Row.Company.KeyEquals(Session.CompanyID)
                          && ttAPInvExp_Row.VendorNum == ttAPInvExpTGLC.VendorNum
                          && StringExtensions.Compare(ttAPInvExp_Row.InvoiceNum, ttAPInvExpTGLC.InvoiceNum) == 0
                          && ttAPInvExp_Row.InvoiceLine == ttAPInvExpTGLC.InvoiceLine
                          && ttAPInvExp_Row.InvExpSeq == ttAPInvExpTGLC.InvExpSeq
                          && StringExtensions.Compare(ttAPInvExp_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                          select ttAPInvExp_Row).FirstOrDefault();
            if (ttAPInvExp != null)
            {
                ttAPInvExpTGLC.GroupID = ttAPInvExp.GroupID;
                ttAPInvExpTGLC.Key5 = ttAPInvExp.GroupID;
            }
            else
            {

                bAPInvHed = FindFirstAPInvHed(Session.CompanyID, ttAPInvExpTGLC.VendorNum, ttAPInvExpTGLC.InvoiceNum);
                if (bAPInvHed != null)
                {
                    ttAPInvExpTGLC.GroupID = bAPInvHed.GroupID;
                    ttAPInvExpTGLC.Key5 = bAPInvHed.GroupID;
                }
            }

            LibAPInvExpTranGLCBO.AfterGetNew(ttAPInvExpTGLC, CurrentFullTableset.APInvExpTGLC);
        }

        partial void APInvExpTGLCAfterGetRows()
        {
            LibAPInvExpTranGLCBO.AfterGetRows(ttAPInvExpTGLC);
        }

        partial void APIHAPInvExpTGLCAfterUpdate()
        {
            if (ttAPIHAPInvExp != null)
                ttAPIHAPInvExp.GLAccount = ttAPIHAPInvExpTGLC.GLAccount;
        }

        partial void APInvExpTGLCAfterUpdate()
        {
            bool hasToBeRefreshed = false;
            if (ttAPInvExp == null)
            {
                hasToBeRefreshed = true;
            }
            else if (ttAPInvExp.VendorNum != ttAPInvExpTGLC.VendorNum
                   || StringExtensions.Compare(ttAPInvExp.InvoiceNum, ttAPInvExpTGLC.InvoiceNum) != 0
                   || ttAPInvExp.InvoiceLine != ttAPInvExpTGLC.InvoiceLine
                   || ttAPInvExp.InvExpSeq != ttAPInvExpTGLC.InvExpSeq)
            {
                hasToBeRefreshed = true;
            }

            if (hasToBeRefreshed)
            {
                ttAPInvExp = (from ttAPInvExp_Row in CurrentFullTableset.APInvExp
                              where ttAPInvExp_Row.Company.KeyEquals(Session.CompanyID)
                              && ttAPInvExp_Row.VendorNum == ttAPInvExpTGLC.VendorNum
                              && StringExtensions.Compare(ttAPInvExp_Row.InvoiceNum, ttAPInvExpTGLC.InvoiceNum) == 0
                              && ttAPInvExp_Row.InvoiceLine == ttAPInvExpTGLC.InvoiceLine
                              && ttAPInvExp_Row.InvExpSeq == ttAPInvExpTGLC.InvExpSeq
                              select ttAPInvExp_Row).FirstOrDefault();
            }

            // SCR 120861 The G/L account and other issues are a result of not calling CreateDetails to setup the ttTranGLC records, 
            //            this was done using a temp table in 9.05.703 and running the posting engine, but the posting engine in E10 
            //            requires a physical record to do the same processing. Because we couldn't use APInvExpTGCLRunPE, we need to 
            //            always refresh the missing information.

            if (ttAPInvExp != null)
            {
                ttAPInvExp.COACode = ttAPInvExpTGLC.COACode;
                ttAPInvExp.GLAccount = ttAPInvExpTGLC.GLAccount;

                // SCR 74264 - Get account description from GLAcctDesc table when needed
                GLAcctDisp = FindFirstGLAcctDispByGLAccount(ttAPInvExpTGLC.Company, ttAPInvExpTGLC.COACode, ttAPInvExpTGLC.GLAccount);
                if (GLAcctDisp != null)
                {
                    ttAPInvExp.GLAccountDesc = GLAcctDisp.AccountDesc;
                    ttAPInvExp.ExpDispGLAcct = GLAcctDisp.GLAcctDisp1;
                }
            }
            else if (APInvExp != null)
                refreshttAPInvExp();
        }

        partial void APInvExpTGLCBeforeCreate()
        {
            if (ErpCallContext.ContainsKey("UpdateExt_GlAccount"))
            {
                if (!String.IsNullOrEmpty(ErpCallContext.GetValue("UpdateExt_GlAccount").ToString()))
                {
                    ttAPInvExpTGLC.GLAccount = ErpCallContext.GetValue("UpdateExt_GlAccount").ToString();
                }
                ErpCallContext.RemoveValue("UpdateExt_GlAccount");
            }
            LibAPInvExpTranGLCBO.BeforeCreate(ttAPInvExpTGLC);
        }

        partial void APInvExpTGLCBeforeUpdate()
        {

            LibAPInvExpTranGLCBO.BeforeUpdate(ttAPInvExpTGLC);
            var vParams = LibAPInvExpTranGLCBO.GetDefaultValidateParams(ttAPInvExpTGLC);
            vParams.MessageDoc = Strings.InvalidAccountDoc(vParams.DocumentKeys.Key2, vParams.DocumentKeys.Key3, vParams.GLAccount, ttAPInvExpTGLC.BookID);
            vParams.MessageTab = Strings.ReviewGLAnalysisTab;
            vParams.RestrictID = APInvoiceRestrictionString;

            var ttAPInvHedRow = FindFirstAPInvHed(ttAPInvExpTGLC.Company, ttAPInvExpTGLC.VendorNum, ttAPInvExpTGLC.InvoiceNum);
            if (ttAPInvHedRow != null)
                vParams.EffectiveDate = ttAPInvHedRow.InvoiceDate;

            LibAPInvExpTranGLCBO.ValidateGLAccount(vParams);

            //It validates inside if it exists a GLAcctDisp. If not, it creates a new record for it.
            GLCreateGLAcctDisp.CheckDispAccountGeneral(ttAPInvExpTGLC.Company, ttAPInvExpTGLC.COACode, ttAPInvExpTGLC.GLAccount);

            GLAcctDisp glAcctDisp = FindFirstGLAcctDispByGLAccount(ttAPInvExpTGLC.Company, ttAPInvExpTGLC.COACode, ttAPInvExpTGLC.GLAccount);

            //If GLAcctDisp was created or already existed, set the proper information.
            if (glAcctDisp != null)
            {
                ttAPInvExpTGLC.GLAccountGLAcctDisp = glAcctDisp.GLAcctDisp1;
                ttAPInvExpTGLC.GLAccountAccountDesc = glAcctDisp.AccountDesc;

            }
        }

        private void APInvExpTGLCRunPE(bool runAfterUpdateAPInvExp)
        {
            if (ttAPInvExp == null)
                return;

            bool lIsMultiComp = false;
            ttAPInvExp.ExtCompanyID = glbExtCompanyID;
            if (!String.IsNullOrEmpty(glbExtCompanyID))
                lIsMultiComp = true;

            APInvExpTGLCTable ttTranGLCs = new APInvExpTGLCTable();
            using (AP_InvoicePre_Post prepost = new AP_InvoicePre_Post(Db))
            {
                prepost.ExtCompanyID = glbExtCompanyID;
                prepost.MultiCompany = lIsMultiComp;
                prepost.AP_InvoiceExp_GLControl(ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, ttAPInvExp.InvoiceLine, ttAPInvExp.InvExpSeq, lIsMultiComp,
                    CurrentFullTableset.APInvExp, ttTranGLCs);

                ttTranGLCs.RemoveAll(row => row.RelatedToFile.KeyCompare("APInvExp") != 0);

                if (prepost.PEData.PEError.IsAnyException())
                {
                    string PEErrMessage = Strings.ThereWereErrorsDuringGettingAccountForThisTrans(prepost.PEData.PEError.GetExceptions());
                    throw new BLException(PEErrMessage, "ttAPInvExpTGLCPE");
                }
            }

            if (lIsMultiComp)
            {
                if ((from row in ttTranGLCs where String.IsNullOrEmpty(row.GLAccount) select row).Any())
                    throw new BLException(Strings.TheExterCompanyIDHasAnInvalidGLInterAccount, "ttAPInvExpTGLCPE");
            }

            if (ErpCallContext.ContainsKey("UpdateExt") && runAfterUpdateAPInvExp)
            {
                foreach (var ttAPInvExpTGLCPE in ttTranGLCs)
                {
                    ttAPInvExp.GLAccount = ttAPInvExpTGLCPE.GLAccount;
                }
                return;
            }



            RefreshttAPInvExpTGLC(false);

            // update existing data 
            foreach (var ttAPInvExpTGLCPE in ttTranGLCs)
            {
                ttAPInvExpTGLC = FindLastTTAPInvExpTGLC(ttAPInvExpTGLCPE.Company, ttAPInvExpTGLCPE.RelatedToFile,
                        ttAPInvExpTGLCPE.Key1, ttAPInvExpTGLCPE.Key2, ttAPInvExpTGLCPE.Key3, ttAPInvExpTGLCPE.Key4,
                        ttAPInvExpTGLCPE.BookID, ttAPInvExpTGLCPE.GLAcctContext, ttAPInvExpTGLCPE.SysGLControlType);

                if (ttAPInvExpTGLC != null)
                {
                    if (!ttAPInvExpTGLCPE.GLAccount.KeyEquals(ttAPInvExpTGLC.GLAccount))
                    {
                        BufferCopy.CopyExceptFor(ttAPInvExpTGLCPE, ttAPInvExpTGLC, "Company", "Key1", "Key2", "Key3", "Key4", "Key5", "Key6", "TGLCTranNum", "SysGLControlCode", "SysRevID", "SysRowID", "GroupID", "InvoiceNum", "InvoiceLine", "InvExpSeq");
                        if (ExistsTranGLC(ttAPInvExpTGLC.SysRowID))
                            ttAPInvExpTGLC.RowMod = IceRow.ROWSTATE_UPDATED;
                        else
                            ttAPInvExpTGLC.RowMod = IceRow.ROWSTATE_ADDED;
                    }

                    APInvExpTGLC_Foreign_Link();
                    APInvExpTGLCAfterGetRows();
                }
            }

            if (!runAfterUpdateAPInvExp && lIsMultiComp && ttAPInvExp.RowMod == IceRow.ROWSTATE_ADDED)
                ttAPInvExp.GLAccount = "";
            else
                UpdateAPInvExpGLAccount();

            ttTranGLCs.Clear();
            ttTranGLCs = null;
        }

        private APInvExpTGLCRow FindLastTTAPInvExpTGLC(string company, string relatedToFile, string key1, string key2, string key3, string key4, string bookID, string glAcctContext, string sysGLControlType)
        {
            return (from ttAPInvExpTGLC_Row in CurrentFullTableset.APInvExpTGLC
                    where ttAPInvExpTGLC_Row.Company.KeyEquals(company) &&
                    ttAPInvExpTGLC_Row.RelatedToFile.KeyEquals(relatedToFile) &&
                    ttAPInvExpTGLC_Row.Key1.KeyEquals(key1) &&
                    ttAPInvExpTGLC_Row.Key2.KeyEquals(key2) &&
                    ttAPInvExpTGLC_Row.Key3.KeyEquals(key3) &&
                    ttAPInvExpTGLC_Row.Key4.KeyEquals(key4) &&
                    ttAPInvExpTGLC_Row.BookID.KeyEquals(bookID) &&
                    ttAPInvExpTGLC_Row.GLAcctContext.KeyEquals(glAcctContext) &&
                    ttAPInvExpTGLC_Row.SysGLControlType.KeyEquals(sysGLControlType) &&
                    ttAPInvExpTGLC_Row.RowMod != IceRow.ROWSTATE_DELETED
                    orderby ttAPInvExpTGLC_Row.RowMod descending
                    select ttAPInvExpTGLC_Row).FirstOrDefault();
        }

        private void RefreshttAPInvExpTGLC(bool updateParent)
        {
            if (ttAPInvExp == null)
                return;

            LibAPInvExpTranGLCBO.RefreshListTranGLC(CurrentFullTableset.APInvExpTGLC, ttAPInvExp, "AP Invoice",
                Compatibility.Convert.ToString(ttAPInvExp.VendorNum), ttAPInvExp.InvoiceNum, Compatibility.Convert.ToString(ttAPInvExp.InvoiceLine),
                Compatibility.Convert.ToString(ttAPInvExp.InvExpSeq), ttAPInvExp.GroupID, "", false);

            foreach (var ttAPInvExpTGLC_iterator in CurrentFullTableset.APInvExpTGLC)
            {
                ttAPInvExpTGLC = ttAPInvExpTGLC_iterator;
                SetTranDate(ttAPInvExpTGLC);
                APInvExpTGLCAfterGetRows();
                APInvExpTGLC_Foreign_Link();
            }

            if (updateParent)
                UpdateAPInvExpGLAccount();
        }

        private void UpdateAPInvExpGLAccount()
        {
            if (ttAPInvExp == null)
                return;

            var ttAPInvExpTGLC = (from row in CurrentFullTableset.APInvExpTGLC
                                  where row.RowMod != IceRow.ROWSTATE_DELETED
                                  orderby row.BookID, row.RowMod descending
                                  select row).FirstOrDefault();

            if (ttAPInvExpTGLC == null)
            {
                ttAPInvExp.GLAccount = "";
                ttAPInvExp.GLAccountDesc = "";
                ttAPInvExp.ExpDispGLAcct = "";
                ttAPInvExp.COACode = "";
                ttAPInvExp.BookID = "";
            }
            else
            {
                ttAPInvExp.GLAccount = ttAPInvExpTGLC.GLAccount;
                ttAPInvExp.GLAccountDesc = ttAPInvExpTGLC.GLAccountAccountDesc;
                ttAPInvExp.ExpDispGLAcct = ttAPInvExpTGLC.GLAccountGLAcctDisp;
                ttAPInvExp.COACode = ttAPInvExpTGLC.COACode;
                ttAPInvExp.BookID = ttAPInvExpTGLC.BookID;
            }
        }

        private void APInvExpTGLC_CreateDefault()
        {
            if (ttAPInvExp == null)
                return;

            LibAPInvExpTranGLCBO.CreateDefaultForMultiBook(CurrentFullTableset.APInvExpTGLC, ttAPInvExp, "AP Invoice");

            foreach (var ttAPInvExpTGLC_iterator in CurrentFullTableset.APInvExpTGLC)
            {
                ttAPInvExpTGLC = ttAPInvExpTGLC_iterator;
                ttAPInvExpTGLC.Key5 = ttAPInvExp.GroupID;
                ttAPInvExpTGLC.GroupID = ttAPInvExp.GroupID;
                ttAPInvExpTGLC.VendorNum = ttAPInvExp.VendorNum;
                ttAPInvExpTGLC.InvoiceNum = ttAPInvExp.InvoiceNum;
                ttAPInvExpTGLC.InvoiceLine = ttAPInvExp.InvoiceLine;
                ttAPInvExpTGLC.InvExpSeq = ttAPInvExp.InvExpSeq;
                SetTranDate(ttAPInvExpTGLC);
                APInvExpTGLCAfterGetRows();
                APInvExpTGLC_Foreign_Link();
            }
        }

        #endregion
        #region APInvHed Table Methods
        partial void APInvHedAfterCreate()
        {
            /* Send back the EntityGLC record that may have been created
               by the write trigger */


            var EntityGLCQuery = DBExpressionCompiler.Compile(EntityGLCExpression);
            foreach (var EntityGLC_iterator in (EntityGLCQuery(Db, ttAPInvHed.Company, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum))))
            {
                EntityGLC = EntityGLC_iterator;
                ttEntityGLC = new Erp.Tablesets.EntityGLCRow();
                CurrentFullTableset.EntityGLC.Add(ttEntityGLC);
                BufferCopy.Copy(EntityGLC, ref ttEntityGLC);
                ttEntityGLC.SysRowID = EntityGLC.SysRowID;
                EntityGLCAfterGetRows();
                EntityGLC_Foreign_Link();
            }

            if (ttAPInvHed.InvoiceType.KeyEquals("BOE"))
            {
                APGeneratePaymentFromBOE.CreatePayment(ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum);
            }
        }

        partial void APInvHedAfterDelete()
        {
            string foreignKey = String.Empty;
            string invoiceNumSource = string.Empty;
            Erp.Tables.APInvHed sourceAPInvHed = null;

            if (isBOEInvoice)
            {
                var rowAPChkGrp = FindFirstAPChkGrpWithUpdLock(Session.CompanyID, ttAPInvHed.APChkGrpID);
                if (rowAPChkGrp != null)
                {
                    Db.APChkGrp.Delete(rowAPChkGrp);
                }

                APGeneratePaymentFromBOE.DeletePayment(ttAPInvHed.HeadNum);
            }

            if (isVNLocalization)
            {
                foreignKey = Compatibility.Convert.ToString(ttAPInvHed.VendorNum) + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);
                this.LibUsePatchFld.DeletePatchFld("APInvHed", "VNInvoiceType", foreignKey);
            }



            if ((ttAPInvHed.IsRecurring) && (ttAPInvHed.RecurSource == false) && (ttAPInvHed.InvoiceRef != string.Empty) && (ttAPInvHed.InstanceNum != 0))
            {
                invoiceNumSource = ttAPInvHed.InvoiceRef;
                sourceAPInvHed = this.FindFirstAPInvHedWithUpdLock(Session.CompanyID, ttAPInvHed.VendorNum, invoiceNumSource);
                if (sourceAPInvHed != null)
                {
                    if (sourceAPInvHed.RecurSource)
                    {
                        if (ttAPInvHed.SkipRecurring == false)
                        {
                            int newInstanceNum = sourceAPInvHed.InstanceNum - 1;
                            sourceAPInvHed.InstanceNum = sourceAPInvHed.InstanceNum - 1;
                            var lstRow = this.FindFirstAPInvHed(Session.CompanyID, ttAPInvHed.VendorNum, sourceAPInvHed.InvoiceNum, newInstanceNum, true);
                            if (lstRow != null)
                            {
                                sourceAPInvHed.LastDate = lstRow.InvoiceDate;
                            }
                            else
                            {
                                sourceAPInvHed.LastDate = ttAPInvHed.LastDate;
                            }

                        }
                        sourceAPInvHed.RecurBalance = sourceAPInvHed.RecurBalance - ttAPInvHed.InvoiceAmt;
                        sourceAPInvHed.DocRecurBalance = sourceAPInvHed.DocRecurBalance - ttAPInvHed.DocInvoiceAmt;
                        sourceAPInvHed.Rpt1RecurBalance = sourceAPInvHed.Rpt1RecurBalance - ttAPInvHed.Rpt1InvoiceAmt;
                        sourceAPInvHed.Rpt2RecurBalance = sourceAPInvHed.Rpt2RecurBalance - ttAPInvHed.Rpt2InvoiceAmt;
                        sourceAPInvHed.Rpt3RecurBalance = sourceAPInvHed.Rpt3RecurBalance - ttAPInvHed.Rpt3InvoiceAmt;
                        sourceAPInvHed.InvoiceNumList = sourceAPInvHed.InvoiceNumList.Replace(Ice.Constants.LIST_DELIM + ttAPInvHed.InvoiceNum.ToString(), "");

                        if (this.ExistsRecurringCycle(sourceAPInvHed.Company, sourceAPInvHed.CycleCode, false))
                        {
                            if (sourceAPInvHed.OverrideEndDate == false)
                            {
                                if (sourceAPInvHed.InstanceNum < sourceAPInvHed.Duration)
                                {
                                    sourceAPInvHed.CycleInactive = false;
                                }
                            }
                            else
                            {
                                if (sourceAPInvHed.LastDate < sourceAPInvHed.EndDate)
                                {
                                    sourceAPInvHed.CycleInactive = false;
                                }
                            }

                        }
                        else
                        {
                            if (sourceAPInvHed.DocRecurBalance < sourceAPInvHed.DocMaxValueAmt)
                            {
                                sourceAPInvHed.CycleInactive = false;
                            }
                        }
                        Db.Validate(sourceAPInvHed);

                    } // source  = true
                }  // not null
            }  // not source
        }

        partial void APInvHedAfterGetNew()
        {
            string cDocType = string.Empty;

            ttAPInvHed.EnableAssignLegNum = false;
            ttAPInvHed.EnableVoidLegNum = false;

            Currency = FindFirstBaseCurrency(Session.CompanyID, true);
            if (Currency != null)
            {
                ttAPInvHed.CurrencyCode = Currency.CurrencyCode;
            }

            ttTaxConnectStatus = (
                from ttTaxConnectStatus_Row in CurrentFullTableset.TaxConnectStatus
                where ttTaxConnectStatus_Row.Company.KeyEquals(Session.CompanyID)
                select ttTaxConnectStatus_Row).FirstOrDefault();
            if (ttTaxConnectStatus == null)
            {
                ttTaxConnectStatus = new Erp.Tablesets.TaxConnectStatusRow();
                CurrentFullTableset.TaxConnectStatus.Add(ttTaxConnectStatus);
                ttTaxConnectStatus.Company = Session.CompanyID;
                ttTaxConnectStatus.ETCOffline = false;
                ttTaxConnectStatus.SysRowID = ttTaxConnectStatus.SysRowID;
                ttTaxConnectStatus.RowMod = "";
            }

            if (ttAPInvHed.DebitMemo)
            {
                cDocType = "DebitMemo";
            }
            else if (ttAPInvHed.GRNIClearing)
            {
                cDocType = "ManualGRNI";
                ttAPInvHed.InvoiceNum = APGRNICLearingSequence.NextGRNINum();
            }
            else
            {
                if (ttAPInvHed.InvoiceType.KeyEquals("BOE"))
                {
                    cDocType = "APBillExch";
                }
                else
                {
                    cDocType = "APInvoice";
                }
            }
            ttAPInvHed.ExchangeRateDate = ((vUseDate == 1) ? "I" : "A");

            var tranDocTaypeAuth = FindFirstTranDocTypeAuth(Session.CompanyID, Session.UserID, cDocType, true);
            if (tranDocTaypeAuth != null)
            {
                TranDocType = FindFirstTranDocType(Session.CompanyID, tranDocTaypeAuth.TranDocTypeID);
                if (TranDocType != null)
                {
                    ttAPInvHed.TranDocTypeID = TranDocType.TranDocTypeID;
                    ttAPInvHed.TranDocTypeDescription = TranDocType.Description;
                }
            }
            else
            {
                var TranDocTypeQuery3 = DBExpressionCompiler.Compile(TranDocTypeExpression3);
                TranDocType = TranDocTypeQuery3(Db, Session.CompanyID, cDocType, true);
                if (TranDocType != null)
                {
                    ttAPInvHed.TranDocTypeID = TranDocType.TranDocTypeID;
                    ttAPInvHed.TranDocTypeDescription = TranDocType.Description;
                }
            }

            ttAPInvHed.Plant = Session.PlantID;
            ttAPInvHed.APTaxRoundOption = this.APTaxRound(Session.CompanyID);
            ttAPInvHed.SiteIsLegalEntity = SiteIsLegalEntity(Session.CompanyID);
            ttAPInvHed.SourcePlant = string.Empty;
            if (ttAPInvHed.SiteIsLegalEntity)
            {
                ttAPInvHed.SourcePlant = Session.PlantID;
            }

            if (isPolandLocalization)
            {
                if (isNewOrModified(ttAPInvHed))
                {
                    ttAPInvHed.ReceivedDate = CompanyTime.Today();
                }
            }

            if (isTaiwanLocalization)
            {
                InitializeGUIFields(ttAPInvHed);
            }

            if (isIndiaLocalization)
            {
                ttAPInvHed.SelfInvoice = FindFirstTranDocTypeSelfInvoice(ttAPInvHed.Company, ttAPInvHed.TranDocTypeID);
            }
        }

        private void SetEnableDueDate()
        {
            if (ttAPInvHed.DebitMemo)
            {
                ttAPInvHed.EnableDueDate = false;
            }
            else
            {
                PurTerms purTerms = FindFirstPurTerms(ttAPInvHed.Company, ttAPInvHed.TermsCode);
                if (purTerms == null || purTerms.NumberOfPayments == 1)
                {
                    ttAPInvHed.EnableDueDate = true;
                }
                else
                {
                    ttAPInvHed.EnableDueDate = false;
                }
            }

        }

        /// <summary>
        /// Optimized method to retrieve large number of APInvHed Records.
        /// </summary>
        /// <param name="vendnum"></param>
        /// <param name="all"></param>
        /// <param name="open"></param>
        /// <param name="fromDays"></param>
        /// <param name="inRange"></param>
        /// <returns></returns>
        public APInvoiceTableset GetRowsForTracker(int vendnum, bool all, bool open, int fromDays, bool inRange)
        {
            CurrentFullTableset = GetRowsForTrackerInternal(vendnum, all, open, fromDays, inRange, string.Empty);
            return CurrentFullTableset;
        }

        /// <summary>
        /// Optimized method to retrieve large number of APInvHed Records.
        /// </summary>
        /// <param name="vendnum"></param>
        /// <param name="all"></param>
        /// <param name="open"></param>
        /// <param name="fromDays"></param>
        /// <param name="inRange"></param>
        /// <param name="plant"></param>
        /// <returns></returns>
        public APInvoiceTableset GetRowsForTrackerSite(int vendnum, bool all, bool open, int fromDays, bool inRange, string plant)
        {
            CurrentFullTableset = GetRowsForTrackerInternal(vendnum, all, open, fromDays, inRange, plant);
            return CurrentFullTableset;
        }

        private APInvoiceTableset GetRowsForTrackerInternal(int vendnum, bool all, bool open, int fromDays, bool inRange, string plant)
        {
            //This variables are used throughout the AfterGetRows so we only get them once.
            validateConfiguration();
            DateTime fromDay = CompanyTime.Today().AddDays(fromDays * -1);
            SumAllAPInvDtl = this.SelectSumAllAPInvDtl(Session.CompanyID, vendnum, true, all, open, inRange, fromDay).ToDictionary(x => x.InvoiceNum);
            SumAllAPInvMsc = this.SelectSumAllAPInvMsc(Session.CompanyID, vendnum, 0, true, all, open, inRange, fromDay).ToDictionary(x => x.InvoiceNum);
            SumAllAPInvExp = this.SelectSumAllAPInvExp(Session.CompanyID, vendnum, 0, true, all, open, inRange, fromDay).ToDictionary(x => x.InvoiceNum);
            SumAllAPInvTax = this.SelectSumAllAPInvTax(Session.CompanyID, vendnum, 0, true, all, open, inRange, fromDay).ToDictionary(x => x.InvoiceNum + Ice.Constants.LIST_DELIM + x.CollectionType);
            ExistAPRecords = this.SelectAPInvHedBooleans(Session.CompanyID, vendnum, true, all, open, inRange, fromDay).ToDictionary(x => x.InvoiceNum);
            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            GLSyst = GLSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            PartialVendor = this.SelectPartialVendor(Session.CompanyID, vendnum);
            XbSystLACTax = this.SelectXbSystLACTax(Session.CompanyID);
            apSystPartial = FindPartialAPSyst(Session.CompanyID);

            bool siteIsLegalEntity = SiteIsLegalEntity(Session.CompanyID);

            string plantList = string.Empty;
            if (siteIsLegalEntity)
            {
                if (string.IsNullOrEmpty(plant))
                {
                    var UserComp = Ice.TableCache.SysUserCompCache.GetSysUserComp(Session.UserID, Session.CompanyID);
                    if (UserComp != null)
                    {
                        plantList = UserComp.PlantList;
                    }
                }
                else
                {
                    plantList = plant;
                }
            }

            foreach (var aphed in this.SelectAPInvHedForTracker(Session.CompanyID, vendnum, true, all, open, inRange, fromDay))
            {
                if (siteIsLegalEntity)
                {
                    if (!string.IsNullOrEmpty(plant))
                    {
                        if (string.IsNullOrEmpty(aphed.SourcePlant) || string.IsNullOrEmpty(plantList) || plantList.Lookup(aphed.SourcePlant, Ice.Constants.LIST_DELIM[0]) == -1)
                        {
                            continue;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(aphed.SourcePlant) && (string.IsNullOrEmpty(plantList) || plantList.Lookup(aphed.SourcePlant, Ice.Constants.LIST_DELIM[0]) == -1))
                        {
                            continue;
                        }
                    }
                }

                APInvHedRow ttaphed = new APInvHedRow();
                BufferCopy.Copy(aphed, ref ttaphed);
                ttAPInvHed = ttaphed;
                APInvHedAfterGetRowsTracker();
                CurrentFullTableset.APInvHed.Add(ttAPInvHed);
            }

            return CurrentFullTableset;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <returns>bool</returns>
        public bool GetSiteIsLegalEntity()
        {
            bool siteIsLegalEntity = false;
            siteIsLegalEntity = SiteIsLegalEntity(Session.CompanyID);

            return siteIsLegalEntity;
        }

        private void APInvHedAfterGetRowsTracker()
        {
            string foreignKey = string.Empty;
            DateTime? taxdate = null;
            RefAPInvHedPartialRow tempApInvHed = null;

            /* Vietnam localization */
            if (isVNLocalization)
            {
                /* Retrieve APInvHed PatchFld fields */
                foreignKey = Compatibility.Convert.ToString(ttAPInvHed.VendorNum) + "~" + Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);
                if (this.LibUsePatchFld.GetPatchFldDate("APInvHed", "VNDateReceived", foreignKey) == null)
                {
                    ttAPInvHed.VNDateReceived = null;
                }
                else
                {
                    ttAPInvHed.VNDateReceived = (DateTime)this.LibUsePatchFld.GetPatchFldDate("APInvHed", "VNDateReceived", foreignKey);
                }

                ttAPInvHed.VNInvoiceType = this.LibUsePatchFld.GetPatchFldChar(Session.CompanyID, "APInvHed", "VNInvoiceType", foreignKey);
            }



            if (PartialVendor != null)
            {
                ttAPInvHed.VendorPayHold = PartialVendor.PayHold;
                ttAPInvHed.VendorInactive = PartialVendor.Inactive;
            }

            if (!String.IsNullOrEmpty(ttAPInvHed.BankID))
            {
                ttAPInvHed.BankName = setBankName(ttAPInvHed.VendorNum, ttAPInvHed.BankID);
            }

            /* Set Currency fields */
            v_currCode = this.SelectBaseCurrencyCode(Session.CompanyID, true);

            ttAPInvHed.BaseCurrSymbol = getBaseCurrSymbol();
            ttAPInvHed.BaseCurrencyID = getBaseCurrID();
            var outCurrSymbol3 = ttAPInvHed.CurrSymbol;
            var outCurrencySwitch3 = ttAPInvHed.CurrencySwitch;
            var outCurrencyCodeCurrencyID = ttAPInvHed.CurrencyCodeCurrencyID;
            getCurrencyInfo(ttAPInvHed.CurrencyCode, out outCurrSymbol3, out outCurrencySwitch3, out outCurrencyCodeCurrencyID);
            ttAPInvHed.CurrSymbol = outCurrSymbol3;
            ttAPInvHed.CurrencySwitch = outCurrencySwitch3;
            ttAPInvHed.CurrencyCodeCurrencyID = outCurrencyCodeCurrencyID;

            AssignAPInvHedExtAmtFields(true);

            /* Get bill address list */
            getBillAddressList();


            CalculateGLAnalysisVariance.APNonDedTaxSum NonDeducTax = null;

            APInvHed tempAPInvHed = null;
            BufferCopy.Copy(ttAPInvHed, ref tempAPInvHed);
            CalculateGLAnalysisVariance.APInvVariance APInvVariance = new CalculateGLAnalysisVariance.APInvVariance();
            bool calledTracker = false;
            bool isAPTaxLnLevel = IsAPTaxLnLevel(Session.CompanyID);
            APInvVariance = APCalculateGLAnalysisVariance.CalcHeaderGLAnalysisVariance(tempAPInvHed, ref NonDeducTax, calledTracker, isAPTaxLnLevel);

            ttAPInvHed.MiscChrgVariance = APInvVariance.Variance;
            ttAPInvHed.DocMiscChrgVariance = APInvVariance.DocVariance;
            ttAPInvHed.Rpt1MiscChrgVariance = APInvVariance.Rpt1Variance;
            ttAPInvHed.Rpt2MiscChrgVariance = APInvVariance.Rpt2Variance;
            ttAPInvHed.Rpt3MiscChrgVariance = APInvVariance.Rpt3Variance;

            ttAPInvHed.MiscChrgNonDeducTax = NonDeducTax?.NonDeducAmt ?? 0;
            ttAPInvHed.DocMiscChrgNonDeducTax = NonDeducTax?.DocNonDeducAmt ?? 0;
            ttAPInvHed.Rpt1MiscChrgNonDeducTax = NonDeducTax?.Rpt1NonDeducAmt ?? 0;
            ttAPInvHed.Rpt2MiscChrgNonDeducTax = NonDeducTax?.Rpt2NonDeducAmt ?? 0;
            ttAPInvHed.Rpt3MiscChrgNonDeducTax = NonDeducTax?.Rpt3NonDeducAmt ?? 0;

            ttAPInvHed.UseTaxRate = ((XbSyst != null) ? XbSyst.UseTaxRate : false);

            if (!ExistAPRecords[ttAPInvHed.InvoiceNum].ExistsTaxes)
            {
                ttAPInvHed.TaxLinesExist = false;
                ttAPInvHed.TaxRateLinesExist = false;
            }
            else
            {
                ttAPInvHed.TaxLinesExist = true;
                ttAPInvHed.TaxRateLinesExist = ttAPInvHed.UseTaxRate;
            }

            if (ttAPInvHed.TaxLinesExist || ExistAPRecords[ttAPInvHed.InvoiceNum].ExistsLines || ExistAPRecords[ttAPInvHed.InvoiceNum].ExistsMsc)
            {
                ttAPInvHed.LineOrMscChrgExists = true;
            }
            else
            {
                ttAPInvHed.LineOrMscChrgExists = false;
            }

            ttAPInvHed.DisableAplDate = ttAPInvHed.LineOrMscChrgExists;

            if (!ttAPInvHed.MatchedFromLI && !(ttAPInvHed.CorrectionInv && CopyExcRate))
            {
                if (String.IsNullOrEmpty(pCurrList))
                {
                    if (vUseDate == 1)
                    {
                        vExDate = ttAPInvHed.InvoiceDate;
                    }
                    else
                    {
                        vExDate = ttAPInvHed.ApplyDate;
                    }

                    if (ttAPInvHed.DebitMemo && ttAPInvHed.InvoiceRef != string.Empty)
                    {
                        tempApInvHed = this.FindFirstRefAPInvHed(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceRef);
                        if (tempApInvHed != null)
                        {
                            if (!apSystPartial.CopyExcRateDM)
                            {
                                this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                            }
                            else
                            {
                                if (ttAPInvHed.LockRate || (!ttAPInvHed.CurrencyCode.KeyEquals(tempApInvHed.CurrencyCode) || !ttAPInvHed.RateGrpCode.KeyEquals(tempApInvHed.RateGrpCode)))
                                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

                                else
                                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(tempApInvHed.VendorNum), Compatibility.Convert.ToString(tempApInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                            }
                        }
                        else
                        {
                            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                        }
                    }
                    else
                    {
                        this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                    }
                }
                ttAPInvHed.ExchangeRate = Compatibility.Convert.ToDecimal(pRateList.Entry(0, Ice.Constants.LIST_DELIM));
            }

            ttAPInvHed.ExchangeRateDate = ((vUseDate == 1) ? "I" : "A");
            if (ttAPInvHed.UseTaxRate)
            {
                taxdate = ((ttAPInvHed.TaxRateDate != null) ? ttAPInvHed.TaxRateDate : ((ttAPInvHed.TaxPoint != null) ? ttAPInvHed.TaxPoint : ((vUseDate == 1) ? ttAPInvHed.InvoiceDate : ttAPInvHed.ApplyDate)));
                if (String.IsNullOrEmpty(taxCurrList))
                {
                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(taxdate, "APInvHed-Tax", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.TaxRateGrpCode, ttAPInvHed.LockTaxRate, out tmpTaxChainRows, out taxCurrList, out taxRateList);
                }

                ttAPInvHed.TaxExchangeRate = Compatibility.Convert.ToDecimal(taxRateList.Entry(0, Ice.Constants.LIST_DELIM));
            }

            if (StringExtensions.Compare(ttAPInvHed.InvoiceNum, ttAPInvHed.InvoiceRef) != 0)
            {
                ttAPInvHed.ScrInvoiceRef = ttAPInvHed.InvoiceRef;
            }
            else
            {
                ttAPInvHed.ScrInvoiceRef = "";
            }

            ttAPInvHed.CPayOpenPayable = (ttAPInvHed.CPayInvoiceBal != 0);
            if (ttAPInvHed.CPay && !String.IsNullOrEmpty(ttAPInvHed.GlbInvoiceNum))
            {
                ttAPInvHed.CPayIMReceived = true;
            }
            else
            {
                ttAPInvHed.CPayIMReceived = false;
            }

            if (ttAPInvHed.InvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
            {
                ttAPInvHed.InvoiceTypeDesc = "Bill of Exchange";
            }
            else
            {
                ttAPInvHed.InvoiceTypeDesc = "";
            }

            /* Trans Doc Type */
            if (ttAPInvHed.DebitMemo)
            {
                ttAPInvHed.SystemTranType = "DebitMemo";
            }
            else if (ttAPInvHed.GRNIClearing)
            {
                ttAPInvHed.SystemTranType = "ManualGRNI";
            }
            else
            {
                if (!ttAPInvHed.InvoiceType.KeyEquals("BOE"))
                {
                    ttAPInvHed.SystemTranType = "APInvoice";
                }
                else
                {
                    ttAPInvHed.SystemTranType = "APBillExch";
                }
            }

            ttAPInvHed.TranDocTypeDescription = this.FindFirstTranDocTypeDescription(Session.CompanyID, ttAPInvHed.TranDocTypeID);

            if (isTaiwanLocalization)
            {
                if (ttAPInvHed.CurrencySwitch)
                {
                    ttAPInvHed.DspGuiImportTaxBasis = ttAPInvHed.GUIImportTaxBasis;
                }
                else
                {
                    ttAPInvHed.DspGuiImportTaxBasis = ttAPInvHed.DocGUIImportTaxBasis;
                }

                if ((StringExtensions.Compare(ttAPInvHed.GUIFormatCode, "28") == 0 || StringExtensions.Compare(ttAPInvHed.GUIFormatCode, "29") == 0))
                {
                    ttAPInvHed.GuiTaxBasisFlag = true;
                }
                else
                {
                    ttAPInvHed.GuiTaxBasisFlag = false;
                }
            }

            /*LAC Tax Calc Enable*/
            ttAPInvHed.LACTaxCalcEnabled = XbSystLACTax;

            ttAPInvHed.ApplyAPPrePayAuto = apSystPartial.ApplyAPPrePayAuto;

            if (isSEOrFILocalization)
            {
                if (String.IsNullOrEmpty(ttAPInvHed.SEBankRef))
                {
                    if (PartialVendor != null && PartialVendor.NoBankingReference)
                        ttAPInvHed.SEBankRef = "X";
                }
            }

            if (isPeruLocalization)
            {
                using (var libCSFPeru = new Internal.CSF.Peru(this.Db))
                {
                    libCSFPeru.APInvHedAfterGetRows(ttAPInvHed);
                }
            }

            if (GLSyst != null)
            {
                ttAPInvHed.PostInvtyWipCos = GLSyst.PostInvtyWipCos;
            }

            ttAPInvHed.IsOnlyMiscRecords = true;
            if (ExistAPRecords[ttAPInvHed.InvoiceNum].ExistsMiscLines || ExistAPRecords[ttAPInvHed.InvoiceNum].ExistsLACMiscs)
            {
                ttAPInvHed.IsOnlyMiscRecords = false;
            }
            if (isColLocalization)
            {
                if (XbSyst != null)
                {
                    ttAPInvHed.COIFRSInterestRate = XbSyst.COIFRSInterestRate;
                }
                PurTerms invPurTerms = FindFirstPurTerms(Session.CompanyID, ttAPInvHed.TermsCode);
                if (invPurTerms != null && invPurTerms.COIFRSCalculation)
                {
                    ttAPInvHed.COIFRSCalculation = invPurTerms.COIFRSCalculation;
                    ttAPInvHed.COIFRSNumberOfPeriods = invPurTerms.COIFRSNumberOfPeriods;
                }
            }

            if (isPolandLocalization)
            {
                ttAPInvHed.PLVendorAutoInvoiceNum = IsVendorPLAutomaticInvoiceNumber(ttAPInvHed.VendorNum);
            }

            //Recurring Invoices
            if (ttAPInvHed.RecurSource || ttAPInvHed.IsRecurring)
            {
                ttAPInvHed.IsLatestRecurrence = false;
                ttAPInvHed.CumulativeBalance = 0;
                ttAPInvHed.DocCumulativeBalance = 0;
                ttAPInvHed.Rpt1CumulativeBalance = 0;
                ttAPInvHed.Rpt2CumulativeBalance = 0;
                ttAPInvHed.Rpt3CumulativeBalance = 0;
                ttAPInvHed.NoChangeRecur = false;
                ttAPInvHed.SkipRecurring = true;
                if (ttAPInvHed.RecurSource)
                {
                    if (ttAPInvHed.InstanceNum == 1)
                    {
                        ttAPInvHed.IsLatestRecurrence = true;
                        ttAPInvHed.LatestInvString = ttAPInvHed.InvoiceNum;
                    }
                    else
                    {
                        var lstRow = this.FindFirstAPInvHed(Session.CompanyID, ttAPInvHed.InvoiceNum, ttAPInvHed.VendorNum, false, ttAPInvHed.InstanceNum);
                        if (lstRow != null)
                        {
                            ttAPInvHed.LatestInvString = lstRow.InvoiceNum;
                            ttAPInvHed.NoChangeRecur = true;

                        }


                    }
                    ttAPInvHed.CurrInstanceNum = 1;
                    ttAPInvHed.TotalInstanceNum = ttAPInvHed.InstanceNum;
                    ttAPInvHed.SourceLastDate = ttAPInvHed.LastDate;
                    ttAPInvHed.SourceRecurBalance = ttAPInvHed.RecurBalance;
                    ttAPInvHed.DocSourceRecurBalance = ttAPInvHed.DocRecurBalance;
                    ttAPInvHed.Rpt1SourceRecurBalance = ttAPInvHed.Rpt1RecurBalance;
                    ttAPInvHed.Rpt2SourceRecurBalance = ttAPInvHed.Rpt2RecurBalance;
                    ttAPInvHed.Rpt3SourceRecurBalance = ttAPInvHed.Rpt3RecurBalance;
                    ttAPInvHed.SourceInvoiceNum = ttAPInvHed.InvoiceNum;
                }
                else
                {
                    if (ttAPInvHed.IsRecurring)
                    {
                        var sourceAPInvHed = this.FindFirstAPInvHed(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceRef, true);
                        if (sourceAPInvHed != null)
                        {
                            if (ttAPInvHed.InstanceNum == sourceAPInvHed.InstanceNum)
                            {
                                ttAPInvHed.IsLatestRecurrence = true;
                                ttAPInvHed.LatestInvString = ttAPInvHed.InvoiceNum;
                            }
                            else
                            {
                                var lstRow = this.FindFirstAPInvHed(Session.CompanyID, ttAPInvHed.InvoiceRef, ttAPInvHed.VendorNum, false, sourceAPInvHed.InstanceNum);
                                if (lstRow != null)
                                {
                                    ttAPInvHed.LatestInvString = lstRow.InvoiceNum;

                                }
                            }
                            ttAPInvHed.CurrInstanceNum = ttAPInvHed.InstanceNum;
                            ttAPInvHed.TotalInstanceNum = sourceAPInvHed.InstanceNum;
                            ttAPInvHed.SourceLastDate = sourceAPInvHed.LastDate;
                            ttAPInvHed.SourceRecurBalance = sourceAPInvHed.RecurBalance;
                            ttAPInvHed.DocSourceRecurBalance = sourceAPInvHed.DocRecurBalance;
                            ttAPInvHed.Rpt1SourceRecurBalance = sourceAPInvHed.Rpt1RecurBalance;
                            ttAPInvHed.Rpt2SourceRecurBalance = sourceAPInvHed.Rpt2RecurBalance;
                            ttAPInvHed.Rpt3SourceRecurBalance = sourceAPInvHed.Rpt3RecurBalance;
                            ttAPInvHed.Duration = sourceAPInvHed.Duration;
                            ttAPInvHed.EndDate = sourceAPInvHed.EndDate;
                            ttAPInvHed.MaxValueAmt = sourceAPInvHed.MaxValueAmt;
                            ;
                            ttAPInvHed.DocMaxValueAmt = sourceAPInvHed.DocMaxValueAmt;
                            ttAPInvHed.Rpt1MaxValueAmt = sourceAPInvHed.Rpt1MaxValueAmt;
                            ttAPInvHed.Rpt2MaxValueAmt = sourceAPInvHed.Rpt2MaxValueAmt;
                            ttAPInvHed.Rpt3MaxValueAmt = sourceAPInvHed.Rpt3MaxValueAmt;
                            ttAPInvHed.CopyLatestInvoice = sourceAPInvHed.CopyLatestInvoice;
                            ttAPInvHed.OverrideEndDate = sourceAPInvHed.OverrideEndDate;


                            ttAPInvHed.CumulativeBalance = ttAPInvHed.RecurBalance;
                            ttAPInvHed.DocCumulativeBalance = ttAPInvHed.DocRecurBalance;
                            ttAPInvHed.Rpt1CumulativeBalance = ttAPInvHed.Rpt1RecurBalance;
                            ttAPInvHed.Rpt2CumulativeBalance = ttAPInvHed.Rpt2RecurBalance;
                            ttAPInvHed.Rpt3CumulativeBalance = ttAPInvHed.Rpt3RecurBalance;


                        }
                    }
                }

                ttAPInvHed.CumulativeBalance = ttAPInvHed.CumulativeBalance + ttAPInvHed.InvoiceAmt;
                ttAPInvHed.DocCumulativeBalance = ttAPInvHed.DocCumulativeBalance + ttAPInvHed.DocInvoiceAmt;
                ttAPInvHed.Rpt1CumulativeBalance = ttAPInvHed.Rpt1CumulativeBalance + ttAPInvHed.Rpt1InvoiceAmt;
                ttAPInvHed.Rpt2CumulativeBalance = ttAPInvHed.Rpt2CumulativeBalance + ttAPInvHed.Rpt2InvoiceAmt;
                ttAPInvHed.Rpt3CumulativeBalance = ttAPInvHed.Rpt3CumulativeBalance + ttAPInvHed.Rpt3InvoiceAmt;

                if (ttAPInvHed.CycleInactive)
                {
                    ttAPInvHed.RecurringState = "I";
                }
            }
            ttAPInvHed.AllowMultInvcReceipts = apSystPartial.AllowMultInvcReceipts;
        }

        partial void APInvHedAfterGetRows()
        {
            string foreignKey = String.Empty;
            DateTime? taxdate = null;
            RefAPInvHedPartialRow tempApInvHed = null;

            if (ttAPInvHed.Posted == false && ttAPInvHed.StartUp)
            {
                throw new BLException(Strings.StartupInvoiCanOnlyBeMaintThroughTheOpenInvoice, "APInvHed");
            }

            /* Vietnam localization */
            if (isVNLocalization)
            {
                /* Retrieve APInvHed PatchFld fields */
                foreignKey = Compatibility.Convert.ToString(ttAPInvHed.VendorNum) + "~" + Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);
                if (this.LibUsePatchFld.GetPatchFldDate("APInvHed", "VNDateReceived", foreignKey) == null)
                {
                    ttAPInvHed.VNDateReceived = null;
                }
                else
                {
                    ttAPInvHed.VNDateReceived = (DateTime)this.LibUsePatchFld.GetPatchFldDate("APInvHed", "VNDateReceived", foreignKey);
                }

                ttAPInvHed.VNInvoiceType = this.LibUsePatchFld.GetPatchFldChar(Session.CompanyID, "APInvHed", "VNInvoiceType", foreignKey);
            }


            bool lLock = false;
            //int iRvJrnUID = 0;
            string cStatus = string.Empty;
            string cByUser = string.Empty;
            string cABTUID = string.Empty;
            //DateTime? dDate = null;
            //int iTime = 0;
            string cWHoLocked = string.Empty;

            lLock = PELock.IsDocumentLock(ttAPInvHed.Company, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "");

            ttAPInvHed.IsLcked = PELock.IsLock;
            ttAPInvHed.LockStatus = PELock.Status;
            ttAPInvHed.RvnJrnUID = PELock.RvJrnUID;

            validateConfiguration();
            ExceptionManager.AssertNoBLExceptions();

            Vendor = Vendor.FindFirstByPrimaryKey(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum);
            if (Vendor != null)
            {
                ttAPInvHed.VendorPayHold = Vendor.PayHold;
                ttAPInvHed.VendorInactive = Vendor.Inactive;
                if (isPolandLocalization)
                    ttAPInvHed.PLVendorAutoInvoiceNum = Vendor.PLAutomaticAPInvoiceNum;
            }

            if (!String.IsNullOrEmpty(ttAPInvHed.BankID))
            {
                ttAPInvHed.BankName = setBankName(ttAPInvHed.VendorNum, ttAPInvHed.BankID);
            }

            /* Set Currency fields */
            v_currCode = this.SelectBaseCurrencyCode(Session.CompanyID, true);

            ttAPInvHed.BaseCurrSymbol = getBaseCurrSymbol();
            ttAPInvHed.BaseCurrencyID = getBaseCurrID();
            var outCurrSymbol3 = ttAPInvHed.CurrSymbol;
            var outCurrencySwitch3 = ttAPInvHed.CurrencySwitch;
            var outCurrencyCodeCurrencyID = ttAPInvHed.CurrencyCodeCurrencyID;
            getCurrencyInfo(ttAPInvHed.CurrencyCode, out outCurrSymbol3, out outCurrencySwitch3, out outCurrencyCodeCurrencyID);
            ttAPInvHed.CurrSymbol = outCurrSymbol3;
            ttAPInvHed.CurrencySwitch = outCurrencySwitch3;
            ttAPInvHed.CurrencyCodeCurrencyID = outCurrencyCodeCurrencyID;

            AssignAPInvHedExtAmtFields(false);

            /* Get bill address list */
            getBillAddressList();

            /* Get MiscChrg variance */

            /* SCR106476 Handle rounding issue in base currency, we need to subtract the variance from the largest APInvExp record to handle rounding. */

            CalculateGLAnalysisVariance.APNonDedTaxSum NonDeducTax = null;

            APInvHed tempAPInvHed = null;
            BufferCopy.Copy(ttAPInvHed, ref tempAPInvHed);
            bool calledTracker = false;
            bool isAPTaxLnLevel = IsAPTaxLnLevel(Session.CompanyID);
            CalculateGLAnalysisVariance.APInvVariance APInvVariance = new CalculateGLAnalysisVariance.APInvVariance();
            APInvVariance = APCalculateGLAnalysisVariance.CalcHeaderGLAnalysisVariance(tempAPInvHed, ref NonDeducTax, calledTracker, isAPTaxLnLevel);

            ttAPInvHed.MiscChrgVariance = APInvVariance.Variance;
            ttAPInvHed.DocMiscChrgVariance = APInvVariance.DocVariance;
            ttAPInvHed.Rpt1MiscChrgVariance = APInvVariance.Rpt1Variance;
            ttAPInvHed.Rpt2MiscChrgVariance = APInvVariance.Rpt2Variance;
            ttAPInvHed.Rpt3MiscChrgVariance = APInvVariance.Rpt3Variance;

            if (NonDeducTax != null)
            {
                ttAPInvHed.MiscChrgNonDeducTax = ttAPInvHed.DebitMemo ? NonDeducTax.NonDeducAmt * -1 : NonDeducTax.NonDeducAmt;
                ttAPInvHed.DocMiscChrgNonDeducTax = ttAPInvHed.DebitMemo ? NonDeducTax.DocNonDeducAmt * -1 : NonDeducTax.DocNonDeducAmt;
                ttAPInvHed.Rpt1MiscChrgNonDeducTax = ttAPInvHed.DebitMemo ? NonDeducTax.Rpt1NonDeducAmt * -1 : NonDeducTax.Rpt1NonDeducAmt;
                ttAPInvHed.Rpt2MiscChrgNonDeducTax = ttAPInvHed.DebitMemo ? NonDeducTax.Rpt2NonDeducAmt * -1 : NonDeducTax.Rpt2NonDeducAmt;
                ttAPInvHed.Rpt3MiscChrgNonDeducTax = ttAPInvHed.DebitMemo ? NonDeducTax.Rpt3NonDeducAmt * -1 : NonDeducTax.Rpt3NonDeducAmt;

            }
            XbSyst = XbSyst ?? XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            ttAPInvHed.UseTaxRate = ((XbSyst != null) ? XbSyst.UseTaxRate : false);

            if (ttAPInvHed.Posted == false)
            {
                var APInvMscQuery9 = DBExpressionCompiler.Compile(APInvMscExpression9);
                var APInvDtlQuery8 = DBExpressionCompiler.Compile(APInvDtlExpression8);
                if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement) &&
                !(APInvMscQuery9(Db, ttAPInvHed.Company, ttAPInvHed.InvoiceNum, ttAPInvHed.VendorNum)) &&
                !(APInvDtlQuery8(Db, ttAPInvHed.Company, ttAPInvHed.InvoiceNum, ttAPInvHed.VendorNum)) &&
                StringExtensions.Compare(ttAPInvHed.CurrencyCode, v_currCode) != 0 &&
                !String.IsNullOrEmpty(ttAPInvHed.CurrencyCode))
                {
                    ttAPInvHed.EnableExchangeRate = ttAPInvHed.LockRate;
                    ttAPInvHed.EnableLockRate = true;
                }
                else
                {
                    ttAPInvHed.EnableExchangeRate = false;
                    ttAPInvHed.EnableLockRate = false;
                }
                if (ttAPInvHed.UseTaxRate)
                {
                    var APInvTaxQuery3 = DBExpressionCompiler.Compile(APInvTaxExpression3);
                    if (!(APInvTaxQuery3(Db, ttAPInvHed.Company, ttAPInvHed.InvoiceNum, ttAPInvHed.VendorNum)))
                    {
                        ttAPInvHed.EnableTaxExRate = ttAPInvHed.LockTaxRate;
                        ttAPInvHed.EnableTaxLock = true;
                    }
                    else
                    {
                        ttAPInvHed.EnableTaxExRate = false;
                        ttAPInvHed.EnableTaxLock = false;
                    }
                }
                else
                {
                    ttAPInvHed.EnableTaxLock = false;
                    ttAPInvHed.EnableTaxExRate = false;
                }
            }
            else
            {
                ttAPInvHed.EnableExchangeRate = false;
                ttAPInvHed.EnableLockRate = false;
                ttAPInvHed.EnableTaxLock = false;
                ttAPInvHed.EnableTaxExRate = false;
            }

            if (!((this.ExistsAPInvTax(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum))))
            {
                ttAPInvHed.TaxLinesExist = false;
                ttAPInvHed.TaxRateLinesExist = false;
            }
            else
            {
                ttAPInvHed.TaxLinesExist = true;
                ttAPInvHed.TaxRateLinesExist = ttAPInvHed.UseTaxRate;
            }

            if (ttAPInvHed.TaxLinesExist || this.ExistsAPInvMsc(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum) || this.ExistsAPInvDtl(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum))
            {
                ttAPInvHed.LineOrMscChrgExists = true;
            }
            else
            {
                ttAPInvHed.LineOrMscChrgExists = false;
            }

            ttAPInvHed.DisableAplDate = ttAPInvHed.LineOrMscChrgExists;
            if (ttAPInvHed.LineOrMscChrgExists)
            {
                if (ttAPInvHed.Posted == false || ((this.ExistsAPInvDtlDRM(ttAPInvHed.Company, ttAPInvHed.InvoiceNum, ttAPInvHed.VendorNum, 0))))
                {
                    ttAPInvHed.DisableAplDate = false;
                }
            }

            SetEnableDueDate();

            if (String.IsNullOrEmpty(pCurrList))
            {
                if (vUseDate == 1)
                {
                    vExDate = ttAPInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = ttAPInvHed.ApplyDate;
                }

                if (ttAPInvHed.DebitMemo && ttAPInvHed.InvoiceRef != string.Empty)
                {
                    tempApInvHed = this.FindFirstRefAPInvHed(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceRef);
                    if (tempApInvHed != null)
                    {
                        if (!apSystPartial.CopyExcRateDM)
                        {
                            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                        }
                        else
                        {
                            if (ttAPInvHed.LockRate || (!ttAPInvHed.CurrencyCode.KeyEquals(tempApInvHed.CurrencyCode) || !ttAPInvHed.RateGrpCode.KeyEquals(tempApInvHed.RateGrpCode)))
                                this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

                            else
                                this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(tempApInvHed.VendorNum), Compatibility.Convert.ToString(tempApInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                        }
                    }
                    else
                    {
                        this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                    }
                }
                else
                {
                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                }
            }

            if (!ttAPInvHed.MatchedFromLI && !(ttAPInvHed.CorrectionInv && CopyExcRate) && !(ttAPInvHed.CancellationInv && ttAPInvHed.LockRate))
            {
                ttAPInvHed.ExchangeRate = Compatibility.Convert.ToDecimal(pRateList.Entry(0, Ice.Constants.LIST_DELIM));
            }

            ttAPInvHed.XRateLabel = this.LibXRateLabelEF.XRateLabel(ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows);

            ttAPInvHed.ExchangeRateDate = ((vUseDate == 1) ? "I" : "A");
            if (ttAPInvHed.UseTaxRate)
            {
                taxdate = ((ttAPInvHed.TaxRateDate != null) ? ttAPInvHed.TaxRateDate : ((ttAPInvHed.TaxPoint != null) ? ttAPInvHed.TaxPoint : ((vUseDate == 1) ? ttAPInvHed.InvoiceDate : ttAPInvHed.ApplyDate)));
                if (String.IsNullOrEmpty(taxCurrList))
                {
                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(taxdate, "APInvHed-Tax", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.TaxRateGrpCode, ttAPInvHed.LockTaxRate, out tmpTaxChainRows, out taxCurrList, out taxRateList);
                }

                ttAPInvHed.TaxExchangeRate = Compatibility.Convert.ToDecimal(taxRateList.Entry(0, Ice.Constants.LIST_DELIM));
            }

            if (StringExtensions.Compare(ttAPInvHed.InvoiceNum, ttAPInvHed.InvoiceRef) != 0)
            {
                ttAPInvHed.ScrInvoiceRef = ttAPInvHed.InvoiceRef;
            }
            else
            {
                ttAPInvHed.ScrInvoiceRef = "";
            }

            if (ttAPInvHed.ApplyDate == null)
            {
                ttAPInvHed.TransApplyDate = null;
            }
            else
            {
                ttAPInvHed.TransApplyDate = ttAPInvHed.ApplyDate;    /* SCR #3119 - enable the CPay flag for Central Payment */
            }

            setEnableCPay();

            if (ttAPInvHed.InvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
            {
                ttAPInvHed.InvoiceTypeDesc = "Bill of Exchange";
            }
            else
            {
                ttAPInvHed.InvoiceTypeDesc = "";
            }

            /* Trans Doc Type */
            if (ttAPInvHed.DebitMemo)
            {
                ttAPInvHed.SystemTranType = "DebitMemo";
            }
            else if (ttAPInvHed.GRNIClearing)
            {
                ttAPInvHed.SystemTranType = "ManualGRNI";
            }
            else
            {
                if (!ttAPInvHed.InvoiceType.KeyEquals("BOE"))
                {
                    ttAPInvHed.SystemTranType = "APInvoice";
                }
                else
                {
                    ttAPInvHed.SystemTranType = "APBillExch";
                }
            }

            ttAPInvHed.EnableTranDocType = (this.ExistsSystemTranDocType(Session.CompanyID, ttAPInvHed.SystemTranType));
            if (StringExtensions.Compare(ttAPInvHed.RowMod, IceRow.ROWSTATE_ADDED) != 0)
            {
                ttAPInvHed.TranDocTypeDescription = this.FindFirstTranDocTypeDescription(Session.CompanyID, ttAPInvHed.TranDocTypeID);
            }

            if (isTaiwanLocalization)
            {
                if (ttAPInvHed.CurrencySwitch)
                {
                    ttAPInvHed.DspGuiImportTaxBasis = ttAPInvHed.GUIImportTaxBasis;
                }
                else
                {
                    ttAPInvHed.DspGuiImportTaxBasis = ttAPInvHed.DocGUIImportTaxBasis;
                }

                if ((StringExtensions.Compare(ttAPInvHed.GUIFormatCode, "28") == 0 || StringExtensions.Compare(ttAPInvHed.GUIFormatCode, "29") == 0))
                {
                    ttAPInvHed.GuiTaxBasisFlag = true;
                }
                else
                {
                    ttAPInvHed.GuiTaxBasisFlag = false;
                }
            }

            /*LAC Tax Calc Enable*/
            if (this.SelectXbSystLACTax(Session.CompanyID) && ttAPInvHed != null)
            {
                ttAPInvHed.LACTaxCalcEnabled = true;
            }
            else
            {
                ttAPInvHed.LACTaxCalcEnabled = false;
            }


            ttAPInvHed.ApplyAPPrePayAuto = apSystPartial.ApplyAPPrePayAuto;

            if (isSEOrFILocalization)
            {
                if (String.IsNullOrEmpty(ttAPInvHed.SEBankRef))
                {
                    var bVendor = this.FindFirstVendor(Session.CompanyID, ttAPInvHed.VendorNum);
                    if (bVendor != null && bVendor.NoBankingReference)
                        ttAPInvHed.SEBankRef = "X";
                }
            }

            if (isPeruLocalization)
            {
                using (var libCSFPeru = new Internal.CSF.Peru(this.Db))
                {
                    libCSFPeru.APInvHedAfterGetRows(ttAPInvHed);
                }
            }

            GLSyst = GLSyst ?? GLSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            if (GLSyst != null)
            {
                ttAPInvHed.PostInvtyWipCos = GLSyst.PostInvtyWipCos;
            }

            LibLegalNumDocLib.SetLegNumExternalFlds(string.Empty, ttAPInvHed);
            if (ttAPInvHed.IsLcked)
                ttAPInvHed.EnableVoidLegNum = false;

            ttAPInvHed.IsOnlyMiscRecords = true;
            if (ExistsAPInvDtl(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum, "M") || this.ExistsAPInvMsc(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum, 0, true))
            {
                ttAPInvHed.IsOnlyMiscRecords = false;
            }
            if (isColLocalization)
            {
                if (XbSyst != null)
                {
                    ttAPInvHed.COIFRSInterestRate = XbSyst.COIFRSInterestRate;
                }
                PurTerms invPurTerms = FindFirstPurTerms(Session.CompanyID, ttAPInvHed.TermsCode);
                if (invPurTerms != null && invPurTerms.COIFRSCalculation)
                {
                    ttAPInvHed.COIFRSCalculation = invPurTerms.COIFRSCalculation;
                    ttAPInvHed.COIFRSNumberOfPeriods = invPurTerms.COIFRSNumberOfPeriods;
                }
            }
            //Recurring Invoices
            if (ttAPInvHed.RecurSource || ttAPInvHed.IsRecurring)
            {
                ttAPInvHed.IsLatestRecurrence = false;
                ttAPInvHed.CumulativeBalance = 0;
                ttAPInvHed.DocCumulativeBalance = 0;
                ttAPInvHed.Rpt1CumulativeBalance = 0;
                ttAPInvHed.Rpt2CumulativeBalance = 0;
                ttAPInvHed.Rpt3CumulativeBalance = 0;
                ttAPInvHed.NoChangeRecur = false;
                ttAPInvHed.SkipRecurring = true;
                if (ttAPInvHed.RecurSource)
                {
                    if (ttAPInvHed.InstanceNum == 1)
                    {
                        ttAPInvHed.IsLatestRecurrence = true;
                        ttAPInvHed.LatestInvString = ttAPInvHed.InvoiceNum;
                    }
                    else
                    {
                        var lstRow = this.FindFirstAPInvHed(Session.CompanyID, ttAPInvHed.InvoiceNum, ttAPInvHed.VendorNum, false, ttAPInvHed.InstanceNum);
                        if (lstRow != null)
                        {
                            ttAPInvHed.LatestInvString = lstRow.InvoiceNum;
                            ttAPInvHed.NoChangeRecur = true;

                        }


                    }
                    ttAPInvHed.CurrInstanceNum = 1;
                    ttAPInvHed.TotalInstanceNum = ttAPInvHed.InstanceNum;
                    ttAPInvHed.SourceLastDate = ttAPInvHed.LastDate;
                    ttAPInvHed.SourceRecurBalance = ttAPInvHed.RecurBalance;
                    ttAPInvHed.DocSourceRecurBalance = ttAPInvHed.DocRecurBalance;
                    ttAPInvHed.Rpt1SourceRecurBalance = ttAPInvHed.Rpt1RecurBalance;
                    ttAPInvHed.Rpt2SourceRecurBalance = ttAPInvHed.Rpt2RecurBalance;
                    ttAPInvHed.Rpt3SourceRecurBalance = ttAPInvHed.Rpt3RecurBalance;
                    ttAPInvHed.SourceInvoiceNum = ttAPInvHed.InvoiceNum;
                    GetAPInvRecurInfo(ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum, (int)System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek + 1, out DateTime? outNextInvDate);
                    ttAPInvHed.NextInvoiceDate = outNextInvDate;
                }
                else
                {
                    if (ttAPInvHed.IsRecurring)
                    {
                        var sourceAPInvHed = this.FindFirstAPInvHed(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceRef, true);
                        if (sourceAPInvHed != null)
                        {
                            if (ttAPInvHed.InstanceNum == sourceAPInvHed.InstanceNum)
                            {
                                ttAPInvHed.IsLatestRecurrence = true;
                                ttAPInvHed.LatestInvString = ttAPInvHed.InvoiceNum;
                            }
                            else
                            {
                                var lstRow = this.FindFirstAPInvHed(Session.CompanyID, ttAPInvHed.InvoiceRef, ttAPInvHed.VendorNum, false, sourceAPInvHed.InstanceNum);
                                if (lstRow != null)
                                {
                                    ttAPInvHed.LatestInvString = lstRow.InvoiceNum;

                                }
                            }
                            ttAPInvHed.CurrInstanceNum = ttAPInvHed.InstanceNum;
                            ttAPInvHed.TotalInstanceNum = sourceAPInvHed.InstanceNum;
                            ttAPInvHed.SourceLastDate = sourceAPInvHed.LastDate;
                            ttAPInvHed.SourceRecurBalance = sourceAPInvHed.RecurBalance;
                            ttAPInvHed.DocSourceRecurBalance = sourceAPInvHed.DocRecurBalance;
                            ttAPInvHed.Rpt1SourceRecurBalance = sourceAPInvHed.Rpt1RecurBalance;
                            ttAPInvHed.Rpt2SourceRecurBalance = sourceAPInvHed.Rpt2RecurBalance;
                            ttAPInvHed.Rpt3SourceRecurBalance = sourceAPInvHed.Rpt3RecurBalance;
                            ttAPInvHed.Duration = sourceAPInvHed.Duration;
                            ttAPInvHed.EndDate = sourceAPInvHed.EndDate;
                            ttAPInvHed.MaxValueAmt = sourceAPInvHed.MaxValueAmt;
                            ;
                            ttAPInvHed.DocMaxValueAmt = sourceAPInvHed.DocMaxValueAmt;
                            ttAPInvHed.Rpt1MaxValueAmt = sourceAPInvHed.Rpt1MaxValueAmt;
                            ttAPInvHed.Rpt2MaxValueAmt = sourceAPInvHed.Rpt2MaxValueAmt;
                            ttAPInvHed.Rpt3MaxValueAmt = sourceAPInvHed.Rpt3MaxValueAmt;
                            ttAPInvHed.CopyLatestInvoice = sourceAPInvHed.CopyLatestInvoice;
                            ttAPInvHed.OverrideEndDate = sourceAPInvHed.OverrideEndDate;


                            ttAPInvHed.CumulativeBalance = ttAPInvHed.RecurBalance;
                            ttAPInvHed.DocCumulativeBalance = ttAPInvHed.DocRecurBalance;
                            ttAPInvHed.Rpt1CumulativeBalance = ttAPInvHed.Rpt1RecurBalance;
                            ttAPInvHed.Rpt2CumulativeBalance = ttAPInvHed.Rpt2RecurBalance;
                            ttAPInvHed.Rpt3CumulativeBalance = ttAPInvHed.Rpt3RecurBalance;


                        }
                    }
                }

                ttAPInvHed.CumulativeBalance = ttAPInvHed.CumulativeBalance + ttAPInvHed.InvoiceAmt;
                ttAPInvHed.DocCumulativeBalance = ttAPInvHed.DocCumulativeBalance + ttAPInvHed.DocInvoiceAmt;
                ttAPInvHed.Rpt1CumulativeBalance = ttAPInvHed.Rpt1CumulativeBalance + ttAPInvHed.Rpt1InvoiceAmt;
                ttAPInvHed.Rpt2CumulativeBalance = ttAPInvHed.Rpt2CumulativeBalance + ttAPInvHed.Rpt2InvoiceAmt;
                ttAPInvHed.Rpt3CumulativeBalance = ttAPInvHed.Rpt3CumulativeBalance + ttAPInvHed.Rpt3InvoiceAmt;

                if (ttAPInvHed.CycleInactive)
                {
                    ttAPInvHed.RecurringState = "I";
                }
            }
            ttAPInvHed.AllowMultInvcReceipts = apSystPartial.AllowMultInvcReceipts;
            ttAPInvHed.FormattedVendorNameAddress = FormatNameAddress(ttAPInvHed);
            ttAPInvHed.SiteIsLegalEntity = SiteIsLegalEntity(Session.CompanyID);
        }

        partial void APInvHedAfterUpdate()
        {
            string vInvoiceNum = string.Empty;
            int vVendorNum = 0;
            string foreignKey = string.Empty;
            string cOCRNumber = string.Empty;
            bool bGenerateOCRNumber = true;

            if (ttAPInvHed.NettingID == 0 && !(isTaiwanLocalization && TWAPLegNumSource.KeyEquals("I")))
            {
                if (ttAPInvHed.EnableTranDocType && !string.IsNullOrEmpty(ttAPInvHed.TranDocTypeID) && string.IsNullOrEmpty(ttAPInvHed.LegalNumber))
                {
                    ttLegalNumGenOpts = (from ttLegalNumGenOpts_Row in CurrentFullTableset.LegalNumGenOpts
                                         where StringExtensions.Compare(ttLegalNumGenOpts_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                                         select ttLegalNumGenOpts_Row).FirstOrDefault();

                    /* If a record is available, generate the number.  Otherwise, a
                       number isn't needed. */

                    if (ttLegalNumGenOpts != null)
                    {
                        if (ttLegalNumGenOpts.GenerationOption.KeyEquals("Save"))
                        {
                            var LegalNumDocTypeQuery = DBExpressionCompiler.Compile(LegalNumDocTypeExpression);
                            if (LegalNumDocTypeQuery(Db, Session.CompanyID, ttLegalNumGenOpts.LegalNumberID))
                            {
                                foreignKey = Compatibility.Convert.ToString(ttAPInvHed.VendorNum).Trim() + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum).Trim();
                                var outLegalNumber = ttAPInvHed.LegalNumber;
                                var outLegalNumberMessage = ttAPInvHed.LegalNumberMessage;
                                if (isSEOrFILocalization || isNorwayLocalization)
                                {
                                    var BVendorQuery = DBExpressionCompiler.Compile(BVendorExpression);
                                    var bVendor = BVendorQuery(Db, Session.CompanyID, ttAPInvHed.VendorNum);
                                    if (bVendor != null)
                                        bGenerateOCRNumber = !bVendor.NoBankingReference;
                                }
                                LibLegalNumberGenerate.GenerateLegalNumber(CurrentFullTableset.LegalNumGenOpts, "APInvHed", foreignKey, out outLegalNumber, out cOCRNumber, out outLegalNumberMessage, bGenerateOCRNumber);
                                ttAPInvHed.LegalNumber = outLegalNumber;
                                ttAPInvHed.LegalNumberMessage = outLegalNumberMessage;
                                ttLegalNumGenOpts.RowMod = IceRow.ROWSTATE_DELETED;
                                APInvHed.LegalNumber = ttAPInvHed.LegalNumber;
                                Db.Validate(APInvHed);
                            }
                        }
                    }/* if available ttLegalNumGenOpts */
                }
            }


            Db.Validate(APInvHed);

            /*SCR 76379  Patch fields 'PrePaymentAmt' and 'DocPrePaymentAmt'*/
            /*The code have to be erased when the fields will be added into the progress table*/
            /*The code related with the SCR in the 'write' trigger should be made uncommented*/



            Db.ReadCurrent(ref APInvHed, LockHint.UpdLock);
            Db.DisableTriggers(APInvHed.GetTableName(), TriggerType.Write);

            if (BIttAPInvHed != null)
            {
                APInvHed.InvoiceAmt = APInvHed.InvoiceAmt + BIttAPInvHed.PrePaymentAmt;
                APInvHed.DocInvoiceAmt = APInvHed.DocInvoiceAmt + BIttAPInvHed.DocPrePaymentAmt;
                APInvHed.Rpt1InvoiceAmt = APInvHed.Rpt1InvoiceAmt + BIttAPInvHed.Rpt1PrePaymentAmt;
                APInvHed.Rpt2InvoiceAmt = APInvHed.Rpt2InvoiceAmt + BIttAPInvHed.Rpt2PrePaymentAmt;
                APInvHed.Rpt3InvoiceAmt = APInvHed.Rpt3InvoiceAmt + BIttAPInvHed.Rpt3PrePaymentAmt;

            }
            APInvHed.InvoiceAmt = APInvHed.InvoiceAmt - ttAPInvHed.PrePaymentAmt;
            APInvHed.DocInvoiceAmt = APInvHed.DocInvoiceAmt - ttAPInvHed.DocPrePaymentAmt;
            APInvHed.Rpt1InvoiceAmt = APInvHed.Rpt1InvoiceAmt - ttAPInvHed.Rpt1PrePaymentAmt;
            APInvHed.Rpt2InvoiceAmt = APInvHed.Rpt2InvoiceAmt - ttAPInvHed.Rpt2PrePaymentAmt;
            APInvHed.Rpt3InvoiceAmt = APInvHed.Rpt3InvoiceAmt - ttAPInvHed.Rpt3PrePaymentAmt;

            Db.EnableTriggers(APInvHed.GetTableName(), TriggerType.Write);    /*SCR 76379  Patch fields 'PrePaymentAmt' and 'DocPrePaymentAmt'*/


            Db.Validate(APInvHed);
            /* buffer copy the db record to the tt record because database triggers may have change
                values in the db record. */
            BufferCopy.Copy(APInvHed, ref ttAPInvHed);
            vInvoiceNum = APInvHed.InvoiceNum;
            vVendorNum = APInvHed.VendorNum;
            if ((APInvHed.ReadyToCalc && ReCalcTaxes))
            {
                ErpCallContext.Add("NonRecTax-Massive");
                ErpCallContext.SetDisposableKeyValue(new KeyValuePair<string, object>("NonRecTax-Massive", APInvHed.SysRowID));
                APInvoiceTableset ds = CurrentFullTableset;
                SetReadyToCalc("", APInvHed.InvoiceNum, APInvHed.VendorNum, false, false, ref ds);
                CurrentFullTableset = ds;


                Db.ReadCurrent(ref APInvHed, LockHint.UpdLock);
            }

            if (CalcAllInvoiceAmts)
            {
                recalcInvoiceAmounts(vInvoiceNum, vVendorNum);
            }

            /* if not already refreshed due to recalculation, refresh tax records */
            if (!CalcAllInvoiceAmts)
            {


                var APInvTaxQuery5 = DBExpressionCompiler.Compile(APInvTaxExpression5);
                foreach (var APInvTax_iterator in (APInvTaxQuery5(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum, 0)))
                {
                    APInvTax = APInvTax_iterator;
                    refreshttAPInvTax();
                }/* for each APInvTax */
                if (isPeruLocalization)
                {
                    refreshttPEAPInvTax(APInvHed.VendorNum, APInvHed.InvoiceNum, APInvHed.GroupID);
                }
            }

            /* Save PAInvHed PatchFld fields */

            /* Vietnam Localization */
            if (isVNLocalization)
            {
                foreignKey = Compatibility.Convert.ToString(ttAPInvHed.VendorNum) + "~" + Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);
                this.LibUsePatchFld.UpdatePatchFldDate("APInvHed", "VNDateReceived", foreignKey, ttAPInvHed.VNDateReceived);
                this.LibUsePatchFld.UpdatePatchFldChar("APInvHed", "VNInvoiceType", foreignKey, ttAPInvHed.VNInvoiceType);
            }


            if (isPolandLocalization)
            {
                if (string.IsNullOrEmpty(ttAPInvHed.PLInvoiceReference))
                    ttAPInvHed.PLInvoiceReference = ttAPInvHed.InvoiceNum;
            }

            if (ttAPInvHed.InvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
            {
                var CheckHedQuery = DBExpressionCompiler.Compile(CheckHedExpression);
                CheckHed = CheckHedQuery(Db, Session.CompanyID, ttAPInvHed.APChkGrpID, ttAPInvHed.HeadNum);
                if (CheckHed != null && (CheckHed.DocPaymentTotal != ttAPInvHed.DocInvoiceVendorAmt || CheckHed.CheckDate != ttAPInvHed.ApplyDate ||
                    StringExtensions.Compare(CheckHed.CurrencyCode, ttAPInvHed.CurrencyCode) != 0 || StringExtensions.Compare(CheckHed.RateGrpCode, ttAPInvHed.RateGrpCode) != 0))
                {
                    if (CheckHed.CheckDate != ttAPInvHed.ApplyDate || StringExtensions.Compare(CheckHed.CurrencyCode, ttAPInvHed.CurrencyCode) != 0 ||
                        StringExtensions.Compare(CheckHed.RateGrpCode, ttAPInvHed.RateGrpCode) != 0)
                    {

                        APChkGrp = FindFirstAPChkGrpWithUpdLock(Session.CompanyID, CheckHed.GroupID);
                        if (CheckHed.CheckDate != ttAPInvHed.ApplyDate)
                        {
                            if (ttAPInvHed.ApplyDate == null)
                            {
                                CheckHed.CheckDate = null;
                            }
                            else
                            {
                                CheckHed.CheckDate = ttAPInvHed.ApplyDate;
                            }



                            APInvGrp = FindFirstAPInvGrpWithUpdLock(Session.CompanyID, ttAPInvHed.GroupID);
                            if (APInvGrp != null)
                            {
                                if (ttAPInvHed.ApplyDate == null)
                                {
                                    APChkGrp.CheckDate = null;
                                }
                                else
                                {
                                    APChkGrp.CheckDate = ttAPInvHed.ApplyDate;
                                }

                                Db.Release(ref APChkGrp);
                            }

                            if (APChkGrp != null)
                            {
                                if (ttAPInvHed.ApplyDate == null)
                                {
                                    APChkGrp.CheckDate = null;
                                }
                                else
                                {
                                    APChkGrp.CheckDate = ttAPInvHed.ApplyDate;
                                }
                            }
                        }/* CheckHed.CheckDate <> ttAPInvHed.ApplyDate */

                        if (StringExtensions.Compare(CheckHed.CurrencyCode, ttAPInvHed.CurrencyCode) != 0)
                        {
                            CheckHed.CurrencyCode = ttAPInvHed.CurrencyCode;
                            if (APChkGrp != null)
                            {
                                APChkGrp.CurrencyCode = ttAPInvHed.CurrencyCode;
                            }
                        }
                        if (StringExtensions.Compare(CheckHed.RateGrpCode, ttAPInvHed.RateGrpCode) != 0)
                        {
                            CheckHed.RateGrpCode = ttAPInvHed.RateGrpCode;
                            if (APChkGrp != null)
                            {
                                APChkGrp.RateGrpCode = ttAPInvHed.RateGrpCode;
                            }
                        }/* if CheckHed.RateGrpCode <> ttAPInvHed.RateGrpCode then */
                        Db.Validate(CheckHed);



                        var CurrExChainQuery = DBExpressionCompiler.Compile(CurrExChainExpression);
                        foreach (var CurrExChain_iterator in (CurrExChainQuery(Db, Session.CompanyID, "CheckHed", Compatibility.Convert.ToString(CheckHed.HeadNum))))
                        {
                            CurrExChain = CurrExChain_iterator;
                            Db.CurrExChain.Delete(CurrExChain);
                        }

                        if (ttChainRows != null)
                        {
                            ttChainRows.Clear();
                        }

                        this.LibGetCurrencyRatesEF.BuildCurrencyRates(CheckHed.CheckDate, "CheckHed", Compatibility.Convert.ToString(CheckHed.HeadNum), "", "", "", "", "", "", "", CheckHed.CurrencyCode, CheckHed.RateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);



                        foreach (var libconvertamtefttChainRow in (from ttChain_Row in ttChainRows
                                                                   select ttChain_Row))
                        {
                            var ttChainRow = libconvertamtefttChainRow;
                            CurrExChain = new Erp.Tables.CurrExChain();
                            Db.CurrExChain.Insert(CurrExChain);
                            CurrExChain.Company = Session.CompanyID;
                            CurrExChain.TableName = "CheckHed";
                            CurrExChain.Key1 = Compatibility.Convert.ToString(CheckHed.HeadNum);
                            BufferCopy.CopyExceptFor(ttChainRow, CurrExChain, "Company", "TableName", "Key1", "Key2", "Key3", "Key4", "Key5", "Key6", "Key7", "Key8", "SysRevID", "SysRowID");
                            Db.Validate(CurrExChain);
                        }



                        Currency = FindFirstBaseCurrency(Session.CompanyID, true);
                        if (Currency != null)
                        {
                            CheckHed.ExchangeRate = this.LibConvertAmtEF.ConvertAmt(1.00M, CheckHed.CurrencyCode, Currency.CurrencyCode, ttChainRows, false);
                        }
                        Db.Validate(CheckHed);
                        CheckHed.PaymentTotal = LibRoundAmountEF.ConvertAmtRoundDecimals(CheckHed.DocPaymentTotal, CheckHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "CheckHed", "PaymentTotal");
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(CheckHed, false, "PaymentTotal", pCurrList, "CheckHed", CheckHed.CurrencyCode, ttChainRows);
                    }/* if CheckHed.CheckDate <> ttAPInvHed.ApplyDate then */

                    if (CheckHed.DocPaymentTotal != ttAPInvHed.DocInvoiceVendorAmt)
                    {
                        this.LibGetCurrencyRatesEF.FindCurrencyRates("CheckHed", Compatibility.Convert.ToString(CheckHed.HeadNum), "", "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                        CheckHed.DocPaymentTotal = ttAPInvHed.DocInvoiceVendorAmt;
                        CheckHed.PaymentTotal = LibRoundAmountEF.ConvertAmtRoundDecimals(CheckHed.DocPaymentTotal, CheckHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "CheckHed", "PaymentTotal");
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(CheckHed, false, "PaymentTotal", pCurrList, "CheckHed", CheckHed.CurrencyCode, ttChainRows);
                    }
                }
            }

            AssignAPInvHedExtAmtFields(false);
            if (isColLocalization)
            {
                PurTerms ttPurTerms = FindFirstPurTerms(ttAPInvHed.Company, ttAPInvHed.TermsCode);
                if (ttPurTerms != null)
                {
                    ttAPInvHed.COIFRSCalculation = ttPurTerms.COIFRSCalculation;
                    ttAPInvHed.COIFRSNumberOfPeriods = ttPurTerms.COIFRSNumberOfPeriods;
                }
            }


            var LogAPInvQuery = DBExpressionCompiler.Compile(LogAPInvExpression);
            LogAPInv = LogAPInvQuery(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum);
            if (LogAPInv != null)
            {
                LogAPInv.Matched = true;
                LogAPInv.MatchedDate = CompanyTime.Today();
            }

            if (OnlyOneAPInvSched(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum))
            {
                APInvSched = this.FindFirstAPInvSchedWithUpdLock(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum);
                if (APInvSched != null && APInvSched.PayDueDate != ttAPInvHed.DueDate)
                {
                    APInvSched.PayDueDate = ttAPInvHed.DueDate;

                    if (ttAPInvHed.InvoiceDate != null)
                    {
                        var payDays = ttAPInvHed.DueDate - ttAPInvHed.InvoiceDate;
                        APInvSched.PayDays = Convert.ToInt32(payDays.Value.TotalDays);
                    }
                }
            }
            // Refresh APInvSched records
            foreach (var APInvSchedRow in SelectAPInvSched(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum))
            {
                refreshttAPInvSched(APInvSchedRow);
            }

            foreach (var APInvDtl in (SelectAPInvDtl(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum)))
            {
                refreshttAPInvDtl(APInvDtl);
            }

            #region Create XFileAttchs
            using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
            {
                foreach (var XFileAttchFileRef_iterator in (SelectXFileAttchFileRefQuery(Session.CompanyID, "Erp", "LogAPInv", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum)))
                {
                    Ice.Tables.XFileRef XFileRefNew = new Ice.Tables.XFileRef();
                    Db.XFileRef.Insert(XFileRefNew);
                    XFileRefNew.Company = XFileAttchFileRef_iterator.Company;
                    XFileRefNew.XFileName = XFileAttchFileRef_iterator.XFileName;
                    XFileRefNew.XFileDesc = XFileAttchFileRef_iterator.XFileDesc;
                    XFileRefNew.DocTypeID = XFileAttchFileRef_iterator.DocTypeID;
                    XFileRefNew.BaseFileName = XFileAttchFileRef_iterator.BaseFileName;
                    XFileRefNew.ExternalSystemDoc = XFileAttchFileRef_iterator.ExternalSystemDoc;
                    Db.Validate(XFileRefNew);

                    Ice.Tables.XFileAttch XFileAttchNew = new Ice.Tables.XFileAttch();
                    Db.XFileAttch.Insert(XFileAttchNew);
                    XFileAttchNew.Company = XFileAttchFileRef_iterator.Company;
                    XFileAttchNew.RelatedToSchemaName = XFileAttchFileRef_iterator.RelatedToSchemaName;
                    XFileAttchNew.RelatedToFile = "APInvHed";
                    XFileAttchNew.Key1 = Compatibility.Convert.ToString(APInvHed.VendorNum);
                    XFileAttchNew.Key2 = APInvHed.InvoiceNum;
                    XFileAttchNew.XFileRefNum = XFileRefNew.XFileRefNum;
                    XFileAttchNew.ForeignSysRowID = APInvHed.SysRowID;
                    Db.Validate(XFileAttchNew);

                    Db.Release(ref XFileRefNew);
                    Db.Release(ref XFileAttchNew);
                }

                trans.Complete();
            }

            #endregion
        }

        partial void APInvHedBeforeCreate()
        {
            Erp.Tables.APInvHed bAPInvHed = null;
            string cLegalNumberType = string.Empty;

            if (isPolandLocalization && ttAPInvHed.InvoiceNum.Length == 0)
            {
                if (IsVendorPLAutomaticInvoiceNumber(ttAPInvHed.VendorNum))
                {
                    if (string.IsNullOrEmpty(ttAPInvHed.PLInvoiceReference))
                    {
                        throw new BLException(Strings.PLInvoiceReferenceEmpty);
                    }

                    if (string.IsNullOrEmpty(ttAPInvHed.TranDocTypeID))
                    {
                        throw new BLException(Strings.PLTranDocTypeNotDefined);
                    }

                    ttLegalNumGenOpts = (from ttLegalNumGenOpts_Row in CurrentFullTableset.LegalNumGenOpts
                                         where StringExtensions.Compare(ttLegalNumGenOpts_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                                         select ttLegalNumGenOpts_Row).FirstOrDefault();

                    if (ttLegalNumGenOpts == null)
                    {
                        throw new BLException(Strings.PLLegalNumberNotDefinedForTranDocType(ttAPInvHed.TranDocTypeDescription));
                    }
                    else
                    {
                        if (ttLegalNumGenOpts.GenerationOption.KeyEquals("Save"))
                        {
                            var LegalNumDocTypeQuery = DBExpressionCompiler.Compile(LegalNumDocTypeExpression);
                            if (LegalNumDocTypeQuery(Db, Session.CompanyID, ttLegalNumGenOpts.LegalNumberID))
                            {
                                string cOCRNumber = string.Empty;
                                bool bGenerateOCRNumber = true;

                                string foreignKey = Compatibility.Convert.ToString(ttAPInvHed.VendorNum).Trim() + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum).Trim();
                                var outLegalNumber = ttAPInvHed.LegalNumber;
                                var outLegalNumberMessage = ttAPInvHed.LegalNumberMessage;
                                LibLegalNumberGenerate.GenerateLegalNumber(CurrentFullTableset.LegalNumGenOpts, "APInvHed", foreignKey, out outLegalNumber, out cOCRNumber, out outLegalNumberMessage, bGenerateOCRNumber);
                                ttAPInvHed.LegalNumber = outLegalNumber;
                                ttAPInvHed.LegalNumberMessage = outLegalNumberMessage;
                                ttLegalNumGenOpts.RowMod = IceRow.ROWSTATE_DELETED;
                                ttAPInvHed.InvoiceNum = outLegalNumber;
                            }
                        }
                    }
                }
            }

            if (ttAPInvHed.InvoiceNum.Length == 0)
            {
                if (!String.IsNullOrEmpty(ttAPInvHed.InvoiceType) && ttAPInvHed.InvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
                {
                    throw new BLException(Strings.AValidBillOfExchangeNumberIsRequired, "APInvHed", "InvoiceNum");
                }
                else
                {
                    throw new BLException(Strings.AValidInvoiceNumberIsRequired, "APInvHed", "InvoiceNum");
                }
            }/* if length(ttApInvHed.InvoiceNum) = 0 */



            var APInvHedQuery24 = DBExpressionCompiler.Compile(APInvHedExpression24);
            if ((APInvHedQuery24(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum)))
            {
                throw new BLException(Strings.TheInvoiceNumberMustBeUnique, "APInvHed", "InvoiceNum");
            }/* if can-find(bAPInvHed */

            /* If a debit memo, validate InvoiceRef if not blank */
            if (ttAPInvHed.DebitMemo &&
            !String.IsNullOrEmpty(ttAPInvHed.ScrInvoiceRef))
            { /* ttAPInvHed.TmpCPay = yes */
                if (ttAPInvHed.CPay)
                {

                    bAPInvHed = FindFirstBAPInvHedByRefInvoice(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.ScrInvoiceRef, true);
                    /* check if invoice reference is already posted, ignoring the OpenPayable flag */
                    if (bAPInvHed == null)
                    {
                        throw new BLException(Strings.TheInvoiceReferIsNotFlaggedForCentralPayment, "APInvHed", "InvoiceRef");
                    }
                    else if (bAPInvHed.DebitMemo || bAPInvHed.Posted == false)
                    {
                        throw new BLException(Strings.InvalidInvoiceReferForCentralPayment, "APInvHed", "InvoiceRef");
                    }
                    else if (bAPInvHed.CPayInvoiceBal == 0)
                    {
                        throw new BLException(Strings.TheInvoiceReferFlaggedForCentralPaymentIsAlready, "APInvHed", "InvoiceRef");
                    }
                }
                else
                {
                    var APInvHedQuery25 = DBExpressionCompiler.Compile(APInvHedExpression25);
                    if (!((APInvHedQuery25(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.ScrInvoiceRef))))
                    {
                        ExceptionManager.AddBLException(Strings.InvalidInvoiceReference, "APInvHed", "InvoiceRef");
                    }
                }
                ttAPInvHed.InvoiceRef = ttAPInvHed.ScrInvoiceRef;
            }/* if ttAPInvHed.DebitMemo = true and ... */

            if (ttAPInvHed.DebitMemo == false)
            {
                if (ttAPInvHed.InvoiceType.KeyEquals("BOE"))
                {
                    cLegalNumberType = "APBillExch";
                }
                else
                {
                    cLegalNumberType = "APInvoice";
                }
            }
            else
            {
                cLegalNumberType = "DebitMemo";
            }

            /* Update VendorNum if VendorNumVendorID is not blank */
            if (!String.IsNullOrEmpty(ttAPInvHed.VendorNumVendorID) && ttAPInvHed.VendorNum == 0)
            {


                var VendorQuery2 = DBExpressionCompiler.Compile(VendorExpression2);
                Vendor = VendorQuery2(Db, ttAPInvHed.Company, ttAPInvHed.VendorNumVendorID);
                if (Vendor != null)
                {
                    ttAPInvHed.VendorNum = Vendor.VendorNum;
                }
            }

            if (ttAPInvHed.InvoiceType.KeyEquals("BOE"))
            {
                /* Create a group record in APChkGrp */

                string cgroupid = String.Format("B{0:D7}", ttAPInvHed.VendorNum);

                while (true)
                {
                    APChkGrp = FindFirstAPChkGrp(Session.CompanyID, cgroupid);
                    if (APChkGrp == null)
                    {
                        break;
                    }

                    cgroupid = String.Format("B{0:D7}", (new Random()).Next(1, 9999999));
                }

                if (APChkGrp == null)
                {
                    APChkGrp = new Erp.Tables.APChkGrp();
                    Db.APChkGrp.Insert(APChkGrp);
                    APChkGrp.Company = Session.CompanyID;
                    APChkGrp.GroupID = cgroupid;
                    APChkGrp.CheckDate = ttAPInvHed.ApplyDate;

                    APChkGrp.CreatedBy = Session.UserID;
                    APChkGrp.ActiveUserID = Session.UserID;
                    APChkGrp.PMUID = ttAPInvHed.PMUID;

                    XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
                    if (XbSyst != null)
                    {
                        APChkGrp.RateGrpCode = XbSyst.CashRateGrp;
                    }

                    Db.Validate(APChkGrp);
                }
                ttAPInvHed.APChkGrpID = cgroupid;
            }
            if (isColLocalization)
            {
                ttAPInvHed.COIFRSInterestRate = vCOIFRSInterestRate;
            }

        }

        partial void APInvHedBeforeDelete()
        {
            /* ARG CSF: for argentina localization, modifying the invoice after posted is allowed  */
            if (!isArgentinaLocalization)
            {
                /* Validate the invoice can be deleted */
                if (canUpdateInvoice(ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum).canUpdateInvoice == false)
                {
                    throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvHed", "InvoiceNum");
                }
            }

            if (APInvGrpLockedToAnotherUser(Session.CompanyID, ttAPInvHed.GroupID, Session.UserID))
            {
                throw new BLException(Strings.GroupIsInUseByAnotherUser(ttAPInvHed.GroupID));
            }

            /* SCR #55657 - Do not allow deletion of APInvHed if linked Landed Cost Charges *
             * exist for both header and line level.                                        */
            var APInvMscQuery11 = DBExpressionCompiler.Compile(APInvMscExpression11);
            if ((APInvMscQuery11(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum)))
            {
                throw new BLException(Strings.MisceChargesLinkedToContaShipmOrReceiptExistDelete, "APInvHed");
            }

            if (ttAPInvHed.LegalNumber != string.Empty && ttAPInvHed.MatchedFromLI == false)
            {

                LibLegalNumDocLib.DeleteValidationLN(ttAPInvHed.LegalNumber);

            }

            Vendor = Vendor.FindFirstByPrimaryKey(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum);
            /* Delete related memo records */



            var MemoQuery = DBExpressionCompiler.Compile(MemoExpression);
            foreach (var Memo_iterator in (MemoQuery(Db, ttAPInvHed.Company, Compatibility.Convert.ToString(ttAPInvHed.GroupID), Compatibility.Convert.ToString(Vendor.VendorNum), ttAPInvHed.InvoiceNum)))
            {
                Memo = Memo_iterator;
                Db.Memo.Delete(Memo);
            }



            var RebateTransQuery2 = DBExpressionCompiler.Compile(RebateTransExpression2);
            foreach (var RebateTrans_iterator in (RebateTransQuery2(Db, Session.CompanyID, ttAPInvHed.InvoiceNum)))
            {
                RebateTrans = RebateTrans_iterator;
                RebateTrans.Applied = false;
                RebateTrans.APInvoiceNum = "";
                RebateTrans.APInvoiceLine = 0;
            }

            /*Delete Invoice from TaxConnect*/
            if (!String.IsNullOrEmpty(APInvHed.TaxSvcID))
            {


                var TaxSvcHeadQuery = DBExpressionCompiler.Compile(TaxSvcHeadExpression);
                TaxSvcHead = TaxSvcHeadQuery(Db, Session.CompanyID, APInvHed.TaxSvcID);
                if (TaxSvcHead != null && (StringExtensions.Lookup("Saved", TaxSvcHead.RemoteState) > -1))
                {
                    ttTaxSvcHead = new Erp.Internal.Lib.ProcessTaxes._TaxSvcHead();
                    if (ttTxSvcHeadRows == null)
                    {
                        ttTxSvcHeadRows = new List<Erp.Internal.Lib.ProcessTaxes._TaxSvcHead>();
                    }

                    ttTxSvcHeadRows.Add(ttTaxSvcHead);
                    BufferCopy.Copy(TaxSvcHead, ref ttTaxSvcHead);
                    ttTaxSvcHead.RequestID = 1;
                    ttTaxSvcHead.DocType = ((ttAPInvHed.DebitMemo) ? 5 : 3);
                    ttTaxSvcHead.CancelCode = "DocDeleted";
                    ttTaxSvcHead.DocCodes = Compatibility.Convert.ToString(TaxSvcHead.APInvoiceNum);
                    this.LibProcessTaxes.CancelTax(ttTxSvcHeadRows, out opCommFailure, out opMessage);

                    ttTaxConnectStatus = (
                    from ttTaxConnectStatus_Row in CurrentFullTableset.TaxConnectStatus
                    where ttTaxConnectStatus_Row.Company.KeyEquals(Session.CompanyID) && ttTaxConnectStatus_Row.RowMod.Compare(IceRow.ROWSTATE_UPDATED) == 0
                    select ttTaxConnectStatus_Row).FirstOrDefault();
                    if (ttTaxConnectStatus != null)
                    {
                        ttTaxConnectStatus.ETCOffline = opCommFailure;
                        ttTaxConnectStatus.ErrorMessage = opMessage;
                        ttTaxConnectStatus.RowMod = "";
                    }

                    if (opCommFailure)
                    {
                        throw new BLException(Strings.CommuFailureWithTaxCoCannotDelete, "APInvHed");
                    }
                }
            }/* end vtaxsvcid */

            /* Bill of Exchange */
            if (ttAPInvHed.InvoiceType.KeyEquals("BOE"))
            {
                isBOEInvoice = true;
            }
            else
            {
                isBOEInvoice = false;
            }
            if (isJapanLocalization && this.ExistsJPAPPerBillStmtHeadBillingNo(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum))
            {
                throw new BLException(Strings.CannotDeleteTaxAdjustment, "APInvHed");
            }
        }

        partial void APInvHedBeforeGetNew()
        {
            ExceptionManager.AddBLException(Strings.CallAPInvOrAPInvToAddANewRecord, "APInvHed");
        }


        void ValidateAPInvHedRequiredFields(APInvHedRow ttAPInvHed, APInvHedRow BIttAPInvHed)
        {
            bool LogAPInvExist = false;

            if (ttAPInvHed.VendorNum == 0)
                throw new BLException(Strings.SupplierRequired, "APInvHed", "VendorNumVendorID");

            /******************************* Validation for Logged Invoices *************************
            * VendorNum+InvoiceNum must be unique not only for APInvHed but also for LoggedAPInv   *
            * unless this is a matched invoice in which case there must be an existing LoggedAPInv *
            * with the same key.                                                                   *
            ***************************************************************************************/
            /* update VendorNum/InvoiceNum information if new record 
                or  fields value changed */
            if (BIttAPInvHed == null ||
                (BIttAPInvHed.VendorNum != ttAPInvHed.VendorNum ||
                StringExtensions.Compare(BIttAPInvHed.InvoiceNum, ttAPInvHed.InvoiceNum) != 0))
            {



                var LogAPInvQuery2 = DBExpressionCompiler.Compile(LogAPInvExpression2);
                LogAPInvExist = (LogAPInvQuery2(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum));
                /*If the APinvoice is marked as Matched but we couldn't found his match on LogAPInv return error*/
                if (ttAPInvHed.MatchedFromLI == true && LogAPInvExist == false)
                {
                    throw new BLException(Strings.NoMatchedLogInvoiceFound, "LogAPInv", "MatchedFromLI");
                }
                /*If we found a Logged invoice for the AP Invoice but the AP invoice isn't marked as matched return error.*/
                if (ttAPInvHed.MatchedFromLI == false && LogAPInvExist == true)
                {
                    throw new BLException(Strings.ALoggedInvoiceAlreadyExistForTheVendorInvoice(ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum), "LogAPInv", "MatchedFromLI", ttAPInvHed.SysRowID);
                }
            }    /* End of Validation for Logged Invoices */

            if (!ttAPInvHed.Posted)
            {
                Erp.Tables.APInvHed bAPInvHed = null;
                Erp.Tables.APInvHed altAPInvHed = null;
                Erp.Tables.APInvDtl altAPInvDtl = null;

                Currency = FindFirstBaseCurrency(Session.CompanyID, true);
                if (Currency != null)
                {
                    v_currCode = Currency.CurrencyCode;
                }
                else
                {
                    v_currCode = "";
                }
                /* Exchange Rate must be greater than zero if the currency is not base */
                if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement) == true &&
                    StringExtensions.Compare(ttAPInvHed.CurrencyCode, v_currCode) != 0 &&
                    ttAPInvHed.ExchangeRate <= 0)
                {
                    ExceptionManager.AddBLException(Strings.AValidExchangeRateIsRequired, "APInvHed", "ExchangeRate");
                }

                if (ttAPInvHed.InvoiceDate == null)
                {
                    ExceptionManager.AddBLException(Strings.InvoiceDateCannotBeBlank, "APInvHed", "InvoiceDate");

                }

                if (ttAPInvHed.REFPONum > 0)
                {


                    POHeader = FindFirstPOHeader(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.REFPONum);
                    if (POHeader == null)
                    {
                        ExceptionManager.AddBLException(Strings.InvalidReferencePONumber, "APInvHed", "RefPONum");
                    }

                    else
                    {

                        if (StringExtensions.Compare(POHeader.CurrencyCode, ttAPInvHed.CurrencyCode) != 0 && !String.IsNullOrEmpty(ttAPInvHed.APLOCID))
                        {
                            ExceptionManager.AddBLException(Strings.POCurreDoesNotMatchInvoiceCurre, "APInvHed", "RefPONum");
                        }

                        /* do not allow centralized payment for consolidated PO */
                        if (ttAPInvHed.CPay == true && POHeader.ConsolidatedPO == true)
                        {
                            ExceptionManager.AddBLException(Strings.AConsoPOMayNotBeSelecForCentralPaymentProcess, "APInvHed", "RefPONum");
                        }
                    }


                    var AltAPInvDtlQuery = DBExpressionCompiler.Compile(AltAPInvDtlExpression);
                    altAPInvDtl = AltAPInvDtlQuery(Db, Session.CompanyID, ttAPInvHed.REFPONum);
                    if (altAPInvDtl != null)
                    {

                        altAPInvHed = FindFirstAPInvHed(Session.CompanyID, altAPInvDtl.VendorNum, altAPInvDtl.InvoiceNum);
                        if (altAPInvHed != null)
                            if (StringExtensions.Compare(altAPInvHed.CurrencyCode, ttAPInvHed.CurrencyCode) != 0)
                            {
                                ExceptionManager.AddBLException(Strings.MustUseTheSameCurreAsInvoice(altAPInvHed.InvoiceNum, altAPInvHed.CurrencyCode), "APInvHed", "CurrencyCode");
                            }
                    }
                }/* if ttAPInvHed.RefPONum > 0 */

                if (ttAPInvHed.DebitMemo == false)
                {


                    var PurTermsQuery2 = DBExpressionCompiler.Compile(PurTermsExpression2);
                    if (!((PurTermsQuery2(Db, ttAPInvHed.Company, ttAPInvHed.TermsCode))))
                    {
                        ExceptionManager.AddBLException(Strings.InvalidTermsCode, "APInvHed", "TermsCode");
                    }
                }/* if ttAPInvHed.DebitMemo = false */

                if (ttAPInvHed.DebitMemo == true)
                {
                    if (!String.IsNullOrEmpty(ttAPInvHed.ScrInvoiceRef))
                    {/* ttAPInvHed.CPay = yes */
                        if (ttAPInvHed.CPay == true)
                        {


                            bAPInvHed = FindFirstBAPInvHedByRefInvoice(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.ScrInvoiceRef, true);
                            /* check if invoice reference is already posted, ignoring the OpenPayable flag */
                            if (bAPInvHed == null)
                            {
                                throw new BLException(Strings.TheInvoiceReferIsNotFlaggedForCentralPayment, "APInvHed", "InvoiceRef");
                            }
                            else if (bAPInvHed.DebitMemo == true || bAPInvHed.Posted == false)
                            {
                                throw new BLException(Strings.InvalidInvoiceReferForCentralPayment, "APInvHed", "InvoiceRef");
                            }
                            else if (bAPInvHed.CPayInvoiceBal == 0)
                            {
                                throw new BLException(Strings.TheInvoiceReferFlaggedForCentralPaymentIsAlready, "APInvHed", "InvoiceRef");
                            }
                        }
                        else
                        {
                            var APInvHedQuery29 = DBExpressionCompiler.Compile(APInvHedExpression29);
                            if (!((APInvHedQuery29(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.ScrInvoiceRef, false, true))))
                            {
                                ExceptionManager.AddBLException(Strings.InvalidInvoiceReference, "APInvHed", "InvoiceRef");
                            }
                        }/* else ttAPInvHed.CPay = no */

                        ttAPInvHed.InvoiceRef = ttAPInvHed.ScrInvoiceRef;
                    }
                }/* if ttAPInvHed.DebitMemo = true */

                if (!String.IsNullOrEmpty(ttAPInvHed.APLOCID))
                {
                    var APLOCQuery = DBExpressionCompiler.Compile(APLOCExpression);
                    APLOC = APLOCQuery(Db, Session.CompanyID, ttAPInvHed.APLOCID);
                    if (APLOC == null)
                    {
                        throw new BLException(Strings.InvalidLOCID, "APInvHed", "APLOCID");
                    }
                    else if (APLOC.Closed == true)
                    {
                        throw new BLException(Strings.LOCIsClosed, "APInvHed", "APLOCID");
                    }


                    var APLOCQuery2 = DBExpressionCompiler.Compile(APLOCExpression2);
                    if (!((APLOCQuery2(Db, Session.CompanyID, ttAPInvHed.APLOCID, ttAPInvHed.VendorNum))))
                    {
                        throw new BLException(Strings.InvalidSupplierForThisLOCID, "APInvHed", "APLOCID");
                    }



                    var APLOCQuery3 = DBExpressionCompiler.Compile(APLOCExpression3);
                    if (!((APLOCQuery3(Db, Session.CompanyID, ttAPInvHed.APLOCID, ttAPInvHed.VendorNum, ttAPInvHed.CurrencyCode))))
                    {
                        throw new BLException(Strings.InvalidCurrencyForThisLOCID, "APInvHed", "APLOCID");
                    }
                } /* ttapInvHed.APLOCID > "" */
                /* Do not allow CPay flag to be checked if Parent Company is the  *
                    * Current Company. Also make sure that the vendor is global when *
                    * invoice is flagged for Central Payment                         */
                if (ttAPInvHed.CPay == true)
                {


                    apSystPartial = FindPartialAPSyst(ttAPInvHed.Company);
                    if ((!ExistsAPSyst(ttAPInvHed.Company)) || String.IsNullOrEmpty(apSystPartial.CPayCompany))
                    {
                        ExceptionManager.AddBLException(Strings.AValidParentCompanyIsRequiForCentralPaymentProcess, "APInvHed", "CPay");
                    }
                    else if (StringExtensions.Compare(apSystPartial.CPayCompany, ttAPInvHed.Company) == 0)
                    {
                        ExceptionManager.AddBLException(Strings.ParentCompanyCannotInitiInvoiceForCentralPayment, "APInvHed", "CPay");
                    }



                    var VendorQuery4 = DBExpressionCompiler.Compile(VendorExpression4);
                    var GlbVendorQuery = DBExpressionCompiler.Compile(GlbVendorExpression);
                    if (!(VendorQuery4(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum, true)) &&
                    !(GlbVendorQuery(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum)))
                    {
                        ExceptionManager.AddBLException(Strings.ThisInvoiceIsFlaggedForCentralPaymentVendorMust, "APInvHed", "VendorID");
                    }
                }
            }
            else
            {
                IEnumerable<string> extendedData = ttAPInvHed.GetExtendedData().Select(extData => extData.ColumnName);
                string udFields = string.Join(",", extendedData);
                string cField = string.Empty;
                string cFieldsAllowed = string.Empty;
                string moreRecurFields = string.Empty;
                string cErrorText = string.Empty;

                cFieldsAllowed = "InvoiceComment,PayHold,PayMethodName,PMUID,APLOCID,BankID,TranType,RecurSource,Recurring,CycleCode,Duration,EndDate,DocMaxValueAmt,MaxValueAmt,Rpt1MaxValueAmt,Rpt2MaxValueAmt,Rpt3MaxValueAmt,HoldInvoice,CopyLatestInvoice,OverrideEndDate,CycleInactive,InstanceNum,RecurBalance,DocRecurBalance,Rpt1RecurBalance,Rpt2RecurBalance,Rpt3RecurBalance,CurrencySwitch,ImportNum";
                moreRecurFields = ",TotalInstanceNum,CumulativeBalance,DocCumulativeBalance,Rpt1CumulativeBalance,Rpt2CumulativeBalance,Rpt3CumulativeBalance,SourceInvoiceNum,SourceRecurBalance,DocSourceRecurBalance,Rpt1SourceRecurBalance,Rpt2SourceRecurBalance,Rpt3SourceRecurBalance,IsLatestRecurrence,IsMaxValue,SourceLastDate";
                cFieldsAllowed += string.IsNullOrEmpty(udFields) ? moreRecurFields : moreRecurFields + "," + udFields;
                cErrorText = Strings.OnlyThe;

                if (ttAPInvHed.OpenPayable == true)
                {
                    cFieldsAllowed = "TermsCode,TermsCodeDescription,TermsCodeTermsType,DiscountAmt,DocDiscountAmt,DiscountDate,DocDiscountAmt,Rpt1DiscountAmt,Rpt2DiscountAmt,PayDiscPer,Rpt1ScrDiscountAmt,Rpt2ScrDiscountAmt,ScrDiscountAmt,ScrDocDiscountAmt,PayDiscDays,PayDiscPartPay,EnableDueDate," + cFieldsAllowed;
                    cErrorText = cErrorText + Strings.TermsCode;
                }

                if (ttAPInvHed.DebitMemo == false)
                {
                    cFieldsAllowed = "DueDate," + cFieldsAllowed;
                    cErrorText = cErrorText + Strings.DueDate;
                }
                if (isSEOrFILocalization)
                {
                    cFieldsAllowed = "SEBankRef,SEPayCode," + cFieldsAllowed;
                    cErrorText = cErrorText + Strings.BankingReferencePaymentCode;
                }
                if (isNorwayLocalization)
                {
                    cFieldsAllowed = "SEPayCode," + cFieldsAllowed;
                    cErrorText = cErrorText + Strings.TransReasonCode;
                }
                if (isEstoniaLocalization)
                {
                    cFieldsAllowed = "SEBankRef," + cFieldsAllowed;
                    cErrorText = cErrorText + Strings.BankingReference;
                }
                if (isDenmarkLocalization)
                {
                    cFieldsAllowed = "SEBankRef," + cFieldsAllowed;
                    cErrorText = cErrorText + Strings.BankingReference;
                }
                if (isPeruLocalization)
                {
                    cFieldsAllowed = "PESUNATNum,PESUNATDepNum,PESUNATDepDate,PESUNATDepAmt,PEAPPayNum,PEComputationalCost,PEDUARefNum,PEFiscalCreditOperStatus,PEInternatTaxAgr,PERentType,PEPurchaseType,PEFiscalCreditOperStatusDsp," + cFieldsAllowed;
                    cErrorText = cErrorText + Strings.SUNATReferNumberSUNATDepositNumberSUNATDeposit;
                }
                if (isThaiLocalization)
                {
                    cFieldsAllowed = "SupAgentTaxRegNo,BranchID,DMReason," + cFieldsAllowed;
                    cErrorText = cErrorText + Strings.TaxIDBranchIDDMReason;
                }
                if (isSwissLocalization)
                {
                    cFieldsAllowed = "CHQRIBAN,CHQRReference," + cFieldsAllowed;
                    cErrorText = cErrorText + Strings.QRIBANQRReference;

                    if (lUseBankReferencing)
                    {
                        cFieldsAllowed = "UrgentPayment," + cFieldsAllowed;
                        cErrorText = cErrorText + Strings.UrgentPayment;
                    }
                }
                if (isBelgiumLocalization && lUseBankReferencing)
                {
                    cFieldsAllowed = "SEBankRef," + cFieldsAllowed;
                    cErrorText = cErrorText + Strings.BankingReference;
                }


                if (isMexicoLocalization)
                {
                    cFieldsAllowed = "MXFiscalFolio,MXRetentionCode,MXTARCode," + cFieldsAllowed;
                    cErrorText = cErrorText + Strings.MXFiscalFolio + Strings.MXRetentionCode + Strings.MXTARCode;
                }


                cErrorText = cErrorText + Strings.PaymeHeldPaymentMethodLetterOfCreditAndInvoice;
                List<string> exceptList = new List<string>(new string[] { "RowMod", "APLocIDDescription" });
                List<string> changedList = new List<string>();
                if (ttAPInvHed.StartUp == false)
                {
                    BufferCompare.Compare(ttAPInvHed, BIttAPInvHed, null, exceptList, changedList);
                }
                else
                {
                    exceptList.AddRange(new string[] { "ScrDocInvoiceVendorAmt", "ScrInvoiceVendorAmt", "Rpt1ScrInvoiceVendorAmt", "Rpt2ScrInvoiceVendorAmt", "Rpt3ScrInvoiceVendorAmt" });
                    BufferCompare.Compare(ttAPInvHed, BIttAPInvHed, null, exceptList, changedList);
                }

                foreach (string fld in changedList)
                {
                    if (StringExtensions.Lookup(cFieldsAllowed, fld) == -1)
                    {
                        ExceptionManager.AddBLException(cErrorText, "APInvHed");
                        break;
                    }
                }

            }
        }
        partial void APInvHedBeforeUpdate()
        {
            bool RecalcPrepay = false;
            decimal pPrepay = Decimal.Zero;
            string cKey = string.Empty;
            string cMessageText = string.Empty;
            DateTime? biExDate = null;
            string cDocType = string.Empty;
            Erp.Tables.APInvHed altAPInvHed = null;

            CheckDocumentIsLocked(Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum));
            if (ttAPInvHed.Posted == false)
            {
                cMessageText = LibEADValidation.validateEAD(ttAPInvHed.ApplyDate, "AP", "Apply");
                if (!String.IsNullOrEmpty(cMessageText))
                {
                    throw new BLException(cMessageText);
                }
            }

            ValidateAPInvHedRequiredFields(ttAPInvHed, BIttAPInvHed);

            if (BIttAPInvHed != null && !BIttAPInvHed.AllowOverrideLI && ttAPInvHed.AllowOverrideLI)
            {
                DeleteLogInvoiceCopiedTranGLC(ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum);
            }

            if (BIttAPInvHed != null && BIttAPInvHed.AllowOverrideLI && !ttAPInvHed.AllowOverrideLI)
            {
                throw new BLException(Strings.CannotDisableAllowOverrideLI, "APInvHed", "AllowOverrideLI");
            }

            if (ttAPInvHed.EnableDueDate && ttAPInvHed.DueDate == null)
            {
                throw new BLException(Strings.DueDateCannotBeBlank, "APInvHed", "DueDate");
            }

            if (isSwissLocalization)
            {
                if (!string.IsNullOrEmpty(ttAPInvHed.CHQRIBAN) && string.IsNullOrEmpty(ttAPInvHed.CHQRReference))
                {
                    throw new BLException(Strings.QRReferenceIsRequired, "APInvHed", "CHQRReference");
                }
            }

            if (ttAPInvHed.SiteIsLegalEntity)
            {
                if (string.IsNullOrEmpty(ttAPInvHed.SourcePlant))
                {
                    throw new BLException(Strings.SiteCannotBeBlank, "APInvHed", "SourcePlant");
                }
                if (BIttAPInvHed != null && StringExtensions.Compare(BIttAPInvHed.SourcePlant, ttAPInvHed.SourcePlant) != 0 &&
                    (ttAPInvHed.IsLcked || ttAPInvHed.Posted))
                {
                    throw new BLException(Strings.InvIsLockedOrPosted, "APInvHed", "SourcePlant");
                }
            }
            else
            {
                ttAPInvHed.SourcePlant = string.Empty;
            }

            using (var vatCheck = new VATCheck(Db))
            {
                vatCheck.CheckVendorTaxID(ttAPInvHed.VendorNumVendorID, out string errMessage);
            }

            //recurring invoices
            if ((ttAPInvHed.RecurSource == true) || (ttAPInvHed.IsRecurring == true))
            {

                if (ttAPInvHed.RecurSource == true)
                {
                    if (ttAPInvHed.CycleCode == string.Empty)
                    {
                        throw new BLException(Strings.CycleCodeEntered, "APInvHed", "CycleCode");
                    }

                    if (ttAPInvHed.InvoiceNum.Length > 45)
                    {
                        throw new BLException(Strings.SourceRecurLen, "APInvHed", "InvoiceNum");
                    }
                }


                if ((ttAPInvHed.OverrideEndDate == false) && ((ttAPInvHed.IsMaxValue == false) && (ttAPInvHed.Duration < 1)))
                {
                    throw new BLException(Strings.DurationEqualGreater, "APInvHed", "Duration");

                }

                if ((ttAPInvHed.OverrideEndDate == false) && (ttAPInvHed.IsMaxValue == false) && (ttAPInvHed.Duration < ttAPInvHed.InstanceNum))
                {
                    cMessageText = Strings.DurationEqualGreater2 + " - " + ttAPInvHed.InstanceNum.ToString();
                    throw new BLException(cMessageText, "APInvHed", "Duration");
                }


                if ((ttAPInvHed.OverrideEndDate) && ((ttAPInvHed.EndDate < ttAPInvHed.LastDate) || (ttAPInvHed.EndDate == null)))
                {
                    cMessageText = Strings.RecurInvLastDate + " " + ttAPInvHed.LastDate.Value.ToShortDateString();
                    throw new BLException(cMessageText, "APInvHed", "LastDate");
                }
                if ((ttAPInvHed.IsMaxValue == true) && (ttAPInvHed.DocMaxValueAmt <= 0))
                {
                    throw new BLException(Strings.RecurInvMaxValue, "APInvHed", "DocMaxValueAmt");
                }

                if (ttAPInvHed.RecurSource == true)
                {
                    if (ttAPInvHed.InstanceNum == 1)
                    {

                        ttAPInvHed.RecurBalance = ttAPInvHed.InvoiceAmt;
                        ttAPInvHed.DocRecurBalance = ttAPInvHed.DocInvoiceAmt;
                        ttAPInvHed.Rpt1RecurBalance = ttAPInvHed.Rpt1InvoiceAmt;
                        ttAPInvHed.Rpt2RecurBalance = ttAPInvHed.Rpt2InvoiceAmt;
                        ttAPInvHed.Rpt3RecurBalance = ttAPInvHed.Rpt3InvoiceAmt;
                        ttAPInvHed.LastDate = ttAPInvHed.InvoiceDate;
                    }


                    if (ttAPInvHed.IsMaxValue == true)
                    {
                        if (BIttAPInvHed != null)
                        {
                            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                        }
                        else
                        {
                            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                        }

                        if (ttAPInvHed.CurrencySwitch == true)
                        {
                            ttAPInvHed.DocMaxValueAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.MaxValueAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "DocMaxValueAmt");
                            LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHed, false, "MaxValueAmt", pCurrList, "ttAPInvHed", ttAPInvHed.CurrencyCode, ttChainRows);

                        }
                        else
                        {
                            LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHed, true, "MaxValueAmt", pCurrList, "ttAPInvHed", ttAPInvHed.CurrencyCode, ttChainRows);
                        }


                    }
                    else
                    {
                        ttAPInvHed.MaxValueAmt = 0;
                        ttAPInvHed.DocMaxValueAmt = 0;
                        ttAPInvHed.Rpt1MaxValueAmt = 0;
                        ttAPInvHed.Rpt2MaxValueAmt = 0;
                        ttAPInvHed.Rpt3MaxValueAmt = 0;
                    }
                }

                if ((ttAPInvHed.IsMaxValue == true) && (ttAPInvHed.DocMaxValueAmt < ttAPInvHed.DocRecurBalance) && (ttAPInvHed.CycleInactive == false))
                {

                    cMessageText = Strings.RecurInvMaxValueEqualGreater + " " + ttAPInvHed.DocRecurBalance.ToString();
                    throw new BLException(cMessageText, "APInvHed", "DocMaxValueAmt");
                }
                if (((ttAPInvHed.OverrideEndDate == true) && (ttAPInvHed.EndDate == ttAPInvHed.LastDate)) ||
                   ((ttAPInvHed.IsMaxValue == true) && (ttAPInvHed.DocMaxValueAmt == ttAPInvHed.DocRecurBalance)))
                {

                    ttAPInvHed.CycleInactive = true;
                }

                if ((ttAPInvHed.OverrideEndDate == true) || (ttAPInvHed.DocMaxValueAmt > 0))
                {
                    ttAPInvHed.Duration = 0;
                }

            } // Recurring Invoices

            if (ttAPInvHed.OverrideEndDate == false)
            {
                ttAPInvHed.EndDate = null;
            }

            /* validate that the currency exist */



            Currency = FindFirstCurrencyWithCode(Session.CompanyID, ttAPInvHed.CurrencyCode);
            if (Currency == null)
            {
                ExceptionManager.AddBLException(Strings.InvalidCurrencyCode, "APInvHed", "CurrencyCode");
            }

            /* Finland/Sweden Estonia validation */
            if (isSEOrFILocalization && String.IsNullOrEmpty(ttAPInvHed.SEBankRef) && lUseBankReferencing && ttAPInvHed.NettingID == 0)
            {
                ExceptionManager.AddBLException(Strings.BankReferenceMayNotBeBlank, "APInvHed", "SEBankRef");
            }

            if (isTaiwanLocalization)
            {
                if (ttAPInvHed.GRNIClearing)
                {
                    if (string.IsNullOrEmpty(ttAPInvHed.TranDocTypeID))
                    {
                        throw new BLException(Strings.DocumentTypeIsRequired, "APInvHed");
                    }
                }
                else
                {
                    if (string.IsNullOrEmpty(ttAPInvHed.TranDocTypeID) ||
                        string.IsNullOrEmpty(ttAPInvHed.GUIFormatCode) ||
                        string.IsNullOrEmpty(ttAPInvHed.GUITaxTypeCode) ||
                        string.IsNullOrEmpty(ttAPInvHed.GUIDeductCode))
                    {
                        throw new BLException(Strings.GUIFieldsArEmpty, "APInvHed");
                    }
                }
            }

            if (isPolandLocalization)
            {
                if (!ttAPInvHed.PLVendorAutoInvoiceNum && string.IsNullOrEmpty(ttAPInvHed.PLInvoiceReference))
                    ttAPInvHed.PLInvoiceReference = ttAPInvHed.InvoiceNum;
                else
                    ValidatePLInvoiceReference(ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum, ttAPInvHed.PLInvoiceReference, out bool isLogAPInvFound, out string logAPInvNumber);
            }

            if (!isNewCorrectionCancellationInvoice)
            {
                vExDate = ((vUseDate == 1) ? ttAPInvHed.InvoiceDate : ttAPInvHed.ApplyDate);

                if (BIttAPInvHed != null)
                {
                    biExDate = ((vUseDate == 1) ? BIttAPInvHed.InvoiceDate : BIttAPInvHed.ApplyDate);
                }
                else
                {
                    biExDate = null;
                }

                ExceptionManager.AssertNoBLExceptions();

                if (ExceptionManager.Exceptions.Count == 0)
                {
                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

                    this.setVendorAndDiscountAmt();
                }

                if ((!ttAPInvHed.CorrectionInv && !ttAPInvHed.CancellationInv) && ttAPInvHed.ApplyDate != ttAPInvHed.TransApplyDate)
                {
                    CalcAllInvoiceAmts = true;
                    ApplyDateChanged();
                }
                /*     If Invoice has any detail lines then on change of  Apply Date  the user is asked about recalculating rates/amounts per new date*/
                /*     IF user answered Yes then  ttAPInvHed.RecalcAmts was set to "R" */
                if (BIttAPInvHed != null && (vExDate != biExDate && ttAPInvHed.LockRate == false) && StringExtensions.Compare(ttAPInvHed.RecalcAmts, "R") == 0)
                {
                    CalcAllInvoiceAmts = true;
                }


                /* update exchange rate information*/

                if ((BIttAPInvHed == null) ||
                    ((BIttAPInvHed.ExchangeRate != ttAPInvHed.ExchangeRate) ||
                    (BIttAPInvHed.LockRate != ttAPInvHed.LockRate) ||
                    (BIttAPInvHed.TaxExchangeRate != ttAPInvHed.TaxExchangeRate) ||
                    (StringExtensions.Compare(BIttAPInvHed.RateGrpCode, ttAPInvHed.RateGrpCode) != 0) ||
                    (StringExtensions.Compare(BIttAPInvHed.TaxRateGrpCode, ttAPInvHed.TaxRateGrpCode) != 0) ||
                    (biExDate != vExDate && ttAPInvHed.LockRate == false && StringExtensions.Compare(ttAPInvHed.RecalcAmts, "R") == 0) ||
                    (biExDate != vExDate && ttAPInvHed.LockRate == false && String.IsNullOrEmpty(ttAPInvHed.RecalcAmts)) ||
                    (vUseDate == 0 && BIttAPInvHed.ApplyDate != ttAPInvHed.TransApplyDate && ttAPInvHed.LockRate == false) ||
                    ((BIttAPInvHed.TaxRateDate != ttAPInvHed.TaxRateDate ||
                    BIttAPInvHed.TaxPoint != ttAPInvHed.TaxPoint ||
                    biExDate != vExDate ||
                    (vUseDate == 0 && BIttAPInvHed.ApplyDate != ttAPInvHed.TransApplyDate)) && ttAPInvHed.LockTaxRate == false)))
                {


                    if ((BIttAPInvHed == null && ttAPInvHed.MatchedFromLI))
                    {
                        LibGetCurrencyRatesEF.FindCurrencyRates("LogAPInv", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                        foreach (var ttChainRow in ttChainRows)
                        {
                            CurrExChain = new Erp.Tables.CurrExChain();
                            Db.CurrExChain.Insert(CurrExChain);
                            BufferCopy.CopyExceptFor(ttChainRow, CurrExChain, new string[] { CurrExChain.ColumnNames.Key1, CurrExChain.ColumnNames.Key2, CurrExChain.ColumnNames.TableName, CurrExChain.ColumnNames.SysRowID, CurrExChain.ColumnNames.SysRevID });
                            CurrExChain.TableName = "APInvHed";
                            CurrExChain.Key1 = Compatibility.Convert.ToString(ttAPInvHed.VendorNum);
                            CurrExChain.Key2 = ttAPInvHed.InvoiceNum;
                            Db.Validate(CurrExChain);
                        }
                    }
                    else
                    {
                        if (ttAPInvHed.IsRecurring == false)
                        {
                            RecalcPrepay = true;
                            setExchangeRate();
                        }

                        LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                    }

                    ttAPInvHed.InvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "InvoiceVendorAmt");

                    if (ttAPInvHed.DebitMemo == false || isDiscountforDebitM == true)
                    {
                        ttAPInvHed.DiscountAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocDiscountAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "DiscountAmt");
                    }

                    if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                    {

                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHed, false, "InvoiceVendorAmt", pCurrList, "ttAPInvHed", ttAPInvHed.CurrencyCode, ttChainRows);
                        if (ttAPInvHed.DebitMemo == false || isDiscountforDebitM == true)
                        {
                            LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHed, false, "DiscountAmt", pCurrList, "ttAPInvHed", ttAPInvHed.CurrencyCode, ttChainRows);
                        }
                    }
                }
            }

            if (BIttAPInvHed != null)
            {
                if (BIttAPInvHed.ExchangeRate != ttAPInvHed.ExchangeRate ||
                BIttAPInvHed.TaxExchangeRate != ttAPInvHed.TaxExchangeRate ||
                StringExtensions.Compare(BIttAPInvHed.RateGrpCode, ttAPInvHed.RateGrpCode) != 0 ||
                StringExtensions.Compare(BIttAPInvHed.TaxRateGrpCode, ttAPInvHed.TaxRateGrpCode) != 0 ||
                BIttAPInvHed.DocInvoiceAmt != ttAPInvHed.DocInvoiceAmt ||
                StringExtensions.Compare(BIttAPInvHed.TermsCode, ttAPInvHed.TermsCode) != 0 ||
                StringExtensions.Compare(BIttAPInvHed.TaxRegionCode, ttAPInvHed.TaxRegionCode) != 0 ||
                (BIttAPInvHed.DevLog1 != ttAPInvHed.DevLog1 && ttAPInvHed.DevLog1 == false) ||
                BIttAPInvHed.TaxRateDate != ttAPInvHed.TaxRateDate ||
                BIttAPInvHed.APTaxRoundOption != ttAPInvHed.APTaxRoundOption ||
                BIttAPInvHed.DocPrePaymentAmt != ttAPInvHed.DocPrePaymentAmt ||
                StringExtensions.Compare(BIttAPInvHed.PrePaymentNum, ttAPInvHed.PrePaymentNum) != 0 ||
                (BIttAPInvHed.ReadyToCalc != ttAPInvHed.ReadyToCalc && ttAPInvHed.ReadyToCalc == true))
                {
                    ReCalcTaxes = true;
                }
            }

            if (isNorwayLocalization)
            {
                if (!String.IsNullOrEmpty(ttAPInvHed.SEPayCode))
                {
                    if (!ExistsUDCodes(Session.CompanyID, "TranReason", true, ttAPInvHed.SEPayCode))
                    {
                        ExceptionManager.AddBLException(Strings.InvalidTransReasonCode, "APInvHed", "SEPayCode");
                    }
                }
                string cVendCountryISOCode = string.Empty;
                if (String.IsNullOrEmpty(ttAPInvHed.SEPayCode) && (Math.Abs(ttAPInvHed.InvoiceVendorAmt) > dNOThresholdAmt))
                {
                    Vendor = this.FindFirstVendor(ttAPInvHed.Company, ttAPInvHed.VendorNum);
                    if (Vendor != null)
                    {
                        var bCountry = Country.FindFirstByPrimaryKey(Db, Session.CompanyID, Vendor.CountryNum);
                        if (bCountry != null)
                        {
                            cVendCountryISOCode = bCountry.ISOCode;
                        }
                        if (cVendCountryISOCode.Compare("NO") != 0)
                        {
                            throw new BLException(Strings.TransReasonCodesHasNotBeenEnteredForSuppl(Vendor.Name), "APInvHed", "SEPayCode");
                        }
                    }
                }
            }

            cDocType = "APInvoice";
            if (ttAPInvHed.InvoiceType.KeyEquals("BOE"))
            {
                cDocType = "APBillExch";
            }
            else if (ttAPInvHed.GRNIClearing)
            {
                cDocType = "ManualGRNI";
            }

            if (ttAPInvHed.DebitMemo == true)
            {
                if (!String.IsNullOrEmpty(ttAPInvHed.PrePaymentNum))
                {
                    ExceptionManager.AddBLException(Strings.APrepaInvoiceNumberShouldBeEmptyForADebitMemo, "APInvHed", "PrePaymentNum", ttAPInvHed.SysRowID);
                }

                cDocType = "DebitMemo";
            }

            if (!String.IsNullOrEmpty(ttAPInvHed.PrePaymentNum))
            {


                var AltAPInvHedQuery2 = DBExpressionCompiler.Compile(AltAPInvHedExpression2);
                altAPInvHed = AltAPInvHedQuery2(Db, Session.CompanyID, ttAPInvHed.PrePaymentNum);
                if (altAPInvHed == null)
                {
                    throw new BLException(Strings.TheInvoiceNoDoesNotExist(ttAPInvHed.PrePaymentNum), "APInvHed", "InvoceNum");
                }
                if (ttAPInvHed.PrePaymentAmt < 0)
                {
                    throw new BLException(Strings.LessPrePaymentAmountShouldBeGreaterOrEquals, "APInvHed", "PrePaymentAmt");
                }

                if (BIttAPInvHed != null)
                {
                    pPrepay = Math.Abs(BIttAPInvHed.DocPrePaymentAmt);
                }
                else
                {
                    pPrepay = 0;
                }

                if (ttAPInvHed.DocPrePaymentAmt > (Math.Abs(altAPInvHed.DocUnpostedBal) + pPrepay))
                {
                    throw new BLException(Strings.LessPrePaymentAmountShouldBeLesserThanAnUnposBalance, "APInvHed", "PrePaymentAmt");
                }

                if (RecalcPrepay)
                {
                    ttAPInvHed.PrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocPrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "InvoiceAmt");
                    ttAPInvHed.Rpt1PrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocPrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "Rpt1InvoiceAmt");
                    ttAPInvHed.Rpt2PrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocPrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(2, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "Rpt2InvoiceAmt");
                    ttAPInvHed.Rpt3PrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocPrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(3, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "Rpt3InvoiceAmt");
                }
            }
            else if (ttAPInvHed.PrePaymentAmt != 0)
            {
                throw new BLException(Strings.LessPrePaymentAmountShouldBeEqualsBecauseOfNon, "APInvHed", "PrePaymentAmt");
            }

            LibValidateTranDocType.RunValidateTranDocType(ttAPInvHed.TranDocTypeID, cDocType);
            string pkAPInvHed = string.Empty;
            pkAPInvHed = Compatibility.Convert.ToString(ttAPInvHed.VendorNum) + Ice.Constants.LIST_DELIM + ttAPInvHed.InvoiceNum;

            if (isPeruLocalization)
            {
                using (var libCSFPeru = new Internal.CSF.Peru(this.Db))
                {
                    libCSFPeru.APInvHedBeforeUpdate(ttAPInvHed);
                }

            }

            if (isPolandLocalization)
            {
                if (isNewOrModified(ttAPInvHed))
                {
                    if (ttAPInvHed.ReceivedDate == null)
                    {
                        throw new BLException(Strings.ReceivedDateIsMandatory);
                    }
                    if (ttAPInvHed.TaxRateDate == null)
                    {
                        ttAPInvHed.TaxRateDate = ttAPInvHed.ReceivedDate;
                    }
                    if (ttAPInvHed.TaxPoint == null)
                    {
                        ttAPInvHed.TaxPoint = ttAPInvHed.ReceivedDate;
                    }
                }
            }
            if (isMexicoLocalization)
            {
                if (!string.IsNullOrEmpty(ttAPInvHed.MXTARCode))
                {
                    if (!int.TryParse(ttAPInvHed.MXTARCode, out int vValidationField))
                    {
                        throw new BLException(Strings.TARCodeShouldBeNumeric, "APInvHed");
                    }
                }
            }

            if (isIndiaLocalization)
            {
                if (!string.IsNullOrEmpty(ttAPInvHed.ImportNum) && ttAPInvHed.ImportedDate == null)
                {
                    throw new BLException(Strings.ImportDateMustBeEntered, "APInvHed", "ImportedDate");
                }
                if (ttAPInvHed.ImportedDate != null && string.IsNullOrEmpty(ttAPInvHed.ImportNum))
                {
                    throw new BLException(Strings.ImportNumberMustBeEntered, "APInvHed", "ImportNum");
                }
                if (!string.IsNullOrEmpty(ttAPInvHed.ImportNum) && string.IsNullOrEmpty(ttAPInvHed.ImportedFrom))
                {
                    throw new BLException(Strings.ImportCountryMustBeEntered, "APInvHed", "ImportedFrom");
                }
            }

            if (BIttAPInvHed != null && !BIttAPInvHed.TermsCode.KeyEquals(ttAPInvHed.TermsCode))
            {
                foreach (var APInvSched in SelectAPInvSched(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum))
                {
                    if (tmpAPInvSchedRows == null)
                    {
                        tmpAPInvSchedRows = new List<APInvSchedRow>();
                    }

                    tmpAPInvSchedRow = new APInvSchedRow();
                    tmpAPInvSchedRows.Add(tmpAPInvSchedRow);
                    BufferCopy.Copy(APInvSched, ref tmpAPInvSchedRow);
                    tmpAPInvSchedRow.SysRowID = APInvSched.SysRowID;
                    tmpAPInvSchedRow.RowMod = IceRow.ROWSTATE_DELETED;

                }
            }

        }

        private void DeleteLogInvoiceCopiedTranGLC(int vendorNum, string invoiceNum)
        {
            foreach (var bufTranGLC in SelectInvoiceTranGLC(Session.CompanyID, "APInvHed", Compatibility.Convert.ToString(vendorNum), invoiceNum))
            {
                Db.TranGLC.Delete(bufTranGLC);
            }
            Db.Validate();
        }

        private void ApInvHedChildDeleted()
        {


            var APInvHedQuery30 = DBExpressionCompiler.Compile(APInvHedExpression30);
            APInvHed = APInvHedQuery30(Db, rSaveAPInvHedRowid);
            if (APInvHed != null)
            {
                UpdateHeaderDiscounts(ref APInvHed);

                vInvoiceType = APInvHed.InvoiceType;
                if (vInvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
                {
                    APInvHed.ReferencedByBOE = "";


                    var APTranQuery = DBExpressionCompiler.Compile(APTranExpression);
                    foreach (var ApTran_iterator in (APTranQuery(Db, ttAPInvDtl.Company, APInvHed.HeadNum, Compatibility.Convert.ToString(ttAPInvDtl.InvoiceRef))))
                    {
                        APTran = ApTran_iterator;
                        Db.APTran.Delete(APTran);
                    }

                    foreach (var ApTran_iterator in (SelectAPTran(ttAPInvDtl.Company, APInvHed.HeadNum)))
                    {
                        APTran = ApTran_iterator;
                        APGeneratePaymentFromBOE.processInvTaxes(APTran.HeadNum, APTran.APTranNo, APTran.InvoiceNum);
                    }
                    APInvHed.DocInvoiceAmt = APInvHed.DocInvoiceAmt + ttAPInvDtl.DocScrWithholdAmt;
                    APInvHed.InvoiceAmt = APInvHed.InvoiceAmt + ttAPInvDtl.ScrWithholdAmt;
                    APInvHed.Rpt1InvoiceAmt = APInvHed.Rpt1InvoiceAmt + ttAPInvDtl.Rpt1ScrWithholdAmt;
                    APInvHed.Rpt2InvoiceAmt = APInvHed.Rpt2InvoiceAmt + ttAPInvDtl.Rpt2ScrWithholdAmt;
                    APInvHed.Rpt3InvoiceAmt = APInvHed.Rpt3InvoiceAmt + ttAPInvDtl.Rpt3ScrWithholdAmt;
                    Db.Validate();
                    APGeneratePaymentFromBOE.CalcHeaderTotals(ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);

                }

                refreshttAPInvHed();

                /* SCR #41117 - Refresh tax records */


                var APInvTaxQuery6 = DBExpressionCompiler.Compile(APInvTaxExpression6);
                foreach (var APInvTax_iterator in (APInvTaxQuery6(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                {
                    APInvTax = APInvTax_iterator;
                    refreshttAPInvTax();
                }/* for each APInvTax */

                if (isPeruLocalization == true)
                {
                    refreshttPEAPInvTax(APInvHed.VendorNum, APInvHed.InvoiceNum, APInvHed.GroupID);
                }


                /* Refresh header misc charges */



                foreach (var APInvMsc_iterator in (SelectAPInvMsc(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                {
                    APInvMsc = APInvMsc_iterator;
                    refreshttAPIHAPInvMsc();
                }/* for each APInvMsc */



                foreach (var APInvExp_iterator in (SelectAPInvExp(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                {
                    APInvExp = APInvExp_iterator;
                    refreshttAPIHAPInvExp();
                }
            }
        }

        #endregion
        #region APInvHedMscTax Table Methods
        partial void APInvHedMscTaxAfterGetRows()
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            if (APInvHed != null)
            {
                ttAPInvHedMscTax.CurrencyCode = APInvHed.CurrencyCode;
                ttAPInvHedMscTax.GroupID = APInvHed.GroupID;
                ttAPInvHedMscTax.InvoiceLine = 0;


                if (APInvHed.DebitMemo)
                {

                    ttAPInvHedMscTax.DocScrTaxableAmt = -ttAPInvHedMscTax.DocTaxableAmt;
                    ttAPInvHedMscTax.DocScrReportableAmt = -ttAPInvHedMscTax.DocReportableAmt;
                    ttAPInvHedMscTax.DocScrTaxAmt = -ttAPInvHedMscTax.DocTaxAmt;
                    ttAPInvHedMscTax.DocScrDedTaxAmt = -ttAPInvHedMscTax.DocDedTaxAmt;
                    ttAPInvHedMscTax.ScrTaxableAmt = -ttAPInvHedMscTax.TaxableAmt;
                    ttAPInvHedMscTax.Rpt1ScrTaxableAmt = -ttAPInvHedMscTax.Rpt1TaxableAmt;
                    ttAPInvHedMscTax.Rpt2ScrTaxableAmt = -ttAPInvHedMscTax.Rpt2TaxableAmt;
                    ttAPInvHedMscTax.Rpt3ScrTaxableAmt = -ttAPInvHedMscTax.Rpt3TaxableAmt;
                    ttAPInvHedMscTax.ScrReportableAmt = -ttAPInvHedMscTax.ReportableAmt;
                    ttAPInvHedMscTax.Rpt1ScrReportableAmt = -ttAPInvHedMscTax.Rpt1ReportableAmt;
                    ttAPInvHedMscTax.Rpt2ScrReportableAmt = -ttAPInvHedMscTax.Rpt2ReportableAmt;
                    ttAPInvHedMscTax.Rpt3ScrReportableAmt = -ttAPInvHedMscTax.Rpt3ReportableAmt;
                    ttAPInvHedMscTax.ScrTaxAmt = -ttAPInvHedMscTax.TaxAmt;
                    ttAPInvHedMscTax.Rpt1ScrTaxAmt = -ttAPInvHedMscTax.Rpt1TaxAmt;
                    ttAPInvHedMscTax.Rpt2ScrTaxAmt = -ttAPInvHedMscTax.Rpt2TaxAmt;
                    ttAPInvHedMscTax.Rpt3ScrTaxAmt = -ttAPInvHedMscTax.Rpt3TaxAmt;
                    ttAPInvHedMscTax.ScrDedTaxAmt = -ttAPInvHedMscTax.DedTaxAmt;
                    ttAPInvHedMscTax.Rpt1ScrDedTaxAmt = -ttAPInvHedMscTax.Rpt1DedTaxAmt;
                    ttAPInvHedMscTax.Rpt2ScrDedTaxAmt = -ttAPInvHedMscTax.Rpt2DedTaxAmt;
                    ttAPInvHedMscTax.Rpt3ScrDedTaxAmt = -ttAPInvHedMscTax.Rpt3DedTaxAmt;
                    ttAPInvHedMscTax.DocScrFixedAmount = -ttAPInvHedMscTax.DocFixedAmount;
                    ttAPInvHedMscTax.ScrFixedAmount = -ttAPInvHedMscTax.FixedAmount;
                    ttAPInvHedMscTax.Rpt1ScrFixedAmount = -ttAPInvHedMscTax.Rpt1FixedAmount;
                    ttAPInvHedMscTax.Rpt2ScrFixedAmount = -ttAPInvHedMscTax.Rpt2FixedAmount;
                    ttAPInvHedMscTax.Rpt3ScrFixedAmount = -ttAPInvHedMscTax.Rpt3FixedAmount;
                }
                else
                {

                    ttAPInvHedMscTax.DocScrTaxableAmt = ttAPInvHedMscTax.DocTaxableAmt;
                    ttAPInvHedMscTax.DocScrReportableAmt = ttAPInvHedMscTax.DocReportableAmt;
                    ttAPInvHedMscTax.DocScrTaxAmt = ttAPInvHedMscTax.DocTaxAmt;
                    ttAPInvHedMscTax.DocScrDedTaxAmt = ttAPInvHedMscTax.DocDedTaxAmt;
                    ttAPInvHedMscTax.ScrTaxableAmt = ttAPInvHedMscTax.TaxableAmt;
                    ttAPInvHedMscTax.Rpt1ScrTaxableAmt = ttAPInvHedMscTax.Rpt1TaxableAmt;
                    ttAPInvHedMscTax.Rpt2ScrTaxableAmt = ttAPInvHedMscTax.Rpt2TaxableAmt;
                    ttAPInvHedMscTax.Rpt3ScrTaxableAmt = ttAPInvHedMscTax.Rpt3TaxableAmt;
                    ttAPInvHedMscTax.ScrReportableAmt = ttAPInvHedMscTax.ReportableAmt;
                    ttAPInvHedMscTax.Rpt1ScrReportableAmt = ttAPInvHedMscTax.Rpt1ReportableAmt;
                    ttAPInvHedMscTax.Rpt2ScrReportableAmt = ttAPInvHedMscTax.Rpt2ReportableAmt;
                    ttAPInvHedMscTax.Rpt3ScrReportableAmt = ttAPInvHedMscTax.Rpt3ReportableAmt;
                    ttAPInvHedMscTax.ScrTaxAmt = ttAPInvHedMscTax.TaxAmt;
                    ttAPInvHedMscTax.Rpt1ScrTaxAmt = ttAPInvHedMscTax.Rpt1TaxAmt;
                    ttAPInvHedMscTax.Rpt2ScrTaxAmt = ttAPInvHedMscTax.Rpt2TaxAmt;
                    ttAPInvHedMscTax.Rpt3ScrTaxAmt = ttAPInvHedMscTax.Rpt3TaxAmt;
                    ttAPInvHedMscTax.ScrDedTaxAmt = ttAPInvHedMscTax.DedTaxAmt;
                    ttAPInvHedMscTax.Rpt1ScrDedTaxAmt = ttAPInvHedMscTax.Rpt1DedTaxAmt;
                    ttAPInvHedMscTax.Rpt2ScrDedTaxAmt = ttAPInvHedMscTax.Rpt2DedTaxAmt;
                    ttAPInvHedMscTax.Rpt3ScrDedTaxAmt = ttAPInvHedMscTax.Rpt3DedTaxAmt;
                    ttAPInvHedMscTax.DocScrFixedAmount = ttAPInvHedMscTax.DocFixedAmount;
                    ttAPInvHedMscTax.ScrFixedAmount = ttAPInvHedMscTax.FixedAmount;
                    ttAPInvHedMscTax.Rpt1ScrFixedAmount = ttAPInvHedMscTax.Rpt1FixedAmount;
                    ttAPInvHedMscTax.Rpt2ScrFixedAmount = ttAPInvHedMscTax.Rpt2FixedAmount;
                    ttAPInvHedMscTax.Rpt3ScrFixedAmount = ttAPInvHedMscTax.Rpt3FixedAmount;
                }

            }

            var BufAPInvMscQuery = DBExpressionCompiler.Compile(BufAPInvMscExpression);
            APInvMsc = BufAPInvMscQuery(Db, Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, 0, ttAPInvHedMscTax.MscNum);
            if (APInvMsc != null)
            {
                ttAPInvHedMscTax.MiscCode = APInvMsc.MiscCode;
                ttAPInvHedMscTax.DisableManual = APInvMsc.NoTaxRecalc;

            }

            switch (ttAPInvHedMscTax.CollectionType)
            {
                case 0:
                    {
                        ttAPInvHedMscTax.DescCollectionType = Strings.InvoiceCollection;
                    }
                    break;
                case 1:
                    {
                        ttAPInvHedMscTax.DescCollectionType = Strings.Withholding;
                    }
                    break;
                case 2:
                    {
                        ttAPInvHedMscTax.DescCollectionType = Strings.SelfAssessment;
                    }
                    break;
                case 3:
                    {
                        ttAPInvHedMscTax.DescCollectionType = Strings.SelfAssessmentDual;
                    }
                    break;
            }
        }
        #endregion

        #region APInvJob Table Methods

        partial void APInvJobAfterDelete()
        {
            // Reset old link from EmpExpense to APInvJob 
            if (!String.IsNullOrEmpty(ttAPInvJob.EmpID) && ttAPInvJob.EmpExpenseNum > 0)
            {
                var EmpExpense = this.FindFirstEmpExpense(ttAPInvJob.Company, ttAPInvJob.EmpID, ttAPInvJob.EmpExpenseNum);
                if (EmpExpense != null)
                {
                    EmpExpense.InvoiceNum = string.Empty;
                    EmpExpense.InvoiceLine = 0;
                    EmpExpense.Invoiced = false;
                    Db.Validate(EmpExpense);
                }
            }

            ApInvDtlChildDeleted(true);
        }

        partial void APInvJobAfterGetNew()
        {
            if (canUpdateInvoice(ttAPInvJob.VendorNum, ttAPInvJob.InvoiceNum).canUpdateInvoice == false)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvJob", "TermsCode");
            }

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPInvJob.Company, ttAPInvJob.VendorNum, ttAPInvJob.InvoiceNum, ttAPInvJob.InvoiceLine);
            if (StringExtensions.Compare(APInvDtl.LineType, "J") != 0)
            {
                throw new BLException(Strings.AJobMisceChargeCanBeAddedOnlyToJobMisceInvoice, "APInvJob");
            }/* if APInvDtl.LineType <> "J":U */
            ttAPInvJob.ExtCost = APInvDtl.ExtCost;
            ttAPInvJob.DocExtCost = APInvDtl.DocExtCost;
            APInvJobAfterGetRows();
            APInvJob_Foreign_Link();
        }

        partial void APInvJobAfterGetRows()
        {
            var outDebitMemo5 = ttAPInvJob.DebitMemo;
            var outPosted5 = ttAPInvJob.Posted;
            var outGroupID5 = ttAPInvJob.GroupID;

            getAPInvHedAttributes(ttAPInvJob.VendorNum, ttAPInvJob.InvoiceNum, out outDebitMemo5, out outPosted5, out outGroupID5);

            ttAPInvJob.DebitMemo = outDebitMemo5;
            ttAPInvJob.Posted = outPosted5;
            ttAPInvJob.GroupID = outGroupID5;
            if (APInvHed != null)
            {
                ttAPInvJob.CurrencyCode = APInvHed.CurrencyCode;
            }

            AssignAPInvJobJobMtlFields();


            ProjPhase = FindFirstProjPhase(Session.CompanyID, ttAPInvJob.ProjectID, ttAPInvJob.PhaseID);
            ttAPInvJob.ScrExtCost = Math.Abs(ttAPInvJob.ExtCost);
            ttAPInvJob.DocScrExtCost = Math.Abs(ttAPInvJob.DocScrExtCost);
            ttAPInvJob.Rpt3ScrExtCost = Math.Abs(ttAPInvJob.Rpt3ScrExtCost);
            ttAPInvJob.Rpt2ScrExtCost = Math.Abs(ttAPInvJob.Rpt2ScrExtCost);
            ttAPInvJob.Rpt1ScrExtCost = Math.Abs(ttAPInvJob.Rpt1ScrExtCost);
            ttAPInvJob.PhaseDescription = ((ProjPhase != null) ? ProjPhase.Description : "");
        }


        partial void APInvJobAfterUpdate()
        {
            if (ttAPInvJob.EnableMaterialComplete == true)
            {


                FSCallhd = FindFirstFSCallhdWithUpdLock(ttAPInvJob.Company, ttAPInvJob.CallNum);
                if (FSCallhd != null &&
                FSCallhd.Invoiced == false)
                {
                    FSCallhd.MaterialComplete = ttAPInvJob.MaterialComplete;
                }

                Db.Release(ref FSCallhd);
            }/* if ttAPInvJob.EnableMaterialComplete = true */

            // Expense link was changed 
            if ((BIttAPInvJob == null) || (BIttAPInvJob.EmpExpenseNum != ttAPInvJob.EmpExpenseNum) || (!BIttAPInvJob.EmpID.KeyEquals(ttAPInvJob.EmpID)))
            {
                //New Expense link -> create link from EmpExpense to APInvDtl 
                if (ttAPInvJob.EmpExpenseNum > 0)
                {
                    var EmpExpense = this.FindFirstEmpExpense(ttAPInvJob.Company, ttAPInvJob.EmpID, ttAPInvJob.EmpExpenseNum);

                    if (EmpExpense != null)
                    {
                        EmpExpense.InvoiceNum = ttAPInvJob.InvoiceNum;
                        EmpExpense.InvoiceLine = ttAPInvJob.InvoiceLine;
                        EmpExpense.Invoiced = true;
                        Db.Validate(EmpExpense);

                    }
                }
                // Reset old link from EmpExpense to APInvDtl 
                if ((BIttAPInvJob != null) && (BIttAPInvJob.EmpExpenseNum > 0))
                {
                    var EmpExpense = this.FindFirstEmpExpense(BIttAPInvJob.Company, BIttAPInvJob.EmpID, BIttAPInvJob.EmpExpenseNum);
                    if (EmpExpense != null)
                    {
                        EmpExpense.InvoiceNum = string.Empty;
                        EmpExpense.InvoiceLine = 0;
                        EmpExpense.Invoiced = false;
                        Db.Validate(EmpExpense);

                    }
                }
            }

            ttAPInvJob.AddedJobMtlSeq = 0;
            APInvJobAfterGetRows();
            APInvJob_Foreign_Link();

            /* Create a ttAPInvDtl record to send back with updated information. */
            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, APInvJob.Company, APInvJob.VendorNum, APInvJob.InvoiceNum, APInvJob.InvoiceLine);
            if (APInvDtl != null)
            {
                refreshttAPInvDtl();
            }
        }

        partial void APInvJobBeforeDelete()
        {
            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPInvJob.Company, ttAPInvJob.VendorNum, ttAPInvJob.InvoiceNum, ttAPInvJob.InvoiceLine);
            if (APInvDtl != null)
            {
                rSaveAPInvDtlRowid = APInvDtl.SysRowID;
            }
        }

        partial void APInvJobBeforeUpdate()
        {
            Erp.Tables.APInvHed AltAPInvHed = null;
            Erp.Tables.APInvDtl AltAPInvDtl = null;
            decimal V_Cost = decimal.Zero;
            bool V_AmountDecrease = false;
            string PostGroupID = string.Empty;
            bool lCorrection = false;
            string vErrMsg = string.Empty;
            bool isCalculated = false;
            decimal vTotalJobChargeAmt = decimal.Zero;
            decimal vUnpostedJobChargeAmt = decimal.Zero;
            decimal vUninvoicedExpenseAmt = decimal.Zero;

            /* Validate the invoice can be updated */
            if (canUpdateInvoice(ttAPInvJob.VendorNum, ttAPInvJob.InvoiceNum).canUpdateInvoice == false)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvJob");
            }


            var JobHeadQuery2 = DBExpressionCompiler.Compile(JobHeadExpression2);
            if (!((JobHeadQuery2(Db, ttAPInvJob.Company, ttAPInvJob.JobNum, false))))
            {
                ExceptionManager.AddBLException(Strings.JobIsNotOnFileOrClosed, "APInvJob", "JobNum");
            }


            var JobAsmblQuery = DBExpressionCompiler.Compile(JobAsmblExpression);
            if (!(JobAsmblQuery(Db, ttAPInvJob.Company, ttAPInvJob.JobNum, ttAPInvJob.AssemblySeq)))
            {
                ExceptionManager.AddBLException(Strings.AssemblyIsNotOnFile, "APInvJob", "AssemblySeq");
            }/* if not can-find(JobAsmbl  */


            var JobMtlQuery = DBExpressionCompiler.Compile(JobMtlExpression);
            if (!(JobMtlQuery(Db, ttAPInvJob.Company, ttAPInvJob.JobNum, ttAPInvJob.AssemblySeq, ttAPInvJob.MtlSeq, true)))
            {
                ExceptionManager.AddBLException(Strings.MaterIsNotOnFileOrNotAJobMisceCharge, "APInvJob", "MtlSeq");
            }/* if not can-find(JobMtl  */


            var AltAPInvDtlQuery2 = DBExpressionCompiler.Compile(AltAPInvDtlExpression2);
            AltAPInvDtl = AltAPInvDtlQuery2(Db, Session.CompanyID, ttAPInvJob.InvoiceNum, ttAPInvJob.InvoiceLine);
            if (AltAPInvDtl != null)
            {
                lCorrection = AltAPInvDtl.CorrectionDtl;
            }

            if (ttAPInvJob.ScrExtCost == 0 || (lCorrection == false && ttAPInvJob.ScrExtCost < 0))
            {
                ExceptionManager.AddBLException(Strings.InvalidMisceChargeAmount, "APInvJob", "ExtCost");
            }

            /* SCR 208266 - Prevent entry of multiple job charges for the same non-reimbursable expense within the same invoice */
            if (ExistsOtherNRExpAPInvJob(ttAPInvJob.Company, ttAPInvJob.VendorNum, ttAPInvJob.InvoiceNum, ttAPInvJob.JobNum, ttAPInvJob.AssemblySeq, ttAPInvJob.MtlSeq, ttAPInvJob.SysRowID))
            {
                throw new BLException(Strings.MultipleJobChargesNotAllowed, "APInvJob", "MtlSeq");
            }

            if (!String.IsNullOrEmpty(ttAPInvJob.ProjectID))
            {
                if (String.IsNullOrEmpty(ttAPInvJob.PhaseID))
                {
                    throw new BLException(Strings.PhaseIsRequired, "APInvJob", "PhaseID");
                }
                if (String.IsNullOrEmpty(ttAPInvJob.MiscCode))
                {
                    throw new BLException(Strings.MiscellaneousChargeIsRequired, "APInvJob", "MiscCode");
                }
                //if ttAPInvJob.EmpID <> "":U and
                if (!String.IsNullOrEmpty(ttAPInvJob.EmpID))
                {
                    if (this.ExistsEmpBasic(ttAPInvJob.Company, ttAPInvJob.EmpID) == false)
                    {
                        throw new BLException(Strings.EmplNotOnFile, "APInvJob", "EmpID");
                    }
                }
                if (ttAPInvJob.EmpExpenseNum != 0)
                {
                    if ((BIttAPInvJob == null) || (BIttAPInvJob.EmpExpenseNum != ttAPInvJob.EmpExpenseNum))
                    {
                        vErrMsg = string.Empty;

                        var EmpExpense = this.FindFirstEmpExpense2(ttAPInvJob.Company, ttAPInvJob.EmpID, ttAPInvJob.EmpExpenseNum);
                        if (EmpExpense == null)
                        {
                            vErrMsg = Strings.LinkExpenseNotOnFile;
                        }
                        else
                        {
                            if (StringExtensions.Lookup(",A", EmpExpense.ExpenseStatus) == -1)
                            {
                                vErrMsg = Strings.LinkExpenseShouldAppvd;
                            }
                            else
                            {
                                if (EmpExpense.Reimbursable == true)
                                {
                                    vErrMsg = Strings.LinkExpenseShouldNotNonReim;
                                }
                                else
                                {
                                    if (!EmpExpense.MiscCode.KeyEquals(ttAPInvJob.MiscCode))
                                    {
                                        vErrMsg = Strings.LinkExpenseMiscCode;
                                    }
                                    else
                                    {
                                        if (!EmpExpense.PhaseID.KeyEquals(ttAPInvJob.PhaseID))
                                        {
                                            vErrMsg = Strings.LinkExpensePhase;
                                        }
                                        else
                                        {
                                            if (!EmpExpense.ExpCurrencyCode.KeyEquals(ttAPInvJob.CurrencyCode))
                                            {
                                                vErrMsg = Strings.LinkExpenseCurrencyCode;
                                            }
                                            else
                                            {
                                                if (EmpExpense.Invoiced == true)
                                                {
                                                    vErrMsg = Strings.LinkExpenseJobCharge;

                                                }
                                            }
                                        }

                                    }
                                }
                            }

                        }
                        if (vErrMsg != String.Empty)
                        {
                            throw new BLException(vErrMsg);
                        }
                        ttAPInvJob.DocScrExtCost = EmpExpense.DocExpenseAmt;
                        ttAPInvJob.MtlSeq = EmpExpense.MtlSeq;
                        this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPInvJob.VendorNum), ttAPInvJob.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvJob, true, "ScrExtCost", pCurrList, "ttAPInvJob", ttAPInvJob.CurrencyCode, ttChainRows);
                        isCalculated = true;

                    }


                }  // Emp ID
            }  //project ID

            if (ExceptionManager.Exceptions.Count == 0)
            {
                if (String.IsNullOrEmpty(pCurrList))
                {
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPInvJob.VendorNum), ttAPInvJob.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                }
                if (isCalculated == false)
                {
                    ttAPInvJob.DocScrExtCost = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvJob.ScrExtCost, ttAPInvJob.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "APInvJob", "DocScrExtCost");
                }
                if (ttAPInvJob.DebitMemo == false)
                {
                    if (ttAPInvJob.ExtCost > ttAPInvJob.ScrExtCost && lCorrection == false)
                    {
                        V_AmountDecrease = true;
                    }

                    ttAPInvJob.ExtCost = ttAPInvJob.ScrExtCost;
                    ttAPInvJob.DocExtCost = ttAPInvJob.DocScrExtCost;
                }
                else
                {
                    ttAPInvJob.ExtCost = -ttAPInvJob.ScrExtCost;
                    ttAPInvJob.DocExtCost = -ttAPInvJob.DocScrExtCost;
                }
            }

            /*If its DebitMemo validate that the sum of the Job Costs minus this debitmemo is greater than zero.*/
            if (ttAPInvJob.DebitMemo || V_AmountDecrease)
            {
                V_Cost = 0;

                /* ERPS-91986 - Validate that this debit memo will not cause the linked job material charge to go negative. *
                 * Get actual job material charge cost less all unposted debit memo job charges and uninvoiced reimbursable *
                 * expenses for the specific charge. If the difference will go negative after adding new debit memo charge, *
                 * then do not allow it.                                                                                    */
                vTotalJobChargeAmt = GetJobMtlChargeAmt(ttAPInvJob.Company, ttAPInvJob.JobNum, ttAPInvJob.AssemblySeq, ttAPInvJob.MtlSeq);
                vUnpostedJobChargeAmt = GetUnpostedJobChargeAmt(ttAPInvJob.Company, ttAPInvJob.JobNum, ttAPInvJob.AssemblySeq, ttAPInvJob.MtlSeq, ttAPInvJob.SysRowID);
                /* Total uninvoiced negative expenses - still in document currency. Need to convert to base currency */
                vUninvoicedExpenseAmt = GetUninvoicedExpenseAmt(ttAPInvJob.Company, ttAPInvJob.JobNum, ttAPInvJob.AssemblySeq, ttAPInvJob.MtlSeq, ttAPInvJob.CurrencyCode);
                if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement) &&
                    ExpCurrencyNotBase(Session.CompanyID, ttAPInvJob.CurrencyCode))
                {
                    if (String.IsNullOrEmpty(pCurrList))
                    {
                        LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPInvJob.VendorNum), ttAPInvJob.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                    }
                    vUninvoicedExpenseAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(vUninvoicedExpenseAmt, ttAPInvJob.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvJob", "ExtCost");
                }
                vTotalJobChargeAmt = vTotalJobChargeAmt + vUnpostedJobChargeAmt + +vUninvoicedExpenseAmt + ttAPInvJob.ExtCost;
                if (vTotalJobChargeAmt < 0)
                {
                    throw new BLException(Strings.TheDebitMemoExceedsTheJobCharge);
                }

                AltAPInvHed = FindFirstAPInvHed(ttAPInvJob.Company, ttAPInvJob.VendorNum, ttAPInvJob.InvoiceNum);
                if (AltAPInvHed != null)
                {
                    PostGroupID = AltAPInvHed.GroupID;

                    var AltAPInvJobQuery = DBExpressionCompiler.Compile(AltAPInvJobExpression);
                    foreach (var AltAPInvJob_iterator in (AltAPInvJobQuery(Db, ttAPInvJob.Company, ttAPInvJob.JobNum)))
                    {
                        var JoinFieldsResult = AltAPInvJob_iterator;
                        if (JoinFieldsResult.VendorNum == ttAPInvJob.VendorNum &&
                            StringExtensions.Compare(JoinFieldsResult.InvoiceNum, ttAPInvJob.InvoiceNum) == 0 &&
                            JoinFieldsResult.InvoiceLine == ttAPInvJob.InvoiceLine &&
                            JoinFieldsResult.AssemblySeq == ttAPInvJob.AssemblySeq &&
                            JoinFieldsResult.MtlSeq == ttAPInvJob.MtlSeq)
                        {
                            continue;
                        }

                        var APInvHedQuery31 = DBExpressionCompiler.Compile(APInvHedExpression31);
                        if ((APInvHedQuery31(Db, JoinFieldsResult.Company, JoinFieldsResult.VendorNum, JoinFieldsResult.InvoiceNum, true, PostGroupID)))
                        {
                            V_Cost = V_Cost + JoinFieldsResult.ExtCost;
                            /*At the moment that the Cost got below zero, throw the error.*/
                            if (V_Cost < 0)
                            {
                                throw new BLException(Strings.TheDebitMemoExceedsTheJobCosts);
                            }
                        }
                    }/*for each AltAPInvJob*/

                    /*Add the current cost*/
                    V_Cost = V_Cost + ttAPInvJob.ExtCost;
                    if (V_Cost < 0)
                    {
                        throw new BLException(Strings.TheDebitMemoExceedsTheJobCosts);
                    }
                }
            }/*ttAPInvJob.DebitMemo*/

            /* if a new JobMtl was added and the Est Unit Cost is zero, set it to the APInvJob amount */
            if (ttAPInvJob.AddedJobMtlSeq > 0 && ttAPInvJob.AddedJobMtlSeq == ttAPInvJob.MtlSeq && ttAPInvJob.ExtCost > 0)
            {


                var JobMtlQuery2 = DBExpressionCompiler.Compile(JobMtlExpression2);
                JobMtl = JobMtlQuery2(Db, Session.CompanyID, ttAPInvJob.JobNum, ttAPInvJob.AssemblySeq, ttAPInvJob.MtlSeq, 0);
                if (JobMtl != null)
                {
                    JobMtl.EstMtlUnitCost = ttAPInvJob.ExtCost;
                    JobMtl.EstUnitCost = JobMtl.EstMtlUnitCost;
                }
                Db.Validate(JobMtl);
            }

            if (BIttAPInvJob != null && (BIttAPInvJob.ExtCost != ttAPInvJob.ExtCost || BIttAPInvJob.ScrExtCost != ttAPInvJob.ScrExtCost))
            {
                OnChangeAPInvJob(ttAPInvJob.ExtCost, ttAPInvJob.ScrExtCost);
            }
        }

        #endregion

        #region APInvSched Table Methods
        partial void APInvSchedAfterGetRows()
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvSched.VendorNum, ttAPInvSched.InvoiceNum);
            if (APInvHed != null)
            {
                ttAPInvSched.GroupID = APInvHed.GroupID;
                ttAPInvSched.CurrencyCode = APInvHed.CurrencyCode;

                if (APInvHed.DebitMemo)
                {
                    ttAPInvSched.DocScrPayAmount = ttAPInvSched.DocPayAmount * -1;
                    ttAPInvSched.ScrPayAmount = ttAPInvSched.PayAmount * -1;
                    ttAPInvSched.Rpt1ScrPayAmount = ttAPInvSched.Rpt1PayAmount * -1;
                    ttAPInvSched.Rpt2ScrPayAmount = ttAPInvSched.Rpt2PayAmount * -1;
                    ttAPInvSched.Rpt3ScrPayAmount = ttAPInvSched.Rpt3PayAmount * -1;
                }
                else
                {
                    ttAPInvSched.DocScrPayAmount = ttAPInvSched.DocPayAmount;
                    ttAPInvSched.ScrPayAmount = ttAPInvSched.PayAmount;
                    ttAPInvSched.Rpt1ScrPayAmount = ttAPInvSched.Rpt1PayAmount;
                    ttAPInvSched.Rpt2ScrPayAmount = ttAPInvSched.Rpt2PayAmount;
                    ttAPInvSched.Rpt3ScrPayAmount = ttAPInvSched.Rpt3PayAmount;
                }
            }
        }

        partial void APInvSchedAfterUpdate()
        {
            refreshAPInvSched = false;
            APInvHed = FindFirstAPInvHed(ttAPInvSched.Company, ttAPInvSched.VendorNum, ttAPInvSched.InvoiceNum);
            refreshttAPInvHed();
            refreshAPInvSched = true;
        }

        partial void APInvSchedBeforeUpdate()
        {
            bool validateAmounts = false;

            var APInvHedRow = FindFirstAPInvHedForPaySched(ttAPInvSched.Company, ttAPInvSched.VendorNum, ttAPInvSched.InvoiceNum);
            if (APInvHedRow != null)
            {
                validateAmounts = APInvHedRow.DocInvoiceAmt != 0 ? true : false;

                using (Erp.Internal.Lib.PayTermsScheduleShared LibPayTermsScheduleShared = new Erp.Internal.Lib.PayTermsScheduleShared(Db))
                {
                    var PayTermsScheduleRow = new PayTermsScheduleShared.PayTermsSchedule();
                    BufferCopy.Copy(ttAPInvSched, PayTermsScheduleRow);
                    PayTermsScheduleRow.PayAmount = ttAPInvSched.ScrPayAmount;
                    PayTermsScheduleRow.DocPayAmount = ttAPInvSched.DocScrPayAmount;
                    PayTermsScheduleRow.Rpt1PayAmount = ttAPInvSched.Rpt1ScrPayAmount;
                    PayTermsScheduleRow.Rpt2PayAmount = ttAPInvSched.Rpt2ScrPayAmount;
                    PayTermsScheduleRow.Rpt3PayAmount = ttAPInvSched.Rpt3ScrPayAmount;
                    LibPayTermsScheduleShared.ValidateRow(PayTermsScheduleRow, validateAmounts);
                }

                if (APInvHedRow.DebitMemo)
                {
                    ttAPInvSched.DocPayAmount = ttAPInvSched.DocScrPayAmount * -1;
                    ttAPInvSched.PayAmount = ttAPInvSched.ScrPayAmount * -1;
                    ttAPInvSched.Rpt1PayAmount = ttAPInvSched.Rpt1ScrPayAmount * -1;
                    ttAPInvSched.Rpt2PayAmount = ttAPInvSched.Rpt2ScrPayAmount * -1;
                    ttAPInvSched.Rpt3PayAmount = ttAPInvSched.Rpt3ScrPayAmount * -1;
                }
                else
                {
                    ttAPInvSched.DocPayAmount = ttAPInvSched.DocScrPayAmount;
                    ttAPInvSched.PayAmount = ttAPInvSched.ScrPayAmount;
                    ttAPInvSched.Rpt1PayAmount = ttAPInvSched.Rpt1ScrPayAmount;
                    ttAPInvSched.Rpt2PayAmount = ttAPInvSched.Rpt2ScrPayAmount;
                    ttAPInvSched.Rpt3PayAmount = ttAPInvSched.Rpt3ScrPayAmount;
                }
            }
        }

        partial void APInvSchedBeforeDelete()
        {
            throw new BLException(Strings.CannotDeletePaymentSchedule);
        }
        #endregion APInvSched Table Methods

        #region APInvLnMscTax Table Methods
        partial void APInvLnMscTaxAfterGetRows()
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            if (APInvHed != null)
            {
                ttAPInvLnMscTax.CurrencyCode = APInvHed.CurrencyCode;
                ttAPInvLnMscTax.GroupID = APInvHed.GroupID;


                if (APInvHed.DebitMemo)
                {

                    ttAPInvLnMscTax.DocScrTaxableAmt = -ttAPInvLnMscTax.DocTaxableAmt;
                    ttAPInvLnMscTax.DocScrReportableAmt = -ttAPInvLnMscTax.DocReportableAmt;
                    ttAPInvLnMscTax.DocScrTaxAmt = -ttAPInvLnMscTax.DocTaxAmt;
                    ttAPInvLnMscTax.DocScrDedTaxAmt = -ttAPInvLnMscTax.DocDedTaxAmt;
                    ttAPInvLnMscTax.ScrTaxableAmt = -ttAPInvLnMscTax.TaxableAmt;
                    ttAPInvLnMscTax.Rpt1ScrTaxableAmt = -ttAPInvLnMscTax.Rpt1TaxableAmt;
                    ttAPInvLnMscTax.Rpt2ScrTaxableAmt = -ttAPInvLnMscTax.Rpt2TaxableAmt;
                    ttAPInvLnMscTax.Rpt3ScrTaxableAmt = -ttAPInvLnMscTax.Rpt3TaxableAmt;
                    ttAPInvLnMscTax.ScrReportableAmt = -ttAPInvLnMscTax.ReportableAmt;
                    ttAPInvLnMscTax.Rpt1ScrReportableAmt = -ttAPInvLnMscTax.Rpt1ReportableAmt;
                    ttAPInvLnMscTax.Rpt2ScrReportableAmt = -ttAPInvLnMscTax.Rpt2ReportableAmt;
                    ttAPInvLnMscTax.Rpt3ScrReportableAmt = -ttAPInvLnMscTax.Rpt3ReportableAmt;
                    ttAPInvLnMscTax.ScrTaxAmt = -ttAPInvLnMscTax.TaxAmt;
                    ttAPInvLnMscTax.Rpt1ScrTaxAmt = -ttAPInvLnMscTax.Rpt1TaxAmt;
                    ttAPInvLnMscTax.Rpt2ScrTaxAmt = -ttAPInvLnMscTax.Rpt2TaxAmt;
                    ttAPInvLnMscTax.Rpt3ScrTaxAmt = -ttAPInvLnMscTax.Rpt3TaxAmt;
                    ttAPInvLnMscTax.ScrDedTaxAmt = -ttAPInvLnMscTax.DedTaxAmt;
                    ttAPInvLnMscTax.Rpt1ScrDedTaxAmt = -ttAPInvLnMscTax.Rpt1DedTaxAmt;
                    ttAPInvLnMscTax.Rpt2ScrDedTaxAmt = -ttAPInvLnMscTax.Rpt2DedTaxAmt;
                    ttAPInvLnMscTax.Rpt3ScrDedTaxAmt = -ttAPInvLnMscTax.Rpt3DedTaxAmt;
                    ttAPInvLnMscTax.DocScrFixedAmount = -ttAPInvLnMscTax.DocFixedAmount;
                    ttAPInvLnMscTax.ScrFixedAmount = -ttAPInvLnMscTax.FixedAmount;
                    ttAPInvLnMscTax.Rpt1ScrFixedAmount = -ttAPInvLnMscTax.Rpt1FixedAmount;
                    ttAPInvLnMscTax.Rpt2ScrFixedAmount = -ttAPInvLnMscTax.Rpt2FixedAmount;
                    ttAPInvLnMscTax.Rpt3ScrFixedAmount = -ttAPInvLnMscTax.Rpt3FixedAmount;
                }
                else
                {

                    ttAPInvLnMscTax.DocScrTaxableAmt = ttAPInvLnMscTax.DocTaxableAmt;
                    ttAPInvLnMscTax.DocScrReportableAmt = ttAPInvLnMscTax.DocReportableAmt;
                    ttAPInvLnMscTax.DocScrTaxAmt = ttAPInvLnMscTax.DocTaxAmt;
                    ttAPInvLnMscTax.DocScrDedTaxAmt = ttAPInvLnMscTax.DocDedTaxAmt;
                    ttAPInvLnMscTax.ScrTaxableAmt = ttAPInvLnMscTax.TaxableAmt;
                    ttAPInvLnMscTax.Rpt1ScrTaxableAmt = ttAPInvLnMscTax.Rpt1TaxableAmt;
                    ttAPInvLnMscTax.Rpt2ScrTaxableAmt = ttAPInvLnMscTax.Rpt2TaxableAmt;
                    ttAPInvLnMscTax.Rpt3ScrTaxableAmt = ttAPInvLnMscTax.Rpt3TaxableAmt;
                    ttAPInvLnMscTax.ScrReportableAmt = ttAPInvLnMscTax.ReportableAmt;
                    ttAPInvLnMscTax.Rpt1ScrReportableAmt = ttAPInvLnMscTax.Rpt1ReportableAmt;
                    ttAPInvLnMscTax.Rpt2ScrReportableAmt = ttAPInvLnMscTax.Rpt2ReportableAmt;
                    ttAPInvLnMscTax.Rpt3ScrReportableAmt = ttAPInvLnMscTax.Rpt3ReportableAmt;
                    ttAPInvLnMscTax.ScrTaxAmt = ttAPInvLnMscTax.TaxAmt;
                    ttAPInvLnMscTax.Rpt1ScrTaxAmt = ttAPInvLnMscTax.Rpt1TaxAmt;
                    ttAPInvLnMscTax.Rpt2ScrTaxAmt = ttAPInvLnMscTax.Rpt2TaxAmt;
                    ttAPInvLnMscTax.Rpt3ScrTaxAmt = ttAPInvLnMscTax.Rpt3TaxAmt;
                    ttAPInvLnMscTax.ScrDedTaxAmt = ttAPInvLnMscTax.DedTaxAmt;
                    ttAPInvLnMscTax.Rpt1ScrDedTaxAmt = ttAPInvLnMscTax.Rpt1DedTaxAmt;
                    ttAPInvLnMscTax.Rpt2ScrDedTaxAmt = ttAPInvLnMscTax.Rpt2DedTaxAmt;
                    ttAPInvLnMscTax.Rpt3ScrDedTaxAmt = ttAPInvLnMscTax.Rpt3DedTaxAmt;
                    ttAPInvLnMscTax.DocScrFixedAmount = ttAPInvLnMscTax.DocFixedAmount;
                    ttAPInvLnMscTax.ScrFixedAmount = ttAPInvLnMscTax.FixedAmount;
                    ttAPInvLnMscTax.Rpt1ScrFixedAmount = ttAPInvLnMscTax.Rpt1FixedAmount;
                    ttAPInvLnMscTax.Rpt2ScrFixedAmount = ttAPInvLnMscTax.Rpt2FixedAmount;
                    ttAPInvLnMscTax.Rpt3ScrFixedAmount = ttAPInvLnMscTax.Rpt3FixedAmount;
                }

            }

            var BufAPInvMscQuery = DBExpressionCompiler.Compile(BufAPInvMscExpression);
            APInvMsc = BufAPInvMscQuery(Db, Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum);
            if (APInvMsc != null)
            {
                ttAPInvLnMscTax.MiscCode = APInvMsc.MiscCode;
                ttAPInvLnMscTax.DisableManual = APInvMsc.NoTaxRecalc;
            }

            switch (ttAPInvLnMscTax.CollectionType)
            {
                case 0:
                    {
                        ttAPInvLnMscTax.DescCollectionType = Strings.InvoiceCollection;
                    }
                    break;
                case 1:
                    {
                        ttAPInvLnMscTax.DescCollectionType = Strings.Withholding;
                    }
                    break;
                case 2:
                    {
                        ttAPInvLnMscTax.DescCollectionType = Strings.SelfAssessment;
                    }
                    break;
                case 3:
                    {
                        ttAPInvLnMscTax.DescCollectionType = Strings.SelfAssessmentDual;
                    }
                    break;
            }


        }
        #endregion

        #region APInvMsc table Methods

        partial void APInvMscAfterDelete()
        {
            ApInvDtlChildDeleted(true);
            if (APInvHed != null)
            {
                UpdateHeaderDiscounts(ref APInvHed);

                if ((APInvHed.ReadyToCalc && ReCalcTaxes))
                {
                    APInvoiceTableset ds = CurrentFullTableset;
                    SetReadyToCalc("", APInvHed.InvoiceNum, APInvHed.VendorNum, false, false, ref ds);
                    CurrentFullTableset = ds;
                }
                var APInvDtlQuery4 = DBExpressionCompiler.Compile(APInvDtlExpression4);
                APInvDtl = APInvDtlQuery4(Db, rSaveAPInvDtlRowid);

                if (APInvDtl != null && (!APInvDtl.LineType.Equals("U", StringComparison.OrdinalIgnoreCase) || !APInvDtl.LineType.Equals("R", StringComparison.OrdinalIgnoreCase)))
                {
                    generateNonDeducExpenses(APInvHed.VendorNum, APInvHed.InvoiceNum, miscInvLine);
                }
            }
        }

        partial void APInvMscAfterGetNew()
        {
            APInvMscAfterGetRows();
        }

        partial void APInvMscAfterGetRows()
        {
            string currid = string.Empty;

            var outDebitMemo6 = ttAPInvMsc.DebitMemo;
            var outPosted6 = ttAPInvMsc.Posted;
            var outGroupID6 = ttAPInvMsc.GroupID;
            getAPInvHedAttributes(ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, out outDebitMemo6, out outPosted6, out outGroupID6);
            ttAPInvMsc.DebitMemo = outDebitMemo6;
            ttAPInvMsc.Posted = outPosted6;
            ttAPInvMsc.GroupID = outGroupID6;

            ttAPInvMsc.InPrice = APInvHed.InPrice;

            if (ttAPInvMsc.InPrice == false)
            {
                if (ttAPInvMsc.DebitMemo == true)
                {
                    ttAPInvMsc.ScrMiscAmt = -ttAPInvMsc.MiscAmt;
                    ttAPInvMsc.ScrDocMiscAmt = -ttAPInvMsc.DocMiscAmt;
                }
                else
                {
                    ttAPInvMsc.ScrMiscAmt = ttAPInvMsc.MiscAmt;
                    ttAPInvMsc.ScrDocMiscAmt = ttAPInvMsc.DocMiscAmt;
                }
            }
            else
            {
                if (ttAPInvMsc.DebitMemo == true)
                {
                    ttAPInvMsc.ScrMiscAmt = -ttAPInvMsc.InMiscAmt;
                    ttAPInvMsc.ScrDocMiscAmt = -ttAPInvMsc.DocInMiscAmt;
                }
                else
                {
                    ttAPInvMsc.ScrMiscAmt = ttAPInvMsc.InMiscAmt;
                    ttAPInvMsc.ScrDocMiscAmt = ttAPInvMsc.DocInMiscAmt;
                }

            }

            AssignAPInvMscExtAmtFields();

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvMsc.Company, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum);
            if (String.IsNullOrEmpty(pCurrList))
            {
                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
            }
            if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                string fieldScrMiscAmt = string.Empty;
                for (i = 2; i <= 4; i++)
                {
                    if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                    {
                        fieldScrMiscAmt = "Rpt" + (i - 1).ToString() + "ScrMiscAmt";
                        ttAPInvMsc[fieldScrMiscAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvMsc.ScrDocMiscAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvMsc", "ScrMiscAmt");
                    }
                }
            }

            /* Set Currency fields */
            ttAPInvMsc.CurrencyCode = APInvHed.CurrencyCode;
            ttAPInvMsc.BaseCurrSymbol = getBaseCurrSymbol();
            var outCurrSymbol4 = ttAPInvMsc.CurrSymbol;
            var outCurrencySwitch4 = ttAPInvMsc.CurrencySwitch;
            getCurrencyInfo(APInvHed.CurrencyCode, out outCurrSymbol4, out outCurrencySwitch4, out currid);
            ttAPInvMsc.CurrSymbol = outCurrSymbol4;
            ttAPInvMsc.CurrencySwitch = outCurrencySwitch4;
            ttAPInvMsc.RecordSource = ((ttAPInvMsc.PONum > 0) ? ((ttAPInvMsc.POLine > 0) ? Strings.POLine : Strings.POHeader) : Strings.Manual);
            /* SCR #55657 - Do not allow LCFlag to be changed if misc charge is already linked */
            if (ttAPInvMsc.ContainerID != 0 || !String.IsNullOrEmpty(ttAPInvMsc.PackSlip))
            {
                ttAPInvMsc.LCEnabled = false;
            }
            else
            {
                ttAPInvMsc.LCEnabled = true;
            }

            string foreignKey = string.Empty;
            foreignKey = Compatibility.Convert.ToString(ttAPInvMsc.VendorNum) + "~" + Compatibility.Convert.ToString(ttAPInvMsc.InvoiceNum) + "~" + Compatibility.Convert.ToString(ttAPInvMsc.InvoiceLine) + "~" + Compatibility.Convert.ToString(ttAPInvMsc.MscNum);
        }

        partial void APInvMscAfterUpdate()
        {
            int saveVendorNum = 0;
            string saveInvoiceNum = string.Empty;
            int saveInvoiceLine = 0;
            int saveMscNum = 0;

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, APInvMsc.Company, APInvMsc.VendorNum, APInvMsc.InvoiceNum, APInvMsc.InvoiceLine);
            if (APInvDtl != null)
            {
                if (StringExtensions.Compare(APInvDtl.LineType, "J") != 0)
                {
                    bool updateExtSourceExists = false;

                    if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt_sourceTs"))
                    {
                        Erp.Tablesets.UpdExtAPInvoiceTableset ds = (UpdExtAPInvoiceTableset)Erp.Internal.Lib.ErpCallContext.GetValue("UpdateExt_sourceTs");
                        var sourceAPInvExpRow = (from sourceAPInvExp_Row in ds.APInvExp
                                                 where sourceAPInvExp_Row.Company.KeyEquals(APInvMsc.Company) &&
                                             sourceAPInvExp_Row.VendorNum == APInvMsc.VendorNum &&
                                             sourceAPInvExp_Row.InvoiceNum.KeyEquals(APInvMsc.InvoiceNum) &&
                                             sourceAPInvExp_Row.InvoiceLine == APInvMsc.InvoiceLine
                                                 select sourceAPInvExp_Row).FirstOrDefault();

                        if (sourceAPInvExpRow != null)
                        {
                            updateExtSourceExists = true;
                        }
                    }

                    if (!Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") || (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") && !updateExtSourceExists))
                    {
                        APSyncAPInvExp.RunSyncAPInvExp("APInvDtl", APInvDtl.SysRowID, Guid.Empty, APInvMsc.SysRowID, Guid.Empty, lGetAcctForUnrcvd, "", dOldMiscAmt, "MiscCharge", string.Empty, out lAPInvExpUpdated);
                    }
                }
            }

            Db.ReadCurrent(ref APInvMsc);
            /* Refresh tt values */
            BufferCopy.Copy(APInvMsc, ref ttAPInvMsc);
            /* Call TaxEngine Procedure*/
            if ((APInvHed.ReadyToCalc && ReCalcTaxes))
            {
                APInvHed = FindFirstAPInvHedWithUpdLock(APInvMsc.Company, APInvMsc.VendorNum, APInvMsc.InvoiceNum);
                if (HaveAPTaxToLineLevel(Session.CompanyID))
                {
                    ErpCallContext.Add("NonRecTax-APInvMsc");
                    ErpCallContext.SetDisposableKeyValue(new KeyValuePair<string, object>("NonRecTax-APInvMsc", APInvDtl.SysRowID + Ice.Constants.LIST_DELIM + APInvMsc.SysRowID));
                }
                else
                {
                    ErpCallContext.Add("NonRecTax-Massive");
                    ErpCallContext.SetDisposableKeyValue(new KeyValuePair<string, object>("NonRecTax-Massive", APInvHed.SysRowID));
                }
                saveVendorNum = APInvMsc.VendorNum;
                saveInvoiceNum = APInvMsc.InvoiceNum;
                saveInvoiceLine = APInvMsc.InvoiceLine;
                saveMscNum = APInvMsc.MscNum;
                APInvoiceTableset ds = CurrentFullTableset;
                SetReadyToCalc("", APInvMsc.InvoiceNum, APInvMsc.VendorNum, false, false, ref ds);
                CurrentFullTableset = ds;


                var APInvMscQuery2 = DBExpressionCompiler.Compile(APInvMscExpression2);
                APInvMsc = APInvMscQuery2(Db, Session.CompanyID, saveVendorNum, saveInvoiceNum, saveInvoiceLine, saveMscNum);
            }

            /* This only needs to be done for SQL.  calcaptax.i is in the APInvHed
                write trigger code, but since the APInvMsc trigger code updates the
                APInvHed record, the APInvMsc record used in calcaptax.i is not yet
                available because the record hasn't been committed to the db yet. */
            Guid rCurrentAPInvMscRowid = Guid.Empty;
            rCurrentAPInvMscRowid = APInvMsc.SysRowID;
            Db.DisableTriggers(APInvHed.GetTableName(), TriggerType.Write);
            APInvHed = FindFirstAPInvHedWithUpdLock(APInvMsc.Company, APInvMsc.VendorNum, APInvMsc.InvoiceNum);
            APInvHed.TaxAmt = 0;
            APInvHed.DocTaxAmt = 0;
            APInvHed.Rpt1TaxAmt = 0;
            APInvHed.Rpt2TaxAmt = 0;
            APInvHed.Rpt3TaxAmt = 0;
            APInvHed.WithholdAmt = 0;
            APInvHed.DocWithholdAmt = 0;
            APInvHed.Rpt1WithholdAmt = 0;
            APInvHed.Rpt2WithholdAmt = 0;
            APInvHed.Rpt3WithholdAmt = 0;

            var APInvTaxQuery = DBExpressionCompiler.Compile(APInvTaxExpression);
            foreach (var APInvTax_iterator in (APInvTaxQuery(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
            {
                APInvTax = APInvTax_iterator;

                if (APInvTax.CollectionType != 1)
                {
                    APInvHed.TaxAmt = APInvHed.TaxAmt + APInvTax.TaxAmt + APInvTax.TaxAmtVar;
                    APInvHed.DocTaxAmt = APInvHed.DocTaxAmt + APInvTax.DocTaxAmt + APInvTax.DocTaxAmtVar;
                }
                else
                {
                    APInvHed.WithholdAmt = APInvHed.WithholdAmt + APInvTax.TaxAmt + APInvTax.TaxAmtVar;
                    APInvHed.DocWithholdAmt = APInvHed.DocWithholdAmt + APInvTax.DocTaxAmt + APInvTax.DocTaxAmtVar;
                    APInvHed.Rpt1WithholdAmt = APInvHed.Rpt1WithholdAmt + APInvTax.Rpt1TaxAmt + APInvTax.Rpt1TaxAmtVar;
                    APInvHed.Rpt2WithholdAmt = APInvHed.Rpt2WithholdAmt + APInvTax.Rpt2TaxAmt + APInvTax.Rpt2TaxAmtVar;
                    APInvHed.Rpt3WithholdAmt = APInvHed.Rpt3WithholdAmt + APInvTax.Rpt3TaxAmt + APInvTax.Rpt3TaxAmtVar;
                }
            }

            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
            LibRptfieldscalc.ConvertAmtUsingLinqRow(APInvHed, false, "TaxAmt", pCurrList, "APInvHed", APInvHed.CurrencyCode, ttChainRows);
            // this must happen here otherwise when the FW commits the changes to the DB the triggers will run at the end of the transaction.  This causes
            // the tableset to NOT have the most current version of the APInvhed and the user will get the 'row has been modified' exception

            UpdateHeaderDiscounts(ref APInvHed);


            Db.Validate(APInvHed);
            Db.EnableTriggers(APInvHed.GetTableName(), TriggerType.Write);

            var APInvMscQuery4 = DBExpressionCompiler.Compile(APInvMscExpression4);
            APInvMsc = APInvMscQuery4(Db, rCurrentAPInvMscRowid);

            /* Refind APInvDtl */
            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, APInvMsc.Company, APInvMsc.VendorNum, APInvMsc.InvoiceNum, APInvMsc.InvoiceLine);
            if (APInvDtl != null)
            {
                refreshttAPInvDtl();
                if (lAPInvExpUpdated == true)
                {


                    foreach (var APInvExp_iterator in (SelectAPInvExp(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine)))
                    {
                        APInvExp = APInvExp_iterator;
                        refreshttAPInvExp();
                    }
                    RefreshAfterSyncAPInvExp();
                }
            }/* if available APInvDtl */


            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, APInvMsc.Company, APInvMsc.VendorNum, APInvMsc.InvoiceNum);
            if (APInvHed != null)
            {
                refreshttAPInvHed();        /* Refresh tax records */


                var APInvTaxQuery7 = DBExpressionCompiler.Compile(APInvTaxExpression7);
                foreach (var APInvTax_iterator in (APInvTaxQuery7(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                {
                    APInvTax = APInvTax_iterator;
                    refreshttAPInvTax();
                }/* for each APInvTax */

                if (isPeruLocalization == true)
                {
                    refreshttPEAPInvTax(APInvHed.VendorNum, APInvHed.InvoiceNum, APInvHed.GroupID);
                }
            }
        }

        partial void APInvMscBeforeCreate()
        {
            Erp.Tables.APInvMsc bAPInvMsc = null;
            int NextSeqNum = 1;
            /* Get next sequence number */
            bAPInvMsc = FindLastAPInvMsc(ttAPInvMsc.Company, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, ttAPInvMsc.InvoiceLine);
            if (bAPInvMsc != null)
            {
                NextSeqNum = bAPInvMsc.MscNum + 1;
            }
            ttAPInvMsc.MscNum = NextSeqNum;
        }

        partial void APInvMscBeforeDelete()
        {
            if (ttAPInvMsc.ContainerID != 0 || !String.IsNullOrEmpty(ttAPInvMsc.PackSlip))
            {
                throw new BLException(Strings.APInvoiceMisceChargeIsLinkedToAContaShipmOrAReceipt, "APInvMsc");
            }

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPInvMsc.Company, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, ttAPInvMsc.InvoiceLine);
            if (APInvDtl != null)
            {
                rSaveAPInvDtlRowid = APInvDtl.SysRowID;
            }

            ReCalcTaxes = true;
            miscInvLine = ttAPInvMsc.InvoiceLine;

        }

        partial void APInvMscBeforeUpdate()
        {
            if (canUpdateInvoice(ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum).canUpdateInvoice == false)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvMsc");
            }
            /* SCR #55657 - Verifies if a Miscellaneous Charge can be marked as Landed Cost. */


            var PurMiscQuery2 = DBExpressionCompiler.Compile(PurMiscExpression2);
            if ((ttAPInvMsc.LCFlag == true) &&
                !(PurMiscQuery2(Db, Session.CompanyID, ttAPInvMsc.MiscCode, true)))
            {
                throw new BLException(Strings.MisceChargeCannotBeMarkedAsLandedCost, "APInvMsc", "LCFlag");
            }
            else if ((ttAPInvMsc.LCFlag == false) &&
               (ttAPInvMsc.ContainerID != 0 || !String.IsNullOrEmpty(ttAPInvMsc.PackSlip)))
            {
                throw new BLException(Strings.APInvoiceMisceChargeIsLinkedAndMustStayMarkedAs, "APInvMsc", "LCFlag");
            }

            validateMiscChrg(ttAPInvMsc.MiscCode, ttAPInvMsc.CurrencySwitch, ttAPInvMsc.ScrMiscAmt, ttAPInvMsc.ScrDocMiscAmt, "APInvMsc");

            if (!ExistsPurMisc(Session.CompanyID, ttAPInvMsc.MiscCode, false))
            {
                ExceptionManager.AddBLException(Strings.MiscChargeInactive(ttAPInvMsc.Description));
            }

            ExceptionManager.AssertNoBLExceptions();

            if (ExceptionManager.Exceptions.Count == 0)
            {
                if (StringExtensions.Compare(ttAPInvMsc.RowMod, IceRow.ROWSTATE_ADDED) == 0)
                {
                    dOldMiscAmt = 0;
                }
                else
                {
                    dOldMiscAmt = ttAPInvMsc.DocMiscAmt;
                }

                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvMsc.Company, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum);
                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                if (!APInvHed.CancellationInv)
                {
                    if (ttAPInvMsc.DebitMemo == false)
                    {
                        ttAPInvMsc.MiscAmt = ttAPInvMsc.ScrMiscAmt;
                        ttAPInvMsc.DocMiscAmt = ttAPInvMsc.ScrDocMiscAmt;
                    }
                    else
                    {
                        ttAPInvMsc.MiscAmt = -ttAPInvMsc.ScrMiscAmt;
                        ttAPInvMsc.DocMiscAmt = -ttAPInvMsc.ScrDocMiscAmt;
                    }
                }

                this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvMsc, false, "MiscAmt", pCurrList, "ttAPInvMsc", APInvHed.CurrencyCode, ttChainRows);
            }

            ReCalcTaxes = true;

            SaveBeforeSyncAPInvExp();

        }

        #endregion

        #region APInvPB Table Methods

        partial void APInvPBAfterGetNew()
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvPB.VendorNum, ttAPInvPB.InvoiceNum);
            if (APInvHed != null)
            {
                ttAPInvPB.GroupID = APInvHed.GroupID;
            }
        }

        partial void APInvPBAfterGetRows()
        {
            string currid = string.Empty;
            string vCurrSymbol = string.Empty;

            var outDebitMemo7 = ttAPInvPB.DebitMemo;
            var outGroupID7 = ttAPInvPB.GroupID;
            getAPInvHedAttributes(ttAPInvPB.VendorNum, ttAPInvPB.InvoiceNum, out outDebitMemo7, out bool vPosted, out outGroupID7);
            ttAPInvPB.DebitMemo = outDebitMemo7;
            ttAPInvPB.GroupID = outGroupID7;
            /* Set Currency fields */
            ttAPInvPB.CurrencyCode = APInvHed.CurrencyCode;
            var outCurrencySwitch5 = ttAPInvPB.CurrencySwitch;

            getCurrencyInfo(APInvHed.CurrencyCode, out vCurrSymbol, out outCurrencySwitch5, out currid);

            ttAPInvPB.CurrencySwitch = outCurrencySwitch5;

            if (ttAPInvPB.DebitMemo == true)
            {
                ttAPInvPB.ScrMtlChg = -ttAPInvPB.MtlChg;
                ttAPInvPB.ScrDocMtlChg = -ttAPInvPB.DocMtlChg;
                ttAPInvPB.ScrInvDtlValue = -ttAPInvPB.InvDtlValue;
                ttAPInvPB.ScrDocInvDtlValue = -ttAPInvPB.DocInvDtlValue;
                ttAPInvPB.Rpt1ScrInvDtlValue = -ttAPInvPB.Rpt1InvDtlValue;
                ttAPInvPB.Rpt2ScrInvDtlValue = -ttAPInvPB.Rpt2InvDtlValue;
                ttAPInvPB.Rpt3ScrInvDtlValue = -ttAPInvPB.Rpt3InvDtlValue;
                ttAPInvPB.Rpt1ScrMtlChg = -ttAPInvPB.Rpt1MtlChg;
                ttAPInvPB.Rpt2ScrMtlChg = -ttAPInvPB.Rpt2MtlChg;
                ttAPInvPB.Rpt3ScrMtlChg = -ttAPInvPB.Rpt3MtlChg;
            }
            else
            {
                ttAPInvPB.ScrMtlChg = ttAPInvPB.MtlChg;
                ttAPInvPB.ScrDocMtlChg = ttAPInvPB.DocMtlChg;
                ttAPInvPB.ScrInvDtlValue = ttAPInvPB.InvDtlValue;
                ttAPInvPB.ScrDocInvDtlValue = ttAPInvPB.DocInvDtlValue;
                ttAPInvPB.Rpt1ScrInvDtlValue = ttAPInvPB.Rpt1InvDtlValue;
                ttAPInvPB.Rpt2ScrInvDtlValue = ttAPInvPB.Rpt2InvDtlValue;
                ttAPInvPB.Rpt3ScrInvDtlValue = ttAPInvPB.Rpt3InvDtlValue;
                ttAPInvPB.Rpt1ScrMtlChg = ttAPInvPB.Rpt1MtlChg;
                ttAPInvPB.Rpt2ScrMtlChg = ttAPInvPB.Rpt2MtlChg;
                ttAPInvPB.Rpt3ScrMtlChg = ttAPInvPB.Rpt3MtlChg;
            }
            Erp.Tables.APInvPB AltAPInvPB = null;

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvPB.VendorNum, ttAPInvPB.InvoiceNum, ttAPInvPB.InvoiceLine);
            if (APInvDtl != null)
            {
                ttAPInvDtl = new Erp.Tablesets.APInvDtlRow();
                CurrentFullTableset.APInvDtl.Add(ttAPInvDtl);
                BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
                ttAPInvDtl.SysRowID = APInvDtl.SysRowID;


                var AltAPInvPBQuery = DBExpressionCompiler.Compile(AltAPInvPBExpression);
                foreach (var AltAPInvPB_iterator in (AltAPInvPBQuery(Db, Session.CompanyID, ttAPInvPB.VendorNum, ttAPInvPB.InvoiceNum, ttAPInvPB.InvoiceLine)))
                {
                    AltAPInvPB = AltAPInvPB_iterator;
                    ttAPInvDtl.TotDistribAmt = ttAPInvDtl.TotDistribAmt + AltAPInvPB.InvDtlValue;
                    ttAPInvDtl.DocTotDistribAmt = ttAPInvDtl.DocTotDistribAmt + AltAPInvPB.DocInvDtlValue;
                }
                APInvDtlAfterGetRows();
                APInvDtl_Foreign_Link();
            }
        }

        partial void APInvPBAfterUpdate()
        {
            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, APInvPB.VendorNum, APInvPB.InvoiceNum, APInvPB.InvoiceLine);
            if (APInvDtl != null)
            {
                ttAPInvDtl = new Erp.Tablesets.APInvDtlRow();
                CurrentFullTableset.APInvDtl.Add(ttAPInvDtl);
                BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
                ttAPInvDtl.SysRowID = APInvDtl.SysRowID;
                ttAPInvDtl.TotDistribAmt = ttAPInvDtl.TotDistribAmt + APInvPB.InvDtlValue;
                ttAPInvDtl.DocTotDistribAmt = ttAPInvDtl.DocTotDistribAmt + APInvPB.DocInvDtlValue;
            }
        }

        partial void APInvPBBeforeDelete()
        {
            Erp.Tables.APInvPB AltAPInvPB = null;

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, APInvPB.VendorNum, APInvPB.InvoiceNum, APInvPB.InvoiceLine);
            if (APInvDtl != null)
            {
                ttAPInvDtl = new Erp.Tablesets.APInvDtlRow();
                CurrentFullTableset.APInvDtl.Add(ttAPInvDtl);
                BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
                ttAPInvDtl.SysRowID = APInvDtl.SysRowID;


                var AltAPInvPBQuery2 = DBExpressionCompiler.Compile(AltAPInvPBExpression2);
                foreach (var AltAPInvPB_iterator in (AltAPInvPBQuery2(Db, Session.CompanyID, APInvPB.VendorNum, APInvPB.InvoiceNum, APInvPB.InvoiceLine, APInvPB.SysRowID)))
                {
                    AltAPInvPB = AltAPInvPB_iterator;
                    ttAPInvDtl.TotDistribAmt = ttAPInvDtl.TotDistribAmt + AltAPInvPB.InvDtlValue;
                    ttAPInvDtl.DocTotDistribAmt = ttAPInvDtl.DocTotDistribAmt + AltAPInvPB.DocInvDtlValue;
                }

                APInvDtlAfterGetRows();
                APInvDtl_Foreign_Link();
            }
        }

        partial void APInvPBBeforeUpdate()
        {
            Erp.Tables.APInvPB altAPInvPB = null;


            var RoleCdQuery = DBExpressionCompiler.Compile(RoleCdExpression);
            RoleCd = RoleCdQuery(Db, Session.CompanyID, ttAPInvPB.RoleCd, false);
            if (RoleCd == null)
            {
                throw new BLException(Strings.InvalidRoleCode, "APInvPB", "RoleCd");
            }

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvPB.VendorNum, ttAPInvPB.InvoiceNum, ttAPInvPB.InvoiceLine);
            if (APInvDtl != null)
            {
                ttAPInvDtl = new Erp.Tablesets.APInvDtlRow();
                CurrentFullTableset.APInvDtl.Add(ttAPInvDtl);
                BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
                ttAPInvDtl.SysRowID = APInvDtl.SysRowID;
                APInvDtlAfterGetRows();
                APInvDtl_Foreign_Link();
            }

            if (BIttAPInvPB != null)
            {
                if (StringExtensions.Compare(BIttAPInvPB.RoleCd, ttAPInvPB.RoleCd) != 0)
                {


                    PORel = FindFirstPORel(Session.CompanyID, APInvDtl.PONum, APInvDtl.POLine, APInvDtl.PORelNum);
                    if (PORel == null)
                    {
                        throw new BLException(Strings.POReleaseNotAvailable, "PORel", "PORelNum");
                    }

                    JobOper = JobOper.FindFirstByPrimaryKey(Db, Session.CompanyID, PORel.JobNum, PORel.AssemblySeq, PORel.JobSeq);
                    if (JobOper == null)
                    {
                        throw new BLException(Strings.JobOperationNotAvailable, "JobOper", "OperSeq");
                    }
                    if (StringExtensions.Lookup(JobOper.PrjRoleList, ttAPInvPB.RoleCd, Compatibility.Convert.ToChar(Ice.Constants.LIST_DELIM)) == -1)
                    {
                        throw new BLException(Strings.InvalidProjectRoleCodeNotInOperaRoleList, "APInvPB", "RoleCd");
                    }
                }
            }

            if (ttAPInvPB.DebitMemo == false)
            {
                ttAPInvPB.MtlChg = ttAPInvPB.ScrMtlChg;
                ttAPInvPB.DocMtlChg = ttAPInvPB.ScrDocMtlChg;
                ttAPInvPB.InvDtlValue = ttAPInvPB.ScrInvDtlValue;
                ttAPInvPB.DocInvDtlValue = ttAPInvPB.ScrDocInvDtlValue;
                ttAPInvPB.Rpt1InvDtlValue = ttAPInvPB.Rpt1ScrInvDtlValue;
                ttAPInvPB.Rpt2InvDtlValue = ttAPInvPB.Rpt2ScrInvDtlValue;
                ttAPInvPB.Rpt3InvDtlValue = ttAPInvPB.Rpt3ScrInvDtlValue;
                ttAPInvPB.Rpt1MtlChg = ttAPInvPB.Rpt1ScrMtlChg;
                ttAPInvPB.Rpt2MtlChg = ttAPInvPB.Rpt2ScrMtlChg;
                ttAPInvPB.Rpt3MtlChg = ttAPInvPB.Rpt3ScrMtlChg;
            }
            else
            {
                ttAPInvPB.MtlChg = -ttAPInvPB.ScrMtlChg;
                ttAPInvPB.DocMtlChg = -ttAPInvPB.ScrDocMtlChg;
                ttAPInvPB.InvDtlValue = -ttAPInvPB.ScrInvDtlValue;
                ttAPInvPB.DocInvDtlValue = -ttAPInvPB.ScrDocInvDtlValue;
                ttAPInvPB.Rpt1InvDtlValue = -ttAPInvPB.Rpt1ScrInvDtlValue;
                ttAPInvPB.Rpt2InvDtlValue = -ttAPInvPB.Rpt2ScrInvDtlValue;
                ttAPInvPB.Rpt3InvDtlValue = -ttAPInvPB.Rpt3ScrInvDtlValue;
                ttAPInvPB.Rpt1MtlChg = -ttAPInvPB.Rpt1ScrMtlChg;
                ttAPInvPB.Rpt2MtlChg = -ttAPInvPB.Rpt2ScrMtlChg;
                ttAPInvPB.Rpt3MtlChg = -ttAPInvPB.Rpt3ScrMtlChg;
            }

            decimal sumInvVal = decimal.Zero;
            if (ttAPInvDtl != null)
            {


                var AltAPInvPBQuery3 = DBExpressionCompiler.Compile(AltAPInvPBExpression3);
                foreach (var altAPInvPB_iterator in (AltAPInvPBQuery3(Db, Session.CompanyID, ttAPInvPB.VendorNum, ttAPInvPB.InvoiceNum, ttAPInvPB.InvoiceLine, ttAPInvPB.SysRowID)))
                {
                    altAPInvPB = altAPInvPB_iterator;
                    sumInvVal = sumInvVal + altAPInvPB.InvDtlValue;
                }
                sumInvVal = sumInvVal + ttAPInvPB.InvDtlValue;
                if (sumInvVal > ttAPInvDtl.LineSubtotal)
                {
                    throw new BLException(Strings.SumOfInvoiceValueCannotBeGreaterThanLineSubTotal, "APInvPB", "InvDtlValue");
                }
            }
            if (BIttAPInvPB != null &&
                (BIttAPInvPB.InvDtlValue != ttAPInvPB.InvDtlValue ||
                BIttAPInvPB.MtlChg != ttAPInvPB.MtlChg ||
                BIttAPInvPB.ScrInvDtlValue != ttAPInvPB.ScrInvDtlValue ||
                BIttAPInvPB.ScrMtlChg != ttAPInvPB.ScrMtlChg))
            {
                OnChangeAPInvPB(ttAPInvPB.InvDtlValue, ttAPInvPB.MtlChg, ttAPInvPB.ScrInvDtlValue, ttAPInvPB.ScrMtlChg);
            }
        }

        #endregion

        #region APInvTax Table Methods

        partial void APInvTaxAfterDelete()
        {
            updRevChargeLine("DELETE");
            ApInvHedChildDeleted();
            ttAPInvTax = (from tax in CurrentFullTableset.APInvTax
                          where tax.RowMod.Equals("D", StringComparison.OrdinalIgnoreCase)
                          select tax).FirstOrDefault();

            foreach (APInvExp APInvExp_iterator in SelectAPInvExpTax(ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum, "APInvTax", ttAPInvTax.SysRowID))
            {
                Db.APInvExp.Delete(APInvExp_iterator);
                Db.Validate(APInvExp_iterator);
                ttAPInvExp = new APInvExpRow();
                CurrentFullTableset.APInvExp.Add(ttAPInvExp);
                BufferCopy.Copy(APInvExp_iterator, ttAPInvExp);
                ttAPInvExp.RowMod = "D";
            }
        }

        partial void APInvTaxAfterGetNew()
        {
            ttAPInvTax.ManAdd = true;
            APInvTaxAfterGetRows();
            APInvTax_Foreign_Link();
        }

        partial void APInvTaxAfterGetRows()
        {
            string currid = string.Empty;

            var outDebitMemo8 = ttAPInvTax.DebitMemo;
            var outPosted7 = ttAPInvTax.Posted;
            var outGroupID8 = ttAPInvTax.GroupID;

            getAPInvHedAttributes(ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum, out outDebitMemo8, out outPosted7, out outGroupID8);
            ttAPInvTax.DebitMemo = outDebitMemo8;
            ttAPInvTax.Posted = outPosted7;
            ttAPInvTax.GroupID = outGroupID8;

            switch (ttAPInvTax.CollectionType)
            {
                case 0:
                    {
                        ttAPInvTax.DescCollectionType = "Invoice";
                    }
                    break;
                case 1:
                    {
                        ttAPInvTax.DescCollectionType = "WithHolding";
                    }
                    break;
                case 2:
                    {
                        ttAPInvTax.DescCollectionType = "Self-Assessment";
                    }
                    break;
                case 3:
                    {
                        ttAPInvTax.DescCollectionType = "Self-AssessmentDual";
                    }
                    break;
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            if (APInvHed != null)
            {
                if (APInvHed.TaxRateDate != null)
                {
                    vEffectiveFrom = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vEffectiveFrom = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vEffectiveFrom = APInvHed.InvoiceDate;
                }
            }



            TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, vEffectiveFrom.Value);
            if (TaxRate != null)
            {
                if (TaxRate.RateType == 0)
                {
                    ttAPInvTax.EnableSuperGRate = true;
                }

                if (TaxRate.RateType == 1)
                {
                    ttAPInvTax.EnableSuperGRate = false;
                }

                if (TaxRate.RateType == 2)
                {


                    var TaxGRateQuery = DBExpressionCompiler.Compile(TaxGRateExpression);
                    TaxGRate = TaxGRateQuery(Db, Session.CompanyID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, vEffectiveFrom.Value, ttAPInvTax.TaxableAmt);
                    if (TaxGRate != null)
                    {
                        if (TaxGRate.TaxPercent > 0)
                        {
                            ttAPInvTax.EnableSuperGRate = true;
                        }
                        else if (TaxGRate.TaxAmount > 0)
                        {
                            ttAPInvTax.EnableSuperGRate = false;
                        }
                    }
                }
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            /* Set Currency fields */
            ttAPInvTax.CurrencyCode = APInvHed.CurrencyCode;
            ttAPInvTax.BaseCurrSymbol = getBaseCurrSymbol();
            var outCurrSymbol5 = ttAPInvTax.CurrSymbol;
            var outCurrencySwitch6 = ttAPInvTax.CurrencySwitch;
            getCurrencyInfo(APInvHed.CurrencyCode, out outCurrSymbol5, out outCurrencySwitch6, out currid);
            ttAPInvTax.CurrSymbol = outCurrSymbol5;
            ttAPInvTax.CurrencySwitch = outCurrencySwitch6;
            ttAPInvTax.ScrReportableAmt = ttAPInvTax.ReportableAmt;
            ttAPInvTax.ScrDocReportableAmt = ttAPInvTax.DocReportableAmt;
            if (APInvHed.DebitMemo == true)
            {
                ttAPInvTax.ScrDocTaxableAmt = -ttAPInvTax.DocTaxableAmt;
                ttAPInvTax.ScrTaxableAmt = -ttAPInvTax.TaxableAmt;
                ttAPInvTax.Rpt1ScrTaxableAmt = -ttAPInvTax.Rpt1TaxableAmt;
                ttAPInvTax.Rpt2ScrTaxableAmt = -ttAPInvTax.Rpt2TaxableAmt;
                ttAPInvTax.Rpt3ScrTaxableAmt = -ttAPInvTax.Rpt3TaxableAmt;
                ttAPInvTax.ScrReportableAmt = -ttAPInvTax.ReportableAmt;
                ttAPInvTax.ScrDocReportableAmt = -ttAPInvTax.DocReportableAmt;
                ttAPInvTax.Rpt1ScrReportableAmt = -ttAPInvTax.Rpt1ReportableAmt;
                ttAPInvTax.Rpt2ScrReportableAmt = -ttAPInvTax.Rpt2ReportableAmt;
                ttAPInvTax.Rpt3ScrReportableAmt = -ttAPInvTax.Rpt3ReportableAmt;
                ttAPInvTax.ScrTaxAmt = -ttAPInvTax.TaxAmt;
                ttAPInvTax.ScrDocTaxAmt = -ttAPInvTax.DocTaxAmt;
                ttAPInvTax.Rpt1ScrTaxAmt = -ttAPInvTax.Rpt1TaxAmt;
                ttAPInvTax.Rpt2ScrTaxAmt = -ttAPInvTax.Rpt2TaxAmt;
                ttAPInvTax.Rpt3ScrTaxAmt = -ttAPInvTax.Rpt3TaxAmt;
                ttAPInvTax.ScrFixedAmount = -ttAPInvTax.FixedAmount;
                ttAPInvTax.ScrDocFixedAmount = -ttAPInvTax.DocFixedAmount;
                ttAPInvTax.Rpt1ScrFixedAmount = -ttAPInvTax.Rpt1FixedAmount;
                ttAPInvTax.Rpt2ScrFixedAmount = -ttAPInvTax.Rpt2FixedAmount;
                ttAPInvTax.Rpt3ScrFixedAmount = -ttAPInvTax.Rpt3FixedAmount;
                ttAPInvTax.ScrDedTaxAmt = -ttAPInvTax.DedTaxAmt;
                ttAPInvTax.ScrDocDedTaxAmt = -ttAPInvTax.DocDedTaxAmt;
                ttAPInvTax.Rpt1ScrDedTaxAmt = -ttAPInvTax.Rpt1DedTaxAmt;
                ttAPInvTax.Rpt2ScrDedTaxAmt = -ttAPInvTax.Rpt2DedTaxAmt;
                ttAPInvTax.Rpt3ScrDedTaxAmt = -ttAPInvTax.Rpt3DedTaxAmt;
                ttAPInvTax.ScrTaxAmtVar = -ttAPInvTax.TaxAmtVar;
                ttAPInvTax.ScrDocTaxAmtVar = -ttAPInvTax.DocTaxAmtVar;
                ttAPInvTax.Rpt1ScrTaxAmtVar = -ttAPInvTax.Rpt1TaxAmtVar;
                ttAPInvTax.Rpt2ScrTaxAmtVar = -ttAPInvTax.Rpt2TaxAmtVar;
                ttAPInvTax.Rpt3ScrTaxAmtVar = -ttAPInvTax.Rpt3TaxAmtVar;
            }
            else
            {
                ttAPInvTax.Rpt1ScrReportableAmt = ttAPInvTax.Rpt1ReportableAmt;
                ttAPInvTax.Rpt2ScrReportableAmt = ttAPInvTax.Rpt2ReportableAmt;
                ttAPInvTax.Rpt3ScrReportableAmt = ttAPInvTax.Rpt3ReportableAmt;
                ttAPInvTax.ScrDocTaxableAmt = ttAPInvTax.DocTaxableAmt;
                ttAPInvTax.ScrTaxableAmt = ttAPInvTax.TaxableAmt;
                ttAPInvTax.Rpt1ScrTaxableAmt = ttAPInvTax.Rpt1TaxableAmt;
                ttAPInvTax.Rpt2ScrTaxableAmt = ttAPInvTax.Rpt2TaxableAmt;
                ttAPInvTax.Rpt3ScrTaxableAmt = ttAPInvTax.Rpt3TaxableAmt;
                ttAPInvTax.ScrTaxAmt = ttAPInvTax.TaxAmt;
                ttAPInvTax.ScrDocTaxAmt = ttAPInvTax.DocTaxAmt;
                ttAPInvTax.Rpt1ScrTaxAmt = ttAPInvTax.Rpt1TaxAmt;
                ttAPInvTax.Rpt2ScrTaxAmt = ttAPInvTax.Rpt2TaxAmt;
                ttAPInvTax.Rpt3ScrTaxAmt = ttAPInvTax.Rpt3TaxAmt;
                ttAPInvTax.ScrFixedAmount = ttAPInvTax.FixedAmount;
                ttAPInvTax.ScrDocFixedAmount = ttAPInvTax.DocFixedAmount;
                ttAPInvTax.Rpt1ScrFixedAmount = ttAPInvTax.Rpt1FixedAmount;
                ttAPInvTax.Rpt2ScrFixedAmount = ttAPInvTax.Rpt2FixedAmount;
                ttAPInvTax.Rpt3ScrFixedAmount = ttAPInvTax.Rpt3FixedAmount;
                ttAPInvTax.ScrDedTaxAmt = ttAPInvTax.DedTaxAmt;
                ttAPInvTax.ScrDocDedTaxAmt = ttAPInvTax.DocDedTaxAmt;
                ttAPInvTax.Rpt1ScrDedTaxAmt = ttAPInvTax.Rpt1DedTaxAmt;
                ttAPInvTax.Rpt2ScrDedTaxAmt = ttAPInvTax.Rpt2DedTaxAmt;
                ttAPInvTax.Rpt3ScrDedTaxAmt = ttAPInvTax.Rpt3DedTaxAmt;
                ttAPInvTax.ScrTaxAmtVar = ttAPInvTax.TaxAmtVar;
                ttAPInvTax.ScrDocTaxAmtVar = ttAPInvTax.DocTaxAmtVar;
                ttAPInvTax.Rpt1ScrTaxAmtVar = ttAPInvTax.Rpt1TaxAmtVar;
                ttAPInvTax.Rpt2ScrTaxAmtVar = ttAPInvTax.Rpt2TaxAmtVar;
                ttAPInvTax.Rpt3ScrTaxAmtVar = ttAPInvTax.Rpt3TaxAmtVar;
            }
        }

        partial void APInvTaxAfterUpdate()
        {
            string vAction = string.Empty;
            Erp.Tables.APInvTax bAPInvTax = null;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);


            Db.ReadCurrent(ref APInvTax);
            /* Refresh ttAPInvTax with APInvTax because db triggers may have
                changed values in APInvTax. */
            BufferCopy.Copy(APInvTax, ref ttAPInvTax);    /* if created a self assessment tax, must create/update the offset record */

            if (ttAPInvTax.CollectionType >= 2)
            {


                var BAPInvTaxQuery = DBExpressionCompiler.Compile(BAPInvTaxExpression);
                bAPInvTax = BAPInvTaxQuery(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, 1);
                if (bAPInvTax == null)
                {
                    bAPInvTax = new Erp.Tables.APInvTax();
                    Db.APInvTax.Insert(bAPInvTax);
                    bAPInvTax.ECAcquisitionSeq = 1;
                    BufferCopy.CopyExceptFor(ttAPInvTax, bAPInvTax, APInvTax.ColumnNames.ECAcquisitionSeq, APInvTax.ColumnNames.SysRowID, APInvTax.ColumnNames.SysRevID);
                }

                bAPInvTax.DocTaxableAmt = -(ttAPInvTax.DocTaxableAmt);
                bAPInvTax.TaxableAmt = -(ttAPInvTax.TaxableAmt);
                bAPInvTax.Rpt1TaxableAmt = -(ttAPInvTax.Rpt1TaxableAmt);
                bAPInvTax.Rpt2TaxableAmt = -(ttAPInvTax.Rpt2TaxableAmt);
                bAPInvTax.Rpt3TaxableAmt = -(ttAPInvTax.Rpt3TaxableAmt);
                bAPInvTax.DocTaxAmt = -(ttAPInvTax.DocTaxAmt);
                bAPInvTax.TaxAmt = -(ttAPInvTax.TaxAmt);
                bAPInvTax.Rpt1TaxAmt = -(ttAPInvTax.Rpt1TaxAmt);
                bAPInvTax.Rpt2TaxAmt = -(ttAPInvTax.Rpt2TaxAmt);
                bAPInvTax.Rpt3TaxAmt = -(ttAPInvTax.Rpt3TaxAmt);
                bAPInvTax.DocDedTaxAmt = -(ttAPInvTax.DocDedTaxAmt);
                bAPInvTax.DedTaxAmt = -(ttAPInvTax.DedTaxAmt);
                bAPInvTax.Rpt1DedTaxAmt = -(ttAPInvTax.Rpt1DedTaxAmt);
                bAPInvTax.Rpt2DedTaxAmt = -(ttAPInvTax.Rpt2DedTaxAmt);
                bAPInvTax.Rpt3DedTaxAmt = -(ttAPInvTax.Rpt3DedTaxAmt);
                bAPInvTax.FixedAmount = -(ttAPInvTax.FixedAmount);
                bAPInvTax.DocFixedAmount = -(ttAPInvTax.DocFixedAmount);
                bAPInvTax.Rpt1FixedAmount = -(ttAPInvTax.Rpt1FixedAmount);
                bAPInvTax.Rpt2FixedAmount = -(ttAPInvTax.Rpt2FixedAmount);
                bAPInvTax.Rpt3FixedAmount = -(ttAPInvTax.Rpt3FixedAmount);
                bAPInvTax.ReportableAmt = -(ttAPInvTax.ReportableAmt);
                bAPInvTax.DocReportableAmt = -(ttAPInvTax.DocReportableAmt);
                bAPInvTax.Rpt1ReportableAmt = -(ttAPInvTax.Rpt1ReportableAmt);
                bAPInvTax.Rpt2ReportableAmt = -(ttAPInvTax.Rpt2ReportableAmt);
                bAPInvTax.Rpt3ReportableAmt = -(ttAPInvTax.Rpt3ReportableAmt);
                bAPInvTax.DocDefTaxAmt = -(ttAPInvTax.DocDefTaxAmt);
                bAPInvTax.DefTaxAmt = -(ttAPInvTax.DefTaxAmt);
                bAPInvTax.Rpt1DefTaxAmt = -(ttAPInvTax.Rpt1DefTaxAmt);
                bAPInvTax.Rpt2DefTaxAmt = -(ttAPInvTax.Rpt2DefTaxAmt);
                bAPInvTax.Rpt3DefTaxAmt = -(ttAPInvTax.Rpt3DefTaxAmt);
                bAPInvTax.DocTaxAmtVar = -(ttAPInvTax.DocTaxAmtVar);
                bAPInvTax.TaxAmtVar = -(ttAPInvTax.TaxAmtVar);
                bAPInvTax.Rpt1TaxAmtVar = -(ttAPInvTax.Rpt1TaxAmtVar);
                bAPInvTax.Rpt2TaxAmtVar = -(ttAPInvTax.Rpt2TaxAmtVar);
                bAPInvTax.Rpt3TaxAmtVar = -(ttAPInvTax.Rpt3TaxAmtVar);
                bAPInvTax.SysCalcDocTaxableAmt = -(ttAPInvTax.SysCalcDocTaxableAmt);
                bAPInvTax.SysCalcTaxableAmt = -(ttAPInvTax.SysCalcTaxableAmt);
                bAPInvTax.Rpt1SysCalcTaxableAmt = -(ttAPInvTax.Rpt1SysCalcTaxableAmt);
                bAPInvTax.Rpt2SysCalcTaxableAmt = -(ttAPInvTax.Rpt2SysCalcTaxableAmt);
                bAPInvTax.Rpt3SysCalcTaxableAmt = -(ttAPInvTax.Rpt3SysCalcTaxableAmt);
                bAPInvTax.SysCalcDocReportableAmt = -(ttAPInvTax.SysCalcDocReportableAmt);
                bAPInvTax.SysCalcReportableAmt = -(ttAPInvTax.SysCalcReportableAmt);
                bAPInvTax.Rpt1SysCalcReportableAmt = -(ttAPInvTax.Rpt1SysCalcReportableAmt);
                bAPInvTax.Rpt2SysCalcReportableAmt = -(ttAPInvTax.Rpt2SysCalcReportableAmt);
                bAPInvTax.Rpt3SysCalcReportableAmt = -(ttAPInvTax.Rpt3SysCalcReportableAmt);
                bAPInvTax.Manual = ttAPInvTax.Manual;
                bAPInvTax.Percent = ttAPInvTax.Percent;
                Db.Validate(bAPInvTax);
            }

            /* SCR #44624 - make sure you update the Reverse Charge or EC Acquisition tax line */
            vAction = ((BIttAPInvTax != null) ? "UPDATE" : "ADD");
            updRevChargeLine(vAction);

            /* Create a ttAPInvHed record to send back current values for tax amounts. */
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, APInvTax.Company, APInvTax.VendorNum, APInvTax.InvoiceNum);
            if (APInvHed != null)
            {
                refreshttAPInvHed();       /* Refresh tax records */


                var APInvTaxQuery8 = DBExpressionCompiler.Compile(APInvTaxExpression8);
                foreach (var APInvTax_iterator in (APInvTaxQuery8(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                {
                    APInvTax = APInvTax_iterator;
                    refreshttAPInvTax();
                }/* for each APInvTax */

                if (isPeruLocalization == true)
                {
                    refreshttPEAPInvTax(APInvHed.VendorNum, APInvHed.InvoiceNum, APInvHed.GroupID);
                }

                SetDatesDiscount(true, true);
            }

            foreach (var APInvExp_iterator in SelectAPInvExpNonDedTax(APInvTax.Company, APInvTax.VendorNum, APInvTax.InvoiceNum, true))
            {
                APInvExp = APInvExp_iterator;
                refreshttAPInvExp();
            }
            foreach (var APInvExp_iterator in SelectAPInvExpNonDedTax(APInvTax.Company, APInvTax.VendorNum, APInvTax.InvoiceNum, false))
            {
                APInvExp = APInvExp_iterator;
                refreshttAPIHAPInvExp();
            }

            lAPInvExpUpdated = true;
            RefreshAfterSyncAPInvExp();
            if (Internal.CSF.PEExtensions.IsPELocalization(Session) &&
                ttAPInvTax != null &&
                BIttAPInvTax != null &&
                (ttAPInvTax.Manual != BIttAPInvTax.Manual ||
                 ttAPInvTax.DocTaxAmt != BIttAPInvTax.DocTaxAmt))
            {
                using (var libCSFPeru = new Internal.CSF.Peru(this.Db))
                {
                    libCSFPeru.RecalculateWHTaxes(APInvHed, ttAPInvTax.TaxCode);
                }
            }

            if (APInvHed != null)
            {
                refreshttAPInvHed();
            }
        }
        partial void APInvTaxBeforeCreate()
        {

            var APInvTaxQuery9 = DBExpressionCompiler.Compile(APInvTaxExpression9);
            if ((APInvTaxQuery9(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, ttAPInvTax.ECAcquisitionSeq)))
            {
                ExceptionManager.AddBLException(Strings.ATaxLineAlreadyExistsWithTheTaxCodeAndRateCode, "APInvTax", "TaxCode");
            }
        }

        partial void APInvTaxBeforeDelete()
        {

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            if (APInvHed != null)
            {

                bool apTaxLnLevel = this.ExistsXbSystLineTax(Session.CompanyID, true);
                if ((APInvHed.InPrice && ttAPInvTax.CollectionType == 0) || (apTaxLnLevel && ttAPInvTax.SummaryOnly))
                {
                    throw new BLException(Strings.ThisInvoiceHasInPriceTaxes);
                }

                if (ttAPInvTax.DevLog1)
                {
                    throw new BLException(Strings.ThisTaxRecPrepayReverse);
                }


                if ((APInvHed.MatchedFromLI == true && APInvHed.AllowOverrideLI == false))
                {
                    throw new BLException(Strings.ThisInvoiceIsMatchedToALoggedInvoiceAndOverrValue, "APinvHed", "AllowOverrideLI");
                }

                rSaveAPInvHedRowid = APInvHed.SysRowID;
            }
        }

        partial void APInvTaxBeforeUpdate()
        {
            if (BIttAPInvTax != null)
            {
                var APInvHedQuery39 = DBExpressionCompiler.Compile(APInvHedExpression39);
                if ((APInvHedQuery39(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum, true, false)))
                {
                    throw new BLException(Strings.ThisInvoiceIsMatchedToALoggedInvoiceAndOverrValue, "APinvHed", "AllowOverrideLI");
                }
            }

            ttAPInvTax.RateType = ttAPInvTax.RateType;
            if (canUpdateInvoice(ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum).canUpdateInvoice == false)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvTax");
            }


            if (APInvHed == null)
            {
                APInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);

            }
            if (APInvHed != null)
            {
                if (APInvHed.InPrice == true && ttAPInvTax.CollectionType != 1)
                {
                    throw new BLException(Strings.MaintenanceNotAllowedTaxInclLiability);

                }
            }



            var SalesTaxQuery4 = DBExpressionCompiler.Compile(SalesTaxExpression4);
            SalesTax = SalesTaxQuery4(Db, ttAPInvTax.Company, ttAPInvTax.TaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.AValidTaxCodeIsRequired, "APInvTax", "TaxCode");
            }

            if (String.IsNullOrEmpty(ttAPInvTax.RateCode))
            {
                ExceptionManager.AddBLException(Strings.AValidRateCodeIsRequired, "APInvTax", "RateCode");
            }

            if (isPeruLocalization)
            {
                var _SalesTax = FindFirstSalesTax(Session.CompanyID, ttAPInvTax.TaxCode, "Detraction");
                if (_SalesTax != null && ExistsSalesTax(Session.CompanyID, ttAPInvTax.TaxCode, 4))
                    ExceptionManager.AddBLException(Strings.ManualAddingDetracciones, "APInvTax", "TaxCode");
            }

            if (ExceptionManager.Exceptions.Count == 0)
            {
                ttAPInvTax.ReportableAmt = ttAPInvTax.ScrReportableAmt;
                ttAPInvTax.DocReportableAmt = ttAPInvTax.ScrDocReportableAmt;
                ttAPInvTax.Rpt1ReportableAmt = ttAPInvTax.Rpt1ScrReportableAmt;
                ttAPInvTax.Rpt2ReportableAmt = ttAPInvTax.Rpt2ScrReportableAmt;
                ttAPInvTax.Rpt3ReportableAmt = ttAPInvTax.Rpt3ScrReportableAmt;

                if (ttAPInvTax.DebitMemo == true)
                {
                    ttAPInvTax.TaxableAmt = -ttAPInvTax.ScrTaxableAmt;
                    ttAPInvTax.DocTaxableAmt = -ttAPInvTax.ScrDocTaxableAmt;
                    ttAPInvTax.Rpt1TaxableAmt = -ttAPInvTax.Rpt1ScrTaxableAmt;
                    ttAPInvTax.Rpt2TaxableAmt = -ttAPInvTax.Rpt2ScrTaxableAmt;
                    ttAPInvTax.Rpt3TaxableAmt = -ttAPInvTax.Rpt3ScrTaxableAmt;

                    ttAPInvTax.ReportableAmt = -ttAPInvTax.ScrReportableAmt;
                    ttAPInvTax.DocReportableAmt = -ttAPInvTax.ScrDocReportableAmt;
                    ttAPInvTax.Rpt1ReportableAmt = -ttAPInvTax.Rpt1ScrReportableAmt;
                    ttAPInvTax.Rpt2ReportableAmt = -ttAPInvTax.Rpt2ScrReportableAmt;
                    ttAPInvTax.Rpt3ReportableAmt = -ttAPInvTax.Rpt3ScrReportableAmt;

                    ttAPInvTax.TaxAmt = -ttAPInvTax.ScrTaxAmt;
                    ttAPInvTax.DocTaxAmt = -ttAPInvTax.ScrDocTaxAmt;
                    ttAPInvTax.Rpt1TaxAmt = -ttAPInvTax.Rpt1ScrTaxAmt;
                    ttAPInvTax.Rpt2TaxAmt = -ttAPInvTax.Rpt2ScrTaxAmt;
                    ttAPInvTax.Rpt3TaxAmt = -ttAPInvTax.Rpt3ScrTaxAmt;

                    ttAPInvTax.FixedAmount = -ttAPInvTax.ScrFixedAmount;
                    ttAPInvTax.DocFixedAmount = -ttAPInvTax.ScrDocFixedAmount;
                    ttAPInvTax.Rpt1FixedAmount = -ttAPInvTax.Rpt1ScrFixedAmount;
                    ttAPInvTax.Rpt2FixedAmount = -ttAPInvTax.Rpt2ScrFixedAmount;
                    ttAPInvTax.Rpt3FixedAmount = -ttAPInvTax.Rpt3ScrFixedAmount;

                    ttAPInvTax.DedTaxAmt = -ttAPInvTax.ScrDedTaxAmt;
                    ttAPInvTax.DocDedTaxAmt = -ttAPInvTax.ScrDocDedTaxAmt;
                    ttAPInvTax.Rpt1DedTaxAmt = -ttAPInvTax.Rpt1ScrDedTaxAmt;
                    ttAPInvTax.Rpt2DedTaxAmt = -ttAPInvTax.Rpt2ScrDedTaxAmt;
                    ttAPInvTax.Rpt3DedTaxAmt = -ttAPInvTax.Rpt3ScrDedTaxAmt;

                    ttAPInvTax.TaxAmtVar = -ttAPInvTax.ScrTaxAmtVar;
                    ttAPInvTax.DocTaxAmtVar = -ttAPInvTax.ScrDocTaxAmtVar;
                    ttAPInvTax.Rpt1TaxAmtVar = -ttAPInvTax.Rpt1ScrTaxAmtVar;
                    ttAPInvTax.Rpt2TaxAmtVar = -ttAPInvTax.Rpt2ScrTaxAmtVar;
                    ttAPInvTax.Rpt3TaxAmtVar = -ttAPInvTax.Rpt3ScrTaxAmtVar;
                }
                else
                {
                    ttAPInvTax.TaxableAmt = ttAPInvTax.ScrTaxableAmt;
                    ttAPInvTax.DocTaxableAmt = ttAPInvTax.ScrDocTaxableAmt;
                    ttAPInvTax.Rpt1TaxableAmt = ttAPInvTax.Rpt1ScrTaxableAmt;
                    ttAPInvTax.Rpt2TaxableAmt = ttAPInvTax.Rpt2ScrTaxableAmt;
                    ttAPInvTax.Rpt3TaxableAmt = ttAPInvTax.Rpt3ScrTaxableAmt;

                    ttAPInvTax.ReportableAmt = ttAPInvTax.ScrReportableAmt;
                    ttAPInvTax.DocReportableAmt = ttAPInvTax.ScrDocReportableAmt;
                    ttAPInvTax.Rpt1ReportableAmt = ttAPInvTax.Rpt1ScrReportableAmt;
                    ttAPInvTax.Rpt2ReportableAmt = ttAPInvTax.Rpt2ScrReportableAmt;
                    ttAPInvTax.Rpt3ReportableAmt = ttAPInvTax.Rpt3ScrReportableAmt;

                    ttAPInvTax.TaxAmt = ttAPInvTax.ScrTaxAmt;
                    ttAPInvTax.DocTaxAmt = ttAPInvTax.ScrDocTaxAmt;
                    ttAPInvTax.Rpt1TaxAmt = ttAPInvTax.Rpt1ScrTaxAmt;
                    ttAPInvTax.Rpt2TaxAmt = ttAPInvTax.Rpt2ScrTaxAmt;
                    ttAPInvTax.Rpt3TaxAmt = ttAPInvTax.Rpt3ScrTaxAmt;

                    ttAPInvTax.FixedAmount = ttAPInvTax.ScrFixedAmount;
                    ttAPInvTax.DocFixedAmount = ttAPInvTax.ScrDocFixedAmount;
                    ttAPInvTax.Rpt1FixedAmount = ttAPInvTax.Rpt1ScrFixedAmount;
                    ttAPInvTax.Rpt2FixedAmount = ttAPInvTax.Rpt2ScrFixedAmount;
                    ttAPInvTax.Rpt3FixedAmount = ttAPInvTax.Rpt3ScrFixedAmount;

                    ttAPInvTax.DedTaxAmt = ttAPInvTax.ScrDedTaxAmt;
                    ttAPInvTax.DocDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt;
                    ttAPInvTax.Rpt1DedTaxAmt = ttAPInvTax.Rpt1ScrDedTaxAmt;
                    ttAPInvTax.Rpt2DedTaxAmt = ttAPInvTax.Rpt2ScrDedTaxAmt;
                    ttAPInvTax.Rpt3DedTaxAmt = ttAPInvTax.Rpt3ScrDedTaxAmt;

                    ttAPInvTax.TaxAmtVar = ttAPInvTax.ScrTaxAmtVar;
                    ttAPInvTax.DocTaxAmtVar = ttAPInvTax.ScrDocTaxAmtVar;
                    ttAPInvTax.Rpt1TaxAmtVar = ttAPInvTax.Rpt1ScrTaxAmtVar;
                    ttAPInvTax.Rpt2TaxAmtVar = ttAPInvTax.Rpt2ScrTaxAmtVar;
                    ttAPInvTax.Rpt3TaxAmtVar = ttAPInvTax.Rpt3ScrTaxAmtVar;
                }

                if ((SalesTax.Timing > 0 && SalesTax.Timing != 3))
                {
                    ttAPInvTax.DefTaxableAmt = ttAPInvTax.TaxableAmt;
                    ttAPInvTax.DocDefTaxableAmt = ttAPInvTax.DocTaxableAmt;
                    ttAPInvTax.Rpt1DefTaxableAmt = ttAPInvTax.Rpt1TaxableAmt;
                    ttAPInvTax.Rpt2DefTaxableAmt = ttAPInvTax.Rpt2TaxableAmt;
                    ttAPInvTax.Rpt3DefTaxableAmt = ttAPInvTax.Rpt3TaxableAmt;

                    ttAPInvTax.DefTaxAmt = ttAPInvTax.DedTaxAmt;
                    ttAPInvTax.DocDefTaxAmt = ttAPInvTax.DocDedTaxAmt;
                    ttAPInvTax.Rpt1DefTaxAmt = ttAPInvTax.Rpt1DedTaxAmt;
                    ttAPInvTax.Rpt2DefTaxAmt = ttAPInvTax.Rpt2DedTaxAmt;
                    ttAPInvTax.Rpt3DefTaxAmt = ttAPInvTax.Rpt3DedTaxAmt;
                }
                else
                {
                    ttAPInvTax.DefTaxableAmt = 0;
                    ttAPInvTax.DocDefTaxableAmt = 0;
                    ttAPInvTax.Rpt1DefTaxableAmt = 0;
                    ttAPInvTax.Rpt2DefTaxableAmt = 0;
                    ttAPInvTax.Rpt3DefTaxableAmt = 0;

                    ttAPInvTax.DefTaxAmt = 0;
                    ttAPInvTax.DocDefTaxAmt = 0;
                    ttAPInvTax.Rpt1DefTaxAmt = 0;
                    ttAPInvTax.Rpt2DefTaxAmt = 0;
                    ttAPInvTax.Rpt3DefTaxAmt = 0;
                }
            }
            ErpCallContext.SetDisposableKey("NonRecTax-APInvDtl");
            SaveBeforeSyncAPInvExp();
        }

        #endregion

        #region APInvHedMscTax Table Methods

        partial void APInvHedMscTaxAfterDelete()
        {

            var apInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            if (apInvHed != null)
            {
                if (apInvHed.InPrice)
                {

                    foreach (var APInvHedMscTax in (this.SelectAPInvHedMscTaxWithUpdLock(Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, ttAPInvHedMscTax.MscNum, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode)))
                    {

                        APInvHedMscTax.Manual = true;
                        Db.Validate(APInvHedMscTax);
                    }

                    var apInvMsc = FindFirstAPInvMscWithUpdLock(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, 0, ttAPInvHedMscTax.MscNum);

                    if (apInvMsc != null)
                    {
                        apInvMsc.NoTaxRecalc = true;
                        Db.Validate(apInvMsc);
                    }

                    if (apInvHed.ReadyToCalc)
                    {
                        APInvoiceTableset ds = CurrentFullTableset;
                        SetReadyToCalc("", apInvHed.InvoiceNum, apInvHed.VendorNum, false, false, ref ds);
                        CurrentFullTableset = ds;
                    }
                }
                else
                {
                    updRevTaxHedMsc("DELETE");
                    ApInvHedChildDeleted();

                }

            }
        }

        partial void APInvHedMscTaxAfterGetNew()
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            if (APInvHed != null)
            {
                APInvMsc = FindFirstAPInvMsc(APInvHed.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, 0, ttAPInvHedMscTax.MscNum);
                if (APInvMsc != null)
                {
                    ttAPInvHedMscTax.CurrencyCode = APInvHed.CurrencyCode;
                    ttAPInvHedMscTax.GroupID = APInvHed.GroupID;
                    ttAPInvHedMscTax.MiscCode = APInvMsc.MiscCode;
                    ttAPInvHedMscTax.APInvMscSysRowID = APInvMsc.SysRowID;
                    if (APInvHed.InPrice)
                    {
                        ttAPInvHedMscTax.Manual = true;
                    }
                    ttAPInvHedMscTax.ManAdd = true;
                }
            }

        }

        partial void APInvHedMscTaxAfterUpdate()
        {

            int saveVendorNum = 0;
            string saveInvoiceNum = string.Empty;
            int saveMscNum = 0;

            saveVendorNum = ttAPInvHedMscTax.VendorNum;
            saveInvoiceNum = ttAPInvHedMscTax.InvoiceNum;
            saveMscNum = ttAPInvHedMscTax.MscNum;

            var apInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, saveVendorNum, saveInvoiceNum);
            if (apInvHed != null)
            {
                if (apInvHed.InPrice)
                {
                    foreach (var APInvHedMscTax in (this.SelectAPInvHedMscTaxAllWithUpdLock(Session.CompanyID, saveVendorNum, saveInvoiceNum, saveMscNum)))
                    {

                        APInvHedMscTax.Manual = true;
                        Db.Validate(APInvHedMscTax);
                    }

                    var apInvMsc = FindFirstAPInvMscWithUpdLock(apInvHed.Company, saveVendorNum, saveInvoiceNum, 0, saveMscNum);

                    if (apInvMsc != null)
                    {
                        apInvMsc.NoTaxRecalc = true;
                        Db.Validate(apInvMsc);
                    }

                    if (apInvHed.ReadyToCalc)
                    {
                        APInvoiceTableset ds = CurrentFullTableset;
                        SetReadyToCalc("", apInvHed.InvoiceNum, apInvHed.VendorNum, false, false, ref ds);
                        CurrentFullTableset = ds;
                    }


                }
                else
                {
                    string vAction = ((BIttAPInvHedMscTax != null) ? "UPDATE" : "ADD");
                    this.updRevTaxHedMsc(vAction);
                    /* Create a ttAPInvHed record to send back current values for tax amounts. */
                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, saveVendorNum, saveInvoiceNum);
                    if (APInvHed != null)
                    {
                        refreshttAPInvHedAfterTaxes();


                        var APInvTaxQuery8 = DBExpressionCompiler.Compile(APInvTaxExpression8);
                        foreach (var APInvTax_iterator in (APInvTaxQuery8(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                        {
                            APInvTax = APInvTax_iterator;
                            refreshttAPInvTax();
                        }/* for each APInvTax */

                    }
                }
                APInvMsc = FindFirstAPInvMsc(apInvHed.Company, saveVendorNum, saveInvoiceNum, 0, saveMscNum);
                if (APInvMsc != null)
                {
                    refreshttAPIHAPInvMsc();
                }
            } //not null
            if (HaveAPTaxToLineLevel(ttAPInvHedMscTax.Company) && SalesTaxAllowsNonDeductible(APInvTax.Company, APInvTax.TaxCode))
            {
                APSyncAPInvExp.RunSyncAPInvExp(string.Empty, Guid.Empty, Guid.Empty, Guid.Empty, ttAPInvHedMscTax.SysRowID, false, string.Empty, decimal.Zero, "Tax", "APInvHedMscTax", out lAPInvExpUpdated);
            }

            foreach (var APInvExp_iterator in SelectAPInvExpNonDedTax(APInvTax.Company, APInvTax.VendorNum, APInvTax.InvoiceNum, true))
            {
                APInvExp = APInvExp_iterator;
                refreshttAPInvExp();
            }
            foreach (var APInvExp_iterator in SelectAPInvExpNonDedTax(APInvTax.Company, APInvTax.VendorNum, APInvTax.InvoiceNum, false))
            {
                APInvExp = APInvExp_iterator;
                refreshttAPIHAPInvExp();
            }
            lAPInvExpUpdated = true;
            RefreshAfterSyncAPInvExp();
        }

        partial void APInvHedMscTaxBeforeDelete()
        {


            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            if (APInvHed != null)
            {
                rSaveAPInvHedRowid = APInvHed.SysRowID;

                //if APInvHedMscTax being deleted is the only one with TaxCode/RateCode we need to mark the summary APInvTax for deletion from the view
                if ((!ExistsAPLnTax(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, ttAPInvHedMscTax.ECAcquisitionSeq))
                    && (!ExistsAPInvHedMscTax(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, ttAPInvHedMscTax.MscNum, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, ttAPInvHedMscTax.ECAcquisitionSeq))
                    && (!ExistsAPInvLnMscTax(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, ttAPInvHedMscTax.ECAcquisitionSeq)))

                {
                    Erp.Tables.APInvTax delAPInvTax = this.FindFirstAPInvTax(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, ttAPInvHedMscTax.ECAcquisitionSeq);
                    if (delAPInvTax != null)
                    {

                        if (tmpAPInvTaxRows == null)
                        {
                            tmpAPInvTaxRows = new List<APInvTaxRow>();
                        }

                        tmpAPInvTax = new APInvTaxRow();
                        tmpAPInvTaxRows.Add(tmpAPInvTax);
                        BufferCopy.Copy(delAPInvTax, ref tmpAPInvTax);
                        tmpAPInvTax.SysRowID = delAPInvTax.SysRowID;
                        tmpAPInvTax.RowMod = IceRow.ROWSTATE_DELETED;
                    }
                }
            }
        }


        partial void APInvHedMscTaxBeforeUpdate()
        {

            if (canUpdateInvoice(ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum).canUpdateInvoice == false)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvHedMscTax");
            }
            var SalesTaxQuery4 = DBExpressionCompiler.Compile(SalesTaxExpression4);
            SalesTax = SalesTaxQuery4(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.TaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.AValidTaxCodeIsRequired, "APInvHedMscTax", "TaxCode");
            }
            if (SalesTax.CollectionType == 1)
            {
                ExceptionManager.AddBLException(Strings.WithholdingTaxNotAllowedAtLineLevel, "APInvHedMscTax", "TaxCode");
            }

            if ((SalesTax.CollectionType == 2 || SalesTax.CollectionType == 3) && (SalesTax.Timing != 0 && SalesTax.Timing != 3))
            {
                throw new BLException(Strings.InvoiceTimingForNonInvoiceTaxesIsRequi);
            }


            if (String.IsNullOrEmpty(ttAPInvHedMscTax.RateCode))
            {
                ExceptionManager.AddBLException(Strings.AValidRateCodeIsRequired, "APInvHedMscTax", "RateCode");
            }

            if (APInvHed == null)
            {
                APInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            }

            if (ExceptionManager.Exceptions.Count == 0)
            {
                if (APInvHed.DebitMemo)
                {

                    ttAPInvHedMscTax.DocTaxableAmt = -ttAPInvHedMscTax.DocScrTaxableAmt;
                    ttAPInvHedMscTax.DocReportableAmt = -ttAPInvHedMscTax.DocScrReportableAmt;
                    ttAPInvHedMscTax.DocTaxAmt = -ttAPInvHedMscTax.DocScrTaxAmt;
                    ttAPInvHedMscTax.DocDedTaxAmt = -ttAPInvHedMscTax.DocScrDedTaxAmt;
                    ttAPInvHedMscTax.TaxableAmt = -ttAPInvHedMscTax.ScrTaxableAmt;
                    ttAPInvHedMscTax.Rpt1TaxableAmt = -ttAPInvHedMscTax.Rpt1ScrTaxableAmt;
                    ttAPInvHedMscTax.Rpt2TaxableAmt = -ttAPInvHedMscTax.Rpt2ScrTaxableAmt;
                    ttAPInvHedMscTax.Rpt3TaxableAmt = -ttAPInvHedMscTax.Rpt3ScrTaxableAmt;
                    ttAPInvHedMscTax.ReportableAmt = -ttAPInvHedMscTax.ScrReportableAmt;
                    ttAPInvHedMscTax.Rpt1ReportableAmt = -ttAPInvHedMscTax.Rpt1ScrReportableAmt;
                    ttAPInvHedMscTax.Rpt2ReportableAmt = -ttAPInvHedMscTax.Rpt2ScrReportableAmt;
                    ttAPInvHedMscTax.Rpt3ReportableAmt = -ttAPInvHedMscTax.Rpt3ScrReportableAmt;
                    ttAPInvHedMscTax.TaxAmt = -ttAPInvHedMscTax.ScrTaxAmt;
                    ttAPInvHedMscTax.Rpt1TaxAmt = -ttAPInvHedMscTax.Rpt1ScrTaxAmt;
                    ttAPInvHedMscTax.Rpt2TaxAmt = -ttAPInvHedMscTax.Rpt2ScrTaxAmt;
                    ttAPInvHedMscTax.Rpt3TaxAmt = -ttAPInvHedMscTax.Rpt3ScrTaxAmt;
                    ttAPInvHedMscTax.DedTaxAmt = -ttAPInvHedMscTax.ScrDedTaxAmt;
                    ttAPInvHedMscTax.Rpt1DedTaxAmt = -ttAPInvHedMscTax.Rpt1ScrDedTaxAmt;
                    ttAPInvHedMscTax.Rpt2DedTaxAmt = -ttAPInvHedMscTax.Rpt2ScrDedTaxAmt;
                    ttAPInvHedMscTax.Rpt3DedTaxAmt = -ttAPInvHedMscTax.Rpt3ScrDedTaxAmt;
                    ttAPInvHedMscTax.FixedAmount = -ttAPInvHedMscTax.ScrFixedAmount;
                    ttAPInvHedMscTax.DocFixedAmount = -ttAPInvHedMscTax.DocScrFixedAmount;
                    ttAPInvHedMscTax.Rpt1FixedAmount = -ttAPInvHedMscTax.Rpt1ScrFixedAmount;
                    ttAPInvHedMscTax.Rpt2FixedAmount = -ttAPInvHedMscTax.Rpt2ScrFixedAmount;
                    ttAPInvHedMscTax.Rpt3FixedAmount = -ttAPInvHedMscTax.Rpt3ScrFixedAmount;

                }
                else
                {

                    ttAPInvHedMscTax.DocTaxableAmt = ttAPInvHedMscTax.DocScrTaxableAmt;
                    ttAPInvHedMscTax.DocReportableAmt = ttAPInvHedMscTax.DocScrReportableAmt;
                    ttAPInvHedMscTax.DocTaxAmt = ttAPInvHedMscTax.DocScrTaxAmt;
                    ttAPInvHedMscTax.DocDedTaxAmt = ttAPInvHedMscTax.DocScrDedTaxAmt;
                    ttAPInvHedMscTax.TaxableAmt = ttAPInvHedMscTax.ScrTaxableAmt;
                    ttAPInvHedMscTax.Rpt1TaxableAmt = ttAPInvHedMscTax.Rpt1ScrTaxableAmt;
                    ttAPInvHedMscTax.Rpt2TaxableAmt = ttAPInvHedMscTax.Rpt2ScrTaxableAmt;
                    ttAPInvHedMscTax.Rpt3TaxableAmt = ttAPInvHedMscTax.Rpt3ScrTaxableAmt;
                    ttAPInvHedMscTax.ReportableAmt = ttAPInvHedMscTax.ScrReportableAmt;
                    ttAPInvHedMscTax.Rpt1ReportableAmt = ttAPInvHedMscTax.Rpt1ScrReportableAmt;
                    ttAPInvHedMscTax.Rpt2ReportableAmt = ttAPInvHedMscTax.Rpt2ScrReportableAmt;
                    ttAPInvHedMscTax.Rpt3ReportableAmt = ttAPInvHedMscTax.Rpt3ScrReportableAmt;
                    ttAPInvHedMscTax.TaxAmt = ttAPInvHedMscTax.ScrTaxAmt;
                    ttAPInvHedMscTax.Rpt1TaxAmt = ttAPInvHedMscTax.Rpt1ScrTaxAmt;
                    ttAPInvHedMscTax.Rpt2TaxAmt = ttAPInvHedMscTax.Rpt2ScrTaxAmt;
                    ttAPInvHedMscTax.Rpt3TaxAmt = ttAPInvHedMscTax.Rpt3ScrTaxAmt;
                    ttAPInvHedMscTax.DedTaxAmt = ttAPInvHedMscTax.ScrDedTaxAmt;
                    ttAPInvHedMscTax.Rpt1DedTaxAmt = ttAPInvHedMscTax.Rpt1ScrDedTaxAmt;
                    ttAPInvHedMscTax.Rpt2DedTaxAmt = ttAPInvHedMscTax.Rpt2ScrDedTaxAmt;
                    ttAPInvHedMscTax.Rpt3DedTaxAmt = ttAPInvHedMscTax.Rpt3ScrDedTaxAmt;
                    ttAPInvHedMscTax.FixedAmount = ttAPInvHedMscTax.ScrFixedAmount;
                    ttAPInvHedMscTax.DocFixedAmount = ttAPInvHedMscTax.DocScrFixedAmount;
                    ttAPInvHedMscTax.Rpt1FixedAmount = ttAPInvHedMscTax.Rpt1ScrFixedAmount;
                    ttAPInvHedMscTax.Rpt2FixedAmount = ttAPInvHedMscTax.Rpt2ScrFixedAmount;
                    ttAPInvHedMscTax.Rpt3FixedAmount = ttAPInvHedMscTax.Rpt3ScrFixedAmount;
                }

                if (SalesTax.Timing > 0 && SalesTax.Timing != 3)
                {
                    ttAPInvHedMscTax.DocDefTaxableAmt = ttAPInvHedMscTax.DocTaxableAmt;
                    ttAPInvHedMscTax.DefTaxableAmt = ttAPInvHedMscTax.TaxableAmt;
                    ttAPInvHedMscTax.Rpt1DefTaxableAmt = ttAPInvHedMscTax.Rpt1TaxableAmt;
                    ttAPInvHedMscTax.Rpt2DefTaxableAmt = ttAPInvHedMscTax.Rpt2TaxableAmt;
                    ttAPInvHedMscTax.Rpt3DefTaxableAmt = ttAPInvHedMscTax.Rpt3TaxableAmt;
                    ttAPInvHedMscTax.DocDefTaxAmt = ttAPInvHedMscTax.DocDedTaxAmt;
                    ttAPInvHedMscTax.DefTaxAmt = ttAPInvHedMscTax.DedTaxAmt;
                    ttAPInvHedMscTax.Rpt1DefTaxAmt = ttAPInvHedMscTax.Rpt1DedTaxAmt;
                    ttAPInvHedMscTax.Rpt2DefTaxAmt = ttAPInvHedMscTax.Rpt2DedTaxAmt;
                    ttAPInvHedMscTax.Rpt3DefTaxAmt = ttAPInvHedMscTax.Rpt3DedTaxAmt;

                }
                else
                {
                    ttAPInvHedMscTax.DocDefTaxableAmt = 0;
                    ttAPInvHedMscTax.DefTaxableAmt = 0;
                    ttAPInvHedMscTax.Rpt1DefTaxableAmt = 0;
                    ttAPInvHedMscTax.Rpt2DefTaxableAmt = 0;
                    ttAPInvHedMscTax.Rpt3DefTaxableAmt = 0;
                    ttAPInvHedMscTax.DocDefTaxAmt = 0;
                    ttAPInvHedMscTax.DefTaxAmt = 0;
                    ttAPInvHedMscTax.Rpt1DefTaxAmt = 0;
                    ttAPInvHedMscTax.Rpt2DefTaxAmt = 0;
                    ttAPInvHedMscTax.Rpt3DefTaxAmt = 0;
                }
            }
            SaveBeforeSyncAPInvExp();
        }
        #endregion

        #region APInvLnMscTax Table Methods

        partial void APInvLnMscTaxAfterDelete()
        {

            var apInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            if (apInvHed != null)
            {
                if (apInvHed.InPrice)
                {

                    foreach (var apInvLnMscTax in (this.SelectAPInvLnMscTaxWithUpdLock(Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode)))
                    {

                        apInvLnMscTax.Manual = true;
                        Db.Validate(apInvLnMscTax);
                    }

                    var apInvMsc = FindFirstAPInvMscWithUpdLock(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum);

                    if (apInvMsc != null)
                    {
                        apInvMsc.NoTaxRecalc = true;
                        Db.Validate(apInvMsc);
                    }

                    if (apInvHed.ReadyToCalc)
                    {
                        APInvoiceTableset ds = CurrentFullTableset;
                        SetReadyToCalc("", apInvHed.InvoiceNum, apInvHed.VendorNum, false, false, ref ds);
                        CurrentFullTableset = ds;
                    }
                }
                else
                {

                    updRevTaxLnMsc("DELETE");
                    ApInvHedChildDeleted();

                    APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine);
                    if (APInvDtl != null)
                    {
                        refreshttAPInvDtl();

                        foreach (var apInvMsc in (SelectAPInvMsc(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine)))
                        {
                            ttAPInvMsc = new Erp.Tablesets.APInvMscRow();
                            CurrentFullTableset.APInvMsc.Add(ttAPInvMsc);
                            BufferCopy.Copy(apInvMsc, ref ttAPInvMsc);
                            ttAPInvMsc.SysRowID = apInvMsc.SysRowID;
                            APInvMscAfterGetRows();
                            APInvMsc_Foreign_Link();
                        }
                    }
                }

            }
        }


        partial void APInvLnMscTaxAfterGetNew()
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            if (APInvHed != null)
            {
                APInvMsc = FindFirstAPInvMsc(APInvHed.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum);
                if (APInvMsc != null)
                {
                    ttAPInvLnMscTax.CurrencyCode = APInvHed.CurrencyCode;
                    ttAPInvLnMscTax.GroupID = APInvHed.GroupID;
                    ttAPInvLnMscTax.MiscCode = APInvMsc.MiscCode;
                    ttAPInvLnMscTax.APInvMscSysRowID = APInvMsc.SysRowID;
                    if (APInvHed.InPrice)
                    {
                        ttAPInvLnMscTax.Manual = true;
                    }
                    ttAPInvLnMscTax.ManAdd = true;
                }
            }

        }

        partial void APInvLnMscTaxAfterUpdate()
        {

            int saveVendorNum = 0;
            string saveInvoiceNum = string.Empty;
            int saveInvoiceLine = 0;
            int saveMscNum = 0;
            string saveTaxCode = string.Empty;
            string saveRateCode = string.Empty;

            saveVendorNum = ttAPInvLnMscTax.VendorNum;
            saveInvoiceNum = ttAPInvLnMscTax.InvoiceNum;
            saveInvoiceLine = ttAPInvLnMscTax.InvoiceLine;
            saveMscNum = ttAPInvLnMscTax.MscNum;

            var apInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, saveVendorNum, saveInvoiceNum);
            if (apInvHed != null)
            {
                if (apInvHed.InPrice)
                {
                    foreach (var apInvLnMscTax in (this.SelectAPInvLnMscTaxAllWithUpdLock(Session.CompanyID, saveVendorNum, saveInvoiceNum, saveInvoiceLine, saveMscNum)))
                    {

                        apInvLnMscTax.Manual = true;
                        Db.Validate(apInvLnMscTax);
                    }

                    var apInvMsc = FindFirstAPInvMscWithUpdLock(apInvHed.Company, saveVendorNum, saveInvoiceNum, saveInvoiceLine, saveMscNum);

                    if (apInvMsc != null)
                    {
                        apInvMsc.NoTaxRecalc = true;
                        Db.Validate(apInvMsc);
                    }

                    if (apInvHed.ReadyToCalc)
                    {
                        APInvoiceTableset ds = CurrentFullTableset;
                        SetReadyToCalc("", apInvHed.InvoiceNum, apInvHed.VendorNum, false, false, ref ds);
                        CurrentFullTableset = ds;
                    }


                }
                else
                {
                    string vAction = ((BIttAPInvLnMscTax != null) ? "UPDATE" : "ADD");
                    this.updRevTaxLnMsc(vAction);
                    /* Create a ttAPInvHed record to send back current values for tax amounts. */
                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, saveVendorNum, saveInvoiceNum);
                    if (APInvHed != null)
                    {
                        refreshttAPInvHedAfterTaxes();


                        var APInvTaxQuery8 = DBExpressionCompiler.Compile(APInvTaxExpression8);
                        foreach (var APInvTax_iterator in (APInvTaxQuery8(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                        {
                            APInvTax = APInvTax_iterator;
                            refreshttAPInvTax();
                        }/* for each APInvTax */

                        APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, saveInvoiceLine);
                        if (APInvDtl != null)
                        {
                            refreshttAPInvDtl();
                        }
                    }
                }
                APInvMsc = FindFirstAPInvMsc(apInvHed.Company, saveVendorNum, saveInvoiceNum, saveInvoiceLine, saveMscNum);
                if (APInvMsc != null)
                {
                    refreshttAPInvMsc();
                }
            } //not null

            if (HaveAPTaxToLineLevel(ttAPInvLnMscTax.Company) && SalesTaxAllowsNonDeductible(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.TaxCode))
            {
                APSyncAPInvExp.RunSyncAPInvExp(string.Empty, Guid.Empty, Guid.Empty, Guid.Empty, ttAPInvLnMscTax.SysRowID, false, string.Empty, decimal.Zero, "Tax", "APInvLnMscTax", out lAPInvExpUpdated);
            }


            foreach (var APInvExp_iterator in SelectAPInvExpNonDedTax(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, true))
            {
                APInvExp = APInvExp_iterator;
                refreshttAPInvExp();
            }
            foreach (var APInvExp_iterator in SelectAPInvExpNonDedTax(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, false))
            {
                APInvExp = APInvExp_iterator;
                refreshttAPIHAPInvExp();
            }
            lAPInvExpUpdated = true;
            RefreshAfterSyncAPInvExp();
        }


        partial void APInvLnMscTaxBeforeDelete()
        {


            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            if (APInvHed != null)
            {
                rSaveAPInvHedRowid = APInvHed.SysRowID;

                //if APInvLnMscTax being deleted is the only one with TaxCode/RateCode we need to mark the summary APInvTax for deletion from the view
                if ((!ExistsAPLnTax(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, ttAPInvLnMscTax.ECAcquisitionSeq))
                    && (!ExistsAPInvHedMscTax(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, ttAPInvLnMscTax.ECAcquisitionSeq))
                    && (!ExistsAPInvLnMscTax(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, ttAPInvLnMscTax.ECAcquisitionSeq)))
                {
                    Erp.Tables.APInvTax delAPInvTax = this.FindFirstAPInvTax(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, ttAPInvLnMscTax.ECAcquisitionSeq);
                    if (delAPInvTax != null)
                    {

                        if (tmpAPInvTaxRows == null)
                        {
                            tmpAPInvTaxRows = new List<APInvTaxRow>();
                        }

                        tmpAPInvTax = new APInvTaxRow();
                        tmpAPInvTaxRows.Add(tmpAPInvTax);
                        BufferCopy.Copy(delAPInvTax, ref tmpAPInvTax);
                        tmpAPInvTax.SysRowID = delAPInvTax.SysRowID;
                        tmpAPInvTax.RowMod = IceRow.ROWSTATE_DELETED;
                    }
                }
            }
        }

        partial void APInvLnMscTaxBeforeUpdate()
        {

            if (canUpdateInvoice(ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum).canUpdateInvoice == false)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvLnMscTax");
            }
            var SalesTaxQuery4 = DBExpressionCompiler.Compile(SalesTaxExpression4);
            SalesTax = SalesTaxQuery4(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.TaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.AValidTaxCodeIsRequired, "APInvLnMscTax", "TaxCode");
            }
            if (SalesTax.CollectionType == 1)
            {
                ExceptionManager.AddBLException(Strings.WithholdingTaxNotAllowedAtLineLevel, "APInvLnMscTax", "TaxCode");
            }

            if ((SalesTax.CollectionType == 2 || SalesTax.CollectionType == 3) && (SalesTax.Timing != 0 && SalesTax.Timing != 3))
            {
                throw new BLException(Strings.InvoiceTimingForNonInvoiceTaxesIsRequi);
            }

            if (String.IsNullOrEmpty(ttAPInvLnMscTax.RateCode))
            {
                ExceptionManager.AddBLException(Strings.AValidRateCodeIsRequired, "APInvLnMscTax", "RateCode");
            }

            if (APInvHed == null)
            {
                APInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            }

            if (ExceptionManager.Exceptions.Count == 0)
            {
                if (APInvHed.DebitMemo)
                {

                    ttAPInvLnMscTax.DocTaxableAmt = -ttAPInvLnMscTax.DocScrTaxableAmt;
                    ttAPInvLnMscTax.DocReportableAmt = -ttAPInvLnMscTax.DocScrReportableAmt;
                    ttAPInvLnMscTax.DocTaxAmt = -ttAPInvLnMscTax.DocScrTaxAmt;
                    ttAPInvLnMscTax.DocDedTaxAmt = -ttAPInvLnMscTax.DocScrDedTaxAmt;
                    ttAPInvLnMscTax.TaxableAmt = -ttAPInvLnMscTax.ScrTaxableAmt;
                    ttAPInvLnMscTax.Rpt1TaxableAmt = -ttAPInvLnMscTax.Rpt1ScrTaxableAmt;
                    ttAPInvLnMscTax.Rpt2TaxableAmt = -ttAPInvLnMscTax.Rpt2ScrTaxableAmt;
                    ttAPInvLnMscTax.Rpt3TaxableAmt = -ttAPInvLnMscTax.Rpt3ScrTaxableAmt;
                    ttAPInvLnMscTax.ReportableAmt = -ttAPInvLnMscTax.ScrReportableAmt;
                    ttAPInvLnMscTax.Rpt1ReportableAmt = -ttAPInvLnMscTax.Rpt1ScrReportableAmt;
                    ttAPInvLnMscTax.Rpt2ReportableAmt = -ttAPInvLnMscTax.Rpt2ScrReportableAmt;
                    ttAPInvLnMscTax.Rpt3ReportableAmt = -ttAPInvLnMscTax.Rpt3ScrReportableAmt;
                    ttAPInvLnMscTax.TaxAmt = -ttAPInvLnMscTax.ScrTaxAmt;
                    ttAPInvLnMscTax.Rpt1TaxAmt = -ttAPInvLnMscTax.Rpt1ScrTaxAmt;
                    ttAPInvLnMscTax.Rpt2TaxAmt = -ttAPInvLnMscTax.Rpt2ScrTaxAmt;
                    ttAPInvLnMscTax.Rpt3TaxAmt = -ttAPInvLnMscTax.Rpt3ScrTaxAmt;
                    ttAPInvLnMscTax.DedTaxAmt = -ttAPInvLnMscTax.ScrDedTaxAmt;
                    ttAPInvLnMscTax.Rpt1DedTaxAmt = -ttAPInvLnMscTax.Rpt1ScrDedTaxAmt;
                    ttAPInvLnMscTax.Rpt2DedTaxAmt = -ttAPInvLnMscTax.Rpt2ScrDedTaxAmt;
                    ttAPInvLnMscTax.Rpt3DedTaxAmt = -ttAPInvLnMscTax.Rpt3ScrDedTaxAmt;
                    ttAPInvLnMscTax.FixedAmount = -ttAPInvLnMscTax.ScrFixedAmount;
                    ttAPInvLnMscTax.DocFixedAmount = -ttAPInvLnMscTax.DocScrFixedAmount;
                    ttAPInvLnMscTax.Rpt1FixedAmount = -ttAPInvLnMscTax.Rpt1ScrFixedAmount;
                    ttAPInvLnMscTax.Rpt2FixedAmount = -ttAPInvLnMscTax.Rpt2ScrFixedAmount;
                    ttAPInvLnMscTax.Rpt3FixedAmount = -ttAPInvLnMscTax.Rpt3ScrFixedAmount;

                }
                else
                {

                    ttAPInvLnMscTax.DocTaxableAmt = ttAPInvLnMscTax.DocScrTaxableAmt;
                    ttAPInvLnMscTax.DocReportableAmt = ttAPInvLnMscTax.DocScrReportableAmt;
                    ttAPInvLnMscTax.DocTaxAmt = ttAPInvLnMscTax.DocScrTaxAmt;
                    ttAPInvLnMscTax.DocDedTaxAmt = ttAPInvLnMscTax.DocScrDedTaxAmt;
                    ttAPInvLnMscTax.TaxableAmt = ttAPInvLnMscTax.ScrTaxableAmt;
                    ttAPInvLnMscTax.Rpt1TaxableAmt = ttAPInvLnMscTax.Rpt1ScrTaxableAmt;
                    ttAPInvLnMscTax.Rpt2TaxableAmt = ttAPInvLnMscTax.Rpt2ScrTaxableAmt;
                    ttAPInvLnMscTax.Rpt3TaxableAmt = ttAPInvLnMscTax.Rpt3ScrTaxableAmt;
                    ttAPInvLnMscTax.ReportableAmt = ttAPInvLnMscTax.ScrReportableAmt;
                    ttAPInvLnMscTax.Rpt1ReportableAmt = ttAPInvLnMscTax.Rpt1ScrReportableAmt;
                    ttAPInvLnMscTax.Rpt2ReportableAmt = ttAPInvLnMscTax.Rpt2ScrReportableAmt;
                    ttAPInvLnMscTax.Rpt3ReportableAmt = ttAPInvLnMscTax.Rpt3ScrReportableAmt;
                    ttAPInvLnMscTax.TaxAmt = ttAPInvLnMscTax.ScrTaxAmt;
                    ttAPInvLnMscTax.Rpt1TaxAmt = ttAPInvLnMscTax.Rpt1ScrTaxAmt;
                    ttAPInvLnMscTax.Rpt2TaxAmt = ttAPInvLnMscTax.Rpt2ScrTaxAmt;
                    ttAPInvLnMscTax.Rpt3TaxAmt = ttAPInvLnMscTax.Rpt3ScrTaxAmt;
                    ttAPInvLnMscTax.DedTaxAmt = ttAPInvLnMscTax.ScrDedTaxAmt;
                    ttAPInvLnMscTax.Rpt1DedTaxAmt = ttAPInvLnMscTax.Rpt1ScrDedTaxAmt;
                    ttAPInvLnMscTax.Rpt2DedTaxAmt = ttAPInvLnMscTax.Rpt2ScrDedTaxAmt;
                    ttAPInvLnMscTax.Rpt3DedTaxAmt = ttAPInvLnMscTax.Rpt3ScrDedTaxAmt;
                    ttAPInvLnMscTax.FixedAmount = ttAPInvLnMscTax.ScrFixedAmount;
                    ttAPInvLnMscTax.DocFixedAmount = ttAPInvLnMscTax.DocScrFixedAmount;
                    ttAPInvLnMscTax.Rpt1FixedAmount = ttAPInvLnMscTax.Rpt1ScrFixedAmount;
                    ttAPInvLnMscTax.Rpt2FixedAmount = ttAPInvLnMscTax.Rpt2ScrFixedAmount;
                    ttAPInvLnMscTax.Rpt3FixedAmount = ttAPInvLnMscTax.Rpt3ScrFixedAmount;
                }

                if (SalesTax.Timing > 0 && SalesTax.Timing != 3)
                {
                    ttAPInvLnMscTax.DocDefTaxableAmt = ttAPInvLnMscTax.DocTaxableAmt;
                    ttAPInvLnMscTax.DefTaxableAmt = ttAPInvLnMscTax.TaxableAmt;
                    ttAPInvLnMscTax.Rpt1DefTaxableAmt = ttAPInvLnMscTax.Rpt1TaxableAmt;
                    ttAPInvLnMscTax.Rpt2DefTaxableAmt = ttAPInvLnMscTax.Rpt2TaxableAmt;
                    ttAPInvLnMscTax.Rpt3DefTaxableAmt = ttAPInvLnMscTax.Rpt3TaxableAmt;
                    ttAPInvLnMscTax.DocDefTaxAmt = ttAPInvLnMscTax.DocDedTaxAmt;
                    ttAPInvLnMscTax.DefTaxAmt = ttAPInvLnMscTax.DedTaxAmt;
                    ttAPInvLnMscTax.Rpt1DefTaxAmt = ttAPInvLnMscTax.Rpt1DedTaxAmt;
                    ttAPInvLnMscTax.Rpt2DefTaxAmt = ttAPInvLnMscTax.Rpt2DedTaxAmt;
                    ttAPInvLnMscTax.Rpt3DefTaxAmt = ttAPInvLnMscTax.Rpt3DedTaxAmt;

                }
                else
                {
                    ttAPInvLnMscTax.DocDefTaxableAmt = 0;
                    ttAPInvLnMscTax.DefTaxableAmt = 0;
                    ttAPInvLnMscTax.Rpt1DefTaxableAmt = 0;
                    ttAPInvLnMscTax.Rpt2DefTaxableAmt = 0;
                    ttAPInvLnMscTax.Rpt3DefTaxableAmt = 0;
                    ttAPInvLnMscTax.DocDefTaxAmt = 0;
                    ttAPInvLnMscTax.DefTaxAmt = 0;
                    ttAPInvLnMscTax.Rpt1DefTaxAmt = 0;
                    ttAPInvLnMscTax.Rpt2DefTaxAmt = 0;
                    ttAPInvLnMscTax.Rpt3DefTaxAmt = 0;
                }
            }
            SaveBeforeSyncAPInvExp();
        }


        #endregion
        #region APLnTax Table Methods

        partial void APLnTaxAfterDelete()
        {

            APInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            if (APInvHed != null)
            {
                if (APInvHed.InPrice)
                {

                    foreach (var bApLnTax_iterator in (this.SelectAPLnTax(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine, ttAPLnTax.TaxCode, ttAPLnTax.RateCode)))
                    {

                        bApLnTax_iterator.Manual = true;
                        Db.Validate(bApLnTax_iterator);
                    }

                    APInvDtl = FindFirstAPInvWithUpdLockDtl(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine);
                    if (APInvDtl != null)
                    {
                        APInvDtl.NoTaxRecal = true;
                        Db.Validate(APInvDtl);
                    }

                    if (APInvHed.ReadyToCalc)
                    {
                        APInvoiceTableset ds = CurrentFullTableset;
                        SetReadyToCalc("", APInvHed.InvoiceNum, APInvHed.VendorNum, false, false, ref ds);
                        CurrentFullTableset = ds;
                    }
                }
                else
                {
                    updRevTaxLine("DELETE");
                    ApInvHedChildDeleted();
                    APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine);
                    if (APInvDtl != null)
                    {
                        refreshttAPInvDtl();
                    }
                }

            }
        }

        partial void APLnTaxAfterGetNew()
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            if (APInvHed != null)
            {
                ttAPLnTax.CurrencyCode = APInvHed.CurrencyCode;
                ttAPLnTax.GroupID = APInvHed.GroupID;
                if (APInvHed.InPrice)
                {
                    ttAPLnTax.Manual = true;
                }
                ttAPLnTax.ManAdd = true;
            }

        }

        partial void APLnTaxAfterGetRows()
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            if (APInvHed != null)
            {
                ttAPLnTax.CurrencyCode = APInvHed.CurrencyCode;
                ttAPLnTax.GroupID = APInvHed.GroupID;

                if (APInvHed.DebitMemo)
                {
                    ttAPLnTax.DocScrTaxableAmt = -ttAPLnTax.DocTaxableAmt;
                    ttAPLnTax.DocScrReportableAmt = -ttAPLnTax.DocReportableAmt;
                    ttAPLnTax.DocScrTaxAmt = -ttAPLnTax.DocTaxAmt;
                    ttAPLnTax.DocScrDedTaxAmt = -ttAPLnTax.DocDedTaxAmt;
                    ttAPLnTax.DocScrTaxAmtVar = -ttAPLnTax.DocTaxAmtVar;
                    ttAPLnTax.ScrTaxableAmt = -ttAPLnTax.TaxableAmt;
                    ttAPLnTax.Rpt1ScrTaxableAmt = -ttAPLnTax.Rpt1TaxableAmt;
                    ttAPLnTax.Rpt2ScrTaxableAmt = -ttAPLnTax.Rpt2TaxableAmt;
                    ttAPLnTax.Rpt3ScrTaxableAmt = -ttAPLnTax.Rpt3TaxableAmt;
                    ttAPLnTax.ScrReportableAmt = -ttAPLnTax.ReportableAmt;
                    ttAPLnTax.Rpt1ScrReportableAmt = -ttAPLnTax.Rpt1ReportableAmt;
                    ttAPLnTax.Rpt2ScrReportableAmt = -ttAPLnTax.Rpt2ReportableAmt;
                    ttAPLnTax.Rpt3ScrReportableAmt = -ttAPLnTax.Rpt3ReportableAmt;
                    ttAPLnTax.ScrTaxAmt = -ttAPLnTax.TaxAmt;
                    ttAPLnTax.Rpt1ScrTaxAmt = -ttAPLnTax.Rpt1TaxAmt;
                    ttAPLnTax.Rpt2ScrTaxAmt = -ttAPLnTax.Rpt2TaxAmt;
                    ttAPLnTax.Rpt3ScrTaxAmt = -ttAPLnTax.Rpt3TaxAmt;
                    ttAPLnTax.ScrDedTaxAmt = -ttAPLnTax.DedTaxAmt;
                    ttAPLnTax.Rpt1ScrDedTaxAmt = -ttAPLnTax.Rpt1DedTaxAmt;
                    ttAPLnTax.Rpt2ScrDedTaxAmt = -ttAPLnTax.Rpt2DedTaxAmt;
                    ttAPLnTax.Rpt3ScrDedTaxAmt = -ttAPLnTax.Rpt3DedTaxAmt;
                    ttAPLnTax.ScrTaxAmtVar = -ttAPLnTax.TaxAmtVar;
                    ttAPLnTax.Rpt1ScrTaxAmtVar = -ttAPLnTax.Rpt1TaxAmtVar;
                    ttAPLnTax.Rpt2ScrTaxAmtVar = -ttAPLnTax.Rpt2TaxAmtVar;
                    ttAPLnTax.Rpt3ScrTaxAmtVar = -ttAPLnTax.Rpt3TaxAmtVar;
                    ttAPLnTax.DocScrFixedAmount = -ttAPLnTax.DocFixedAmount;
                    ttAPLnTax.ScrFixedAmount = -ttAPLnTax.FixedAmount;
                    ttAPLnTax.Rpt1ScrFixedAmount = -ttAPLnTax.Rpt1FixedAmount;
                    ttAPLnTax.Rpt2ScrFixedAmount = -ttAPLnTax.Rpt2FixedAmount;
                    ttAPLnTax.Rpt3ScrFixedAmount = -ttAPLnTax.Rpt3FixedAmount;
                }
                else
                {
                    ttAPLnTax.DocScrTaxableAmt = ttAPLnTax.DocTaxableAmt;
                    ttAPLnTax.DocScrReportableAmt = ttAPLnTax.DocReportableAmt;
                    ttAPLnTax.DocScrTaxAmt = ttAPLnTax.DocTaxAmt;
                    ttAPLnTax.DocScrDedTaxAmt = ttAPLnTax.DocDedTaxAmt;
                    ttAPLnTax.DocScrTaxAmtVar = ttAPLnTax.DocTaxAmtVar;
                    ttAPLnTax.ScrTaxableAmt = ttAPLnTax.TaxableAmt;
                    ttAPLnTax.Rpt1ScrTaxableAmt = ttAPLnTax.Rpt1TaxableAmt;
                    ttAPLnTax.Rpt2ScrTaxableAmt = ttAPLnTax.Rpt2TaxableAmt;
                    ttAPLnTax.Rpt3ScrTaxableAmt = ttAPLnTax.Rpt3TaxableAmt;
                    ttAPLnTax.ScrReportableAmt = ttAPLnTax.ReportableAmt;
                    ttAPLnTax.Rpt1ScrReportableAmt = ttAPLnTax.Rpt1ReportableAmt;
                    ttAPLnTax.Rpt2ScrReportableAmt = ttAPLnTax.Rpt2ReportableAmt;
                    ttAPLnTax.Rpt3ScrReportableAmt = ttAPLnTax.Rpt3ReportableAmt;
                    ttAPLnTax.ScrTaxAmt = ttAPLnTax.TaxAmt;
                    ttAPLnTax.Rpt1ScrTaxAmt = ttAPLnTax.Rpt1TaxAmt;
                    ttAPLnTax.Rpt2ScrTaxAmt = ttAPLnTax.Rpt2TaxAmt;
                    ttAPLnTax.Rpt3ScrTaxAmt = ttAPLnTax.Rpt3TaxAmt;
                    ttAPLnTax.ScrDedTaxAmt = ttAPLnTax.DedTaxAmt;
                    ttAPLnTax.Rpt1ScrDedTaxAmt = ttAPLnTax.Rpt1DedTaxAmt;
                    ttAPLnTax.Rpt2ScrDedTaxAmt = ttAPLnTax.Rpt2DedTaxAmt;
                    ttAPLnTax.Rpt3ScrDedTaxAmt = ttAPLnTax.Rpt3DedTaxAmt;
                    ttAPLnTax.ScrTaxAmtVar = ttAPLnTax.TaxAmtVar;
                    ttAPLnTax.Rpt1ScrTaxAmtVar = ttAPLnTax.Rpt1TaxAmtVar;
                    ttAPLnTax.Rpt2ScrTaxAmtVar = ttAPLnTax.Rpt2TaxAmtVar;
                    ttAPLnTax.Rpt3ScrTaxAmtVar = ttAPLnTax.Rpt3TaxAmtVar;
                    ttAPLnTax.DocScrFixedAmount = ttAPLnTax.DocFixedAmount;
                    ttAPLnTax.ScrFixedAmount = ttAPLnTax.FixedAmount;
                    ttAPLnTax.Rpt1ScrFixedAmount = ttAPLnTax.Rpt1FixedAmount;
                    ttAPLnTax.Rpt2ScrFixedAmount = ttAPLnTax.Rpt2FixedAmount;
                    ttAPLnTax.Rpt3ScrFixedAmount = ttAPLnTax.Rpt3FixedAmount;
                }
                switch (ttAPLnTax.CollectionType)
                {
                    case 0:
                        {
                            ttAPLnTax.DescCollectionType = "Invoice";
                        }
                        break;
                    case 1:
                        {
                            ttAPLnTax.DescCollectionType = "WithHolding";
                        }
                        break;
                    case 2:
                        {
                            ttAPLnTax.DescCollectionType = "Self-Assessment";
                        }
                        break;
                    case 3:
                        {
                            ttAPLnTax.DescCollectionType = "Self-AssessmentDual";
                        }
                        break;
                }
            }
            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine);
            if (APInvDtl != null)
            {
                if (APInvDtl.NoTaxRecal == true)
                {
                    ttAPLnTax.DisableManual = true;
                }
                else
                {
                    ttAPLnTax.DisableManual = false;
                }
            }
        }

        partial void APIHAPLnTaxAfterGetRows()
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPIHAPLnTax.Company, ttAPIHAPLnTax.VendorNum, ttAPIHAPLnTax.InvoiceNum);
            if (APInvHed != null)
            {
                ttAPIHAPLnTax.CurrencyCode = APInvHed.CurrencyCode;
                ttAPIHAPLnTax.GroupID = APInvHed.GroupID;

                if (APInvHed.DebitMemo)
                {
                    ttAPIHAPLnTax.DocScrTaxableAmt = -ttAPIHAPLnTax.DocTaxableAmt;
                    ttAPIHAPLnTax.DocScrReportableAmt = -ttAPIHAPLnTax.DocReportableAmt;
                    ttAPIHAPLnTax.DocScrTaxAmt = -ttAPIHAPLnTax.DocTaxAmt;
                    ttAPIHAPLnTax.DocScrDedTaxAmt = -ttAPIHAPLnTax.DocDedTaxAmt;
                    ttAPIHAPLnTax.DocScrTaxAmtVar = -ttAPIHAPLnTax.DocTaxAmtVar;
                    ttAPIHAPLnTax.ScrTaxableAmt = -ttAPIHAPLnTax.TaxableAmt;
                    ttAPIHAPLnTax.Rpt1ScrTaxableAmt = -ttAPIHAPLnTax.Rpt1TaxableAmt;
                    ttAPIHAPLnTax.Rpt2ScrTaxableAmt = -ttAPIHAPLnTax.Rpt2TaxableAmt;
                    ttAPIHAPLnTax.Rpt3ScrTaxableAmt = -ttAPIHAPLnTax.Rpt3TaxableAmt;
                    ttAPIHAPLnTax.ScrReportableAmt = -ttAPIHAPLnTax.ReportableAmt;
                    ttAPIHAPLnTax.Rpt1ScrReportableAmt = -ttAPIHAPLnTax.Rpt1ReportableAmt;
                    ttAPIHAPLnTax.Rpt2ScrReportableAmt = -ttAPIHAPLnTax.Rpt2ReportableAmt;
                    ttAPIHAPLnTax.Rpt3ScrReportableAmt = -ttAPIHAPLnTax.Rpt3ReportableAmt;
                    ttAPIHAPLnTax.ScrTaxAmt = -ttAPIHAPLnTax.TaxAmt;
                    ttAPIHAPLnTax.Rpt1ScrTaxAmt = -ttAPIHAPLnTax.Rpt1TaxAmt;
                    ttAPIHAPLnTax.Rpt2ScrTaxAmt = -ttAPIHAPLnTax.Rpt2TaxAmt;
                    ttAPIHAPLnTax.Rpt3ScrTaxAmt = -ttAPIHAPLnTax.Rpt3TaxAmt;
                    ttAPIHAPLnTax.ScrDedTaxAmt = -ttAPIHAPLnTax.DedTaxAmt;
                    ttAPIHAPLnTax.Rpt1ScrDedTaxAmt = -ttAPIHAPLnTax.Rpt1DedTaxAmt;
                    ttAPIHAPLnTax.Rpt2ScrDedTaxAmt = -ttAPIHAPLnTax.Rpt2DedTaxAmt;
                    ttAPIHAPLnTax.Rpt3ScrDedTaxAmt = -ttAPIHAPLnTax.Rpt3DedTaxAmt;
                    ttAPIHAPLnTax.ScrTaxAmtVar = -ttAPIHAPLnTax.TaxAmtVar;
                    ttAPIHAPLnTax.Rpt1ScrTaxAmtVar = -ttAPIHAPLnTax.Rpt1TaxAmtVar;
                    ttAPIHAPLnTax.Rpt2ScrTaxAmtVar = -ttAPIHAPLnTax.Rpt2TaxAmtVar;
                    ttAPIHAPLnTax.Rpt3ScrTaxAmtVar = -ttAPIHAPLnTax.Rpt3TaxAmtVar;

                }
                else
                {
                    ttAPIHAPLnTax.DocScrTaxableAmt = ttAPIHAPLnTax.DocTaxableAmt;
                    ttAPIHAPLnTax.DocScrReportableAmt = ttAPIHAPLnTax.DocReportableAmt;
                    ttAPIHAPLnTax.DocScrTaxAmt = ttAPIHAPLnTax.DocTaxAmt;
                    ttAPIHAPLnTax.DocScrDedTaxAmt = ttAPIHAPLnTax.DocDedTaxAmt;
                    ttAPIHAPLnTax.DocScrTaxAmtVar = ttAPIHAPLnTax.DocTaxAmtVar;
                    ttAPIHAPLnTax.ScrTaxableAmt = ttAPIHAPLnTax.TaxableAmt;
                    ttAPIHAPLnTax.Rpt1ScrTaxableAmt = ttAPIHAPLnTax.Rpt1TaxableAmt;
                    ttAPIHAPLnTax.Rpt2ScrTaxableAmt = ttAPIHAPLnTax.Rpt2TaxableAmt;
                    ttAPIHAPLnTax.Rpt3ScrTaxableAmt = ttAPIHAPLnTax.Rpt3TaxableAmt;
                    ttAPIHAPLnTax.ScrReportableAmt = ttAPIHAPLnTax.ReportableAmt;
                    ttAPIHAPLnTax.Rpt1ScrReportableAmt = ttAPIHAPLnTax.Rpt1ReportableAmt;
                    ttAPIHAPLnTax.Rpt2ScrReportableAmt = ttAPIHAPLnTax.Rpt2ReportableAmt;
                    ttAPIHAPLnTax.Rpt3ScrReportableAmt = ttAPIHAPLnTax.Rpt3ReportableAmt;
                    ttAPIHAPLnTax.ScrTaxAmt = ttAPIHAPLnTax.TaxAmt;
                    ttAPIHAPLnTax.Rpt1ScrTaxAmt = ttAPIHAPLnTax.Rpt1TaxAmt;
                    ttAPIHAPLnTax.Rpt2ScrTaxAmt = ttAPIHAPLnTax.Rpt2TaxAmt;
                    ttAPIHAPLnTax.Rpt3ScrTaxAmt = ttAPIHAPLnTax.Rpt3TaxAmt;
                    ttAPIHAPLnTax.ScrDedTaxAmt = ttAPIHAPLnTax.DedTaxAmt;
                    ttAPIHAPLnTax.Rpt1ScrDedTaxAmt = ttAPIHAPLnTax.Rpt1DedTaxAmt;
                    ttAPIHAPLnTax.Rpt2ScrDedTaxAmt = ttAPIHAPLnTax.Rpt2DedTaxAmt;
                    ttAPIHAPLnTax.Rpt3ScrDedTaxAmt = ttAPIHAPLnTax.Rpt3DedTaxAmt;
                    ttAPIHAPLnTax.ScrTaxAmtVar = ttAPIHAPLnTax.TaxAmtVar;
                    ttAPIHAPLnTax.Rpt1ScrTaxAmtVar = ttAPIHAPLnTax.Rpt1TaxAmtVar;
                    ttAPIHAPLnTax.Rpt2ScrTaxAmtVar = ttAPIHAPLnTax.Rpt2TaxAmtVar;
                    ttAPIHAPLnTax.Rpt3ScrTaxAmtVar = ttAPIHAPLnTax.Rpt3TaxAmtVar;

                }

            }
            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPIHAPLnTax.Company, ttAPIHAPLnTax.VendorNum, ttAPIHAPLnTax.InvoiceNum, ttAPIHAPLnTax.InvoiceLine);
            if (APInvDtl != null)
            {
                if (APInvDtl.NoTaxRecal == true)
                {
                    ttAPIHAPLnTax.DisableManual = true;
                }
                else
                {
                    ttAPIHAPLnTax.DisableManual = false;
                }
            }
        }
        partial void APLnTaxAfterUpdate()
        {
            int saveVendorNum = 0;
            string saveInvoiceNum = string.Empty;
            int saveInvoiceLine = 0;
            string saveTaxCode = string.Empty;
            Erp.Tables.APLnTax bAPLnTax = null;

            saveVendorNum = ttAPLnTax.VendorNum;
            saveInvoiceNum = ttAPLnTax.InvoiceNum;
            saveInvoiceLine = ttAPLnTax.InvoiceLine;
            saveTaxCode = ttAPLnTax.TaxCode;

            if (APInvHed != null)
            {
                if (APInvHed.InPrice)
                {

                    foreach (var bApLnTax_iterator in (this.SelectAPLnTaxAll(Session.CompanyID, saveVendorNum, saveInvoiceNum, saveInvoiceLine)))
                    {
                        bAPLnTax = bApLnTax_iterator;
                        bApLnTax_iterator.Manual = true;
                        Db.Validate(bAPLnTax);
                    }

                    APInvDtl = FindFirstAPInvWithUpdLockDtl(Session.CompanyID, saveVendorNum, saveInvoiceNum, saveInvoiceLine);
                    if (APInvDtl != null)
                    {
                        APInvDtl.NoTaxRecal = true;
                        Db.Validate(APInvDtl);
                    }


                    if (APInvHed.ReadyToCalc)
                    {
                        APInvoiceTableset ds = CurrentFullTableset;
                        SetReadyToCalc("", APInvHed.InvoiceNum, APInvHed.VendorNum, false, false, ref ds);
                        CurrentFullTableset = ds;
                    }
                }
                else
                {
                    /* SCR #44624 - make sure you update the Reverse Charge or EC Acquisition tax line */
                    string vAction = ((BIttAPLnTax != null) ? "UPDATE" : "ADD");
                    updRevTaxLine(vAction);

                    /* Create a ttAPInvHed record to send back current values for tax amounts. */
                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, APLnTax.Company, APLnTax.VendorNum, APLnTax.InvoiceNum);
                    if (APInvHed != null)
                    {
                        refreshttAPInvHedAfterTaxes();

                        var APInvTaxQuery8 = DBExpressionCompiler.Compile(APInvTaxExpression8);
                        foreach (var APInvTax_iterator in (APInvTaxQuery8(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
                        {
                            APInvTax = APInvTax_iterator;
                            refreshttAPInvTax();
                        }/* for each APInvTax */

                        APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, APLnTax.Company, APLnTax.VendorNum, APLnTax.InvoiceNum, APLnTax.InvoiceLine);
                        if (APInvDtl != null)
                        {
                            refreshttAPInvDtl();
                            foreach (var APInvExp_iterator in (SelectAPInvExp(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine)))
                            {
                                APInvExp = APInvExp_iterator;
                                refreshttAPInvExp();
                            }
                            lAPInvExpUpdated = true;
                            RefreshAfterSyncAPInvExp();
                            if (ttAPInvDtl != null)
                                getLineTotals();
                        }
                    }
                }
                if (Internal.CSF.PEExtensions.IsPELocalization(Session) &&
                    ttAPLnTax != null &&
                    BIttAPLnTax != null &&
                    (ttAPLnTax.Manual != BIttAPLnTax.Manual ||
                     ttAPLnTax.DocTaxAmt != BIttAPLnTax.DocTaxAmt)
                    )
                {
                    using (var libCSFPeru = new Internal.CSF.Peru(this.Db))
                    {
                        libCSFPeru.RecalculateWHTaxes(APInvHed, saveTaxCode);
                    }
                }
            } //not null
        }


        partial void APLnTaxBeforeCreate()
        {

            if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt"))
            {
                APInvHedPartial APInvHedPartial = FindFirstAPInvHedPartial(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
                if (APInvHedPartial != null)
                {
                    if (!((ExistsAPInvHed(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, true) || ExistsXbSystLineTax(Session.CompanyID, true)) &&
                        !(APInvHedPartial.MatchedFromLI && !APInvHedPartial.AllowOverrideLI)))
                    {
                        ExceptionManager.AddBLException(Strings.LineTaxNotAllowed, "APLnTax");
                    }
                }
            }
        }

        partial void APLnTaxBeforeDelete()
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            if (APInvHed != null)
            {
                rSaveAPInvHedRowid = APInvHed.SysRowID;

                //if APLnTax being deleted is the only one with TaxCode/RateCode we need to mark the summary APInvTax for deletion from the view
                if ((!ExistsAPLnTax5(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, ttAPLnTax.ECAcquisitionSeq))
                    && (!ExistsAPInvHedMscTax(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, ttAPLnTax.ECAcquisitionSeq))
                    && (!ExistsAPInvLnMscTax(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, ttAPLnTax.ECAcquisitionSeq)))
                {
                    Erp.Tables.APInvTax delAPInvTax = this.FindFirstAPInvTax(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, ttAPLnTax.ECAcquisitionSeq);
                    if (delAPInvTax != null)
                    {
                        if (tmpAPInvTaxRows == null)
                        {
                            tmpAPInvTaxRows = new List<APInvTaxRow>();
                        }

                        tmpAPInvTax = new APInvTaxRow();
                        tmpAPInvTaxRows.Add(tmpAPInvTax);
                        BufferCopy.Copy(delAPInvTax, ref tmpAPInvTax);
                        tmpAPInvTax.SysRowID = delAPInvTax.SysRowID;
                        tmpAPInvTax.RowMod = IceRow.ROWSTATE_DELETED;
                    }
                }
            }
        }

        partial void APLnTaxBeforeUpdate()
        {
            if (canUpdateInvoice(ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum).canUpdateInvoice == false)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APLnTax");
            }
            var SalesTaxQuery4 = DBExpressionCompiler.Compile(SalesTaxExpression4);
            SalesTax = SalesTaxQuery4(Db, ttAPLnTax.Company, ttAPLnTax.TaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.AValidTaxCodeIsRequired, "APLnTax", "TaxCode");
            }

            if ((SalesTax.CollectionType == 2 || SalesTax.CollectionType == 3) && (SalesTax.Timing != 0 && SalesTax.Timing != 3))
            {
                throw new BLException(Strings.InvoiceTimingForNonInvoiceTaxesIsRequi);
            }

            if (SalesTax.CollectionType == 1)
            {
                ExceptionManager.AddBLException(Strings.WithholdingTaxNotAllowedAtLineLevel, "APLnTax", "TaxCode");
            }

            if (String.IsNullOrEmpty(ttAPLnTax.RateCode))
            {
                ExceptionManager.AddBLException(Strings.AValidRateCodeIsRequired, "APLnTax", "RateCode");
            }

            if (APInvHed == null)
            {
                APInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            }

            if (ExceptionManager.Exceptions.Count == 0)
            {
                if (APInvHed.DebitMemo == true)
                {
                    ttAPLnTax.DocTaxableAmt = -ttAPLnTax.DocScrTaxableAmt;
                    ttAPLnTax.DocReportableAmt = -ttAPLnTax.DocScrReportableAmt;
                    ttAPLnTax.DocTaxAmt = -ttAPLnTax.DocScrTaxAmt;
                    ttAPLnTax.DocDedTaxAmt = -ttAPLnTax.DocScrDedTaxAmt;
                    ttAPLnTax.DocTaxAmtVar = -ttAPLnTax.DocScrTaxAmtVar;
                    ttAPLnTax.TaxableAmt = -ttAPLnTax.ScrTaxableAmt;
                    ttAPLnTax.Rpt1TaxableAmt = -ttAPLnTax.Rpt1ScrTaxableAmt;
                    ttAPLnTax.Rpt2TaxableAmt = -ttAPLnTax.Rpt2ScrTaxableAmt;
                    ttAPLnTax.Rpt3TaxableAmt = -ttAPLnTax.Rpt3ScrTaxableAmt;
                    ttAPLnTax.ReportableAmt = -ttAPLnTax.ScrReportableAmt;
                    ttAPLnTax.Rpt1ReportableAmt = -ttAPLnTax.Rpt1ScrReportableAmt;
                    ttAPLnTax.Rpt2ReportableAmt = -ttAPLnTax.Rpt2ScrReportableAmt;
                    ttAPLnTax.Rpt3ReportableAmt = -ttAPLnTax.Rpt3ScrReportableAmt;
                    ttAPLnTax.TaxAmt = -ttAPLnTax.ScrTaxAmt;
                    ttAPLnTax.Rpt1TaxAmt = -ttAPLnTax.Rpt1ScrTaxAmt;
                    ttAPLnTax.Rpt2TaxAmt = -ttAPLnTax.Rpt2ScrTaxAmt;
                    ttAPLnTax.Rpt3TaxAmt = -ttAPLnTax.Rpt3ScrTaxAmt;
                    ttAPLnTax.DedTaxAmt = -ttAPLnTax.ScrDedTaxAmt;
                    ttAPLnTax.Rpt1DedTaxAmt = -ttAPLnTax.Rpt1ScrDedTaxAmt;
                    ttAPLnTax.Rpt2DedTaxAmt = -ttAPLnTax.Rpt2ScrDedTaxAmt;
                    ttAPLnTax.Rpt3DedTaxAmt = -ttAPLnTax.Rpt3ScrDedTaxAmt;
                    ttAPLnTax.TaxAmtVar = -ttAPLnTax.ScrTaxAmtVar;
                    ttAPLnTax.Rpt1TaxAmtVar = -ttAPLnTax.Rpt1ScrTaxAmtVar;
                    ttAPLnTax.Rpt2TaxAmtVar = -ttAPLnTax.Rpt2ScrTaxAmtVar;
                    ttAPLnTax.Rpt3TaxAmtVar = -ttAPLnTax.Rpt3ScrTaxAmtVar;
                    ttAPLnTax.FixedAmount = -ttAPLnTax.ScrFixedAmount;
                    ttAPLnTax.DocFixedAmount = -ttAPLnTax.DocScrFixedAmount;
                    ttAPLnTax.Rpt1FixedAmount = -ttAPLnTax.Rpt1ScrFixedAmount;
                    ttAPLnTax.Rpt2FixedAmount = -ttAPLnTax.Rpt2ScrFixedAmount;
                    ttAPLnTax.Rpt3FixedAmount = -ttAPLnTax.Rpt3ScrFixedAmount;
                }
                else
                {
                    ttAPLnTax.DocTaxableAmt = ttAPLnTax.DocScrTaxableAmt;
                    ttAPLnTax.DocReportableAmt = ttAPLnTax.DocScrReportableAmt;
                    ttAPLnTax.DocTaxAmt = ttAPLnTax.DocScrTaxAmt;
                    ttAPLnTax.DocDedTaxAmt = ttAPLnTax.DocScrDedTaxAmt;
                    ttAPLnTax.DocTaxAmtVar = ttAPLnTax.DocScrTaxAmtVar;
                    ttAPLnTax.TaxableAmt = ttAPLnTax.ScrTaxableAmt;
                    ttAPLnTax.Rpt1TaxableAmt = ttAPLnTax.Rpt1ScrTaxableAmt;
                    ttAPLnTax.Rpt2TaxableAmt = ttAPLnTax.Rpt2ScrTaxableAmt;
                    ttAPLnTax.Rpt3TaxableAmt = ttAPLnTax.Rpt3ScrTaxableAmt;
                    ttAPLnTax.ReportableAmt = ttAPLnTax.ScrReportableAmt;
                    ttAPLnTax.Rpt1ReportableAmt = ttAPLnTax.Rpt1ScrReportableAmt;
                    ttAPLnTax.Rpt2ReportableAmt = ttAPLnTax.Rpt2ScrReportableAmt;
                    ttAPLnTax.Rpt3ReportableAmt = ttAPLnTax.Rpt3ScrReportableAmt;
                    ttAPLnTax.TaxAmt = ttAPLnTax.ScrTaxAmt;
                    ttAPLnTax.Rpt1TaxAmt = ttAPLnTax.Rpt1ScrTaxAmt;
                    ttAPLnTax.Rpt2TaxAmt = ttAPLnTax.Rpt2ScrTaxAmt;
                    ttAPLnTax.Rpt3TaxAmt = ttAPLnTax.Rpt3ScrTaxAmt;
                    ttAPLnTax.DedTaxAmt = ttAPLnTax.ScrDedTaxAmt;
                    ttAPLnTax.Rpt1DedTaxAmt = ttAPLnTax.Rpt1ScrDedTaxAmt;
                    ttAPLnTax.Rpt2DedTaxAmt = ttAPLnTax.Rpt2ScrDedTaxAmt;
                    ttAPLnTax.Rpt3DedTaxAmt = ttAPLnTax.Rpt3ScrDedTaxAmt;
                    ttAPLnTax.TaxAmtVar = ttAPLnTax.ScrTaxAmtVar;
                    ttAPLnTax.Rpt1TaxAmtVar = ttAPLnTax.Rpt1ScrTaxAmtVar;
                    ttAPLnTax.Rpt2TaxAmtVar = ttAPLnTax.Rpt2ScrTaxAmtVar;
                    ttAPLnTax.Rpt3TaxAmtVar = ttAPLnTax.Rpt3ScrTaxAmtVar;
                    ttAPLnTax.FixedAmount = ttAPLnTax.ScrFixedAmount;
                    ttAPLnTax.DocFixedAmount = ttAPLnTax.DocScrFixedAmount;
                    ttAPLnTax.Rpt1FixedAmount = ttAPLnTax.Rpt1ScrFixedAmount;
                    ttAPLnTax.Rpt2FixedAmount = ttAPLnTax.Rpt2ScrFixedAmount;
                    ttAPLnTax.Rpt3FixedAmount = ttAPLnTax.Rpt3ScrFixedAmount;
                }

                if (SalesTax.Timing > 0 && SalesTax.Timing != 3)
                {
                    ttAPLnTax.DocDefTaxableAmt = ttAPLnTax.DocTaxableAmt;
                    ttAPLnTax.DefTaxableAmt = ttAPLnTax.TaxableAmt;
                    ttAPLnTax.Rpt1DefTaxableAmt = ttAPLnTax.Rpt1TaxableAmt;
                    ttAPLnTax.Rpt2DefTaxableAmt = ttAPLnTax.Rpt2TaxableAmt;
                    ttAPLnTax.Rpt3DefTaxableAmt = ttAPLnTax.Rpt3TaxableAmt;
                    ttAPLnTax.DocDefTaxAmt = ttAPLnTax.DocDedTaxAmt;
                    ttAPLnTax.DefTaxAmt = ttAPLnTax.DedTaxAmt;
                    ttAPLnTax.Rpt1DefTaxAmt = ttAPLnTax.Rpt1DedTaxAmt;
                    ttAPLnTax.Rpt2DefTaxAmt = ttAPLnTax.Rpt2DedTaxAmt;
                    ttAPLnTax.Rpt3DefTaxAmt = ttAPLnTax.Rpt3DedTaxAmt;
                }
                else
                {
                    ttAPLnTax.DocDefTaxableAmt = 0;
                    ttAPLnTax.DefTaxableAmt = 0;
                    ttAPLnTax.Rpt1DefTaxableAmt = 0;
                    ttAPLnTax.Rpt2DefTaxableAmt = 0;
                    ttAPLnTax.Rpt3DefTaxableAmt = 0;
                    ttAPLnTax.DocDefTaxAmt = 0;
                    ttAPLnTax.DefTaxAmt = 0;
                    ttAPLnTax.Rpt1DefTaxAmt = 0;
                    ttAPLnTax.Rpt2DefTaxAmt = 0;
                    ttAPLnTax.Rpt3DefTaxAmt = 0;
                }
            }

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine);
            ErpCallContext.SetDisposableKey("NonRecTax-APInvDtl");
            ErpCallContext.SetDisposableKeyValue(new KeyValuePair<string, object>("NonRecTax-APInvDtl", APInvDtl.SysRowID));
            SaveBeforeSyncAPInvExp();
        }

        #endregion

        #region Peru Localization Table Methods
        partial void PEAPInvTaxAfterDelete()
        {
            if (isPeruLocalization)
            {
                APInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, ttPEAPInvTax.VendorNum, ttPEAPInvTax.InvoiceNum);
                if (APInvHed != null)
                {
                    APInvHed.PEDetTaxAmt = SelectPEAPInvTaxSum(Session.CompanyID, ttPEAPInvTax.VendorNum, ttPEAPInvTax.InvoiceNum);
                    roundPEDetractions();
                    refreshttAPInvHed();
                }
            }
        }

        partial void PEAPInvTaxAfterUpdate()
        {
            if (isPeruLocalization)
            {
                PEAPInvTax peAPInvTax = this.FindFirstPEAPInvTaxUpdLock(Session.CompanyID, ttPEAPInvTax.VendorNum, ttPEAPInvTax.InvoiceNum);
                if (peAPInvTax != null)
                {
                    if (ttPEAPInvTax.TaxableAmt != BIttPEAPInvTax.TaxableAmt && ttPEAPInvTax.TaxAmt == BIttPEAPInvTax.TaxAmt)
                    {
                        TaxRate taxRate = FindLastTaxRate(Session.CompanyID, peAPInvTax.TaxCode, peAPInvTax.RateCode, peAPInvTax.TaxRateDate);
                        if (taxRate != null)
                        {
                            peAPInvTax.TaxAmt = (peAPInvTax.TaxableAmt * (taxRate.TaxPercent / 100));
                            ttPEAPInvTax.TaxAmt = peAPInvTax.TaxAmt;
                        }

                    }
                    ttPEAPInvTax.ReportableAmt = peAPInvTax.TaxableAmt;
                    peAPInvTax.ReportableAmt = peAPInvTax.TaxableAmt;
                    APInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, ttPEAPInvTax.VendorNum, ttPEAPInvTax.InvoiceNum);
                    if (APInvHed != null)
                    {
                        APInvHed.PEDetTaxAmt = peAPInvTax.TaxAmt;
                        roundPEDetractions();
                        refreshttAPInvHed();
                    }

                }
            }
        }

        partial void PEAPInvTaxAfterGetRows()
        {
            if (isPeruLocalization)
            {
                ttPEAPInvTax.GroupID = ((ttAPInvHed != null) ? ttAPInvHed.GroupID : "");
            }
        }

        partial void PESUNATDtlAfterGetRows()
        {
            if (isPeruLocalization)
            {
                string outGroupID = string.Empty;
                getAPInvHedAttributes(ttPESUNATDtl.VendorNum, ttPESUNATDtl.InvoiceNum, out bool outDebitMemo, out bool outPosted, out outGroupID);
                ttPESUNATDtl.GroupID = outGroupID;
            }
        }

        partial void PESUNATDtlAfterGetNew()
        {
            if (isPeruLocalization)
            {
                int? iMaxLineNum = null;

                getAPInvHedAttributes(ttPESUNATDtl.VendorNum, ttPESUNATDtl.InvoiceNum, out bool outDebitMemo, out bool outPosted, out string outGroupID);
                ttPESUNATDtl.GroupID = outGroupID;
                iMaxLineNum = FindPESUNATDtlMaxLineNum(Session.CompanyID, ttPESUNATDtl.VendorNum, ttPESUNATDtl.InvoiceNum);
                ttPESUNATDtl.LineNum = (iMaxLineNum == null ? 1 : (int)++iMaxLineNum);
            }
        }

        partial void PEAPInvTaxBeforeGetNew()
        {
            throw new BLException(Strings.CreatOfTaxDetraNotAllowed, "PEAPInvTax");
        }

        #endregion

        private void ApplyDateChanged()
        {
            var FiscalPerQuery = DBExpressionCompiler.Compile(FiscalPerExpression);
            FiscalPer = FiscalPerQuery(Db, Session.CompanyID, CompanyFiscalCalendarID, ttAPInvHed.TransApplyDate, ttAPInvHed.TransApplyDate);
            if (FiscalPer == null)
            {
                if (ttAPInvHed.TransApplyDate == null)
                {
                    ttAPInvHed.ApplyDate = null;
                }
                else
                {
                    ttAPInvHed.ApplyDate = ttAPInvHed.TransApplyDate;
                }

                ttAPInvHed.FiscalCalendarID = CompanyFiscalCalendarID;
                ttAPInvHed.FiscalPeriod = 0;
                ttAPInvHed.FiscalYear = 0;
                ttAPInvHed.FiscalYearSuffix = "";
            }
            else
            {
                if (ttAPInvHed.TransApplyDate == null)
                {
                    ttAPInvHed.ApplyDate = null;
                }
                else
                {
                    ttAPInvHed.ApplyDate = ttAPInvHed.TransApplyDate;
                }

                ttAPInvHed.FiscalCalendarID = FiscalPer.FiscalCalendarID;
                ttAPInvHed.FiscalPeriod = FiscalPer.FiscalPeriod;
                ttAPInvHed.FiscalYear = FiscalPer.FiscalYear;
                ttAPInvHed.FiscalYearSuffix = FiscalPer.FiscalYearSuffix;
            }
            getExchangeRate("Lock");
        }

        private void AssignAPInvHedExtAmtFields(bool Tracker)
        {
            Erp.Tables.APInvHed refAPInvHed = null;

            if (!Tracker)
            {
                if (vUseDate == 1)
                {
                    vExDate = ttAPInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = ttAPInvHed.ApplyDate;
                }

                if (ttAPInvHed.DebitMemo && ttAPInvHed.InvoiceRef != string.Empty)
                {
                    refAPInvHed = FindFirstAPInvHed(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceRef);
                    if (refAPInvHed != null)
                    {
                        if (!apSystPartial.CopyExcRateDM)
                        {
                            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                        }
                        else
                        {
                            if (ttAPInvHed.LockRate || !ttAPInvHed.CurrencyCode.KeyEquals(refAPInvHed.CurrencyCode) || !ttAPInvHed.RateGrpCode.KeyEquals(refAPInvHed.RateGrpCode))
                            {
                                this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                            }
                            else
                            {
                                this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(refAPInvHed.VendorNum), Compatibility.Convert.ToString(refAPInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                            }
                        }
                    }
                    else
                    {
                        this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                    }
                }
                else
                {
                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                }
            }

            if (ttAPInvHed.DebitMemo == true)
            {
                ttAPInvHed.ScrTaxAmt = -ttAPInvHed.TaxAmt;
                ttAPInvHed.ScrDocTaxAmt = -ttAPInvHed.DocTaxAmt;
                ttAPInvHed.Rpt1ScrTaxAmt = -ttAPInvHed.Rpt1TaxAmt;
                ttAPInvHed.Rpt2ScrTaxAmt = -ttAPInvHed.Rpt2TaxAmt;
                ttAPInvHed.Rpt3ScrTaxAmt = -ttAPInvHed.Rpt3TaxAmt;

                ttAPInvHed.ScrDiscountAmt = -ttAPInvHed.DiscountAmt;
                ttAPInvHed.ScrDocDiscountAmt = -ttAPInvHed.DocDiscountAmt;
                ttAPInvHed.Rpt1ScrDiscountAmt = -ttAPInvHed.Rpt1DiscountAmt;
                ttAPInvHed.Rpt2ScrDiscountAmt = -ttAPInvHed.Rpt2DiscountAmt;
                ttAPInvHed.Rpt3ScrDiscountAmt = -ttAPInvHed.Rpt3DiscountAmt;

                ttAPInvHed.ScrInvoiceAmt = -ttAPInvHed.InvoiceAmt;
                ttAPInvHed.ScrDocInvoiceAmt = -ttAPInvHed.DocInvoiceAmt;
                ttAPInvHed.Rpt1ScrInvoiceAmt = -ttAPInvHed.Rpt1InvoiceAmt;
                ttAPInvHed.Rpt2ScrInvoiceAmt = -ttAPInvHed.Rpt2InvoiceAmt;
                ttAPInvHed.Rpt3ScrInvoiceAmt = -ttAPInvHed.Rpt3InvoiceAmt;

                ttAPInvHed.ScrInvoiceVendorAmt = -ttAPInvHed.InvoiceVendorAmt;
                ttAPInvHed.ScrDocInvoiceVendorAmt = -ttAPInvHed.DocInvoiceVendorAmt;
                ttAPInvHed.Rpt1ScrInvoiceVendorAmt = -ttAPInvHed.Rpt1InvoiceVendorAmt;
                ttAPInvHed.Rpt2ScrInvoiceVendorAmt = -ttAPInvHed.Rpt2InvoiceVendorAmt;
                ttAPInvHed.Rpt3ScrInvoiceVendorAmt = -ttAPInvHed.Rpt3InvoiceVendorAmt;

                ttAPInvHed.ScrInvoiceBal = -ttAPInvHed.InvoiceBal;
                ttAPInvHed.ScrDocInvoiceBal = -ttAPInvHed.DocInvoiceBal;
                ttAPInvHed.Rpt1ScrInvoiceBal = -ttAPInvHed.Rpt1InvoiceBal;
                ttAPInvHed.Rpt2ScrInvoiceBal = -ttAPInvHed.Rpt2InvoiceBal;
                ttAPInvHed.Rpt3ScrInvoiceBal = -ttAPInvHed.Rpt3InvoiceBal;

                ttAPInvHed.ScrUnpostedBal = -ttAPInvHed.UnpostedBal;
                ttAPInvHed.ScrDocUnpostedBal = -ttAPInvHed.DocUnpostedBal;
                ttAPInvHed.Rpt1ScrUnpostedBal = -ttAPInvHed.Rpt1UnpostedBal;
                ttAPInvHed.Rpt2ScrUnpostedBal = -ttAPInvHed.Rpt2UnpostedBal;
                ttAPInvHed.Rpt3ScrUnpostedBal = -ttAPInvHed.Rpt3UnpostedBal;

                ttAPInvHed.ScrRounding = -ttAPInvHed.Rounding;
                ttAPInvHed.ScrDocRounding = -ttAPInvHed.DocRounding;
                ttAPInvHed.Rpt1ScrRounding = -ttAPInvHed.Rpt1Rounding;
                ttAPInvHed.Rpt2ScrRounding = -ttAPInvHed.Rpt2Rounding;
                ttAPInvHed.Rpt3ScrRounding = -ttAPInvHed.Rpt3Rounding;

                if (ttAPInvHed.StartUp == true)
                {
                    ttAPInvHed.ScrInvoiceVendorAmt = -ttAPInvHed.InvoiceAmt;
                    ttAPInvHed.ScrDocInvoiceVendorAmt = -ttAPInvHed.DocInvoiceAmt;
                    ttAPInvHed.Rpt1ScrInvoiceVendorAmt = -ttAPInvHed.Rpt1InvoiceAmt;
                    ttAPInvHed.Rpt2ScrInvoiceVendorAmt = -ttAPInvHed.Rpt2InvoiceAmt;
                    ttAPInvHed.Rpt3ScrInvoiceVendorAmt = -ttAPInvHed.Rpt3InvoiceAmt;
                }
            }
            else
            {
                ttAPInvHed.ScrTaxAmt = ttAPInvHed.TaxAmt;
                ttAPInvHed.ScrDocTaxAmt = ttAPInvHed.DocTaxAmt;
                ttAPInvHed.Rpt1ScrTaxAmt = ttAPInvHed.Rpt1TaxAmt;
                ttAPInvHed.Rpt2ScrTaxAmt = ttAPInvHed.Rpt2TaxAmt;
                ttAPInvHed.Rpt3ScrTaxAmt = ttAPInvHed.Rpt3TaxAmt;

                ttAPInvHed.ScrDiscountAmt = ttAPInvHed.DiscountAmt;
                ttAPInvHed.ScrDocDiscountAmt = ttAPInvHed.DocDiscountAmt;
                ttAPInvHed.Rpt1ScrDiscountAmt = ttAPInvHed.Rpt1DiscountAmt;
                ttAPInvHed.Rpt2ScrDiscountAmt = ttAPInvHed.Rpt2DiscountAmt;
                ttAPInvHed.Rpt3ScrDiscountAmt = ttAPInvHed.Rpt3DiscountAmt;

                ttAPInvHed.ScrInvoiceAmt = ttAPInvHed.InvoiceAmt;
                ttAPInvHed.ScrDocInvoiceAmt = ttAPInvHed.DocInvoiceAmt;
                ttAPInvHed.Rpt1ScrInvoiceAmt = ttAPInvHed.Rpt1InvoiceAmt;
                ttAPInvHed.Rpt2ScrInvoiceAmt = ttAPInvHed.Rpt2InvoiceAmt;
                ttAPInvHed.Rpt3ScrInvoiceAmt = ttAPInvHed.Rpt3InvoiceAmt;

                ttAPInvHed.ScrInvoiceVendorAmt = ttAPInvHed.InvoiceVendorAmt;
                ttAPInvHed.ScrDocInvoiceVendorAmt = ttAPInvHed.DocInvoiceVendorAmt;
                ttAPInvHed.Rpt1ScrInvoiceVendorAmt = ttAPInvHed.Rpt1InvoiceVendorAmt;
                ttAPInvHed.Rpt2ScrInvoiceVendorAmt = ttAPInvHed.Rpt2InvoiceVendorAmt;
                ttAPInvHed.Rpt3ScrInvoiceVendorAmt = ttAPInvHed.Rpt3InvoiceVendorAmt;

                ttAPInvHed.ScrInvoiceBal = ttAPInvHed.InvoiceBal;
                ttAPInvHed.ScrDocInvoiceBal = ttAPInvHed.DocInvoiceBal;
                ttAPInvHed.Rpt1ScrInvoiceBal = ttAPInvHed.Rpt1InvoiceBal;
                ttAPInvHed.Rpt2ScrInvoiceBal = ttAPInvHed.Rpt2InvoiceBal;
                ttAPInvHed.Rpt3ScrInvoiceBal = ttAPInvHed.Rpt3InvoiceBal;

                ttAPInvHed.ScrUnpostedBal = ttAPInvHed.UnpostedBal;
                ttAPInvHed.ScrDocUnpostedBal = ttAPInvHed.DocUnpostedBal;
                ttAPInvHed.Rpt1ScrUnpostedBal = ttAPInvHed.Rpt1UnpostedBal;
                ttAPInvHed.Rpt2ScrUnpostedBal = ttAPInvHed.Rpt2UnpostedBal;
                ttAPInvHed.Rpt3ScrUnpostedBal = ttAPInvHed.Rpt3UnpostedBal;

                ttAPInvHed.ScrRounding = ttAPInvHed.Rounding;
                ttAPInvHed.ScrDocRounding = ttAPInvHed.DocRounding;
                ttAPInvHed.Rpt1ScrRounding = ttAPInvHed.Rpt1Rounding;
                ttAPInvHed.Rpt2ScrRounding = ttAPInvHed.Rpt2Rounding;
                ttAPInvHed.Rpt3ScrRounding = ttAPInvHed.Rpt3Rounding;

                if (ttAPInvHed.StartUp == true)
                {
                    ttAPInvHed.ScrInvoiceVendorAmt = ttAPInvHed.InvoiceAmt;
                    ttAPInvHed.ScrDocInvoiceVendorAmt = ttAPInvHed.DocInvoiceAmt;
                    ttAPInvHed.Rpt1ScrInvoiceVendorAmt = ttAPInvHed.Rpt1InvoiceAmt;
                    ttAPInvHed.Rpt2ScrInvoiceVendorAmt = ttAPInvHed.Rpt2InvoiceAmt;
                    ttAPInvHed.Rpt3ScrInvoiceVendorAmt = ttAPInvHed.Rpt3InvoiceAmt;
                }
            }

            ttAPInvHed.InvoiceVariance = ttAPInvHed.ScrInvoiceAmt - ttAPInvHed.ScrInvoiceVendorAmt;
            ttAPInvHed.DocInvoiceVariance = ttAPInvHed.ScrDocInvoiceAmt - ttAPInvHed.ScrDocInvoiceVendorAmt;
            ttAPInvHed.Rpt1InvoiceVariance = ttAPInvHed.Rpt1ScrInvoiceAmt - ttAPInvHed.Rpt1ScrInvoiceVendorAmt;
            ttAPInvHed.Rpt2InvoiceVariance = ttAPInvHed.Rpt2ScrInvoiceAmt - ttAPInvHed.Rpt2ScrInvoiceVendorAmt;
            ttAPInvHed.Rpt3InvoiceVariance = ttAPInvHed.Rpt3ScrInvoiceAmt - ttAPInvHed.Rpt3ScrInvoiceVendorAmt;

            if (APInvHed != null)
            {
                if (this.SelectXbSystLACTax(Session.CompanyID) && ttAPInvHed.DocTaxAmt > 0)
                {
                    ttAPInvHed.ScrLACDocTaxAmt = ttAPInvHed.ScrDocTaxAmt - ttAPInvHed.DocWithholdAmt;
                    ttAPInvHed.ScrLACTaxAmt = ttAPInvHed.ScrTaxAmt - ttAPInvHed.WithholdAmt;
                    ttAPInvHed.Rpt1ScrLACTaxAmt = ttAPInvHed.Rpt1ScrTaxAmt - ttAPInvHed.Rpt1WithholdAmt;
                    ttAPInvHed.Rpt2ScrLACTaxAmt = ttAPInvHed.Rpt2ScrTaxAmt - ttAPInvHed.Rpt2WithholdAmt;
                    ttAPInvHed.Rpt3ScrLACTaxAmt = ttAPInvHed.Rpt3ScrTaxAmt - ttAPInvHed.Rpt3WithholdAmt;

                }
            }

            ttAPInvHed.ScrInvLineTotal = 0;
            ttAPInvHed.ScrDocInvLineTotal = 0;
            ttAPInvHed.Rpt1ScrInvLineTotal = 0;
            ttAPInvHed.Rpt2ScrInvLineTotal = 0;
            ttAPInvHed.Rpt3ScrInvLineTotal = 0;

            ttAPInvHed.ScrHdrExpTotal = 0;
            ttAPInvHed.DocScrHdrExpTotal = 0;
            ttAPInvHed.Rpt1ScrHdrExpTotal = 0;
            ttAPInvHed.Rpt2ScrHdrExpTotal = 0;
            ttAPInvHed.Rpt3ScrHdrExpTotal = 0;

            ttAPInvHed.ScrHdrMiscChrgTotal = 0;
            ttAPInvHed.ScrDocHdrMiscChrgTotal = 0;
            ttAPInvHed.Rpt1ScrHdrMiscChrgTotal = 0;
            ttAPInvHed.Rpt2ScrHdrMiscChrgTotal = 0;
            ttAPInvHed.Rpt3ScrHdrMiscChrgTotal = 0;

            ttAPInvHed.ScrTotTaxableAmt = 0;
            ttAPInvHed.ScrDocTotTaxableAmt = 0;
            ttAPInvHed.Rpt1ScrTotTaxableAmt = 0;
            ttAPInvHed.Rpt2ScrTotTaxableAmt = 0;
            ttAPInvHed.Rpt3ScrTotTaxableAmt = 0;

            ttAPInvHed.ScrTotReportableAmt = 0;
            ttAPInvHed.ScrDocTotReportableAmt = 0;
            ttAPInvHed.Rpt1ScrTotReportableAmt = 0;
            ttAPInvHed.Rpt2ScrTotReportableAmt = 0;
            ttAPInvHed.Rpt3ScrTotReportableAmt = 0;

            ttAPInvHed.ScrTotInvoiceAmt = 0;
            ttAPInvHed.ScrDocTotInvoiceAmt = 0;
            ttAPInvHed.Rpt1ScrTotInvoiceAmt = 0;
            ttAPInvHed.Rpt2ScrTotInvoiceAmt = 0;
            ttAPInvHed.Rpt3ScrTotInvoiceAmt = 0;

            ttAPInvHed.ScrTotDedTaxAmt = 0;
            ttAPInvHed.ScrDocTotDedTaxAmt = 0;
            ttAPInvHed.Rpt1ScrTotDedTaxAmt = 0;
            ttAPInvHed.Rpt2ScrTotDedTaxAmt = 0;
            ttAPInvHed.Rpt3ScrTotDedTaxAmt = 0;

            ttAPInvHed.ScrTotWithholdingAmt = 0;
            ttAPInvHed.ScrDocTotWithholdingAmt = 0;
            ttAPInvHed.Rpt1ScrTotWithholdingAmt = 0;
            ttAPInvHed.Rpt2ScrTotWithholdingAmt = 0;
            ttAPInvHed.Rpt3ScrTotWithholdingAmt = 0;

            ttAPInvHed.ScrTotSelfAmt = 0;
            ttAPInvHed.ScrDocTotSelfAmt = 0;
            ttAPInvHed.Rpt1ScrTotSelfAmt = 0;
            ttAPInvHed.Rpt2ScrTotSelfAmt = 0;
            ttAPInvHed.Rpt3ScrTotSelfAmt = 0;

            ttAPInvHed.ScrTotBOEWithholding = 0;
            ttAPInvHed.ScrDocTotBOEWithholding = 0;
            ttAPInvHed.Rpt1ScrTotBOEWithholding = 0;
            ttAPInvHed.Rpt2ScrTotBOEWithholding = 0;
            ttAPInvHed.Rpt3ScrTotBOEWithholding = 0;

            if (!Tracker)
            {
                /* Get invoice line totals */
                var APInvDtlGroupResults = selectSumAPInvDtl(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum);
                if (APInvDtlGroupResults != null)
                {
                    ttAPInvHed.ScrInvLineTotal = ttAPInvHed.ScrInvLineTotal + APInvDtlGroupResults.ScrInvLineTotal;
                    ttAPInvHed.ScrDocInvLineTotal = ttAPInvHed.ScrDocInvLineTotal + APInvDtlGroupResults.ScrDocInvLineTotal;
                    ttAPInvHed.Rpt1ScrInvLineTotal = ttAPInvHed.Rpt1ScrInvLineTotal + APInvDtlGroupResults.Rpt1ScrInvLineTotal;
                    ttAPInvHed.Rpt2ScrInvLineTotal = ttAPInvHed.Rpt2ScrInvLineTotal + APInvDtlGroupResults.Rpt2ScrInvLineTotal;
                    ttAPInvHed.Rpt3ScrInvLineTotal = ttAPInvHed.Rpt3ScrInvLineTotal + APInvDtlGroupResults.Rpt3ScrInvLineTotal;

                    if (isPeruLocalization)
                    {
                        if (ttAPInvHed.InvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
                        {
                            ttAPInvHed.ScrTotBOEWithholding += APInvDtlGroupResults.ScrWithholdAmt;
                            ttAPInvHed.ScrDocTotBOEWithholding += APInvDtlGroupResults.DocScrWithholdAmt;
                            ttAPInvHed.Rpt1ScrTotBOEWithholding += APInvDtlGroupResults.Rpt1ScrWithholdAmt;
                            ttAPInvHed.Rpt2ScrTotBOEWithholding += APInvDtlGroupResults.Rpt2ScrWithholdAmt;
                            ttAPInvHed.Rpt3ScrTotBOEWithholding += APInvDtlGroupResults.Rpt3ScrWithholdAmt;
                        }
                    }
                }

                /* Get header misc charge total */
                var APInvMscGroupResults = SelectSumAPInvMsc(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum, 0);
                if (APInvMscGroupResults != null)
                {
                    ttAPInvHed.ScrHdrMiscChrgTotal = ttAPInvHed.ScrHdrMiscChrgTotal + APInvMscGroupResults.MiscAmt;
                    ttAPInvHed.ScrDocHdrMiscChrgTotal = ttAPInvHed.ScrDocHdrMiscChrgTotal + APInvMscGroupResults.DocMiscAmt;
                    ttAPInvHed.Rpt1ScrHdrMiscChrgTotal = ttAPInvHed.Rpt1ScrHdrMiscChrgTotal + APInvMscGroupResults.Rpt1MiscAmt;
                    ttAPInvHed.Rpt2ScrHdrMiscChrgTotal = ttAPInvHed.Rpt2ScrHdrMiscChrgTotal + APInvMscGroupResults.Rpt2MiscAmt;
                    ttAPInvHed.Rpt3ScrHdrMiscChrgTotal = ttAPInvHed.Rpt3ScrHdrMiscChrgTotal + APInvMscGroupResults.Rpt3MiscAmt;
                }

                /* Get gl distribution total */
                var APInvExpGroupResults = SelectSumAPInvExp(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum, 0);
                if (APInvExpGroupResults != null)
                {
                    ttAPInvHed.ScrHdrExpTotal = ttAPInvHed.ScrHdrExpTotal + APInvExpGroupResults.ExpAmt;
                    ttAPInvHed.DocScrHdrExpTotal = ttAPInvHed.DocScrHdrExpTotal + APInvExpGroupResults.DocExpAmt;
                    ttAPInvHed.Rpt1ScrHdrExpTotal = ttAPInvHed.Rpt1ScrHdrExpTotal + APInvExpGroupResults.Rpt1ExpAmt;
                    ttAPInvHed.Rpt2ScrHdrExpTotal = ttAPInvHed.Rpt2ScrHdrExpTotal + APInvExpGroupResults.Rpt2ExpAmt;
                    ttAPInvHed.Rpt3ScrHdrExpTotal = ttAPInvHed.Rpt3ScrHdrExpTotal + APInvExpGroupResults.Rpt3ExpAmt;
                }

                /* Get total TaxableAmt and total ReportableAmt from the tax records */
                foreach (var APInvTax_iterator in (this.SelectAPInvTax(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum, 0)))
                {
                    var JoinFieldsResult = APInvTax_iterator;
                    int CollectionType = JoinFieldsResult.CollectionType;
                    if (CollectionType == 0)
                    {
                        ttAPInvHed.ScrTotTaxableAmt = JoinFieldsResult.TaxableAmt;
                        ttAPInvHed.ScrDocTotTaxableAmt = JoinFieldsResult.DocTaxableAmt;
                        ttAPInvHed.Rpt1ScrTotTaxableAmt = JoinFieldsResult.Rpt1TaxableAmt;
                        ttAPInvHed.Rpt2ScrTotTaxableAmt = JoinFieldsResult.Rpt2TaxableAmt;
                        ttAPInvHed.Rpt3ScrTotTaxableAmt = JoinFieldsResult.Rpt3TaxableAmt;

                        ttAPInvHed.ScrTotReportableAmt = JoinFieldsResult.ReportableAmt;
                        ttAPInvHed.ScrDocTotReportableAmt = JoinFieldsResult.DocReportableAmt;
                        ttAPInvHed.Rpt1ScrTotReportableAmt = JoinFieldsResult.Rpt1ReportableAmt;
                        ttAPInvHed.Rpt2ScrTotReportableAmt = JoinFieldsResult.Rpt2ReportableAmt;
                        ttAPInvHed.Rpt3ScrTotReportableAmt = JoinFieldsResult.Rpt3ReportableAmt;

                        ttAPInvHed.ScrTotInvoiceAmt = ttAPInvHed.ScrTotInvoiceAmt + JoinFieldsResult.TaxAmt + JoinFieldsResult.TaxAmtVar;
                        ttAPInvHed.ScrDocTotInvoiceAmt = ttAPInvHed.ScrDocTotInvoiceAmt + JoinFieldsResult.DocTaxAmt + JoinFieldsResult.DocTaxAmtVar;
                        ttAPInvHed.Rpt1ScrTotInvoiceAmt = ttAPInvHed.Rpt1ScrTotInvoiceAmt + JoinFieldsResult.Rpt1TaxAmt + JoinFieldsResult.Rpt1TaxAmtVar;
                        ttAPInvHed.Rpt2ScrTotInvoiceAmt = ttAPInvHed.Rpt2ScrTotInvoiceAmt + JoinFieldsResult.Rpt2TaxAmt + JoinFieldsResult.Rpt2TaxAmtVar;
                        ttAPInvHed.Rpt3ScrTotInvoiceAmt = ttAPInvHed.Rpt3ScrTotInvoiceAmt + JoinFieldsResult.Rpt3TaxAmt + JoinFieldsResult.Rpt3TaxAmtVar;

                        ttAPInvHed.ScrTotDedTaxAmt = ttAPInvHed.ScrTotDedTaxAmt + JoinFieldsResult.DedTaxAmt;
                        ttAPInvHed.ScrDocTotDedTaxAmt = ttAPInvHed.ScrDocTotDedTaxAmt + JoinFieldsResult.DocDedTaxAmt;
                        ttAPInvHed.Rpt1ScrTotDedTaxAmt = ttAPInvHed.Rpt1ScrTotDedTaxAmt + JoinFieldsResult.Rpt1DedTaxAmt;
                        ttAPInvHed.Rpt2ScrTotDedTaxAmt = ttAPInvHed.Rpt2ScrTotDedTaxAmt + JoinFieldsResult.Rpt2DedTaxAmt;
                        ttAPInvHed.Rpt3ScrTotDedTaxAmt = ttAPInvHed.Rpt3ScrTotDedTaxAmt + JoinFieldsResult.Rpt3DedTaxAmt;
                    }
                    else if (CollectionType == 1)
                    {
                        ttAPInvHed.ScrTotWithholdingAmt = ttAPInvHed.ScrTotWithholdingAmt + JoinFieldsResult.TaxAmt + JoinFieldsResult.TaxAmtVar;
                        ttAPInvHed.ScrDocTotWithholdingAmt = ttAPInvHed.ScrDocTotWithholdingAmt + JoinFieldsResult.DocTaxAmt + JoinFieldsResult.DocTaxAmtVar;
                        ttAPInvHed.Rpt1ScrTotWithholdingAmt = ttAPInvHed.Rpt1ScrTotWithholdingAmt + JoinFieldsResult.Rpt1TaxAmt + JoinFieldsResult.Rpt1TaxAmtVar;
                        ttAPInvHed.Rpt2ScrTotWithholdingAmt = ttAPInvHed.Rpt2ScrTotWithholdingAmt + JoinFieldsResult.Rpt2TaxAmt + JoinFieldsResult.Rpt2TaxAmtVar;
                        ttAPInvHed.Rpt3ScrTotWithholdingAmt = ttAPInvHed.Rpt3ScrTotWithholdingAmt + JoinFieldsResult.Rpt3TaxAmt + JoinFieldsResult.Rpt3TaxAmtVar;
                    }
                    else if ((CollectionType == 2 || CollectionType == 3)
                            && (JoinFieldsResult.ECAcquisitionSeq == 0 || JoinFieldsResult.ECAcquisitionSeq == 2))
                    {
                        ttAPInvHed.ScrTotSelfAmt = ttAPInvHed.ScrTotSelfAmt + JoinFieldsResult.TaxAmt + JoinFieldsResult.TaxAmtVar;
                        ttAPInvHed.ScrDocTotSelfAmt = ttAPInvHed.ScrDocTotSelfAmt + JoinFieldsResult.DocTaxAmt + JoinFieldsResult.DocTaxAmtVar;
                        ttAPInvHed.Rpt1ScrTotSelfAmt = ttAPInvHed.Rpt1ScrTotSelfAmt + JoinFieldsResult.Rpt1TaxAmt + JoinFieldsResult.Rpt1TaxAmtVar;
                        ttAPInvHed.Rpt2ScrTotSelfAmt = ttAPInvHed.Rpt2ScrTotSelfAmt + JoinFieldsResult.Rpt2TaxAmt + JoinFieldsResult.Rpt2TaxAmtVar;
                        ttAPInvHed.Rpt3ScrTotSelfAmt = ttAPInvHed.Rpt3ScrTotSelfAmt + JoinFieldsResult.Rpt3TaxAmt + JoinFieldsResult.Rpt3TaxAmtVar;
                    }/* SalesTax.CollectionType */
                }/* for each APInvTax */
            }
            else
            {
                if (SumAllAPInvDtl.ContainsKey(ttAPInvHed.InvoiceNum))
                {
                    ttAPInvHed.ScrInvLineTotal += SumAllAPInvDtl[ttAPInvHed.InvoiceNum].ScrInvLineTotal;
                    ttAPInvHed.ScrDocInvLineTotal += SumAllAPInvDtl[ttAPInvHed.InvoiceNum].ScrDocInvLineTotal;
                    ttAPInvHed.Rpt1ScrInvLineTotal += SumAllAPInvDtl[ttAPInvHed.InvoiceNum].Rpt1ScrInvLineTotal;
                    ttAPInvHed.Rpt2ScrInvLineTotal += SumAllAPInvDtl[ttAPInvHed.InvoiceNum].Rpt2ScrInvLineTotal;
                    ttAPInvHed.Rpt3ScrInvLineTotal += SumAllAPInvDtl[ttAPInvHed.InvoiceNum].Rpt3ScrInvLineTotal;

                    if (isPeruLocalization)
                    {
                        if (ttAPInvHed.InvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
                        {
                            ttAPInvHed.ScrTotBOEWithholding += SumAllAPInvDtl[ttAPInvHed.InvoiceNum].ScrWithholdAmt;
                            ttAPInvHed.ScrDocTotBOEWithholding += SumAllAPInvDtl[ttAPInvHed.InvoiceNum].DocScrWithholdAmt;
                            ttAPInvHed.Rpt1ScrTotBOEWithholding += SumAllAPInvDtl[ttAPInvHed.InvoiceNum].Rpt1ScrWithholdAmt;
                            ttAPInvHed.Rpt2ScrTotBOEWithholding += SumAllAPInvDtl[ttAPInvHed.InvoiceNum].Rpt2ScrWithholdAmt;
                            ttAPInvHed.Rpt3ScrTotBOEWithholding += SumAllAPInvDtl[ttAPInvHed.InvoiceNum].Rpt3ScrWithholdAmt;
                        }
                    }
                }

                if (SumAllAPInvMsc.ContainsKey(ttAPInvHed.InvoiceNum))
                {
                    ttAPInvHed.ScrHdrMiscChrgTotal = ttAPInvHed.ScrHdrMiscChrgTotal + SumAllAPInvMsc[ttAPInvHed.InvoiceNum].MiscAmt;
                    ttAPInvHed.ScrDocHdrMiscChrgTotal = ttAPInvHed.ScrDocHdrMiscChrgTotal + SumAllAPInvMsc[ttAPInvHed.InvoiceNum].DocMiscAmt;
                    ttAPInvHed.Rpt1ScrHdrMiscChrgTotal = ttAPInvHed.Rpt1ScrHdrMiscChrgTotal + SumAllAPInvMsc[ttAPInvHed.InvoiceNum].Rpt1MiscAmt;
                    ttAPInvHed.Rpt2ScrHdrMiscChrgTotal = ttAPInvHed.Rpt2ScrHdrMiscChrgTotal + SumAllAPInvMsc[ttAPInvHed.InvoiceNum].Rpt2MiscAmt;
                    ttAPInvHed.Rpt3ScrHdrMiscChrgTotal = ttAPInvHed.Rpt3ScrHdrMiscChrgTotal + SumAllAPInvMsc[ttAPInvHed.InvoiceNum].Rpt3MiscAmt;
                }

                if (SumAllAPInvExp.ContainsKey(ttAPInvHed.InvoiceNum))
                {
                    ttAPInvHed.ScrHdrExpTotal = ttAPInvHed.ScrHdrExpTotal + SumAllAPInvExp[ttAPInvHed.InvoiceNum].ExpAmt;
                    ttAPInvHed.DocScrHdrExpTotal = ttAPInvHed.DocScrHdrExpTotal + SumAllAPInvExp[ttAPInvHed.InvoiceNum].DocExpAmt;
                    ttAPInvHed.Rpt1ScrHdrExpTotal = ttAPInvHed.Rpt1ScrHdrExpTotal + SumAllAPInvExp[ttAPInvHed.InvoiceNum].Rpt1ExpAmt;
                    ttAPInvHed.Rpt2ScrHdrExpTotal = ttAPInvHed.Rpt2ScrHdrExpTotal + SumAllAPInvExp[ttAPInvHed.InvoiceNum].Rpt2ExpAmt;
                    ttAPInvHed.Rpt3ScrHdrExpTotal = ttAPInvHed.Rpt3ScrHdrExpTotal + SumAllAPInvExp[ttAPInvHed.InvoiceNum].Rpt3ExpAmt;
                }

                string keyColType = ttAPInvHed.InvoiceNum + Ice.Constants.LIST_DELIM + "0";
                if (SumAllAPInvTax.ContainsKey(keyColType))
                {
                    ttAPInvHed.ScrTotTaxableAmt = SumAllAPInvTax[keyColType].TaxableAmt;
                    ttAPInvHed.ScrDocTotTaxableAmt = SumAllAPInvTax[keyColType].DocTaxableAmt;
                    ttAPInvHed.Rpt1ScrTotTaxableAmt = SumAllAPInvTax[keyColType].Rpt1TaxableAmt;
                    ttAPInvHed.Rpt2ScrTotTaxableAmt = SumAllAPInvTax[keyColType].Rpt2TaxableAmt;
                    ttAPInvHed.Rpt3ScrTotTaxableAmt = SumAllAPInvTax[keyColType].Rpt3TaxableAmt;

                    ttAPInvHed.ScrTotReportableAmt = SumAllAPInvTax[keyColType].ReportableAmt;
                    ttAPInvHed.ScrDocTotReportableAmt = SumAllAPInvTax[keyColType].DocReportableAmt;
                    ttAPInvHed.Rpt1ScrTotReportableAmt = SumAllAPInvTax[keyColType].Rpt1ReportableAmt;
                    ttAPInvHed.Rpt2ScrTotReportableAmt = SumAllAPInvTax[keyColType].Rpt2ReportableAmt;
                    ttAPInvHed.Rpt3ScrTotReportableAmt = SumAllAPInvTax[keyColType].Rpt3ReportableAmt;

                    ttAPInvHed.ScrTotInvoiceAmt = ttAPInvHed.ScrTotInvoiceAmt + SumAllAPInvTax[keyColType].TaxAmt + SumAllAPInvTax[keyColType].TaxAmtVar;
                    ttAPInvHed.ScrDocTotInvoiceAmt = ttAPInvHed.ScrDocTotInvoiceAmt + SumAllAPInvTax[keyColType].DocTaxAmt + SumAllAPInvTax[keyColType].DocTaxAmtVar;
                    ttAPInvHed.Rpt1ScrTotInvoiceAmt = ttAPInvHed.Rpt1ScrTotInvoiceAmt + SumAllAPInvTax[keyColType].Rpt1TaxAmt + SumAllAPInvTax[keyColType].Rpt1TaxAmtVar;
                    ttAPInvHed.Rpt2ScrTotInvoiceAmt = ttAPInvHed.Rpt2ScrTotInvoiceAmt + SumAllAPInvTax[keyColType].Rpt2TaxAmt + SumAllAPInvTax[keyColType].Rpt2TaxAmtVar;
                    ttAPInvHed.Rpt3ScrTotInvoiceAmt = ttAPInvHed.Rpt3ScrTotInvoiceAmt + SumAllAPInvTax[keyColType].Rpt3TaxAmt + SumAllAPInvTax[keyColType].Rpt3TaxAmtVar;

                    ttAPInvHed.ScrTotDedTaxAmt = ttAPInvHed.ScrTotDedTaxAmt + SumAllAPInvTax[keyColType].DedTaxAmt;
                    ttAPInvHed.ScrDocTotDedTaxAmt = ttAPInvHed.ScrDocTotDedTaxAmt + SumAllAPInvTax[keyColType].DocDedTaxAmt;
                    ttAPInvHed.Rpt1ScrTotDedTaxAmt = ttAPInvHed.Rpt1ScrTotDedTaxAmt + SumAllAPInvTax[keyColType].Rpt1DedTaxAmt;
                    ttAPInvHed.Rpt2ScrTotDedTaxAmt = ttAPInvHed.Rpt2ScrTotDedTaxAmt + SumAllAPInvTax[keyColType].Rpt2DedTaxAmt;
                    ttAPInvHed.Rpt3ScrTotDedTaxAmt = ttAPInvHed.Rpt3ScrTotDedTaxAmt + SumAllAPInvTax[keyColType].Rpt3DedTaxAmt;
                }

                keyColType = ttAPInvHed.InvoiceNum + Ice.Constants.LIST_DELIM + "1";
                if (SumAllAPInvTax.ContainsKey(keyColType))
                {
                    ttAPInvHed.ScrTotWithholdingAmt = ttAPInvHed.ScrTotWithholdingAmt + SumAllAPInvTax[keyColType].TaxAmt + SumAllAPInvTax[keyColType].TaxAmtVar;
                    ttAPInvHed.ScrDocTotWithholdingAmt = ttAPInvHed.ScrDocTotWithholdingAmt + SumAllAPInvTax[keyColType].DocTaxAmt + SumAllAPInvTax[keyColType].DocTaxAmtVar;
                    ttAPInvHed.Rpt1ScrTotWithholdingAmt = ttAPInvHed.Rpt1ScrTotWithholdingAmt + SumAllAPInvTax[keyColType].Rpt1TaxAmt + SumAllAPInvTax[keyColType].Rpt1TaxAmtVar;
                    ttAPInvHed.Rpt2ScrTotWithholdingAmt = ttAPInvHed.Rpt2ScrTotWithholdingAmt + SumAllAPInvTax[keyColType].Rpt2TaxAmt + SumAllAPInvTax[keyColType].Rpt2TaxAmtVar;
                    ttAPInvHed.Rpt3ScrTotWithholdingAmt = ttAPInvHed.Rpt3ScrTotWithholdingAmt + SumAllAPInvTax[keyColType].Rpt3TaxAmt + SumAllAPInvTax[keyColType].Rpt3TaxAmtVar;
                }

                keyColType = ttAPInvHed.InvoiceNum + Ice.Constants.LIST_DELIM + "2";
                if (SumAllAPInvTax.ContainsKey(keyColType))
                {
                    ttAPInvHed.ScrTotSelfAmt = ttAPInvHed.ScrTotSelfAmt + SumAllAPInvTax[keyColType].TaxAmt + SumAllAPInvTax[keyColType].TaxAmtVar;
                    ttAPInvHed.ScrDocTotSelfAmt = ttAPInvHed.ScrDocTotSelfAmt + SumAllAPInvTax[keyColType].DocTaxAmt + SumAllAPInvTax[keyColType].DocTaxAmtVar;
                    ttAPInvHed.Rpt1ScrTotSelfAmt = ttAPInvHed.Rpt1ScrTotSelfAmt + SumAllAPInvTax[keyColType].Rpt1TaxAmt + SumAllAPInvTax[keyColType].Rpt1TaxAmtVar;
                    ttAPInvHed.Rpt2ScrTotSelfAmt = ttAPInvHed.Rpt2ScrTotSelfAmt + SumAllAPInvTax[keyColType].Rpt2TaxAmt + SumAllAPInvTax[keyColType].Rpt2TaxAmtVar;
                    ttAPInvHed.Rpt3ScrTotSelfAmt = ttAPInvHed.Rpt3ScrTotSelfAmt + SumAllAPInvTax[keyColType].Rpt3TaxAmt + SumAllAPInvTax[keyColType].Rpt3TaxAmtVar;
                }

                keyColType = ttAPInvHed.InvoiceNum + Ice.Constants.LIST_DELIM + "3";
                if (SumAllAPInvTax.ContainsKey(keyColType))
                {
                    ttAPInvHed.ScrTotSelfAmt = ttAPInvHed.ScrTotSelfAmt + SumAllAPInvTax[keyColType].TaxAmt + SumAllAPInvTax[keyColType].TaxAmtVar;
                    ttAPInvHed.ScrDocTotSelfAmt = ttAPInvHed.ScrDocTotSelfAmt + SumAllAPInvTax[keyColType].DocTaxAmt + SumAllAPInvTax[keyColType].DocTaxAmtVar;
                    ttAPInvHed.Rpt1ScrTotSelfAmt = ttAPInvHed.Rpt1ScrTotSelfAmt + SumAllAPInvTax[keyColType].Rpt1TaxAmt + SumAllAPInvTax[keyColType].Rpt1TaxAmtVar;
                    ttAPInvHed.Rpt2ScrTotSelfAmt = ttAPInvHed.Rpt2ScrTotSelfAmt + SumAllAPInvTax[keyColType].Rpt2TaxAmt + SumAllAPInvTax[keyColType].Rpt2TaxAmtVar;
                    ttAPInvHed.Rpt3ScrTotSelfAmt = ttAPInvHed.Rpt3ScrTotSelfAmt + SumAllAPInvTax[keyColType].Rpt3TaxAmt + SumAllAPInvTax[keyColType].Rpt3TaxAmtVar;
                }
            }

            if (ttAPInvHed.DebitMemo == true)
            {
                ttAPInvHed.ScrInvLineTotal = -ttAPInvHed.ScrInvLineTotal;
                ttAPInvHed.ScrDocInvLineTotal = -ttAPInvHed.ScrDocInvLineTotal;
                ttAPInvHed.Rpt1ScrInvLineTotal = -ttAPInvHed.Rpt1ScrInvLineTotal;
                ttAPInvHed.Rpt2ScrInvLineTotal = -ttAPInvHed.Rpt2ScrInvLineTotal;
                ttAPInvHed.Rpt3ScrInvLineTotal = -ttAPInvHed.Rpt3ScrInvLineTotal;

                ttAPInvHed.ScrHdrExpTotal = -ttAPInvHed.ScrHdrExpTotal;
                ttAPInvHed.DocScrHdrExpTotal = -ttAPInvHed.DocScrHdrExpTotal;
                ttAPInvHed.Rpt1ScrHdrExpTotal = -ttAPInvHed.Rpt1ScrHdrExpTotal;
                ttAPInvHed.Rpt2ScrHdrExpTotal = -ttAPInvHed.Rpt2ScrHdrExpTotal;
                ttAPInvHed.Rpt3ScrHdrExpTotal = -ttAPInvHed.Rpt3ScrHdrExpTotal;

                ttAPInvHed.ScrHdrMiscChrgTotal = -ttAPInvHed.ScrHdrMiscChrgTotal;
                ttAPInvHed.ScrDocHdrMiscChrgTotal = -ttAPInvHed.ScrDocHdrMiscChrgTotal;
                ttAPInvHed.Rpt1ScrHdrMiscChrgTotal = -ttAPInvHed.Rpt1ScrHdrMiscChrgTotal;
                ttAPInvHed.Rpt2ScrHdrMiscChrgTotal = -ttAPInvHed.Rpt2ScrHdrMiscChrgTotal;
                ttAPInvHed.Rpt3ScrHdrMiscChrgTotal = -ttAPInvHed.Rpt3ScrHdrMiscChrgTotal;

                ttAPInvHed.ScrTotTaxableAmt = -ttAPInvHed.ScrTotTaxableAmt;
                ttAPInvHed.ScrDocTotTaxableAmt = -ttAPInvHed.ScrDocTotTaxableAmt;
                ttAPInvHed.Rpt1ScrTotTaxableAmt = -ttAPInvHed.Rpt1ScrTotTaxableAmt;
                ttAPInvHed.Rpt2ScrTotTaxableAmt = -ttAPInvHed.Rpt2ScrTotTaxableAmt;
                ttAPInvHed.Rpt3ScrTotTaxableAmt = -ttAPInvHed.Rpt3ScrTotTaxableAmt;

                ttAPInvHed.ScrTotReportableAmt = -ttAPInvHed.ScrTotReportableAmt;
                ttAPInvHed.ScrDocTotReportableAmt = -ttAPInvHed.ScrDocTotReportableAmt;
                ttAPInvHed.Rpt1ScrTotReportableAmt = -ttAPInvHed.Rpt1ScrTotReportableAmt;
                ttAPInvHed.Rpt2ScrTotReportableAmt = -ttAPInvHed.Rpt2ScrTotReportableAmt;
                ttAPInvHed.Rpt3ScrTotReportableAmt = -ttAPInvHed.Rpt3ScrTotReportableAmt;

                ttAPInvHed.ScrTotInvoiceAmt = -ttAPInvHed.ScrTotInvoiceAmt;
                ttAPInvHed.ScrDocTotInvoiceAmt = -ttAPInvHed.ScrDocTotInvoiceAmt;
                ttAPInvHed.Rpt1ScrTotInvoiceAmt = -ttAPInvHed.Rpt1ScrTotInvoiceAmt;
                ttAPInvHed.Rpt2ScrTotInvoiceAmt = -ttAPInvHed.Rpt2ScrTotInvoiceAmt;
                ttAPInvHed.Rpt3ScrTotInvoiceAmt = -ttAPInvHed.Rpt3ScrTotInvoiceAmt;

                ttAPInvHed.ScrTotDedTaxAmt = -ttAPInvHed.ScrTotDedTaxAmt;
                ttAPInvHed.ScrDocTotDedTaxAmt = -ttAPInvHed.ScrDocTotDedTaxAmt;
                ttAPInvHed.Rpt1ScrTotDedTaxAmt = -ttAPInvHed.Rpt1ScrTotDedTaxAmt;
                ttAPInvHed.Rpt2ScrTotDedTaxAmt = -ttAPInvHed.Rpt2ScrTotDedTaxAmt;
                ttAPInvHed.Rpt3ScrTotDedTaxAmt = -ttAPInvHed.Rpt3ScrTotDedTaxAmt;

                ttAPInvHed.ScrTotWithholdingAmt = -ttAPInvHed.ScrTotWithholdingAmt;
                ttAPInvHed.ScrDocTotWithholdingAmt = -ttAPInvHed.ScrDocTotWithholdingAmt;
                ttAPInvHed.Rpt1ScrTotWithholdingAmt = -ttAPInvHed.Rpt1ScrTotWithholdingAmt;
                ttAPInvHed.Rpt2ScrTotWithholdingAmt = -ttAPInvHed.Rpt2ScrTotWithholdingAmt;
                ttAPInvHed.Rpt3ScrTotWithholdingAmt = -ttAPInvHed.Rpt3ScrTotWithholdingAmt;

                ttAPInvHed.ScrTotSelfAmt = -ttAPInvHed.ScrTotSelfAmt;
                ttAPInvHed.ScrDocTotSelfAmt = -ttAPInvHed.ScrDocTotSelfAmt;
                ttAPInvHed.Rpt1ScrTotSelfAmt = -ttAPInvHed.Rpt1ScrTotSelfAmt;
                ttAPInvHed.Rpt2ScrTotSelfAmt = -ttAPInvHed.Rpt2ScrTotSelfAmt;
                ttAPInvHed.Rpt3ScrTotSelfAmt = -ttAPInvHed.Rpt3ScrTotSelfAmt;
            }
        }
        private void AssignAPInvDtlExtAmtFields()
        {
            ttAPInvDtl.ScrTotalTax = ttAPInvDtl.TotalTax;
            ttAPInvDtl.DocScrTotalTax = ttAPInvDtl.DocTotalTax;
            ttAPInvDtl.Rpt1ScrTotalTax = ttAPInvDtl.Rpt1TotalTax;
            ttAPInvDtl.Rpt2ScrTotalTax = ttAPInvDtl.Rpt2TotalTax;
            ttAPInvDtl.Rpt3ScrTotalTax = ttAPInvDtl.Rpt3TotalTax;
            ttAPInvDtl.ScrTotalDedTax = ttAPInvDtl.TotalDedTax;
            ttAPInvDtl.DocScrTotalDedTax = ttAPInvDtl.DocTotalDedTax;
            ttAPInvDtl.Rpt1ScrTotalDedTax = ttAPInvDtl.Rpt1TotalDedTax;
            ttAPInvDtl.Rpt2ScrTotalDedTax = ttAPInvDtl.Rpt2TotalDedTax;
            ttAPInvDtl.Rpt3ScrTotalDedTax = ttAPInvDtl.Rpt3TotalDedTax;
            ttAPInvDtl.ScrTotalSATax = ttAPInvDtl.TotalSATax;
            ttAPInvDtl.DocScrTotalSATax = ttAPInvDtl.DocTotalSATax;
            ttAPInvDtl.Rpt1ScrTotalSATax = ttAPInvDtl.Rpt1TotalSATax;
            ttAPInvDtl.Rpt2ScrTotalSATax = ttAPInvDtl.Rpt2TotalSATax;
            ttAPInvDtl.Rpt3ScrTotalSATax = ttAPInvDtl.Rpt3TotalSATax;

            foreach (var apInvLnMscTax in SelectAPInvLnMscTax(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine))
            {
                if (apInvLnMscTax.CollectionType != 1)
                {
                    if (apInvLnMscTax.CollectionType == 2 || apInvLnMscTax.CollectionType == 3)
                    {
                        if (apInvLnMscTax.ECAcquisitionSeq == 0)
                        {
                            ttAPInvDtl.ScrTotalSATax = ttAPInvDtl.ScrTotalSATax - apInvLnMscTax.TaxAmt - apInvLnMscTax.TaxAmtVar;
                            ttAPInvDtl.DocScrTotalSATax = ttAPInvDtl.DocScrTotalSATax - apInvLnMscTax.DocTaxAmt - apInvLnMscTax.DocTaxAmtVar;
                            ttAPInvDtl.Rpt1ScrTotalSATax = ttAPInvDtl.Rpt1ScrTotalSATax - apInvLnMscTax.Rpt1TaxAmt - apInvLnMscTax.Rpt1TaxAmtVar;
                            ttAPInvDtl.Rpt2ScrTotalSATax = ttAPInvDtl.Rpt2ScrTotalSATax - apInvLnMscTax.Rpt2TaxAmt - apInvLnMscTax.Rpt2TaxAmtVar;
                            ttAPInvDtl.Rpt3ScrTotalSATax = ttAPInvDtl.Rpt3ScrTotalSATax - apInvLnMscTax.Rpt3TaxAmt - apInvLnMscTax.Rpt3TaxAmtVar;
                        }
                    }
                    else
                    {
                        ttAPInvDtl.ScrTotalTax = ttAPInvDtl.ScrTotalTax - apInvLnMscTax.TaxAmt - apInvLnMscTax.TaxAmtVar;
                        ttAPInvDtl.DocScrTotalTax = ttAPInvDtl.DocScrTotalTax - apInvLnMscTax.DocTaxAmt - apInvLnMscTax.DocTaxAmtVar;
                        ttAPInvDtl.Rpt1ScrTotalTax = ttAPInvDtl.Rpt1ScrTotalTax - apInvLnMscTax.Rpt1TaxAmt - apInvLnMscTax.Rpt1TaxAmtVar;
                        ttAPInvDtl.Rpt2ScrTotalTax = ttAPInvDtl.Rpt2ScrTotalTax - apInvLnMscTax.Rpt2TaxAmt - apInvLnMscTax.Rpt2TaxAmtVar;
                        ttAPInvDtl.Rpt3ScrTotalTax = ttAPInvDtl.Rpt3ScrTotalTax - apInvLnMscTax.Rpt3TaxAmt - apInvLnMscTax.Rpt3TaxAmtVar;

                        ttAPInvDtl.ScrTotalDedTax = ttAPInvDtl.ScrTotalDedTax - apInvLnMscTax.DedTaxAmt;
                        ttAPInvDtl.DocScrTotalDedTax = ttAPInvDtl.DocScrTotalDedTax - apInvLnMscTax.DocDedTaxAmt;
                        ttAPInvDtl.Rpt1ScrTotalDedTax = ttAPInvDtl.Rpt1ScrTotalDedTax - apInvLnMscTax.Rpt1DedTaxAmt;
                        ttAPInvDtl.Rpt2ScrTotalDedTax = ttAPInvDtl.Rpt2ScrTotalDedTax - apInvLnMscTax.Rpt2DedTaxAmt;
                        ttAPInvDtl.Rpt3ScrTotalDedTax = ttAPInvDtl.Rpt3ScrTotalDedTax - apInvLnMscTax.Rpt3DedTaxAmt;
                    }
                }
            }
            if (ttAPInvDtl.DebitMemo == true)
            {
                ttAPInvDtl.ScrTotalTax = -ttAPInvDtl.ScrTotalTax;
                ttAPInvDtl.DocScrTotalTax = -ttAPInvDtl.DocScrTotalTax;
                ttAPInvDtl.Rpt1ScrTotalTax = -ttAPInvDtl.Rpt1ScrTotalTax;
                ttAPInvDtl.Rpt2ScrTotalTax = -ttAPInvDtl.Rpt2ScrTotalTax;
                ttAPInvDtl.Rpt3ScrTotalTax = -ttAPInvDtl.Rpt3ScrTotalTax;

                ttAPInvDtl.ScrTotalDedTax = -ttAPInvDtl.ScrTotalDedTax;
                ttAPInvDtl.DocScrTotalDedTax = -ttAPInvDtl.DocScrTotalDedTax;
                ttAPInvDtl.Rpt1ScrTotalDedTax = -ttAPInvDtl.Rpt1ScrTotalDedTax;
                ttAPInvDtl.Rpt2ScrTotalDedTax = -ttAPInvDtl.Rpt2ScrTotalDedTax;
                ttAPInvDtl.Rpt3ScrTotalDedTax = -ttAPInvDtl.Rpt3ScrTotalDedTax;

                ttAPInvDtl.ScrTotalSATax = -ttAPInvDtl.ScrTotalSATax;
                ttAPInvDtl.DocScrTotalSATax = -ttAPInvDtl.DocScrTotalSATax;
                ttAPInvDtl.Rpt1ScrTotalSATax = -ttAPInvDtl.Rpt1ScrTotalSATax;
                ttAPInvDtl.Rpt2ScrTotalSATax = -ttAPInvDtl.Rpt2ScrTotalSATax;
                ttAPInvDtl.Rpt3ScrTotalSATax = -ttAPInvDtl.Rpt3ScrTotalSATax;
            }
        }

        private void AssignAPInvMscExtAmtFields()
        {
            ttAPInvMsc.ScrTotalTax = 0;
            ttAPInvMsc.DocScrTotalTax = 0;
            ttAPInvMsc.Rpt1ScrTotalTax = 0;
            ttAPInvMsc.Rpt2ScrTotalTax = 0;
            ttAPInvMsc.Rpt3ScrTotalTax = 0;
            ttAPInvMsc.ScrTotalDedTax = 0;
            ttAPInvMsc.DocScrTotalDedTax = 0;
            ttAPInvMsc.Rpt1ScrTotalDedTax = 0;
            ttAPInvMsc.Rpt2ScrTotalDedTax = 0;
            ttAPInvMsc.Rpt3ScrTotalDedTax = 0;
            ttAPInvMsc.ScrTotalSATax = 0;
            ttAPInvMsc.DocScrTotalSATax = 0;
            ttAPInvMsc.Rpt1ScrTotalSATax = 0;
            ttAPInvMsc.Rpt2ScrTotalSATax = 0;
            ttAPInvMsc.Rpt3ScrTotalSATax = 0;

            foreach (var apInvLnMscTax in SelectAPInvLnMscTaxMscNum(Session.CompanyID, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, ttAPInvMsc.InvoiceLine, ttAPInvMsc.MscNum))
            {
                if (apInvLnMscTax.CollectionType != 1)
                {
                    if (apInvLnMscTax.CollectionType == 2 || apInvLnMscTax.CollectionType == 3)
                    {
                        if (apInvLnMscTax.ECAcquisitionSeq == 0)
                        {
                            ttAPInvMsc.ScrTotalSATax = ttAPInvMsc.ScrTotalSATax + apInvLnMscTax.TaxAmt + apInvLnMscTax.TaxAmtVar;
                            ttAPInvMsc.DocScrTotalSATax = ttAPInvMsc.DocScrTotalSATax + apInvLnMscTax.DocTaxAmt + apInvLnMscTax.DocTaxAmtVar;
                            ttAPInvMsc.Rpt1ScrTotalSATax = ttAPInvMsc.Rpt1ScrTotalSATax + apInvLnMscTax.Rpt1TaxAmt + apInvLnMscTax.Rpt1TaxAmtVar;
                            ttAPInvMsc.Rpt2ScrTotalSATax = ttAPInvMsc.Rpt2ScrTotalSATax + apInvLnMscTax.Rpt2TaxAmt + apInvLnMscTax.Rpt2TaxAmtVar;
                            ttAPInvMsc.Rpt3ScrTotalSATax = ttAPInvMsc.Rpt3ScrTotalSATax + apInvLnMscTax.Rpt3TaxAmt + apInvLnMscTax.Rpt3TaxAmtVar;
                        }
                    }
                    else
                    {
                        ttAPInvMsc.ScrTotalTax = ttAPInvMsc.ScrTotalTax + apInvLnMscTax.TaxAmt + apInvLnMscTax.TaxAmtVar;
                        ttAPInvMsc.DocScrTotalTax = ttAPInvMsc.DocScrTotalTax + apInvLnMscTax.DocTaxAmt + apInvLnMscTax.DocTaxAmtVar;
                        ttAPInvMsc.Rpt1ScrTotalTax = ttAPInvMsc.Rpt1ScrTotalTax + apInvLnMscTax.Rpt1TaxAmt + apInvLnMscTax.Rpt1TaxAmtVar;
                        ttAPInvMsc.Rpt2ScrTotalTax = ttAPInvMsc.Rpt2ScrTotalTax + apInvLnMscTax.Rpt2TaxAmt + apInvLnMscTax.Rpt2TaxAmtVar;
                        ttAPInvMsc.Rpt3ScrTotalTax = ttAPInvMsc.Rpt3ScrTotalTax + apInvLnMscTax.Rpt3TaxAmt + apInvLnMscTax.Rpt3TaxAmtVar;

                        ttAPInvMsc.ScrTotalDedTax = ttAPInvMsc.ScrTotalDedTax + apInvLnMscTax.DedTaxAmt;
                        ttAPInvMsc.DocScrTotalDedTax = ttAPInvMsc.DocScrTotalDedTax + apInvLnMscTax.DocDedTaxAmt;
                        ttAPInvMsc.Rpt1ScrTotalDedTax = ttAPInvMsc.Rpt1ScrTotalDedTax + apInvLnMscTax.Rpt1DedTaxAmt;
                        ttAPInvMsc.Rpt2ScrTotalDedTax = ttAPInvMsc.Rpt2ScrTotalDedTax + apInvLnMscTax.Rpt2DedTaxAmt;
                        ttAPInvMsc.Rpt3ScrTotalDedTax = ttAPInvMsc.Rpt3ScrTotalDedTax + apInvLnMscTax.Rpt3DedTaxAmt;
                    }
                }
            }
            if (ttAPInvMsc.DebitMemo == true)
            {
                ttAPInvMsc.ScrTotalTax = -ttAPInvMsc.ScrTotalTax;
                ttAPInvMsc.DocScrTotalTax = -ttAPInvMsc.DocScrTotalTax;
                ttAPInvMsc.Rpt1ScrTotalTax = -ttAPInvMsc.Rpt1ScrTotalTax;
                ttAPInvMsc.Rpt2ScrTotalTax = -ttAPInvMsc.Rpt2ScrTotalTax;
                ttAPInvMsc.Rpt3ScrTotalTax = -ttAPInvMsc.Rpt3ScrTotalTax;

                ttAPInvMsc.ScrTotalDedTax = -ttAPInvMsc.ScrTotalDedTax;
                ttAPInvMsc.DocScrTotalDedTax = -ttAPInvMsc.DocScrTotalDedTax;
                ttAPInvMsc.Rpt1ScrTotalDedTax = -ttAPInvMsc.Rpt1ScrTotalDedTax;
                ttAPInvMsc.Rpt2ScrTotalDedTax = -ttAPInvMsc.Rpt2ScrTotalDedTax;
                ttAPInvMsc.Rpt3ScrTotalDedTax = -ttAPInvMsc.Rpt3ScrTotalDedTax;

                ttAPInvMsc.ScrTotalSATax = -ttAPInvMsc.ScrTotalSATax;
                ttAPInvMsc.DocScrTotalSATax = -ttAPInvMsc.DocScrTotalSATax;
                ttAPInvMsc.Rpt1ScrTotalSATax = -ttAPInvMsc.Rpt1ScrTotalSATax;
                ttAPInvMsc.Rpt2ScrTotalSATax = -ttAPInvMsc.Rpt2ScrTotalSATax;
                ttAPInvMsc.Rpt3ScrTotalSATax = -ttAPInvMsc.Rpt3ScrTotalSATax;
            }
        }
        private void AssignAPIHAPInvMscExtAmtFields()
        {
            ttAPIHAPInvMsc.ScrTotalTax = 0;
            ttAPIHAPInvMsc.DocScrTotalTax = 0;
            ttAPIHAPInvMsc.Rpt1ScrTotalTax = 0;
            ttAPIHAPInvMsc.Rpt2ScrTotalTax = 0;
            ttAPIHAPInvMsc.Rpt3ScrTotalTax = 0;
            ttAPIHAPInvMsc.ScrTotalDedTax = 0;
            ttAPIHAPInvMsc.DocScrTotalDedTax = 0;
            ttAPIHAPInvMsc.Rpt1ScrTotalDedTax = 0;
            ttAPIHAPInvMsc.Rpt2ScrTotalDedTax = 0;
            ttAPIHAPInvMsc.Rpt3ScrTotalDedTax = 0;
            ttAPIHAPInvMsc.ScrTotalSATax = 0;
            ttAPIHAPInvMsc.DocScrTotalSATax = 0;
            ttAPIHAPInvMsc.Rpt1ScrTotalSATax = 0;
            ttAPIHAPInvMsc.Rpt2ScrTotalSATax = 0;
            ttAPIHAPInvMsc.Rpt3ScrTotalSATax = 0;

            foreach (var apInvHedMscTax in SelectAPInvHedMscTaxMscNum(Session.CompanyID, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, ttAPIHAPInvMsc.MscNum))
            {
                if (apInvHedMscTax.CollectionType != 1)
                {
                    if (apInvHedMscTax.CollectionType == 2 || apInvHedMscTax.CollectionType == 3)
                    {
                        if (apInvHedMscTax.ECAcquisitionSeq == 0)
                        {
                            ttAPIHAPInvMsc.ScrTotalSATax = ttAPIHAPInvMsc.ScrTotalSATax + apInvHedMscTax.TaxAmt + apInvHedMscTax.TaxAmtVar;
                            ttAPIHAPInvMsc.DocScrTotalSATax = ttAPIHAPInvMsc.DocScrTotalSATax + apInvHedMscTax.DocTaxAmt + apInvHedMscTax.DocTaxAmtVar;
                            ttAPIHAPInvMsc.Rpt1ScrTotalSATax = ttAPIHAPInvMsc.Rpt1ScrTotalSATax + apInvHedMscTax.Rpt1TaxAmt + apInvHedMscTax.Rpt1TaxAmtVar;
                            ttAPIHAPInvMsc.Rpt2ScrTotalSATax = ttAPIHAPInvMsc.Rpt2ScrTotalSATax + apInvHedMscTax.Rpt2TaxAmt + apInvHedMscTax.Rpt2TaxAmtVar;
                            ttAPIHAPInvMsc.Rpt3ScrTotalSATax = ttAPIHAPInvMsc.Rpt3ScrTotalSATax + apInvHedMscTax.Rpt3TaxAmt + apInvHedMscTax.Rpt3TaxAmtVar;
                        }
                    }
                    else
                    {
                        ttAPIHAPInvMsc.ScrTotalTax = ttAPIHAPInvMsc.ScrTotalTax + apInvHedMscTax.TaxAmt + apInvHedMscTax.TaxAmtVar;
                        ttAPIHAPInvMsc.DocScrTotalTax = ttAPIHAPInvMsc.DocScrTotalTax + apInvHedMscTax.DocTaxAmt + apInvHedMscTax.DocTaxAmtVar;
                        ttAPIHAPInvMsc.Rpt1ScrTotalTax = ttAPIHAPInvMsc.Rpt1ScrTotalTax + apInvHedMscTax.Rpt1TaxAmt + apInvHedMscTax.Rpt1TaxAmtVar;
                        ttAPIHAPInvMsc.Rpt2ScrTotalTax = ttAPIHAPInvMsc.Rpt2ScrTotalTax + apInvHedMscTax.Rpt2TaxAmt + apInvHedMscTax.Rpt2TaxAmtVar;
                        ttAPIHAPInvMsc.Rpt3ScrTotalTax = ttAPIHAPInvMsc.Rpt3ScrTotalTax + apInvHedMscTax.Rpt3TaxAmt + apInvHedMscTax.Rpt3TaxAmtVar;

                        ttAPIHAPInvMsc.ScrTotalDedTax = ttAPIHAPInvMsc.ScrTotalDedTax + apInvHedMscTax.DedTaxAmt;
                        ttAPIHAPInvMsc.DocScrTotalDedTax = ttAPIHAPInvMsc.DocScrTotalDedTax + apInvHedMscTax.DocDedTaxAmt;
                        ttAPIHAPInvMsc.Rpt1ScrTotalDedTax = ttAPIHAPInvMsc.Rpt1ScrTotalDedTax + apInvHedMscTax.Rpt1DedTaxAmt;
                        ttAPIHAPInvMsc.Rpt2ScrTotalDedTax = ttAPIHAPInvMsc.Rpt2ScrTotalDedTax + apInvHedMscTax.Rpt2DedTaxAmt;
                        ttAPIHAPInvMsc.Rpt3ScrTotalDedTax = ttAPIHAPInvMsc.Rpt3ScrTotalDedTax + apInvHedMscTax.Rpt3DedTaxAmt;
                    }
                }
            }
            if (ttAPIHAPInvMsc.DebitMemo == true)
            {
                ttAPIHAPInvMsc.ScrTotalTax = -ttAPIHAPInvMsc.ScrTotalTax;
                ttAPIHAPInvMsc.DocScrTotalTax = -ttAPIHAPInvMsc.DocScrTotalTax;
                ttAPIHAPInvMsc.Rpt1ScrTotalTax = -ttAPIHAPInvMsc.Rpt1ScrTotalTax;
                ttAPIHAPInvMsc.Rpt2ScrTotalTax = -ttAPIHAPInvMsc.Rpt2ScrTotalTax;
                ttAPIHAPInvMsc.Rpt3ScrTotalTax = -ttAPIHAPInvMsc.Rpt3ScrTotalTax;

                ttAPIHAPInvMsc.ScrTotalDedTax = -ttAPIHAPInvMsc.ScrTotalDedTax;
                ttAPIHAPInvMsc.DocScrTotalDedTax = -ttAPIHAPInvMsc.DocScrTotalDedTax;
                ttAPIHAPInvMsc.Rpt1ScrTotalDedTax = -ttAPIHAPInvMsc.Rpt1ScrTotalDedTax;
                ttAPIHAPInvMsc.Rpt2ScrTotalDedTax = -ttAPIHAPInvMsc.Rpt2ScrTotalDedTax;
                ttAPIHAPInvMsc.Rpt3ScrTotalDedTax = -ttAPIHAPInvMsc.Rpt3ScrTotalDedTax;

                ttAPIHAPInvMsc.ScrTotalSATax = -ttAPIHAPInvMsc.ScrTotalSATax;
                ttAPIHAPInvMsc.DocScrTotalSATax = -ttAPIHAPInvMsc.DocScrTotalSATax;
                ttAPIHAPInvMsc.Rpt1ScrTotalSATax = -ttAPIHAPInvMsc.Rpt1ScrTotalSATax;
                ttAPIHAPInvMsc.Rpt2ScrTotalSATax = -ttAPIHAPInvMsc.Rpt2ScrTotalSATax;
                ttAPIHAPInvMsc.Rpt3ScrTotalSATax = -ttAPIHAPInvMsc.Rpt3ScrTotalSATax;
            }
        }

        private void AssignAPInvJobJobMtlFields()
        {
            if (JobMtl == null || (StringExtensions.Compare(JobMtl.JobNum, ttAPInvJob.JobNum) != 0 || JobMtl.AssemblySeq != ttAPInvJob.AssemblySeq || JobMtl.MtlSeq != ttAPInvJob.MtlSeq))
            {
                JobMtl = JobMtl.FindFirstByPrimaryKey(Db, ttAPInvJob.Company, ttAPInvJob.JobNum, ttAPInvJob.AssemblySeq, ttAPInvJob.MtlSeq);
            }

            /* if available JobMtl */
            if (JobMtl != null)
            {
                ttAPInvJob.JobType = ((JobMtl.CallNum > 0) ? Strings.Service : Strings.Manufacture);
                ttAPInvJob.CallNum = JobMtl.CallNum;
                ttAPInvJob.CallLine = JobMtl.CallLine;
                ttAPInvJob.JobMtlPartNum = JobMtl.PartNum;
                ttAPInvJob.JobMtlDescription = JobMtl.Description;
                ttAPInvJob.JobMtlUnitCost = JobMtl.EstUnitCost;
                ttAPInvJob.JobMtlTotalCost = JobMtl.TotalCost;
                ttAPInvJob.ScrExtCost = JobMtl.EstUnitCost;
                ttAPInvJob.EnableMaterialComplete = false;

                PurMisc = FindFirstPurMisc(JobMtl.Company, JobMtl.MiscCode);
                if (PurMisc != null)
                {
                    ttAPInvJob.JobMtlMiscCodeDesc = PurMisc.Description;
                }
                else
                {
                    ttAPInvJob.JobMtlMiscCodeDesc = "";
                }
                /* maintain Material Complete flag of FSCallHd */
                if (ttAPInvJob.CallNum > 0)
                {
                    FSCallhd = FindFirstFSCallhd(ttAPInvJob.Company, ttAPInvJob.CallNum);
                    if (FSCallhd != null && FSCallhd.Invoiced == false)
                    {
                        ttAPInvJob.MaterialComplete = FSCallhd.MaterialComplete;
                        ttAPInvJob.EnableMaterialComplete = true;
                    }
                }
            }
            else
            {
                ttAPInvJob.JobType = "";
                ttAPInvJob.CallNum = 0;
                ttAPInvJob.CallLine = 0;
                ttAPInvJob.JobMtlPartNum = "";
                ttAPInvJob.JobMtlDescription = "";
                ttAPInvJob.JobMtlUnitCost = 0;
                ttAPInvJob.JobMtlTotalCost = 0;
                ttAPInvJob.MaterialComplete = false;
                ttAPInvJob.EnableMaterialComplete = false;
            }
            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPInvJob.VendorNum), ttAPInvJob.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            ttAPInvJob.DocScrExtCost = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvJob.ScrExtCost, ttAPInvJob.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "APInvJob", "DocScrExtCost");
            LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvJob, false, "ScrExtCost", pCurrList, "ttAPInvJob", ttAPInvJob.CurrencyCode, ttChainRows);
        }

        /// <summary>
        /// Assigns a legal number to the invoice.
        /// </summary>
        /// <param name="inGroupID">The group id</param>
        /// <param name="inVendor">The vendor num</param>
        /// <param name="inInvNum">The invoice number</param>
        /// <param name="opLegalNumMsg">Legal number message</param>
        /// <param name="ds">The APInvoice data set</param>
        public void AssignLegalNumber(string inGroupID, int inVendor, string inInvNum, out string opLegalNumMsg, ref APInvoiceTableset ds)
        {
            opLegalNumMsg = string.Empty;

            string foreignKeyString = string.Empty;
            string cLegalNumber = string.Empty;
            string cOCRNumber = string.Empty;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, inVendor, inInvNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceNotFound);
            }
            if (!String.IsNullOrEmpty(APInvHed.LegalNumber))
            {
                throw new BLException(Strings.ALegalNumberHasAlreadyBeenAssig);
            }

            ttLegalNumGenOpts = (from ttLegalNumGenOpts_Row in ds.LegalNumGenOpts
                                 where !String.IsNullOrEmpty(ttLegalNumGenOpts_Row.RowMod)
                                 select ttLegalNumGenOpts_Row).FirstOrDefault();

            if (ttLegalNumGenOpts == null)
            {
                throw new BLException(Strings.LegalNumberGenerOptionsNotFound);
            }

            using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
            {
                foreignKeyString = Compatibility.Convert.ToString(APInvHed.VendorNum).Trim() + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(APInvHed.InvoiceNum).Trim();
                LibLegalNumberGenerate.GenerateLegalNumber(ds.LegalNumGenOpts, "APInvHed", foreignKeyString, out cLegalNumber, out cOCRNumber, out opLegalNumMsg);

                APInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, inVendor, inInvNum);
                if (APInvHed != null)
                {
                    APInvHed.LegalNumber = cLegalNumber;
                    Db.Validate(APInvHed);
                }

                Db.Validate();
                trans.Complete();
            }

            /* Return refreshed dataset */
            using (var svc = Ice.Assemblies.ServiceRenderer.GetService<Erp.Contracts.APInvoiceSvcContract>(Db))
            {
                ds = svc.GetByID(inVendor, inInvNum);
            }

            foreach (var ttLegalNumGenOpts_Row in ds.LegalNumGenOpts)
            {
                ttLegalNumGenOpts_Row.RowMod = IceRow.ROWSTATE_DELETED;
            }
        }

        private void AssignNewttGlbAPIETGLC(int inVendorNum, string inInvoiceNum, int inInvoiceLine, int inInvExpSeq, string inGroupID, string inExtCompanyID, string inSysAcctCntxt, int inTGLCTranNum)
        {
            ttGlbAPIETGLC.Company = Session.CompanyID;
            ttGlbAPIETGLC.RelatedToFile = "APInvExp";
            ttGlbAPIETGLC.Key1 = Compatibility.Convert.ToString(inVendorNum);
            ttGlbAPIETGLC.Key2 = Compatibility.Convert.ToString(inInvoiceNum);
            ttGlbAPIETGLC.Key3 = Compatibility.Convert.ToString(inInvoiceLine);
            ttGlbAPIETGLC.Key4 = Compatibility.Convert.ToString(inInvExpSeq);
            ttGlbAPIETGLC.Key5 = Compatibility.Convert.ToString(inGroupID);
            ttGlbAPIETGLC.TGLCTranNum = inTGLCTranNum;
            ttGlbAPIETGLC.VendorNum = inVendorNum;
            ttGlbAPIETGLC.InvoiceNum = inInvoiceNum;
            ttGlbAPIETGLC.InvoiceLine = inInvoiceLine;
            ttGlbAPIETGLC.InvExpSeq = inInvExpSeq;
            ttGlbAPIETGLC.GroupID = inGroupID;
            ttGlbAPIETGLC.SysGLControlType = "AP Invoice Expense";
            ttGlbAPIETGLC.GLAcctContext = inSysAcctCntxt;
            ttGlbAPIETGLC.UserCanModify = true;
            ttGlbAPIETGLC.IsExternalCompany = true;
            ttGlbAPIETGLC.ExtCompanyID = inExtCompanyID;
            ttGlbAPIETGLC.RecordType = "A";


            var GLBCOAQuery = DBExpressionCompiler.Compile(GLBCOAExpression);
            GLBCOA = GLBCOAQuery(Db, Session.CompanyID, inExtCompanyID);
            if (GLBCOA != null)
            {
                ttGlbAPIETGLC.COACode = GLBCOA.COACode;
            }
        }

        partial void BeforeGetRows(Dictionary<IIceTable, QueryModifier> queryModifiers)
        {
            int iRepeat = 1;
            //PROGRAM_STACK_LOOP:
            while (iRepeat < stackTrace.FrameCount && stackTrace.GetFrame(iRepeat - 1).GetMethod().Name != null)
            {
                if ((stackTrace.GetFrame(iRepeat - 1).GetMethod().Name.IndexOf("GetByID", StringComparison.OrdinalIgnoreCase) + 1) > 0)
                {
                    lCalledFromGetByID = true;
                    break;
                }
                iRepeat = iRepeat + 1;
            }

            queryModifiers[CurrentFullTableset.APInvHed].WhereClause = LibGLAccountCore.ApplyMultiSiteWhereClause(queryModifiers[CurrentFullTableset.APInvHed].WhereClause, "SourcePlant");

            queryModifiers[CurrentFullTableset.APInvExpTGLC].WhereClause = LibGLAccountCore.ApplyMultiSiteWhereClause(queryModifiers[CurrentFullTableset.APInvExpTGLC].WhereClause, "[APInvExpTGLC].[Plant]");

            if (queryModifiers[CurrentFullTableset.APInvTax].WhereClause == null)
            {
                queryModifiers[CurrentFullTableset.APInvTax].WhereClause = "ECAcquisitionSeq = 0 or ECAcquisitionSeq = 2";
            }
            else
            {
                queryModifiers[CurrentFullTableset.APInvTax].WhereClause = "(" + queryModifiers[CurrentFullTableset.APInvTax].WhereClause + ") and (ECAcquisitionSeq = 0 or ECAcquisitionSeq = 2)";
            }

            if (queryModifiers[CurrentFullTableset.APIHAPInvExp].WhereClause == null)
            {
                queryModifiers[CurrentFullTableset.APIHAPInvExp].WhereClause = "InvoiceLine = 0";
            }
            else
            {
                queryModifiers[CurrentFullTableset.APIHAPInvExp].WhereClause = "(" + queryModifiers[CurrentFullTableset.APIHAPInvExp].WhereClause + ") and InvoiceLine = 0";
            }

            if (queryModifiers[CurrentFullTableset.APIHAPInvMsc].WhereClause == null)
            {
                queryModifiers[CurrentFullTableset.APIHAPInvMsc].WhereClause = "InvoiceLine = 0";
            }
            else
            {
                queryModifiers[CurrentFullTableset.APIHAPInvMsc].WhereClause = "(" + queryModifiers[CurrentFullTableset.APIHAPInvMsc].WhereClause + ") and InvoiceLine = 0";
            }


            if (queryModifiers[CurrentFullTableset.APLnTax].WhereClause == null)
            {
                queryModifiers[CurrentFullTableset.APLnTax].WhereClause = "ECAcquisitionSeq = 0";
            }
            else
            {
                queryModifiers[CurrentFullTableset.APLnTax].WhereClause = "(" + queryModifiers[CurrentFullTableset.APLnTax].WhereClause + ") and ECAcquisitionSeq = 0";
            }

            if (queryModifiers[CurrentFullTableset.APInvLnMscTax].WhereClause == null)
            {
                queryModifiers[CurrentFullTableset.APInvLnMscTax].WhereClause = "ECAcquisitionSeq = 0";
            }
            else
            {
                queryModifiers[CurrentFullTableset.APInvLnMscTax].WhereClause = "(" + queryModifiers[CurrentFullTableset.APInvLnMscTax].WhereClause + ") and ECAcquisitionSeq = 0";
            }

            if (queryModifiers[CurrentFullTableset.APInvHedMscTax].WhereClause == null)
            {
                queryModifiers[CurrentFullTableset.APInvHedMscTax].WhereClause = "ECAcquisitionSeq = 0";
            }
            else
            {
                queryModifiers[CurrentFullTableset.APInvHedMscTax].WhereClause = "(" + queryModifiers[CurrentFullTableset.APInvHedMscTax].WhereClause + ") and ECAcquisitionSeq = 0";
            }
        }

        partial void BeforeGetList(QueryModifier queryModifier)
        {
            queryModifier.WhereClause = LibGLAccountCore.ApplyMultiSiteWhereClause(queryModifier.WhereClause, "SourcePlant");
        }

        private void CalcBaseAmt(decimal dDocAmt, int iVendorNum, string cInvoiceNum, IceRow hTTable, string baseFieldName, out decimal dBaseAmt, out decimal dRpt1Amt, out decimal dRpt2Amt, out decimal dRpt3Amt)
        {
            dBaseAmt = decimal.Zero;
            dRpt1Amt = decimal.Zero;
            dRpt2Amt = decimal.Zero;
            dRpt3Amt = decimal.Zero;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, iVendorNum, cInvoiceNum);
            if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                dBaseAmt = dDocAmt;
                dRpt1Amt = 0;
                dRpt2Amt = 0;
                dRpt3Amt = 0;
            }
            else
            {
                if (String.IsNullOrEmpty(pCurrList))
                {
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                }

                dBaseAmt = LibRoundAmountEF.RoundDecimalsTT(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true), hTTable, baseFieldName);

                if (pCurrList.Entry(1, Ice.Constants.LIST_DELIM) != "")
                {
                    dRpt1Amt = LibRoundAmountEF.RoundDecimalsTT(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(1, Ice.Constants.LIST_DELIM), ttChainRows, true), hTTable, "Rpt1" + baseFieldName);
                }

                if (pCurrList.Entry(2, Ice.Constants.LIST_DELIM) != "")
                {
                    dRpt2Amt = LibRoundAmountEF.RoundDecimalsTT(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(2, Ice.Constants.LIST_DELIM), ttChainRows, true), hTTable, "Rpt2" + baseFieldName);
                }

                if (pCurrList.Entry(3, Ice.Constants.LIST_DELIM) != "")
                {
                    dRpt3Amt = LibRoundAmountEF.RoundDecimalsTT(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(3, Ice.Constants.LIST_DELIM), ttChainRows, true), hTTable, "Rpt3" + baseFieldName);
                }
            }
        }

        private void CalcDocAmt(ref decimal dBaseAmt, int iVendorNum, string cInvoiceNum, IceRow hTTable, string docFieldName, string baseFieldName, out decimal dDocAmt, out decimal dRpt1Amt, out decimal dRpt2Amt, out decimal dRpt3Amt)
        {
            dDocAmt = decimal.Zero;
            dRpt1Amt = decimal.Zero;
            dRpt2Amt = decimal.Zero;
            dRpt3Amt = decimal.Zero;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, iVendorNum, cInvoiceNum);
            if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                dDocAmt = dBaseAmt;
                dRpt1Amt = 0;
                dRpt2Amt = 0;
                dRpt3Amt = 0;
            }
            else
            {
                if (String.IsNullOrEmpty(pCurrList))
                {
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                }

                dDocAmt = LibRoundAmountEF.RoundDecimalsTT(this.LibConvertAmtEF.ConvertAmt(dBaseAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false), hTTable, docFieldName);
                dBaseAmt = LibRoundAmountEF.RoundDecimalsTT(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true), hTTable, baseFieldName);

                if (pCurrList.Entry(1, Ice.Constants.LIST_DELIM) != "")
                {
                    dRpt1Amt = LibRoundAmountEF.RoundDecimalsTT(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(1, Ice.Constants.LIST_DELIM), ttChainRows, true), hTTable, "Rpt1" + baseFieldName);
                }

                if (pCurrList.Entry(2, Ice.Constants.LIST_DELIM) != "")
                {
                    dRpt2Amt = LibRoundAmountEF.RoundDecimalsTT(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(2, Ice.Constants.LIST_DELIM), ttChainRows, true), hTTable, "Rpt2" + baseFieldName);
                }

                if (pCurrList.Entry(3, Ice.Constants.LIST_DELIM) != "")
                {
                    dRpt3Amt = LibRoundAmountEF.RoundDecimalsTT(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(3, Ice.Constants.LIST_DELIM), ttChainRows, true), hTTable, "Rpt3" + baseFieldName);
                }
            }

        }

        private void CalcDocAmtByTableName(ref decimal dBaseAmt, int iVendorNum, string cInvoiceNum, string tableName, string docFieldName, string baseFieldName, out decimal dDocAmt, out decimal dRpt1Amt, out decimal dRpt2Amt, out decimal dRpt3Amt, out string sRateGrpCode, out string sCurrencyCode, out DateTime? dApplyDate)
        {
            dDocAmt = decimal.Zero;
            dRpt1Amt = decimal.Zero;
            dRpt2Amt = decimal.Zero;
            dRpt3Amt = decimal.Zero;
            sRateGrpCode = String.Empty;
            sCurrencyCode = String.Empty;
            dApplyDate = null;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, iVendorNum, cInvoiceNum);
            if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                dDocAmt = dBaseAmt;
                dRpt1Amt = 0;
                dRpt2Amt = 0;
                dRpt3Amt = 0;
            }
            else
            {
                if (String.IsNullOrEmpty(pCurrList))
                {
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                }

                sRateGrpCode = APInvHed.RateGrpCode;
                sCurrencyCode = APInvHed.CurrencyCode;
                dApplyDate = (DateTime)APInvHed.ApplyDate;

                dDocAmt = LibRoundAmountEF.RoundDecimalsApply(this.LibConvertAmtEF.ConvertAmt(dBaseAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false), APInvHed.CurrencyCode, tableName, docFieldName);
                dBaseAmt = LibRoundAmountEF.RoundDecimalsApply(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true), APInvHed.CurrencyCode, tableName, baseFieldName);

                if (pCurrList.Entry(1, Ice.Constants.LIST_DELIM) != "")
                {
                    dRpt1Amt = LibRoundAmountEF.RoundDecimalsApply(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(1, Ice.Constants.LIST_DELIM), ttChainRows, true), APInvHed.CurrencyCode, tableName, "Rpt1" + baseFieldName);
                }

                if (pCurrList.Entry(2, Ice.Constants.LIST_DELIM) != "")
                {
                    dRpt2Amt = LibRoundAmountEF.RoundDecimalsApply(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(2, Ice.Constants.LIST_DELIM), ttChainRows, true), APInvHed.CurrencyCode, tableName, "Rpt2" + baseFieldName);
                }

                if (pCurrList.Entry(3, Ice.Constants.LIST_DELIM) != "")
                {
                    dRpt3Amt = LibRoundAmountEF.RoundDecimalsApply(this.LibConvertAmtEF.ConvertAmt(dDocAmt, APInvHed.CurrencyCode, pCurrList.Entry(3, Ice.Constants.LIST_DELIM), ttChainRows, true), APInvHed.CurrencyCode, tableName, "Rpt3" + baseFieldName);
                }
            }

        }

        private void CalcExtCost()
        {
            Erp.Tables.APInvHed bufAPInvHed = null;

            /* SCR85302 Recalculate when DocUnitCost is zero. */
            if (ttAPInvDtl.InPrice == false)
            {
                ttAPInvDtl.ScrDocExtCost = LibRoundAmountEF.RoundDecimalsTT((ttAPInvDtl.DocUnitCost * (ttAPInvDtl.ScrVendorQty / costFactor(ttAPInvDtl.CostPerCode))), ttAPInvDtl, "ScrDocExtCost");
            }
            else
            {
                ttAPInvDtl.ScrDocExtCost = LibRoundAmountEF.RoundDecimalsTT((ttAPInvDtl.DocInUnitCost * (ttAPInvDtl.ScrVendorQty / costFactor(ttAPInvDtl.CostPerCode))), ttAPInvDtl, "ScrDocExtCost");
            }
            var outScrExtCost = ttAPInvDtl.ScrExtCost;
            var outRpt1ScrExtCost = ttAPInvDtl.Rpt1ScrExtCost;
            var outRpt2ScrExtCost = ttAPInvDtl.Rpt2ScrExtCost;
            var outRpt3ScrExtCost = ttAPInvDtl.Rpt3ScrExtCost;

            CalcBaseAmt(ttAPInvDtl.ScrDocExtCost, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "ScrExtCost", out outScrExtCost, out outRpt1ScrExtCost, out outRpt2ScrExtCost, out outRpt3ScrExtCost);

            ttAPInvDtl.ScrExtCost = outScrExtCost;
            ttAPInvDtl.Rpt1ScrExtCost = outRpt1ScrExtCost;
            ttAPInvDtl.Rpt2ScrExtCost = outRpt2ScrExtCost;
            ttAPInvDtl.Rpt3ScrExtCost = outRpt3ScrExtCost;


            if (ttAPInvDtl.InPrice)
            {
                if (ttAPInvDtl.DebitMemo == false)
                {
                    ttAPInvDtl.DocInExtCost = ttAPInvDtl.ScrDocExtCost;
                    ttAPInvDtl.InExtCost = ttAPInvDtl.ScrExtCost;
                    ttAPInvDtl.Rpt1InExtCost = ttAPInvDtl.Rpt1ScrExtCost;
                    ttAPInvDtl.Rpt2InExtCost = ttAPInvDtl.Rpt2ScrExtCost;
                    ttAPInvDtl.Rpt3InExtCost = ttAPInvDtl.Rpt3ScrExtCost;
                }
                else
                {
                    ttAPInvDtl.DocInExtCost = -ttAPInvDtl.ScrDocExtCost;
                    ttAPInvDtl.InExtCost = -ttAPInvDtl.ScrExtCost;
                    ttAPInvDtl.Rpt1InExtCost = -ttAPInvDtl.Rpt1ScrExtCost;
                    ttAPInvDtl.Rpt2InExtCost = -ttAPInvDtl.Rpt2ScrExtCost;
                    ttAPInvDtl.Rpt3InExtCost = -ttAPInvDtl.Rpt3ScrExtCost;
                }
            }


            /*Poland CSF - recalculating values of Adjustment Amount for adjustment lines*/


            bufAPInvHed = FindFirstAPInvHed(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (bufAPInvHed.CorrectionInv == true && ttAPInvDtl.CorrectionDtl == false)
            {
                ttAPInvDtl.AdjustmentValue = ttAPInvDtl.ScrExtCost - ttAPInvDtl.OrgExtCost;
                ttAPInvDtl.DocAdjustmentValue = ttAPInvDtl.ScrDocExtCost - ttAPInvDtl.DocOrgExtCost;
                ttAPInvDtl.Rpt1AdjustmentValue = ttAPInvDtl.Rpt1ScrExtCost - ttAPInvDtl.Rpt1OrgExtCost;
                ttAPInvDtl.Rpt2AdjustmentValue = ttAPInvDtl.Rpt2ScrExtCost - ttAPInvDtl.Rpt2OrgExtCost;
                ttAPInvDtl.Rpt3AdjustmentValue = ttAPInvDtl.Rpt3ScrExtCost - ttAPInvDtl.Rpt3OrgExtCost;
            }
        }

        private void CalcMiscAmtByMiscCode(string miscCode, int vendorNum, string invoiceNum, out string miscType, out decimal miscPercent, out decimal DocMiscAmt, out decimal MiscAmt, out string errorMsg)
        {
            miscType = string.Empty;
            miscPercent = decimal.Zero;
            DocMiscAmt = decimal.Zero;
            MiscAmt = decimal.Zero;
            errorMsg = string.Empty;

            decimal LCAmount = decimal.Zero;
            string baseCurrCode = string.Empty;
            string currCode = string.Empty;
            int pStep = 0;
            decimal pExRate = decimal.Zero;


            PurMisc = FindFirstPurMisc(Session.CompanyID, miscCode);
            if (PurMisc == null)
            {
                errorMsg = Strings.InvalidMiscellaneousCode;
                return;
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, vendorNum, invoiceNum);
            if (APInvHed == null)
            {
                errorMsg = Strings.APInvHedRecordNotFound;
                return;
            }



            Currency = FindFirstBaseCurrency(Session.CompanyID, true);
            if (Currency != null)
            {
                baseCurrCode = Currency.CurrencyCode;
            }

            miscType = PurMisc.Type;
            if (String.IsNullOrEmpty(miscType))
            {
                miscType = "A";
            }

            if (PurMisc.LCFlag)
            {


                var PurMiscVendQuery = DBExpressionCompiler.Compile(PurMiscVendExpression);
                PurMiscVend = PurMiscVendQuery(Db, Session.CompanyID, miscCode, vendorNum);
                if (PurMiscVend != null)
                {
                    miscType = PurMiscVend.Type;
                    if (String.IsNullOrEmpty(miscType))
                    {
                        miscType = "A";
                    }

                    miscPercent = PurMiscVend.Percentage;
                    currCode = PurMiscVend.LCCurrencyCode;
                    LCAmount = PurMiscVend.LCAmount;
                }
                else
                {
                    miscPercent = PurMisc.Percentage;
                    currCode = PurMisc.LCCurrencyCode;
                    LCAmount = PurMisc.LCAmount;
                }
                if (StringExtensions.Compare(miscType, "A") == 0 && LCAmount != 0)
                {
                    if (StringExtensions.Compare(APInvHed.CurrencyCode, currCode) == 0)
                    {
                        DocMiscAmt = LCAmount;
                    }
                    else if (StringExtensions.Compare(baseCurrCode, currCode) == 0)
                    {
                        MiscAmt = LCAmount;
                    }
                    else
                    {
                        tmpChainRows = new List<CurrExChain>();

                        if (vUseDate == 1)
                        {
                            vExDate = APInvHed.InvoiceDate;
                        }
                        else
                        {
                            vExDate = APInvHed.ApplyDate;
                        }

                        this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, currCode, APInvHed.CurrencyCode, vExDate, false, 0, "APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", APInvHed.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                        DocMiscAmt = this.LibConvertAmtEF.ConvertAmt(LCAmount, currCode, APInvHed.CurrencyCode, tmpChainRows, true);
                        DocMiscAmt = LibRoundAmountEF.RoundDecimalsApply(DocMiscAmt, APInvHed.CurrencyCode, "APInvMisc", "DocMiscAmt");
                    }
                }
            }
        }

        /// <summary>
        /// This method calculates Misc Charges Amounts with Type Percentage.
        /// </summary>
        private void CalcMiscAmtByPercent()
        {
            decimal docTotExtCost = decimal.Zero;
            if (APInvHed == null)
            {
                return;
            }

            if (ttAPInvMsc != null)
            {
                if (StringExtensions.Compare(ttAPInvMsc.Type, "P") != 0)
                {
                    return;
                }

                APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, ttAPInvMsc.InvoiceLine);
                if (APInvDtl != null)
                {

                    if (APInvHed.InPrice == false)
                    {
                        ttAPInvMsc.ScrDocMiscAmt = LibRoundAmountEF.RoundDecimalsApply((ttAPInvMsc.Percentage * (APInvHed.DebitMemo ? -APInvDtl.DocExtCost : APInvDtl.DocExtCost) / 100), APInvHed.CurrencyCode, "ttAPInvMsc", "DocMiscAmt");
                    }
                    else
                    {
                        ttAPInvMsc.ScrDocMiscAmt = LibRoundAmountEF.RoundDecimalsApply((ttAPInvMsc.Percentage * (APInvHed.DebitMemo ? -APInvDtl.DocInExtCost : APInvDtl.DocInExtCost) / 100), APInvHed.CurrencyCode, "ttAPInvMsc", "DocMiscAmt");
                    }
                    var outScrMiscAmt = ttAPInvMsc.ScrMiscAmt;
                    var outRpt1ScrMiscAmt = ttAPInvMsc.Rpt1ScrMiscAmt;
                    var outRpt2ScrMiscAmt = ttAPInvMsc.Rpt2ScrMiscAmt;
                    var outRpt3ScrMiscAmt = ttAPInvMsc.Rpt3ScrMiscAmt;
                    CalcBaseAmt(ttAPInvMsc.ScrDocMiscAmt, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, ttAPInvMsc, "ScrMiscAmt", out outScrMiscAmt, out outRpt1ScrMiscAmt, out outRpt2ScrMiscAmt, out outRpt3ScrMiscAmt);
                    ttAPInvMsc.ScrMiscAmt = outScrMiscAmt;
                    ttAPInvMsc.Rpt1ScrMiscAmt = outRpt1ScrMiscAmt;
                    ttAPInvMsc.Rpt2ScrMiscAmt = outRpt2ScrMiscAmt;
                    ttAPInvMsc.Rpt3ScrMiscAmt = outRpt3ScrMiscAmt;
                }
            }
            else if (ttAPIHAPInvMsc != null)
            {
                if (StringExtensions.Compare(ttAPIHAPInvMsc.Type, "P") != 0)
                {
                    return;
                }


                foreach (var APInvDtl_iterator in (SelectAPInvDtl(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                {
                    APInvDtl = APInvDtl_iterator;
                    if (APInvHed.InPrice == false)
                    {
                        docTotExtCost = docTotExtCost + APInvDtl.DocExtCost;
                    }
                    else
                    {
                        docTotExtCost = docTotExtCost + APInvDtl.DocInExtCost;
                    }
                }

                ttAPIHAPInvMsc.ScrDocMiscAmt = LibRoundAmountEF.RoundDecimalsApply((ttAPIHAPInvMsc.Percentage * (APInvHed.DebitMemo ? -docTotExtCost : docTotExtCost) / 100), APInvHed.CurrencyCode, "ttAPIHAPInvMsc", "DocMiscAmt");
                var outScrMiscAmt2 = ttAPIHAPInvMsc.ScrMiscAmt;
                var outRpt1ScrMiscAmt2 = ttAPIHAPInvMsc.Rpt1ScrMiscAmt;
                var outRpt2ScrMiscAmt2 = ttAPIHAPInvMsc.Rpt2ScrMiscAmt;
                var outRpt3ScrMiscAmt2 = ttAPIHAPInvMsc.Rpt3ScrMiscAmt;
                CalcBaseAmt(ttAPIHAPInvMsc.ScrDocMiscAmt, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, ttAPIHAPInvMsc, "ScrMiscAmt", out outScrMiscAmt2, out outRpt1ScrMiscAmt2, out outRpt2ScrMiscAmt2, out outRpt3ScrMiscAmt2);
                ttAPIHAPInvMsc.ScrMiscAmt = outScrMiscAmt2;
                ttAPIHAPInvMsc.Rpt1ScrMiscAmt = outRpt1ScrMiscAmt2;
                ttAPIHAPInvMsc.Rpt2ScrMiscAmt = outRpt2ScrMiscAmt2;
                ttAPIHAPInvMsc.Rpt3ScrMiscAmt = outRpt3ScrMiscAmt2;
            }
        }

        private void CalcTaxBasePrice()
        {
            DateTime? taxdate = null;
            decimal tmpTax = decimal.Zero;
            decimal doctmpTax = decimal.Zero;
            decimal rpt1tmpTax = decimal.Zero;
            decimal rpt2tmptax = decimal.Zero;
            decimal rpt3tmptax = decimal.Zero;

            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                ttAPInvTax.ScrTaxAmt = ttAPInvTax.ScrDocTaxAmt;
                ttAPInvTax.ScrFixedAmount = ttAPInvTax.ScrDocFixedAmount;
                ttAPInvTax.ScrTaxableAmt = ttAPInvTax.ScrDocTaxableAmt;
                ttAPInvTax.ScrDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt;
                ttAPInvTax.ScrTaxAmtVar = ttAPInvTax.ScrDocTaxAmtVar;
                ttAPInvTax.Rpt1ScrTaxAmt = 0;
                ttAPInvTax.Rpt2ScrTaxAmt = 0;
                ttAPInvTax.Rpt3ScrTaxAmt = 0;
                ttAPInvTax.Rpt1ScrFixedAmount = 0;
                ttAPInvTax.Rpt2ScrFixedAmount = 0;
                ttAPInvTax.Rpt3ScrFixedAmount = 0;
                ttAPInvTax.Rpt1ScrTaxAmtVar = 0;
                ttAPInvTax.Rpt2ScrTaxAmtVar = 0;
                ttAPInvTax.Rpt3ScrTaxAmtVar = 0;
                return;
            }

            if (XbSyst != null && XbSyst.UseTaxRate)
            {
                taxdate = ((APInvHed.TaxRateDate != null) ? APInvHed.TaxRateDate : ((APInvHed.TaxPoint != null) ? APInvHed.TaxPoint : ((vUseDate == 1) ? APInvHed.InvoiceDate : APInvHed.ApplyDate)));
                this.LibGetCurrencyRatesEF.BuildCurrencyRates(taxdate, "ApInvHed-Tax", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.TaxRateGrpCode, APInvHed.LockTaxRate, out tmpTaxChainRows, out taxCurrList, out taxRateList);
            }    /* BASE VALUE(BASE CURRENCY) = DOC VALUE(DOC CURRENCY) * EXCHANGE RATE ) */

            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

            string fieldNameScrDedTaxAmt = string.Empty;
            string fieldNameScrTaxAmt = string.Empty;
            string fieldNameScrFixedAmount = string.Empty;
            string fieldNameScrTaxableAmt = string.Empty;
            string fieldNameScrReportableAmt = string.Empty;


            /* use tax rate */
            if (XbSyst != null && XbSyst.UseTaxRate && ((from tmpTaxChain_Row in tmpTaxChainRows
                                                         select tmpTaxChain_Row).Any()))
            {
                ttAPInvTax.ScrTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrTaxAmt");
                ttAPInvTax.ScrFixedAmount = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrFixedAmount");
                ttAPInvTax.ScrTaxableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrTaxableAmt");
                ttAPInvTax.ScrReportableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrReportableAmt");
                doctmpTax = ttAPInvTax.ScrDocTaxAmt;


                ttAPInvTax.ScrDedTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrDedTaxAmt");

                for (i = 2; i <= 4; i++)
                {
                    if (taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                    {
                        fieldNameScrDedTaxAmt = "Rpt" + (i - 1).ToString() + "ScrDedTaxAmt";
                        ttAPInvTax[fieldNameScrDedTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrDedTaxAmt");
                    }
                }


                for (i = 2; i <= 4; i++)
                {
                    if (taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                    {
                        fieldNameScrTaxAmt = "Rpt" + (i - 1).ToString() + "ScrTaxAmt";
                        fieldNameScrFixedAmount = "Rpt" + (i - 1).ToString() + "ScrFixedAmount";
                        fieldNameScrTaxableAmt = "Rpt" + (i - 1).ToString() + "ScrTaxableAmt";
                        fieldNameScrReportableAmt = "Rpt" + (i - 1).ToString() + "ScrReportableAmt";

                        ttAPInvTax[fieldNameScrTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrTaxAmt");
                        ttAPInvTax[fieldNameScrFixedAmount] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrFixedAmount");
                        ttAPInvTax[fieldNameScrTaxableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrTaxableAmt");
                        ttAPInvTax[fieldNameScrReportableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrReportableAmt");
                    }
                }

                LibRptfieldscalc.ConvertAmtVarRoundDec(pCurrList, APInvHed.CurrencyCode, ttChainRows, "APInvTax", "TaxAmt", doctmpTax, out rpt1tmpTax, out rpt2tmptax, out rpt3tmptax);
                ttAPInvTax.ScrTaxAmtVar = tmpTax - ttAPInvTax.ScrTaxAmt;
                ttAPInvTax.Rpt1ScrTaxAmtVar = rpt1tmpTax - ttAPInvTax.Rpt1ScrTaxAmt;
                ttAPInvTax.Rpt2ScrTaxAmtVar = rpt2tmptax - ttAPInvTax.Rpt2ScrTaxAmt;
                ttAPInvTax.Rpt3ScrTaxAmtVar = rpt3tmptax - ttAPInvTax.Rpt3ScrTaxAmt;
            }
            else
            {
                ttAPInvTax.ScrTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrTaxAmt");
                ttAPInvTax.ScrFixedAmount = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrFixedAmount");
                ttAPInvTax.ScrTaxableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrTaxableAmt");
                ttAPInvTax.ScrReportableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrReportableAmt");


                ttAPInvTax.ScrDedTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrDedTaxAmt");


                for (i = 2; i <= 4; i++)
                {
                    if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                    {
                        fieldNameScrDedTaxAmt = "Rpt" + (i - 1).ToString() + "ScrDedTaxAmt";
                        ttAPInvTax[fieldNameScrDedTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrDedTaxAmt");
                    }
                }

                for (i = 2; i <= 4; i++)
                {
                    if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                    {
                        fieldNameScrTaxAmt = "Rpt" + (i - 1).ToString() + "ScrTaxAmt";
                        fieldNameScrFixedAmount = "Rpt" + (i - 1).ToString() + "ScrFixedAmount";
                        fieldNameScrTaxableAmt = "Rpt" + (i - 1).ToString() + "ScrTaxableAmt";
                        fieldNameScrReportableAmt = "Rpt" + (i - 1).ToString() + "ScrReportableAmt";

                        ttAPInvTax[fieldNameScrTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrTaxAmt");
                        ttAPInvTax[fieldNameScrFixedAmount] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrFixedAmount");
                        ttAPInvTax[fieldNameScrTaxableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrTaxableAmt");
                        ttAPInvTax[fieldNameScrReportableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrReportableAmt");
                    }
                }
            }
        }

        private void CalcTaxDocPrice()
        {
            DateTime? taxdate = null;
            decimal tmpTax = decimal.Zero;
            decimal doctmpTax = decimal.Zero;
            decimal rpt1tmpTax = decimal.Zero;
            decimal rpt2tmptax = decimal.Zero;
            decimal rpt3tmptax = decimal.Zero;

            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            if (XbSyst != null && XbSyst.UseTaxRate)
            {
                taxdate = ((APInvHed.TaxRateDate != null) ? APInvHed.TaxRateDate : ((APInvHed.TaxPoint != null) ? APInvHed.TaxPoint : ((vUseDate == 1) ? APInvHed.InvoiceDate : APInvHed.ApplyDate)));
                this.LibGetCurrencyRatesEF.BuildCurrencyRates(taxdate, "ApInvHed-Tax", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.TaxRateGrpCode, APInvHed.LockTaxRate, out tmpTaxChainRows, out taxCurrList, out taxRateList);
            }

            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);


            string fieldNameScrDedTaxAmt = string.Empty;
            string fieldNameScrTaxAmt = string.Empty;
            string fieldNameScrFixedAmount = string.Empty;
            string fieldNameScrTaxableAmt = string.Empty;
            string fieldNameScrReportableAmt = string.Empty;


            /* use tax rate */
            if (XbSyst != null && XbSyst.UseTaxRate && ((from tmpTaxChain_Row in tmpTaxChainRows
                                                         select tmpTaxChain_Row).Any()))
            {
                ttAPInvTax.ScrDocTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, false, "ttAPInvTax", "ScrTaxAmt");
                ttAPInvTax.ScrDocFixedAmount = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrFixedAmount, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, false, "ttAPInvTax", "ScrFixedAmount");
                ttAPInvTax.ScrDocTaxableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, false, "ttAPInvTax", "ScrTaxableAmt");
                ttAPInvTax.ScrDocReportableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrReportableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, false, "ttAPInvTax", "ScrReportableAmt");
                doctmpTax = ttAPInvTax.ScrDocTaxAmt;


                ttAPInvTax.ScrDocDedTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDedTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, false, "ttAPInvTax", "ScrDedTaxAmt");


                for (i = 2; i <= 4; i++)
                {
                    if (taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                    {
                        fieldNameScrDedTaxAmt = "Rpt" + (i - 1).ToString() + "ScrDedTaxAmt";
                        ttAPInvTax[fieldNameScrDedTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrDedTaxAmt");
                    }
                }

                for (i = 2; i <= 4; i++)
                {
                    if (taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                    {
                        fieldNameScrTaxAmt = "Rpt" + (i - 1).ToString() + "ScrTaxAmt";
                        fieldNameScrFixedAmount = "Rpt" + (i - 1).ToString() + "ScrFixedAmount";
                        fieldNameScrTaxableAmt = "Rpt" + (i - 1).ToString() + "ScrTaxableAmt";
                        fieldNameScrReportableAmt = "Rpt" + (i - 1).ToString() + "ScrReportableAmt";

                        ttAPInvTax[fieldNameScrTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrTaxAmt");
                        ttAPInvTax[fieldNameScrFixedAmount] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrFixedAmount");
                        ttAPInvTax[fieldNameScrTaxableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrTaxableAmt");
                        ttAPInvTax[fieldNameScrReportableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrReportableAmt");
                    }
                }

                LibRptfieldscalc.ConvertAmtVarRoundDec(pCurrList, APInvHed.CurrencyCode, ttChainRows, "APInvTax", "TaxAmt", doctmpTax, out rpt1tmpTax, out rpt2tmptax, out rpt3tmptax);
                ttAPInvTax.ScrTaxAmtVar = tmpTax - ttAPInvTax.ScrTaxAmt;
                ttAPInvTax.Rpt1ScrTaxAmtVar = rpt1tmpTax - ttAPInvTax.Rpt1ScrTaxAmt;
                ttAPInvTax.Rpt2ScrTaxAmtVar = rpt2tmptax - ttAPInvTax.Rpt2ScrTaxAmt;
                ttAPInvTax.Rpt3ScrTaxAmtVar = rpt3tmptax - ttAPInvTax.Rpt3ScrTaxAmt;
            }
            else
            {
                ttAPInvTax.ScrDocTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvTax", "ScrDocTaxAmt");
                ttAPInvTax.ScrDocFixedAmount = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrFixedAmount, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvTax", "ScrDocFixedAmount");
                ttAPInvTax.ScrDocTaxableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvTax", "ScrDocTaxableAmt");
                ttAPInvTax.ScrDocReportableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvTax", "ScrDocReportableAmt");

                ttAPInvTax.ScrDocDedTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvTax", "ScrDocDedTaxAmt");

                for (i = 2; i <= 4; i++)
                {
                    if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                    {
                        fieldNameScrDedTaxAmt = "Rpt" + (i - 1).ToString() + "ScrDedTaxAmt";
                        ttAPInvTax[fieldNameScrDedTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrDedTaxAmt");


                    }
                }


                for (i = 2; i <= 4; i++)
                {
                    if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                    {
                        fieldNameScrTaxAmt = "Rpt" + (i - 1).ToString() + "ScrTaxAmt";
                        fieldNameScrFixedAmount = "Rpt" + (i - 1).ToString() + "ScrFixedAmount";
                        fieldNameScrTaxableAmt = "Rpt" + (i - 1).ToString() + "ScrTaxableAmt";
                        fieldNameScrReportableAmt = "Rpt" + (i - 1).ToString() + "ScrReportableAmt";

                        ttAPInvTax[fieldNameScrTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrTaxAmt");
                        ttAPInvTax[fieldNameScrFixedAmount] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrFixedAmount");
                        ttAPInvTax[fieldNameScrTaxableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrTaxableAmt");
                        ttAPInvTax[fieldNameScrReportableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrReportableAmt");
                    }
                }
            }
        }

        private void CalcUnitCost()
        {
            if (APInvHed == null)
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            }
            if (ttAPInvDtl.ScrVendorQty != 0)
            {
                ttAPInvDtl.DocUnitCost = LibRoundAmountEF.RoundDecimalsApply((ttAPInvDtl.ScrDocExtCost / (ttAPInvDtl.ScrVendorQty / costFactor(ttAPInvDtl.CostPerCode))), APInvHed.CurrencyCode, "APInvDtl", "DocUnitCost");
                var outUnitCost3 = ttAPInvDtl.UnitCost;
                var outRpt1UnitCost3 = ttAPInvDtl.Rpt1UnitCost;
                var outRpt2UnitCost3 = ttAPInvDtl.Rpt2UnitCost;
                var outRpt3UnitCost3 = ttAPInvDtl.Rpt3UnitCost;
                CalcBaseAmt(ttAPInvDtl.DocUnitCost, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "UnitCost", out outUnitCost3, out outRpt1UnitCost3, out outRpt2UnitCost3, out outRpt3UnitCost3);
                ttAPInvDtl.UnitCost = outUnitCost3;
                ttAPInvDtl.Rpt1UnitCost = outRpt1UnitCost3;
                ttAPInvDtl.Rpt2UnitCost = outRpt2UnitCost3;
                ttAPInvDtl.Rpt3UnitCost = outRpt3UnitCost3;
            }
            else
            {
                ttAPInvDtl.UnitCost = 0;
                ttAPInvDtl.DocUnitCost = 0;
                ttAPInvDtl.Rpt1UnitCost = 0;
                ttAPInvDtl.Rpt2UnitCost = 0;
                ttAPInvDtl.Rpt3UnitCost = 0;
            }

            // SCR 176994: When ExtAmount is set to a negative amount, the UnitCost value was calculated 
            // and saved as negative on DataBase, but shown as empty in Lines/Detail form.
            // This code validates the negative values and replace them as 0.
            ttAPInvDtl.UnitCost = ttAPInvDtl.UnitCost < 0 ? 0 : ttAPInvDtl.UnitCost;
            ttAPInvDtl.DocUnitCost = ttAPInvDtl.DocUnitCost < 0 ? 0 : ttAPInvDtl.DocUnitCost;
            ttAPInvDtl.Rpt1UnitCost = ttAPInvDtl.Rpt1UnitCost < 0 ? 0 : ttAPInvDtl.Rpt1UnitCost;
            ttAPInvDtl.Rpt2UnitCost = ttAPInvDtl.Rpt2UnitCost < 0 ? 0 : ttAPInvDtl.Rpt2UnitCost;
            ttAPInvDtl.Rpt3UnitCost = ttAPInvDtl.Rpt3UnitCost < 0 ? 0 : ttAPInvDtl.Rpt3UnitCost;

            ttAPInvDtl.ScrUnitCost = ttAPInvDtl.UnitCost;
            ttAPInvDtl.DocScrUnitCost = ttAPInvDtl.DocUnitCost;
            ttAPInvDtl.Rpt1ScrUnitCost = ttAPInvDtl.Rpt1UnitCost;
            ttAPInvDtl.Rpt2ScrUnitCost = ttAPInvDtl.Rpt2UnitCost;
            ttAPInvDtl.Rpt3ScrUnitCost = ttAPInvDtl.Rpt3UnitCost;

            if (ttAPInvDtl.InPrice == true)
            {
                ttAPInvDtl.InUnitCost = ttAPInvDtl.UnitCost;
                ttAPInvDtl.DocInUnitCost = ttAPInvDtl.DocUnitCost;
                ttAPInvDtl.Rpt1InUnitCost = ttAPInvDtl.Rpt1UnitCost;
                ttAPInvDtl.Rpt2InUnitCost = ttAPInvDtl.Rpt2UnitCost;
                ttAPInvDtl.Rpt3InUnitCost = ttAPInvDtl.Rpt3UnitCost;
            }

        }

        private void CalcVariance()
        {
            APSystPartialRow abufAPSyst;

            ttAPInvHed.ScrInvoiceAmt = ttAPInvHed.ScrInvoiceAmt - ttAPInvHed.ScrRounding;
            ttAPInvHed.ScrDocInvoiceAmt = ttAPInvHed.ScrDocInvoiceAmt - ttAPInvHed.ScrDocRounding;

            ttAPInvHed.DocInvoiceVariance = (ttAPInvHed.ScrDocInvoiceAmt - ttAPInvHed.ScrDocInvoiceVendorAmt);
            ttAPInvHed.InvoiceVariance = (ttAPInvHed.ScrInvoiceAmt - ttAPInvHed.ScrInvoiceVendorAmt);

            if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {

                ttAPInvHed.Rpt1ScrInvoiceAmt = ttAPInvHed.Rpt1ScrInvoiceAmt - ttAPInvHed.Rpt1ScrRounding;
                ttAPInvHed.Rpt2ScrInvoiceAmt = ttAPInvHed.Rpt2ScrInvoiceAmt - ttAPInvHed.Rpt2ScrRounding;
                ttAPInvHed.Rpt3ScrInvoiceAmt = ttAPInvHed.Rpt3ScrInvoiceAmt - ttAPInvHed.Rpt3ScrRounding;
                ttAPInvHed.Rpt1InvoiceVariance = (ttAPInvHed.Rpt1ScrInvoiceAmt - ttAPInvHed.Rpt1ScrInvoiceVendorAmt);
                ttAPInvHed.Rpt2InvoiceVariance = (ttAPInvHed.Rpt2ScrInvoiceAmt - ttAPInvHed.Rpt2ScrInvoiceVendorAmt);
                ttAPInvHed.Rpt3InvoiceVariance = (ttAPInvHed.Rpt3ScrInvoiceAmt - ttAPInvHed.Rpt3ScrInvoiceVendorAmt);

            }

            abufAPSyst = FindPartialAPSyst(ttAPInvHed.Company);

            Currency = FindFirstCurrencyWithCode(ttAPInvHed.Company, ttAPInvHed.CurrencyCode);
            if (abufAPSyst != null && abufAPSyst.RoundInvoice &&
            Currency != null && Math.Abs(ttAPInvHed.DocInvoiceVariance) < Currency.RoundMltpTotalAmt)
            {
                ttAPInvHed.ScrRounding = -ttAPInvHed.InvoiceVariance;
                ttAPInvHed.ScrDocRounding = -ttAPInvHed.DocInvoiceVariance;
                ttAPInvHed.ScrInvoiceAmt = ttAPInvHed.ScrInvoiceVendorAmt;
                ttAPInvHed.ScrDocInvoiceAmt = ttAPInvHed.ScrDocInvoiceVendorAmt;
                ttAPInvHed.InvoiceVariance = 0;
                ttAPInvHed.DocInvoiceVariance = 0;
                if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {

                    ttAPInvHed.Rpt1ScrRounding = -ttAPInvHed.Rpt1InvoiceVariance;
                    ttAPInvHed.Rpt2ScrRounding = -ttAPInvHed.Rpt2InvoiceVariance;
                    ttAPInvHed.Rpt3ScrRounding = -ttAPInvHed.Rpt3InvoiceVariance;
                    ttAPInvHed.Rpt1ScrInvoiceAmt = ttAPInvHed.Rpt1ScrInvoiceVendorAmt;
                    ttAPInvHed.Rpt2ScrInvoiceAmt = ttAPInvHed.Rpt2ScrInvoiceVendorAmt;
                    ttAPInvHed.Rpt3ScrInvoiceAmt = ttAPInvHed.Rpt3ScrInvoiceVendorAmt;

                    ttAPInvHed.Rpt1InvoiceVariance = 0;
                    ttAPInvHed.Rpt2InvoiceVariance = 0;
                    ttAPInvHed.Rpt3InvoiceVariance = 0;
                }
            }
            else
            {
                ttAPInvHed.ScrRounding = 0;
                ttAPInvHed.ScrDocRounding = 0;
                ttAPInvHed.Rpt1ScrRounding = 0;
                ttAPInvHed.Rpt2ScrRounding = 0;
                ttAPInvHed.Rpt3ScrRounding = 0;
            }
        }

        /// <summary>
        /// Calculate IFRS Present Value 
        /// </summary>
        /// <param name="vendorNum">VendorNum</param>
        /// <param name="invoiceNum">invoice number</param>
        private void CalculateCOIFRS_PV(int vendorNum, string invoiceNum)
        {
            double x = Convert.ToDouble(1 + ttAPInvHed.COIFRSInterestRate / 100);
            double y = ttAPInvHed.COIFRSNumberOfPeriods;
            ttAPInvHed.COIFRSPresentValue = ttAPInvHed.ScrInvLineTotal.SafeDivision(System.Convert.ToDecimal(Math.Pow(x, y)));
            ttAPInvHed.COIFRSFinancialCharge = ttAPInvHed.ScrInvLineTotal - ttAPInvHed.COIFRSPresentValue;

            string cRFieldList = string.Empty;
            if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                ttAPInvHed.DocCOIFRSPresentValue = ttAPInvHed.COIFRSPresentValue;
                ttAPInvHed.DocCOIFRSFinancialCharge = ttAPInvHed.COIFRSFinancialCharge;
                return;
            }
            if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                Erp.Tables.APInvHed altAPInvHed = null;
                altAPInvHed = this.FindFirstAPInvHed(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum);
                if (altAPInvHed == null)
                {
                    throw new BLException(Strings.InvoiceNotFound, "APInvHed", "InvoiceNum");
                }
                if (String.IsNullOrEmpty(pCurrList))
                {
                    LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(altAPInvHed.VendorNum), Compatibility.Convert.ToString(altAPInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                }
                ttAPInvHed.DocCOIFRSPresentValue = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.COIFRSPresentValue, altAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "DocCOIFRSPresentValue");
                ttAPInvHed.DocCOIFRSFinancialCharge = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.COIFRSFinancialCharge, altAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "DocCOIFRSFinancialCharge");
                cRFieldList = "COIFRSPresentValue";
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHed, true, cRFieldList, pCurrList, "APInvHed", altAPInvHed.CurrencyCode, ttChainRows);
                cRFieldList = "COIFRSFinancialCharge";
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHed, true, cRFieldList, pCurrList, "APInvHed", altAPInvHed.CurrencyCode, ttChainRows);
            }
        }

        /// <summary>        
        /// Calculate IFRS Present Value                
        /// </summary>
        /// <param name="vendorNum">VendorNum</param>
        /// <param name="invoiceNum">invoice number</param>
        /// <param name="ds">A/R invoice data set.</param>       
        public void CalculateCOIFRS_PV(int vendorNum, string invoiceNum, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where ttAPInvHed_Row.Company.KeyEquals(Session.CompanyID) && ttAPInvHed_Row.VendorNum == vendorNum && ttAPInvHed_Row.InvoiceNum.KeyEquals(invoiceNum) && !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvHedRecordNotFound, "ttAPInvHed", "RowMod");
            }
            CalculateCOIFRS_PV(vendorNum, invoiceNum);
            ds = CurrentFullTableset;
        }

        /// <summary>        
        /// Calculate IFRS Present Value                
        /// </summary>
        /// <param name="vendorNum">VendorNum</param>
        /// <param name="invoiceNum">invoice number</param>
        /// <param name="ds">A/R invoice data set.</param>       
        public void Update_ttAPInvHed(int vendorNum, string invoiceNum, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            ttAPInvHed = (
                from ttAPInvHed_Row in ds.APInvHed
                where ttAPInvHed_Row.Company.KeyEquals(Session.CompanyID) && ttAPInvHed_Row.VendorNum == vendorNum && StringExtensions.Compare(ttAPInvHed_Row.InvoiceNum, invoiceNum) == 0 && !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvHedRecordNotFound, "ttAPInvHed", "RowMod");
            }
            APInvHedAfterGetRows();
            CalculateCOIFRS_PV(ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum);

            ds = CurrentFullTableset;
        }

        #region APInvSched processing methods
        private PayTermsScheduleShared.InvoiceInformation GetInvoiceInformation(int VendorNum, string InvoiceNum)
        {
            PayTermsScheduleShared.InvoiceInformation InvoiceInformationRow = new PayTermsScheduleShared.InvoiceInformation();
            var APInvHedRow = FindFirstAPInvHedForPaySched(Session.CompanyID, VendorNum, InvoiceNum);
            if (APInvHedRow != null)
            {
                InvoiceInformationRow.CurrencyCode = APInvHedRow.CurrencyCode;
                InvoiceInformationRow.DocInvoiceAmt = Math.Abs(APInvHedRow.DocInvoiceAmt);
                InvoiceInformationRow.InvoiceAmt = Math.Abs(APInvHedRow.InvoiceAmt);
                InvoiceInformationRow.Rpt1InvoiceAmt = Math.Abs(APInvHedRow.Rpt1InvoiceAmt);
                InvoiceInformationRow.Rpt2InvoiceAmt = Math.Abs(APInvHedRow.Rpt2InvoiceAmt);
                InvoiceInformationRow.Rpt3InvoiceAmt = Math.Abs(APInvHedRow.Rpt3InvoiceAmt);
                InvoiceInformationRow.InvoiceDate = APInvHedRow.InvoiceDate;
                InvoiceInformationRow.DebitOrCreditMemo = APInvHedRow.DebitMemo;
            }
            return InvoiceInformationRow;
        }

        private List<PayTermsScheduleShared.PayTermsSchedule> GetPayTermsScheduleRows(APInvoiceTableset ts)
        {
            List<PayTermsScheduleShared.PayTermsSchedule> PayTermsScheduleRows = new List<PayTermsScheduleShared.PayTermsSchedule>();

            foreach (APInvSchedRow APInvScheduleRow in ts.APInvSched.Where(os => os.RowMod == IceRow.ROWSTATE_UPDATED))
            {
                PayTermsScheduleShared.PayTermsSchedule PayTermsScheduleRow = new PayTermsScheduleShared.PayTermsSchedule();
                PayTermsScheduleRow.DocPayAmount = APInvScheduleRow.DocScrPayAmount;
                PayTermsScheduleRow.PayAmount = APInvScheduleRow.ScrPayAmount;
                PayTermsScheduleRow.Rpt1PayAmount = APInvScheduleRow.Rpt1ScrPayAmount;
                PayTermsScheduleRow.Rpt2PayAmount = APInvScheduleRow.Rpt2ScrPayAmount;
                PayTermsScheduleRow.Rpt3PayAmount = APInvScheduleRow.Rpt3ScrPayAmount;
                PayTermsScheduleRow.PayDays = APInvScheduleRow.PayDays;
                PayTermsScheduleRow.PayPercent = APInvScheduleRow.PayPercent;
                PayTermsScheduleRow.PaySeq = APInvScheduleRow.PaySeq;
                PayTermsScheduleRow.PayDueDate = APInvScheduleRow.PayDueDate;
                PayTermsScheduleRow.PayDays = APInvScheduleRow.PayDays;
                PayTermsScheduleRow.CurrencySwitch = APInvScheduleRow.CurrencySwitch;
                PayTermsScheduleRows.Add(PayTermsScheduleRow);
            }

            return PayTermsScheduleRows;
        }

        private void updateDataTableAPInvSched(List<PayTermsScheduleShared.PayTermsSchedule> PayTermsScheduleRows, ref APInvoiceTableset ts)
        {
            foreach (PayTermsScheduleShared.PayTermsSchedule PayTermsScheduleRow in PayTermsScheduleRows)
            {
                APInvSchedRow APInvSchedRowToUpdate = ts.APInvSched.Where(o => o.RowMod == IceRow.ROWSTATE_UPDATED && o.PaySeq == PayTermsScheduleRow.PaySeq).First();
                if (APInvSchedRowToUpdate != null)
                {
                    APInvSchedRowToUpdate.PayPercent = PayTermsScheduleRow.PayPercent;
                    APInvSchedRowToUpdate.PayDueDate = PayTermsScheduleRow.PayDueDate;
                    APInvSchedRowToUpdate.PayDays = PayTermsScheduleRow.PayDays;
                    APInvSchedRowToUpdate.DocScrPayAmount = PayTermsScheduleRow.DocPayAmount;
                    APInvSchedRowToUpdate.ScrPayAmount = PayTermsScheduleRow.PayAmount;
                    APInvSchedRowToUpdate.Rpt1ScrPayAmount = PayTermsScheduleRow.Rpt1PayAmount;
                    APInvSchedRowToUpdate.Rpt2ScrPayAmount = PayTermsScheduleRow.Rpt2PayAmount;
                    APInvSchedRowToUpdate.Rpt3ScrPayAmount = PayTermsScheduleRow.Rpt3PayAmount;
                }
            }
        }

        /// <summary>
        /// Method to update Amount values in the APInvSched record and update last APInvSched record when it's needed.
        /// </summary>
        /// <param name="PaySeqEdited">Payment Sequence updated</param>
        /// <param name="ts"></param>
        public void ChangeAPInvSchedPercent(int PaySeqEdited, ref APInvoiceTableset ts)
        {
            if (ts.APInvSched.Count > 0)
            {
                ttAPInvSched = ts.APInvSched.Where(o => o.RowMod == IceRow.ROWSTATE_UPDATED).First();

                PayTermsScheduleShared.InvoiceInformation InvoiceInformationRow = GetInvoiceInformation(ttAPInvSched.VendorNum, ttAPInvSched.InvoiceNum);
                List<PayTermsScheduleShared.PayTermsSchedule> PayTermsScheduleRows = GetPayTermsScheduleRows(ts);

                using (Internal.Lib.PayTermsScheduleShared LibPayTermsScheduleShared = new PayTermsScheduleShared(Db))
                {
                    LibPayTermsScheduleShared.InvoiceSchedulePercentChanged(ref PayTermsScheduleRows, InvoiceInformationRow, PaySeqEdited, "APInvSched");
                    ExceptionManager.AssertNoBLExceptions();
                    updateDataTableAPInvSched(PayTermsScheduleRows, ref ts);
                }
            }
        }

        /// <summary>
        /// Method to update Precent value in the APInvSched record and update last APInvSched record when it's needed.
        /// </summary>
        /// <param name="PaySeqEdited">Payment Sequence updated</param>
        /// <param name="ts"></param>
        public void ChangeAPInvSchedAmount(int PaySeqEdited, ref APInvoiceTableset ts)
        {
            if (ts.APInvSched.Count > 0)
            {
                ttAPInvSched = ts.APInvSched.Where(o => o.RowMod == IceRow.ROWSTATE_UPDATED).First();

                PayTermsScheduleShared.InvoiceInformation InvoiceInformationRow = GetInvoiceInformation(ttAPInvSched.VendorNum, ttAPInvSched.InvoiceNum);
                List<PayTermsScheduleShared.PayTermsSchedule> PayTermsScheduleRows = GetPayTermsScheduleRows(ts);

                using (Internal.Lib.PayTermsScheduleShared LibPayTermsScheduleShared = new PayTermsScheduleShared(Db))
                {
                    LibPayTermsScheduleShared.InvoiceSchedulePayAmountChanged(ref PayTermsScheduleRows, InvoiceInformationRow, PaySeqEdited, "APInvSched");
                    ExceptionManager.AssertNoBLExceptions();
                    updateDataTableAPInvSched(PayTermsScheduleRows, ref ts);
                }
            }
        }

        /// <summary>
        /// Method to update DueDate value in the APInvSched record and update following APInvSched records when it's needed.
        /// </summary>
        /// <param name="PaySeqEdited">Payment Sequence updated</param>
        /// <param name="ts"></param>
        public void ChangeAPInvSchedDays(int PaySeqEdited, ref APInvoiceTableset ts)
        {
            if (ts.APInvSched.Count > 0)
            {
                ttAPInvSched = ts.APInvSched.Where(o => o.RowMod == IceRow.ROWSTATE_UPDATED).First();

                PayTermsScheduleShared.InvoiceInformation InvoiceInformationRow = GetInvoiceInformation(ttAPInvSched.VendorNum, ttAPInvSched.InvoiceNum);
                List<PayTermsScheduleShared.PayTermsSchedule> PayTermsScheduleRows = GetPayTermsScheduleRows(ts);

                using (Internal.Lib.PayTermsScheduleShared LibPayTermsScheduleShared = new PayTermsScheduleShared(Db))
                {
                    LibPayTermsScheduleShared.InvoiceScheduleDaysChanged(ref PayTermsScheduleRows, InvoiceInformationRow, PaySeqEdited);
                    ExceptionManager.AssertNoBLExceptions();
                    updateDataTableAPInvSched(PayTermsScheduleRows, ref ts);
                }
            }
        }

        /// <summary>
        /// Method to update PayDays value in the APInvSched record and update following APInvSched records when it's needed.
        /// </summary>
        /// <param name="PaySeqEdited">Payment Sequence updated</param>
        /// <param name="ts"></param>
        public void ChangeAPInvSchedDueDate(int PaySeqEdited, ref APInvoiceTableset ts)
        {
            if (ts.APInvSched.Count > 0)
            {
                ttAPInvSched = ts.APInvSched.Where(o => o.RowMod == IceRow.ROWSTATE_UPDATED).First();

                PayTermsScheduleShared.InvoiceInformation InvoiceInformationRow = GetInvoiceInformation(ttAPInvSched.VendorNum, ttAPInvSched.InvoiceNum);
                List<PayTermsScheduleShared.PayTermsSchedule> PayTermsScheduleRows = GetPayTermsScheduleRows(ts);

                using (Internal.Lib.PayTermsScheduleShared LibPayTermsScheduleShared = new PayTermsScheduleShared(Db))
                {
                    LibPayTermsScheduleShared.InvoiceScheduleDueDateChanged(ref PayTermsScheduleRows, InvoiceInformationRow, PaySeqEdited);
                    ExceptionManager.AssertNoBLExceptions();
                    updateDataTableAPInvSched(PayTermsScheduleRows, ref ts);
                }
            }
        }
        #endregion APInvSched change methods

        /// <summary>
        /// Method to call when changing the adjustment value on the invoice detail.
        /// It is used only for correction invoice in adjustment line. 
        /// </summary>
        /// <param name="proposedValue">The proposed adjustment value</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeAdjustmentValue(decimal proposedValue, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            Erp.Tables.APInvDtl bufAPInvDtl = null;
            Erp.Tables.APInvHed bufAPInvHed = null;

            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvDtl");
            }
            bufAPInvHed = FindFirstAPInvHed(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);

            bufAPInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, bufAPInvHed.InvoiceRef, ttAPInvDtl.InvoiceLineRef);
            proposedValue = proposedValue + ((ttAPInvDtl.CurrencySwitch) ? bufAPInvDtl.ExtCost : bufAPInvDtl.DocExtCost);
            ChangeExtCost(proposedValue, ref ds);
        }

        /// <summary>
        /// Method to call when changing the advance pay amount on the invoice detail.  Updates APInvDtl
        /// with default values based on the new pay amount. 
        /// </summary>
        /// <param name="ProposedAdvancePayAmt">The proposed advance payment amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeAdvancePayAmt(decimal ProposedAdvancePayAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            int pStep = 0;
            decimal calcAdvancePayBal = decimal.Zero;
            decimal calcInAdvancePayBal = decimal.Zero;
            decimal pExRate = decimal.Zero;
            decimal sumAdvPay = decimal.Zero;
            decimal sumInAdvPay = decimal.Zero;
            bool exceedPOBal = false;

            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvDtl");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (ttAPInvDtl.CurrencySwitch)
            {
                ttAPInvDtl.AdvancePayAmt = ProposedAdvancePayAmt;
                var outAdvancePayAmt = ttAPInvDtl.AdvancePayAmt;
                var outDocAdvancePayAmt = ttAPInvDtl.DocAdvancePayAmt;
                var outRpt1AdvancePayAmt = ttAPInvDtl.Rpt1AdvancePayAmt;
                var outRpt2AdvancePayAmt = ttAPInvDtl.Rpt2AdvancePayAmt;
                var outRpt3AdvancePayAmt = ttAPInvDtl.Rpt3AdvancePayAmt;
                CalcDocAmt(ref outAdvancePayAmt, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "DocAdvancePayAmt", "AdvancePayAmt", out outDocAdvancePayAmt, out outRpt1AdvancePayAmt, out outRpt2AdvancePayAmt, out outRpt3AdvancePayAmt);
                ttAPInvDtl.AdvancePayAmt = outAdvancePayAmt;
                ttAPInvDtl.DocAdvancePayAmt = outDocAdvancePayAmt;
                ttAPInvDtl.Rpt1AdvancePayAmt = outRpt1AdvancePayAmt;
                ttAPInvDtl.Rpt2AdvancePayAmt = outRpt2AdvancePayAmt;
                ttAPInvDtl.Rpt3AdvancePayAmt = outRpt3AdvancePayAmt;
            }
            else
            {
                ttAPInvDtl.DocAdvancePayAmt = ProposedAdvancePayAmt;
                var outAdvancePayAmt2 = ttAPInvDtl.AdvancePayAmt;
                var outRpt1AdvancePayAmt2 = ttAPInvDtl.Rpt1AdvancePayAmt;
                var outRpt2AdvancePayAmt2 = ttAPInvDtl.Rpt2AdvancePayAmt;
                var outRpt3AdvancePayAmt2 = ttAPInvDtl.Rpt3AdvancePayAmt;
                CalcBaseAmt(ttAPInvDtl.DocAdvancePayAmt, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "AdvancePayAmt", out outAdvancePayAmt2, out outRpt1AdvancePayAmt2, out outRpt2AdvancePayAmt2, out outRpt3AdvancePayAmt2);
                ttAPInvDtl.AdvancePayAmt = outAdvancePayAmt2;
                ttAPInvDtl.Rpt1AdvancePayAmt = outRpt1AdvancePayAmt2;
                ttAPInvDtl.Rpt2AdvancePayAmt = outRpt2AdvancePayAmt2;
                ttAPInvDtl.Rpt3AdvancePayAmt = outRpt3AdvancePayAmt2;
            }

            if (APInvHed != null && APInvHed.InPrice)
            {
                ttAPInvDtl.DocInAdvancePayAmt = ttAPInvDtl.DocAdvancePayAmt;
                ttAPInvDtl.InAdvancePayAmt = ttAPInvDtl.AdvancePayAmt;
                ttAPInvDtl.Rpt1InAdvancePayAmt = ttAPInvDtl.Rpt1AdvancePayAmt;
                ttAPInvDtl.Rpt2InAdvancePayAmt = ttAPInvDtl.Rpt2AdvancePayAmt;
                ttAPInvDtl.Rpt3InAdvancePayAmt = ttAPInvDtl.Rpt3AdvancePayAmt;
            }

            ttAPInvDtl.AdvGainLoss = 0;
            ttAPInvDtl.Rpt1AdvGainLoss = 0;
            ttAPInvDtl.Rpt2AdvGainLoss = 0;
            ttAPInvDtl.Rpt3AdvGainLoss = 0;

            /* SCR 31576 - validate the advance payment not to exceed the PO advance balance */
            PODetail = FindFirstPODetail(ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine);
            if (PODetail == null)
            {
                throw new BLException(Strings.RelatedPOLineIsNotAvailable, "APInvDtl");
            }
            if (POHeader == null)
            {
                POHeader = FindFirstPOHeader(ttAPInvDtl.Company, ttAPInvDtl.PONum);
            }
            if (StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) == 0)
            {
                calcAdvancePayBal = PODetail.DocAdvancePayBal;
                calcInAdvancePayBal = PODetail.DocInAdvancePayBal;
            }
            else
            {
                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, POHeader.CurrencyCode, APInvHed.CurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", APInvHed.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                calcAdvancePayBal = this.LibConvertAmtEF.ConvertAmt(PODetail.DocAdvancePayBal, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                calcAdvancePayBal = LibRoundAmountEF.RoundDecimalsApply(calcAdvancePayBal, APInvHed.CurrencyCode, "PODetail", "DocAdvancePayBal");
                calcInAdvancePayBal = this.LibConvertAmtEF.ConvertAmt(PODetail.DocInAdvancePayBal, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                calcInAdvancePayBal = LibRoundAmountEF.RoundDecimalsApply(calcInAdvancePayBal, APInvHed.CurrencyCode, "PODetail", "DocAdvancePayBal");
            }

            sumAdvPay = ttAPInvDtl.DocAdvancePayAmt;
            sumInAdvPay = ttAPInvDtl.DocInAdvancePayAmt;

            exceedPOBal = false;
            exceedPOBal = !APInvHed.InPrice ? sumAdvPay > calcAdvancePayBal : sumInAdvPay > calcInAdvancePayBal;
            if (!exceedPOBal)
            {
                // check other lines
                var APInvDtlQuery32 = DBExpressionCompiler.Compile(APInvDtlExpression32);
                foreach (var APInvDtl_iterator in (APInvDtlQuery32(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine)))
                {
                    APInvDtl = APInvDtl_iterator;
                    if (!APInvHed.InPrice)
                    {
                        sumAdvPay = sumAdvPay + APInvDtl.DocAdvancePayAmt;
                        if (sumAdvPay > calcAdvancePayBal)
                        {
                            exceedPOBal = true;
                            break;
                        }
                    }
                    else
                    {
                        sumInAdvPay = sumInAdvPay + APInvDtl.DocInAdvancePayAmt;
                        if (sumInAdvPay > calcInAdvancePayBal)
                        {
                            exceedPOBal = true;
                            break;
                        }

                    }
                }
            }

            if (exceedPOBal)
            {
                throw new BLException(Strings.AdvancePaymentCannotExceedAdvancePaymentBalance, "APInvDtl");
            }

            getLineTotals();
        }

        /// <summary>
        /// Method to call when changing the assembly sequence on the job miscellaneous charge.  
        /// Validates the assembly sequence and updates APInvJob with values from the new assembly sequence. 
        /// </summary>
        /// <param name="ProposedAssemblySeq">The proposed assembly sequence</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeAssemblySeq(int ProposedAssemblySeq, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPInvJob = (from ttAPInvJob_Row in ds.APInvJob
                          where StringExtensions.Lookup(modList, ttAPInvJob_Row.RowMod) != -1
                          select ttAPInvJob_Row).FirstOrDefault();
            if (ttAPInvJob == null)
            {
                throw new BLException(Strings.APJobMisceChargeCriteNotAvail, "APInvJob");
            }

            var JobAsmblQuery2 = DBExpressionCompiler.Compile(JobAsmblExpression2);
            if (!((JobAsmblQuery2(Db, ttAPInvJob.Company, ttAPInvJob.JobNum, ProposedAssemblySeq))))
            {
                throw new BLException(Strings.AssemblyIsNotOnFile, "APInvJob", "AssemblySeq");
            }
            ttAPInvJob.AssemblySeq = ProposedAssemblySeq;
            ttAPInvJob.MtlSeq = 0;
            AssignAPInvJobJobMtlFields();
        }

        /// <summary>
        /// Method to call when changing the cost per code on the invoice detail.  Updates APInvDtl
        /// with default values based on the new code. 
        /// </summary>
        /// <param name="ProposedCostPerCode">The proposed cost per code</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeCostPerCode(string ProposedCostPerCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvDtl");
            }
            ttAPInvDtl.CostPerCode = ProposedCostPerCode;
            CalcExtCost();
            getLineTotals();
        }

        /// <summary>
        /// Method to call when changing the currency on the invoice.  Validates the currency code and
        /// updates APInvHed with default values based on the currency. 
        /// </summary>
        /// <param name="ProposedCurrencyCode">The proposed currency code</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeCurrency(string ProposedCurrencyCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }
            ChgCurrencyCore(ProposedCurrencyCode);
        }

        /// <summary>
        /// Method to call when changing the currency on the invoice.  Validates the currency code and
        /// updates APInvHed with default values based on the currency. 
        /// </summary>
        /// <param name="ProposedCurrencyCode">The proposed currency code</param>
        /// <param name="vRateGrpCode">Currency Rate Group selected for the APInvoice </param>
        /// <param name="vExchangeRate">Current exchange rate between the APInvoice currency and the Ref Currency</param>
        /// <param name="vXRateLabel">Label for the Exchange Rate field</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeCurrencyMaster(string ProposedCurrencyCode, string vRateGrpCode, out decimal vExchangeRate, out string vXRateLabel, ref APInvoiceTableset ds)
        {
            vExchangeRate = decimal.Zero;
            vXRateLabel = string.Empty;
            CurrentFullTableset = ds;

            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }
            ChgCurrencyCore(ProposedCurrencyCode);
            ttAPInvHed.CurrencyCode = ProposedCurrencyCode;
            getValueExchRateCore(ProposedCurrencyCode, vRateGrpCode, out vExchangeRate, out vXRateLabel);
        }

        /// <summary>
        /// This method recalculates base/document and report currencies amount of Header
        /// GL Expence distribution amount changed by the user
        /// </summary>
        /// <param name="ProposedAmt">The proposed amount</param>
        /// <param name="ds">The AP Invoice data set</param>
        public void ChangeExpHeaderAmt(decimal ProposedAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPIHAPInvExp = (from ttAPIHAPInvExp_Row in ds.APIHAPInvExp
                              where StringExtensions.Compare(ttAPIHAPInvExp_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                              select ttAPIHAPInvExp_Row).FirstOrDefault();
            if (ttAPIHAPInvExp == null)
            {
                throw new BLException(Strings.APIHAPInvExpHasNotChanged, "APIHAPInvExp");
            }/* if not available ttAPInvExp */


            /* if ttAPIHAPInvExp.CurrencySwitch = true */
            if (ttAPIHAPInvExp.CurrencySwitch == true)
            {
                ttAPIHAPInvExp.ScrExpAmt = ProposedAmt;
                var outScrExpAmt = ttAPIHAPInvExp.ScrExpAmt;
                var outDocScrExpAmt = ttAPIHAPInvExp.DocScrExpAmt;
                var outRpt1ScrExpAmt = ttAPIHAPInvExp.Rpt1ScrExpAmt;
                var outRpt2ScrExpAmt = ttAPIHAPInvExp.Rpt2ScrExpAmt;
                var outRpt3ScrExpAmt = ttAPIHAPInvExp.Rpt3ScrExpAmt;
                CalcDocAmt(ref outScrExpAmt, ttAPIHAPInvExp.VendorNum, ttAPIHAPInvExp.InvoiceNum, ttAPIHAPInvExp, "DocScrExpAmt", "ScrExpAmt", out outDocScrExpAmt, out outRpt1ScrExpAmt, out outRpt2ScrExpAmt, out outRpt3ScrExpAmt);
                ttAPIHAPInvExp.ScrExpAmt = outScrExpAmt;
                ttAPIHAPInvExp.DocScrExpAmt = outDocScrExpAmt;
                ttAPIHAPInvExp.Rpt1ScrExpAmt = outRpt1ScrExpAmt;
                ttAPIHAPInvExp.Rpt2ScrExpAmt = outRpt2ScrExpAmt;
                ttAPIHAPInvExp.Rpt3ScrExpAmt = outRpt3ScrExpAmt;
            }
            else
            {
                ttAPIHAPInvExp.DocScrExpAmt = ProposedAmt;
                var outScrExpAmt2 = ttAPIHAPInvExp.ScrExpAmt;
                var outRpt1ScrExpAmt2 = ttAPIHAPInvExp.Rpt1ScrExpAmt;
                var outRpt2ScrExpAmt2 = ttAPIHAPInvExp.Rpt2ScrExpAmt;
                var outRpt3ScrExpAmt2 = ttAPIHAPInvExp.Rpt3ScrExpAmt;
                CalcBaseAmt(ttAPIHAPInvExp.DocScrExpAmt, ttAPIHAPInvExp.VendorNum, ttAPIHAPInvExp.InvoiceNum, ttAPIHAPInvExp, "ScrExpAmt", out outScrExpAmt2, out outRpt1ScrExpAmt2, out outRpt2ScrExpAmt2, out outRpt3ScrExpAmt2);
                ttAPIHAPInvExp.ScrExpAmt = outScrExpAmt2;
                ttAPIHAPInvExp.Rpt1ScrExpAmt = outRpt1ScrExpAmt2;
                ttAPIHAPInvExp.Rpt2ScrExpAmt = outRpt2ScrExpAmt2;
                ttAPIHAPInvExp.Rpt3ScrExpAmt = outRpt3ScrExpAmt2;
            }
        }

        /// <summary>
        /// This method recalculates base/document and report currencies amount of Line
        /// GL Expence distribution amount changed by the user
        /// </summary>
        /// <param name="ProposedAmt">The proposed amount</param>
        /// <param name="ds">The AP Invoice data set</param>
        public void ChangeExpLineAmt(decimal ProposedAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPInvExp = (from ttAPInvExp_Row in ds.APInvExp
                          where StringExtensions.Compare(ttAPInvExp_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                          select ttAPInvExp_Row).FirstOrDefault();
            if (ttAPInvExp == null)
            {
                throw new BLException(Strings.APInvExpHasNotChanged, "APInvExp");
            }/* if not available ttAPInvExp */

            /* if ttAPInvExp.CurrencySwitch = true */
            if (ttAPInvExp.CurrencySwitch == true)
            {
                ttAPInvExp.ScrExpAmt = ProposedAmt;
                var outScrExpAmt3 = ttAPInvExp.ScrExpAmt;
                var outDocScrExpAmt2 = ttAPInvExp.DocScrExpAmt;
                var outRpt1ScrExpAmt3 = ttAPInvExp.Rpt1ScrExpAmt;
                var outRpt2ScrExpAmt3 = ttAPInvExp.Rpt2ScrExpAmt;
                var outRpt3ScrExpAmt3 = ttAPInvExp.Rpt3ScrExpAmt;
                CalcDocAmt(ref outScrExpAmt3, ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, ttAPInvExp, "DocScrExpAmt", "ScrExpAmt", out outDocScrExpAmt2, out outRpt1ScrExpAmt3, out outRpt2ScrExpAmt3, out outRpt3ScrExpAmt3);
                ttAPInvExp.ScrExpAmt = outScrExpAmt3;
                ttAPInvExp.DocScrExpAmt = outDocScrExpAmt2;
                ttAPInvExp.Rpt1ScrExpAmt = outRpt1ScrExpAmt3;
                ttAPInvExp.Rpt2ScrExpAmt = outRpt2ScrExpAmt3;
                ttAPInvExp.Rpt3ScrExpAmt = outRpt3ScrExpAmt3;
            }
            else
            {
                ttAPInvExp.DocScrExpAmt = ProposedAmt;
                var outScrExpAmt4 = ttAPInvExp.ScrExpAmt;
                var outRpt1ScrExpAmt4 = ttAPInvExp.Rpt1ScrExpAmt;
                var outRpt2ScrExpAmt4 = ttAPInvExp.Rpt2ScrExpAmt;
                var outRpt3ScrExpAmt4 = ttAPInvExp.Rpt3ScrExpAmt;
                CalcBaseAmt(ttAPInvExp.DocScrExpAmt, ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, ttAPInvExp, "ScrExpAmt", out outScrExpAmt4, out outRpt1ScrExpAmt4, out outRpt2ScrExpAmt4, out outRpt3ScrExpAmt4);
                ttAPInvExp.ScrExpAmt = outScrExpAmt4;
                ttAPInvExp.Rpt1ScrExpAmt = outRpt1ScrExpAmt4;
                ttAPInvExp.Rpt2ScrExpAmt = outRpt2ScrExpAmt4;
                ttAPInvExp.Rpt3ScrExpAmt = outRpt3ScrExpAmt4;
            }
        }

        /// <summary>
        /// Returns a serialized json string to show a Relationship Map for AP Invoice
        /// </summary>
        /// <param name="vendorNum"></param>
        /// <param name="invoiceNum"></param>
        /// <param name="maxNumOfCards"></param>
        /// <returns></returns>
        public string GetAPInvoiceRelationshipMap(int vendorNum, string invoiceNum, int maxNumOfCards)
        {
            using (RelationshipMap relMap = new RelationshipMap(Db))
            {
                return relMap.GetAPInvoiceRelationshipMap(vendorNum, invoiceNum, maxNumOfCards);
            }
        }

        /// <summary>
        /// This method gets the GL Account Description from the GLAcctDisp Table
        /// </summary>
        /// <param name="Company"></param>
        /// <param name="COACode"></param>
        /// <param name="GLAcctDisp"></param>
        /// <returns></returns>
        public string GetGLAccountDesc(string Company, string COACode, string GLAcctDisp)
        {
            string GLAccountDesc = string.Empty;
            var GLAcctDispRow = FindFirstGLAcctDesc(Company, COACode, GLAcctDisp);

            if (GLAcctDispRow != null)
                GLAccountDesc = GLAcctDispRow.AccountDesc;
            return GLAccountDesc;
        }


        /// <summary>
        /// This method gets the Global GL Account Description from the GLBGLAcctDisp Table
        /// </summary>
        /// <param name="ipCompany"></param>
        /// <param name="ipExtCompany"></param>
        /// <param name="ipCOACode"></param>
        /// <param name="ipGLAccount"></param>
        /// <returns></returns>
        public string GetGBLGLAccountDesc(string ipCompany, string ipExtCompany, string ipCOACode, string ipGLAccount)
        {
            string GLBGLAccountDesc = string.Empty;
            string SeparatorChar = GetSeparatorChar(ipCompany, ipCOACode);

            if (SeparatorChar != null && SeparatorChar.Length == 1)
            {
                var GLBGLAcctDispQuery = this.FindFirstGLBGLAcctDisp(ipCompany, ipExtCompany, ipCOACode, ipGLAccount.Replace(Convert.ToChar(SeparatorChar), '|'));
                if (GLBGLAcctDispQuery != null)
                    GLBGLAccountDesc = GLBGLAcctDispQuery.AccountDesc;
            }

            return GLBGLAccountDesc;
        }

        /// <summary>
        /// This method resets the regular Expense and Multi-Company G/L Accounts and the 
        /// Reference Codes when the External Company ID changes.  This should only be called
        /// when updating APInvExp and not the APIHAPInvExp.
        /// </summary>
        /// <param name="ProposedExtCompID">The proposed External Company ID</param>
        /// <param name="ds">The AP Invoice data set</param>
        public void ChangeExtCompanyID(string ProposedExtCompID, ref APInvoiceTableset ds)
        {
            int tmpTGLCTranNum = 1;
            CurrentFullTableset = ds;

            #region Validate if not available ttAPInvExp

            ds.APInvExp.Remove(ds.APInvExp.Where(r => r.RowMod == IceRow.ROWSTATE_UNCHANGED).FirstOrDefault());

            ttAPInvExp = (from ttAPInvExp_Row in ds.APInvExp
                          where StringExtensions.Compare(ttAPInvExp_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                          select ttAPInvExp_Row).FirstOrDefault();

            if (ttAPInvExp == null)
            {
                throw new BLException(Strings.APInvExpHasNotChanged, "APInvExp");
            }
            #endregion

            #region check if external company is valid

            if (StringExtensions.Compare(ProposedExtCompID, ttAPInvExp.Company) == 0)
            {
                ProposedExtCompID = "";
            }

            ExtCompany = FindFirstExtCompany(ttAPInvExp.Company, "MULTI", ProposedExtCompID);
            if (ExtCompany == null)
            {
                throw new BLException(Strings.AValidExterCompanyIDIsRequi, "APInvExp");
            }

            if (!String.IsNullOrEmpty(ProposedExtCompID))
            {
                if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiSiteGLJournals) == false)
                {
                    throw new BLException(Strings.MultiCompanyGeneralJournalLicenseIsRequi, "GlJrnDtl", "ExtCompanyID");
                }
                /* check if allowed to send multi-company AP allocation */
                if (ExtCompany.AllowAPAlloc == false)
                {
                    throw new BLException(Strings.TheExterCompanyIDIsNotAllowedToSendMultiCompany, "APInvExp");
                }

                var GlbGLSystQuery = DBExpressionCompiler.Compile(GlbGLSystExpression);
                GlbGLSyst = GlbGLSystQuery(Db, ttAPInvExp.Company, ProposedExtCompID);
                if (GlbGLSyst == null)
                {
                    throw new BLException(Strings.TheExterCompanyNeedsToInitiSendMultiCompanyGLAccou, "APInvExp");
                }
                else
                {
                    ttAPInvExp.ExtCOACode = GlbGLSyst.MasterCOA;
                }
            }
            #endregion

            glbExtCompanyID = ProposedExtCompID;

            bool clearExtGLAccount = false;
            if (string.IsNullOrEmpty(ProposedExtCompID))
            {
                CurrentFullTableset.GlbAPIETGLC.Clear();
                RefreshttAPInvExpTGLC(true);
                clearExtGLAccount = true;
            }
            else
            {
                string key1 = Compatibility.Convert.ToString(ttAPInvExp.VendorNum);
                string key2 = Compatibility.Convert.ToString(ttAPInvExp.InvoiceNum);
                string key3 = Compatibility.Convert.ToString(ttAPInvExp.InvoiceLine);
                string key4 = Compatibility.Convert.ToString(ttAPInvExp.InvExpSeq);
                string prevExtCompanyID = ttAPInvExp.ExtCompanyID;

                APInvExpTGLCRunPE(false);

                #region check saved GlbAPIETGLC
                ttGlbAPIETGLC = null;
                var savedTranGLC = FindFirstTranGLC(ttAPInvExp.Company, "APInvExp", key1, key2, key3, key4, ttAPInvExp.GroupID, "External Expense", "", "AP Invoice Expense");
                if (savedTranGLC != null)
                {
                    ttGlbAPIETGLC = (from ttGlbAPIETGLC_Row in CurrentFullTableset.GlbAPIETGLC
                                     where ttGlbAPIETGLC_Row.Company.KeyEquals(Session.CompanyID)
                                     && StringExtensions.Compare(ttGlbAPIETGLC_Row.RelatedToFile, "APInvExp") == 0
                                     && ttGlbAPIETGLC_Row.Key1.KeyEquals(key1)
                                     && ttGlbAPIETGLC_Row.Key2.KeyEquals(key2)
                                     && ttGlbAPIETGLC_Row.Key3.KeyEquals(key3)
                                     && ttGlbAPIETGLC_Row.Key4.KeyEquals(key4)
                                     && ttGlbAPIETGLC_Row.RowMod == IceRow.ROWSTATE_UNCHANGED
                                     select ttGlbAPIETGLC_Row).FirstOrDefault();

                    if (ttGlbAPIETGLC == null)
                    {
                        ttGlbAPIETGLC = new Erp.Tablesets.GlbAPIETGLCRow();
                        CurrentFullTableset.GlbAPIETGLC.Add(ttGlbAPIETGLC);
                        ttGlbAPIETGLC.RowMod = Ice.IceRow.ROWSTATE_UNCHANGED;
                        BufferCopy.Copy(savedTranGLC, ref ttGlbAPIETGLC);
                        GlbAPIETGLC_Foreign_Link();
                        GlbAPIETGLCAfterGetRows();
                    }
                }
                #endregion

                var saved_ttGlbAPIETGLC = ttGlbAPIETGLC;

                ttGlbAPIETGLC = (from ttGlbAPIETGLC_Row in CurrentFullTableset.GlbAPIETGLC
                                 where ttGlbAPIETGLC_Row.Company.KeyEquals(Session.CompanyID)
                                 && StringExtensions.Compare(ttGlbAPIETGLC_Row.RelatedToFile, "APInvExp") == 0
                                 && ttGlbAPIETGLC_Row.Key1.KeyEquals(key1)
                                 && ttGlbAPIETGLC_Row.Key2.KeyEquals(key2)
                                 && ttGlbAPIETGLC_Row.Key3.KeyEquals(key3)
                                 && ttGlbAPIETGLC_Row.Key4.KeyEquals(key4)
                                 && ttGlbAPIETGLC_Row.RowMod != IceRow.ROWSTATE_UNCHANGED
                                 select ttGlbAPIETGLC_Row).FirstOrDefault();

                if (ttGlbAPIETGLC == null && saved_ttGlbAPIETGLC == null)
                {
                    tmpTGLCTranNum = getNextTGLCTranNumForGlb();
                    ttGlbAPIETGLC = new Erp.Tablesets.GlbAPIETGLCRow();
                    CurrentFullTableset.GlbAPIETGLC.Add(ttGlbAPIETGLC);
                    ttGlbAPIETGLC.RowMod = IceRow.ROWSTATE_ADDED;
                    AssignNewttGlbAPIETGLC(ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum, ttAPInvExp.InvoiceLine, ttAPInvExp.InvExpSeq, ttAPInvExp.GroupID, ttAPInvExp.ExtCompanyID, "External Expense", tmpTGLCTranNum);
                    ttGlbAPIETGLC.CreateDate = CompanyTime.Today();
                    if (this.CurrentFullTableset.APInvExpTGLC.Count != 0)
                    {
                        ttGlbAPIETGLC.TranDate = this.CurrentFullTableset.APInvExpTGLC[0].TranDate;
                        if (!ttGlbAPIETGLC.TranDate.HasValue)
                            ttGlbAPIETGLC.TranDate = ttGlbAPIETGLC.CreateDate;
                    }
                    else
                        ttGlbAPIETGLC.TranDate = ttGlbAPIETGLC.CreateDate;
                    clearExtGLAccount = true;
                }
                else if (string.IsNullOrEmpty(prevExtCompanyID) || (ttGlbAPIETGLC != null && !ttGlbAPIETGLC.ExtCompanyID.KeyEquals(ProposedExtCompID)))
                {
                    if (ttGlbAPIETGLC == null)
                    {
                        ttGlbAPIETGLC = new Erp.Tablesets.GlbAPIETGLCRow();
                        CurrentFullTableset.GlbAPIETGLC.Add(ttGlbAPIETGLC);
                        BufferCopy.Copy(saved_ttGlbAPIETGLC, ttGlbAPIETGLC);
                    }
                    clearExtGLAccount = true;
                    ttGlbAPIETGLC.ExtCompanyID = ProposedExtCompID;
                    var GLBCOAQuery = DBExpressionCompiler.Compile(GLBCOAExpression);
                    GLBCOA = GLBCOAQuery(Db, Session.CompanyID, ProposedExtCompID);
                    if (GLBCOA != null)
                        ttGlbAPIETGLC.COACode = GLBCOA.COACode;

                    ttGlbAPIETGLC.GLAccount = "";
                    for (int i = 1; i <= 20; i++)
                    {
                        ttGlbAPIETGLC["SegValue" + i] = "";
                    }
                    ttGlbAPIETGLC.RowMod = IceRow.ROWSTATE_UPDATED;
                    GlbAPIETGLC_Foreign_Link();
                }
            }

            if (clearExtGLAccount)
            {

                ttAPInvExp.ExpGlbDispGLAcct = "";
                ttAPInvExp.ExtGLAccount = "";
                ttAPInvExp.ExtGLAccountDesc = "";
            }
        }

        /// <summary>
        /// Method to call when changing the ext cost on the invoice detail.  Validates the 
        /// ext cost and updates APInvDtl with default values based on the new cost. 
        /// </summary>
        /// <param name="ProposedExtCost">The proposed ext cost</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeExtCost(decimal ProposedExtCost, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            Erp.Tables.APInvHed bufAPInvHed = null;
            decimal calcAdvancePayBal = decimal.Zero;
            int pStep = 0;
            decimal pExRate = decimal.Zero;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvDtl");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (StringExtensions.Compare(ttAPInvDtl.LineType, "A") == 0 && ttAPInvDtl.DebitMemo == true)
            {

                PODetail = FindFirstPODetail(ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine);
                if (PODetail != null)
                {
                    if (POHeader == null)
                    {

                        POHeader = FindFirstPOHeader(ttAPInvDtl.Company, ttAPInvDtl.PONum);
                    }
                    if (StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) == 0)
                    {
                        calcAdvancePayBal = PODetail.DocAdvancePayBal;
                    }
                    else
                    {
                        if (tmpChainRows != null)
                        {
                            tmpChainRows.Clear();
                        }

                        if (vUseDate == 1)
                        {
                            vExDate = APInvHed.InvoiceDate;
                        }
                        else
                        {
                            vExDate = APInvHed.ApplyDate;
                        }

                        /* Convert input amount ProposedExtCost to the PO currency */
                        this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, APInvHed.CurrencyCode, POHeader.CurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", POHeader.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                        calcAdvancePayBal = this.LibConvertAmtEF.ConvertAmt(ProposedExtCost, APInvHed.CurrencyCode, POHeader.CurrencyCode, tmpChainRows, true);
                        calcAdvancePayBal = LibRoundAmountEF.RoundDecimalsApply(calcAdvancePayBal, POHeader.CurrencyCode, "PODetail", "DocAdvancePayBal");
                    }

                    if ((ttAPInvDtl.CurrencySwitch == true &&
                        ProposedExtCost > PODetail.AdvancePayBal) ||
                        (ttAPInvDtl.CurrencySwitch == false &&
                        calcAdvancePayBal > PODetail.DocAdvancePayBal))
                    {
                        throw new BLException(Strings.InvoiceLineAmountCannotExceedPOLineAdvancePayment, "APInvDtl", "ExtCost");
                    }

                }
            }/* if ttAPInvDtl.LineType = "A":U and ... */

            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

            if (ttAPInvDtl.CurrencySwitch)
            {
                ttAPInvDtl.ScrExtCost = ProposedExtCost;
                var outScrExtCost2 = ttAPInvDtl.ScrExtCost;
                var outScrDocExtCost = ttAPInvDtl.ScrDocExtCost;
                var outRpt1ScrExtCost2 = ttAPInvDtl.Rpt1ScrExtCost;
                var outRpt2ScrExtCost2 = ttAPInvDtl.Rpt2ScrExtCost;
                var outRpt3ScrExtCost2 = ttAPInvDtl.Rpt3ScrExtCost;
                CalcDocAmt(ref outScrExtCost2, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "ScrDocExtCost", "ScrExtCost", out outScrDocExtCost, out outRpt1ScrExtCost2, out outRpt2ScrExtCost2, out outRpt3ScrExtCost2);
                ttAPInvDtl.ScrExtCost = outScrExtCost2;
                ttAPInvDtl.ScrDocExtCost = outScrDocExtCost;
                ttAPInvDtl.Rpt1ScrExtCost = outRpt1ScrExtCost2;
                ttAPInvDtl.Rpt2ScrExtCost = outRpt2ScrExtCost2;
                ttAPInvDtl.Rpt3ScrExtCost = outRpt3ScrExtCost2;
            }
            else
            {
                ttAPInvDtl.ScrDocExtCost = ProposedExtCost;
                var outScrExtCost3 = ttAPInvDtl.ScrExtCost;
                var outRpt1ScrExtCost3 = ttAPInvDtl.Rpt1ScrExtCost;
                var outRpt2ScrExtCost3 = ttAPInvDtl.Rpt2ScrExtCost;
                var outRpt3ScrExtCost3 = ttAPInvDtl.Rpt3ScrExtCost;
                CalcBaseAmt(ttAPInvDtl.ScrDocExtCost, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "ScrExtCost", out outScrExtCost3, out outRpt1ScrExtCost3, out outRpt2ScrExtCost3, out outRpt3ScrExtCost3);
                ttAPInvDtl.ScrExtCost = outScrExtCost3;
                ttAPInvDtl.Rpt1ScrExtCost = outRpt1ScrExtCost3;
                ttAPInvDtl.Rpt2ScrExtCost = outRpt2ScrExtCost3;
                ttAPInvDtl.Rpt3ScrExtCost = outRpt3ScrExtCost3;
            }

            if (ttAPInvDtl.InPrice)
            {
                if (ttAPInvDtl.DebitMemo == false)
                {
                    ttAPInvDtl.InExtCost = ttAPInvDtl.ScrExtCost;
                    ttAPInvDtl.DocInExtCost = ttAPInvDtl.ScrDocExtCost;
                    ttAPInvDtl.Rpt1InExtCost = ttAPInvDtl.Rpt1ScrExtCost;
                    ttAPInvDtl.Rpt2InExtCost = ttAPInvDtl.Rpt2ScrExtCost;
                    ttAPInvDtl.Rpt3InExtCost = ttAPInvDtl.Rpt3ScrExtCost;
                }
                else
                {
                    ttAPInvDtl.InExtCost = -ttAPInvDtl.ScrExtCost;
                    ttAPInvDtl.DocInExtCost = -ttAPInvDtl.ScrDocExtCost;
                    ttAPInvDtl.Rpt1InExtCost = -ttAPInvDtl.Rpt1ScrExtCost;
                    ttAPInvDtl.Rpt2InExtCost = -ttAPInvDtl.Rpt2ScrExtCost;
                    ttAPInvDtl.Rpt3InExtCost = -ttAPInvDtl.Rpt3ScrExtCost;
                }
            }

            if (StringExtensions.Compare(ttAPInvDtl.LineType, "A") != 0)
            {
                CalcUnitCost();
                getLineTotals();
            }


            bufAPInvHed = FindFirstAPInvHed(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (bufAPInvHed.CorrectionInv == true && ttAPInvDtl.CorrectionDtl == false)
            {
                ttAPInvDtl.AdjustmentValue = ttAPInvDtl.OrgExtCost;
                ttAPInvDtl.DocAdjustmentValue = ttAPInvDtl.DocOrgExtCost;
                ttAPInvDtl.Rpt1AdjustmentValue = ttAPInvDtl.Rpt1OrgExtCost;
                ttAPInvDtl.Rpt2AdjustmentValue = ttAPInvDtl.Rpt2OrgExtCost;
                ttAPInvDtl.Rpt3AdjustmentValue = ttAPInvDtl.Rpt3OrgExtCost;
            }
        }

        /// <summary>
        /// Method to call when changing the fixed amount on a tax record.  Updates APInvTax
        /// tax amounts based on the new fixed amount. 
        /// </summary>
        /// <param name="ProposedFixedAmt">The proposed fixed amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeFixedAmount(decimal ProposedFixedAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            DateTime? vInvDate = null;
            decimal prevFixedAmount = decimal.Zero;
            decimal prevDocFixedAmount = decimal.Zero;


            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceHeaderIsNotFound, "APInvHed");
            }
            if (APInvHed.TaxRateDate != null)
            {
                vInvDate = APInvHed.TaxRateDate;
            }
            else if (APInvHed.TaxPoint != null)
            {
                vInvDate = APInvHed.TaxPoint;
            }
            else if (APInvHed.InvoiceDate != null)
            {
                vInvDate = APInvHed.InvoiceDate;
            }

            TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, vInvDate.Value);
            if (TaxRate == null)
            {
                throw new BLException(Strings.TaxRateIsNotAvailable, "APInvTax");
            }
            if (ttAPInvTax.Manual)
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
                prevFixedAmount = ttAPInvTax.ScrFixedAmount;
                prevDocFixedAmount = ttAPInvTax.ScrDocFixedAmount;
                /* valida si es moneda base o no */
                if (ttAPInvTax.CurrencySwitch == true)
                {
                    ttAPInvTax.ScrFixedAmount = ProposedFixedAmt;
                    ttAPInvTax.ScrTaxAmt = ttAPInvTax.ScrTaxAmt - prevFixedAmount + ProposedFixedAmt;
                    ttAPInvTax.ScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvTax.ScrTaxAmt, TaxRate.DeductPercent, ttAPInvTax.TaxCode, "");
                    CalcTaxDocPrice();
                }
                else
                {
                    ttAPInvTax.ScrDocFixedAmount = ProposedFixedAmt;
                    ttAPInvTax.ScrDocTaxAmt = ttAPInvTax.ScrDocTaxAmt - prevDocFixedAmount + ProposedFixedAmt;
                    ttAPInvTax.ScrDocDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvTax.ScrDocTaxAmt, TaxRate.DeductPercent, ttAPInvTax.TaxCode, "");
                    CalcTaxBasePrice();
                }
            }
        }


        /// <summary>
        /// Method to call when changing the fixed amount on a header tax record.  Updates APInvHedMscTax
        /// tax amounts based on the new fixed amount. 
        /// </summary>
        /// <param name="ProposedFixedAmt">The proposed fixed of line tax amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeFixedHedMscAmount(decimal ProposedFixedAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            DateTime? vInvDate = null;
            decimal prevFixedAmount = decimal.Zero;
            decimal prevDocFixedAmount = decimal.Zero;


            ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in ds.APInvHedMscTax
                                where StringExtensions.Lookup(modList, ttAPInvHedMscTax_Row.RowMod) != -1
                                select ttAPInvHedMscTax_Row).FirstOrDefault();
            if (ttAPInvHedMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvHedMscTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceHeaderIsNotFound, "APInvHed");
            }
            if (APInvHed.TaxRateDate != null)
            {
                vInvDate = APInvHed.TaxRateDate;
            }
            else if (APInvHed.TaxPoint != null)
            {
                vInvDate = APInvHed.TaxPoint;
            }
            else if (APInvHed.InvoiceDate != null)
            {
                vInvDate = APInvHed.InvoiceDate;
            }

            TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, vInvDate.Value);
            if (TaxRate == null)
            {
                throw new BLException(Strings.TaxRateIsNotAvailable, "APInvHedMscTax");
            }
            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPInvHedMscTax.Manual)
            {
                prevFixedAmount = ttAPInvHedMscTax.ScrFixedAmount;
                prevDocFixedAmount = ttAPInvHedMscTax.DocScrFixedAmount;

                if (ttAPInvHedMscTax.CurrencySwitch == true)
                {
                    ttAPInvHedMscTax.ScrFixedAmount = ProposedFixedAmt;
                    ttAPInvHedMscTax.ScrTaxAmt = ttAPInvHedMscTax.ScrTaxAmt - prevFixedAmount + ProposedFixedAmt;
                    ttAPInvHedMscTax.DocScrTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHedMscTax.ScrTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHedMscTax", "DocScrTaxAmt");
                    ttAPInvHedMscTax.DocScrFixedAmount = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHedMscTax.ScrFixedAmount, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHedMscTax", "DocScrTaxAmt");
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, false, "ScrTaxAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, false, "ScrFixedAmount", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
                }
                else
                {
                    ttAPInvHedMscTax.DocScrFixedAmount = ProposedFixedAmt;
                    ttAPInvHedMscTax.DocScrTaxAmt = ttAPInvHedMscTax.DocScrTaxAmt - prevDocFixedAmount + ProposedFixedAmt;
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, "ScrTaxAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, "ScrFixedAmount", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
                }

                ttAPInvHedMscTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvHedMscTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPInvHedMscTax.TaxCode, "");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, "ScrDedTaxAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }

        /// <summary>
        /// Method to call when changing the fixed amount on a line tax record.  Updates APLnTax
        /// tax amounts based on the new fixed amount. 
        /// </summary>
        /// <param name="ProposedFixedAmt">The proposed fixed of line tax amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeFixedLineAmount(decimal ProposedFixedAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            DateTime? vInvDate = null;
            decimal prevFixedAmount = decimal.Zero;
            decimal prevDocFixedAmount = decimal.Zero;

            ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                         where StringExtensions.Lookup(modList, ttAPLnTax_Row.RowMod) != -1
                         select ttAPLnTax_Row).FirstOrDefault();
            if (ttAPLnTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APLnTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceHeaderIsNotFound, "APInvHed");
            }
            if (APInvHed.TaxRateDate != null)
            {
                vInvDate = APInvHed.TaxRateDate;
            }
            else if (APInvHed.TaxPoint != null)
            {
                vInvDate = APInvHed.TaxPoint;
            }
            else if (APInvHed.InvoiceDate != null)
            {
                vInvDate = APInvHed.InvoiceDate;
            }

            TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, vInvDate.Value);
            if (TaxRate == null)
            {
                throw new BLException(Strings.TaxRateIsNotAvailable, "APLnTax");
            }
            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPLnTax.Manual)
            {
                prevFixedAmount = ttAPLnTax.ScrFixedAmount;
                prevDocFixedAmount = ttAPLnTax.DocScrFixedAmount;

                if (ttAPLnTax.CurrencySwitch == true)
                {
                    ttAPLnTax.ScrFixedAmount = ProposedFixedAmt;
                    ttAPLnTax.ScrTaxAmt = ttAPLnTax.ScrTaxAmt - prevFixedAmount + ProposedFixedAmt;
                    ttAPLnTax.DocScrTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPLnTax.ScrTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPLnTax", "DocScrTaxAmt");
                    ttAPLnTax.DocScrFixedAmount = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPLnTax.ScrFixedAmount, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPLnTax", "DocScrTaxAmt");
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, false, "ScrTaxAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, false, "ScrFixedAmount", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
                }
                else
                {
                    ttAPLnTax.DocScrFixedAmount = ProposedFixedAmt;
                    ttAPLnTax.DocScrTaxAmt = ttAPLnTax.DocScrTaxAmt - prevDocFixedAmount + ProposedFixedAmt;
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, "ScrTaxAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, "ScrFixedAmount", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
                }

                ttAPLnTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPLnTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPLnTax.TaxCode, "");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, "ScrDedTaxAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }


        /// <summary>
        /// Method to call when changing the fixed amount on a line tax record.  Updates APInvLnMscTax
        /// tax amounts based on the new fixed amount. 
        /// </summary>
        /// <param name="ProposedFixedAmt">The proposed fixed of line tax amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeFixedLnMscAmount(decimal ProposedFixedAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            DateTime? vInvDate = null;
            decimal prevFixedAmount = decimal.Zero;
            decimal prevDocFixedAmount = decimal.Zero;


            ttAPInvLnMscTax = (from ttAPInvLnMscTax_Row in ds.APInvLnMscTax
                               where StringExtensions.Lookup(modList, ttAPInvLnMscTax_Row.RowMod) != -1
                               select ttAPInvLnMscTax_Row).FirstOrDefault();
            if (ttAPInvLnMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvLnMscTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceHeaderIsNotFound, "APInvHed");
            }
            if (APInvHed.TaxRateDate != null)
            {
                vInvDate = APInvHed.TaxRateDate;
            }
            else if (APInvHed.TaxPoint != null)
            {
                vInvDate = APInvHed.TaxPoint;
            }
            else if (APInvHed.InvoiceDate != null)
            {
                vInvDate = APInvHed.InvoiceDate;
            }

            TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, vInvDate.Value);
            if (TaxRate == null)
            {
                throw new BLException(Strings.TaxRateIsNotAvailable, "APInvLnMscTax");
            }
            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPInvLnMscTax.Manual)
            {
                prevFixedAmount = ttAPInvLnMscTax.ScrFixedAmount;
                prevDocFixedAmount = ttAPInvLnMscTax.DocScrFixedAmount;

                if (ttAPInvLnMscTax.CurrencySwitch == true)
                {
                    ttAPInvLnMscTax.ScrFixedAmount = ProposedFixedAmt;
                    ttAPInvLnMscTax.ScrTaxAmt = ttAPInvLnMscTax.ScrTaxAmt - prevFixedAmount + ProposedFixedAmt;
                    ttAPInvLnMscTax.DocScrTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvLnMscTax.ScrTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvLnMscTax", "DocScrTaxAmt");
                    ttAPInvLnMscTax.DocScrFixedAmount = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvLnMscTax.ScrFixedAmount, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvLnMscTax", "DocScrTaxAmt");
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, false, "ScrTaxAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, false, "ScrFixedAmount", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
                }
                else
                {
                    ttAPInvLnMscTax.DocScrFixedAmount = ProposedFixedAmt;
                    ttAPInvLnMscTax.DocScrTaxAmt = ttAPInvLnMscTax.DocScrTaxAmt - prevDocFixedAmount + ProposedFixedAmt;
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, "ScrTaxAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, "ScrFixedAmount", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
                }

                ttAPInvLnMscTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvLnMscTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPInvLnMscTax.TaxCode, "");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, "ScrDedTaxAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }

        ///
        /// <summary>
        /// Method to call when changing the Tax Basis Amount - Taiwan Localization on an invoice record.  Updates APInvHed
        /// amounts based on the new invoice vendor amount. 
        /// </summary>
        /// <param name="proposedGUITaxBasisAmt">The proposed tax amount</param>
        /// <param name="ds">The APInvoice data set</param>
        ///
        public void ChangeGUITaxBasisAmt(decimal proposedGUITaxBasisAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }
            if (vUseDate == 1)
            {
                vExDate = ttAPInvHed.InvoiceDate;
            }
            else
            {
                vExDate = ttAPInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

            if (ttAPInvHed.CurrencySwitch == true)
            {
                ttAPInvHed.GUIImportTaxBasis = proposedGUITaxBasisAmt;
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.DocGUIImportTaxBasis = ttAPInvHed.GUIImportTaxBasis;
                }
                else
                {
                    ttAPInvHed.DocGUIImportTaxBasis = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.GUIImportTaxBasis, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "DocGUIImportTaxBasis");
                }
            }
            else
            {
                ttAPInvHed.DocGUIImportTaxBasis = proposedGUITaxBasisAmt;
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.GUIImportTaxBasis = ttAPInvHed.DocGUIImportTaxBasis;
                }
                else
                {
                    ttAPInvHed.GUIImportTaxBasis = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocGUIImportTaxBasis, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "GUIImportTaxBasis");
                }
            }/* else do */

            LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHed, false, "GUIImportTaxBasis", pCurrList, "ttAPInvHed", ttAPInvHed.CurrencyCode, ttChainRows);
        }

        /// <summary>
        /// Method to call when changing the invoice date on the invoice.  Updates APInvHed
        /// with default values based on the new date. 
        /// </summary>
        /// <param name="ProposedInvoiceDate">The proposed invoice date</param>
        /// <param name="recalcAmts">Recalculate Amounts String.</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeInvoiceDate(DateTime? ProposedInvoiceDate, string recalcAmts, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            string cMessageText = string.Empty;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }

            /* LINKING DATES */


            apSystPartial = FindPartialAPSyst(Session.CompanyID);

            if (apSystPartial != null)
            {
                if (apSystPartial.DatesSetUp)
                {
                    if (StringExtensions.Compare(apSystPartial.APLinkApplyDate, "I") == 0 && ttAPInvHed.ApplyDate == ttAPInvHed.InvoiceDate)
                    {
                        if (StringExtensions.Compare(apSystPartial.APLinkTaxPDate, "A") == 0 && ttAPInvHed.TaxPoint == ttAPInvHed.ApplyDate)
                        {
                            if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "T") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.TaxPoint)
                            {
                                if (ProposedInvoiceDate == null)
                                    ttAPInvHed.TaxRateDate = null;
                                else
                                    ttAPInvHed.TaxRateDate = (DateTime)ProposedInvoiceDate;
                            }

                            if (ProposedInvoiceDate == null)
                                ttAPInvHed.TaxPoint = null;
                            else
                                ttAPInvHed.TaxPoint = (DateTime)ProposedInvoiceDate;
                        }
                        if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "T") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.ApplyDate)
                        {
                            if (ProposedInvoiceDate == null)
                                ttAPInvHed.TaxRateDate = null;
                            else
                                ttAPInvHed.TaxRateDate = (DateTime)ProposedInvoiceDate;
                        }

                        cMessageText = LibEADValidation.validateEAD(ProposedInvoiceDate, "AP", "Apply");

                        if (!String.IsNullOrEmpty(cMessageText))
                            throw new BLException(cMessageText);


                        var FiscalPerQuery2 = DBExpressionCompiler.Compile(FiscalPerExpression2);
                        FiscalPer = FiscalPerQuery2(Db, Session.CompanyID, CompanyFiscalCalendarID, ProposedInvoiceDate, ProposedInvoiceDate);
                        if (FiscalPer == null)
                        {
                            if (ProposedInvoiceDate == null)
                                ttAPInvHed.TransApplyDate = null;
                            else
                                ttAPInvHed.TransApplyDate = (DateTime)ProposedInvoiceDate;

                            ttAPInvHed.FiscalCalendarID = CompanyFiscalCalendarID;
                            ttAPInvHed.FiscalPeriod = 0;
                            ttAPInvHed.FiscalYear = 0;
                            ttAPInvHed.FiscalYearSuffix = "";
                        }
                        else
                        {
                            if (ProposedInvoiceDate == null)
                                ttAPInvHed.TransApplyDate = null;
                            else
                                ttAPInvHed.TransApplyDate = (DateTime)ProposedInvoiceDate;

                            ttAPInvHed.FiscalCalendarID = FiscalPer.FiscalCalendarID;
                            ttAPInvHed.FiscalPeriod = FiscalPer.FiscalPeriod;
                            ttAPInvHed.FiscalYear = FiscalPer.FiscalYear;
                            ttAPInvHed.FiscalYearSuffix = FiscalPer.FiscalYearSuffix;
                        }
                        getExchangeRate("Lock");
                        if (ProposedInvoiceDate == null)
                            ttAPInvHed.ApplyDate = null;
                        else
                            ttAPInvHed.ApplyDate = (DateTime)ProposedInvoiceDate;
                    }
                    if (StringExtensions.Compare(apSystPartial.APLinkTaxPDate, "I") == 0 && ttAPInvHed.TaxPoint == ttAPInvHed.InvoiceDate)
                    {
                        if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "T") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.TaxPoint)
                        {
                            if (ProposedInvoiceDate == null)
                                ttAPInvHed.TaxRateDate = null;
                            else
                                ttAPInvHed.TaxRateDate = (DateTime)ProposedInvoiceDate;
                        }

                        if (ProposedInvoiceDate == null)
                            ttAPInvHed.TaxPoint = null;
                        else
                            ttAPInvHed.TaxPoint = (DateTime)ProposedInvoiceDate;
                    }
                    if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "I") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.InvoiceDate)
                    {
                        if (ProposedInvoiceDate == null)
                            ttAPInvHed.TaxRateDate = null;
                        else
                            ttAPInvHed.TaxRateDate = (DateTime)ProposedInvoiceDate;
                    }
                }
            }

            if (isVNLocalization && !String.IsNullOrEmpty(ttAPInvHed.TermsCode) && ttAPInvHed.InvoiceDate == null)
            {
                //if manual purchase terms are used and InvoiceDate is initialized, set due date to null to force it's recalculation
                PurTerms ttPurTerms = FindFirstPurTerms(ttAPInvHed.Company, ttAPInvHed.TermsCode);
                if (ttPurTerms != null && ttPurTerms.TermsType.KeyEquals("L"))
                {
                    ttAPInvHed.DueDate = null;
                }
            }
            /* LINKING DATES */
            if (ProposedInvoiceDate == null)
                ttAPInvHed.InvoiceDate = null;
            else
                ttAPInvHed.InvoiceDate = (DateTime)ProposedInvoiceDate;

            if (isJapanLocalization)
            {
                calcSummarizationDate();
            }

            SetDatesDiscount(true);
            ttAPInvHed.RecalcAmts = recalcAmts;
            getExchangeRate("Lock");
        }

        /// <summary>
        /// Method to call when changing the invoice date on the invoice.  Updates APInvHed
        /// with default values based on the new date. 
        /// </summary>
        /// <param name="ProposedInvoiceDate">The proposed invoice date</param>
        /// <param name="recalcAmts">Recalculate Amounts String.</param>
        /// <param name="cMessageText">Warning messages</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeInvoiceDateEx(DateTime? ProposedInvoiceDate, string recalcAmts, out string cMessageText, ref APInvoiceTableset ds)
        {
            if (ProposedInvoiceDate == null)
            {
                throw new BLException(Strings.InvalidInvoiceDate, "APInvHed");
            }
            cMessageText = string.Empty;
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }

            /* LINKING DATES */


            apSystPartial = FindPartialAPSyst(Session.CompanyID);

            if (apSystPartial != null && apSystPartial.DatesSetUp)
            {
                // Invoie dates Set Up:
                // CheckBox02  - Enabled Apply
                // CheckBox03  - Enabled Tax Point
                // CheckBox05  - Enabled Tax Rate
                // ShortChar01 - Default Apply     (G)
                // ShortChar02 - Linking Apply     (I,N)
                // ShortChar03 - Default Tax Point (A)
                // ShortChar04 - Linking Tax Point (I,A,N)
                // ShortChar05 - Default Tax Rate  (A)
                // ShortChar06 - Default Tax Rate  (I,A,T,N)

                // Apply linked by Invoice
                if (StringExtensions.Compare(apSystPartial.APLinkApplyDate, "I") == 0 && (ttAPInvHed.ApplyDate == ttAPInvHed.InvoiceDate || ttAPInvHed.InvoiceDate == null))
                {
                    DateTime? updatedInvoiceDate;
                    updatedInvoiceDate = ProposedInvoiceDate;

                    LibEADValidation.ValidateEADEx("AP", "Apply", ref updatedInvoiceDate, out cMessageText);

                    if (StringExtensions.Compare(apSystPartial.APLinkTaxPDate, "A") == 0 && ttAPInvHed.TaxPoint == ttAPInvHed.ApplyDate)
                    {
                        if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "T") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.TaxPoint)
                        {
                            ttAPInvHed.TaxRateDate = (DateTime)updatedInvoiceDate;
                        }

                        ttAPInvHed.TaxPoint = (DateTime)updatedInvoiceDate;
                    }

                    if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "A") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.ApplyDate)
                    {
                        ttAPInvHed.TaxRateDate = (DateTime)updatedInvoiceDate;
                    }


                    var FiscalPerQuery2 = DBExpressionCompiler.Compile(FiscalPerExpression2);
                    FiscalPer = FiscalPerQuery2(Db, Session.CompanyID, CompanyFiscalCalendarID, updatedInvoiceDate, updatedInvoiceDate);
                    if (FiscalPer == null)
                    {
                        ttAPInvHed.TransApplyDate = (DateTime)updatedInvoiceDate;

                        ttAPInvHed.FiscalCalendarID = CompanyFiscalCalendarID;
                        ttAPInvHed.FiscalPeriod = 0;
                        ttAPInvHed.FiscalYear = 0;
                        ttAPInvHed.FiscalYearSuffix = "";
                    }
                    else
                    {
                        ttAPInvHed.TransApplyDate = (DateTime)updatedInvoiceDate;

                        ttAPInvHed.FiscalCalendarID = FiscalPer.FiscalCalendarID;
                        ttAPInvHed.FiscalPeriod = FiscalPer.FiscalPeriod;
                        ttAPInvHed.FiscalYear = FiscalPer.FiscalYear;
                        ttAPInvHed.FiscalYearSuffix = FiscalPer.FiscalYearSuffix;
                    }
                    getExchangeRate("Lock");
                    ttAPInvHed.ApplyDate = (DateTime)updatedInvoiceDate;
                }

                if (StringExtensions.Compare(apSystPartial.APLinkTaxPDate, "I") == 0 && (ttAPInvHed.TaxPoint == ttAPInvHed.InvoiceDate || ttAPInvHed.InvoiceDate == null))
                {
                    if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "T") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.TaxPoint)
                    {
                        ttAPInvHed.TaxRateDate = (DateTime)ProposedInvoiceDate;
                    }

                    ttAPInvHed.TaxPoint = (DateTime)ProposedInvoiceDate;
                }

                if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "I") == 0 && (ttAPInvHed.TaxRateDate == ttAPInvHed.InvoiceDate || ttAPInvHed.InvoiceDate == null))
                {
                    ttAPInvHed.TaxRateDate = (DateTime)ProposedInvoiceDate;
                }
            }

            if (isVNLocalization && !String.IsNullOrEmpty(ttAPInvHed.TermsCode) && ttAPInvHed.InvoiceDate == null)
            {
                //if manual purchase terms are used and InvoiceDate is initialized, set due date to null to force it's recalculation
                PurTerms ttPurTerms = FindFirstPurTerms(ttAPInvHed.Company, ttAPInvHed.TermsCode);
                if (ttPurTerms != null && ttPurTerms.TermsType.KeyEquals("L"))
                {
                    ttAPInvHed.DueDate = null;
                }
            }

            /* LINKING DATES */
            ttAPInvHed.InvoiceDate = (DateTime)ProposedInvoiceDate;

            if (isJapanLocalization)
            {
                calcSummarizationDate();
            }

            SetDatesDiscount(true);
            ttAPInvHed.RecalcAmts = recalcAmts;
            getExchangeRate("Lock");
        }

        /// <summary>
        /// Method to call when changing the invoice date on the invoice.  Updates APInvHed
        /// with default values based on the new date. 
        /// This method will additionally return a message to present to the user if the date is greater than
        /// the client today date.
        /// </summary>
        /// <param name="ProposedInvoiceDate">The proposed invoice date</param>        
        /// <param name="recalcAmts">Recalculate Amounts String.</param>
        /// <param name="cMessageText">Warning messages</param>
        /// <param name="DateMessage">The date message to present to the user.  Blank means a message does not need to be presented.</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeInvoiceDateWithDateCheck(DateTime? ProposedInvoiceDate, string recalcAmts, out string cMessageText, out string DateMessage, ref APInvoiceTableset ds)
        {
            cMessageText = string.Empty;
            DateMessage = string.Empty;
            ChangeInvoiceDateEx(ProposedInvoiceDate, recalcAmts, out cMessageText, ref ds);

            using (Erp.Internal.AP.CheckInvoiceAndApplyDate CheckInvoiceAndApplyDate = new Erp.Internal.AP.CheckInvoiceAndApplyDate(Db))
            {
                DateMessage = CheckInvoiceAndApplyDate.GetDateGreaterThanMessage(ProposedInvoiceDate, CompanyTime.Today(), "I");
            }
        }

        /// <summary>
        /// Method to call when changing the Due date on the invoice.  
        /// </summary>
        /// <param name="ProposedDueDate">The proposed invoice date</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeDueDate(DateTime? ProposedDueDate, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            string cMessageText = string.Empty;

            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }

            if (ProposedDueDate == null)
            {
                throw new BLException(Strings.DateCannotBeBlank("Due Date"), "APInvHed", "DueDate");
            }

            if (ProposedDueDate < ttAPInvHed.InvoiceDate)
            {
                throw new BLException(Strings.DateCannotBeEarlierInvDate("Due Date"), "APInvHed");
            }
        }

        /// <summary>
        /// Method to call when changing the Purchase Point on the invoice.  
        /// </summary>
        /// <param name="purPoint">New value of Purchase Point</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeInvoicePurPoint(string purPoint, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            if (!String.IsNullOrEmpty(purPoint))
            {
                ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                              where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                              select ttAPInvHed_Row).FirstOrDefault();
                if (ttAPInvHed == null)
                {
                    throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
                }
                setInvoicePurPoint(purPoint);
                APInvHed_Foreign_Link();
            }
        }

        /// <summary>
        /// Method to call when changing the invoice reference.  Validates the 
        /// invoice reference number id and updates APInvHed with values from the new invoice reference. 
        /// </summary>
        /// <param name="ProposedInvoiceRef">The proposed invoice reference number</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeInvoiceRef(string ProposedInvoiceRef, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            Erp.Tables.APInvHed bAPInvHed = null;

            using (TransactionScope changeInvoiceRefTransactionScope = ErpContext.CreateDefaultTransactionScope())
            {
                ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                              where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                              select ttAPInvHed_Row).FirstOrDefault();
                if (ttAPInvHed == null)
                {
                    throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
                }

                if (!String.IsNullOrEmpty(ProposedInvoiceRef))
                {/* ttAPInvHed.CPay = yes */
                    if (ttAPInvHed.CPay && ttAPInvHed.DebitMemo)
                    {


                        bAPInvHed = FindFirstBAPInvHedByRefInvoice(ttAPInvHed.Company, ttAPInvHed.VendorNum, ProposedInvoiceRef, true);
                        /* check if invoice reference is already posted, ignoring the OpenPayable flag */
                        if (bAPInvHed == null)
                        {
                            throw new BLException(Strings.TheInvoiceReferIsNotFlaggedForCentralPayment, "APInvHed", "InvoiceRef");
                        }
                        else if (bAPInvHed.DebitMemo == true || bAPInvHed.Posted == false)
                        {
                            throw new BLException(Strings.InvalidInvoiceReferForCentralPayment, "APInvHed", "InvoiceRef");
                        }
                        else if (bAPInvHed.CPayInvoiceBal == 0)
                        {
                            throw new BLException(Strings.TheInvoiceReferFlaggedForCentralPaymentIsAlready, "APInvHed", "InvoiceRef");
                        }
                    }
                    else
                    {
                        bAPInvHed = FindFirstAPInvHedDMByRef(ttAPInvHed.Company, ttAPInvHed.VendorNum, ProposedInvoiceRef, false, true);
                        if (bAPInvHed == null)
                        {
                            throw new BLException(Strings.InvalidInvoiceReference, "APInvHed", "InvoiceRef");
                        }
                    }
                }

                ttAPInvHed.InvoiceRef = ProposedInvoiceRef;
                ttAPInvHed.ScrInvoiceRef = ProposedInvoiceRef;

                if (isPeruLocalization)
                {
                    ttAPInvHed.PERefDocID = ProposedInvoiceRef;
                }

                /* Get Exchange Rate */
                if (String.IsNullOrEmpty(ProposedInvoiceRef))
                {
                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                    ttAPInvHed.ExchangeRate = Compatibility.Convert.ToDecimal(pRateList.Entry(0, Ice.Constants.LIST_DELIM));
                    return;
                }


                apSystPartial = FindPartialAPSyst(Session.CompanyID);
                if (apSystPartial != null)
                {
                    foreach (var CurrExChain_iterator in SelectCurrExChainWithUpdLock(Session.CompanyID, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum)))
                    {
                        CurrExChain = CurrExChain_iterator;
                        Db.CurrExChain.Delete(CurrExChain);
                    }
                    if (ttAPInvHed.DebitMemo && apSystPartial.CopyExcRateDM)
                    {
                        this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(bAPInvHed.VendorNum), Compatibility.Convert.ToString(bAPInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);


                        foreach (var libconvertamtefttChainRow in (from ttChain_Row in ttChainRows
                                                                   select ttChain_Row))
                        {
                            var ttChainRow = libconvertamtefttChainRow;
                            CurrExChain = new Erp.Tables.CurrExChain();
                            Db.CurrExChain.Insert(CurrExChain);
                            BufferCopy.CopyExceptFor(ttChainRow, CurrExChain, CurrExChain.ColumnNames.TableName, CurrExChain.ColumnNames.Key1, CurrExChain.ColumnNames.Key2, CurrExChain.ColumnNames.Key3, CurrExChain.ColumnNames.Key4, CurrExChain.ColumnNames.SysRowID, CurrExChain.ColumnNames.SysRevID);
                            CurrExChain.TableName = "APInvHed";
                            CurrExChain.Key1 = Compatibility.Convert.ToString(ttAPInvHed.VendorNum);
                            CurrExChain.Key2 = Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);
                            Db.Validate(CurrExChain);
                        }
                        ttAPInvHed.CurrencyCode = bAPInvHed.CurrencyCode;
                        ttAPInvHed.RateGrpCode = bAPInvHed.RateGrpCode;
                        ttAPInvHed.ExchangeRate = bAPInvHed.ExchangeRate;
                        APInvHed_Foreign_Link();
                        setExchangeRate();
                    }
                    else
                    {
                        if (vUseDate == 1)
                        {
                            vExDate = ttAPInvHed.InvoiceDate;
                        }
                        else
                        {
                            vExDate = ttAPInvHed.ApplyDate;
                        }

                        this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);


                        foreach (var libconvertamtefttChainRow in (from ttChain_Row in ttChainRows
                                                                   select ttChain_Row))
                        {
                            var ttChainRow = libconvertamtefttChainRow;
                            CurrExChain = new Erp.Tables.CurrExChain();
                            Db.CurrExChain.Insert(CurrExChain);
                            BufferCopy.CopyExceptFor(ttChainRow, CurrExChain, CurrExChain.ColumnNames.SysRowID, CurrExChain.ColumnNames.SysRevID);
                            CurrExChain.TableName = "APInvHed";
                            CurrExChain.Key1 = Compatibility.Convert.ToString(ttAPInvHed.VendorNum);
                            CurrExChain.Key2 = Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);
                            Db.Validate(CurrExChain);
                        }
                    }
                }
                else
                {
                    throw new BLException(Strings.ModuleConfiAPSystemControlIsMissing, "APInvHed");
                }

                changeInvoiceRefTransactionScope.Complete();
            }

            bAPInvHed = FindFirstAPInvHed(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceRef);

            if (isTaiwanLocalization)
            {
                if (bAPInvHed != null)
                {
                    ttAPInvHed.LegalNumber = bAPInvHed.LegalNumber;
                }
                else
                {
                    ttAPInvHed.LegalNumber = "";
                }
            }
        }

        /// <summary>
        /// Method to call when changing the invoice vendor amount on an invoice record.  Updates APInvHed
        /// amounts based on the new invoice vendor amount. 
        /// </summary>
        /// <param name="ProposedInvoiceVendorAmt">The proposed tax amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeInvoiceVendorAmt(decimal ProposedInvoiceVendorAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }

            if (!ttAPInvHed.CorrectionInv && ProposedInvoiceVendorAmt < 0)
            {
                throw new BLException(Strings.NegativeAmount, "APInvHed");
            }

            if (vUseDate == 1)
            {
                vExDate = ttAPInvHed.InvoiceDate;
            }
            else
            {
                vExDate = ttAPInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

            string fieldNameScrInvoiceVendorAmt = string.Empty;
            string rndStr = string.Empty;
            if (ttAPInvHed.CurrencySwitch == true)
            {
                ttAPInvHed.ScrInvoiceVendorAmt = ProposedInvoiceVendorAmt;
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.ScrDocInvoiceVendorAmt = ttAPInvHed.ScrInvoiceVendorAmt;
                }
                else
                {
                    ttAPInvHed.ScrDocInvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "ScrDocInvoiceVendorAmt");
                    rndStr = string.Empty;
                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            rndStr = "Rpt" + (i - 1).ToString() + "InvoiceVendorAmt";
                            fieldNameScrInvoiceVendorAmt = "Rpt" + (i - 1).ToString() + "ScrInvoiceVendorAmt";
                            ttAPInvHed[fieldNameScrInvoiceVendorAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", rndStr);
                        }
                    }
                }
            }
            else
            {
                ttAPInvHed.ScrDocInvoiceVendorAmt = ProposedInvoiceVendorAmt;
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.ScrInvoiceVendorAmt = ttAPInvHed.ScrDocInvoiceVendorAmt;
                }
                else
                {
                    ttAPInvHed.ScrInvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrInvoiceVendorAmt");
                    rndStr = string.Empty;
                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            rndStr = "Rpt" + (i - 1).ToString() + "InvoiceVendorAmt";
                            fieldNameScrInvoiceVendorAmt = "Rpt" + (i - 1).ToString() + "ScrInvoiceVendorAmt";
                            ttAPInvHed[fieldNameScrInvoiceVendorAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", rndStr);
                        }
                    }
                }
            }/* else do */

            CalcVariance();
        }

        ///  Purpose:     
        ///  Parameters:  none
        ///  Notes: 
        ///  /// <summary> 
        ///  /// </summary>
        /// <param name="ProposedJobMisc">The proposed job misc code</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeJobMiscCode(string ProposedJobMisc, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            int origJobMtlSeq = 0;

            if (ttAPInvJob == null)
            {


                ttAPInvJob = (from ttAPInvJob_Row in ds.APInvJob
                              where !String.IsNullOrEmpty(ttAPInvJob_Row.RowMod)
                              select ttAPInvJob_Row).FirstOrDefault();
                if (ttAPInvJob == null)
                {
                    throw new BLException(Strings.InvoiceJobNotFound, "APInvJob", "RowMod");
                }
            }
            origJobMtlSeq = ttAPInvJob.MtlSeq;



            PurMisc = FindFirstPurMisc(Session.CompanyID, ProposedJobMisc);
            if (PurMisc == null)
            {
                throw new BLException(Strings.MisceChargeCodeNotFound, "PurMisc", "MiscCode");
            }    /* reset the question text */
            ttAPInvJob.MtlQuestion = "";
            if (!String.IsNullOrEmpty(ProposedJobMisc))
            {
                var JobMtlQuery4 = DBExpressionCompiler.Compile(JobMtlExpression4);
                JobMtl = JobMtlQuery4(Db, Session.CompanyID, ttAPInvJob.JobNum, ttAPInvJob.AssemblySeq, ProposedJobMisc);
                if (JobMtl != null && JobMtl.MtlSeq != ttAPInvJob.MtlSeq)
                {
                    ttAPInvJob.MtlSeq = JobMtl.MtlSeq;
                }
                else
                {
                    if (ttAPInvJob.AddedJobMtlSeq > 0)
                    {
                        var JobMtlQuery5 = DBExpressionCompiler.Compile(JobMtlExpression5);
                        JobMtl = JobMtlQuery5(Db, Session.CompanyID, ttAPInvJob.JobNum, ttAPInvJob.AssemblySeq, ttAPInvJob.AddedJobMtlSeq);
                        if (JobMtl != null)
                        {
                            JobMtl.PartNum = ProposedJobMisc;
                            JobMtl.Description = ((PurMisc != null) ? PurMisc.Description : "");
                            JobMtl.MiscCode = ProposedJobMisc;
                            if (JobMtl.MtlSeq != ttAPInvJob.MtlSeq)
                            {
                                ttAPInvJob.MtlSeq = JobMtl.MtlSeq;
                            }
                        }
                    }
                    if (JobMtl == null)
                    {
                        ttAPInvJob.MtlQuestion = Strings.MaterNotFoundDoYouWantToAddOneAutom;             /*ask user if they want to add it automatically?, for now set the MtlSeq = 0 since we dont' know the new one yet */
                        ttAPInvJob.MtlSeq = 0;
                    }
                }
            }
            else
            {
                ttAPInvJob.MtlSeq = 0;
            }
            ttAPInvJob.MiscCode = ProposedJobMisc;
            if (ttAPInvJob.MtlSeq != origJobMtlSeq)
            {
                AssignAPInvJobJobMtlFields();
            }
        }

        /// <summary>
        /// Method to call when changing the projectID.  Updates APInvJob
        /// 
        /// </summary>
        /// <param name="propProject">The proposed project</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeJobMiscProject(string propProject, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPInvJob = (from ttAPInvJob_Row in ds.APInvJob
                          where !String.IsNullOrEmpty(ttAPInvJob_Row.RowMod)
                          select ttAPInvJob_Row).FirstOrDefault();
            if (ttAPInvJob == null)
            {
                throw new BLException(Strings.RecordNotFound, "APInvJob", "RowMod");
            }

            var ProjectQuery = DBExpressionCompiler.Compile(ProjectExpression);
            Project = ProjectQuery(Db, Session.CompanyID, propProject, true);
            if (Project == null)
            {
                throw new BLException(Strings.ActiveProjectNotFound, "APInvJob", "ProjectID");
            }/* reset fields associated to the project */
            ttAPInvJob.ProjectID = propProject;
            ttAPInvJob.JobNum = "";
            ttAPInvJob.PhaseID = "";
            ttAPInvJob.PhaseDescription = "";
            ttAPInvJob.AddedJobMtlSeq = 0;
            ttAPInvJob.MtlSeq = 0;
            ttAPInvJob.AssemblySeq = 0;
            ttAPInvJob.MiscCode = "";
            AssignAPInvJobJobMtlFields();
        }

        /// <summary>
        /// Method to call when changing the job number on the job miscellaneous charge.  
        /// Validates the job number and updates APInvJob with values from the new job. 
        /// </summary>
        /// <param name="ProposedJobNum">The proposed job number</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeJobNum(string ProposedJobNum, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPInvJob = (from ttAPInvJob_Row in ds.APInvJob
                          where StringExtensions.Lookup(modList, ttAPInvJob_Row.RowMod) != -1
                          select ttAPInvJob_Row).FirstOrDefault();
            if (ttAPInvJob == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvJob");
            }

            JobHead = FindFirstJobHead(Session.CompanyID, ProposedJobNum, false);
            if (JobHead == null)
            {
                throw new BLException(Strings.JobIsNotOnFileOrClosed, "APInvJob", "JobNum");
            }
            ttAPInvJob.JobNum = ProposedJobNum;
            ttAPInvJob.JobType = ((StringExtensions.Compare(JobHead.JobType, "SRV") == 0) ? Strings.Service : ((StringExtensions.Compare(JobHead.JobType, "MNT") == 0) ? Strings.Maintenance : ((StringExtensions.Compare(JobHead.JobType, "PRJ") == 0) ? Strings.Project : Strings.Manufacture)));
            ttAPInvJob.CallNum = JobHead.CallNum;
            ttAPInvJob.CallLine = JobHead.CallLine;
            if (StringExtensions.Compare(JobHead.JobType, "SRV") == 0)
            {


                var FSCallhdQuery3 = DBExpressionCompiler.Compile(FSCallhdExpression3);
                FSCallhd = FSCallhdQuery3(Db, JobHead.Company, JobHead.CallNum, false);
                if (FSCallhd == null)
                {
                    throw new BLException(Strings.RelatedServiceCallIsNotOnFileOrAlreadyInvoi, "APInvJob", "JobNum");
                }
                ttAPInvJob.EnableMaterialComplete = true;
                ttAPInvJob.MaterialComplete = FSCallhd.MaterialComplete;
            }
        }

        /// <summary>
        /// Method to call when changing the discount amount on the invoice detail.  Updates APInvDtl
        /// with default values based on the new discount amount. 
        /// </summary>
        /// <param name="ProposedLineDiscAmt">The proposed discount amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeLineDiscAmt(decimal ProposedLineDiscAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvDtl", "JobNum");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (ttAPInvDtl.CurrencySwitch)
            {
                ttAPInvDtl.ScrLineDiscAmt = ProposedLineDiscAmt;
                var outScrLineDiscAmt = ttAPInvDtl.ScrLineDiscAmt;
                var outScrDocLineDiscAmt = ttAPInvDtl.ScrDocLineDiscAmt;
                var outRpt1ScrLineDiscAmt = ttAPInvDtl.Rpt1ScrLineDiscAmt;
                var outRpt2ScrLineDiscAmt = ttAPInvDtl.Rpt2ScrLineDiscAmt;
                var outRpt3ScrLineDiscAmt = ttAPInvDtl.Rpt3ScrLineDiscAmt;
                CalcDocAmt(ref outScrLineDiscAmt, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "ScrDocLineDiscAmt", "ScrLineDiscAmt", out outScrDocLineDiscAmt, out outRpt1ScrLineDiscAmt, out outRpt2ScrLineDiscAmt, out outRpt3ScrLineDiscAmt);
                ttAPInvDtl.ScrLineDiscAmt = outScrLineDiscAmt;
                ttAPInvDtl.ScrDocLineDiscAmt = outScrDocLineDiscAmt;
                ttAPInvDtl.Rpt1ScrLineDiscAmt = outRpt1ScrLineDiscAmt;
                ttAPInvDtl.Rpt2ScrLineDiscAmt = outRpt2ScrLineDiscAmt;
                ttAPInvDtl.Rpt3ScrLineDiscAmt = outRpt3ScrLineDiscAmt;
            }
            else
            {
                ttAPInvDtl.ScrDocLineDiscAmt = ProposedLineDiscAmt;
                var outScrLineDiscAmt2 = ttAPInvDtl.ScrLineDiscAmt;
                var outRpt1ScrLineDiscAmt2 = ttAPInvDtl.Rpt1ScrLineDiscAmt;
                var outRpt2ScrLineDiscAmt2 = ttAPInvDtl.Rpt2ScrLineDiscAmt;
                var outRpt3ScrLineDiscAmt2 = ttAPInvDtl.Rpt3ScrLineDiscAmt;
                CalcBaseAmt(ttAPInvDtl.ScrDocLineDiscAmt, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "ScrLineDiscAmt", out outScrLineDiscAmt2, out outRpt1ScrLineDiscAmt2, out outRpt2ScrLineDiscAmt2, out outRpt3ScrLineDiscAmt2);
                ttAPInvDtl.ScrLineDiscAmt = outScrLineDiscAmt2;
                ttAPInvDtl.Rpt1ScrLineDiscAmt = outRpt1ScrLineDiscAmt2;
                ttAPInvDtl.Rpt2ScrLineDiscAmt = outRpt2ScrLineDiscAmt2;
                ttAPInvDtl.Rpt3ScrLineDiscAmt = outRpt3ScrLineDiscAmt2;
            }
        }

        /// <summary>
        /// Method to call when changing the LOC ID on the invoice.  Validates the LOC ID and
        /// updates APInvHed with default values based on the new code. 
        /// </summary>
        /// <param name="ProposedLOCID">The proposed LOC ID</param>
        /// <param name="outMsg">Output message</param>
        /// <param name="outTermsDiff">indicates if the loc terms are different from the AP Invoice</param>
        /// <param name="outLocTerms">LOC Terms</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeLOCID(string ProposedLOCID, out string outMsg, out string outTermsDiff, out string outLocTerms, ref APInvoiceTableset ds)
        {
            string locMismatchMsg = string.Empty;
            outTermsDiff = string.Empty;
            outMsg = string.Empty;
            outLocTerms = string.Empty;
            CurrentFullTableset = ds;

            outLocTerms = "";


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }
            if (!String.IsNullOrEmpty(ProposedLOCID))
            {


                var APLOCQuery4 = DBExpressionCompiler.Compile(APLOCExpression4);
                if (!((APLOCQuery4(Db, Session.CompanyID, ProposedLOCID))))
                {
                    throw new BLException(Strings.InvalidLOCID, "APInvHed", "APLOCID");
                }



                var APLOCQuery5 = DBExpressionCompiler.Compile(APLOCExpression5);
                if (!((APLOCQuery5(Db, Session.CompanyID, ProposedLOCID, ttAPInvHed.VendorNum))))
                {
                    throw new BLException(Strings.InvalidSupplierForThisLOCID, "APInvHed", "APLOCID");
                }



                var APLOCQuery6 = DBExpressionCompiler.Compile(APLOCExpression6);
                if (!((APLOCQuery6(Db, Session.CompanyID, ProposedLOCID, ttAPInvHed.VendorNum, ttAPInvHed.CurrencyCode))))
                {
                    throw new BLException(Strings.InvalidCurrencyForThisLOCID, "APInvHed", "APLOCID");
                }



                var APLOCQuery7 = DBExpressionCompiler.Compile(APLOCExpression7);
                APLOC = APLOCQuery7(Db, Session.CompanyID, ProposedLOCID);
                if (APLOC != null)
                {
                    if (APLOC.Closed == true)
                    {
                        throw new BLException(Strings.LOCIsClosed, "APInvHed", "APLOCID");
                    }
                    if (ttAPInvHed.InvoiceDate < APLOC.FromDate || ttAPInvHed.InvoiceDate > APLOC.ToDate)
                    {
                        outMsg = Strings.InvoiceDateIsOutsideOfLOCDateRange;
                    }
                    if (StringExtensions.Compare(ttAPInvHed.TermsCode, APLOC.TermsCode) != 0)
                    {
                        outTermsDiff = Strings.InvoiceTermsAndLOCTermsDoNotMatchDoYouWantToUpdate(ttAPInvHed.TermsCode, APLOC.TermsCode);
                        outLocTerms = APLOC.TermsCode;
                    }
                    if (APLOC.Inactive == true)
                    {
                        throw new BLException(Strings.LetterofCreditisinactive, "APLOC");
                    }
                }
            } /* proposedLOC <> "" */
            locMismatchMsg = VerifyLocMismatch(ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum, ProposedLOCID);
            if (!String.IsNullOrEmpty(locMismatchMsg))
            {
                outMsg = String.IsNullOrEmpty(outMsg) ? locMismatchMsg : outMsg + "\n" + locMismatchMsg;
            }

            ttAPInvHed.APLOCID = ProposedLOCID;
            APInvHed_Foreign_Link();
        }

        /// <summary>
        /// Method to call when changing the LOC ID on Posted AP Invoice Maintenance EXCLUSIVE. 
        /// Validates the proposed LOC ID vs Vendor and Currency, then updates APInvHed
        /// with default values based on the new code. 
        /// </summary>
        /// <param name="ProposedLOCID">The proposed LOC ID</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeLOCIDInvPosted(string ProposedLOCID, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }
            if (!String.IsNullOrEmpty(ProposedLOCID))
            {


                APLOC = this.FindFirstAPLOC(Session.CompanyID, ProposedLOCID);
                if (APLOC != null)
                {
                    if (APLOC.VendorNum != ttAPInvHed.VendorNum)
                    {
                        throw new BLException(Strings.InvalidSupplierForThisLOCID, "APInvHed", "APLOCID");
                    }
                    if (StringExtensions.Compare(ttAPInvHed.CurrencyCode, APLOC.CurrencyCode) != 0)
                    {
                        throw new BLException(Strings.InvalidCurrencyForThisLOCID, "APInvHed", "APLOCID");
                    }
                    if (APLOC.Closed == true)
                    {
                        throw new BLException(Strings.LOCIsClosed, "APInvHed", "APLOCID");
                    }

                    if (APLOC.Inactive == true)
                    {
                        throw new BLException(Strings.LetterofCreditisinactive, "APLOC");
                    }
                }
                else
                {
                    throw new BLException(Strings.InvalidLOCID, "APInvHed", "APLOCID");

                }

            }
            ttAPInvHed.APLOCID = ProposedLOCID;
            ttAPInvHed.APLOCIDDescription = APLOC.Description;
            APInvHed_Foreign_Link();
        }

        /// <summary>
        /// Method to call when changing the lock rate flag on the invoice.  Updates 
        /// APInvHed.EnableExchangeRate field.
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeLockRate(ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }

            ttAPInvHed.EnableExchangeRate = ttAPInvHed.LockRate;
        }

        /// <summary>
        /// Method to call when changing the manual tax calculation value on a tax record.  Updates APInvTax
        /// tax amounts based on the new value of the flag. 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeManualTaxCalculation(ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            bool firstDtlFlag = false;
            decimal termsDiscount = decimal.Zero;
            int rndRule = 0;
            int nDecTaxAmt = 0;
            int nDecTaxableAmt = 0;
            int nDecReportableAmt = 0;
            int nDecDocTaxAmt = 0;
            int nDecDocTaxableAmt = 0;
            int nDecDocReportableAmt = 0;
            decimal tmpTax = decimal.Zero;
            decimal doctmpTax = decimal.Zero;
            decimal rpt1tmpTax = decimal.Zero;
            decimal rpt2tmptax = decimal.Zero;
            decimal rpt3tmptax = decimal.Zero;
            string baseCurrency = string.Empty;

            Erp.Tables.APInvDtl bApInvDtl = null;
            PurTermDPartial purTermDPartial = null;

            baseCurrency = this.FindCurrencyBase(Session.CompanyID, true);

            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvTax");
            }


            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceHeaderIsNotFound, "APInvHed");
            }

            PurTerms = PurTerms.FindFirstByPrimaryKey(Db, Session.CompanyID, APInvHed.TermsCode);
            bool diffCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);
            int apTaxRoundOption = APInvHed.APTaxRoundOption;

            purTermDPartial = FindFirstPurTermDPartial(Session.CompanyID, APInvHed.TermsCode);
            termsDiscount = ((purTermDPartial != null) ? purTermDPartial.DiscountPercent : 0);



            var SalesTaxQuery6 = DBExpressionCompiler.Compile(SalesTaxExpression6);
            SalesTax = SalesTaxQuery6(Db, Session.CompanyID, ttAPInvTax.TaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.InvalidTaxCode, "APInvTax", "TaxCode");
            }



            var TaxRateQuery5 = DBExpressionCompiler.Compile(TaxRateExpression5);
            TaxRate = TaxRateQuery5(Db, Session.CompanyID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode);
            if (TaxRate == null)
            {
                throw new BLException(Strings.InvalidRateCode, "APInvTax", "TaxRate");
            }
            if (SalesTax.RoundDown == true)
            {
                rndRule = 2;
            }
            else
            {
                rndRule = 0;         /* RESET INFO FOR RECALC OF TAX INFO */
            }

            ttAPInvTax.ScrTaxableAmt = 0;
            ttAPInvTax.ScrTaxAmt = 0;
            ttAPInvTax.ScrDocTaxableAmt = 0;
            ttAPInvTax.ScrDocTaxAmt = 0;
            ttAPInvTax.ScrReportableAmt = 0;
            ttAPInvTax.SysCalcReportableAmt = 0;
            ttAPInvTax.SysCalcDocTaxableAmt = 0;
            ttAPInvTax.DocDefTaxableAmt = 0;
            ttAPInvTax.DocDefTaxAmt = 0;
            ttAPInvTax.ScrDocReportableAmt = 0;
            ttAPInvTax.SysCalcDocReportableAmt = 0;
            ttAPInvTax.SysCalcReportableAmt = 0;
            ttAPInvTax.ScrDocTaxAmtVar = 0;
            ttAPInvTax.ScrTaxAmtVar = 0;
            ttAPInvTax.Rpt1ScrTaxAmt = 0;
            ttAPInvTax.Rpt1ScrTaxableAmt = 0;
            ttAPInvTax.Rpt1ScrReportableAmt = 0;
            ttAPInvTax.Rpt1ScrTaxAmtVar = 0;
            ttAPInvTax.Rpt1SysCalcTaxableAmt = 0;
            ttAPInvTax.Rpt1SysCalcReportableAmt = 0;
            ttAPInvTax.Rpt2ScrTaxAmt = 0;
            ttAPInvTax.Rpt2ScrTaxableAmt = 0;
            ttAPInvTax.Rpt2ScrReportableAmt = 0;
            ttAPInvTax.Rpt2ScrTaxAmtVar = 0;
            ttAPInvTax.Rpt3ScrTaxAmt = 0;
            ttAPInvTax.Rpt2SysCalcTaxableAmt = 0;
            ttAPInvTax.Rpt2SysCalcReportableAmt = 0;
            ttAPInvTax.Rpt3ScrTaxableAmt = 0;
            ttAPInvTax.Rpt3ScrReportableAmt = 0;
            ttAPInvTax.Rpt3ScrTaxAmtVar = 0;
            ttAPInvTax.Rpt3SysCalcTaxableAmt = 0;
            ttAPInvTax.Rpt3SysCalcReportableAmt = 0;
            ttAPInvTax.ScrDedTaxAmt = 0;
            ttAPInvTax.ScrDocDedTaxAmt = 0;
            ttAPInvTax.Rpt1ScrDedTaxAmt = 0;
            ttAPInvTax.Rpt2ScrDedTaxAmt = 0;
            ttAPInvTax.Rpt3ScrDedTaxAmt = 0;
            ttAPInvTax.ScrDocFixedAmount = 0;
            ttAPInvTax.ScrFixedAmount = 0;
            ttAPInvTax.Rpt1ScrFixedAmount = 0;
            ttAPInvTax.Rpt2ScrFixedAmount = 0;
            ttAPInvTax.Rpt3ScrFixedAmount = 0;


            nDecTaxAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "TaxAmt", "");
            nDecTaxableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "TaxableAmt", "");
            nDecDocTaxAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "DocTaxAmt", "");
            nDecDocTaxableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "DocTaxableAmt", "");
            nDecReportableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "ReportableAmt", "");
            nDecDocReportableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "DocReportableAmt", "");



            ttLineTypesRows = new List<Internal.Lib.ProcessTaxes.LineTypes>();

            foreach (var bApInvDtl_iterator in (SelectAPInvDtlWithoutTaxExempt(ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum)))
            {
                if (!ttAPInvTax.ManAdd && CheckTaxCategory(bApInvDtl_iterator.TaxCatID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode))
                    continue;

                bApInvDtl = bApInvDtl_iterator;
                ttLineTypes = new Internal.Lib.ProcessTaxes.LineTypes();
                ttLineTypesRows.Add(ttLineTypes);
                ttLineTypes.adKey = Compatibility.Convert.ToString(bApInvDtl.InvoiceLine);
                ttLineTypes.DocType = "APINVOICES";
                ttLineTypes.TaxCode = ttAPInvTax.TaxCode;
                ttLineTypes.RateCode = ttAPInvTax.RateCode;
                ttLineTypes.LineNum = bApInvDtl.InvoiceLine;
                ttLineTypes.ManAdd = true;
                ttLineTypes.Manual = false;
                ttLineTypes.TaxMethod = "L";
                ttLineTypes.RoundRule = rndRule;
                ttLineTypes.InPrice = SalesTax.InPrice;
                ttLineTypes.DocTaxableAmt = bApInvDtl.DocExtCost - bApInvDtl.DocLineDiscAmt - bApInvDtl.DocAdvancePayAmt;
                ttLineTypes.DocTermsTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttLineTypes.DocNoExemptTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttLineTypes.DocDiscount = bApInvDtl.DocLineDiscAmt;
                ttLineTypes.CollectionType = SalesTax.CollectionType;
                ttLineTypes.Timing = SalesTax.Timing;
                ttLineTypes.Algorithm = SalesTax.Algorithm;
                ttLineTypes.CurrencyCode = APInvHed.CurrencyCode;
                ttLineTypes.RateGrpCode = APInvHed.RateGrpCode;
                ttLineTypes.VendorNum = ttAPInvTax.VendorNum;
                ttLineTypes.PartNum = bApInvDtl.PartNum;
                ttLineTypes.TaxCatID = bApInvDtl.TaxCatID;
                ttLineTypes.RoundRule = rndRule;
                ttLineTypes.TaxRoundOption = apTaxRoundOption;
                ttLineTypes.DiffDocCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);
                ttLineTypes.NoCurrRound = (apTaxRoundOption == 0 || (apTaxRoundOption == 2 && ttLineTypes.DiffDocCurr)) ? true : false;
                ttLineTypes.TaxTbl = "APInvTax";
                ttLineTypes.TaxFld = "DocTaxAmt";
                ttLineTypes.TaxableFld = "DocTaxableAmt";
                ttLineTypes.nDecTaxAmt = nDecTaxAmt;
                ttLineTypes.nDecTaxableAmt = nDecTaxableAmt;
                ttLineTypes.nDecDocTaxAmt = nDecDocTaxAmt;
                ttLineTypes.nDecDocTaxableAmt = nDecDocTaxableAmt;
                ttLineTypes.nDecReportableAmt = nDecReportableAmt;
                ttLineTypes.nDecDocReportableAmt = nDecDocReportableAmt;
                ttLineTypes.TaxRateDate = APInvHed.TaxRateDate;

                ttLineTypes.DocNoExemptTaxableAmt = ttLineTypes.DocTaxableAmt;
                var outExemptType = ttLineTypes.ExemptType;
                var outExemptRate = ttLineTypes.ExemptRate;
                var outResolutionNum = ttLineTypes.ResolutionNum;
                var outResolutionDate = ttLineTypes.ResolutionDate;
                var outLegalText = ttLineTypes.LegalText;
                var outReportable = ttLineTypes.Reportable;

                LibProcessTaxes.getCustomTaxExemptInfo(ttLineTypes.TaxCode, ttLineTypes.RateCode, out outExemptType, out outExemptRate, out outResolutionNum, out outResolutionDate, out outLegalText, out outReportable, ref ttLineExemptRows, ref ttLineTypes);

                ttLineTypes.ExemptType = outExemptType;
                ttLineTypes.ExemptRate = outExemptRate;
                ttLineTypes.ResolutionNum = outResolutionNum;
                ttLineTypes.ResolutionDate = outResolutionDate;
                ttLineTypes.LegalText = outLegalText;
                ttLineTypes.Reportable = outReportable;
                ttLineTypes.FullCalc = true;
                if ((SalesTax.DiscountType == 2 && termsDiscount != 0))
                {
                    ttLineTypes.DocTaxableAmt = LibRoundRulesEF.RoundRuleApply((ttLineTypes.DocTaxableAmt * ((100 - termsDiscount) / 100)), LibRoundRulesEF.TypeAmt_UnitPrice, ttLineTypes.CurrencyCode);
                }

                LibProcessTaxes.ProcessOneTaxLine(ref ttLineTypes);
                if (ttLineTypes.CompMethod.Equals("I", StringComparison.OrdinalIgnoreCase) && (ttLineTypes.TaxMinAmt != 0 || ttLineTypes.TaxMaxAmt != 0))
                {
                    // this is limitation for manually added lines. The "Compare at" Document level is treated as "Line level"
                    if (Math.Abs(ttLineTypes.DocTaxAmt) > ttLineTypes.TaxMaxAmt && ttLineTypes.TaxMaxAmt != 0)
                    {
                        if (ttLineTypes.DocTaxableAmt >= 0)
                        {
                            ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt;
                        }
                        else
                        {
                            ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt * -1;
                        }
                    }
                    else
                    {
                        if (Math.Abs(ttLineTypes.DocTaxAmt) < ttLineTypes.TaxMinAmt && ttLineTypes.TaxMinAmt != 0)
                        {
                            if (ttLineTypes.DocTaxableAmt >= 0)
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt;
                            }
                            else
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt * -1;
                            }
                        }

                    }
                }
                ttLineTypes.DocDedTaxAmt = LibProcessTaxes.RoundRuleTaxMethodEx((ttLineTypes.DocTaxAmt * ttLineTypes.DeductPercent / 100), ttLineTypes.TaxMethod, ttLineTypes.RoundRule, ttLineTypes.CurrencyCode, ttLineTypes.NoCurrRound, "APInvTax", "DocTaxAmt");
                if (!firstDtlFlag)
                {
                    ttAPInvTax.Percent = ttLineTypes.Percent;
                    ttAPInvTax.CollectionType = ttLineTypes.CollectionType;
                    ttAPInvTax.Timing = ttLineTypes.Timing;
                    ttAPInvTax.ReverseCharge = ttLineTypes.ReverseCharge;
                    if (ttLineTypes.TaxRateDate == null)
                    {
                        ttAPInvTax.TaxRateDate = null;
                    }
                    else
                    {
                        ttAPInvTax.TaxRateDate = (DateTime)ttLineTypes.TaxRateDate;
                    }

                    ttAPInvTax.ExemptType = ttLineTypes.ExemptType;
                    ttAPInvTax.ExemptPercent = ttLineTypes.ExemptRate;
                    ttAPInvTax.ECAcquisitionSeq = 0;
                    ttAPInvTax.ResolutionNum = ttLineTypes.ResolutionNum;
                    if (ttLineTypes.ResolutionDate == null)
                    {
                        ttAPInvTax.ResolutionDate = null;
                    }
                    else
                    {
                        ttAPInvTax.ResolutionDate = (DateTime)ttLineTypes.ResolutionDate;
                    }

                    firstDtlFlag = true;
                }
                ttAPInvTax.DocDefTaxableAmt = ttAPInvTax.DocDefTaxableAmt + ttLineTypes.DocTaxableAmt;
                ttAPInvTax.DocDefTaxAmt = ttAPInvTax.DocDefTaxAmt + ttLineTypes.DocDedTaxAmt;
                ttAPInvTax.SysCalcDocTaxableAmt = ttAPInvTax.SysCalcDocTaxableAmt + ttLineTypes.DocTaxableAmt;
                ttAPInvTax.SysCalcDocReportableAmt = ttAPInvTax.SysCalcDocReportableAmt + ttLineTypes.DocReportableAmt;

                if (!APInvHed.DebitMemo)
                {
                    ttAPInvTax.ScrDocReportableAmt = ttAPInvTax.ScrDocReportableAmt + ttLineTypes.DocReportableAmt;
                    ttAPInvTax.ScrDocTaxableAmt = ttAPInvTax.ScrDocTaxableAmt + ttLineTypes.DocTaxableAmt;
                    ttAPInvTax.ScrDocTaxAmt = ttAPInvTax.ScrDocTaxAmt + ttLineTypes.DocTaxAmt;
                    ttAPInvTax.ScrDocDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt + ttLineTypes.DocDedTaxAmt;
                    ttAPInvTax.ScrDocFixedAmount = ttAPInvTax.ScrDocFixedAmount + ttLineTypes.FixedAmount;
                }
                else
                {
                    ttAPInvTax.ScrDocReportableAmt = ttAPInvTax.ScrDocReportableAmt - ttLineTypes.DocReportableAmt;
                    ttAPInvTax.ScrDocTaxableAmt = ttAPInvTax.ScrDocTaxableAmt - ttLineTypes.DocTaxableAmt;
                    ttAPInvTax.ScrDocTaxAmt = ttAPInvTax.ScrDocTaxAmt - ttLineTypes.DocTaxAmt;
                    ttAPInvTax.ScrDocDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt - ttLineTypes.DocDedTaxAmt;
                    ttAPInvTax.ScrDocFixedAmount = ttAPInvTax.ScrDocFixedAmount - ttLineTypes.FixedAmount;



                }
            } //for each dtl line

            foreach (var APInvMsc_iterator in (SelectAllAPInvMsc(Session.CompanyID, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum)))
            {
                if (!ttAPInvTax.ManAdd && CheckTaxCategory(APInvMsc_iterator.TaxCatID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode))
                    continue;

                APInvMsc = APInvMsc_iterator;
                ttLineTypes = new Internal.Lib.ProcessTaxes.LineTypes();
                ttLineTypesRows.Add(ttLineTypes);
                ttLineTypes.adKey = Compatibility.Convert.ToString(0);
                ttLineTypes.DocType = "APINVOICES";
                ttLineTypes.TaxCode = ttAPInvTax.TaxCode;
                ttLineTypes.RateCode = ttAPInvTax.RateCode;
                ttLineTypes.LineNum = 0;
                ttLineTypes.ManAdd = true;
                ttLineTypes.Manual = false;
                ttLineTypes.TaxMethod = "L";
                ttLineTypes.RoundRule = rndRule;
                ttLineTypes.DocTaxableAmt = APInvMsc.DocMiscAmt;
                ttLineTypes.DocTermsTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttLineTypes.DocNoExemptTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttLineTypes.CollectionType = SalesTax.CollectionType;
                ttLineTypes.Timing = SalesTax.Timing;
                ttLineTypes.Algorithm = SalesTax.Algorithm;
                ttLineTypes.CurrencyCode = APInvHed.CurrencyCode;
                ttLineTypes.RateGrpCode = APInvHed.RateGrpCode;
                ttLineTypes.VendorNum = ttAPInvTax.VendorNum;
                ttLineTypes.TaxCatID = APInvMsc.TaxCatID;
                ttLineTypes.nDecTaxAmt = nDecTaxAmt;
                ttLineTypes.nDecTaxableAmt = nDecTaxableAmt;
                ttLineTypes.nDecDocTaxAmt = nDecDocTaxAmt;
                ttLineTypes.nDecDocTaxableAmt = nDecDocTaxableAmt;
                ttLineTypes.nDecReportableAmt = nDecReportableAmt;
                ttLineTypes.nDecDocReportableAmt = nDecDocReportableAmt;
                ttLineTypes.TaxRateDate = APInvHed.TaxRateDate;
                ttLineTypes.SalesTaxLegalText = SalesTax.TextCode;
                ttLineTypes.RoundRule = rndRule;
                ttLineTypes.TaxRoundOption = apTaxRoundOption;
                ttLineTypes.DiffDocCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);
                ttLineTypes.NoCurrRound = (apTaxRoundOption == 0 || (apTaxRoundOption == 2 && ttLineTypes.DiffDocCurr)) ? true : false;
                ttLineTypes.TaxTbl = "APInvTax";
                ttLineTypes.TaxFld = "DocTaxAmt";
                ttLineTypes.TaxableFld = "DocTaxableAmt";
                ttLineTypes.ExemptType = 0;
                ttLineTypes.ExemptRate = 0;
                ttLineTypes.ResolutionNum = string.Empty;
                ttLineTypes.ResolutionDate = null;
                ttLineTypes.LegalText = string.Empty;

                if (!String.IsNullOrEmpty(APInvMsc.TaxCatID))
                {
                    var outExemptType2 = ttLineTypes.ExemptType;
                    var outExemptRate2 = ttLineTypes.ExemptRate;
                    var outResolutionNum2 = ttLineTypes.ResolutionNum;
                    var outResolutionDate2 = ttLineTypes.ResolutionDate;
                    var outLegalText2 = ttLineTypes.LegalText;
                    var outReportable2 = ttLineTypes.Reportable;
                    LibProcessTaxes.getCustomTaxExemptInfo(ttLineTypes.TaxCode, ttLineTypes.RateCode, out outExemptType2, out outExemptRate2, out outResolutionNum2, out outResolutionDate2, out outLegalText2, out outReportable2, ref ttLineExemptRows, ref ttLineTypes);
                    ttLineTypes.ExemptType = outExemptType2;
                    ttLineTypes.ExemptRate = outExemptRate2;
                    ttLineTypes.ResolutionNum = outResolutionNum2;
                    ttLineTypes.ResolutionDate = outResolutionDate2;
                    ttLineTypes.LegalText = outLegalText2;
                    ttLineTypes.Reportable = outReportable2;
                }
                ttLineTypes.FullCalc = true;
                if ((SalesTax.DiscountType == 2 && termsDiscount != 0))
                {
                    ttLineTypes.DocTaxableAmt = LibRoundRulesEF.RoundRuleApply((ttLineTypes.DocTaxableAmt * ((100 - termsDiscount) / 100)), LibRoundRulesEF.TypeAmt_UnitPrice, ttLineTypes.CurrencyCode);
                }

                LibProcessTaxes.ProcessOneTaxLine(ref ttLineTypes);
                if (ttLineTypes.CompMethod.Equals("I", StringComparison.OrdinalIgnoreCase) && (ttLineTypes.TaxMinAmt != 0 || ttLineTypes.TaxMaxAmt != 0))
                {
                    // this is limitation for manually added lines. The "Compare at" Document level is treated as "Line level"
                    if (Math.Abs(ttLineTypes.DocTaxAmt) > ttLineTypes.TaxMaxAmt && ttLineTypes.TaxMaxAmt != 0)
                    {
                        if (ttLineTypes.DocTaxableAmt >= 0)
                        {
                            ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt;
                        }
                        else
                        {
                            ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt * -1;

                        }

                    }
                    else
                    {
                        if (Math.Abs(ttLineTypes.DocTaxAmt) < ttLineTypes.TaxMinAmt && ttLineTypes.TaxMinAmt != 0)
                        {
                            if (ttLineTypes.DocTaxableAmt >= 0)
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt;
                            }
                            else
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt * -1;
                            }
                        }

                    }
                }

                ttLineTypes.DocDedTaxAmt = LibProcessTaxes.RoundRuleTaxMethodEx((ttLineTypes.DocTaxAmt * ttLineTypes.DeductPercent / 100), ttLineTypes.TaxMethod, ttLineTypes.RoundRule, ttLineTypes.CurrencyCode, ttLineTypes.NoCurrRound, "APInvTax", "DocTaxAmt");
                if (!firstDtlFlag)
                {
                    ttAPInvTax.Percent = ttLineTypes.Percent;
                    ttAPInvTax.CollectionType = ttLineTypes.CollectionType;
                    ttAPInvTax.Timing = ttLineTypes.Timing;
                    ttAPInvTax.ReverseCharge = ttLineTypes.ReverseCharge;
                    if (ttLineTypes.TaxRateDate == null)
                    {
                        ttAPInvTax.TaxRateDate = null;
                    }
                    else
                    {
                        ttAPInvTax.TaxRateDate = (DateTime)ttLineTypes.TaxRateDate;
                    }

                    ttAPInvTax.ExemptType = ttLineTypes.ExemptType;
                    ttAPInvTax.ExemptPercent = ttLineTypes.ExemptRate;
                    ttAPInvTax.ECAcquisitionSeq = 0;
                    ttAPInvTax.ResolutionNum = ttLineTypes.ResolutionNum;
                    if (ttLineTypes.ResolutionDate == null)
                    {
                        ttAPInvTax.ResolutionDate = null;
                    }
                    else
                    {
                        ttAPInvTax.ResolutionDate = (DateTime)ttLineTypes.ResolutionDate;
                    }

                    ttAPInvTax.TextCode = ttLineTypes.LegalText;
                    firstDtlFlag = true;
                }
                ttAPInvTax.DocDefTaxableAmt = ttAPInvTax.DocDefTaxableAmt + ttLineTypes.DocTaxableAmt;
                ttAPInvTax.DocDefTaxAmt = ttAPInvTax.DocDefTaxAmt + ttLineTypes.DocDedTaxAmt;
                ttAPInvTax.SysCalcDocTaxableAmt = ttAPInvTax.SysCalcDocTaxableAmt + ttLineTypes.DocTaxableAmt;
                ttAPInvTax.SysCalcDocReportableAmt = ttAPInvTax.SysCalcDocReportableAmt + ttLineTypes.DocReportableAmt;
                if (!APInvHed.DebitMemo)
                {
                    ttAPInvTax.ScrDocReportableAmt = ttAPInvTax.ScrDocReportableAmt + ttLineTypes.DocReportableAmt;
                    ttAPInvTax.ScrDocTaxableAmt = ttAPInvTax.ScrDocTaxableAmt + ttLineTypes.DocTaxableAmt;
                    ttAPInvTax.ScrDocTaxAmt = ttAPInvTax.ScrDocTaxAmt + ttLineTypes.DocTaxAmt;
                    ttAPInvTax.ScrDocDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt + ttLineTypes.DocDedTaxAmt;
                    ttAPInvTax.ScrDocFixedAmount = ttAPInvTax.ScrDocFixedAmount + ttLineTypes.FixedAmount;
                }
                else
                {
                    ttAPInvTax.ScrDocReportableAmt = ttAPInvTax.ScrDocReportableAmt - ttLineTypes.DocReportableAmt;
                    ttAPInvTax.ScrDocTaxableAmt = ttAPInvTax.ScrDocTaxableAmt - ttLineTypes.DocTaxableAmt;
                    ttAPInvTax.ScrDocTaxAmt = ttAPInvTax.ScrDocTaxAmt - ttLineTypes.DocTaxAmt;
                    ttAPInvTax.ScrDocDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt - ttLineTypes.DocDedTaxAmt;
                    ttAPInvTax.ScrDocFixedAmount = ttAPInvTax.ScrDocFixedAmount - ttLineTypes.FixedAmount;
                }
            }




            string fieldNameScrReportableAmt = string.Empty;
            string fieldNameScrTaxableAmt = string.Empty;
            string fieldNameScrTaxAmt = string.Empty;
            string fieldNameScrFixedAmount = string.Empty;
            string fieldNameScrDedTaxAmt = string.Empty;
            string fieldNameSysCalcReportableAmt = string.Empty;
            string fieldNameSysCalcTaxableAmt = string.Empty;

            if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                if (String.IsNullOrEmpty(pCurrList))
                {
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPInvTax.VendorNum), Compatibility.Convert.ToString(ttAPInvTax.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                }

                if (XbSyst != null && XbSyst.UseTaxRate && String.IsNullOrEmpty(taxCurrList))
                {
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed-Tax", Compatibility.Convert.ToString(ttAPInvTax.VendorNum), Compatibility.Convert.ToString(ttAPInvTax.InvoiceNum), "", "", "", "", "", "", out tmpTaxChainRows, out taxCurrList, out taxRateList);
                }


                baseCurrency = this.FindCurrencyBase(Session.CompanyID, true);
                if (XbSyst != null && XbSyst.UseTaxRate && ((from tmpTaxChain_Row in tmpTaxChainRows
                                                             select tmpTaxChain_Row).Any()))
                {
                    ttAPInvTax.ScrReportableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), nDecReportableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.ScrTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.ScrTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "TaxAmt");
                    ttAPInvTax.ScrDedTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "DedTaxAmt");
                    ttAPInvTax.SysCalcReportableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.SysCalcDocReportableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), nDecReportableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.SysCalcTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.SysCalcDocTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.DefTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.DocDefTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.DefTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.DocDefTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "DefTaxAmt");
                    ttAPInvTax.ScrFixedAmount = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "FixedAmount");
                    doctmpTax = ttAPInvTax.ScrDocTaxAmt;

                    string cRFieldList = "DefTaxableAmt" + Ice.Constants.LIST_DELIM + "DefTaxAmt";
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvTax, false, cRFieldList, taxCurrList, "ttAPInvTax", APInvHed.CurrencyCode, tmpTaxChainRows);

                    for (i = 2; i <= 4; i++)
                    {
                        if (taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrReportableAmt = "Rpt" + (i - 1).ToString() + "ScrReportableAmt";
                            fieldNameScrTaxableAmt = "Rpt" + (i - 1).ToString() + "ScrTaxableAmt";
                            fieldNameScrTaxAmt = "Rpt" + (i - 1).ToString() + "ScrTaxAmt";
                            fieldNameScrFixedAmount = "Rpt" + (i - 1).ToString() + "ScrFixedAmount";
                            fieldNameScrDedTaxAmt = "Rpt" + (i - 1).ToString() + "ScrDedTaxAmt";
                            fieldNameSysCalcReportableAmt = "Rpt" + (i - 1).ToString() + "SysCalcReportableAmt";
                            fieldNameSysCalcTaxableAmt = "Rpt" + (i - 1).ToString() + "SysCalcTaxableAmt";

                            ttAPInvTax[fieldNameScrReportableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrReportableAmt");
                            ttAPInvTax[fieldNameScrTaxableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrTaxableAmt");
                            ttAPInvTax[fieldNameScrTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrTaxAmt");
                            ttAPInvTax[fieldNameScrFixedAmount] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrFixedAmount");
                            ttAPInvTax[fieldNameScrDedTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrDedTaxAmt");
                            ttAPInvTax[fieldNameSysCalcTaxableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.SysCalcDocTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "SysCalcTaxableAmt");
                            ttAPInvTax[fieldNameSysCalcReportableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.SysCalcDocReportableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "SysCalcReportableAmt");
                        }
                    }

                    LibRptfieldscalc.ConvertAmtVarRoundDec(pCurrList, APInvHed.CurrencyCode, ttChainRows, "APinvTax", "TaxAmt", doctmpTax, out rpt1tmpTax, out rpt2tmptax, out rpt3tmptax);
                    ttAPInvTax.ScrTaxAmtVar = tmpTax - ttAPInvTax.ScrTaxAmt;
                    ttAPInvTax.Rpt1ScrTaxAmtVar = rpt1tmpTax - ttAPInvTax.Rpt1ScrTaxAmt;
                    ttAPInvTax.Rpt2ScrTaxAmtVar = rpt2tmptax - ttAPInvTax.Rpt2ScrTaxAmt;
                    ttAPInvTax.Rpt3ScrTaxAmtVar = rpt3tmptax - ttAPInvTax.Rpt3ScrTaxAmt;
                }
                else
                {
                    ttAPInvTax.ScrReportableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), nDecReportableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.ScrTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.SysCalcTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.SysCalcDocTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.DefTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.DocDefTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.ScrFixedAmount = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "FixedAmount");
                    if (!(apTaxRoundOption == 3 || (apTaxRoundOption == 2 && diffCurr)))
                    {
                        ttAPInvTax.ScrTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "TaxAmt");
                        ttAPInvTax.ScrDedTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "DedTaxAmt"); ttAPInvTax.SysCalcReportableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.SysCalcDocReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), nDecReportableAmt, MidpointRounding.AwayFromZero);
                        ttAPInvTax.DefTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.DocDefTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "DefTaxAmt");
                    }
                    else
                    {
                        ttAPInvTax.ScrTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, ttLineTypes.RoundRule, baseCurrency);
                        ttAPInvTax.ScrDedTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, ttLineTypes.RoundRule, baseCurrency);
                        ttAPInvTax.DefTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.DocDefTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, ttLineTypes.RoundRule, baseCurrency);
                    }
                    string cRFieldList = "DefTaxableAmt" + Ice.Constants.LIST_DELIM + "DefTaxAmt";
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvTax, false, cRFieldList, pCurrList, "ttAPInvTax", APInvHed.CurrencyCode, ttChainRows);

                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrReportableAmt = "Rpt" + (i - 1).ToString() + "ScrReportableAmt";
                            fieldNameScrTaxableAmt = "Rpt" + (i - 1).ToString() + "ScrTaxableAmt";
                            fieldNameScrTaxAmt = "Rpt" + (i - 1).ToString() + "ScrTaxAmt";
                            fieldNameScrFixedAmount = "Rpt" + (i - 1).ToString() + "ScrFixedAmount";
                            fieldNameScrDedTaxAmt = "Rpt" + (i - 1).ToString() + "ScrDedTaxAmt";
                            fieldNameSysCalcReportableAmt = "Rpt" + (i - 1).ToString() + "SysCalcReportableAmt";
                            fieldNameSysCalcTaxableAmt = "Rpt" + (i - 1).ToString() + "SysCalcTaxableAmt";


                            ttAPInvTax[fieldNameScrReportableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrReportableAmt");
                            ttAPInvTax[fieldNameScrTaxableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrTaxableAmt");
                            ttAPInvTax[fieldNameScrTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrTaxAmt");
                            ttAPInvTax[fieldNameScrFixedAmount] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrFixedAmount");
                            ttAPInvTax[fieldNameScrDedTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrDedTaxAmt");
                            ttAPInvTax[fieldNameSysCalcTaxableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.SysCalcDocTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "SysCalcTaxableAmt");
                            ttAPInvTax[fieldNameSysCalcReportableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.SysCalcDocReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "SysCalcReportableAmt");
                        }
                    }
                }
            }
            else
            {
                ttAPInvTax.ScrReportableAmt = ttAPInvTax.ScrDocReportableAmt;
                ttAPInvTax.ScrTaxableAmt = ttAPInvTax.ScrDocTaxableAmt;
                ttAPInvTax.ScrTaxAmt = ttAPInvTax.ScrDocTaxAmt;
                ttAPInvTax.ScrDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt;
                ttAPInvTax.SysCalcReportableAmt = ttAPInvTax.SysCalcDocReportableAmt;
                ttAPInvTax.SysCalcTaxableAmt = ttAPInvTax.SysCalcDocTaxableAmt;
                ttAPInvTax.DefTaxableAmt = ttAPInvTax.DocDefTaxableAmt;
                ttAPInvTax.DefTaxAmt = ttAPInvTax.DocDefTaxAmt;
                ttAPInvTax.ScrFixedAmount = ttAPInvTax.ScrDocFixedAmount;
            }
        }

        private bool CheckTaxCategory(string taxCat, string taxCode, string rateCode)
        {
            string taxCatRateCode = FindFirstTaxCatD(Session.CompanyID, taxCat, taxCode);
            if (!String.IsNullOrEmpty(taxCatRateCode))
            {
                return !taxCatRateCode.KeyEquals(rateCode);
            }

            if (ExistsDefaultSalesTRC(Session.CompanyID, taxCode, rateCode))
                return false;

            return true;
        }

        /// <summary>
        /// Method to call when changing the manual tax calculation value on a header misc charge tax record.  Updates APInvHedMscTax
        /// tax amounts based on the new value of the flag back to system-calculated tax. 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeManualTaxHedMscCalculation(ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in ds.APInvHedMscTax
                                where StringExtensions.Lookup(modList, ttAPInvHedMscTax_Row.RowMod) != -1
                                select ttAPInvHedMscTax_Row).FirstOrDefault();
            if (ttAPInvHedMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvHedMscTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, true));
            if (!invInPrice)
            {
                chgRateCodeHedMscCore();
            }

        }


        /// <summary>
        /// Method to call when changing the manual tax calculation value on a line tax record.  Updates APLnTax
        /// tax amounts based on the new value of the flag back to system-calculated tax. 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeManualTaxLineCalculation(ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                         where StringExtensions.Lookup(modList, ttAPLnTax_Row.RowMod) != -1
                         select ttAPLnTax_Row).FirstOrDefault();
            if (ttAPLnTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APLnTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, true));
            if (!invInPrice)
            {
                chgRateCodeLineCore();
            }



        }


        /// <summary>
        /// Method to call when changing the manual tax calculation value on a line misc charge tax record.  Updates APInvLnMscTax
        /// tax amounts based on the new value of the flag back to system-calculated tax. 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeManualTaxLnMscCalculation(ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            ttAPInvLnMscTax = (from ttAPInvLnMscTax_Row in ds.APInvLnMscTax
                               where StringExtensions.Lookup(modList, ttAPInvLnMscTax_Row.RowMod) != -1
                               select ttAPInvLnMscTax_Row).FirstOrDefault();
            if (ttAPInvLnMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvLnMscTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, true));
            if (!invInPrice)
            {
                chgRateCodeLnMscCore();
            }



        }
        /// <summary>
        /// Method to call when changing the miscellanous amount on a miscellaneous charge.  This method
        /// can be called for both the APInvMsc table and APIHAPInvMsc table.  
        /// Updates the respective miscellanous charge table with default values based on the new amount. 
        /// </summary>
        /// <param name="ProposedMiscAmt">The proposed miscellanous amount</param>
        /// <param name="TableName">The table the charge is for.  Values are "APInvMsc" or "APIHAPInvMsc"</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeMiscAmt(decimal ProposedMiscAmt, string TableName, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            if (StringExtensions.Compare(TableName, "APInvMsc") == 0)
            {


                ttAPInvMsc = (from ttAPInvMsc_Row in ds.APInvMsc
                              where StringExtensions.Lookup(modList, ttAPInvMsc_Row.RowMod) != -1
                              select ttAPInvMsc_Row).FirstOrDefault();
                if (ttAPInvMsc == null)
                {
                    throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvMsc");
                }
                if (ttAPInvMsc.CurrencySwitch)
                {
                    ttAPInvMsc.ScrMiscAmt = ProposedMiscAmt;
                    var outScrMiscAmt3 = ttAPInvMsc.ScrMiscAmt;
                    var outScrDocMiscAmt = ttAPInvMsc.ScrDocMiscAmt;
                    var outRpt1ScrMiscAmt3 = ttAPInvMsc.Rpt1ScrMiscAmt;
                    var outRpt2ScrMiscAmt3 = ttAPInvMsc.Rpt2ScrMiscAmt;
                    var outRpt3ScrMiscAmt3 = ttAPInvMsc.Rpt3ScrMiscAmt;
                    CalcDocAmt(ref outScrMiscAmt3, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, ttAPInvMsc, "ScrDocMiscAmt", "ScrMiscAmt", out outScrDocMiscAmt, out outRpt1ScrMiscAmt3, out outRpt2ScrMiscAmt3, out outRpt3ScrMiscAmt3);
                    ttAPInvMsc.ScrMiscAmt = outScrMiscAmt3;
                    ttAPInvMsc.ScrDocMiscAmt = outScrDocMiscAmt;
                    ttAPInvMsc.Rpt1ScrMiscAmt = outRpt1ScrMiscAmt3;
                    ttAPInvMsc.Rpt2ScrMiscAmt = outRpt2ScrMiscAmt3;
                    ttAPInvMsc.Rpt3ScrMiscAmt = outRpt3ScrMiscAmt3;
                }
                else
                {
                    ttAPInvMsc.ScrDocMiscAmt = ProposedMiscAmt;
                    var outScrMiscAmt4 = ttAPInvMsc.ScrMiscAmt;
                    var outRpt1ScrMiscAmt4 = ttAPInvMsc.Rpt1ScrMiscAmt;
                    var outRpt2ScrMiscAmt4 = ttAPInvMsc.Rpt2ScrMiscAmt;
                    var outRpt3ScrMiscAmt4 = ttAPInvMsc.Rpt3ScrMiscAmt;
                    CalcBaseAmt(ttAPInvMsc.ScrDocMiscAmt, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, ttAPInvMsc, "ScrMiscAmt", out outScrMiscAmt4, out outRpt1ScrMiscAmt4, out outRpt2ScrMiscAmt4, out outRpt3ScrMiscAmt4);
                    ttAPInvMsc.ScrMiscAmt = outScrMiscAmt4;
                    ttAPInvMsc.Rpt1ScrMiscAmt = outRpt1ScrMiscAmt4;
                    ttAPInvMsc.Rpt2ScrMiscAmt = outRpt2ScrMiscAmt4;
                    ttAPInvMsc.Rpt3ScrMiscAmt = outRpt3ScrMiscAmt4;
                }

                if (ttAPInvMsc.InPrice)
                {
                    if (ttAPInvMsc.DebitMemo == false)
                    {
                        ttAPInvMsc.InMiscAmt = ttAPInvMsc.ScrMiscAmt;
                        ttAPInvMsc.DocInMiscAmt = ttAPInvMsc.ScrDocMiscAmt;
                        ttAPInvMsc.Rpt1InMiscAmt = ttAPInvMsc.Rpt1ScrMiscAmt;
                        ttAPInvMsc.Rpt2InMiscAmt = ttAPInvMsc.Rpt2ScrMiscAmt;
                        ttAPInvMsc.Rpt3InMiscAmt = ttAPInvMsc.Rpt3ScrMiscAmt;
                    }
                    else
                    {
                        ttAPInvMsc.InMiscAmt = -ttAPInvMsc.ScrMiscAmt;
                        ttAPInvMsc.DocInMiscAmt = -ttAPInvMsc.ScrDocMiscAmt;
                        ttAPInvMsc.Rpt1InMiscAmt = -ttAPInvMsc.Rpt1ScrMiscAmt;
                        ttAPInvMsc.Rpt2InMiscAmt = -ttAPInvMsc.Rpt2ScrMiscAmt;
                        ttAPInvMsc.Rpt3InMiscAmt = -ttAPInvMsc.Rpt3ScrMiscAmt;
                    }
                }
            }
            else
            {


                ttAPIHAPInvMsc = (from ttAPIHAPInvMsc_Row in ds.APIHAPInvMsc
                                  where StringExtensions.Lookup(modList, ttAPIHAPInvMsc_Row.RowMod) != -1
                                  select ttAPIHAPInvMsc_Row).FirstOrDefault();
                if (ttAPIHAPInvMsc == null)
                {
                    throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvMsc");
                }
                if (ttAPIHAPInvMsc.CurrencySwitch)
                {
                    ttAPIHAPInvMsc.ScrMiscAmt = ProposedMiscAmt;
                    var outScrMiscAmt5 = ttAPIHAPInvMsc.ScrMiscAmt;
                    var outScrDocMiscAmt2 = ttAPIHAPInvMsc.ScrDocMiscAmt;
                    var outRpt1ScrMiscAmt5 = ttAPIHAPInvMsc.Rpt1ScrMiscAmt;
                    var outRpt2ScrMiscAmt5 = ttAPIHAPInvMsc.Rpt2ScrMiscAmt;
                    var outRpt3ScrMiscAmt5 = ttAPIHAPInvMsc.Rpt3ScrMiscAmt;
                    CalcDocAmt(ref outScrMiscAmt5, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, ttAPIHAPInvMsc, "ScrDocMiscAmt", "ScrMiscAmt", out outScrDocMiscAmt2, out outRpt1ScrMiscAmt5, out outRpt2ScrMiscAmt5, out outRpt3ScrMiscAmt5);
                    ttAPIHAPInvMsc.ScrMiscAmt = outScrMiscAmt5;
                    ttAPIHAPInvMsc.ScrDocMiscAmt = outScrDocMiscAmt2;
                    ttAPIHAPInvMsc.Rpt1ScrMiscAmt = outRpt1ScrMiscAmt5;
                    ttAPIHAPInvMsc.Rpt2ScrMiscAmt = outRpt2ScrMiscAmt5;
                    ttAPIHAPInvMsc.Rpt3ScrMiscAmt = outRpt3ScrMiscAmt5;
                }
                else
                {
                    ttAPIHAPInvMsc.ScrDocMiscAmt = ProposedMiscAmt;
                    var outScrMiscAmt6 = ttAPIHAPInvMsc.ScrMiscAmt;
                    var outRpt1ScrMiscAmt6 = ttAPIHAPInvMsc.Rpt1ScrMiscAmt;
                    var outRpt2ScrMiscAmt6 = ttAPIHAPInvMsc.Rpt2ScrMiscAmt;
                    var outRpt3ScrMiscAmt6 = ttAPIHAPInvMsc.Rpt3ScrMiscAmt;
                    CalcBaseAmt(ttAPIHAPInvMsc.ScrDocMiscAmt, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, ttAPIHAPInvMsc, "ScrMiscAmt", out outScrMiscAmt6, out outRpt1ScrMiscAmt6, out outRpt2ScrMiscAmt6, out outRpt3ScrMiscAmt6);
                    ttAPIHAPInvMsc.ScrMiscAmt = outScrMiscAmt6;
                    ttAPIHAPInvMsc.Rpt1ScrMiscAmt = outRpt1ScrMiscAmt6;
                    ttAPIHAPInvMsc.Rpt2ScrMiscAmt = outRpt2ScrMiscAmt6;
                    ttAPIHAPInvMsc.Rpt3ScrMiscAmt = outRpt3ScrMiscAmt6;
                }

                if (ttAPIHAPInvMsc.InPrice == true)
                {
                    if (ttAPIHAPInvMsc.DebitMemo == false)
                    {
                        ttAPIHAPInvMsc.InMiscAmt = ttAPIHAPInvMsc.ScrMiscAmt;
                        ttAPIHAPInvMsc.DocInMiscAmt = ttAPIHAPInvMsc.ScrDocMiscAmt;
                        ttAPIHAPInvMsc.Rpt1InMiscAmt = ttAPIHAPInvMsc.Rpt1ScrMiscAmt;
                        ttAPIHAPInvMsc.Rpt2InMiscAmt = ttAPIHAPInvMsc.Rpt2ScrMiscAmt;
                        ttAPIHAPInvMsc.Rpt3InMiscAmt = ttAPIHAPInvMsc.Rpt3ScrMiscAmt;
                    }
                    else
                    {
                        ttAPIHAPInvMsc.InMiscAmt = -ttAPIHAPInvMsc.ScrMiscAmt;
                        ttAPIHAPInvMsc.DocInMiscAmt = -ttAPIHAPInvMsc.ScrDocMiscAmt;
                        ttAPIHAPInvMsc.Rpt1InMiscAmt = -ttAPIHAPInvMsc.Rpt1ScrMiscAmt;
                        ttAPIHAPInvMsc.Rpt2InMiscAmt = -ttAPIHAPInvMsc.Rpt2ScrMiscAmt;
                        ttAPIHAPInvMsc.Rpt3InMiscAmt = -ttAPIHAPInvMsc.Rpt3ScrMiscAmt;
                    }
                }
            }
        }

        /// <summary>
        /// Method to call when changing the miscellanous code on a miscellaneous charge.  This method
        /// can be called for both the APInvMsc table and APIHAPInvMsc table.  Validates the code and
        /// updates the respective miscellanous charge table with default values based on the new code. 
        /// </summary>
        /// <param name="ProposedMiscCode">The proposed miscellanous code</param>
        /// <param name="TableName">The table the charge is for.  Values are "APInvMsc" or "APIHAPInvMsc"</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeMiscCode(string ProposedMiscCode, string TableName, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            string errorMsg = string.Empty;


            PurMisc = FindFirstPurMisc(Session.CompanyID, ProposedMiscCode);
            if (PurMisc == null)
            {
                throw new BLException(Strings.InvalidMiscellaneousCode, TableName, "MiscCode");
            }
            /* if TableName = "APInvMsc":U */
            if (StringExtensions.Compare(TableName, "APInvMsc") == 0)
            {


                ttAPInvMsc = (from ttAPInvMsc_Row in ds.APInvMsc
                              where StringExtensions.Lookup(modList, ttAPInvMsc_Row.RowMod) != -1
                              select ttAPInvMsc_Row).FirstOrDefault();
                if (ttAPInvMsc == null)
                {
                    throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvMsc");
                }
                /* SCR #55657 - Do not allow to change misc charge code if already linked */
                if (ttAPInvMsc.ContainerID != 0 || !String.IsNullOrEmpty(ttAPInvMsc.PackSlip))
                {
                    throw new BLException(Strings.APInvoiceMisceChargeIsAlreadyLinkedToAContaShipm, "APInvMsc", "MiscCode");
                }
                ttAPInvMsc.MiscCode = ProposedMiscCode;
                ttAPInvMsc.Description = PurMisc.Description;
                ttAPInvMsc.TaxCatID = PurMisc.TaxCatID;
                ttAPInvMsc.LCDisburseMethod = PurMisc.LCDisburseMethod;
                /* SCR #55602 - LCFlag will now always be populated */
                ttAPInvMsc.LCFlag = PurMisc.LCFlag;
                var outType = ttAPInvMsc.Type;
                var outPercentage = ttAPInvMsc.Percentage;
                var outScrDocMiscAmt3 = ttAPInvMsc.ScrDocMiscAmt;
                var outScrMiscAmt7 = ttAPInvMsc.ScrMiscAmt;
                CalcMiscAmtByMiscCode(ttAPInvMsc.MiscCode, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, out outType, out outPercentage, out outScrDocMiscAmt3, out outScrMiscAmt7, out errorMsg);
                ttAPInvMsc.Type = outType;
                ttAPInvMsc.Percentage = outPercentage;
                ttAPInvMsc.ScrDocMiscAmt = outScrDocMiscAmt3;
                ttAPInvMsc.ScrMiscAmt = outScrMiscAmt7;
                if (!String.IsNullOrEmpty(errorMsg))
                {
                    throw new BLException(errorMsg, "APInvMsc");
                }
                if (StringExtensions.Compare(ttAPInvMsc.Type, "A") == 0)
                {
                    if (ttAPInvMsc.ScrMiscAmt != 0)
                    {
                        var outScrMiscAmt8 = ttAPInvMsc.ScrMiscAmt;
                        var outScrDocMiscAmt4 = ttAPInvMsc.ScrDocMiscAmt;
                        var outRpt1ScrMiscAmt7 = ttAPInvMsc.Rpt1ScrMiscAmt;
                        var outRpt2ScrMiscAmt7 = ttAPInvMsc.Rpt2ScrMiscAmt;
                        var outRpt3ScrMiscAmt7 = ttAPInvMsc.Rpt3ScrMiscAmt;
                        CalcDocAmt(ref outScrMiscAmt8, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, ttAPInvMsc, "ScrDocMiscAmt", "ScrMiscAmt", out outScrDocMiscAmt4, out outRpt1ScrMiscAmt7, out outRpt2ScrMiscAmt7, out outRpt3ScrMiscAmt7);
                        ttAPInvMsc.ScrMiscAmt = outScrMiscAmt8;
                        ttAPInvMsc.ScrDocMiscAmt = outScrDocMiscAmt4;
                        ttAPInvMsc.Rpt1ScrMiscAmt = outRpt1ScrMiscAmt7;
                        ttAPInvMsc.Rpt2ScrMiscAmt = outRpt2ScrMiscAmt7;
                        ttAPInvMsc.Rpt3ScrMiscAmt = outRpt3ScrMiscAmt7;
                    }
                    else
                    {
                        var outScrMiscAmt9 = ttAPInvMsc.ScrMiscAmt;
                        var outRpt1ScrMiscAmt8 = ttAPInvMsc.Rpt1ScrMiscAmt;
                        var outRpt2ScrMiscAmt8 = ttAPInvMsc.Rpt2ScrMiscAmt;
                        var outRpt3ScrMiscAmt8 = ttAPInvMsc.Rpt3ScrMiscAmt;
                        CalcBaseAmt(ttAPInvMsc.ScrDocMiscAmt, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum, ttAPInvMsc, "ScrMiscAmt", out outScrMiscAmt9, out outRpt1ScrMiscAmt8, out outRpt2ScrMiscAmt8, out outRpt3ScrMiscAmt8);
                        ttAPInvMsc.ScrMiscAmt = outScrMiscAmt9;
                        ttAPInvMsc.Rpt1ScrMiscAmt = outRpt1ScrMiscAmt8;
                        ttAPInvMsc.Rpt2ScrMiscAmt = outRpt2ScrMiscAmt8;
                        ttAPInvMsc.Rpt3ScrMiscAmt = outRpt3ScrMiscAmt8;
                    }
                }
                else
                {
                    CalcMiscAmtByPercent();
                }
                if (ttAPInvMsc.InPrice == true)
                {
                    ttAPInvMsc.InMiscAmt = ttAPInvMsc.ScrMiscAmt;
                    ttAPInvMsc.DocInMiscAmt = ttAPInvMsc.ScrDocMiscAmt;
                    ttAPInvMsc.Rpt1InMiscAmt = ttAPInvMsc.Rpt1ScrMiscAmt;
                    ttAPInvMsc.Rpt2InMiscAmt = ttAPInvMsc.Rpt2ScrMiscAmt;
                    ttAPInvMsc.Rpt3InMiscAmt = ttAPInvMsc.Rpt3ScrMiscAmt;
                }
            }
            else
            {


                ttAPIHAPInvMsc = (from ttAPIHAPInvMsc_Row in ds.APIHAPInvMsc
                                  where StringExtensions.Lookup(modList, ttAPIHAPInvMsc_Row.RowMod) != -1
                                  select ttAPIHAPInvMsc_Row).FirstOrDefault();
                if (ttAPIHAPInvMsc == null)
                {
                    throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APIHAPInvMsc");
                }
                /* SCR #55657 - Do not allow to change misc charge code if already linked */
                if (ttAPIHAPInvMsc.ContainerID != 0 || !String.IsNullOrEmpty(ttAPIHAPInvMsc.PackSlip))
                {
                    throw new BLException(Strings.APInvoiceMisceChargeIsAlreadyLinkedToAContaShipm, "APIHAPInvMsc", "MiscCode");
                }
                ttAPIHAPInvMsc.MiscCode = ProposedMiscCode;
                ttAPIHAPInvMsc.Description = PurMisc.Description;
                ttAPIHAPInvMsc.TaxCatID = PurMisc.TaxCatID;
                ttAPIHAPInvMsc.LCDisburseMethod = PurMisc.LCDisburseMethod;
                /* SCR #55602 - LCFlag will now always be populated */
                ttAPIHAPInvMsc.LCFlag = PurMisc.LCFlag;
                var outType2 = ttAPIHAPInvMsc.Type;
                var outPercentage2 = ttAPIHAPInvMsc.Percentage;
                var outScrDocMiscAmt5 = ttAPIHAPInvMsc.ScrDocMiscAmt;
                var outScrMiscAmt10 = ttAPIHAPInvMsc.ScrMiscAmt;
                CalcMiscAmtByMiscCode(ttAPIHAPInvMsc.MiscCode, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, out outType2, out outPercentage2, out outScrDocMiscAmt5, out outScrMiscAmt10, out errorMsg);
                if (!String.IsNullOrEmpty(errorMsg))
                {
                    throw new BLException(errorMsg, "APIHAPInvMsc");
                }
                if (string.IsNullOrEmpty(ttAPIHAPInvMsc.PlasticPackTaxReportID))
                {
                    ttAPIHAPInvMsc.Type = outType2;
                    ttAPIHAPInvMsc.Percentage = outPercentage2;
                    ttAPIHAPInvMsc.ScrDocMiscAmt = outScrDocMiscAmt5;
                    ttAPIHAPInvMsc.ScrMiscAmt = outScrMiscAmt10;
                }
                if (StringExtensions.Compare(ttAPIHAPInvMsc.Type, "A") == 0)
                {
                    if (ttAPIHAPInvMsc.ScrMiscAmt != 0)
                    {
                        var outScrMiscAmt11 = ttAPIHAPInvMsc.ScrMiscAmt;
                        var outScrDocMiscAmt6 = ttAPIHAPInvMsc.ScrDocMiscAmt;
                        var outRpt1ScrMiscAmt9 = ttAPIHAPInvMsc.Rpt1ScrMiscAmt;
                        var outRpt2ScrMiscAmt9 = ttAPIHAPInvMsc.Rpt2ScrMiscAmt;
                        var outRpt3ScrMiscAmt9 = ttAPIHAPInvMsc.Rpt3ScrMiscAmt;
                        CalcDocAmt(ref outScrMiscAmt11, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, ttAPIHAPInvMsc, "ScrDocMiscAmt", "ScrMiscAmt", out outScrDocMiscAmt6, out outRpt1ScrMiscAmt9, out outRpt2ScrMiscAmt9, out outRpt3ScrMiscAmt9);
                        ttAPIHAPInvMsc.ScrMiscAmt = outScrMiscAmt11;
                        ttAPIHAPInvMsc.ScrDocMiscAmt = outScrDocMiscAmt6;
                        ttAPIHAPInvMsc.Rpt1ScrMiscAmt = outRpt1ScrMiscAmt9;
                        ttAPIHAPInvMsc.Rpt2ScrMiscAmt = outRpt2ScrMiscAmt9;
                        ttAPIHAPInvMsc.Rpt3ScrMiscAmt = outRpt3ScrMiscAmt9;
                    }
                    else
                    {
                        var outScrMiscAmt12 = ttAPIHAPInvMsc.ScrMiscAmt;
                        var outRpt1ScrMiscAmt10 = ttAPIHAPInvMsc.Rpt1ScrMiscAmt;
                        var outRpt2ScrMiscAmt10 = ttAPIHAPInvMsc.Rpt2ScrMiscAmt;
                        var outRpt3ScrMiscAmt10 = ttAPIHAPInvMsc.Rpt3ScrMiscAmt;
                        CalcBaseAmt(ttAPIHAPInvMsc.ScrDocMiscAmt, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, ttAPIHAPInvMsc, "ScrMiscAmt", out outScrMiscAmt12, out outRpt1ScrMiscAmt10, out outRpt2ScrMiscAmt10, out outRpt3ScrMiscAmt10);
                        ttAPIHAPInvMsc.ScrMiscAmt = outScrMiscAmt12;
                        ttAPIHAPInvMsc.Rpt1ScrMiscAmt = outRpt1ScrMiscAmt10;
                        ttAPIHAPInvMsc.Rpt2ScrMiscAmt = outRpt2ScrMiscAmt10;
                        ttAPIHAPInvMsc.Rpt3ScrMiscAmt = outRpt3ScrMiscAmt10;
                    }
                }
                else
                {
                    CalcMiscAmtByPercent();
                }
                if (ttAPIHAPInvMsc.InPrice == true)
                {
                    ttAPIHAPInvMsc.InMiscAmt = ttAPIHAPInvMsc.ScrMiscAmt;
                    ttAPIHAPInvMsc.DocInMiscAmt = ttAPIHAPInvMsc.ScrDocMiscAmt;
                    ttAPIHAPInvMsc.Rpt1InMiscAmt = ttAPIHAPInvMsc.Rpt1ScrMiscAmt;
                    ttAPIHAPInvMsc.Rpt2InMiscAmt = ttAPIHAPInvMsc.Rpt2ScrMiscAmt;
                    ttAPIHAPInvMsc.Rpt3InMiscAmt = ttAPIHAPInvMsc.Rpt3ScrMiscAmt;
                }
            }
        }

        /// <summary>
        /// Method to call when changing the LCFLag on a miscellaneous charge.  This method
        /// can be called for both the APInvMsc table and APIHAPInvMsc table.  Validates the 
        /// code if can be flagged as Landed Cost Charge. 
        /// </summary>
        /// <param name="ipLCFlag">The proposed Landed Cost Flag</param>
        /// <param name="TableName">The table the charge is for.  Values are "APInvMsc" or "APIHAPInvMsc"</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeMiscLCFlag(bool ipLCFlag, string TableName, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            if (StringExtensions.Compare(TableName, "APInvMsc") == 0)
            {


                ttAPInvMsc = (from ttAPInvMsc_Row in ds.APInvMsc
                              where StringExtensions.Lookup(modList, ttAPInvMsc_Row.RowMod) != -1
                              select ttAPInvMsc_Row).FirstOrDefault();
                if (ttAPInvMsc == null)
                {
                    throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvMsc", "LCFlag");
                }        /* do not allow to change to false if misc charge is already linked */
                /* ipLCFlag = false */
                if (ipLCFlag == false)
                {
                    if (ttAPInvMsc.ContainerID != 0 || !String.IsNullOrEmpty(ttAPInvMsc.PackSlip))
                    {
                        throw new BLException(Strings.APInvoiceMisceChargeIsAlreadyLinkedToAContaShipm, "APInvMsc", "LCFlag");
                    }
                }
                else
                {


                    var PurMiscQuery7 = DBExpressionCompiler.Compile(PurMiscExpression7);
                    if (!(PurMiscQuery7(Db, ttAPInvMsc.Company, ttAPInvMsc.MiscCode, true)))
                    {
                        throw new BLException(Strings.ThisMisceChargeIsNotAValidLandedCostCharge, "APInvMsc", "LCFlag");
                    }
                } /* ipLCFlag = true */
                ttAPInvMsc.LCFlag = ipLCFlag;
                return;
            }
            else
            {


                ttAPIHAPInvMsc = (from ttAPIHAPInvMsc_Row in ds.APIHAPInvMsc
                                  where StringExtensions.Lookup(modList, ttAPIHAPInvMsc_Row.RowMod) != -1
                                  select ttAPIHAPInvMsc_Row).FirstOrDefault();
                if (ttAPIHAPInvMsc == null)
                {
                    throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APIHAPInvMsc", "LCFlag");
                }        /* do not allow to change to false if misc charge is already linked */
                /* ipLCFlag = false */
                if (ipLCFlag == false)
                {
                    if (ttAPIHAPInvMsc.ContainerID != 0 || !String.IsNullOrEmpty(ttAPIHAPInvMsc.PackSlip))
                    {
                        throw new BLException(Strings.APInvoiceMisceChargeIsAlreadyLinkedToAContaShipm, "APIHAPInvMsc", "LCFlag");
                    }
                }
                else
                {


                    var PurMiscQuery8 = DBExpressionCompiler.Compile(PurMiscExpression8);
                    if (!(PurMiscQuery8(Db, ttAPIHAPInvMsc.Company, ttAPIHAPInvMsc.MiscCode, true)))
                    {
                        throw new BLException(Strings.ThisMisceChargeIsNotAValidLandedCostCharge, "APIHAPInvMsc", "LCFlag");
                    }
                } /* ipLCFlag = true */
                ttAPIHAPInvMsc.LCFlag = ipLCFlag;
                return;
            }
        }

        /// <summary>
        /// Method to change 1099 Code on AP Invoice Line, displays the correct description. 
        /// </summary>
        /// <param name="formTypeID">The proposed 1099 Code</param>
        /// <param name="proposedCode1099ID">The proposed 1099 Code</param>
        /// <param name="ds">APInvoice data set</param>
        public void Change1099Code(string formTypeID, string proposedCode1099ID, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            if (isUSLocalization)
            {
                using (Internal.CSF.USA usa = new Internal.CSF.USA(this.Db))
                {
                    usa.ChangeAPInvDtl1099Code(formTypeID, proposedCode1099ID, CurrentFullTableset);
                }
            }
        }

        /// <summary>
        /// Method to change 1099 Code on AP Invoice Header Misc Charge, displays the correct description. 
        /// </summary>
        /// <param name="formTypeID">The proposed 1099 Code</param>
        /// <param name="proposedCode1099ID">The proposed 1099 Code</param>
        /// <param name="ds">APInvoice data set</param>
        public void ChangeAPIHAPInvMsc1099Code(string formTypeID, string proposedCode1099ID, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            if (isUSLocalization)
            {
                using (Internal.CSF.USA usa = new Internal.CSF.USA(this.Db))
                {
                    usa.ChangeAPIHAPInvMsc1099Code(formTypeID, proposedCode1099ID, CurrentFullTableset);
                }
            }
        }

        /// <summary>
        /// Method to change 1099 Form Type on AP Invoice Line, displays the correct description.
        /// </summary>
        /// <param name="formType">1099 Form Type</param>
        /// <param name="ds">The Vendor tableset</param>
        public void ChangeFormType(string formType, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            if (isUSLocalization)
            {
                using (Internal.CSF.USA usa = new Internal.CSF.USA(this.Db))
                {
                    usa.ChangeAPInvDtlFormType(formType, CurrentFullTableset);
                }
            }
        }

        /// <summary>
        /// Method to change 1099 Form Type on AP Invoice Header Misc Charge, displays the correct description.
        /// </summary>
        /// <param name="formType">1099 Form Type</param>
        /// <param name="ds">The Vendor tableset</param>
        public void ChangeAPIHAPInvMscFormType(string formType, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            if (isUSLocalization)
            {
                using (Internal.CSF.USA usa = new Internal.CSF.USA(this.Db))
                {
                    usa.ChangeAPIHAPInvMscFormType(formType, CurrentFullTableset);
                }
            }
        }

        /// <summary>
        /// This method recalculates Misc Charges Amounts when Percentage was changed.
        /// </summary>
        /// <param name="proposedPrcnt">new Percentage value</param>
        /// <param name="tableName">name of table being passed in</param>
        /// <param name="ds">Returns the updated dataset </param>
        public void ChangeMiscPercent(decimal proposedPrcnt, string tableName, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            int vendorNum = 0;
            string invoiceNum = string.Empty;
            string miscType = string.Empty;

            if (StringExtensions.Compare(tableName, "APInvMsc") == 0)
            {


                ttAPInvMsc = (from ttAPInvMsc_Row in ds.APInvMsc
                              where StringExtensions.Compare(ttAPInvMsc_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                              select ttAPInvMsc_Row).FirstOrDefault();
                if (ttAPInvMsc != null)
                {
                    vendorNum = ttAPInvMsc.VendorNum;
                    invoiceNum = ttAPInvMsc.InvoiceNum;
                }
            }
            else
            {


                ttAPIHAPInvMsc = (from ttAPIHAPInvMsc_Row in ds.APIHAPInvMsc
                                  where StringExtensions.Compare(ttAPIHAPInvMsc_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                                  select ttAPIHAPInvMsc_Row).FirstOrDefault();
                if (ttAPIHAPInvMsc != null)
                {
                    vendorNum = ttAPIHAPInvMsc.VendorNum;
                    invoiceNum = ttAPIHAPInvMsc.InvoiceNum;
                }
            }
            if (ttAPInvMsc == null && ttAPIHAPInvMsc == null)
            {
                string errmsg = string.Empty;
                errmsg = tableName + Strings.RecordNotAvailable;
                throw new BLException(errmsg, tableName);
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, vendorNum, invoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.APInvHedRecordNotFound, "APInvHed");
            }
            if (ttAPInvMsc != null)
            {
                ttAPInvMsc.Percentage = proposedPrcnt;
            }
            else if (ttAPIHAPInvMsc != null)
            {
                ttAPIHAPInvMsc.Percentage = proposedPrcnt;
            }

            CalcMiscAmtByPercent();
            if (APInvHed != null)
            {
                if (APInvHed.InPrice)
                {
                    if (ttAPInvMsc != null)
                    {
                        ttAPInvMsc.InMiscAmt = ttAPInvMsc.ScrMiscAmt;
                        ttAPInvMsc.DocInMiscAmt = ttAPInvMsc.ScrDocMiscAmt;
                        ttAPInvMsc.Rpt1InMiscAmt = ttAPInvMsc.Rpt1ScrMiscAmt;
                        ttAPInvMsc.Rpt2InMiscAmt = ttAPInvMsc.Rpt2ScrMiscAmt;
                        ttAPInvMsc.Rpt3InMiscAmt = ttAPInvMsc.Rpt3ScrMiscAmt;
                    }
                    else
                    {
                        if (ttAPIHAPInvMsc != null)
                        {
                            ttAPIHAPInvMsc.InMiscAmt = ttAPIHAPInvMsc.ScrMiscAmt;
                            ttAPIHAPInvMsc.DocInMiscAmt = ttAPIHAPInvMsc.ScrDocMiscAmt;
                            ttAPIHAPInvMsc.Rpt1InMiscAmt = ttAPIHAPInvMsc.Rpt1ScrMiscAmt;
                            ttAPIHAPInvMsc.Rpt2InMiscAmt = ttAPIHAPInvMsc.Rpt2ScrMiscAmt;
                            ttAPIHAPInvMsc.Rpt3InMiscAmt = ttAPIHAPInvMsc.Rpt3ScrMiscAmt;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Method to call when changing the material sequence on the job miscellaneous charge.  
        /// Validates the material sequence and updates APInvJob with values from the new material sequence. 
        /// </summary>
        /// <param name="ProposedMtlSeq">The proposed material sequence</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeMtlSeq(int ProposedMtlSeq, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvJob = (from ttAPInvJob_Row in ds.APInvJob
                          where StringExtensions.Lookup(modList, ttAPInvJob_Row.RowMod) != -1
                          select ttAPInvJob_Row).FirstOrDefault();
            if (ttAPInvJob == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvJob");
            }


            if (ProposedMtlSeq != 0)
            {
                var JobMtlQuery6 = DBExpressionCompiler.Compile(JobMtlExpression6);
                if (!((JobMtlQuery6(Db, ttAPInvJob.Company, ttAPInvJob.JobNum, ttAPInvJob.AssemblySeq, ProposedMtlSeq, true))))
                {
                    throw new BLException(Strings.MaterIsNotOnFileOrNotAJobMisceCharge, "APInvJob", "MtlSeq");
                }
            }
            ttAPInvJob.MtlSeq = ProposedMtlSeq;

            if (ProposedMtlSeq != 0)
            {
                AssignAPInvJobJobMtlFields();
            }
        }

        /// <summary>
        /// This method resets the External Company ID, regular and Multi-Company G/L Accounts 
        /// and the Reference Codes when the Multi-Company flag changes.
        /// </summary>
        /// <param name="ProposedMulti">The proposed Multi-Company flag</param>
        /// <param name="ds">The AP Invoice data set</param>
        public void ChangeMultiCompany(bool ProposedMulti, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvExp = (from ttAPInvExp_Row in ds.APInvExp
                          where StringExtensions.Compare(ttAPInvExp_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                          select ttAPInvExp_Row).FirstOrDefault();
            if (ttAPInvExp == null)
            {
                throw new BLException(Strings.APInvExpHasNotChanged, "APInvExp");
            }/* if not available ttAPInvExp */
            /* check if valid to be Multi-company */
            if (ProposedMulti == true)
            {
                #region Check Mult-Company

                if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiSiteGLJournals) == false)
                {
                    throw new BLException(Strings.MultiCompanyGeneralJournalLicenseIsRequi, "APInvExp", "MultiCompany");
                }



                var ExtCompanyQuery3 = DBExpressionCompiler.Compile(ExtCompanyExpression3);
                if (!(ExtCompanyQuery3(Db, ttAPInvExp.Company, "MULTI", true)))
                {
                    throw new BLException(Strings.NoExterCompanyIsSetUpToSendMultiCompanyGeneral, "APInvExp");
                }



                var GlbGLSystQuery2 = DBExpressionCompiler.Compile(GlbGLSystExpression2);
                if (!(GlbGLSystQuery2(Db, ttAPInvExp.Company)))
                {
                    throw new BLException(Strings.NoneOfTheExterCompaHasInitiSentMultiCompanyGLAccou, "APInvExp");
                }
                #endregion
                ttAPInvExp.MultiCompany = true;
            } /* ProposedMulti = yes */
            else
            {
                #region Unchecked Multi-Company
                ttAPInvExp.MultiCompany = false;
                ttAPInvExp.ExpGlbDispGLAcct = string.Empty;
                ttAPInvExp.ExtGLAccountDesc = string.Empty;
                ttAPInvExp.ExtCompanyID = string.Empty;
                ttAPInvExp.ExtGLAccount = string.Empty;

                // SCR 127350 Revert GL information back to saved
                RefreshttAPInvExpTGLC(true);
                #endregion

            }
        }



        /// <summary>
        /// Method to call when changing the override reverse charge.  If override flag
        /// is unchecked then default the original value of RevChargeMethod back.
        /// </summary>
        /// <param name="ProposedOverrideRC">The proposed Override Reverse Charge</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeOverrideRevCharge(bool ProposedOverrideRC, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceLineIsNotAvailable, "APInvDtl");
            }
            ttAPInvDtl.OverrideReverseCharge = ProposedOverrideRC;
        }

        /// <summary>
        /// Method to call when changing the part number on a detail record.  Updates APInvDtl
        /// with defaults from the part. 
        /// </summary>
        /// <param name="ProposedPartNum">The proposed part number</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangePartNum(string ProposedPartNum, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceLineCriteNotAvail, "APInvDtl");
            }
            ttAPInvDtl.PartNum = ProposedPartNum;

            Part = Part.FindFirstByPrimaryKey(Db, Session.CompanyID, ProposedPartNum);
            if (Part == null)
            {
                ttAPInvDtl.TaxCatID = "";
                ttAPInvDtl.TaxCatIDDescription = "";
                return;
            }/* if not available Part */

            if (isGermanyLocalization)
            {
                ttAPInvDtl.DEInternationalSecuritiesID = Part.DEInternationalSecuritiesID;
                ttAPInvDtl.DEIsSecurityFinancialDerivative = Part.DEIsSecurityFinancialDerivative;
                ttAPInvDtl.DEIsServices = Part.DEIsServices;
                ttAPInvDtl.DEIsInvestment = Part.DEIsInvestment;
                ttAPInvDtl.DEPayStatCode = Part.DEPayStatCode;
                ttAPInvDtl.DEDenomination = Part.DEDenomination;
                ttAPInvDtl.DEPayStatCodeDescr = LibValidateUDCodes.checkUDCode("PmtStatCod", ttAPInvDtl.DEPayStatCode, false);
                ttAPInvDtl.DEDenominationDescr = LibValidateUDCodes.checkUDCode("PmtDenomin", ttAPInvDtl.DEDenomination, false);
            }

            ttAPInvDtl.TaxCatID = Part.TaxCatID;
            ttAPInvDtl.Description = Part.PartDescription;
            ttAPInvDtl.PUM = Part.PUM;
            if (String.IsNullOrEmpty(ttAPInvDtl.TaxCatID))
            {


                var TaxCatQuery2 = DBExpressionCompiler.Compile(TaxCatExpression2);
                TaxCat = TaxCatQuery2(Db, Session.CompanyID);
                if (TaxCat != null)
                {
                    ttAPInvDtl.TaxCatID = TaxCat.TaxCatID;
                    ttAPInvDtl.TaxCatIDDescription = TaxCat.Description;
                }
            }
            else
            {
                TaxCat = TaxCat.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.TaxCatID);
            }
            ttAPInvDtl.TaxCatIDDescription = ((TaxCat != null) ? TaxCat.Description : "");
            if (StringExtensions.Compare(ttAPInvDtl.LineType, "M") == 0 ||
            StringExtensions.Compare(ttAPInvDtl.LineType, "J") == 0)
            {

                //SCR 138796 - Change from using VendPart to PartXRefVend for lookup.

                var PartXRefVendQuery = DBExpressionCompiler.Compile(PartXRefVendExpression);
                PartXRefVend = PartXRefVendQuery(Db, Session.CompanyID, ttAPInvDtl.PartNum, ttAPInvDtl.VendorNum);
                if (PartXRefVend != null)
                {
                    ttAPInvDtl.VenPartNum = PartXRefVend.VendPartNum;
                }

            }
            /* clear/reset purchcode for new part */
            if (ttAPInvDtl.UsePurchaseCode == true)
            {
                ttAPInvDtl.PurchCode = "";
                ttAPInvDtl.GLPurchPurchDesc = "";

                PartClass = PartClass.FindFirstByPrimaryKey(Db, Part.Company, Part.ClassID);
                if (PartClass != null)
                {
                    ttAPInvDtl.PurchCode = PartClass.PurchCode;



                    GLPurch = FindFirstGLPurch(PartClass.Company, PartClass.PurchCode);
                    if (GLPurch != null)
                    {
                        ttAPInvDtl.GLPurchPurchDesc = GLPurch.PurchDesc;
                    }
                }
            }

            if (isIndiaLocalization)
            {
                INShared.INCodesResult inCodes = LibINShared.GetINCodesByHierarchy(INShared.ScopeType.Purchase, ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ttAPInvDtl.PartNum);
                ttAPInvDtl.CommodityCode = inCodes.CommodityCode;
                ttAPInvDtl.TaxCatID = inCodes.TaxCatID;
                if (!String.IsNullOrEmpty(ttAPInvDtl.CommodityCode))
                {
                    ICommCode commCode = ICommCode.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.CommodityCode);
                    ttAPInvDtl.CommodityCodeDescription = commCode != null ? commCode.Description : string.Empty;
                }
                else
                {
                    ttAPInvDtl.CommodityCodeDescription = string.Empty;
                }
            }
        }



        ///<summary>
        ///  Purpose:     
        ///  Parameters:  none
        ///  Notes:       
        /// <param name="proposedInvDtlValue">The proposed value</param>
        /// <param name="ds">The APInvoice data set</param>
        ///</summary>
        public void ChangePBDtlValue(decimal proposedInvDtlValue, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvPB = (from ttAPInvPB_Row in ds.APInvPB
                         where StringExtensions.Lookup(modList, ttAPInvPB_Row.RowMod) != -1
                         select ttAPInvPB_Row).FirstOrDefault();
            if (ttAPInvPB == null)
            {
                throw new BLException(Strings.ProjectBillingInforNotAvail, "ttAPInvPB");
            }
            if (ttAPInvPB.CurrencySwitch)
            {
                ttAPInvPB.ScrInvDtlValue = proposedInvDtlValue;
                var outScrInvDtlValue = ttAPInvPB.ScrInvDtlValue;
                var outScrDocInvDtlValue = ttAPInvPB.ScrDocInvDtlValue;
                var outRpt1ScrInvDtlValue = ttAPInvPB.Rpt1ScrInvDtlValue;
                var outRpt2ScrInvDtlValue = ttAPInvPB.Rpt2ScrInvDtlValue;
                var outRpt3ScrInvDtlValue = ttAPInvPB.Rpt3ScrInvDtlValue;
                CalcDocAmt(ref outScrInvDtlValue, ttAPInvPB.VendorNum, ttAPInvPB.InvoiceNum, ttAPInvPB, "ScrDocInvDtlValue", "ScrInvDtlValue", out outScrDocInvDtlValue, out outRpt1ScrInvDtlValue, out outRpt2ScrInvDtlValue, out outRpt3ScrInvDtlValue);
                ttAPInvPB.ScrInvDtlValue = outScrInvDtlValue;
                ttAPInvPB.ScrDocInvDtlValue = outScrDocInvDtlValue;
                ttAPInvPB.Rpt1ScrInvDtlValue = outRpt1ScrInvDtlValue;
                ttAPInvPB.Rpt2ScrInvDtlValue = outRpt2ScrInvDtlValue;
                ttAPInvPB.Rpt3ScrInvDtlValue = outRpt3ScrInvDtlValue;
            }
            else
            {
                ttAPInvPB.ScrDocInvDtlValue = proposedInvDtlValue;
                var outScrInvDtlValue2 = ttAPInvPB.ScrInvDtlValue;
                var outRpt1ScrInvDtlValue2 = ttAPInvPB.Rpt1ScrInvDtlValue;
                var outRpt2ScrInvDtlValue2 = ttAPInvPB.Rpt2ScrInvDtlValue;
                var outRpt3ScrInvDtlValue2 = ttAPInvPB.Rpt3ScrInvDtlValue;
                CalcBaseAmt(ttAPInvPB.ScrDocInvDtlValue, ttAPInvPB.VendorNum, ttAPInvPB.InvoiceNum, ttAPInvPB, "ScrInvDtlValue", out outScrInvDtlValue2, out outRpt1ScrInvDtlValue2, out outRpt2ScrInvDtlValue2, out outRpt3ScrInvDtlValue2);
                ttAPInvPB.ScrInvDtlValue = outScrInvDtlValue2;
                ttAPInvPB.Rpt1ScrInvDtlValue = outRpt1ScrInvDtlValue2;
                ttAPInvPB.Rpt2ScrInvDtlValue = outRpt2ScrInvDtlValue2;
                ttAPInvPB.Rpt3ScrInvDtlValue = outRpt3ScrInvDtlValue2;
            }
        }

        ///<summary>
        ///Purpose:     
        ///Parameters:  none
        ///Notes:       
        /// <param name="proposedMtlChrg">The proposed value</param>
        /// <param name="ds">The APInvoice data set</param>
        ///</summary>
        public void ChangePBMtlCharge(decimal proposedMtlChrg, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvPB = (from ttAPInvPB_Row in ds.APInvPB
                         where StringExtensions.Lookup(modList, ttAPInvPB_Row.RowMod) != -1
                         select ttAPInvPB_Row).FirstOrDefault();
            if (ttAPInvPB == null)
            {
                throw new BLException(Strings.ProjectBillingInforNotAvail, "ttAPInvPB");
            }
            if (ttAPInvPB.CurrencySwitch)
            {
                ttAPInvPB.ScrMtlChg = proposedMtlChrg;
                var outScrMtlChg = ttAPInvPB.ScrMtlChg;
                var outScrDocMtlChg = ttAPInvPB.ScrDocMtlChg;
                var outRpt1ScrMtlChg = ttAPInvPB.Rpt1ScrMtlChg;
                var outRpt2ScrMtlChg = ttAPInvPB.Rpt2ScrMtlChg;
                var outRpt3ScrMtlChg = ttAPInvPB.Rpt3ScrMtlChg;
                CalcDocAmt(ref outScrMtlChg, ttAPInvPB.VendorNum, ttAPInvPB.InvoiceNum, ttAPInvPB, "ScrDocMtlChg", "ScrMtlChg", out outScrDocMtlChg, out outRpt1ScrMtlChg, out outRpt2ScrMtlChg, out outRpt3ScrMtlChg);
                ttAPInvPB.ScrMtlChg = outScrMtlChg;
                ttAPInvPB.ScrDocMtlChg = outScrDocMtlChg;
                ttAPInvPB.Rpt1ScrMtlChg = outRpt1ScrMtlChg;
                ttAPInvPB.Rpt2ScrMtlChg = outRpt2ScrMtlChg;
                ttAPInvPB.Rpt3ScrMtlChg = outRpt3ScrMtlChg;
            }
            else
            {
                ttAPInvPB.ScrDocMtlChg = proposedMtlChrg;
                var outScrMtlChg2 = ttAPInvPB.ScrMtlChg;
                var outRpt1ScrMtlChg2 = ttAPInvPB.Rpt1ScrMtlChg;
                var outRpt2ScrMtlChg2 = ttAPInvPB.Rpt2ScrMtlChg;
                var outRpt3ScrMtlChg2 = ttAPInvPB.Rpt3ScrMtlChg;
                CalcBaseAmt(ttAPInvPB.ScrDocMtlChg, ttAPInvPB.VendorNum, ttAPInvPB.InvoiceNum, ttAPInvPB, "ScrMtlChg", out outScrMtlChg2, out outRpt1ScrMtlChg2, out outRpt2ScrMtlChg2, out outRpt3ScrMtlChg2);
                ttAPInvPB.ScrMtlChg = outScrMtlChg2;
                ttAPInvPB.Rpt1ScrMtlChg = outRpt1ScrMtlChg2;
                ttAPInvPB.Rpt2ScrMtlChg = outRpt2ScrMtlChg2;
                ttAPInvPB.Rpt3ScrMtlChg = outRpt3ScrMtlChg2;
            }
        }

        /// <summary>
        /// Method to call when changing the phase on a detail record.  Updates APInvJob
        /// with defaults from the part. 
        /// </summary>
        /// <param name="PropPhase">The proposed phase number</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangePhaseID(string PropPhase, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvJob = (from ttAPInvJob_Row in ds.APInvJob
                          where !String.IsNullOrEmpty(ttAPInvJob_Row.RowMod)
                          select ttAPInvJob_Row).FirstOrDefault();
            if (ttAPInvJob == null)
            {
                throw new BLException(Strings.RecordNotFound, "APInvJob", "RowMod");
            }

            ProjPhase = FindFirstProjPhase(Session.CompanyID, ttAPInvJob.ProjectID, PropPhase);
            if (ProjPhase == null)
            {
                throw new BLException(Strings.PhaseNotFound, "APInvJob", "PhaseID");
            }
            if (String.IsNullOrEmpty(ProjPhase.WBSJobNum))
            {
                throw new BLException(Strings.PhaseJobIsRequired, "ProjPhase", "WBSJobNum");
            }/* reset the field associated to the phase */
            ttAPInvJob.JobNum = ProjPhase.WBSJobNum;
            ttAPInvJob.PhaseID = PropPhase;
            ttAPInvJob.AddedJobMtlSeq = 0;
            ttAPInvJob.MtlSeq = 0;
            ttAPInvJob.MiscCode = "";
            AssignAPInvJobJobMtlFields();
        }

        /// <summary>
        /// Method to call when changing the Payment Method.
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangePMUID(ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            string foreignKey = string.Empty;



            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceIsNotAvailable, "ttAPInvHed");
            }    /* Sweden Finland Localization */
            if (isSEOrFILocalization)
            {


                var PayMethodQuery = DBExpressionCompiler.Compile(PayMethodExpression);
                PayMethod = PayMethodQuery(Db, Session.CompanyID, ttAPInvHed.PMUID);
                if (PayMethod != null)
                {
                    ttAPInvHed.SEPayCode = PayMethod.DefPayCode;
                }
            }
        }

        /// <summary>
        /// Method to call when changing the Payment Method.
        /// </summary>
        /// <param name="ipPaymentMethod">Payment Method ID</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangePMUIDMaster(int ipPaymentMethod, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceIsNotAvailable, "ttAPInvHed");
            }
            chkPMUIDCore(ipPaymentMethod);
            ttAPInvHed.PMUID = ipPaymentMethod;
            /* Sweden Finland Localization */
            if (isSEOrFILocalization)
            {


                var PayMethodQuery = DBExpressionCompiler.Compile(PayMethodExpression);
                PayMethod = PayMethodQuery(Db, Session.CompanyID, ttAPInvHed.PMUID);
                if (PayMethod != null)
                {
                    ttAPInvHed.SEPayCode = PayMethod.DefPayCode;
                }
            }
        }
        /// <summary>
        /// This Method will check if the invoice can be cancelled if is not central payment or Intercompany.
        /// </summary>  
        /// <param name="InvoiceNum">The proposed InvoiceNum</param>
        /// <param name="VendorNum">The proposed VendorNum</param>
        ///  <param name="OpError">out message</param>

        public void ValidateCreateCancellationInvoice(int VendorNum, string InvoiceNum, out string OpError)
        {
            Erp.Tables.APInvHed ttAPInvHed = null;
            OpError = string.Empty;

            ttAPInvHed = FindFirstAPInvHed(Session.CompanyID, VendorNum, InvoiceNum);

            if (ttAPInvHed != null)
            {
                if (ttAPInvHed.CPay || ttAPInvHed.CPayLinked)
                {
                    OpError = Strings.CannotCancelCCPayInvoices;
                }

                if (ttAPInvHed.Linked)
                {
                    OpError = Strings.CannotCancelInterCompanyInvoices;
                }
            }
        }

        /// <summary>
        /// Method to call to validate the WBS Phase.  
        /// </summary>
        /// <param name="PropPhase">The proposed phase number</param>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="OpMessage">Output message</param>

        public void ValidateWBSPhase(string PropPhase, ref APInvoiceTableset ds, out string OpMessage)
        {
            OpMessage = string.Empty;

            ttAPInvJob = (from ttAPInvJob_Row in ds.APInvJob
                          where !String.IsNullOrEmpty(ttAPInvJob_Row.RowMod)
                          select ttAPInvJob_Row).FirstOrDefault();
            if (ttAPInvJob != null)
            {
                ProjPhase = FindFirstProjPhase(Session.CompanyID, ttAPInvJob.ProjectID, PropPhase);
                if (ProjPhase != null && !String.IsNullOrEmpty(ProjPhase.WBSJobNum))
                {
                    JobHead = FindFirstJobHead(Session.CompanyID, ProjPhase.WBSJobNum, false);
                    if (JobHead != null)
                    {
                        if (!JobHead.JobEngineered || !JobHead.JobReleased)
                        {
                            OpMessage = Strings.WBSIsInactive;
                        }
                    }
                }
            }
        }



        /// <summary>
        /// This Method will check if the current PO line already has an unreceived line Invoice created and send a warning message if so.
        /// </summary>
        /// <param name="ProposedPOLine">The proposed po line</param>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="OpMessage">out message</param>
        public void ValidateUnreceivedLineForPOBeforeChangePOLine(int ProposedPOLine, ref APInvoiceTableset ds, out string OpMessage)
        {
            OpMessage = string.Empty;

            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceLineCriteNotAvail, "APInvDtl", "RefCode");
            }


            if (ExistUnreceivedLineForPO(ttAPInvDtl.Company, ttAPInvDtl.PONum, ProposedPOLine, ttAPInvDtl.VendorNum))
            {
                OpMessage = Strings.ThePurchaseOrderAlreadyHasAnUnreceivedLineInv;
            }
        }
        /// <summary>
        /// Method to call when changing the po line on a detail record.  Validates the po line and
        /// updates APInvDtl with defaults from the purchase order line. 
        /// </summary>
        /// <param name="ProposedPOLine">The proposed po line</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangePOLine(int ProposedPOLine, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            decimal calcAdvancePayBal = decimal.Zero;
            decimal calcInAdvancePayBal = decimal.Zero;
            int pStep = 0;
            decimal pExRate = decimal.Zero;
            bool PODtlTaxableCC = IsPODtlTaxable(Session.CompanyID); //Company Configuration Flag "Default Tax Settings from PO/Receipt"

            string taxExemptString = string.Empty;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceLineCriteNotAvail, "APInvDtl", "RefCode");
            }



            PODetail = FindFirstPODetail(ttAPInvDtl.Company, ttAPInvDtl.PONum, ProposedPOLine);
            if (PODetail == null)
            {
                throw new BLException(Strings.InvalidPOLine, "APInvDtl", "POLine");
            }/* if not available PODetail */
            if (POHeader == null)
            {


                POHeader = FindFirstPOHeader(ttAPInvDtl.Company, ttAPInvDtl.PONum);
            }
            /* The PO cannot be the local version of the consolidated po */
            if (IsLocalConsolidatedPO(PODetail.PONUM) == true)
            {
                throw new BLException(Strings.AConsoPOMayNotBeSelec, "APInvDtl", "PONum");
            }
            if (PODetail.OpenLine == false)
            {
                throw new BLException(Strings.ThePurchOrderLineHasBeenClosed, "APInvDtl", "POLine");
            }/* if PODetail.OpenLine = false */
            if (StringExtensions.Compare(ttAPInvDtl.LineType, "A") == 0)
            {
                if (ttAPInvDtl.DebitMemo == true && PODetail.DocAdvancePayBal == 0)
                {
                    throw new BLException(Strings.POLineMustHaveAnAdvancePaymentBalance, "APInvDtl", "POLine");
                }
            }/* if ttAPInvDtl.LineType = "A":U */



            ttAPInvDtl.POLine = ProposedPOLine;
            ttAPInvDtl.PartNum = PODetail.PartNum;

            if (isGermanyLocalization)
            {
                var part = FindFirstPart(Session.CompanyID, PODetail.PartNum);
                if (part != null)
                {
                    ttAPInvDtl.DEInternationalSecuritiesID = part.DEInternationalSecuritiesID;
                    ttAPInvDtl.DEIsInvestment = part.DEIsInvestment;
                    ttAPInvDtl.DEIsSecurityFinancialDerivative = part.DEIsSecurityFinancialDerivative;
                    ttAPInvDtl.DEIsServices = part.DEIsServices;
                    ttAPInvDtl.DEPayStatCode = part.DEPayStatCode;
                    ttAPInvDtl.DEDenomination = part.DEDenomination;
                    ttAPInvDtl.DEPayStatCodeDescr = LibValidateUDCodes.checkUDCode("PmtStatCod", ttAPInvDtl.DEPayStatCode, false);
                    ttAPInvDtl.DEDenominationDescr = LibValidateUDCodes.checkUDCode("PmtDenomin", ttAPInvDtl.DEDenomination, false);
                }
            }
            ttAPInvDtl.VenPartNum = PODetail.VenPartNum;

            Part = Part.FindFirstByPrimaryKey(Db, PODetail.Company, PODetail.PartNum);
            if (PODtlTaxableCC)
                ttAPInvDtl.TaxCatID = PODetail.TaxCatID;
            else
                ttAPInvDtl.TaxCatID = Part?.TaxCatID ?? string.Empty;

            /* if ttAPInvDtl.LineType = "A":U and ttAPInvDtl.RowMod = "U":U */
            if (StringExtensions.Compare(ttAPInvDtl.LineType, "A") == 0)
            {
                ttAPInvDtl.Description = ((Part != null) ? Part.PartDescription : PODetail.LineDesc);
                if (ttAPInvDtl.DebitMemo == true && PODetail.DocAdvancePayBal > 0)
                {
                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
                    if (StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) == 0)
                    {
                        calcAdvancePayBal = PODetail.DocAdvancePayBal;
                        calcInAdvancePayBal = PODetail.DocInAdvancePayBal;
                    }
                    else
                    {
                        if (tmpChainRows != null)
                        {
                            tmpChainRows.Clear();
                        }

                        if (vUseDate == 1)
                        {
                            vExDate = APInvHed.InvoiceDate;
                        }
                        else
                        {
                            vExDate = APInvHed.ApplyDate;
                        }

                        this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, POHeader.CurrencyCode, APInvHed.CurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", APInvHed.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);

                        calcAdvancePayBal = this.LibConvertAmtEF.ConvertAmt(PODetail.DocAdvancePayBal, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                        calcAdvancePayBal = LibRoundAmountEF.RoundDecimalsApply(calcAdvancePayBal, APInvHed.CurrencyCode, "PODetail", "DocAdvancePayBal");
                        calcInAdvancePayBal = this.LibConvertAmtEF.ConvertAmt(PODetail.DocInAdvancePayBal, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                        calcInAdvancePayBal = LibRoundAmountEF.RoundDecimalsApply(calcInAdvancePayBal, APInvHed.CurrencyCode, "PODetail", "DocInAdvancePayBal");
                    }


                    if (!APInvHed.InPrice)
                    {
                        ttAPInvDtl.ScrDocExtCost = LibRoundAmountEF.RoundDecimalsTT(calcAdvancePayBal, ttAPInvDtl, "ScrDocExtCost");
                    }
                    else
                    {
                        ttAPInvDtl.ScrDocExtCost = LibRoundAmountEF.RoundDecimalsTT(calcInAdvancePayBal, ttAPInvDtl, "ScrDocExtCost");

                    }
                    var outScrExtCost4 = ttAPInvDtl.ScrExtCost;
                    var outRpt1ExtCost = ttAPInvDtl.Rpt1ExtCost;
                    var outRpt2ExtCost = ttAPInvDtl.Rpt2ExtCost;
                    var outRpt3ExtCost = ttAPInvDtl.Rpt3ExtCost;
                    CalcBaseAmt(ttAPInvDtl.ScrDocExtCost, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "ScrExtCost", out outScrExtCost4, out outRpt1ExtCost, out outRpt2ExtCost, out outRpt3ExtCost);
                    ttAPInvDtl.ScrExtCost = outScrExtCost4;
                    ttAPInvDtl.Rpt1ExtCost = outRpt1ExtCost;
                    ttAPInvDtl.Rpt2ExtCost = outRpt2ExtCost;
                    ttAPInvDtl.Rpt3ExtCost = outRpt3ExtCost;
                }

                if (PODtlTaxableCC && !PODetail.Taxable)
                {

                    string VendorTaxPayerID = GetVendorTaxPayerID(Session.CompanyID, ttAPInvDtl.VendorNum);
                    ttAPInvDtl.TaxExempt = String.IsNullOrEmpty(VendorTaxPayerID) ? Strings.NonTaxable : VendorTaxPayerID;

                }
            }
            else if (StringExtensions.Compare(ttAPInvDtl.LineType, "U") == 0)
            {
                ttAPInvDtl.Description = PODetail.LineDesc;
                ttAPInvDtl.PurchCode = PODetail.PurchCode;
                if (ttAPInvDtl.UsePurchaseCode == true)
                {


                    GLPurch = FindFirstGLPurch(PODetail.Company, PODetail.PurchCode);
                    if (GLPurch != null)
                    {
                        ttAPInvDtl.GLPurchPurchDesc = GLPurch.PurchDesc;
                        if (GLPurch.POExp == true)
                        {
                            ttAPInvDtl.EnablePurchaseCode = false;
                        }
                        else
                        {
                            ttAPInvDtl.EnablePurchaseCode = true;
                        }
                    }
                    else
                    {
                        ttAPInvDtl.GLPurchPurchDesc = "";
                        ttAPInvDtl.EnablePurchaseCode = true;
                    }
                }
                /* Default the PORelNum */
                var PORelQuery6 = DBExpressionCompiler.Compile(PORelExpression6);
                PORel = PORelQuery6(Db, PODetail.Company, PODetail.PONUM, PODetail.POLine, true);
                if (PORel != null)
                {
                    ttAPInvDtl.PORelNum = PORel.PORelNum;
                    if (PODtlTaxableCC)
                    {
                        if (!PORel.Taxable)
                        {
                            if (!String.IsNullOrEmpty(PORel.TaxExempt))
                            {
                                ttAPInvDtl.TaxExempt = PORel.TaxExempt;
                            }
                            else
                            {
                                string VendorTaxPayerID = GetVendorTaxPayerID(Session.CompanyID, ttAPInvDtl.VendorNum);
                                ttAPInvDtl.TaxExempt = String.IsNullOrEmpty(VendorTaxPayerID) ? Strings.NonTaxable : VendorTaxPayerID;
                            }
                        }
                        else if (!String.IsNullOrEmpty(ttAPInvDtl.TaxExempt))
                        {
                            ttAPInvDtl.TaxExempt = string.Empty;
                        }
                    }
                    poRelNumChanged();
                }
            }/* else if ttAPInvDtl.LineType = "U":U */

            if (isIndiaLocalization)
            {
                INShared.INCodesResult inCodes = LibINShared.GetINCodesByHierarchy(INShared.ScopeType.Purchase, PODetail.Company, PODetail.PONUM, PODetail.POLine, PODetail.PartNum);
                ttAPInvDtl.CommodityCode = inCodes.CommodityCode;
                ttAPInvDtl.TaxCatID = inCodes.TaxCatID;
            }

            getLinePOInfo();
            APInvDtl_Foreign_Link();
            if (dispWarning(ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ttAPInvDtl.PORelNum))
            {
                ttAPInvDtl.POWarn = Strings.ExistAPInvPBRecordsWillBeClearedWhenTheLineIsSaved;
            }
            else
            {
                ttAPInvDtl.POWarn = "";
            }
        }

        /// <summary>
        /// Method to call when changing the po number on a detail record.  Validates the po number
        /// and updates APInvDtl with defaults from the purchase order. 
        /// </summary>
        /// <param name="ProposedPONum">The proposed po number</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangePONum(int ProposedPONum, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceLineCriteNotAvail, "APInvDtl");
            }



            var POHeaderQuery6 = DBExpressionCompiler.Compile(POHeaderExpression6);
            POHeader = POHeaderQuery6(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ProposedPONum, Session.CompanyID);
            if (POHeader == null)
            {
                throw new BLException(Strings.InvalidPONumber, "APInvDtl", "PONum");
            }
            /* The PO cannot be the local version of the consolidated po */
            if (IsLocalConsolidatedPO(POHeader.PONum) == true)
            {
                throw new BLException(Strings.AConsoPOMayNotBeSelec, "APInvDtl", "PONum");
            }
            /* The PO cannot be a CMI type PO */
            if (StringExtensions.Compare(POHeader.POType, "CMI") == 0)
            {
                throw new BLException(Strings.ACMITypePOMayNotBeSelected, "APInvDtl", "PONum");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (APInvHed != null &&
            StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) != 0 && !String.IsNullOrEmpty(APInvHed.APLOCID))
            {
                throw new BLException(Strings.POCurreDoesNotMatchInvoiceCurre, "APInvDtl", "PONum");
            }
            /* do not allow centralized payment for consolidated PO */
            if (APInvHed != null && POHeader.ConsolidatedPO == true &&
            APInvHed.CPay == true)
            {
                throw new BLException(Strings.AConsoPOMayNotBeSelecForCentralPaymentProcess, "APInvDtl", "PONum");
            }

            if (APInvHed != null)
            {
                if (POHeader.InPrice != APInvHed.InPrice)
                {
                    throw new BLException(Strings.TaxLiabilityFlagNotMatch, "APInvDtl", "PONum");

                }

            }

            var APInvPBQuery2 = DBExpressionCompiler.Compile(APInvPBExpression2);
            APInvPB = APInvPBQuery2(Db, Session.CompanyID, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine);
            if (APInvPB != null)
            {
                if (dispWarning(ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ttAPInvDtl.PORelNum))
                {
                    ttAPInvDtl.POWarn = Strings.ExistAPInvPBRecordsWillBeClearedWhenTheLineIsSaved;
                }
                else
                {
                    ttAPInvDtl.POWarn = "";
                }
            }
            ttAPInvDtl.PONum = ProposedPONum;
            ttAPInvDtl.POLine = 0;
            ttAPInvDtl.PORelNum = 0;
            ttAPInvDtl.PartNum = "";
            ttAPInvDtl.VenPartNum = "";
            getLinePOInfo();
        }

        /// <summary>
        /// Method to call when changing the po release number on a detail record.  Validates the
        /// po release number and updates APInvDtl with defaults from the purchase order release. 
        /// </summary>
        /// <param name="ProposedPORelNum">The proposed po release number</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangePORelNum(int ProposedPORelNum, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            bool PODtlTaxableCC = IsPODtlTaxable(Session.CompanyID);

            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceLineCriteNotAvail, "APInvDtl");
            }



            var PORelQuery7 = DBExpressionCompiler.Compile(PORelExpression7);
            PORel = PORelQuery7(Db, ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ProposedPORelNum, true);
            if (PORel == null)
            {
                throw new BLException(Strings.InvalidPOReleaseNumber, "APInvDtl", "PORelNum");
            }/* if not available PORelNum */

            /* The PO cannot be the local version of the consolidated po */
            if (IsLocalConsolidatedPO(PORel.PONum) == true)
            {
                throw new BLException(Strings.AConsoPOMayNotBeSelec, "APInvDtl", "PONum");
            }
            ttAPInvDtl.PORelNum = ProposedPORelNum;
            if (PODtlTaxableCC)
            {
                if (!PORel.Taxable)
                {
                    if (!String.IsNullOrEmpty(PORel.TaxExempt))
                    {
                        ttAPInvDtl.TaxExempt = PORel.TaxExempt;
                    }
                    else
                    {
                        string VendorTaxPayerID = GetVendorTaxPayerID(Session.CompanyID, ttAPInvDtl.VendorNum);
                        ttAPInvDtl.TaxExempt = String.IsNullOrEmpty(VendorTaxPayerID) ? Strings.NonTaxable : VendorTaxPayerID;
                    }
                }
                else if (!String.IsNullOrEmpty(ttAPInvDtl.TaxExempt))
                {
                    ttAPInvDtl.TaxExempt = string.Empty;
                }
            }
            poRelNumChanged();
            getLinePOInfo();
            if (dispWarning(ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ttAPInvDtl.PORelNum))
            {
                ttAPInvDtl.POWarn = Strings.ExistAPInvPBRecordsWillBeClearedWhenTheLineIsSaved;
            }
            else
            {
                ttAPInvDtl.POWarn = "";
            }
        }

        /// <summary>
        /// Method to call when changing the number of a prepayment invoice on the invoice header.
        /// </summary>
        /// <param name="prepaymentNum">The number of prepayment invoce</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangePrePayment(string prepaymentNum, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            Erp.Tables.APInvHed altAPInvHed = null;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }
            ttAPInvHed.PrePaymentNum = prepaymentNum;
            if (String.IsNullOrEmpty(prepaymentNum))
            {
                ChangePrePaymentAmt(0, ref ds);
                ttAPInvHed.PrePaymentAmt = 0;
                ttAPInvHed.DocPrePaymentAmt = 0;
                ttAPInvHed.Rpt1PrePaymentAmt = 0;
                ttAPInvHed.Rpt2PrePaymentAmt = 0;
                ttAPInvHed.Rpt3PrePaymentAmt = 0;
            }
            else
            {


                var AltAPInvHedQuery4 = DBExpressionCompiler.Compile(AltAPInvHedExpression4);
                altAPInvHed = AltAPInvHedQuery4(Db, Session.CompanyID, ttAPInvHed.VendorNum, prepaymentNum, true, true, true);
                if (altAPInvHed == null)
                {
                    throw new BLException(Strings.ThePrepaInvoiceForTheRelatedSupplIsNotFound, "APInvHed", "InvoiceNum");
                }
                else
                {
                    if (!altAPInvHed.CurrencyCode.KeyEquals(ttAPInvHed.CurrencyCode))
                    {
                        throw new BLException(Strings.PrepaymentCurrencyMatch);
                    }

                    if (altAPInvHed.DocUnpostedBal >= 0)
                    {
                        throw new BLException(Strings.InvalidPrepaymentAmount);
                    }


                }
                /*Amount should be inverted because it contains negative values*/
                ttAPInvHed.CurrencySwitch = false;
                ChangePrePaymentAmt(0 - altAPInvHed.DocUnpostedBal, ref ds);
            }
        }

        /// <summary>
        /// Method to call when changing the prepayment amount.
        /// </summary>
        /// <param name="prepaymentAmount">The proposed prepayment amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangePrePaymentAmt(decimal prepaymentAmount, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            decimal oldDocAmt = decimal.Zero;
            decimal oldAmt = decimal.Zero;
            decimal oldRpt1Amt = decimal.Zero;
            decimal oldRpt2Amt = decimal.Zero;
            decimal oldRpt3Amt = decimal.Zero;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }
            oldDocAmt = ttAPInvHed.DocPrePaymentAmt;
            oldAmt = ttAPInvHed.PrePaymentAmt;
            oldRpt1Amt = ttAPInvHed.Rpt1PrePaymentAmt;
            oldRpt2Amt = ttAPInvHed.Rpt2PrePaymentAmt;
            oldRpt3Amt = ttAPInvHed.Rpt3PrePaymentAmt;

            if (vUseDate == 1)
            {
                vExDate = ttAPInvHed.InvoiceDate;
            }
            else
            {
                vExDate = ttAPInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

            string fieldNamePrePaymentAmt = string.Empty;

            if (ttAPInvHed.CurrencySwitch == true)
            {
                ttAPInvHed.PrePaymentAmt = prepaymentAmount;

                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.DocPrePaymentAmt = ttAPInvHed.PrePaymentAmt;
                }
                else
                {
                    ttAPInvHed.DocPrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.PrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "DocInvoiceAmt");
                    ttAPInvHed.Rpt1PrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocPrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "Rpt1InvoiceAmt");
                    ttAPInvHed.Rpt2PrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocPrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(2, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "Rpt2InvoiceAmt");
                    ttAPInvHed.Rpt3PrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocPrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(3, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "Rpt3InvoiceAmt");

                }
            }
            else
            {
                ttAPInvHed.DocPrePaymentAmt = prepaymentAmount;
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.PrePaymentAmt = ttAPInvHed.DocPrePaymentAmt;

                }
                else
                {

                    ttAPInvHed.PrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocPrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "InvoiceAmt");
                    ttAPInvHed.Rpt1PrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocPrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "Rpt1InvoiceAmt");
                    ttAPInvHed.Rpt2PrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocPrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(2, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "Rpt2InvoiceAmt");
                    ttAPInvHed.Rpt3PrePaymentAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocPrePaymentAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(3, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "Rpt3InvoiceAmt");

                }
            }/* else do */

            ttAPInvHed.ScrDocInvoiceAmt = ttAPInvHed.ScrDocInvoiceAmt + oldDocAmt - ttAPInvHed.DocPrePaymentAmt;
            ttAPInvHed.ScrInvoiceAmt = ttAPInvHed.ScrInvoiceAmt + oldAmt - ttAPInvHed.PrePaymentAmt;
            ttAPInvHed.Rpt1ScrInvoiceAmt = ttAPInvHed.Rpt1ScrInvoiceAmt + oldRpt1Amt - ttAPInvHed.Rpt1PrePaymentAmt;
            ttAPInvHed.Rpt2ScrInvoiceAmt = ttAPInvHed.Rpt2ScrInvoiceAmt + oldRpt2Amt - ttAPInvHed.Rpt2PrePaymentAmt;
            ttAPInvHed.Rpt3ScrInvoiceAmt = ttAPInvHed.Rpt3ScrInvoiceAmt + oldRpt3Amt - ttAPInvHed.Rpt3PrePaymentAmt;

            CalcVariance();
            APInvHed_Foreign_Link();
        }

        /// <summary>
        /// Method to call when changing the tax percent on a tax record.  Updates APInvTax
        /// tax amounts based on the new tax percent. 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeRateCode(ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where String.IsNullOrEmpty(ttAPInvTax_Row.RowMod)
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax != null)
            {
                CurrentFullTableset.APInvTax.Remove(ttAPInvTax);
            }


            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvTax");
            }
            ChgRateCodeCore();
        }

        private void ChangeRateCodeHedMsc(ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in ds.APInvHedMscTax
                                where String.IsNullOrEmpty(ttAPInvHedMscTax_Row.RowMod)
                                select ttAPInvHedMscTax_Row).FirstOrDefault();
            if (ttAPInvHedMscTax != null)
            {
                CurrentFullTableset.APInvHedMscTax.Remove(ttAPInvHedMscTax);
            }


            ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in ds.APInvHedMscTax
                                where StringExtensions.Lookup(modList, ttAPInvHedMscTax_Row.RowMod) != -1
                                select ttAPInvHedMscTax_Row).FirstOrDefault();
            if (ttAPInvHedMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvHedMscTax");
            }

            chgRateCodeHedMscCore();
        }


        private void ChangeRateCodeLine(ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                         where String.IsNullOrEmpty(ttAPLnTax_Row.RowMod)
                         select ttAPLnTax_Row).FirstOrDefault();
            if (ttAPLnTax != null)
            {
                CurrentFullTableset.APLnTax.Remove(ttAPLnTax);
            }


            ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                         where StringExtensions.Lookup(modList, ttAPLnTax_Row.RowMod) != -1
                         select ttAPLnTax_Row).FirstOrDefault();
            if (ttAPLnTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APLnTax");
            }
            chgRateCodeLineCore();
        }

        private void ChangeRateCodeLnMsc(ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvLnMscTax = (from ttAPInvLnMscTax_Row in ds.APInvLnMscTax
                               where String.IsNullOrEmpty(ttAPInvLnMscTax_Row.RowMod)
                               select ttAPInvLnMscTax_Row).FirstOrDefault();
            if (ttAPInvLnMscTax != null)
            {
                CurrentFullTableset.APInvLnMscTax.Remove(ttAPInvLnMscTax);
            }


            ttAPInvLnMscTax = (from ttAPinvLnMscTax_Row in ds.APInvLnMscTax
                               where StringExtensions.Lookup(modList, ttAPinvLnMscTax_Row.RowMod) != -1
                               select ttAPinvLnMscTax_Row).FirstOrDefault();
            if (ttAPInvLnMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvLnMscTax");
            }

            chgRateCodeLnMscCore();
        }


        /// <summary>
        /// Method to call when changing the rate code on a tax record.  Validates the rate and tax code 
        /// </summary>
        /// <param name="proposedRateCode">The proposed rate code</param>
        /// <param name="ds">The APInvoice data set</param>      
        public void ChangeRateCodeMaster(string proposedRateCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvTax");
            }
            valTaxRateCodeCore(proposedRateCode);
            ttAPInvTax.RateCode = proposedRateCode;



            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where String.IsNullOrEmpty(ttAPInvTax_Row.RowMod)
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax != null)
            {
                CurrentFullTableset.APInvTax.Remove(ttAPInvTax);
            }



            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvTax");
            }

            ChgRateCodeCore();
        }


        /// <summary>
        /// Method to call when changing the rate code on a tax record related to Invoice Header Misc Charge.  Validates the rate and tax code 
        /// </summary>
        /// <param name="proposedRateCode">The proposed rate code</param>
        /// <param name="ds">The APInvoice data set</param>     
        public void ChangeRateHedMscCode(string proposedRateCode, ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            DateTime? vInvDate = null;
            string foreignKey = string.Empty;
            ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in ds.APInvHedMscTax
                                where StringExtensions.Lookup(modList, ttAPInvHedMscTax_Row.RowMod) != -1
                                select ttAPInvHedMscTax_Row).FirstOrDefault();
            if (ttAPInvHedMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvHedMscTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, true));

            var SalesTaxQuery4 = DBExpressionCompiler.Compile(SalesTaxExpression4);
            SalesTax = SalesTaxQuery4(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.TaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.AValidTaxCodeIsRequired, "APInvHedMscTax", "TaxCode");
            }
            if (!String.IsNullOrEmpty(proposedRateCode))
            {


                var TaxRateQuery11 = DBExpressionCompiler.Compile(TaxRateExpression11);
                TaxRate = TaxRateQuery11(Db, Session.CompanyID, ttAPInvHedMscTax.TaxCode, proposedRateCode);
                if (TaxRate == null)
                {
                    throw new BLException(Strings.InvalidRateCode, "APInvHedMscTax", "RateCode");
                }


                if (ExistsAPInvHedMscTax(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, ttAPInvHedMscTax.MscNum, ttAPInvHedMscTax.TaxCode, proposedRateCode, ttAPInvHedMscTax.SysRowID))
                {

                    throw new BLException(Strings.ATaxLineAlreadyExistsForTaxCode(SalesTax.Description), "APInvHedMscTax", "TaxCode");
                }

                SalesTRC = FindFirstSalesTRC(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.TaxCode, proposedRateCode);
                if (SalesTRC != null)
                {
                    ttAPInvHedMscTax.RateCode = proposedRateCode;
                    ttAPInvHedMscTax.RateCodeDescription = SalesTRC.Description;
                }


                if (APInvHed == null)
                {
                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
                }
                if (invInPrice)
                {
                    if (APInvHed != null)
                    {
                        if (APInvHed.TaxRateDate != null)
                        {
                            vInvDate = APInvHed.TaxRateDate;
                        }
                        else if (APInvHed.TaxPoint != null)
                        {
                            vInvDate = APInvHed.TaxPoint;
                        }
                        else if (APInvHed.InvoiceDate != null)
                        {
                            vInvDate = APInvHed.InvoiceDate;
                        }
                        TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, vInvDate.Value);
                        if (TaxRate != null)
                            ttAPInvHedMscTax.Percent = TaxRate.TaxPercent;
                    }
                }
                else
                {
                    chgRateCodeHedMscCore();

                }

            }
            APInvHedMscTax_Foreign_Link();

        }


        /// <summary>
        /// Method to call when changing the rate code on a tax record related to Invoice Line.  Validates the rate and tax code 
        /// </summary>
        /// <param name="proposedRateCode">The proposed rate code</param>
        /// <param name="ds">The APInvoice data set</param>     
        public void ChangeRateLineCode(string proposedRateCode, ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            DateTime? vInvDate = null;
            string foreignKey = string.Empty;
            ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                         where StringExtensions.Lookup(modList, ttAPLnTax_Row.RowMod) != -1
                         select ttAPLnTax_Row).FirstOrDefault();
            if (ttAPLnTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APLnTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, true));

            var SalesTaxQuery4 = DBExpressionCompiler.Compile(SalesTaxExpression4);
            SalesTax = SalesTaxQuery4(Db, ttAPLnTax.Company, ttAPLnTax.TaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.AValidTaxCodeIsRequired, "APLnTax", "TaxCode");
            }
            if (!String.IsNullOrEmpty(proposedRateCode))
            {


                var TaxRateQuery11 = DBExpressionCompiler.Compile(TaxRateExpression11);
                TaxRate = TaxRateQuery11(Db, Session.CompanyID, ttAPLnTax.TaxCode, proposedRateCode);
                if (TaxRate == null)
                {
                    throw new BLException(Strings.InvalidRateCode, "APLnTax", "RateCode");
                }

                if ((ExistsAPLnTax(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine, ttAPLnTax.TaxCode, proposedRateCode, ttAPLnTax.SysRowID)))
                {
                    throw new BLException(Strings.ATaxLineAlreadyExistsForTaxCode(SalesTax.Description), "APLnTax", "TaxCode");
                }


                SalesTRC = FindFirstSalesTRC(ttAPLnTax.Company, ttAPLnTax.TaxCode, proposedRateCode);
                if (SalesTRC != null)
                {
                    ttAPLnTax.RateCode = proposedRateCode;
                    ttAPLnTax.RateCodeDescription = SalesTRC.Description;
                }


                if (APInvHed == null)
                {
                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
                }
                if (invInPrice)
                {
                    if (APInvHed != null)
                    {
                        if (APInvHed.TaxRateDate != null)
                        {
                            vInvDate = APInvHed.TaxRateDate;
                        }
                        else if (APInvHed.TaxPoint != null)
                        {
                            vInvDate = APInvHed.TaxPoint;
                        }
                        else if (APInvHed.InvoiceDate != null)
                        {
                            vInvDate = APInvHed.InvoiceDate;
                        }
                        TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, vInvDate.Value);
                        if (TaxRate != null)
                            ttAPLnTax.Percent = TaxRate.TaxPercent;
                    }
                }
                else
                {
                    chgRateCodeLineCore();

                }

            }
            APLnTax_Foreign_Link();

        }



        /// <summary>
        /// Method to call when changing the rate code on a tax record related to Invoice Line Misc Charge.  Validates the rate and tax code 
        /// </summary>
        /// <param name="proposedRateCode">The proposed rate code</param>
        /// <param name="ds">The APInvoice data set</param>     
        public void ChangeRateLnMscCode(string proposedRateCode, ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            DateTime? vInvDate = null;
            string foreignKey = string.Empty;
            ttAPInvLnMscTax = (from ttAPInvLnMscTax_Row in ds.APInvLnMscTax
                               where StringExtensions.Lookup(modList, ttAPInvLnMscTax_Row.RowMod) != -1
                               select ttAPInvLnMscTax_Row).FirstOrDefault();
            if (ttAPInvLnMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvLnMscTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, true));

            var SalesTaxQuery4 = DBExpressionCompiler.Compile(SalesTaxExpression4);
            SalesTax = SalesTaxQuery4(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.TaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.AValidTaxCodeIsRequired, "APInvLnMscTax", "TaxCode");
            }
            if (!String.IsNullOrEmpty(proposedRateCode))
            {


                var TaxRateQuery11 = DBExpressionCompiler.Compile(TaxRateExpression11);
                TaxRate = TaxRateQuery11(Db, Session.CompanyID, ttAPInvLnMscTax.TaxCode, proposedRateCode);
                if (TaxRate == null)
                {
                    throw new BLException(Strings.InvalidRateCode, "APInvLnMscTax", "RateCode");
                }


                if (ExistsAPInvLnMscTax(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum, ttAPInvLnMscTax.TaxCode, proposedRateCode, ttAPInvLnMscTax.SysRowID))
                {

                    throw new BLException(Strings.ATaxLineAlreadyExistsForTaxCode(SalesTax.Description), "APInvLnMscTax", "TaxCode");
                }

                SalesTRC = FindFirstSalesTRC(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.TaxCode, proposedRateCode);
                if (SalesTRC != null)
                {
                    ttAPInvLnMscTax.RateCode = proposedRateCode;
                    ttAPInvLnMscTax.RateCodeDescription = SalesTRC.Description;
                }


                if (APInvHed == null)
                {
                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
                }
                if (invInPrice)
                {
                    if (APInvHed != null)
                    {
                        if (APInvHed.TaxRateDate != null)
                        {
                            vInvDate = APInvHed.TaxRateDate;
                        }
                        else if (APInvHed.TaxPoint != null)
                        {
                            vInvDate = APInvHed.TaxPoint;
                        }
                        else if (APInvHed.InvoiceDate != null)
                        {
                            vInvDate = APInvHed.InvoiceDate;
                        }
                        TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, vInvDate.Value);
                        if (TaxRate != null)
                            ttAPInvLnMscTax.Percent = TaxRate.TaxPercent;
                    }
                }
                else
                {
                    chgRateCodeLnMscCore();

                }

            }
            APInvLnMscTax_Foreign_Link();

        }


        /// <summary>
        /// Method to call when changing the po number reference on the invoice.  Validates the
        /// po number reference and updates APInvHed with default values based on the po number. 
        /// </summary>
        /// <param name="ProposedRefPONum">The proposed po number reference</param>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="confirmCheck">Confirm Check</param>
        /// <param name="confirmMsg">Confirmation Message</param>
        public void ChangeRefPONum(int ProposedRefPONum, bool confirmCheck, out string confirmMsg, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            confirmMsg = string.Empty;

            if (ProposedRefPONum == 0)
                return;

            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed", "PORelNum");

            int vendorNum = ttAPInvHed.VendorNum;

            if (ProposedRefPONum != 0)
                POHeader = FindFirstPOHeader(ttAPInvHed.Company, ProposedRefPONum);

            if (POHeader == null)
                throw new BLException(Strings.InvalidReferencePONumber, "APInvHed", "RefPONum");

            /* The PO cannot be the local version of the consolidated po */
            if (IsLocalConsolidatedPO(POHeader.PONum) == true)
                throw new BLException(Strings.AConsoPOMayNotBeSelec, "APInvHed", "RefPONum");

            /* SCR #3119 - do not allow central payment for consolidated PO */
            if (ttAPInvHed.CPay == true && POHeader.ConsolidatedPO == true)
                throw new BLException(Strings.AConsoPOMayNotBeSelecForCentralPaymentProcess, "APInvHed", "RefPONum");

            Vendor = Vendor.FindFirstByPrimaryKey(Db, POHeader.Company, POHeader.VendorNum);
            if (Vendor == null)
                throw new BLException(Strings.TheVendorIsInvalid, "Vendor");

            if (!ttAPInvHed.DebitMemo && !ttAPInvHed.GRNIClearing && confirmCheck && Vendor.Inactive && Vendor.VendorNum != vendorNum)
            {
                confirmMsg = Strings.InactiveSupplierConfirmation(Vendor.VendorID);
                return;
            }

            ttAPInvHed.VendorNum = POHeader.VendorNum;
            ttAPInvHed.VendorNumVendorID = Vendor.VendorID;
            if (!String.IsNullOrEmpty(Vendor.PrimaryBankID))
            {
                ttAPInvHed.BankID = Vendor.PrimaryBankID;
                ttAPInvHed.BankName = setBankName(Vendor.VendorNum, Vendor.PrimaryBankID);
            }
            else
            {
                ttAPInvHed.BankID = String.Empty;
                ttAPInvHed.BankName = String.Empty;
            }

            getVendorDefaults();

            string sTaxRegionCode = ttAPInvHed.TaxRegionCode;
            if (isIndiaLocalization)
            {
                setInvoicePurPoint(POHeader.PurPoint);
            }
            if (ttAPInvHed.TaxRegionCode.Compare(sTaxRegionCode) == 0 && !string.IsNullOrEmpty(POHeader.TaxRegionCode))
            {
                ttAPInvHed.TaxRegionCode = POHeader.TaxRegionCode;
                ttAPInvHed.InPrice = POHeader.InPrice;

            }

            /*The Ref PO should populate the Terms from PO and not from Supplier.*/
            if ((ttAPInvHed.DebitMemo == false || isDiscountforDebitM == true) && !String.IsNullOrEmpty(POHeader.TermsCode))
            {
                ttAPInvHed.TermsCode = POHeader.TermsCode;

                PurTerms = PurTerms.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvHed.TermsCode);
                if (PurTerms != null)
                    ttAPInvHed.PayDiscPartPay = PurTerms.PartPayment;
            }
            if (ttAPInvHed.VendorNum == 0)
            {
                ttAPInvHed.InvoiceNum = "";
                ttAPInvHed.InvoiceRef = "";
                ttAPInvHed.ScrInvoiceRef = "";
            }

            /* Default currency info and LoC from PO */
            ttAPInvHed.REFPONum = ProposedRefPONum;
            ttAPInvHed.LockRate = POHeader.LockRate;
            ttAPInvHed.CurrencyCode = POHeader.CurrencyCode;
            ttAPInvHed.RateGrpCode = POHeader.RateGrpCode;
            ttAPInvHed.VendorInactive = Vendor.Inactive;
            ttAPInvHed.APLOCID = POHeader.APLOCID;

            if (POHeader.LockRate)
                ttAPInvHed.ExchangeRate = POHeader.ExchangeRate;
            else
                getExchangeRate("CURR");
            /* If an InvoiceVendorAmount has been entered recalculate the appropriate field */
            if (ttAPInvHed.LockRate)
            {
                this.LibGetCurrencyRatesEF.FindCurrencyRates("POHeader", Compatibility.Convert.ToString(POHeader.PONum), "", "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            }
            else
            {
                if (String.IsNullOrEmpty(pCurrList))
                {
                    if (vUseDate == 1)
                    {
                        vExDate = ttAPInvHed.InvoiceDate;
                    }
                    else
                    {
                        vExDate = ttAPInvHed.ApplyDate;
                    }

                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                }
            }

            string fieldNameScrInvoiceVendorAmt = string.Empty;

            if (ttAPInvHed.CurrencySwitch == true &&
                ttAPInvHed.ScrInvoiceVendorAmt != 0)
            {
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.ScrDocInvoiceVendorAmt = ttAPInvHed.ScrInvoiceVendorAmt;
                }
                else
                {
                    ttAPInvHed.ScrDocInvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "ScrDocInvoiceVendorAmt");
                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrInvoiceVendorAmt = "Rpt" + (i - 1).ToString() + "ScrInvoiceVendorAmt";
                            ttAPInvHed[fieldNameScrInvoiceVendorAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrInvoiceVendorAmt");
                        }
                    }
                }
            }
            else if (ttAPInvHed.CurrencySwitch == false &&
                     ttAPInvHed.ScrDocInvoiceVendorAmt != 0)
            {
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.ScrInvoiceVendorAmt = ttAPInvHed.ScrDocInvoiceVendorAmt;
                }
                else
                {
                    ttAPInvHed.ScrInvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrInvoiceVendorAmt");
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHed, false, "InvoiceVendorAmt", pCurrList, "ttAPInvHed", ttAPInvHed.CurrencyCode, ttChainRows);

                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrInvoiceVendorAmt = "Rpt" + (i - 1).ToString() + "ScrInvoiceVendorAmt";
                            ttAPInvHed[fieldNameScrInvoiceVendorAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrInvoiceVendorAmt");
                        }
                    }
                }
            }/* else do */

            /* Recalculate variance */
            CalcVariance();
            APInvHed_Foreign_Link();

            ttAPInvHed.FormattedVendorNameAddress = FormatNameAddress(ttAPInvHed);

            if (isMalaysiaLocalization)
            {
                using (var csfMalaysiaLib = new Internal.CSF.Malaysia(this.Db))
                {
                    ((IBOAPInvoice)csfMalaysiaLib).ChangeRefPONum(ProposedRefPONum, CurrentFullTableset);
                }
            }
        }

        /// <summary>
        /// Method to call when changing the taxable amount on a tax record.  Updates APInvTax
        /// tax amounts based on the new taxable amount. 
        /// </summary>
        /// <param name="ProposedReportableAmt">The proposed reportable amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeReportableAmt(decimal ProposedReportableAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvTax");
            }
            if (ttAPInvTax.Manual == true)
            {
                if (ttAPInvTax.CurrencySwitch == true)
                {
                    ttAPInvTax.ScrReportableAmt = ProposedReportableAmt;
                    CalcTaxDocPrice();
                }
                else
                {
                    ttAPInvTax.ScrDocReportableAmt = ProposedReportableAmt;
                    CalcTaxBasePrice();
                }
            }
        }


        /// <summary>
        /// Method to call when changing the reportable amount on invoice header misc charge tax record.  Updates APInvHedMscTax
        /// reportable amounts based on the new reportable amount. 
        /// </summary>
        /// <param name="ProposedReportableAmt">The proposed reportable amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeReportableHedMscAmt(decimal ProposedReportableAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in ds.APInvHedMscTax
                                where StringExtensions.Lookup(modList, ttAPInvHedMscTax_Row.RowMod) != -1
                                select ttAPInvHedMscTax_Row).FirstOrDefault();
            if (ttAPInvHedMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvHedMscTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }


            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPInvHedMscTax.CurrencySwitch == true)
            {
                ttAPInvHedMscTax.ScrReportableAmt = ProposedReportableAmt;
                ttAPInvHedMscTax.DocScrReportableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHedMscTax.ScrReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHedMscTax", "DocScrReportableAmt");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, false, "ScrReportableAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
            else
            {
                ttAPInvHedMscTax.DocScrReportableAmt = ProposedReportableAmt;
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, "ScrReportableAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }


        /// <summary>
        /// Method to call when changing the reportable amount on invoice line tax record.  Updates APLnTax
        /// reportable amounts based on the new reportable amount. 
        /// </summary>
        /// <param name="ProposedReportableAmt">The proposed reportable amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeReportableLineAmt(decimal ProposedReportableAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                         where StringExtensions.Lookup(modList, ttAPLnTax_Row.RowMod) != -1
                         select ttAPLnTax_Row).FirstOrDefault();
            if (ttAPLnTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APLnTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }


            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPLnTax.CurrencySwitch == true)
            {
                ttAPLnTax.ScrReportableAmt = ProposedReportableAmt;
                ttAPLnTax.DocScrReportableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPLnTax.ScrReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPLnTax", "DocScrReportableAmt");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, false, "ScrReportableAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
            }
            else
            {
                ttAPLnTax.DocScrReportableAmt = ProposedReportableAmt;
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, "ScrReportableAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }



        /// <summary>
        /// Method to call when changing the reportable amount on invoice line misc charge tax record.  Updates APInvLnMscTax
        /// reportable amounts based on the new reportable amount. 
        /// </summary>
        /// <param name="ProposedReportableAmt">The proposed reportable amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeReportableLnMscAmt(decimal ProposedReportableAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPInvLnMscTax = (from ttAPInvLnMscTax_Row in ds.APInvLnMscTax
                               where StringExtensions.Lookup(modList, ttAPInvLnMscTax_Row.RowMod) != -1
                               select ttAPInvLnMscTax_Row).FirstOrDefault();
            if (ttAPInvLnMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvLnMscTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }


            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPInvLnMscTax.CurrencySwitch == true)
            {
                ttAPInvLnMscTax.ScrReportableAmt = ProposedReportableAmt;
                ttAPInvLnMscTax.DocScrReportableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvLnMscTax.ScrReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvLnMscTax", "DocScrReportableAmt");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, false, "ScrReportableAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
            else
            {
                ttAPInvLnMscTax.DocScrReportableAmt = ProposedReportableAmt;
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, "ScrReportableAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }




        /// <summary>
        /// Method to call when changing the reverse charge method.  If override flag
        /// is true then check if the proposed method is valid.
        /// </summary>
        /// <param name="ProposedRevChrgMethod">The proposed Reverse Charge Method</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeRevChargeMethod(string ProposedRevChrgMethod, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceLineIsNotAvailable, "APInvDtl");
            }
            /* if not Override, user should not be changing the reverse charge method */
            if (ttAPInvDtl.OverrideReverseCharge == false)
            {
                return;
            }

            if (!String.IsNullOrEmpty(ProposedRevChrgMethod) && StringExtensions.Lookup("RCN,RCT", ProposedRevChrgMethod) == -1)
            {
                throw new BLException(Strings.InvalidReverseChargeMethod, "APInvDtl");
            }
            /* allow Reverse Charge with Threshold (RCT) only if Part is setup as one */
            if (StringExtensions.Compare(ProposedRevChrgMethod, "RCT") == 0)
            {
                Part = Part.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.PartNum);
                if (Part == null || StringExtensions.Compare(Part.RevChargeMethod, "RCT") != 0)
                {
                    throw new BLException(Strings.InvoiceLineNotValidForReverseChargeWithThres, "APInvDtl");
                }
            }
            ttAPInvDtl.RevChargeMethod = ProposedRevChrgMethod;
        }

        /// <summary>
        /// Method to call when changing the taxable amount on a tax record.  Updates APInvTax
        /// tax amounts based on the new taxable amount. 
        /// </summary>
        /// <param name="ProposedTaxableAmt">The proposed taxable amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxableAmt(decimal ProposedTaxableAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            DateTime? vInvDate = null;


            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceHeaderIsNotFound, "APInvHed");
            }

            if (APInvHed.TaxRateDate != null)
            {
                vInvDate = APInvHed.TaxRateDate;
            }
            else if (APInvHed.TaxPoint != null)
            {
                vInvDate = APInvHed.TaxPoint;
            }
            else if (APInvHed.InvoiceDate != null)
            {
                vInvDate = APInvHed.InvoiceDate;
            }



            TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, vInvDate.Value);
            if (TaxRate == null)
            {
                throw new BLException(Strings.TaxRateIsNotAvailable, "APInvTax");
            }
            if (ttAPInvTax.Manual == true)
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
                if (ttAPInvTax.CurrencySwitch == true)
                {
                    ttAPInvTax.ScrTaxableAmt = ProposedTaxableAmt;
                    /* SCR #44624 - calculate defaults based on new taxable amount */

                    ttAPInvTax.ScrTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvTax.ScrTaxableAmt, ttAPInvTax.Percent, ttAPInvTax.TaxCode, "") + ttAPInvTax.ScrFixedAmount;
                    ttAPInvTax.ScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvTax.ScrTaxAmt, TaxRate.DeductPercent, ttAPInvTax.TaxCode, "");
                    CalcTaxDocPrice();
                }
                else
                {
                    ttAPInvTax.ScrDocTaxableAmt = ProposedTaxableAmt;
                    ttAPInvTax.ScrDocTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvTax.ScrDocTaxableAmt, ttAPInvTax.Percent, ttAPInvTax.TaxCode, "") + ttAPInvTax.ScrDocFixedAmount;
                    ttAPInvTax.ScrDocDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvTax.ScrDocTaxAmt, TaxRate.DeductPercent, ttAPInvTax.TaxCode, "");
                    CalcTaxBasePrice();
                }
            }
        }


        /// <summary>
        /// Method to call when changing the taxable amount on invoice header tax record.  Updates APInvHedMscTax
        /// taxable amounts based on the new taxable amount. 
        /// </summary>
        /// <param name="ProposedTaxableAmt">The proposed taxable amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxableHedMscAmt(decimal ProposedTaxableAmt, ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            DateTime? vInvDate = null;
            ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in ds.APInvHedMscTax
                                where StringExtensions.Lookup(modList, ttAPInvHedMscTax_Row.RowMod) != -1
                                select ttAPInvHedMscTax_Row).FirstOrDefault();
            if (ttAPInvHedMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvHedMscTax");
            }
            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, true));
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPInvHedMscTax.CurrencySwitch == true)
            {
                ttAPInvHedMscTax.ScrTaxableAmt = ProposedTaxableAmt;
                ttAPInvHedMscTax.DocScrTaxableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHedMscTax.ScrTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHedMscTax", "DocScrTaxableAmt");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, false, "ScrTaxableAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
            else
            {
                ttAPInvHedMscTax.DocScrTaxableAmt = ProposedTaxableAmt;
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, "ScrTaxableAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
            if (!invInPrice)

            {
                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }

                TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, vInvDate.Value);
                if (TaxRate == null)
                {
                    throw new BLException(Strings.TaxRateIsNotAvailable, "APInvHedMscTax");
                }
                ttAPInvHedMscTax.DocScrTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvHedMscTax.DocScrTaxableAmt, ttAPInvHedMscTax.Percent, ttAPInvHedMscTax.TaxCode, "") + ttAPInvHedMscTax.DocScrFixedAmount;
                ttAPInvHedMscTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvHedMscTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPInvHedMscTax.TaxCode, "");
                string cRFieldList = "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt";
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, cRFieldList, pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }


        /// <summary>
        /// Method to call when changing the taxable amount on invoice line tax record.  Updates APLnTax
        /// taxable amounts based on the new taxable amount. 
        /// </summary>
        /// <param name="ProposedTaxableAmt">The proposed taxable amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxableLineAmt(decimal ProposedTaxableAmt, ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            DateTime? vInvDate = null;
            ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                         where StringExtensions.Lookup(modList, ttAPLnTax_Row.RowMod) != -1
                         select ttAPLnTax_Row).FirstOrDefault();
            if (ttAPLnTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APLnTax");
            }
            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, true));
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPLnTax.CurrencySwitch == true)
            {
                ttAPLnTax.ScrTaxableAmt = ProposedTaxableAmt;
                ttAPLnTax.DocScrTaxableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPLnTax.ScrTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPLnTax", "DocScrTaxableAmt");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, false, "ScrTaxableAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
            }
            else
            {
                ttAPLnTax.DocScrTaxableAmt = ProposedTaxableAmt;
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, "ScrTaxableAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
            }
            if (!invInPrice)

            {
                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }

                TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, vInvDate.Value);
                if (TaxRate == null)
                {
                    throw new BLException(Strings.TaxRateIsNotAvailable, "APLnTax");
                }
                ttAPLnTax.DocScrTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPLnTax.DocScrTaxableAmt, ttAPLnTax.Percent, ttAPLnTax.TaxCode, "") + ttAPLnTax.DocScrFixedAmount;
                ttAPLnTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPLnTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPLnTax.TaxCode, "");
                string cRFieldList = "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt";
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, cRFieldList, pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }


        /// <summary>
        /// Method to call when changing the taxable amount on invoice line tax record.  Updates APInvLnMscTax
        /// taxable amounts based on the new taxable amount. 
        /// </summary>
        /// <param name="ProposedTaxableAmt">The proposed taxable amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxableLnMscAmt(decimal ProposedTaxableAmt, ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            DateTime? vInvDate = null;
            ttAPInvLnMscTax = (from ttAPInvLnMscTax_Row in ds.APInvLnMscTax
                               where StringExtensions.Lookup(modList, ttAPInvLnMscTax_Row.RowMod) != -1
                               select ttAPInvLnMscTax_Row).FirstOrDefault();
            if (ttAPInvLnMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvLnMscTax");
            }
            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, true));
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPInvLnMscTax.CurrencySwitch == true)
            {
                ttAPInvLnMscTax.ScrTaxableAmt = ProposedTaxableAmt;
                ttAPInvLnMscTax.DocScrTaxableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvLnMscTax.ScrTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvLnMscTax", "DocScrTaxableAmt");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, false, "ScrTaxableAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
            else
            {
                ttAPInvLnMscTax.DocScrTaxableAmt = ProposedTaxableAmt;
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, "ScrTaxableAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
            if (!invInPrice)

            {
                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }

                TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, vInvDate.Value);
                if (TaxRate == null)
                {
                    throw new BLException(Strings.TaxRateIsNotAvailable, "APInvLnMscTax");
                }
                ttAPInvLnMscTax.DocScrTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvLnMscTax.DocScrTaxableAmt, ttAPInvLnMscTax.Percent, ttAPInvLnMscTax.TaxCode, "") + ttAPInvLnMscTax.DocScrFixedAmount;
                ttAPInvLnMscTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvLnMscTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPInvLnMscTax.TaxCode, "");
                string cRFieldList = "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt";
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, cRFieldList, pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }

        /// <summary>
        /// Method to call when changing the fixed tax amount on a tax record.  Updates APInvTax
        /// tax amounts based on the new tax amount. 
        /// </summary>
        /// <param name="ProposedTaxAmt">The proposed tax amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxAmt(decimal ProposedTaxAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            DateTime? vInvDate = null;



            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceHeaderIsNotFound, "APInvHed");
            }
            if (APInvHed.TaxRateDate != null)
            {
                vInvDate = APInvHed.TaxRateDate;
            }
            else if (APInvHed.TaxPoint != null)
            {
                vInvDate = APInvHed.TaxPoint;
            }
            else if (APInvHed.InvoiceDate != null)
            {
                vInvDate = APInvHed.InvoiceDate;
            }



            TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, vInvDate.Value);
            if (TaxRate == null)
            {
                throw new BLException(Strings.TaxRateIsNotAvailable, "APInvTax");
            }
            if (ttAPInvTax.Manual)
            {
                if (ttAPInvTax.CurrencySwitch == true)
                {
                    ttAPInvTax.ScrTaxAmt = ProposedTaxAmt;
                    ttAPInvTax.ScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvTax.ScrTaxAmt, TaxRate.DeductPercent, ttAPInvTax.TaxCode, "");
                    CalcTaxDocPrice();
                }
                else
                {
                    ttAPInvTax.ScrDocTaxAmt = ProposedTaxAmt;
                    ttAPInvTax.ScrDocDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvTax.ScrDocTaxAmt, TaxRate.DeductPercent, ttAPInvTax.TaxCode, "");
                    CalcTaxBasePrice();
                }
            }
        }


        /// <summary>
        /// Method to call when changing the tax amount on a invoice header misc charge tax record.  Updates APInvHedMscTax
        /// tax amounts based on the new tax amount. 
        /// </summary>
        /// <param name="ProposedTaxAmt">The proposed tax amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxHedMscAmt(decimal ProposedTaxAmt, ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            decimal vTotalTax = decimal.Zero;
            decimal vDocTotalTax = decimal.Zero;
            DateTime? vInvDate = null;

            ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in ds.APInvHedMscTax
                                where StringExtensions.Lookup(modList, ttAPInvHedMscTax_Row.RowMod) != -1
                                select ttAPInvHedMscTax_Row).FirstOrDefault();
            if (ttAPInvHedMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvHedMscTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, true));
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            if (APInvHed != null)
            {
                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }

                TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, vInvDate.Value);
                if (TaxRate == null)
                {
                    throw new BLException(Strings.TaxRateIsNotAvailable, "APInvHedMscTax");
                }

                this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                if (invInPrice)
                {
                    //logic to compare the new tax amount plus others to misc charge amount
                    //where tax code or rate code not the same 
                    foreach (var APInvHedMscTaxPartialRow in (this.SelectAPInvHedMscTax(Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, ttAPInvHedMscTax.MscNum, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, ttAPInvHedMscTax.ECAcquisitionSeq)))
                    {

                        vTotalTax = vTotalTax + APInvHedMscTaxPartialRow.TaxAmt;
                        vDocTotalTax = vDocTotalTax + APInvHedMscTaxPartialRow.DocTaxAmt;
                    }

                    var apInvMsc = this.FindFirstAPInvMsc(Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, 0, ttAPInvHedMscTax.MscNum);
                    if (apInvMsc != null)
                    {
                        if (ttAPInvHedMscTax.CurrencySwitch)
                        {
                            if (Math.Abs(apInvMsc.InMiscAmt) < (Math.Abs(vTotalTax) + ProposedTaxAmt))
                            {
                                throw new BLException(Strings.TotalInclTaxHeader);

                            }

                        }
                        else
                        {
                            if (Math.Abs(apInvMsc.DocInMiscAmt) < (Math.Abs(vDocTotalTax) + ProposedTaxAmt))
                            {
                                throw new BLException(Strings.TotalInclTaxHeader);

                            }

                        }
                    }
                } //IN price
                if (ttAPInvHedMscTax.CurrencySwitch)
                {
                    ttAPInvHedMscTax.ScrTaxAmt = ProposedTaxAmt;
                    ttAPInvHedMscTax.DocScrTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHedMscTax.ScrTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHedMscTax", "DocScrTaxAmt");
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, false, "ScrTaxAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
                }
                else
                {
                    ttAPInvHedMscTax.DocScrTaxAmt = ProposedTaxAmt;
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, "ScrTaxAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
                }
                ttAPInvHedMscTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvHedMscTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPInvHedMscTax.TaxCode, "");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, "ScrDedTaxAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
            }  //APInvHed is not null
        }

        /// <summary>
        /// Method to call when changing the tax amount on a invoice line tax record.  Updates APLnTax
        /// tax amounts based on the new tax amount. 
        /// </summary>
        /// <param name="ProposedTaxAmt">The proposed tax amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxLineAmt(decimal ProposedTaxAmt, ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            decimal vTotalTax = decimal.Zero;
            decimal vDocTotalTax = decimal.Zero;
            decimal vTotalAmount = decimal.Zero;
            decimal vDocTotalAmount = decimal.Zero;
            DateTime? vInvDate = null;

            ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                         where StringExtensions.Lookup(modList, ttAPLnTax_Row.RowMod) != -1
                         select ttAPLnTax_Row).FirstOrDefault();
            if (ttAPLnTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APLnTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, true));
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            if (APInvHed != null)
            {
                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }

                TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, vInvDate.Value);
                if (TaxRate == null)
                {
                    throw new BLException(Strings.TaxRateIsNotAvailable, "APLnTax");
                }

                this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                if (invInPrice)
                {
                    foreach (var aPLnTaxPartialRow_iterator in (this.SelectAPLnTax2(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine, ttAPLnTax.TaxCode, ttAPLnTax.RateCode)))
                    {

                        vTotalTax = vTotalTax + aPLnTaxPartialRow_iterator.TaxAmt;
                        vDocTotalTax = vDocTotalTax + aPLnTaxPartialRow_iterator.DocTaxAmt;
                    }


                    var aPInvDtlPartialResult = this.FindFirstAPInvDtl2(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine);
                    if (aPInvDtlPartialResult != null)
                    {
                        vTotalAmount = aPInvDtlPartialResult.InExtCost;
                        vDocTotalAmount = aPInvDtlPartialResult.DocInExtCost;
                    }

                    if (ttAPLnTax.CurrencySwitch)
                    {
                        if (Math.Abs(vTotalAmount) < (Math.Abs(vTotalTax) + ProposedTaxAmt))
                        {
                            throw new BLException(Strings.TotalInclTaxHeader);

                        }

                    }
                    else
                    {
                        if (Math.Abs(vDocTotalAmount) < (Math.Abs(vDocTotalTax) + ProposedTaxAmt))
                        {
                            throw new BLException(Strings.TotalInclTaxHeader);

                        }

                    }

                } //IN price
                if (ttAPLnTax.CurrencySwitch)
                {
                    ttAPLnTax.ScrTaxAmt = ProposedTaxAmt;
                    ttAPLnTax.DocScrTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPLnTax.ScrTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPLnTax", "DocScrTaxAmt");
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, false, "ScrTaxAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
                }
                else
                {
                    ttAPLnTax.DocScrTaxAmt = ProposedTaxAmt;
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, "ScrTaxAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
                }
                ttAPLnTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPLnTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPLnTax.TaxCode, "");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, "ScrDedTaxAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
            }  //APInvHed is not null
        }


        /// <summary>
        /// Method to call when changing the tax amount on a invoice line misc charge tax record.  Updates APInvLnMscTax
        /// tax amounts based on the new tax amount. 
        /// </summary>
        /// <param name="ProposedTaxAmt">The proposed tax amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxLnMscAmt(decimal ProposedTaxAmt, ref APInvoiceTableset ds)
        {

            CurrentFullTableset = ds;
            decimal vTotalTax = decimal.Zero;
            decimal vDocTotalTax = decimal.Zero;
            DateTime? vInvDate = null;

            ttAPInvLnMscTax = (from ttAPInvLnMscTax_Row in ds.APInvLnMscTax
                               where StringExtensions.Lookup(modList, ttAPInvLnMscTax_Row.RowMod) != -1
                               select ttAPInvLnMscTax_Row).FirstOrDefault();
            if (ttAPInvLnMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvLnMscTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, true));
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            if (APInvHed != null)
            {
                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }

                TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, vInvDate.Value);
                if (TaxRate == null)
                {
                    throw new BLException(Strings.TaxRateIsNotAvailable, "APInvLnMscTax");
                }

                this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                if (invInPrice)
                {
                    //logic to compare the new tax amount plus others to misc charge amount
                    //where tax code or rate code not the same 
                    foreach (var apInvLnMscTaxPartialRow in (this.SelectAPInvLnMscTax(Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, ttAPInvLnMscTax.ECAcquisitionSeq)))
                    {

                        vTotalTax = vTotalTax + apInvLnMscTaxPartialRow.TaxAmt;
                        vDocTotalTax = vDocTotalTax + apInvLnMscTaxPartialRow.DocTaxAmt;
                    }

                    var apInvMsc = this.FindFirstAPInvMsc(Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum);
                    if (apInvMsc != null)
                    {
                        if (ttAPInvLnMscTax.CurrencySwitch)
                        {
                            if (Math.Abs(apInvMsc.InMiscAmt) < (Math.Abs(vTotalTax) + ProposedTaxAmt))
                            {
                                throw new BLException(Strings.TotalInclTaxHeader);

                            }

                        }
                        else
                        {
                            if (Math.Abs(apInvMsc.DocInMiscAmt) < (Math.Abs(vDocTotalTax) + ProposedTaxAmt))
                            {
                                throw new BLException(Strings.TotalInclTaxHeader);

                            }

                        }
                    }
                } //IN price
                if (ttAPInvLnMscTax.CurrencySwitch)
                {
                    ttAPInvLnMscTax.ScrTaxAmt = ProposedTaxAmt;
                    ttAPInvLnMscTax.DocScrTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvLnMscTax.ScrTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvLnMscTax", "DocScrTaxAmt");
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, false, "ScrTaxAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
                }
                else
                {
                    ttAPInvLnMscTax.DocScrTaxAmt = ProposedTaxAmt;
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, "ScrTaxAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
                }
                ttAPInvLnMscTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvLnMscTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPInvLnMscTax.TaxCode, "");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, "ScrDedTaxAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
            }  //APInvHed is not null
        }


        /// <summary>
        /// Method to call when changing the Tax Category ID
        /// </summary>
        /// <param name="ipTaxCatID">The proposed Tax Category ID</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxCatID(string ipTaxCatID, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceLineNotAvailable, "APInvDtl");
            }
            if (String.IsNullOrEmpty(ipTaxCatID))
            {
                ttAPInvDtl.TaxExempt = "";
                ttAPInvDtl.TaxCatID = ipTaxCatID;
                ttAPInvDtl.EnableIntrastat = getEnableIntrastat();
                return;
            }

            TaxCat = TaxCat.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ipTaxCatID);
            if (TaxCat == null)
            {
                throw new BLException(Strings.InvalidTaxCategory, "APInvDtl", "TaxCatID");
            }
            if (StringExtensions.Compare(ttAPInvDtl.LineType, "M") != 0 && StringExtensions.Compare(ttAPInvDtl.LineType, "S") != 0)
            {
                if (!TaxCat.InternalUseTax)
                {
                    Vendor = Vendor.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum);
                    if (Vendor != null)
                    {
                        ttAPInvDtl.TaxExempt = Vendor.TaxPayerID;
                    }
                    else
                    {
                        ttAPInvDtl.TaxExempt = "";
                    }
                }
                else
                {
                    ttAPInvDtl.TaxExempt = "";
                }
            }
            else
            {
                ttAPInvDtl.TaxExempt = "";
            }

            ttAPInvDtl.TaxCatID = TaxCat.TaxCatID;
            ttAPInvDtl.TaxCatIDDescription = TaxCat.Description;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();

            if (ttAPInvHed != null)
            {
                ttAPInvDtl.EnableIntrastat = getEnableIntrastat();
            }

        }

        /// <summary>
        /// Method to call when changing the tax code on a tax record.  Validates the tax code and
        /// updates APInvTax tax amounts based on the new tax code. 
        /// </summary>
        /// <param name="ProposedTaxCode">The proposed tax code</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxCode(string ProposedTaxCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            Erp.Tables.APInvTax bApInvTax = null;

            bool apTaxLnLevel = this.ExistsXbSystLineTax(Session.CompanyID, true);

            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvTax");
            }

            SalesTax = SalesTax.FindFirstByPrimaryKey(Db, Session.CompanyID, ProposedTaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.InvalidTaxCode, "APInvTax", "TaxCode");
            }


            if ((ExistsAPInvHed(Session.CompanyID, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum, true) || apTaxLnLevel) && SalesTax.CollectionType != 1)
            {
                {
                    throw new BLException(Strings.InvalidTaxCodeForTaxIncl, "APInvTax", "TaxCode");

                }
            }

            if (((SalesTax.Timing != 0 && SalesTax.Timing != 3) && SalesTax.CollectionType != 0) && !(WhToInterimTax(Session.CompanyID) && SalesTax.CollectionType == 1))
            {
                throw new BLException(Strings.InvoiceTimingForNonInvoiceTaxesIsRequi);
            }

            /* RESET INFO FOR RECALC OF TAX INFO */
            ttAPInvTax.RateCode = "";
            ttAPInvTax.Percent = 0;
            ttAPInvTax.ScrTaxableAmt = 0;
            ttAPInvTax.ScrTaxAmt = 0;
            ttAPInvTax.ScrDocTaxableAmt = 0;
            ttAPInvTax.ScrDocTaxAmt = 0;
            ttAPInvTax.ScrReportableAmt = 0;
            ttAPInvTax.ScrDocReportableAmt = 0;
            ttAPInvTax.Rpt1ScrTaxAmt = 0;
            ttAPInvTax.Rpt1ScrTaxableAmt = 0;
            ttAPInvTax.Rpt1ScrReportableAmt = 0;
            ttAPInvTax.Rpt2ScrTaxAmt = 0;
            ttAPInvTax.Rpt2ScrTaxableAmt = 0;
            ttAPInvTax.Rpt2ScrReportableAmt = 0;
            ttAPInvTax.Rpt3ScrTaxAmt = 0;
            ttAPInvTax.Rpt3ScrTaxableAmt = 0;
            ttAPInvTax.Rpt3ScrReportableAmt = 0;
            ttAPInvTax.ScrDedTaxAmt = 0;
            ttAPInvTax.ScrDocDedTaxAmt = 0;
            ttAPInvTax.Rpt1ScrDedTaxAmt = 0;
            ttAPInvTax.Rpt2ScrDedTaxAmt = 0;
            ttAPInvTax.Rpt3ScrDedTaxAmt = 0;
            ttAPInvTax.ScrDocFixedAmount = 0;
            ttAPInvTax.ScrFixedAmount = 0;
            ttAPInvTax.Rpt1ScrFixedAmount = 0;
            ttAPInvTax.Rpt2ScrFixedAmount = 0;
            ttAPInvTax.Rpt3ScrFixedAmount = 0;
            ttAPInvTax.CollectionType = SalesTax.CollectionType;
            ttAPInvTax.Timing = SalesTax.Timing;

            switch (ttAPInvTax.CollectionType)
            {
                case 0:
                    {
                        ttAPInvTax.DescCollectionType = "Invoice";
                    }
                    break;
                case 1:
                    {
                        ttAPInvTax.DescCollectionType = "WithHolding";
                    }
                    break;
                case 2:
                    {
                        ttAPInvTax.DescCollectionType = "Self-Assessment";
                    }
                    break;
                case 3:
                    {
                        ttAPInvTax.DescCollectionType = "Self-AssessmentDual";
                    }
                    break;
            }

            if (SalesTax.Manual == true)
            {
                ttAPInvTax.Manual = true;
            }

            ttAPInvTax.TaxCode = ProposedTaxCode;


            var BApInvTaxQuery = DBExpressionCompiler.Compile(BApInvTaxExpression);
            bApInvTax = BApInvTaxQuery(Db, Session.CompanyID, ttAPInvTax.TaxCode, ttAPInvTax.InvoiceNum, ttAPInvTax.VendorNum, 0);
            if (bApInvTax == null)
            {


                var SalesTRCQuery3 = DBExpressionCompiler.Compile(SalesTRCExpression3);
                SalesTRC = SalesTRCQuery3(Db, ttAPInvTax.Company, ttAPInvTax.TaxCode, true);
                if (SalesTRC != null)
                {
                    ttAPInvTax.RateCode = SalesTRC.RateCode;
                    ttAPInvTax.RateCodeDescription = SalesTRC.Description;
                    ChangeRateCode(ref ds);
                }
            }
            APInvTax_Foreign_Link();
        }



        /// <summary>
        /// Method to call when changing the tax code on a Invoice Header Misc charge tax record.  Validates the tax code and
        /// updates APInvHedMscTax tax amounts based on the new tax code. 
        /// </summary>
        /// <param name="ProposedTaxCode">The proposed tax code</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxHedMscCode(string ProposedTaxCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            DateTime? vInvDate = null;


            ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in ds.APInvHedMscTax
                                where StringExtensions.Lookup(modList, ttAPInvHedMscTax_Row.RowMod) != -1
                                select ttAPInvHedMscTax_Row).FirstOrDefault();
            if (ttAPInvHedMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvHedMscTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, true));

            SalesTax = SalesTax.FindFirstByPrimaryKey(Db, Session.CompanyID, ProposedTaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.InvalidTaxCode, "APInvHedMscTax", "TaxCode");
            }
            if (SalesTax.CollectionType != 0 && invInPrice)
            {
                throw new BLException(Strings.ColMethodInvoicing);
            }
            if (SalesTax.CollectionType == 1)
            {
                throw new BLException(Strings.WithholdingTaxNotAllowedAtLineLevel, "APInvHedMscTax", "TaxCode");
            }

            if ((SalesTax.CollectionType == 2 || SalesTax.CollectionType == 3) && (SalesTax.Timing != 0 && SalesTax.Timing != 3))
            {
                throw new BLException(Strings.InvoiceTimingForNonInvoiceTaxesIsRequi);
            }


            /* RESET INFO FOR RECALC OF TAX INFO */
            ttAPInvHedMscTax.RateCode = "";
            ttAPInvHedMscTax.Percent = 0;
            ttAPInvHedMscTax.ScrTaxableAmt = 0;
            ttAPInvHedMscTax.ScrTaxAmt = 0;
            ttAPInvHedMscTax.DocScrTaxableAmt = 0;
            ttAPInvHedMscTax.DocScrTaxAmt = 0;
            ttAPInvHedMscTax.ScrReportableAmt = 0;
            ttAPInvHedMscTax.DocScrReportableAmt = 0;
            ttAPInvHedMscTax.Rpt1ScrTaxAmt = 0;
            ttAPInvHedMscTax.Rpt1ScrTaxableAmt = 0;
            ttAPInvHedMscTax.Rpt1ScrReportableAmt = 0;
            ttAPInvHedMscTax.Rpt2ScrTaxAmt = 0;
            ttAPInvHedMscTax.Rpt2ScrTaxableAmt = 0;
            ttAPInvHedMscTax.Rpt2ScrReportableAmt = 0;
            ttAPInvHedMscTax.Rpt3ScrTaxAmt = 0;
            ttAPInvHedMscTax.Rpt3ScrTaxableAmt = 0;
            ttAPInvHedMscTax.Rpt3ScrReportableAmt = 0;
            ttAPInvHedMscTax.ScrDedTaxAmt = 0;
            ttAPInvHedMscTax.DocScrDedTaxAmt = 0;
            ttAPInvHedMscTax.Rpt1ScrDedTaxAmt = 0;
            ttAPInvHedMscTax.Rpt2ScrDedTaxAmt = 0;
            ttAPInvHedMscTax.Rpt3ScrDedTaxAmt = 0;
            ttAPInvHedMscTax.CollectionType = SalesTax.CollectionType;
            ttAPInvHedMscTax.DescCollectionType = "";

            ttAPInvHedMscTax.Manual = !invInPrice ? SalesTax.Manual : true;

            ttAPInvHedMscTax.TaxCode = ProposedTaxCode;

            switch (ttAPInvHedMscTax.CollectionType)
            {
                case 0:
                    {
                        ttAPInvHedMscTax.DescCollectionType = "Invoice";
                    }
                    break;
                case 1:
                    {
                        ttAPInvHedMscTax.DescCollectionType = "WithHolding";
                    }
                    break;
                case 2:
                    {
                        ttAPInvHedMscTax.DescCollectionType = "Self-Assessment";
                    }
                    break;
                case 3:
                    {
                        ttAPInvHedMscTax.DescCollectionType = "Self-AssessmentDual";
                    }
                    break;
            }


            if (!ExistsAPInvHedMscTax(Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, ttAPInvHedMscTax.MscNum, ttAPInvHedMscTax.TaxCode))

            {

                var SalesTRCQuery3 = DBExpressionCompiler.Compile(SalesTRCExpression3);
                SalesTRC = SalesTRCQuery3(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.TaxCode, true);
                if (SalesTRC != null)
                {
                    ttAPInvHedMscTax.RateCode = SalesTRC.RateCode;
                    ttAPInvHedMscTax.RateCodeDescription = SalesTRC.Description;

                }
                if (APInvHed == null)
                {
                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
                }
                if (APInvHed != null)
                {
                    if (APInvHed.TaxRateDate != null)
                    {
                        vInvDate = APInvHed.TaxRateDate;
                    }
                    else if (APInvHed.TaxPoint != null)
                    {
                        vInvDate = APInvHed.TaxPoint;
                    }
                    else if (APInvHed.InvoiceDate != null)
                    {
                        vInvDate = APInvHed.InvoiceDate;
                    }
                    TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, vInvDate.Value);
                    if (TaxRate != null)
                        ttAPInvHedMscTax.Percent = TaxRate.TaxPercent;


                    if (!invInPrice)
                    {
                        ChangeRateCodeHedMsc(ref ds);
                    }
                    APInvHedMscTax_Foreign_Link();
                }
            }
        }

        /// <summary>
        /// Method to call when changing the tax code on a Invoice Line tax record.  Validates the tax code and
        /// updates APLnTax tax amounts based on the new tax code. 
        /// </summary>
        /// <param name="ProposedTaxCode">The proposed tax code</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxLineCode(string ProposedTaxCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            DateTime? vInvDate = null;


            ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                         where StringExtensions.Lookup(modList, ttAPLnTax_Row.RowMod) != -1
                         select ttAPLnTax_Row).FirstOrDefault();
            if (ttAPLnTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APLnTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, true));

            SalesTax = SalesTax.FindFirstByPrimaryKey(Db, Session.CompanyID, ProposedTaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.InvalidTaxCode, "APLnTax", "TaxCode");
            }

            if (SalesTax.CollectionType != 0 && invInPrice)
            {
                throw new BLException(Strings.ColMethodInvoicing);
            }

            if ((SalesTax.CollectionType == 2 || SalesTax.CollectionType == 3) && (SalesTax.Timing != 0 && SalesTax.Timing != 3))
            {
                throw new BLException(Strings.InvoiceTimingForNonInvoiceTaxesIsRequi);
            }

            if (SalesTax.CollectionType == 1)
            {
                throw new BLException(Strings.WithholdingTaxNotAllowedAtLineLevel, "APLnTax", "TaxCode");
            }

            /* RESET INFO FOR RECALC OF TAX INFO */
            ttAPLnTax.RateCode = "";
            ttAPLnTax.Percent = 0;
            ttAPLnTax.ScrTaxableAmt = 0;
            ttAPLnTax.ScrTaxAmt = 0;
            ttAPLnTax.DocScrTaxableAmt = 0;
            ttAPLnTax.DocScrTaxAmt = 0;
            ttAPLnTax.ScrReportableAmt = 0;
            ttAPLnTax.DocScrReportableAmt = 0;
            ttAPLnTax.Rpt1ScrTaxAmt = 0;
            ttAPLnTax.Rpt1ScrTaxableAmt = 0;
            ttAPLnTax.Rpt1ScrReportableAmt = 0;
            ttAPLnTax.Rpt2ScrTaxAmt = 0;
            ttAPLnTax.Rpt2ScrTaxableAmt = 0;
            ttAPLnTax.Rpt2ScrReportableAmt = 0;
            ttAPLnTax.Rpt3ScrTaxAmt = 0;
            ttAPLnTax.Rpt3ScrTaxableAmt = 0;
            ttAPLnTax.Rpt3ScrReportableAmt = 0;
            ttAPLnTax.ScrDedTaxAmt = 0;
            ttAPLnTax.DocScrDedTaxAmt = 0;
            ttAPLnTax.Rpt1ScrDedTaxAmt = 0;
            ttAPLnTax.Rpt2ScrDedTaxAmt = 0;
            ttAPLnTax.Rpt3ScrDedTaxAmt = 0;
            ttAPLnTax.CollectionType = SalesTax.CollectionType;
            ttAPLnTax.DescCollectionType = "";

            ttAPLnTax.Manual = !invInPrice ? SalesTax.Manual : true;

            ttAPLnTax.TaxCode = ProposedTaxCode;


            if (!ExistsAPLnTax(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine, ttAPLnTax.TaxCode))
            {


                var SalesTRCQuery3 = DBExpressionCompiler.Compile(SalesTRCExpression3);
                SalesTRC = SalesTRCQuery3(Db, ttAPLnTax.Company, ttAPLnTax.TaxCode, true);
                if (SalesTRC != null)
                {
                    ttAPLnTax.RateCode = SalesTRC.RateCode;
                    ttAPLnTax.RateCodeDescription = SalesTRC.Description;

                }
                if (APInvHed == null)
                {
                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
                }
                if (APInvHed != null)
                {
                    if (APInvHed.TaxRateDate != null)
                    {
                        vInvDate = APInvHed.TaxRateDate;
                    }
                    else if (APInvHed.TaxPoint != null)
                    {
                        vInvDate = APInvHed.TaxPoint;
                    }
                    else if (APInvHed.InvoiceDate != null)
                    {
                        vInvDate = APInvHed.InvoiceDate;
                    }
                    TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, vInvDate.Value);
                    if (TaxRate != null)
                        ttAPLnTax.Percent = TaxRate.TaxPercent;
                    switch (ttAPLnTax.CollectionType)
                    {
                        case 0:
                            {
                                ttAPLnTax.DescCollectionType = "Invoice";
                            }
                            break;
                        case 1:
                            {
                                ttAPLnTax.DescCollectionType = "WithHolding";
                            }
                            break;
                        case 2:
                            {
                                ttAPLnTax.DescCollectionType = "Self-Assessment";
                            }
                            break;
                        case 3:
                            {
                                ttAPLnTax.DescCollectionType = "Self-AssessmentDual";
                            }
                            break;
                    }
                }
                if (!invInPrice)
                {

                    this.ChangeRateCodeLine(ref ds);
                }
                APLnTax_Foreign_Link();
            }
        }

        /// <summary>
        /// Method to call when changing the tax code on a Invoice Line Misc charge tax record.  Validates the tax code and
        /// updates APLnTax tax amounts based on the new tax code. 
        /// </summary>
        /// <param name="ProposedTaxCode">The proposed tax code</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxLnMscCode(string ProposedTaxCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            DateTime? vInvDate = null;


            ttAPInvLnMscTax = (from ttAPInvLnMscTax_Row in ds.APInvLnMscTax
                               where StringExtensions.Lookup(modList, ttAPInvLnMscTax_Row.RowMod) != -1
                               select ttAPInvLnMscTax_Row).FirstOrDefault();
            if (ttAPInvLnMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvLnMscTax");
            }

            bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, true));

            SalesTax = SalesTax.FindFirstByPrimaryKey(Db, Session.CompanyID, ProposedTaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.InvalidTaxCode, "APInvLnMscTax", "TaxCode");
            }
            if (SalesTax.CollectionType != 0 && invInPrice)
            {
                throw new BLException(Strings.ColMethodInvoicing);
            }
            if (SalesTax.CollectionType == 1)
            {
                throw new BLException(Strings.WithholdingTaxNotAllowedAtLineLevel, "APInvLnMscTax", "TaxCode");
            }

            if ((SalesTax.CollectionType == 2 || SalesTax.CollectionType == 3) && (SalesTax.Timing != 0 && SalesTax.Timing != 3))
            {
                throw new BLException(Strings.InvoiceTimingForNonInvoiceTaxesIsRequi);
            }

            /* RESET INFO FOR RECALC OF TAX INFO */
            ttAPInvLnMscTax.RateCode = "";
            ttAPInvLnMscTax.Percent = 0;
            ttAPInvLnMscTax.ScrTaxableAmt = 0;
            ttAPInvLnMscTax.ScrTaxAmt = 0;
            ttAPInvLnMscTax.DocScrTaxableAmt = 0;
            ttAPInvLnMscTax.DocScrTaxAmt = 0;
            ttAPInvLnMscTax.ScrReportableAmt = 0;
            ttAPInvLnMscTax.DocScrReportableAmt = 0;
            ttAPInvLnMscTax.Rpt1ScrTaxAmt = 0;
            ttAPInvLnMscTax.Rpt1ScrTaxableAmt = 0;
            ttAPInvLnMscTax.Rpt1ScrReportableAmt = 0;
            ttAPInvLnMscTax.Rpt2ScrTaxAmt = 0;
            ttAPInvLnMscTax.Rpt2ScrTaxableAmt = 0;
            ttAPInvLnMscTax.Rpt2ScrReportableAmt = 0;
            ttAPInvLnMscTax.Rpt3ScrTaxAmt = 0;
            ttAPInvLnMscTax.Rpt3ScrTaxableAmt = 0;
            ttAPInvLnMscTax.Rpt3ScrReportableAmt = 0;
            ttAPInvLnMscTax.ScrDedTaxAmt = 0;
            ttAPInvLnMscTax.DocScrDedTaxAmt = 0;
            ttAPInvLnMscTax.Rpt1ScrDedTaxAmt = 0;
            ttAPInvLnMscTax.Rpt2ScrDedTaxAmt = 0;
            ttAPInvLnMscTax.Rpt3ScrDedTaxAmt = 0;
            ttAPInvLnMscTax.CollectionType = SalesTax.CollectionType;
            ttAPInvLnMscTax.DescCollectionType = "";

            ttAPInvLnMscTax.Manual = !invInPrice ? SalesTax.Manual : true;

            ttAPInvLnMscTax.TaxCode = ProposedTaxCode;

            switch (ttAPInvLnMscTax.CollectionType)
            {
                case 0:
                    {
                        ttAPInvLnMscTax.DescCollectionType = "Invoice";
                    }
                    break;
                case 1:
                    {
                        ttAPInvLnMscTax.DescCollectionType = "WithHolding";
                    }
                    break;
                case 2:
                    {
                        ttAPInvLnMscTax.DescCollectionType = "Self-Assessment";
                    }
                    break;
                case 3:
                    {
                        ttAPInvLnMscTax.DescCollectionType = "Self-AssessmentDual";
                    }
                    break;
            }


            if (!ExistsAPInvLnMscTax(Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum, ttAPInvLnMscTax.TaxCode))

            {

                var SalesTRCQuery3 = DBExpressionCompiler.Compile(SalesTRCExpression3);
                SalesTRC = SalesTRCQuery3(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.TaxCode, true);
                if (SalesTRC != null)
                {
                    ttAPInvLnMscTax.RateCode = SalesTRC.RateCode;
                    ttAPInvLnMscTax.RateCodeDescription = SalesTRC.Description;

                }
                if (APInvHed == null)
                {
                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
                }
                if (APInvHed != null)
                {
                    if (APInvHed.TaxRateDate != null)
                    {
                        vInvDate = APInvHed.TaxRateDate;
                    }
                    else if (APInvHed.TaxPoint != null)
                    {
                        vInvDate = APInvHed.TaxPoint;
                    }
                    else if (APInvHed.InvoiceDate != null)
                    {
                        vInvDate = APInvHed.InvoiceDate;
                    }
                    TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, vInvDate.Value);
                    if (TaxRate != null)
                        ttAPInvLnMscTax.Percent = TaxRate.TaxPercent;


                    if (!invInPrice)
                    {
                        ChangeRateCodeLnMsc(ref ds);
                    }
                    APInvLnMscTax_Foreign_Link();
                }
            }
        }
        /// <summary>
        /// Method to call when changing the tax deductible on a tax record.  Updates APInvTax
        /// tax amounts based on the new tax percent. 
        /// </summary>
        /// <param name="proposedTaxDeductable">The proposed tax deductable</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxDeductable(decimal proposedTaxDeductable, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvTax");
            }
            /* If manually adding a Tax */

            if (ttAPInvTax.Manual == true)
            {
                if (((ttAPInvTax.ScrTaxAmt < proposedTaxDeductable) || (ttAPInvTax.ScrTaxAmt + proposedTaxDeductable) == 0))
                {
                    throw new BLException(Strings.DeducAmountCannotExceedTheTaxAmtOrHaveADiffeSign, "APInvTax");
                }
                /* validating CollectionType = "Invoice", "Self-assessment", "Self-assessmentDual" */

                if ((ttAPInvTax.CollectionType != 0 &&
                ttAPInvTax.CollectionType != 3))
                {
                    throw new BLException(Strings.DeducAmountCanBeOnlyAppliToColleTypeInvoiceAnd, "APInvTax");
                }
                if (ttAPInvTax.CurrencySwitch == true)
                {
                    ttAPInvTax.ScrDedTaxAmt = proposedTaxDeductable;
                    CalcTaxDocPrice();
                }
                else
                {
                    ttAPInvTax.ScrDocDedTaxAmt = proposedTaxDeductable;
                    CalcTaxBasePrice();
                }
            }
        }



        /// <summary>
        /// Method to call when changing the tax deductible amount on a AP Invoice header msc charge tax record deductible amount.  
        /// </summary>
        /// <param name="proposedTaxDeductable">The proposed tax deductible</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxHedMscDeductible(decimal proposedTaxDeductable, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in ds.APInvHedMscTax
                                where StringExtensions.Lookup(modList, ttAPInvHedMscTax_Row.RowMod) != -1
                                select ttAPInvHedMscTax_Row).FirstOrDefault();
            if (ttAPInvHedMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvHedMscTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPInvHedMscTax.CurrencySwitch == true)
            {
                if (((ttAPInvHedMscTax.ScrTaxAmt < proposedTaxDeductable) || (ttAPInvHedMscTax.ScrTaxAmt + proposedTaxDeductable) == 0))
                {
                    throw new BLException(Strings.DeducAmountCannotExceedTheTaxAmtOrHaveADiffeSign, "APInvHedMscTax");
                }

                ttAPInvHedMscTax.ScrDedTaxAmt = proposedTaxDeductable;
                ttAPInvHedMscTax.DocScrDedTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHedMscTax.ScrDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHedMscTax", "DocScrDedTaxAmt");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, false, "ScrDedTaxAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
            else
            {
                if (((ttAPInvHedMscTax.DocScrTaxAmt < proposedTaxDeductable) || (ttAPInvHedMscTax.DocScrTaxAmt + proposedTaxDeductable) == 0))
                {
                    throw new BLException(Strings.DeducAmountCannotExceedTheTaxAmtOrHaveADiffeSign, "APInvHedMscTax");
                }
                ttAPInvHedMscTax.DocScrDedTaxAmt = proposedTaxDeductable;
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, "ScrDedTaxAmt", pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }

        /// <summary>
        /// Method to call when changing the tax deductible on a AP Invoice line tax record.  
        /// </summary>
        /// <param name="proposedTaxDeductable">The proposed tax deductible</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxLineDeductible(decimal proposedTaxDeductable, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                         where StringExtensions.Lookup(modList, ttAPLnTax_Row.RowMod) != -1
                         select ttAPLnTax_Row).FirstOrDefault();
            if (ttAPLnTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APLnTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPLnTax.CurrencySwitch == true)
            {
                if (((ttAPLnTax.ScrTaxAmt < proposedTaxDeductable) || (ttAPLnTax.ScrTaxAmt + proposedTaxDeductable) == 0))
                {
                    throw new BLException(Strings.DeducAmountCannotExceedTheTaxAmtOrHaveADiffeSign, "APLnTax");
                }

                ttAPLnTax.ScrDedTaxAmt = proposedTaxDeductable;
                ttAPLnTax.DocScrDedTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPLnTax.ScrDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPLnTax", "DocScrDedTaxAmt");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, false, "ScrDedTaxAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
            }
            else
            {
                if (((ttAPLnTax.DocScrTaxAmt < proposedTaxDeductable) || (ttAPLnTax.DocScrTaxAmt + proposedTaxDeductable) == 0))
                {
                    throw new BLException(Strings.DeducAmountCannotExceedTheTaxAmtOrHaveADiffeSign, "APLnTax");
                }
                ttAPLnTax.DocScrDedTaxAmt = proposedTaxDeductable;
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, "ScrDedTaxAmt", pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }


        /// <summary>
        /// Method to call when changing the tax deductible amount on a AP Invoice line msc charge tax record.  
        /// </summary>
        /// <param name="proposedTaxDeductable">The proposed tax deductible</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxLnMscDeductible(decimal proposedTaxDeductable, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvLnMscTax = (from ttAPInvLnMscTax_Row in ds.APInvLnMscTax
                               where StringExtensions.Lookup(modList, ttAPInvLnMscTax_Row.RowMod) != -1
                               select ttAPInvLnMscTax_Row).FirstOrDefault();
            if (ttAPInvLnMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvLnMscTax");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            if (ttAPInvLnMscTax.CurrencySwitch == true)
            {
                if (((ttAPInvLnMscTax.ScrTaxAmt < proposedTaxDeductable) || (ttAPInvLnMscTax.ScrTaxAmt + proposedTaxDeductable) == 0))
                {
                    throw new BLException(Strings.DeducAmountCannotExceedTheTaxAmtOrHaveADiffeSign, "APInvLnMscTax");
                }

                ttAPInvLnMscTax.ScrDedTaxAmt = proposedTaxDeductable;
                ttAPInvLnMscTax.DocScrDedTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvLnMscTax.ScrDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvLnMscTax", "DocScrDedTaxAmt");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, false, "ScrDedTaxAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
            else
            {
                if (((ttAPInvLnMscTax.DocScrTaxAmt < proposedTaxDeductable) || (ttAPInvLnMscTax.DocScrTaxAmt + proposedTaxDeductable) == 0))
                {
                    throw new BLException(Strings.DeducAmountCannotExceedTheTaxAmtOrHaveADiffeSign, "APInvLnMscTax");
                }
                ttAPInvLnMscTax.DocScrDedTaxAmt = proposedTaxDeductable;
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, "ScrDedTaxAmt", pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
            }
        }

        /// <summary>
        /// Method to call when changing the lock rate flag on the invoice.  Updates 
        /// APInvHed.EnableTaxExRate field.
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxLock(ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable);
            }
            ttAPInvHed.EnableTaxExRate = ttAPInvHed.LockTaxRate;
        }

        /// <summary>
        /// Method to call when changing the tax percent on a tax record.  Updates APInvTax
        /// tax amounts based on the new tax percent. 
        /// </summary>
        /// <param name="ProposedTaxPercent">The proposed tax percent</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxPercent(decimal ProposedTaxPercent, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            DateTime? vInvDate = null;
            DateTime? taxdate = null;
            decimal tmpTax = decimal.Zero;
            decimal doctmpTax = decimal.Zero;
            decimal rpt1tmpTax = decimal.Zero;
            decimal rpt2tmptax = decimal.Zero;
            decimal rpt3tmptax = decimal.Zero;


            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvTax");
            }
            if (ttAPInvTax.Manual != true)
            {
                throw new BLException(Strings.ChangeOfTaxPercentIsAllowedOnlyForManualTaxLines, "APInvTax");
            }
            ttAPInvTax.Percent = ProposedTaxPercent;


            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            if (APInvHed.TaxRateDate != null)
            {
                vInvDate = APInvHed.TaxRateDate;
            }
            else if (APInvHed.TaxPoint != null)
            {
                vInvDate = APInvHed.TaxPoint;
            }
            else if (APInvHed.InvoiceDate != null)
            {
                vInvDate = APInvHed.InvoiceDate;
            }



            TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, vInvDate.Value);
            if (TaxRate == null)
            {
                throw new BLException(Strings.TaxRateIsNotAvailable, "APInvTax");
            }
            if (ttAPInvTax.Manual == true)
            {
                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

                if (XbSyst != null && XbSyst.UseTaxRate)
                {
                    taxdate = ((APInvHed.TaxRateDate != null) ? APInvHed.TaxRateDate : ((APInvHed.TaxPoint != null) ? APInvHed.TaxPoint : ((vUseDate == 1) ? APInvHed.InvoiceDate : APInvHed.ApplyDate)));
                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(taxdate, "ApInvHed-Tax", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.TaxRateGrpCode, APInvHed.LockTaxRate, out tmpTaxChainRows, out taxCurrList, out taxRateList);
                }
                ttAPInvTax.ScrDocTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvTax.ScrDocTaxableAmt, ttAPInvTax.Percent, ttAPInvTax.TaxCode, APInvHed.CurrencyCode) + ttAPInvTax.ScrDocFixedAmount;
                doctmpTax = ttAPInvTax.ScrDocTaxAmt;
                ttAPInvTax.ScrDocDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvTax.ScrDocTaxAmt, TaxRate.DeductPercent, ttAPInvTax.TaxCode, "");

                string fieldNameScrTaxAmt = string.Empty;
                string fieldNameScrDedTaxAmt = string.Empty;


                if (XbSyst != null && XbSyst.UseTaxRate && ((from tmpTaxChain_Row in tmpTaxChainRows
                                                             select tmpTaxChain_Row).Any()))
                {
                    ttAPInvTax.ScrTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "APInvTax", "TaxAmt");
                    ttAPInvTax.ScrDedTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "APInvTax", "DedTaxAmt");

                    for (i = 2; i <= 4; i++)
                    {
                        if (taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrTaxAmt = "Rpt" + (i - 1).ToString() + "ScrTaxAmt";
                            fieldNameScrDedTaxAmt = "Rpt" + (i - 1).ToString() + "ScrDedTaxAmt";

                            ttAPInvTax[fieldNameScrTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPinvTax", "ScrTaxAmt");
                            ttAPInvTax[fieldNameScrDedTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPinvTax", "ScrDedTaxAmt");
                        }
                    }

                    LibRptfieldscalc.ConvertAmtVarRoundDec(pCurrList, APInvHed.CurrencyCode, ttChainRows, "APInvHed", "TaxAmt", doctmpTax, out rpt1tmpTax, out rpt2tmptax, out rpt3tmptax);
                    ttAPInvTax.ScrTaxAmtVar = tmpTax - ttAPInvTax.ScrTaxAmt;
                    ttAPInvTax.Rpt1ScrTaxAmtVar = rpt1tmpTax - ttAPInvTax.Rpt1ScrTaxAmt;
                    ttAPInvTax.Rpt2ScrTaxAmtVar = rpt2tmptax - ttAPInvTax.Rpt2ScrTaxAmt;
                    ttAPInvTax.Rpt3ScrTaxAmtVar = rpt3tmptax - ttAPInvTax.Rpt3ScrTaxAmt;
                }
                else
                {
                    ttAPInvTax.ScrTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvTax", "TaxAmt");
                    ttAPInvTax.ScrDedTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvTax", "DedTaxAmt");

                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrTaxAmt = "Rpt" + (i - 1).ToString() + "ScrTaxAmt";
                            fieldNameScrDedTaxAmt = "Rpt" + (i - 1).ToString() + "ScrDedTaxAmt";

                            ttAPInvTax[fieldNameScrTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrTaxAmt");
                            ttAPInvTax[fieldNameScrDedTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrDedTaxAmt");
                        }
                    }
                }
            }
        }


        /// <summary>
        /// Method to call when changing the tax percent on a AP Invoice header misc charge tax record.  Updates APInvHedMscTax
        /// tax amounts based on the new tax percent only when one tax record exists. 
        /// </summary>
        /// <param name="ProposedTaxPercent">The proposed tax percent</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxHedMscPercent(decimal ProposedTaxPercent, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            DateTime? vInvDate = null;
            decimal docTotalInTaxable = decimal.Zero;



            ttAPInvHedMscTax = (from ttAPInvHedMscTax_Row in ds.APInvHedMscTax
                                where StringExtensions.Lookup(modList, ttAPInvHedMscTax_Row.RowMod) != -1
                                select ttAPInvHedMscTax_Row).FirstOrDefault();
            if (ttAPInvHedMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvHedMscTax");
            }
            if (APInvHed == null)
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            }
            if (APInvHed != null)
            {
                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }
                TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, vInvDate.Value);
                if (TaxRate != null)
                {
                    ttAPInvHedMscTax.Percent = ProposedTaxPercent;
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPInvHedMscTax.VendorNum), Compatibility.Convert.ToString(ttAPInvHedMscTax.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                    bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, true));
                    if (invInPrice)
                    {
                        if (!ExistsAPInvHedMscTaxOld(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, ttAPInvHedMscTax.MscNum, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, ttAPInvHedMscTax.ECAcquisitionSeq))

                        {

                            var apInvMsc = this.FindFirstAPInvMsc(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, 0, ttAPInvHedMscTax.MscNum);
                            if (apInvMsc != null)
                            {

                                docTotalInTaxable = apInvMsc.DocInMiscAmt;

                                ttAPInvHedMscTax.DocTaxableAmt = LibRoundRulesEF.RoundRuleApply((docTotalInTaxable / (1 + (ttAPInvHedMscTax.Percent / 100))), LibRoundRulesEF.TypeAmt_ExtPrice, APInvHed.CurrencyCode);
                                ttAPInvHedMscTax.DocTaxAmt = docTotalInTaxable - ttAPInvHedMscTax.DocTaxableAmt;
                                ttAPInvHedMscTax.DocDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvHedMscTax.DocTaxAmt, TaxRate.DeductPercent, ttAPInvHedMscTax.TaxCode, "");
                                ttAPInvHedMscTax.DocReportableAmt = ttAPInvHedMscTax.DocTaxableAmt;

                                if (APInvHed.DebitMemo)
                                {
                                    ttAPInvHedMscTax.DocScrTaxableAmt = -ttAPInvHedMscTax.DocTaxableAmt;
                                    ttAPInvHedMscTax.DocScrReportableAmt = -ttAPInvHedMscTax.DocReportableAmt;
                                    ttAPInvHedMscTax.DocScrTaxAmt = -ttAPInvHedMscTax.DocTaxAmt;
                                    ttAPInvHedMscTax.DocScrDedTaxAmt = -ttAPInvHedMscTax.DocDedTaxAmt;
                                }
                                else
                                {
                                    ttAPInvHedMscTax.DocScrTaxableAmt = ttAPInvHedMscTax.DocTaxableAmt;
                                    ttAPInvHedMscTax.DocScrReportableAmt = ttAPInvHedMscTax.DocReportableAmt;
                                    ttAPInvHedMscTax.DocScrTaxAmt = ttAPInvHedMscTax.DocTaxAmt;
                                    ttAPInvHedMscTax.DocScrDedTaxAmt = ttAPInvHedMscTax.DocDedTaxAmt;
                                }

                                string cRFieldList = "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt" + Ice.Constants.LIST_DELIM + "ScrTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrReportableAmt" + Ice.Constants.LIST_DELIM + "DedTaxAmt" + Ice.Constants.LIST_DELIM + "TaxAmt" + Ice.Constants.LIST_DELIM + "TaxableAmt" + Ice.Constants.LIST_DELIM + "ReportableAmt";
                                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, cRFieldList, pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);


                            }

                        }
                    } // if Invoice inPrice
                    else
                    {
                        ttAPInvHedMscTax.Percent = ProposedTaxPercent;
                        ttAPInvHedMscTax.DocScrTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvHedMscTax.DocScrTaxableAmt, ttAPInvHedMscTax.Percent, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.CurrencyCode) + ttAPInvHedMscTax.DocScrFixedAmount;
                        ttAPInvHedMscTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvHedMscTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPInvHedMscTax.TaxCode, "");
                        string cRFieldList = "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, cRFieldList, pCurrList, "ttAPInvHedMscTax", ttAPInvHedMscTax.CurrencyCode, ttChainRows);

                    }  //not 'In Price'
                }  //TaxRate
            } //APInvHed
        }


        /// <summary>
        /// Method to call when changing the tax percent on a AP Invoice line tax record.  Updates APLnTax
        /// tax amounts based on the new tax percent only when one tax record exists. 
        /// </summary>
        /// <param name="ProposedTaxPercent">The proposed tax percent</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxLinePercent(decimal ProposedTaxPercent, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            DateTime? vInvDate = null;
            decimal docTotalInTaxable = decimal.Zero;



            ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                         where StringExtensions.Lookup(modList, ttAPLnTax_Row.RowMod) != -1
                         select ttAPLnTax_Row).FirstOrDefault();
            if (ttAPLnTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APLnTax");
            }
            if (APInvHed == null)
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            }
            if (APInvHed != null)
            {
                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }
                TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, vInvDate.Value);
                if (TaxRate != null)
                {
                    ttAPLnTax.Percent = ProposedTaxPercent;
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPLnTax.VendorNum), Compatibility.Convert.ToString(ttAPLnTax.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                    bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, true));
                    if (invInPrice)
                    {
                        if (ExistsAPLnTax(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine, ttAPLnTax.TaxCode, ttAPLnTax.RateCode) == false)
                        {

                            var APInvDtl = FindFirstAPInvDtl2(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine);
                            if (APInvDtl != null)
                            {


                                docTotalInTaxable = APInvDtl.DocInExtCost;

                                ttAPLnTax.DocTaxableAmt = LibRoundRulesEF.RoundRuleApply((docTotalInTaxable / (1 + (ttAPLnTax.Percent / 100))), LibRoundRulesEF.TypeAmt_ExtPrice, APInvHed.CurrencyCode);
                                ttAPLnTax.DocTaxAmt = docTotalInTaxable - ttAPLnTax.DocTaxableAmt;
                                ttAPLnTax.DocDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPLnTax.DocTaxAmt, TaxRate.DeductPercent, ttAPLnTax.TaxCode, "");
                                ttAPLnTax.DocReportableAmt = ttAPLnTax.DocTaxableAmt;

                                if (APInvHed.DebitMemo == true)
                                {
                                    ttAPLnTax.DocScrTaxableAmt = -ttAPLnTax.DocTaxableAmt;
                                    ttAPLnTax.DocScrReportableAmt = -ttAPLnTax.DocReportableAmt;
                                    ttAPLnTax.DocScrTaxAmt = -ttAPLnTax.DocTaxAmt;
                                    ttAPLnTax.DocScrDedTaxAmt = -ttAPLnTax.DocDedTaxAmt;
                                }
                                else
                                {
                                    ttAPLnTax.DocScrTaxableAmt = ttAPLnTax.DocTaxableAmt;
                                    ttAPLnTax.DocScrReportableAmt = ttAPLnTax.DocReportableAmt;
                                    ttAPLnTax.DocScrTaxAmt = ttAPLnTax.DocTaxAmt;
                                    ttAPLnTax.DocScrDedTaxAmt = ttAPLnTax.DocDedTaxAmt;
                                }

                                string cRFieldList = "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt" + Ice.Constants.LIST_DELIM + "ScrTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrReportableAmt" + Ice.Constants.LIST_DELIM + "DedTaxAmt" + Ice.Constants.LIST_DELIM + "TaxAmt" + Ice.Constants.LIST_DELIM + "TaxableAmt" + Ice.Constants.LIST_DELIM + "ReportableAmt";
                                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, cRFieldList, pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);


                            }

                        }
                    } // if Invoice inPrice
                    else
                    {
                        ttAPLnTax.Percent = ProposedTaxPercent;
                        ttAPLnTax.DocScrTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPLnTax.DocScrTaxableAmt, ttAPLnTax.Percent, ttAPLnTax.TaxCode, ttAPLnTax.CurrencyCode) + ttAPLnTax.DocScrFixedAmount;
                        ttAPLnTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPLnTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPLnTax.TaxCode, "");
                        string cRFieldList = "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, cRFieldList, pCurrList, "ttAPLnTax", ttAPLnTax.CurrencyCode, ttChainRows);

                    }  //not 'In Price'
                }  //TaxRate
            } //APInvHed
        }


        /// <summary>
        /// Method to call when changing the tax percent on a AP Invoice line misc charge tax record.  Updates APInvLnMscTax
        /// tax amounts based on the new tax percent only when one tax record exists. 
        /// </summary>
        /// <param name="ProposedTaxPercent">The proposed tax percent</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTaxLnMscPercent(decimal ProposedTaxPercent, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            DateTime? vInvDate = null;
            decimal docTotalInTaxable = decimal.Zero;



            ttAPInvLnMscTax = (from ttAPInvLnMscTax_Row in ds.APInvLnMscTax
                               where StringExtensions.Lookup(modList, ttAPInvLnMscTax_Row.RowMod) != -1
                               select ttAPInvLnMscTax_Row).FirstOrDefault();
            if (ttAPInvLnMscTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvLnMscTax");
            }
            if (APInvHed == null)
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            }
            if (APInvHed != null)
            {
                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }
                TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, vInvDate.Value);
                if (TaxRate != null)
                {
                    ttAPInvLnMscTax.Percent = ProposedTaxPercent;
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPInvLnMscTax.VendorNum), Compatibility.Convert.ToString(ttAPInvLnMscTax.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                    bool invInPrice = (ExistsAPInvHed(Session.CompanyID, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, true));
                    if (invInPrice)
                    {
                        if (!ExistsAPInvLnMscTaxOld(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, ttAPInvLnMscTax.ECAcquisitionSeq))

                        {

                            var apInvMsc = this.FindFirstAPInvMsc(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum);
                            if (apInvMsc != null)
                            {

                                docTotalInTaxable = apInvMsc.DocInMiscAmt;

                                ttAPInvLnMscTax.DocTaxableAmt = LibRoundRulesEF.RoundRuleApply((docTotalInTaxable / (1 + (ttAPInvLnMscTax.Percent / 100))), LibRoundRulesEF.TypeAmt_ExtPrice, APInvHed.CurrencyCode);
                                ttAPInvLnMscTax.DocTaxAmt = docTotalInTaxable - ttAPInvLnMscTax.DocTaxableAmt;
                                ttAPInvLnMscTax.DocDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvLnMscTax.DocTaxAmt, TaxRate.DeductPercent, ttAPInvLnMscTax.TaxCode, "");
                                ttAPInvLnMscTax.DocReportableAmt = ttAPInvLnMscTax.DocTaxableAmt;

                                if (APInvHed.DebitMemo)
                                {
                                    ttAPInvLnMscTax.DocScrTaxableAmt = -ttAPInvLnMscTax.DocTaxableAmt;
                                    ttAPInvLnMscTax.DocScrReportableAmt = -ttAPInvLnMscTax.DocReportableAmt;
                                    ttAPInvLnMscTax.DocScrTaxAmt = -ttAPInvLnMscTax.DocTaxAmt;
                                    ttAPInvLnMscTax.DocScrDedTaxAmt = -ttAPInvLnMscTax.DocDedTaxAmt;
                                }
                                else
                                {
                                    ttAPInvLnMscTax.DocScrTaxableAmt = ttAPInvLnMscTax.DocTaxableAmt;
                                    ttAPInvLnMscTax.DocScrReportableAmt = ttAPInvLnMscTax.DocReportableAmt;
                                    ttAPInvLnMscTax.DocScrTaxAmt = ttAPInvLnMscTax.DocTaxAmt;
                                    ttAPInvLnMscTax.DocScrDedTaxAmt = ttAPInvLnMscTax.DocDedTaxAmt;
                                }

                                string cRFieldList = "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt" + Ice.Constants.LIST_DELIM + "ScrTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrReportableAmt" + Ice.Constants.LIST_DELIM + "DedTaxAmt" + Ice.Constants.LIST_DELIM + "TaxAmt" + Ice.Constants.LIST_DELIM + "TaxableAmt" + Ice.Constants.LIST_DELIM + "ReportableAmt";
                                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, cRFieldList, pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);


                            }

                        }
                    } // if Invoice inPrice
                    else
                    {
                        ttAPInvLnMscTax.Percent = ProposedTaxPercent;
                        ttAPInvLnMscTax.DocScrTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvLnMscTax.DocScrTaxableAmt, ttAPInvLnMscTax.Percent, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.CurrencyCode) + ttAPInvLnMscTax.DocScrFixedAmount;
                        ttAPInvLnMscTax.DocScrDedTaxAmt = this.LibCalcTaxAmtEF.TaxAmountRoundDec(ttAPInvLnMscTax.DocScrTaxAmt, TaxRate.DeductPercent, ttAPInvLnMscTax.TaxCode, "");
                        string cRFieldList = "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, cRFieldList, pCurrList, "ttAPInvLnMscTax", ttAPInvLnMscTax.CurrencyCode, ttChainRows);

                    }  //not 'In Price'
                }  //TaxRate
            } //APInvHed
        }


        /// <summary>
        /// Method to call when changing the terms code on the invoice.  Validates the terms code and
        /// updates APInvHed with default values based on the new code. 
        /// </summary>
        /// <param name="ProposedTermsCode">The proposed terms code</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeTermsCode(string ProposedTermsCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }



            var PurTermsQuery2 = DBExpressionCompiler.Compile(PurTermsExpression2);
            if (!PurTermsQuery2(Db, Session.CompanyID, ProposedTermsCode))
            {
                throw new BLException(Strings.InvalidTermsCode, "APInvHed", "TermsCode");
            }
            ttAPInvHed.TermsCode = ProposedTermsCode;

            PurTerms = PurTerms.FindFirstByPrimaryKey(Db, Session.CompanyID, ProposedTermsCode);
            if (PurTerms != null)
            {
                ttAPInvHed.PayDiscPartPay = PurTerms.PartPayment;
                if (isColLocalization)
                {
                    ttAPInvHed.COIFRSCalculation = PurTerms.COIFRSCalculation;
                    ttAPInvHed.COIFRSNumberOfPeriods = PurTerms.COIFRSNumberOfPeriods;

                }
            }

            if (isVNLocalization && PurTerms.TermsType.KeyEquals("L"))
            {
                ttAPInvHed.DueDate = null;
            }
            SetDatesDiscount(true);
            APInvHed_Foreign_Link();
        }

        /// <summary>
        /// Method to call when changing the DiscountAmt on the invoice. 
        /// </summary>
        /// <param name="ProposedDiscountAmt">The proposed discount amount</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeFixedDiscount(decimal ProposedDiscountAmt, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            string fieldNameScrDiscountAmt = string.Empty;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }

            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

            if (ttAPInvHed.CurrencySwitch == true)
            {
                ttAPInvHed.ScrDiscountAmt = ProposedDiscountAmt;

                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.ScrDocDiscountAmt = ttAPInvHed.ScrDiscountAmt;
                }
                else
                {
                    ttAPInvHed.ScrDocDiscountAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDiscountAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "ScrDocDiscountAmt");

                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrDiscountAmt = "Rpt" + (i - 1).ToString() + "ScrDiscountAmt";
                            ttAPInvHed[fieldNameScrDiscountAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocDiscountAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrDiscountAmt");
                        }
                    }
                }
            }
            else
            {
                ttAPInvHed.ScrDocDiscountAmt = ProposedDiscountAmt;

                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.ScrDiscountAmt = ttAPInvHed.ScrDocDiscountAmt;
                }
                else
                {
                    ttAPInvHed.ScrDiscountAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocDiscountAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrDiscountAmt");
                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrDiscountAmt = "Rpt" + (i - 1).ToString() + "ScrDiscountAmt";
                            ttAPInvHed[fieldNameScrDiscountAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocDiscountAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrDiscountAmt");
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Method to call when changing the unit cost on the invoice detail.  Updates APInvDtl
        /// with default values based on the new unit cost. 
        /// </summary>
        /// <param name="ProposedUnitCost">The proposed unit cost</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeUnitCost(decimal ProposedUnitCost, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            bool chgCost = false;
            Erp.Tables.APInvHed bRefAPInvHed = null;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvDtl");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);

            if (APInvHed.InvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
            {
                if (!String.IsNullOrEmpty(ttAPInvDtl.InvoiceRef))
                {


                    bRefAPInvHed = FindFirstAPInvHed(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceRef);
                    if (bRefAPInvHed != null)
                    {
                        dOldExtCost = 0;
                        dOldDocExtCost = 0;
                        if (StringExtensions.Compare(ttAPInvDtl.RowMod, "A") != 0)
                        {

                            var APTranQuery2 = DBExpressionCompiler.Compile(APTranExpression2);
                            APTran = APTranQuery2(Db, Session.CompanyID, APInvHed.HeadNum, ttAPInvDtl.InvoiceRef, "Pay");
                            if (APTran != null)
                            {
                                dOldExtCost = APTran.TranAmt;
                                dOldDocExtCost = APTran.DocTranAmt;
                            }
                        }
                        /* base currency */
                        if (ttAPInvDtl.CurrencySwitch)
                        {
                            if (Math.Abs(ProposedUnitCost) > bRefAPInvHed.UnpostedBal + dOldExtCost)
                            {
                                ExceptionManager.AddBLException(Strings.AmountEnteredCannotExceedTheReferInvoiceBalance, "ttAPInvDtl", "ExtCost");
                            }
                        }
                        else
                        {
                            if (Math.Abs(ProposedUnitCost) > bRefAPInvHed.DocUnpostedBal + dOldDocExtCost)
                            {
                                ExceptionManager.AddBLException(Strings.AmountEnteredCannotExceedTheReferInvoiceBalance, "ttAPInvDtl", "ExtCost");
                            }
                        }
                    }
                }
            }/* if isBillOfExchange = true */

            /* if ttAPInvDtl.CurrencySwitch = true */
            if (ttAPInvDtl.CurrencySwitch == true)
            {
                chgCost = ttAPInvDtl.UnitCost == ProposedUnitCost;
                ttAPInvDtl.UnitCost = ProposedUnitCost;
                var outUnitCost4 = ttAPInvDtl.UnitCost;
                var outDocUnitCost2 = ttAPInvDtl.DocUnitCost;
                var outRpt1UnitCost4 = ttAPInvDtl.Rpt1UnitCost;
                var outRpt2UnitCost4 = ttAPInvDtl.Rpt2UnitCost;
                var outRpt3UnitCost4 = ttAPInvDtl.Rpt3UnitCost;
                CalcDocAmt(ref outUnitCost4, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "DocUnitCost", "UnitCost", out outDocUnitCost2, out outRpt1UnitCost4, out outRpt2UnitCost4, out outRpt3UnitCost4);
                ttAPInvDtl.UnitCost = outUnitCost4;
                ttAPInvDtl.DocUnitCost = outDocUnitCost2;
                ttAPInvDtl.Rpt1UnitCost = outRpt1UnitCost4;
                ttAPInvDtl.Rpt2UnitCost = outRpt2UnitCost4;
                ttAPInvDtl.Rpt3UnitCost = outRpt3UnitCost4;
            }
            else
            {
                chgCost = ttAPInvDtl.DocUnitCost == ProposedUnitCost;
                ttAPInvDtl.DocUnitCost = ProposedUnitCost;
                var outUnitCost5 = ttAPInvDtl.UnitCost;
                var outRpt1UnitCost5 = ttAPInvDtl.Rpt1UnitCost;
                var outRpt2UnitCost5 = ttAPInvDtl.Rpt2UnitCost;
                var outRpt3UnitCost5 = ttAPInvDtl.Rpt3UnitCost;
                CalcBaseAmt(ttAPInvDtl.DocUnitCost, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "UnitCost", out outUnitCost5, out outRpt1UnitCost5, out outRpt2UnitCost5, out outRpt3UnitCost5);
                ttAPInvDtl.UnitCost = outUnitCost5;
                ttAPInvDtl.Rpt1UnitCost = outRpt1UnitCost5;
                ttAPInvDtl.Rpt2UnitCost = outRpt2UnitCost5;
                ttAPInvDtl.Rpt3UnitCost = outRpt3UnitCost5;
            }/* else do */


            ttAPInvDtl.ScrUnitCost = ttAPInvDtl.UnitCost;
            ttAPInvDtl.DocScrUnitCost = ttAPInvDtl.DocUnitCost;
            ttAPInvDtl.Rpt1ScrUnitCost = ttAPInvDtl.Rpt1UnitCost;
            ttAPInvDtl.Rpt2ScrUnitCost = ttAPInvDtl.Rpt2UnitCost;
            ttAPInvDtl.Rpt3ScrUnitCost = ttAPInvDtl.Rpt3UnitCost;


            if (APInvHed.InPrice == true)
            {
                ttAPInvDtl.InUnitCost = ttAPInvDtl.UnitCost;
                ttAPInvDtl.DocInUnitCost = ttAPInvDtl.DocUnitCost;
                ttAPInvDtl.Rpt1InUnitCost = ttAPInvDtl.Rpt1UnitCost;
                ttAPInvDtl.Rpt2InUnitCost = ttAPInvDtl.Rpt2UnitCost;
                ttAPInvDtl.Rpt3InUnitCost = ttAPInvDtl.Rpt3UnitCost;
            }

            CalcExtCost();

            getLineTotals();
        }

        /// <summary>
        /// Method to call when changing the vendor id on the invoice.  Validates the vendor id and
        /// updates APInvHed with values from the new vendor. 
        /// </summary>
        /// <param name="ProposedVendorID">The proposed vendor id</param>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="confirmCheck">Confirm Check</param>
        /// <param name="confirmMsg">Confirmation Message</param>
        public void ChangeVendorID(string ProposedVendorID, bool confirmCheck, out string confirmMsg, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            confirmMsg = string.Empty;

            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");

            int vendorNum = ttAPInvHed.VendorNum;

            Vendor = FindFirstVendor(Session.CompanyID, ProposedVendorID);
            if (Vendor == null)
                throw new BLException(Strings.InvalidVendor, "APInvHed", "VendorNum");

            if (!ttAPInvHed.DebitMemo && !ttAPInvHed.GRNIClearing && confirmCheck && Vendor.Inactive && Vendor.VendorNum != vendorNum)
            {
                confirmMsg = Strings.InactiveSupplierConfirmation(Vendor.VendorID);
                return;
            }

            getVendorDefaults();

            if (!ttAPInvHed.GRNIClearing)
                ttAPInvHed.InvoiceNum = "";

            ttAPInvHed.InvoiceRef = string.Empty;
            ttAPInvHed.ScrInvoiceRef = string.Empty;
            ttAPInvHed.REFPONum = 0;
            ttAPInvHed.BankID = string.Empty;
            ttAPInvHed.BankName = string.Empty;
            ttAPInvHed.VendorInactive = Vendor.Inactive;
            ChangePrePayment(string.Empty, ref ds);
            GetCurrency(Vendor.CurrencyCode);
            getExchangeRate("CURR"); /* Get current exchange rate for the currency */

            if (isTaiwanLocalization)
            {
                ttAPInvHed.TWGUIRegNumSeller = Vendor.TWGUIRegNum;
            }

            APInvHed_Foreign_Link();
            GetVendorBankInfoDefault(Vendor.VendorID);

            ttAPInvHed.FormattedVendorNameAddress = FormatNameAddress(ttAPInvHed);
        }

        private void GetVendorBankInfoDefault(string pcVendorID)
        {
            if (String.IsNullOrEmpty(pcVendorID))
            {
                return;
            }

            Vendor = this.FindFirstVendor(Session.CompanyID, pcVendorID);
            if (Vendor == null)
            {
                throw new BLException(Strings.AValidSupplierIsRequired, "APInvoice", "VendorNum");
            }
            /* find vendor bank */
            if (!String.IsNullOrEmpty(Vendor.PrimaryBankID))
            {
                VendBank = this.FindFirstVendBank(Vendor.Company, Vendor.VendorNum, Vendor.PrimaryBankID);
            }
            if (VendBank != null)
            {
                ttAPInvHed.BankID = VendBank.BankID;
                ttAPInvHed.BankName = VendBank.BankName;
            }
            else
            {
                ttAPInvHed.BankID = String.Empty;
                ttAPInvHed.BankName = String.Empty;
            }
        }

        /// <summary>
        /// Method to call when changing the vendor quantity on the invoice detail.  Updates APInvDtl
        /// with default values based on the new quantity. 
        /// </summary>
        /// <param name="ProposedVendorQty">The proposed vendor quantity</param>
        /// <param name="ds">The APInvoice data set</param>
        public void ChangeVendorQty(decimal ProposedVendorQty, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            decimal oldScrVendorQty = decimal.Zero;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvDtl");
            }
            oldScrVendorQty = ttAPInvDtl.ScrVendorQty;
            ttAPInvDtl.ScrVendorQty = ProposedVendorQty;
            ttAPInvDtl.FinalInvoice = (ttAPInvDtl.ScrVendorQty >= (getRcvDtlLineSuppUninvoicedQty(Session.CompanyID, ttAPInvDtl.PackSlip, ttAPInvDtl.PONum, ttAPInvDtl.PackLine) + oldScrVendorQty)) ? true : ttAPInvDtl.FinalInvoice;
            CalcExtCost();
            getLineTotals();
        }

        /// <summary>
        /// Before updating the APInvHed record, CheckBankRef will be called to check if the
        /// bank reference conforms to format standards.  If not, the user will be
        /// presented with a warning message and allowed to continue with the save.
        /// At this time this method is specific to Finland/Sweden localization
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="OpMessage">The Message to ask the user if the changes for the linked AP Invoice are okay.</param>
        public void CheckBankRef(ref APInvoiceTableset ds, out string OpMessage)
        {
            OpMessage = string.Empty;
            string OpError = string.Empty;

            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                return;
            }

            chkBankRefCore(out OpMessage, out OpError);
            if (isNorwayLocalization && !String.IsNullOrEmpty(OpError))
            {
                throw new BLException(OpError);
            }
        }

        /// <summary>
        /// Banking Reference check for required AP invoice
        /// </summary>
        /// <param name="ipVendorNum">Vendor Number.</param>
        /// <param name="ipInvoiceNum">Invoice Number.</param>
        public bool CheckBankReference(int ipVendorNum, string ipInvoiceNum)
        {
            string OpMessage = string.Empty;
            string OpError = string.Empty;

            CurrentFullTableset = GetByID(ipVendorNum, ipInvoiceNum);
            ttAPInvHed = (from ttAPInvHed_Row in CurrentFullTableset.APInvHed
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                return false;
            }

            chkBankRefCore(out OpMessage, out OpError, false);
            return (String.IsNullOrEmpty(OpMessage) && String.IsNullOrEmpty(OpError));
        }

        /// <summary>
        ///Before updating the APInvHed record, CheckCPayBeforeUpdate will have to be called.  
        ///The CheckCPayBeforeUpdate method will pass back opMessage.  
        /// - If opMessage is not equal to null then a Yes/No question will have to be asked to the 
        ///user displaying the message in opMessage.  
        /// - If the user answers "Yes", then call the Update method to continue else stop update.
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="OpMessage">The Message to ask the user if the changes for the linked AP Invoice are okay.</param>
        public void CheckCPayBeforeUpdate(ref APInvoiceTableset ds, out string OpMessage)
        {
            OpMessage = string.Empty;

            CurrentFullTableset = ds;



            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Compare(ttAPInvHed_Row.RowMod, IceRow.ROWSTATE_UPDATED) == 0
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed != null)
            {
                chkCPayCore(out OpMessage);
                return;
            }
            else
            {


                ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                              where (StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) > -1)
                              select ttAPInvDtl_Row).FirstOrDefault();
                if (ttAPInvDtl != null)
                {
                    chkCPayCore(out OpMessage);
                    return;
                }
            }
        }

        /// <summary>
        /// Method to call when it is necessary to check if document is lock, before doing smth.
        /// </summary>
        /// <param name="keyValue">VendorNum</param>
        /// <param name="keyValue2">InvoiceNum</param>
        public void CheckDocumentIsLocked(string keyValue, string keyValue2)
        {
            string cWHO = string.Empty;

            if (PELock.IsDocumentLock(Session.CompanyID, "APInvHed", keyValue, keyValue2, "", "", "", ""))
            {
                ExceptionManager.AddBLException(cWHO);
            }
        }

        /// <summary>
        /// Method for retrieving logical variable which shows is it neccessary to generate legal numbers for Debit Memos. 
        /// </summary>
        /// <param name="cGroupID">The group id</param>
        /// <param name="lEnabled">The logical variable which shows is it neccessary to generate legal numbers</param>    
        public void CheckLegalNumsDisplay(string cGroupID, out bool lEnabled)
        {
            lEnabled = false;


            var LegalNumCnfgQuery2 = DBExpressionCompiler.Compile(LegalNumCnfgExpression2);
            LegalNumCnfg = LegalNumCnfgQuery2(Db, Session.CompanyID, "DebitMemo");
            if (LegalNumCnfg != null)
            {


                var APInvHedQuery56 = DBExpressionCompiler.Compile(APInvHedExpression56);
                APInvHed = APInvHedQuery56(Db, Session.CompanyID, cGroupID, true);
                if (APInvHed != null)
                {
                    lEnabled = true;
                }
            }
        }

        ///<summary>
        ///  Purpose: Used to check whether purcase point can be set in line
        ///  Parameters:     
        /// <param name="purPoint">The purchase pint</param>
        /// <param name="ds">The APInvoice data set</param>   
        ///</summary>
        public void CheckLinePurPoint(string purPoint, ref APInvoiceTableset ds)
        {
            string sInvoiceTaxLiability = String.Empty;
            string sLinePurPointTaxLiability = String.Empty;
            CurrentFullTableset = ds;
            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.TtApInvDtlNotFound, "ttAPInvDtl");
            }

            if (ttAPInvDtl.LineType.KeyEquals("M"))
            {
                Erp.Tables.APInvHed altAPInvHed = Erp.Tables.APInvHed.FindFirstByPrimaryKey(this.Db, Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
                if (altAPInvHed != null)
                {
                    sInvoiceTaxLiability = altAPInvHed.TaxRegionCode;
                }

                if (!String.IsNullOrEmpty(purPoint))
                {
                    Erp.Tables.VendorPP altVendorPP = Erp.Tables.VendorPP.FindFirstByPrimaryKey(this.Db, Session.CompanyID, ttAPInvDtl.VendorNum, purPoint);
                    if (altVendorPP != null)
                    {
                        sLinePurPointTaxLiability = altVendorPP.INTaxRegionCode;
                    }
                }
                if (!String.IsNullOrEmpty(sLinePurPointTaxLiability) &&
                    sInvoiceTaxLiability.Compare(sLinePurPointTaxLiability) != 0)
                {
                    throw new BLException(Strings.PurPointsWithHeaderTaxLiabilityIsAllowed(sInvoiceTaxLiability));
                }
            }
        }
        ///<summary>
        ///  Purpose:     
        ///  Parameters:  none
        ///  Notes:      
        /// <param name="ipVendNum">The group id</param>
        /// <param name="ipInvNum">The group id</param>
        /// <param name="ipInvLine">The group id</param>
        /// <param name="ipRoleCd">The group id</param>
        /// <param name="ipProposedValue">The group id</param>   
        ///</summary>
        public void CheckLineSubTotal(int ipVendNum, string ipInvNum, int ipInvLine, string ipRoleCd, decimal ipProposedValue)
        {
            decimal vInvDtlValue = decimal.Zero;

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, ipVendNum, ipInvNum, ipInvLine);
            if (APInvDtl != null)
            {
                ttAPInvDtl = new Erp.Tablesets.APInvDtlRow();
                CurrentFullTableset.APInvDtl.Add(ttAPInvDtl);
                BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
                ttAPInvDtl.SysRowID = APInvDtl.SysRowID;
                APInvDtl_Foreign_Link();
                APInvDtlAfterGetRows();
            }
            else
            {
                throw new BLException(Strings.InvoiceLineNotFound, "APInvDtl");
            }

            var APInvPBQuery3 = DBExpressionCompiler.Compile(APInvPBExpression3);
            foreach (var ApInvPB_iterator in (APInvPBQuery3(Db, Session.CompanyID, ipVendNum, ipInvNum, ipInvLine, ipRoleCd)))
            {
                APInvPB = ApInvPB_iterator;
                vInvDtlValue = vInvDtlValue + APInvPB.InvDtlValue;
            }

            vInvDtlValue = vInvDtlValue + ipProposedValue;

            if (ttAPInvDtl.LineSubtotal != vInvDtlValue)
            {
                throw new BLException(Strings.TheTotalOfBillingInvoiceValueShouldEqualLineInvoice, "APInvPB", "InvDtlValue");
            }
        }

        /// <summary>
        /// Check for the correct Payment Method assigned.
        /// </summary>
        /// <param name="ipPaymentMethod">Payment Method ID</param>
        /// <param name="ds">APInvoice dataset</param>
        public void CheckPaymentMethod(int ipPaymentMethod, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceHasNotChanged, "APInvHed");
            }



            var PayMethodQuery2 = DBExpressionCompiler.Compile(PayMethodExpression2);
            PayMethod = PayMethodQuery2(Db, ttAPInvHed.Company, ipPaymentMethod);
            if (PayMethod != null)
            {
                if (PayMethod.EFTHeadUID != 0)
                {


                    var EFTHeadQuery = DBExpressionCompiler.Compile(EFTHeadExpression);
                    EFTHead = EFTHeadQuery(Db, Session.CompanyID, PayMethod.EFTHeadUID);
                    if (EFTHead != null)
                    {
                        if (EFTHead.Type == 18)
                        {
                            throw new BLException(Strings.ThisPaymentMethodIsReserForBankAPPaymentImport, "APInvHed");
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Update APInvoice Detail information when the RateGrp is changed.
        /// </summary>
        /// <param name="ipRateGrpCode">Currency Rate Group Code </param>
        /// <param name="ds">APInvoice dataset</param>
        public void CheckRateGrpCode(string ipRateGrpCode, ref APInvoiceTableset ds)
        {

            decimal ProposedInvoiceVendorAmt = 0;

            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceHasNotChanged, "APInvHed");
            }
            if (this.LibGetCurrencyRatesEF.notValidRateGroup(ipRateGrpCode))
            {
                throw new BLException(Strings.AValidCurreRateGroupIsRequi, "APInvHed");
            }
            if (vUseDate == 1)
            {
                vExDate = ttAPInvHed.InvoiceDate;
            }
            else
            {
                vExDate = ttAPInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ipRateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);

            ttAPInvHed.ExchangeRate = Compatibility.Convert.ToDecimal(pRateList.Entry(0, Ice.Constants.LIST_DELIM));
            ttAPInvHed.LockRate = false;

            string fieldNameScrInvoiceVendorAmt = string.Empty;

            /* SCR 118089 - Recalculate amounts when Rate Type changes */
            ProposedInvoiceVendorAmt = ttAPInvHed.ScrDocInvoiceVendorAmt;
            if (ttAPInvHed.ScrDocInvoiceVendorAmt != 0)
            {
                if (ttAPInvHed.CurrencySwitch == true)
                {
                    ttAPInvHed.ScrInvoiceVendorAmt = ProposedInvoiceVendorAmt;

                    if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                    {
                        ttAPInvHed.ScrDocInvoiceVendorAmt = ttAPInvHed.ScrInvoiceVendorAmt;
                    }
                    else
                    {
                        /* DOC VALUE(FOREIGN CURRENCY) = UNIT VALUE(BASE CURRENCY) * (1 / EXCHANGE RATE ) */
                        ttAPInvHed.ScrDocInvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "ScrDocInvoiceVendorAmt");

                        for (i = 2; i <= 4; i++)
                        {
                            if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                            {
                                fieldNameScrInvoiceVendorAmt = "Rpt" + (i - 1).ToString() + "ScrInvoiceVendorAmt";
                                ttAPInvHed[fieldNameScrInvoiceVendorAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrInvoiceVendorAmt");
                            }
                        }
                    }
                }
                else
                {
                    ttAPInvHed.ScrDocInvoiceVendorAmt = ProposedInvoiceVendorAmt;

                    if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                    {
                        ttAPInvHed.ScrInvoiceVendorAmt = ttAPInvHed.ScrDocInvoiceVendorAmt;
                    }
                    else
                    {
                        /* BASE VALUE(BASE CURRENCY) = DOC VALUE(DOC CURRENCY) * EXCHANGE RATE ) */
                        ttAPInvHed.ScrDocInvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "ScrDocInvoiceVendorAmt");
                        for (i = 2; i <= 4; i++)
                        {
                            if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                            {
                                fieldNameScrInvoiceVendorAmt = "Rpt" + (i - 1).ToString() + "ScrInvoiceVendorAmt";
                                ttAPInvHed[fieldNameScrInvoiceVendorAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrInvoiceVendorAmt");
                            }
                        }
                    }
                }
                CalcVariance();
            }

        }

        /// <summary>
        /// Before updating the APInvDtl record, CheckRevChrgBeforeUpdate will have to be called.  
        /// The CheckRevChrgBeforeUpdate method will pass back opMessage.  
        /// - If opMessage is not equal to null then a Yes/No question will have to be asked to the 
        ///user displaying the message in opMessage.  
        /// - If the user answers "Yes", then call the Update method to continue else stop update.
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="OpMessage">The Message to ask the user if the changes to reverse charge method is okay.</param>
        public void CheckRevChrgBeforeUpdate(ref APInvoiceTableset ds, out string OpMessage)
        {
            OpMessage = string.Empty;
            CurrentFullTableset = ds;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where (StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) > -1)
                          select ttAPInvDtl_Row).FirstOrDefault();

            if (ttAPInvDtl != null)
            {
                chkRevChrgCore(out OpMessage);
                return;
            }
        }

        /// <summary>
        /// Update APInvoice Detail information when the TaxRateGrp is changed.
        /// </summary>
        /// <param name="ipRateGrpCode">Currency Rate Group Code </param>
        /// <param name="ds">APInvoice dataset</param>
        public void CheckTaxRateGrpCode(string ipRateGrpCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            DateTime? taxDate = null;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceHasNotChanged, "APInvHed");
            }
            if (this.LibGetCurrencyRatesEF.notValidRateGroup(ipRateGrpCode))
            {
                throw new BLException(Strings.AValidCurreRateGroupIsRequi, "APInvHed");
            }

            taxDate = ((ttAPInvHed.TaxRateDate != null) ? ttAPInvHed.TaxRateDate : ((ttAPInvHed.TaxPoint != null) ? ttAPInvHed.TaxPoint : ((vUseDate == 1) ? ttAPInvHed.InvoiceDate : ttAPInvHed.ApplyDate)));
            this.LibGetCurrencyRatesEF.BuildCurrencyRates(taxDate, "APInvHed-Tax", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ipRateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);
            ttAPInvHed.TaxExchangeRate = Compatibility.Convert.ToDecimal(pRateList.Entry(0, Ice.Constants.LIST_DELIM));
            ttAPInvHed.LockTaxRate = false;
        }



        /// <summary>
        /// Update APInvoice Detail information when the Tax Liability is changed.
        /// </summary>
        /// <param name="ipTaxRgnCode">Currency Rate Group Code </param>
        /// <param name="ds">APInvoice dataset</param>
        public void CheckTaxRgn(string ipTaxRgnCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            //DateTime? taxDate = null;
            bool oldInPrice = false;
            bool apTaxLnLevel = this.ExistsXbSystLineTax(Session.CompanyID, true);

            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceHasNotChanged, "APInvHed");
            }
            oldInPrice = ttAPInvHed.InPrice;
            TaxRgn = TaxRgn.FindFirstByPrimaryKey(Db, Session.CompanyID, ipTaxRgnCode);
            if (TaxRgn == null)
            {
                throw new BLException(Strings.TaxLiabilityNotValid, "APInvHed");
            }
            else
            {
                if (apTaxLnLevel && this.ExistsAPInvTax(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum))
                {
                    if (!String.IsNullOrEmpty(ttAPInvHed.TaxRegionCode) && !ttAPInvHed.TaxRegionCode.KeyEquals(ipTaxRgnCode))
                    {
                        if (TaxRgn.InPrice != ttAPInvHed.InPrice)
                        {
                            if (ttAPInvHed.InPrice)
                                throw new BLException(Strings.CannotChgToTaxExclusive);
                            else
                                throw new BLException(Strings.CannotChgToTaxInclusive);
                        }
                    }
                }

                if (TaxRgn.InPrice != ttAPInvHed.InPrice)
                {

                    if (ExistsAPInvDtl2(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum))
                    {

                        throw new BLException(Strings.TaxLiabTypeMatchPo);
                    }

                }

                if (TaxRgn.InPrice)
                {
                    if (ExistsAPInvDtl1(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum) == true)
                    {
                        throw new BLException(Strings.TaxInclNotAllwd);
                    }
                    ttAPInvHed.InPrice = true;

                }
                else
                {
                    ttAPInvHed.InPrice = false;

                }

                ttAPInvHed.TaxRegionCode = ipTaxRgnCode;
                if (!oldInPrice && ttAPInvHed.InPrice)
                {

                    using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
                    {
                        Erp.Tables.APInvDtl bAPInvDtl = null;
                        foreach (var bApInvDtl_iterator in (this.SelectAPInvDtlWithUpdLock(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum)))
                        {
                            bAPInvDtl = bApInvDtl_iterator;
                            bAPInvDtl.InUnitCost = bAPInvDtl.UnitCost;
                            bAPInvDtl.DocInUnitCost = bAPInvDtl.DocUnitCost;
                            bAPInvDtl.Rpt1InUnitCost = bAPInvDtl.Rpt1UnitCost;
                            bAPInvDtl.Rpt2InUnitCost = bAPInvDtl.Rpt2UnitCost;
                            bAPInvDtl.Rpt3InUnitCost = bAPInvDtl.Rpt3UnitCost;
                            bAPInvDtl.InExtCost = bAPInvDtl.ExtCost;
                            bAPInvDtl.DocInExtCost = bAPInvDtl.DocExtCost;
                            bAPInvDtl.Rpt1InExtCost = bAPInvDtl.Rpt1ExtCost;
                            bAPInvDtl.Rpt2InExtCost = bAPInvDtl.Rpt2ExtCost;
                            bAPInvDtl.Rpt3InExtCost = bAPInvDtl.Rpt3ExtCost;
                            bAPInvDtl.InTotalMiscChrg = bAPInvDtl.TotalMiscChrg;
                            bAPInvDtl.DocInTotalMiscChrg = bAPInvDtl.DocTotalMiscChrg;
                            bAPInvDtl.Rpt1InTotalMiscChrg = bAPInvDtl.Rpt1TotalMiscChrg;
                            bAPInvDtl.Rpt2InTotalMiscChrg = bAPInvDtl.Rpt2TotalMiscChrg;
                            bAPInvDtl.Rpt3InTotalMiscChrg = bAPInvDtl.Rpt3TotalMiscChrg;

                            Db.Validate(bAPInvDtl);
                            this.refreshttAPInvDtl(bAPInvDtl);
                        }
                        Erp.Tables.APInvMsc bAPInvMsc = null;
                        foreach (var bApInvMsc_iterator in (this.SelectAPInvMscWithUpdLock(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum)))
                        {
                            bAPInvMsc = bApInvMsc_iterator;
                            bAPInvMsc.InMiscAmt = bAPInvMsc.MiscAmt;
                            bAPInvMsc.DocInMiscAmt = bAPInvMsc.DocMiscAmt;
                            bAPInvMsc.Rpt1InMiscAmt = bAPInvMsc.Rpt1MiscAmt;
                            bAPInvMsc.Rpt2InMiscAmt = bAPInvMsc.Rpt2MiscAmt;
                            bAPInvMsc.Rpt3InMiscAmt = bAPInvMsc.Rpt3MiscAmt;
                            Db.Validate(bAPInvMsc);

                            refreshttAPInvMsc(bAPInvMsc);
                        }
                        trans.Complete();

                    }  // transaction

                }  //oldInPrice condition
                else
                {
                    if (oldInPrice && !ttAPInvHed.InPrice)
                    {
                        using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
                        {
                            Erp.Tables.APInvDtl bAPInvDtl = null;
                            foreach (var bApInvDtl_iterator in (this.SelectAPInvDtlWithUpdLock(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum)))
                            {
                                bAPInvDtl = bApInvDtl_iterator;
                                bAPInvDtl.InUnitCost = 0;
                                bAPInvDtl.DocInUnitCost = 0;
                                bAPInvDtl.Rpt1InUnitCost = 0;
                                bAPInvDtl.Rpt2InUnitCost = 0;
                                bAPInvDtl.Rpt3InUnitCost = 0;
                                bAPInvDtl.InExtCost = 0;
                                bAPInvDtl.DocInExtCost = 0;
                                bAPInvDtl.Rpt1InExtCost = bAPInvDtl.Rpt1ExtCost;
                                bAPInvDtl.Rpt2InExtCost = bAPInvDtl.Rpt2ExtCost;
                                bAPInvDtl.Rpt3InExtCost = bAPInvDtl.Rpt3ExtCost;
                                bAPInvDtl.InTotalMiscChrg = 0;
                                bAPInvDtl.DocInTotalMiscChrg = 0;
                                bAPInvDtl.Rpt1InTotalMiscChrg = 0;
                                bAPInvDtl.Rpt2InTotalMiscChrg = 0;
                                bAPInvDtl.Rpt3InTotalMiscChrg = 0;
                                bAPInvDtl.NoTaxRecal = false;

                                Db.Validate(bAPInvDtl);
                                this.refreshttAPInvDtl(bAPInvDtl);
                            }

                            Erp.Tables.APInvMsc bAPInvMsc = null;
                            foreach (var bApInvMsc_iterator in (this.SelectAPInvMscWithUpdLock(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum)))
                            {
                                bAPInvMsc = bApInvMsc_iterator;
                                bAPInvMsc.InMiscAmt = 0;
                                bAPInvMsc.DocInMiscAmt = 0;
                                bAPInvMsc.Rpt1InMiscAmt = 0;
                                bAPInvMsc.Rpt2InMiscAmt = 0;
                                bAPInvMsc.Rpt3InMiscAmt = 0;
                                bAPInvMsc.NoTaxRecalc = false;
                                Db.Validate(bAPInvMsc);

                                refreshttAPInvMsc(bAPInvMsc);
                            }

                            trans.Complete();

                        }  //Transaction

                    } //oldInprice condition
                }   // else


            }  // TaxRgn exists

            //Need to know if this is Expense Invoice to update each line Tax Liability
            if (!String.IsNullOrEmpty(ttAPInvHed.EmpID))
            {
                using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
                {
                    foreach (var apInvDtl in (this.SelectAPInvDtlWithUpdLock(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum)))
                    {
                        apInvDtl.TaxRegionCode = ttAPInvHed.TaxRegionCode;
                        Db.Validate(apInvDtl);

                        refreshttAPInvDtl(apInvDtl);
                    }
                    trans.Complete();

                }  //Transaction
            }

            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where !String.IsNullOrEmpty(ttAPInvDtl_Row.RowMod)
                          select ttAPInvDtl_Row).FirstOrDefault();

            if (ttAPInvDtl != null)
            {
                ttAPInvDtl.EnableIntrastat = getEnableIntrastat();
            }
        }


        /// <summary>
        /// Method to call when changing the currency on the invoice.  Validates the currency code and
        /// updates APInvHed with default values based on the currency. 
        /// </summary>
        /// <param name="ProposedCurrencyCode">The proposed currency code</param>
        private void ChgCurrencyCore(string ProposedCurrencyCode)
        {

            Currency = FindFirstCurrencyWithCode(Session.CompanyID, ProposedCurrencyCode);
            if (Currency == null)
            {
                throw new BLException(Strings.InvalidCurrencyCode, "APInvHed", "CurrencyCode");
            }
            ttAPInvHed.CurrencyCode = ProposedCurrencyCode;
            getExchangeRate("CURR");
            var outCurrSymbol6 = ttAPInvHed.CurrSymbol;
            var outCurrencySwitch7 = ttAPInvHed.CurrencySwitch;
            var outCurrencyCodeCurrencyID2 = ttAPInvHed.CurrencyCodeCurrencyID;
            getCurrencyInfo(ProposedCurrencyCode, out outCurrSymbol6, out outCurrencySwitch7, out outCurrencyCodeCurrencyID2);
            ttAPInvHed.CurrSymbol = outCurrSymbol6;
            ttAPInvHed.CurrencySwitch = outCurrencySwitch7;
            ttAPInvHed.CurrencyCodeCurrencyID = outCurrencyCodeCurrencyID2;
            ttAPInvHed.XRateLabel = this.LibXRateLabelEF.XRateLabel(ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows);

            string fieldNameScrInvoiceVendorAmt = string.Empty;

            if (ttAPInvHed.CurrencySwitch == false)
            {
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.ScrDocInvoiceVendorAmt = ttAPInvHed.ScrInvoiceVendorAmt;
                    ttAPInvHed.ScrInvoiceVendorAmt = 0;
                }
                else if (StringExtensions.Compare(ttAPInvHed.RowMod, IceRow.ROWSTATE_ADDED) != 0)
                {
                    ttAPInvHed.ScrDocInvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "ScrDocInvoiceVendorAmt");
                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrInvoiceVendorAmt = "Rpt" + (i - 1).ToString() + "ScrInvoiceVendorAmt";
                            ttAPInvHed[fieldNameScrInvoiceVendorAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrInvoiceVendorAmt");
                        }
                    }
                }
            }
            else
            {
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.ScrInvoiceVendorAmt = ttAPInvHed.ScrDocInvoiceVendorAmt;
                }
                else if (StringExtensions.Compare(ttAPInvHed.RowMod, IceRow.ROWSTATE_ADDED) != 0)
                {
                    ttAPInvHed.ScrDocInvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "ScrInvoiceVendorAmt");
                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrInvoiceVendorAmt = "Rpt" + (i - 1).ToString() + "ScrInvoiceVendorAmt";
                            ttAPInvHed[fieldNameScrInvoiceVendorAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrInvoiceVendorAmt");
                        }
                    }
                }
            }/* else do */

            CalcVariance();
            APInvHed_Foreign_Link();
        }

        private void ChgRateCodeCore()
        {
            DateTime? vInvDate = null;
            bool firstDtlFlag = false;
            decimal termsDiscount = decimal.Zero;
            string baseCurrency = string.Empty;
            int rndRule = 0;
            int nDecTaxAmt = 0;
            int nDecTaxableAmt = 0;
            int nDecReportableAmt = 0;
            int nDecDocTaxAmt = 0;
            int nDecDocTaxableAmt = 0;
            int nDecDocReportableAmt = 0;
            decimal tmpTax = decimal.Zero;
            decimal doctmpTax = decimal.Zero;
            decimal rpt1tmpTax = decimal.Zero;
            decimal rpt2tmptax = decimal.Zero;
            decimal rpt3tmptax = decimal.Zero;
            Erp.Tables.APInvDtl bApInvDtl = null;
            Erp.Tables.APInvDtl altApInvDtl = null;

            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceHeaderIsNotFound, "APInvHed");
            }

            baseCurrency = this.FindCurrencyBase(Session.CompanyID, true);
            int apTaxRoundOption = APInvHed.APTaxRoundOption;
            bool diffCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);

            PurTerms = PurTerms.FindFirstByPrimaryKey(Db, Session.CompanyID, APInvHed.TermsCode);


            var PurTermDQuery2 = DBExpressionCompiler.Compile(PurTermDExpression2);
            PurTermD = PurTermDQuery2(Db, Session.CompanyID, APInvHed.TermsCode);

            termsDiscount = ((PurTermD != null) ? PurTermD.DiscountPercent : 0);
            if (APInvHed.TaxRateDate != null)
            {
                vInvDate = APInvHed.TaxRateDate;
            }
            else if (APInvHed.TaxPoint != null)
            {
                vInvDate = APInvHed.TaxPoint;
            }
            else if (APInvHed.InvoiceDate != null)
            {
                vInvDate = APInvHed.InvoiceDate;
            }

            SalesTax = SalesTax.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvTax.TaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.InvalidTaxCode, "APInvTax", "TaxCode");
            }
            if (!String.IsNullOrEmpty(ttAPInvTax.RateCode))
            {


                TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, vInvDate.Value);
                if (TaxRate == null)
                {
                    throw new BLException(Strings.InvalidRateCode, "APInvTax", "RateCode");
                }
            }

            if (SalesTax.RoundDown == true)
            {
                rndRule = 2;
            }
            else
            {
                rndRule = 0;
            }

            /* RESET INFO FOR RECALC OF TAX INFO */
            ttAPInvTax.ScrTaxableAmt = 0;
            ttAPInvTax.ScrTaxAmt = 0;
            ttAPInvTax.ScrDocTaxableAmt = 0;
            ttAPInvTax.ScrDocTaxAmt = 0;
            ttAPInvTax.ScrReportableAmt = 0;
            ttAPInvTax.ScrDocReportableAmt = 0;
            ttAPInvTax.Rpt1ScrTaxAmt = 0;
            ttAPInvTax.Rpt1ScrTaxableAmt = 0;
            ttAPInvTax.Rpt1ScrReportableAmt = 0;
            ttAPInvTax.Rpt2ScrTaxAmt = 0;
            ttAPInvTax.Rpt2ScrTaxableAmt = 0;
            ttAPInvTax.Rpt2ScrReportableAmt = 0;
            ttAPInvTax.Rpt3ScrTaxAmt = 0;
            ttAPInvTax.Rpt3ScrTaxableAmt = 0;
            ttAPInvTax.Rpt3ScrReportableAmt = 0;
            ttAPInvTax.ScrDedTaxAmt = 0;
            ttAPInvTax.ScrDocDedTaxAmt = 0;
            ttAPInvTax.Rpt1ScrDedTaxAmt = 0;
            ttAPInvTax.Rpt2ScrDedTaxAmt = 0;
            ttAPInvTax.Rpt3ScrDedTaxAmt = 0;
            ttAPInvTax.ScrDocFixedAmount = 0;
            ttAPInvTax.ScrFixedAmount = 0;
            ttAPInvTax.Rpt1ScrFixedAmount = 0;
            ttAPInvTax.Rpt2ScrFixedAmount = 0;
            ttAPInvTax.Rpt3ScrFixedAmount = 0;

            nDecTaxAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "TaxAmt", "");
            nDecTaxableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "TaxableAmt", "");
            nDecDocTaxAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "DocTaxAmt", "");
            nDecDocTaxableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "DocTaxableAmt", "");
            nDecReportableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "ReportableAmt", "");
            nDecDocReportableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("ApInvTax", "DocReportableAmt", "");




            ttLineTypesRows = new List<Internal.Lib.ProcessTaxes.LineTypes>();
            if (ExistsAPInvDtl3(ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum))
            {
                foreach (var bApInvDtl_iterator in (SelectAPInvDtlWithoutTaxExempt(ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum)))
                {
                    bApInvDtl = bApInvDtl_iterator;
                    ttLineTypes = new Internal.Lib.ProcessTaxes.LineTypes();
                    ttLineTypesRows.Add(ttLineTypes);
                    ttLineTypes.adKey = Compatibility.Convert.ToString(bApInvDtl.InvoiceLine);
                    ttLineTypes.DocType = "APINVOICES";
                    ttLineTypes.TaxCode = ttAPInvTax.TaxCode;
                    ttLineTypes.RateCode = ttAPInvTax.RateCode;
                    ttLineTypes.LineNum = bApInvDtl.InvoiceLine;
                    ttLineTypes.ManAdd = true;
                    ttLineTypes.Manual = false;
                    ttLineTypes.TaxMethod = "L";
                    ttLineTypes.RoundRule = rndRule;
                    ttLineTypes.DocTaxableAmt = bApInvDtl.DocExtCost - bApInvDtl.DocLineDiscAmt - bApInvDtl.DocAdvancePayAmt;
                    ttLineTypes.DocTermsTaxableAmt = ttLineTypes.DocTaxableAmt;
                    ttLineTypes.DocNoExemptTaxableAmt = ttLineTypes.DocTaxableAmt;
                    ttLineTypes.DocDiscount = bApInvDtl.DocLineDiscAmt;
                    ttLineTypes.CollectionType = SalesTax.CollectionType;
                    ttLineTypes.Timing = SalesTax.Timing;
                    ttLineTypes.Algorithm = SalesTax.Algorithm;
                    ttLineTypes.CurrencyCode = APInvHed.CurrencyCode;
                    ttLineTypes.RateGrpCode = APInvHed.RateGrpCode;
                    ttLineTypes.VendorNum = ttAPInvTax.VendorNum;
                    ttLineTypes.PartNum = bApInvDtl.PartNum;
                    ttLineTypes.TaxCatID = bApInvDtl.TaxCatID;
                    ttLineTypes.nDecTaxAmt = nDecTaxAmt;
                    ttLineTypes.nDecTaxableAmt = nDecTaxableAmt;
                    ttLineTypes.nDecDocTaxAmt = nDecDocTaxAmt;
                    ttLineTypes.nDecDocTaxableAmt = nDecDocTaxableAmt;
                    ttLineTypes.nDecReportableAmt = nDecReportableAmt;
                    ttLineTypes.nDecDocReportableAmt = nDecDocReportableAmt;
                    ttLineTypes.TaxRateDate = vInvDate;
                    ttLineTypes.SalesTaxLegalText = SalesTax.TextCode;

                    var AltApInvDtlQuery2 = DBExpressionCompiler.Compile(AltApInvDtlExpression2);
                    altApInvDtl = AltApInvDtlQuery2(Db, Session.CompanyID, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
                    if (altApInvDtl != null)
                    {
                        if (ttLineTypes.LineNum == altApInvDtl.InvoiceLine)
                        {


                            foreach (var APInvMsc_iterator in (SelectAPInvMsc(Session.CompanyID, ttLineTypes.VendorNum, ttAPInvTax.InvoiceNum, 0)))
                            {
                                APInvMsc = APInvMsc_iterator;
                                ttLineTypes.DocTaxableAmt = ttLineTypes.DocTaxableAmt + APInvMsc.DocMiscAmt;
                            }
                        }
                    }

                    foreach (var APInvMsc_iterator in (SelectAPInvMsc(Session.CompanyID, ttLineTypes.VendorNum, ttAPInvTax.InvoiceNum, ttLineTypes.LineNum)))
                    {
                        APInvMsc = APInvMsc_iterator;
                        ttLineTypes.DocTaxableAmt = ttLineTypes.DocTaxableAmt + APInvMsc.DocMiscAmt;
                    }
                    var outExemptType2 = ttLineTypes.ExemptType;
                    var outExemptRate2 = ttLineTypes.ExemptRate;
                    var outResolutionNum2 = ttLineTypes.ResolutionNum;
                    var outResolutionDate2 = ttLineTypes.ResolutionDate;
                    var outLegalText2 = ttLineTypes.LegalText;
                    var outReportable2 = ttLineTypes.Reportable;
                    LibProcessTaxes.getCustomTaxExemptInfo(ttLineTypes.TaxCode, ttLineTypes.RateCode, out outExemptType2, out outExemptRate2, out outResolutionNum2, out outResolutionDate2, out outLegalText2, out outReportable2, ref ttLineExemptRows, ref ttLineTypes);
                    ttLineTypes.ExemptType = outExemptType2;
                    ttLineTypes.ExemptRate = outExemptRate2;
                    ttLineTypes.ResolutionNum = outResolutionNum2;
                    ttLineTypes.ResolutionDate = outResolutionDate2;
                    ttLineTypes.LegalText = outLegalText2;
                    ttLineTypes.Reportable = outReportable2;
                    ttLineTypes.TaxRoundOption = apTaxRoundOption;
                    ttLineTypes.DiffDocCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);
                    ttLineTypes.NoCurrRound = (apTaxRoundOption == 0 || (apTaxRoundOption == 2 && ttLineTypes.DiffDocCurr)) ? true : false;
                    ttLineTypes.TaxTbl = "APInvTax";
                    ttLineTypes.TaxFld = "DocTaxAmt";
                    ttLineTypes.TaxableFld = "DocTaxableAmt";
                    ttLineTypes.FullCalc = true;
                    if ((SalesTax.DiscountType == 2 && termsDiscount != 0))
                    {
                        ttLineTypes.DocTaxableAmt = LibRoundRulesEF.RoundRuleApply((ttLineTypes.DocTaxableAmt * ((100 - termsDiscount) / 100)), LibRoundRulesEF.TypeAmt_UnitPrice, ttLineTypes.CurrencyCode);
                    }

                    LibProcessTaxes.ProcessOneTaxLine(ref ttLineTypes);
                    if (ttLineTypes.CompMethod.Equals("I", StringComparison.OrdinalIgnoreCase) && (ttLineTypes.TaxMinAmt != 0 || ttLineTypes.TaxMaxAmt != 0))
                    {
                        // this is limitation for manually added lines. The "Compare at" Document level is treated as "Line level"
                        if (Math.Abs(ttLineTypes.DocTaxAmt) > ttLineTypes.TaxMaxAmt && ttLineTypes.TaxMaxAmt != 0)
                        {
                            if (ttLineTypes.DocTaxableAmt >= 0)
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt;
                            }
                            else
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt * -1;

                            }

                        }
                        else
                        {
                            if (Math.Abs(ttLineTypes.DocTaxAmt) < ttLineTypes.TaxMinAmt && ttLineTypes.TaxMinAmt != 0)
                            {
                                if (ttLineTypes.DocTaxableAmt >= 0)
                                {
                                    ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt;
                                }
                                else
                                {
                                    ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt * -1;
                                }
                            }

                        }
                    }

                    ttLineTypes.DocDedTaxAmt = LibProcessTaxes.RoundRuleTaxMethodEx((ttLineTypes.DocTaxAmt * ttLineTypes.DeductPercent / 100), ttLineTypes.TaxMethod, ttLineTypes.RoundRule, ttLineTypes.CurrencyCode, ttLineTypes.NoCurrRound, "APInvTax", "DocDedTaxAmt");
                    if (!firstDtlFlag)
                    {
                        ttAPInvTax.Percent = ttLineTypes.Percent;
                        ttAPInvTax.CollectionType = ttLineTypes.CollectionType;
                        ttAPInvTax.Timing = ttLineTypes.Timing;
                        ttAPInvTax.ReverseCharge = ttLineTypes.ReverseCharge;
                        if (ttLineTypes.TaxRateDate == null)
                        {
                            ttAPInvTax.TaxRateDate = null;
                        }
                        else
                        {
                            ttAPInvTax.TaxRateDate = (DateTime)ttLineTypes.TaxRateDate;
                        }

                        ttAPInvTax.ExemptType = ttLineTypes.ExemptType;
                        ttAPInvTax.ExemptPercent = ttLineTypes.ExemptRate;
                        ttAPInvTax.ECAcquisitionSeq = 0;
                        ttAPInvTax.ResolutionNum = ttLineTypes.ResolutionNum;
                        if (ttLineTypes.ResolutionDate == null)
                        {
                            ttAPInvTax.ResolutionDate = null;
                        }
                        else
                        {
                            ttAPInvTax.ResolutionDate = (DateTime)ttLineTypes.ResolutionDate;
                        }

                        ttAPInvTax.TextCode = ttLineTypes.LegalText;
                        firstDtlFlag = true;
                    }
                    ttAPInvTax.DocDefTaxableAmt = ttAPInvTax.DocDefTaxableAmt + ttLineTypes.DocTaxableAmt;
                    ttAPInvTax.DocDefTaxAmt = ttAPInvTax.DocDefTaxAmt + ttLineTypes.DocDedTaxAmt;
                    ttAPInvTax.SysCalcDocTaxableAmt = ttAPInvTax.SysCalcDocTaxableAmt + ttLineTypes.DocTaxableAmt;
                    ttAPInvTax.SysCalcDocReportableAmt = ttAPInvTax.SysCalcDocReportableAmt + ttLineTypes.DocReportableAmt;
                    if (!APInvHed.DebitMemo)
                    {
                        ttAPInvTax.ScrDocReportableAmt = ttAPInvTax.ScrDocReportableAmt + ttLineTypes.DocReportableAmt;
                        ttAPInvTax.ScrDocTaxableAmt = ttAPInvTax.ScrDocTaxableAmt + ttLineTypes.DocTaxableAmt;
                        ttAPInvTax.ScrDocTaxAmt = ttAPInvTax.ScrDocTaxAmt + ttLineTypes.DocTaxAmt;
                        ttAPInvTax.ScrDocDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt + ttLineTypes.DocDedTaxAmt;
                        ttAPInvTax.ScrDocFixedAmount = ttAPInvTax.ScrDocFixedAmount + ttLineTypes.FixedAmount;
                    }
                    else
                    {
                        ttAPInvTax.ScrDocReportableAmt = ttAPInvTax.ScrDocReportableAmt - ttLineTypes.DocReportableAmt;
                        ttAPInvTax.ScrDocTaxableAmt = ttAPInvTax.ScrDocTaxableAmt - ttLineTypes.DocTaxableAmt;
                        ttAPInvTax.ScrDocTaxAmt = ttAPInvTax.ScrDocTaxAmt - ttLineTypes.DocTaxAmt;
                        ttAPInvTax.ScrDocDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt - ttLineTypes.DocDedTaxAmt;
                        ttAPInvTax.ScrDocFixedAmount = ttAPInvTax.ScrDocFixedAmount - ttLineTypes.FixedAmount;
                    }
                }
            }
            else
            {
                foreach (var APInvMsc_iterator in (SelectAPInvMsc(Session.CompanyID, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum, 0)))
                {
                    APInvMsc = APInvMsc_iterator;
                    ttLineTypes = new Internal.Lib.ProcessTaxes.LineTypes();
                    ttLineTypesRows.Add(ttLineTypes);
                    ttLineTypes.adKey = Compatibility.Convert.ToString(0);
                    ttLineTypes.DocType = "APINVOICES";
                    ttLineTypes.TaxCode = ttAPInvTax.TaxCode;
                    ttLineTypes.RateCode = ttAPInvTax.RateCode;
                    ttLineTypes.LineNum = 0;
                    ttLineTypes.ManAdd = true;
                    ttLineTypes.Manual = false;
                    ttLineTypes.TaxMethod = "L";
                    ttLineTypes.RoundRule = rndRule;
                    ttLineTypes.DocTaxableAmt = APInvMsc.DocMiscAmt;
                    ttLineTypes.DocTermsTaxableAmt = ttLineTypes.DocTaxableAmt;
                    ttLineTypes.DocNoExemptTaxableAmt = ttLineTypes.DocTaxableAmt;
                    ttLineTypes.CollectionType = SalesTax.CollectionType;
                    ttLineTypes.Timing = SalesTax.Timing;
                    ttLineTypes.Algorithm = SalesTax.Algorithm;
                    ttLineTypes.CurrencyCode = APInvHed.CurrencyCode;
                    ttLineTypes.RateGrpCode = APInvHed.RateGrpCode;
                    ttLineTypes.VendorNum = ttAPInvTax.VendorNum;
                    ttLineTypes.TaxCatID = APInvMsc.TaxCatID;
                    ttLineTypes.nDecTaxAmt = nDecTaxAmt;
                    ttLineTypes.nDecTaxableAmt = nDecTaxableAmt;
                    ttLineTypes.nDecDocTaxAmt = nDecDocTaxAmt;
                    ttLineTypes.nDecDocTaxableAmt = nDecDocTaxableAmt;
                    ttLineTypes.nDecReportableAmt = nDecReportableAmt;
                    ttLineTypes.nDecDocReportableAmt = nDecDocReportableAmt;
                    ttLineTypes.TaxRateDate = vInvDate;
                    ttLineTypes.SalesTaxLegalText = SalesTax.TextCode;
                    ttLineTypes.ExemptType = 0;
                    ttLineTypes.ExemptRate = 0;
                    ttLineTypes.ResolutionNum = string.Empty;
                    ttLineTypes.ResolutionDate = null;
                    ttLineTypes.LegalText = string.Empty;

                    if (!String.IsNullOrEmpty(APInvMsc.TaxCatID))
                    {
                        var outExemptType2 = ttLineTypes.ExemptType;
                        var outExemptRate2 = ttLineTypes.ExemptRate;
                        var outResolutionNum2 = ttLineTypes.ResolutionNum;
                        var outResolutionDate2 = ttLineTypes.ResolutionDate;
                        var outLegalText2 = ttLineTypes.LegalText;
                        var outReportable2 = ttLineTypes.Reportable;
                        LibProcessTaxes.getCustomTaxExemptInfo(ttLineTypes.TaxCode, ttLineTypes.RateCode, out outExemptType2, out outExemptRate2, out outResolutionNum2, out outResolutionDate2, out outLegalText2, out outReportable2, ref ttLineExemptRows, ref ttLineTypes);
                        ttLineTypes.ExemptType = outExemptType2;
                        ttLineTypes.ExemptRate = outExemptRate2;
                        ttLineTypes.ResolutionNum = outResolutionNum2;
                        ttLineTypes.ResolutionDate = outResolutionDate2;
                        ttLineTypes.LegalText = outLegalText2;
                        ttLineTypes.Reportable = outReportable2;
                    }
                    ttLineTypes.TaxRoundOption = apTaxRoundOption;
                    ttLineTypes.DiffDocCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);
                    ttLineTypes.NoCurrRound = (apTaxRoundOption == 0 || (apTaxRoundOption == 2 && ttLineTypes.DiffDocCurr)) ? true : false;
                    ttLineTypes.TaxTbl = "APInvTax";
                    ttLineTypes.TaxFld = "DocTaxAmt";
                    ttLineTypes.TaxableFld = "DocTaxableAmt";
                    ttLineTypes.FullCalc = true;
                    if ((SalesTax.DiscountType == 2 && termsDiscount != 0))
                    {
                        ttLineTypes.DocTaxableAmt = LibRoundRulesEF.RoundRuleApply((ttLineTypes.DocTaxableAmt * ((100 - termsDiscount) / 100)), LibRoundRulesEF.TypeAmt_UnitPrice, ttLineTypes.CurrencyCode);
                    }

                    LibProcessTaxes.ProcessOneTaxLine(ref ttLineTypes);
                    if (ttLineTypes.CompMethod.Equals("I", StringComparison.OrdinalIgnoreCase) && (ttLineTypes.TaxMinAmt != 0 || ttLineTypes.TaxMaxAmt != 0))
                    {
                        // this is limitation for manually added lines. The "Compare at" Document level is treated as "Line level"
                        if (Math.Abs(ttLineTypes.DocTaxAmt) > ttLineTypes.TaxMaxAmt && ttLineTypes.TaxMaxAmt != 0)
                        {
                            if (ttLineTypes.DocTaxableAmt >= 0)
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt;
                            }
                            else
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt * -1;

                            }

                        }
                        else
                        {
                            if (Math.Abs(ttLineTypes.DocTaxAmt) < ttLineTypes.TaxMinAmt && ttLineTypes.TaxMinAmt != 0)
                            {
                                if (ttLineTypes.DocTaxableAmt >= 0)
                                {
                                    ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt;
                                }
                                else
                                {
                                    ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt * -1;
                                }
                            }

                        }
                    }

                    ttLineTypes.DocDedTaxAmt = LibProcessTaxes.RoundRuleTaxMethodEx((ttLineTypes.DocTaxAmt * ttLineTypes.DeductPercent / 100), ttLineTypes.TaxMethod, ttLineTypes.RoundRule, ttLineTypes.CurrencyCode, ttLineTypes.NoCurrRound, "APInvTax", "DocDedTaxAmt");
                    if (!firstDtlFlag)
                    {
                        ttAPInvTax.Percent = ttLineTypes.Percent;
                        ttAPInvTax.CollectionType = ttLineTypes.CollectionType;
                        ttAPInvTax.Timing = ttLineTypes.Timing;
                        ttAPInvTax.ReverseCharge = ttLineTypes.ReverseCharge;
                        if (ttLineTypes.TaxRateDate == null)
                        {
                            ttAPInvTax.TaxRateDate = null;
                        }
                        else
                        {
                            ttAPInvTax.TaxRateDate = (DateTime)ttLineTypes.TaxRateDate;
                        }

                        ttAPInvTax.ExemptType = ttLineTypes.ExemptType;
                        ttAPInvTax.ExemptPercent = ttLineTypes.ExemptRate;
                        ttAPInvTax.ECAcquisitionSeq = 0;
                        ttAPInvTax.ResolutionNum = ttLineTypes.ResolutionNum;
                        if (ttLineTypes.ResolutionDate == null)
                        {
                            ttAPInvTax.ResolutionDate = null;
                        }
                        else
                        {
                            ttAPInvTax.ResolutionDate = (DateTime)ttLineTypes.ResolutionDate;
                        }

                        ttAPInvTax.TextCode = ttLineTypes.LegalText;
                        firstDtlFlag = true;
                    }
                    ttAPInvTax.DocDefTaxableAmt = ttAPInvTax.DocDefTaxableAmt + ttLineTypes.DocTaxableAmt;
                    ttAPInvTax.DocDefTaxAmt = ttAPInvTax.DocDefTaxAmt + ttLineTypes.DocDedTaxAmt;
                    ttAPInvTax.SysCalcDocTaxableAmt = ttAPInvTax.SysCalcDocTaxableAmt + ttLineTypes.DocTaxableAmt;
                    ttAPInvTax.SysCalcDocReportableAmt = ttAPInvTax.SysCalcDocReportableAmt + ttLineTypes.DocReportableAmt;
                    if (!APInvHed.DebitMemo)
                    {
                        ttAPInvTax.ScrDocReportableAmt = ttAPInvTax.ScrDocReportableAmt + ttLineTypes.DocReportableAmt;
                        ttAPInvTax.ScrDocTaxableAmt = ttAPInvTax.ScrDocTaxableAmt + ttLineTypes.DocTaxableAmt;
                        ttAPInvTax.ScrDocTaxAmt = ttAPInvTax.ScrDocTaxAmt + ttLineTypes.DocTaxAmt;
                        ttAPInvTax.ScrDocDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt + ttLineTypes.DocDedTaxAmt;
                        ttAPInvTax.ScrDocFixedAmount = ttAPInvTax.ScrDocFixedAmount + ttLineTypes.FixedAmount;
                    }
                    else
                    {
                        ttAPInvTax.ScrDocReportableAmt = ttAPInvTax.ScrDocReportableAmt - ttLineTypes.DocReportableAmt;
                        ttAPInvTax.ScrDocTaxableAmt = ttAPInvTax.ScrDocTaxableAmt - ttLineTypes.DocTaxableAmt;
                        ttAPInvTax.ScrDocTaxAmt = ttAPInvTax.ScrDocTaxAmt - ttLineTypes.DocTaxAmt;
                        ttAPInvTax.ScrDocDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt - ttLineTypes.DocDedTaxAmt;
                        ttAPInvTax.ScrDocFixedAmount = ttAPInvTax.ScrDocFixedAmount - ttLineTypes.FixedAmount;
                    }
                }

            }

            if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                if (String.IsNullOrEmpty(pCurrList))
                {
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPInvTax.VendorNum), Compatibility.Convert.ToString(ttAPInvTax.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                }

                if (XbSyst != null && XbSyst.UseTaxRate && String.IsNullOrEmpty(taxCurrList))
                {
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed-Tax", Compatibility.Convert.ToString(ttAPInvTax.VendorNum), Compatibility.Convert.ToString(ttAPInvTax.InvoiceNum), "", "", "", "", "", "", out tmpTaxChainRows, out taxCurrList, out taxRateList);
                }

                baseCurrency = this.FindCurrencyBase(Session.CompanyID, true);
                string fieldNameScrReportableAmt = string.Empty;
                string fieldNameScrTaxableAmt = string.Empty;
                string fieldNameScrTaxAmt = string.Empty;
                string fieldNameScrFixedAmount = string.Empty;
                string fieldNameScrDedTaxAmt = string.Empty;


                if (XbSyst != null && XbSyst.UseTaxRate && ((from tmpTaxChain_Row in tmpTaxChainRows
                                                             select tmpTaxChain_Row).Any()))
                {
                    ttAPInvTax.ScrReportableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), nDecReportableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.ScrTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.ScrTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "TaxAmt");
                    ttAPInvTax.ScrDedTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "DedTaxAmt");
                    ttAPInvTax.SysCalcReportableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.SysCalcDocReportableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), nDecReportableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.SysCalcTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.SysCalcDocTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.DefTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.DocDefTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.DefTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.DocDefTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "DefTaxAmt");
                    ttAPInvTax.ScrFixedAmount = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, taxCurrList.Entry(0, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "FixedAmount");
                    doctmpTax = ttAPInvTax.ScrDocTaxAmt;
                    string cRFieldList = "DefTaxableAmt" + Ice.Constants.LIST_DELIM + "DefTaxAmt";
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvTax, false, cRFieldList, taxCurrList, "ttAPInvTax", APInvHed.CurrencyCode, tmpTaxChainRows);

                    for (i = 2; i <= 4; i++)
                    {
                        if (taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrReportableAmt = "Rpt" + (i - 1).ToString() + "ScrReportableAmt";
                            fieldNameScrTaxableAmt = "Rpt" + (i - 1).ToString() + "ScrTaxableAmt";
                            fieldNameScrTaxAmt = "Rpt" + (i - 1).ToString() + "ScrTaxAmt";
                            fieldNameScrFixedAmount = "Rpt" + (i - 1).ToString() + "ScrFixedAmount";
                            fieldNameScrDedTaxAmt = "Rpt" + (i - 1).ToString() + "ScrDedTaxAmt";

                            ttAPInvTax[fieldNameScrReportableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrReportableAmt");
                            ttAPInvTax[fieldNameScrTaxableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrTaxableAmt");
                            ttAPInvTax[fieldNameScrTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrTaxAmt");
                            ttAPInvTax[fieldNameScrFixedAmount] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrFixedAmount");
                            ttAPInvTax[fieldNameScrDedTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, taxCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), tmpTaxChainRows, true, "ttAPInvTax", "ScrDedTaxAmt");
                        }
                    }

                    LibRptfieldscalc.ConvertAmtVarRoundDec(pCurrList, APInvHed.CurrencyCode, ttChainRows, "APInvTax", "TaxAmt", doctmpTax, out rpt1tmpTax, out rpt2tmptax, out rpt3tmptax);
                    ttAPInvTax.ScrTaxAmtVar = tmpTax - ttAPInvTax.ScrTaxAmt;
                    ttAPInvTax.Rpt1ScrTaxAmtVar = rpt1tmpTax - ttAPInvTax.Rpt1ScrTaxAmt;
                    ttAPInvTax.Rpt2ScrTaxAmtVar = rpt2tmptax - ttAPInvTax.Rpt2ScrTaxAmt;
                    ttAPInvTax.Rpt3ScrTaxAmtVar = rpt3tmptax - ttAPInvTax.Rpt3ScrTaxAmt;
                }
                else
                {
                    ttAPInvTax.ScrReportableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), nDecReportableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.ScrTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.SysCalcReportableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.SysCalcDocReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), nDecReportableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.SysCalcTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.SysCalcDocTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.DefTaxableAmt = Math.Round((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.DocDefTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), nDecTaxableAmt, MidpointRounding.AwayFromZero);
                    ttAPInvTax.ScrFixedAmount = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.DocFixedAmount, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "FixedAmount");

                    if (!(apTaxRoundOption == 3 || (apTaxRoundOption == 2 && diffCurr)))
                    {
                        ttAPInvTax.ScrTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "TaxAmt");
                        ttAPInvTax.ScrDedTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "DedTaxAmt");
                        ttAPInvTax.DefTaxAmt = this.LibProcessTaxes.RoundRuleTaxMethodGeneral((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.DocDefTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), "L", rndRule, baseCurrency, "APInvTax", "DefTaxAmt");
                    }
                    else
                    {
                        ttAPInvTax.ScrTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                        ttAPInvTax.ScrDedTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                        ttAPInvTax.DefTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvTax.DocDefTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                    }

                    string cRFieldList = "DefTaxableAmt" + Ice.Constants.LIST_DELIM + "DefTaxAmt";
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvTax, false, cRFieldList, pCurrList, "ttAPInvTax", APInvHed.CurrencyCode, ttChainRows);

                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrReportableAmt = "Rpt" + (i - 1).ToString() + "ScrReportableAmt";
                            fieldNameScrTaxableAmt = "Rpt" + (i - 1).ToString() + "ScrTaxableAmt";
                            fieldNameScrTaxAmt = "Rpt" + (i - 1).ToString() + "ScrTaxAmt";
                            fieldNameScrFixedAmount = "Rpt" + (i - 1).ToString() + "ScrFixedAmount";
                            fieldNameScrDedTaxAmt = "Rpt" + (i - 1).ToString() + "ScrDedTaxAmt";

                            ttAPInvTax[fieldNameScrReportableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrReportableAmt");
                            ttAPInvTax[fieldNameScrTaxableAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrTaxableAmt");
                            ttAPInvTax[fieldNameScrTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrTaxAmt");
                            ttAPInvTax[fieldNameScrFixedAmount] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocFixedAmount, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrFixedAmount");
                            ttAPInvTax[fieldNameScrDedTaxAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvTax.ScrDocDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvTax", "ScrDedTaxAmt");
                        }
                    }

                    if (!APInvHed.DebitMemo)
                    {
                        ttAPInvTax.SysCalcTaxableAmt = ttAPInvTax.ScrTaxableAmt;
                        ttAPInvTax.Rpt1SysCalcTaxableAmt = ttAPInvTax.Rpt1ScrTaxableAmt;
                        ttAPInvTax.Rpt2SysCalcTaxableAmt = ttAPInvTax.Rpt2ScrTaxableAmt;
                        ttAPInvTax.Rpt3SysCalcTaxableAmt = ttAPInvTax.Rpt3ScrTaxableAmt;
                        ttAPInvTax.SysCalcReportableAmt = ttAPInvTax.ScrReportableAmt;
                        ttAPInvTax.Rpt1SysCalcReportableAmt = ttAPInvTax.Rpt1ScrReportableAmt;
                        ttAPInvTax.Rpt2SysCalcReportableAmt = ttAPInvTax.Rpt2ScrReportableAmt;
                        ttAPInvTax.Rpt3SysCalcReportableAmt = ttAPInvTax.Rpt3ScrReportableAmt;
                    }
                    else
                    {
                        ttAPInvTax.SysCalcTaxableAmt = -ttAPInvTax.ScrTaxableAmt;
                        ttAPInvTax.Rpt1SysCalcTaxableAmt = -ttAPInvTax.Rpt1ScrTaxableAmt;
                        ttAPInvTax.Rpt2SysCalcTaxableAmt = -ttAPInvTax.Rpt2ScrTaxableAmt;
                        ttAPInvTax.Rpt3SysCalcTaxableAmt = -ttAPInvTax.Rpt3ScrTaxableAmt;
                        ttAPInvTax.SysCalcReportableAmt = -ttAPInvTax.ScrReportableAmt;
                        ttAPInvTax.Rpt1SysCalcReportableAmt = -ttAPInvTax.Rpt1ScrReportableAmt;
                        ttAPInvTax.Rpt2SysCalcReportableAmt = -ttAPInvTax.Rpt2ScrReportableAmt;
                        ttAPInvTax.Rpt3SysCalcReportableAmt = -ttAPInvTax.Rpt3ScrReportableAmt;
                    }


                }
            }
            else
            {
                ttAPInvTax.ScrReportableAmt = ttAPInvTax.ScrDocReportableAmt;
                ttAPInvTax.ScrTaxableAmt = ttAPInvTax.ScrDocTaxableAmt;
                ttAPInvTax.ScrTaxAmt = ttAPInvTax.ScrDocTaxAmt;
                ttAPInvTax.ScrDedTaxAmt = ttAPInvTax.ScrDocDedTaxAmt;
                ttAPInvTax.SysCalcReportableAmt = ttAPInvTax.SysCalcDocReportableAmt;
                ttAPInvTax.SysCalcTaxableAmt = ttAPInvTax.SysCalcDocTaxableAmt;
                ttAPInvTax.DefTaxableAmt = ttAPInvTax.DocDefTaxableAmt;
                ttAPInvTax.DefTaxAmt = ttAPInvTax.DocDefTaxAmt;
            }
        }

        private void chgRateCodeHedMscCore()
        {

            DateTime? vInvDate = null;
            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            decimal termsDiscount = decimal.Zero;
            string baseCurrency = string.Empty;
            int rndRule = 0;
            int nDecTaxAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvHedMscTax", "TaxAmt", "");
            int nDecTaxableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvHedMscTax", "TaxableAmt", "");
            int nDecDocTaxAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvHedMscTax", "DocTaxAmt", "");
            int nDecDocTaxableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvHedMscTax", "DocTaxableAmt", "");
            int nDecReportableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvHedMscTax", "ReportableAmt", "");
            int nDecDocReportableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvHedMscTax", "DocReportableAmt", "");

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceHeaderIsNotFound, "APInvHed");
            }

            baseCurrency = this.FindCurrencyBase(Session.CompanyID, true);
            int apTaxRoundOption = APInvHed.APTaxRoundOption;
            bool diffCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);

            var apInvMsc = this.FindFirstAPInvMsc(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, 0, ttAPInvHedMscTax.MscNum);

            if (apInvMsc != null)
            {


                PurTerms = PurTerms.FindFirstByPrimaryKey(Db, Session.CompanyID, APInvHed.TermsCode);
                var PurTermDQuery2 = DBExpressionCompiler.Compile(PurTermDExpression2);
                PurTermD = PurTermDQuery2(Db, Session.CompanyID, APInvHed.TermsCode);

                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }

                SalesTax = SalesTax.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvHedMscTax.TaxCode);
                if (SalesTax == null)
                {
                    throw new BLException(Strings.InvalidTaxCode, "APInvHedMscTax", "TaxCode");
                }
                if (!String.IsNullOrEmpty(ttAPInvHedMscTax.RateCode))
                {


                    TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, vInvDate.Value);
                    if (TaxRate == null)
                    {
                        throw new BLException(Strings.InvalidRateCode, "APInvHedMscTax", "RateCode");
                    }
                }

                if (SalesTax.RoundDown == true)
                {
                    rndRule = 2;
                }
                else
                {
                    rndRule = 0;
                }

                /* RESET INFO FOR RECALC OF TAX INFO */
                ttAPInvHedMscTax.ScrTaxableAmt = 0;
                ttAPInvHedMscTax.ScrTaxAmt = 0;
                ttAPInvHedMscTax.DocScrTaxableAmt = 0;
                ttAPInvHedMscTax.DocScrTaxAmt = 0;
                ttAPInvHedMscTax.ScrReportableAmt = 0;
                ttAPInvHedMscTax.DocScrReportableAmt = 0;
                ttAPInvHedMscTax.Rpt1ScrTaxAmt = 0;
                ttAPInvHedMscTax.Rpt1ScrTaxableAmt = 0;
                ttAPInvHedMscTax.Rpt1ScrReportableAmt = 0;
                ttAPInvHedMscTax.Rpt2ScrTaxAmt = 0;
                ttAPInvHedMscTax.Rpt2ScrTaxableAmt = 0;
                ttAPInvHedMscTax.Rpt2ScrReportableAmt = 0;
                ttAPInvHedMscTax.Rpt3ScrTaxAmt = 0;
                ttAPInvHedMscTax.Rpt3ScrTaxableAmt = 0;
                ttAPInvHedMscTax.Rpt3ScrReportableAmt = 0;
                ttAPInvHedMscTax.ScrDedTaxAmt = 0;
                ttAPInvHedMscTax.DocScrDedTaxAmt = 0;
                ttAPInvHedMscTax.Rpt1ScrDedTaxAmt = 0;
                ttAPInvHedMscTax.Rpt2ScrDedTaxAmt = 0;
                ttAPInvHedMscTax.Rpt3ScrDedTaxAmt = 0;
                ttAPInvHedMscTax.DocScrFixedAmount = 0;
                ttAPInvHedMscTax.ScrFixedAmount = 0;
                ttAPInvHedMscTax.Rpt1ScrFixedAmount = 0;
                ttAPInvHedMscTax.Rpt2ScrFixedAmount = 0;
                ttAPInvHedMscTax.Rpt3ScrFixedAmount = 0;

                ttLineTypesRows = new List<Internal.Lib.ProcessTaxes.LineTypes>();
                ttLineTypes = new Internal.Lib.ProcessTaxes.LineTypes();
                ttLineTypesRows.Add(ttLineTypes);
                ttLineTypes.adKey = Compatibility.Convert.ToString(apInvMsc.InvoiceLine);
                ttLineTypes.DocType = "APINVOICES";
                ttLineTypes.TaxCode = ttAPInvHedMscTax.TaxCode;
                ttLineTypes.RateCode = ttAPInvHedMscTax.RateCode;
                ttLineTypes.ManAdd = true;
                ttLineTypes.Manual = false;
                ttLineTypes.TaxMethod = "L";
                ttLineTypes.RoundRule = rndRule;
                ttLineTypes.DocTaxableAmt = apInvMsc.DocMiscAmt;
                ttLineTypes.DocTermsTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttLineTypes.DocNoExemptTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttLineTypes.CollectionType = SalesTax.CollectionType;
                ttLineTypes.Timing = SalesTax.Timing;
                ttLineTypes.Algorithm = SalesTax.Algorithm;
                ttLineTypes.CurrencyCode = APInvHed.CurrencyCode;
                ttLineTypes.RateGrpCode = APInvHed.RateGrpCode;
                ttLineTypes.VendorNum = APInvHed.VendorNum;
                ttLineTypes.TaxCatID = apInvMsc.TaxCatID;
                ttLineTypes.nDecTaxAmt = nDecTaxAmt;
                ttLineTypes.nDecTaxableAmt = nDecTaxableAmt;
                ttLineTypes.nDecDocTaxAmt = nDecDocTaxAmt;
                ttLineTypes.nDecDocTaxableAmt = nDecDocTaxableAmt;
                ttLineTypes.nDecReportableAmt = nDecReportableAmt;
                ttLineTypes.nDecDocReportableAmt = nDecDocReportableAmt;
                ttLineTypes.TaxRateDate = vInvDate;
                ttLineTypes.SalesTaxLegalText = SalesTax.TextCode;

                var outExemptType2 = ttLineTypes.ExemptType;
                var outExemptRate2 = ttLineTypes.ExemptRate;
                var outResolutionNum2 = ttLineTypes.ResolutionNum;
                var outResolutionDate2 = ttLineTypes.ResolutionDate;
                var outLegalText2 = ttLineTypes.LegalText;
                var outReportable2 = ttLineTypes.Reportable;
                LibProcessTaxes.getCustomTaxExemptInfo(ttLineTypes.TaxCode, ttLineTypes.RateCode, out outExemptType2, out outExemptRate2, out outResolutionNum2, out outResolutionDate2, out outLegalText2, out outReportable2, ref ttLineExemptRows, ref ttLineTypes);
                ttLineTypes.ExemptType = outExemptType2;
                ttLineTypes.ExemptRate = outExemptRate2;
                ttLineTypes.ResolutionNum = outResolutionNum2;
                ttLineTypes.ResolutionDate = outResolutionDate2;
                ttLineTypes.LegalText = outLegalText2;
                ttLineTypes.Reportable = outReportable2;
                ttLineTypes.TaxRoundOption = apTaxRoundOption;
                ttLineTypes.DiffDocCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);
                ttLineTypes.NoCurrRound = (apTaxRoundOption == 0 || (apTaxRoundOption == 2 && ttLineTypes.DiffDocCurr)) ? true : false;
                ttLineTypes.TaxTbl = "APInvHedMscTax";
                ttLineTypes.TaxFld = "DocTaxAmt";
                ttLineTypes.TaxableFld = "DocTaxableAmt";
                ttLineTypes.FullCalc = true;
                if (this.ExistsPurMiscDiscount(APInvHed.Company, apInvMsc.MiscCode, true))
                {
                    if ((SalesTax.DiscountType == 2 && termsDiscount != 0))
                    {
                        ttLineTypes.DocTaxableAmt = LibRoundRulesEF.RoundRuleApply((ttLineTypes.DocTaxableAmt * ((100 - termsDiscount) / 100)), LibRoundRulesEF.TypeAmt_UnitPrice, ttLineTypes.CurrencyCode);
                    }
                }

                LibProcessTaxes.ProcessOneTaxLine(ref ttLineTypes);
                if (ttLineTypes.CompMethod.Equals("I", StringComparison.OrdinalIgnoreCase) && (ttLineTypes.TaxMinAmt != 0 || ttLineTypes.TaxMaxAmt != 0))
                {
                    // this is limitation for manually added lines. The "Compare at" Document level is treated as "Line level"
                    if (Math.Abs(ttLineTypes.DocTaxAmt) > ttLineTypes.TaxMaxAmt && ttLineTypes.TaxMaxAmt != 0)
                    {
                        if (ttLineTypes.DocTaxableAmt >= 0)
                        {
                            ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt;
                        }
                        else
                        {
                            ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt * -1;

                        }

                    }
                    else
                    {
                        if (Math.Abs(ttLineTypes.DocTaxAmt) < ttLineTypes.TaxMinAmt && ttLineTypes.TaxMinAmt != 0)
                        {
                            if (ttLineTypes.DocTaxableAmt >= 0)
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt;
                            }
                            else
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt * -1;
                            }
                        }

                    }
                }

                ttLineTypes.DocDedTaxAmt = LibProcessTaxes.RoundRuleTaxMethodEx((ttLineTypes.DocTaxAmt * ttLineTypes.DeductPercent / 100), ttLineTypes.TaxMethod, ttLineTypes.RoundRule, ttLineTypes.CurrencyCode, ttLineTypes.NoCurrRound, "APInvTax", "DocDedTaxAmt");
                ttAPInvHedMscTax.Percent = ttLineTypes.Percent;
                ttAPInvHedMscTax.CollectionType = ttLineTypes.CollectionType;
                ttAPInvHedMscTax.Timing = ttLineTypes.Timing;
                ttAPInvHedMscTax.ReverseCharge = ttLineTypes.ReverseCharge;
                if (ttLineTypes.TaxRateDate == null)
                {
                    ttAPInvHedMscTax.TaxRateDate = null;
                }
                else
                {
                    ttAPInvHedMscTax.TaxRateDate = (DateTime)ttLineTypes.TaxRateDate;
                }

                ttAPInvHedMscTax.ExemptType = ttLineTypes.ExemptType;
                ttAPInvHedMscTax.ExemptPercent = ttLineTypes.ExemptRate;
                ttAPInvHedMscTax.ECAcquisitionSeq = 0;
                ttAPInvHedMscTax.ResolutionNum = ttLineTypes.ResolutionNum;
                if (ttLineTypes.ResolutionDate == null)
                {
                    ttAPInvHedMscTax.ResolutionDate = null;
                }
                else
                {
                    ttAPInvHedMscTax.ResolutionDate = (DateTime)ttLineTypes.ResolutionDate;
                }

                ttAPInvHedMscTax.TextCode = ttLineTypes.LegalText;

                ttAPInvHedMscTax.DocDefTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttAPInvHedMscTax.DocDefTaxAmt = ttLineTypes.DocDedTaxAmt;
                ttAPInvHedMscTax.SysCalcDocTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttAPInvHedMscTax.SysCalcDocReportableAmt = ttLineTypes.DocReportableAmt;
                if (!APInvHed.DebitMemo)
                {
                    ttAPInvHedMscTax.DocScrReportableAmt = ttLineTypes.DocReportableAmt;
                    ttAPInvHedMscTax.DocScrTaxableAmt = ttLineTypes.DocTaxableAmt;
                    ttAPInvHedMscTax.DocScrTaxAmt = ttLineTypes.DocTaxAmt;
                    ttAPInvHedMscTax.DocScrDedTaxAmt = ttLineTypes.DocDedTaxAmt;
                    ttAPInvHedMscTax.DocScrFixedAmount = ttLineTypes.FixedAmount;
                }
                else
                {
                    ttAPInvHedMscTax.DocScrReportableAmt = -ttLineTypes.DocReportableAmt;
                    ttAPInvHedMscTax.DocScrTaxableAmt = -ttLineTypes.DocTaxableAmt;
                    ttAPInvHedMscTax.DocScrTaxAmt = -ttLineTypes.DocTaxAmt;
                    ttAPInvHedMscTax.DocScrDedTaxAmt = -ttLineTypes.DocDedTaxAmt;
                    ttAPInvHedMscTax.DocScrFixedAmount = -ttLineTypes.FixedAmount;
                }



                if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    if (String.IsNullOrEmpty(pCurrList))
                    {
                        this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPInvHedMscTax.VendorNum), Compatibility.Convert.ToString(ttAPInvHedMscTax.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                    }

                    if (XbSyst != null && XbSyst.UseTaxRate && String.IsNullOrEmpty(taxCurrList))
                    {
                        this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed-Tax", Compatibility.Convert.ToString(ttAPInvHedMscTax.VendorNum), Compatibility.Convert.ToString(ttAPInvHedMscTax.InvoiceNum), "", "", "", "", "", "", out tmpTaxChainRows, out taxCurrList, out taxRateList);
                    }

                    string cRFieldList = "DefTaxableAmt" + Ice.Constants.LIST_DELIM + "DefTaxAmt" + Ice.Constants.LIST_DELIM + "ScrReportableAmt" + Ice.Constants.LIST_DELIM + "ScrTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt" + Ice.Constants.LIST_DELIM + "ScrFixedAmount";
                    if (!(apTaxRoundOption == 3 || (apTaxRoundOption == 2 && diffCurr)))
                    {
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, cRFieldList, pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
                    }
                    else
                    {
                        cRFieldList = "DefTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrReportableAmt" + Ice.Constants.LIST_DELIM + "ScrTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrFixedAmount";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, true, cRFieldList, pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
                        ttAPInvHedMscTax.ScrTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvHedMscTax.DocScrTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                        ttAPInvHedMscTax.ScrDedTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvHedMscTax.DocScrDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                        ttAPInvHedMscTax.DefTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvHedMscTax.DocDefTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                        cRFieldList = "DefTaxAmt" + Ice.Constants.LIST_DELIM + "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHedMscTax, false, cRFieldList, pCurrList, "ttAPInvHedMscTax", APInvHed.CurrencyCode, ttChainRows);
                    }
                }
                else
                {

                    ttAPInvHedMscTax.ScrReportableAmt = ttAPInvHedMscTax.DocScrReportableAmt;
                    ttAPInvHedMscTax.ScrTaxableAmt = ttAPInvHedMscTax.DocScrTaxableAmt;
                    ttAPInvHedMscTax.ScrTaxAmt = ttAPInvHedMscTax.DocScrTaxAmt;
                    ttAPInvHedMscTax.ScrDedTaxAmt = ttAPInvHedMscTax.DocScrDedTaxAmt;
                    ttAPInvHedMscTax.SysCalcReportableAmt = ttAPInvHedMscTax.SysCalcDocReportableAmt;
                    ttAPInvHedMscTax.SysCalcTaxableAmt = ttAPInvHedMscTax.SysCalcDocTaxableAmt;
                    ttAPInvHedMscTax.DefTaxableAmt = ttAPInvHedMscTax.DocDefTaxableAmt;
                    ttAPInvHedMscTax.DefTaxAmt = ttAPInvTax.DocDefTaxAmt;
                    ttAPInvHedMscTax.DocScrFixedAmount = ttAPInvHedMscTax.ScrFixedAmount;

                }
            } //related Invoice line misc charge is not null
        }

        private void chgRateCodeLineCore()
        {

            DateTime? vInvDate = null;
            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            decimal termsDiscount = decimal.Zero;
            string baseCurrency = string.Empty;
            int rndRule = 0;
            int nDecTaxAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APLnTax", "TaxAmt", "");
            int nDecTaxableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APLnTax", "TaxableAmt", "");
            int nDecDocTaxAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APLnTax", "DocTaxAmt", "");
            int nDecDocTaxableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APLnTax", "DocTaxableAmt", "");
            int nDecReportableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APLnTax", "ReportableAmt", "");
            int nDecDocReportableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APLnTax", "DocReportableAmt", "");

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceHeaderIsNotFound, "APInvHed");
            }

            baseCurrency = this.FindCurrencyBase(Session.CompanyID, true);
            int apTaxRoundOption = APInvHed.APTaxRoundOption;
            bool diffCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine);
            if (APInvDtl != null)
            {
                PurTerms = PurTerms.FindFirstByPrimaryKey(Db, Session.CompanyID, APInvHed.TermsCode);
                var PurTermDQuery2 = DBExpressionCompiler.Compile(PurTermDExpression2);
                PurTermD = PurTermDQuery2(Db, Session.CompanyID, APInvHed.TermsCode);

                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }

                SalesTax = SalesTax.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPLnTax.TaxCode);
                if (SalesTax == null)
                {
                    throw new BLException(Strings.InvalidTaxCode, "APLnTax", "TaxCode");
                }
                if (!String.IsNullOrEmpty(ttAPLnTax.RateCode))
                {


                    TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, vInvDate.Value);
                    if (TaxRate == null)
                    {
                        throw new BLException(Strings.InvalidRateCode, "APLnTax", "RateCode");
                    }
                }

                if (SalesTax.RoundDown == true)
                {
                    rndRule = 2;
                }
                else
                {
                    rndRule = 0;
                }

                /* RESET INFO FOR RECALC OF TAX INFO */
                ttAPLnTax.ScrTaxableAmt = 0;
                ttAPLnTax.ScrTaxAmt = 0;
                ttAPLnTax.DocScrTaxableAmt = 0;
                ttAPLnTax.DocScrTaxAmt = 0;
                ttAPLnTax.ScrReportableAmt = 0;
                ttAPLnTax.DocScrReportableAmt = 0;
                ttAPLnTax.Rpt1ScrTaxAmt = 0;
                ttAPLnTax.Rpt1ScrTaxableAmt = 0;
                ttAPLnTax.Rpt1ScrReportableAmt = 0;
                ttAPLnTax.Rpt2ScrTaxAmt = 0;
                ttAPLnTax.Rpt2ScrTaxableAmt = 0;
                ttAPLnTax.Rpt2ScrReportableAmt = 0;
                ttAPLnTax.Rpt3ScrTaxAmt = 0;
                ttAPLnTax.Rpt3ScrTaxableAmt = 0;
                ttAPLnTax.Rpt3ScrReportableAmt = 0;
                ttAPLnTax.ScrDedTaxAmt = 0;
                ttAPLnTax.DocScrDedTaxAmt = 0;
                ttAPLnTax.Rpt1ScrDedTaxAmt = 0;
                ttAPLnTax.Rpt2ScrDedTaxAmt = 0;
                ttAPLnTax.Rpt3ScrDedTaxAmt = 0;
                ttAPLnTax.DocScrFixedAmount = 0;
                ttAPLnTax.ScrFixedAmount = 0;
                ttAPLnTax.Rpt1ScrFixedAmount = 0;
                ttAPLnTax.Rpt2ScrFixedAmount = 0;
                ttAPLnTax.Rpt3ScrFixedAmount = 0;

                ttLineTypesRows = new List<Internal.Lib.ProcessTaxes.LineTypes>();
                ttLineTypes = new Internal.Lib.ProcessTaxes.LineTypes();
                ttLineTypesRows.Add(ttLineTypes);
                ttLineTypes.adKey = Compatibility.Convert.ToString(APInvDtl.InvoiceLine);
                ttLineTypes.DocType = "APINVOICES";
                ttLineTypes.TaxCode = ttAPLnTax.TaxCode;
                ttLineTypes.RateCode = ttAPLnTax.RateCode;
                ttLineTypes.LineNum = APInvDtl.InvoiceLine;
                ttLineTypes.ManAdd = true;
                ttLineTypes.Manual = false;
                ttLineTypes.TaxMethod = "L";
                ttLineTypes.RoundRule = rndRule;
                ttLineTypes.DocTaxableAmt = APInvDtl.DocExtCost - APInvDtl.DocLineDiscAmt - APInvDtl.DocAdvancePayAmt;
                ttLineTypes.DocTermsTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttLineTypes.DocNoExemptTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttLineTypes.DocDiscount = APInvDtl.DocLineDiscAmt;
                ttLineTypes.CollectionType = SalesTax.CollectionType;
                ttLineTypes.Timing = SalesTax.Timing;
                ttLineTypes.Algorithm = SalesTax.Algorithm;
                ttLineTypes.CurrencyCode = APInvHed.CurrencyCode;
                ttLineTypes.RateGrpCode = APInvHed.RateGrpCode;
                ttLineTypes.VendorNum = APInvHed.VendorNum;
                ttLineTypes.PartNum = APInvDtl.PartNum;
                ttLineTypes.TaxCatID = APInvDtl.TaxCatID;
                ttLineTypes.nDecTaxAmt = nDecTaxAmt;
                ttLineTypes.nDecTaxableAmt = nDecTaxableAmt;
                ttLineTypes.nDecDocTaxAmt = nDecDocTaxAmt;
                ttLineTypes.nDecDocTaxableAmt = nDecDocTaxableAmt;
                ttLineTypes.nDecReportableAmt = nDecReportableAmt;
                ttLineTypes.nDecDocReportableAmt = nDecDocReportableAmt;
                ttLineTypes.TaxRateDate = vInvDate;
                ttLineTypes.SalesTaxLegalText = SalesTax.TextCode;

                var outExemptType2 = ttLineTypes.ExemptType;
                var outExemptRate2 = ttLineTypes.ExemptRate;
                var outResolutionNum2 = ttLineTypes.ResolutionNum;
                var outResolutionDate2 = ttLineTypes.ResolutionDate;
                var outLegalText2 = ttLineTypes.LegalText;
                var outReportable2 = ttLineTypes.Reportable;
                LibProcessTaxes.getCustomTaxExemptInfo(ttLineTypes.TaxCode, ttLineTypes.RateCode, out outExemptType2, out outExemptRate2, out outResolutionNum2, out outResolutionDate2, out outLegalText2, out outReportable2, ref ttLineExemptRows, ref ttLineTypes);
                ttLineTypes.ExemptType = outExemptType2;
                ttLineTypes.ExemptRate = outExemptRate2;
                ttLineTypes.ResolutionNum = outResolutionNum2;
                ttLineTypes.ResolutionDate = outResolutionDate2;
                ttLineTypes.LegalText = outLegalText2;
                ttLineTypes.Reportable = outReportable2;
                ttLineTypes.RoundRule = rndRule;
                ttLineTypes.TaxRoundOption = apTaxRoundOption;
                ttLineTypes.DiffDocCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);
                ttLineTypes.NoCurrRound = (apTaxRoundOption == 0 || (apTaxRoundOption == 2 && ttLineTypes.DiffDocCurr)) ? true : false;
                ttLineTypes.TaxTbl = "APLnTax";
                ttLineTypes.TaxFld = "DocTaxAmt";
                ttLineTypes.TaxableFld = "DocTaxableAmt";
                ttLineTypes.FullCalc = true;
                if ((SalesTax.DiscountType == 2 && termsDiscount != 0))
                {
                    ttLineTypes.DocTaxableAmt = LibRoundRulesEF.RoundRuleApply((ttLineTypes.DocTaxableAmt * ((100 - termsDiscount) / 100)), LibRoundRulesEF.TypeAmt_UnitPrice, ttLineTypes.CurrencyCode);
                }

                LibProcessTaxes.ProcessOneTaxLine(ref ttLineTypes);
                if (ttLineTypes.CompMethod.Equals("I", StringComparison.OrdinalIgnoreCase) && (ttLineTypes.TaxMinAmt != 0 || ttLineTypes.TaxMaxAmt != 0))
                {
                    // this is limitation for manually added lines. The "Compare at" Document level is treated as "Line level"
                    if (Math.Abs(ttLineTypes.DocTaxAmt) > ttLineTypes.TaxMaxAmt && ttLineTypes.TaxMaxAmt != 0)
                    {
                        if (ttLineTypes.DocTaxableAmt >= 0)
                        {
                            ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt;
                        }
                        else
                        {
                            ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt * -1;

                        }

                    }
                    else
                    {
                        if (Math.Abs(ttLineTypes.DocTaxAmt) < ttLineTypes.TaxMinAmt && ttLineTypes.TaxMinAmt != 0)
                        {
                            if (ttLineTypes.DocTaxableAmt >= 0)
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt;
                            }
                            else
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt * -1;
                            }
                        }

                    }
                }

                ttLineTypes.DocDedTaxAmt = LibProcessTaxes.RoundRuleTaxMethodEx((ttLineTypes.DocTaxAmt * ttLineTypes.DeductPercent / 100), ttLineTypes.TaxMethod, ttLineTypes.RoundRule, ttLineTypes.CurrencyCode, ttLineTypes.NoCurrRound, "APLnTax", "DocDedTaxAmt");
                ttAPLnTax.Percent = ttLineTypes.Percent;
                ttAPLnTax.CollectionType = ttLineTypes.CollectionType;
                ttAPLnTax.Timing = ttLineTypes.Timing;
                ttAPLnTax.ReverseCharge = ttLineTypes.ReverseCharge;
                if (ttLineTypes.TaxRateDate == null)
                {
                    ttAPLnTax.TaxRateDate = null;
                }
                else
                {
                    ttAPLnTax.TaxRateDate = (DateTime)ttLineTypes.TaxRateDate;
                }

                ttAPLnTax.ExemptType = ttLineTypes.ExemptType;
                ttAPLnTax.ExemptPercent = ttLineTypes.ExemptRate;
                ttAPLnTax.ECAcquisitionSeq = 0;
                ttAPLnTax.ResolutionNum = ttLineTypes.ResolutionNum;
                if (ttLineTypes.ResolutionDate == null)
                {
                    ttAPLnTax.ResolutionDate = null;
                }
                else
                {
                    ttAPLnTax.ResolutionDate = (DateTime)ttLineTypes.ResolutionDate;
                }

                ttAPLnTax.TextCode = ttLineTypes.LegalText;

                ttAPLnTax.DocDefTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttAPLnTax.DocDefTaxAmt = ttLineTypes.DocTaxAmt;
                ttAPLnTax.SysCalcDocTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttAPLnTax.SysCalcDocReportableAmt = ttLineTypes.DocReportableAmt;
                if (!APInvHed.DebitMemo)
                {
                    ttAPLnTax.DocScrReportableAmt = ttLineTypes.DocReportableAmt;
                    ttAPLnTax.DocScrTaxableAmt = ttLineTypes.DocTaxableAmt;
                    ttAPLnTax.DocScrTaxAmt = ttLineTypes.DocTaxAmt;
                    ttAPLnTax.DocScrDedTaxAmt = ttLineTypes.DocDedTaxAmt;
                    ttAPLnTax.DocScrFixedAmount = ttLineTypes.FixedAmount;
                }
                else
                {
                    ttAPLnTax.DocScrReportableAmt = -ttLineTypes.DocReportableAmt;
                    ttAPLnTax.DocScrTaxableAmt = -ttLineTypes.DocTaxableAmt;
                    ttAPLnTax.DocScrTaxAmt = -ttLineTypes.DocTaxAmt;
                    ttAPLnTax.DocScrDedTaxAmt = -ttLineTypes.DocDedTaxAmt;
                    ttAPLnTax.DocScrFixedAmount = -ttLineTypes.FixedAmount;
                }



                if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    if (String.IsNullOrEmpty(pCurrList))
                    {
                        this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPLnTax.VendorNum), Compatibility.Convert.ToString(ttAPLnTax.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                    }

                    if (XbSyst != null && XbSyst.UseTaxRate && String.IsNullOrEmpty(taxCurrList))
                    {
                        this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed-Tax", Compatibility.Convert.ToString(ttAPLnTax.VendorNum), Compatibility.Convert.ToString(ttAPLnTax.InvoiceNum), "", "", "", "", "", "", out tmpTaxChainRows, out taxCurrList, out taxRateList);
                    }

                    string cRFieldList = "DefTaxableAmt" + Ice.Constants.LIST_DELIM + "DefTaxAmt" + Ice.Constants.LIST_DELIM + "ScrReportableAmt" + Ice.Constants.LIST_DELIM + "ScrTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt" + Ice.Constants.LIST_DELIM + "ScrFixedAmount";
                    if (!(apTaxRoundOption == 3 || (apTaxRoundOption == 2 && diffCurr)))
                    {
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, cRFieldList, pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
                    }
                    else
                    {
                        cRFieldList = "DefTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrReportableAmt" + Ice.Constants.LIST_DELIM + "ScrTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrFixedAmount";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, true, cRFieldList, pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
                        ttAPLnTax.ScrTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPLnTax.DocScrTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                        ttAPLnTax.ScrDedTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPLnTax.DocScrDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                        ttAPLnTax.DefTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPLnTax.DocDefTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                        cRFieldList = "DefTaxAmt" + Ice.Constants.LIST_DELIM + "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPLnTax, false, cRFieldList, pCurrList, "ttAPLnTax", APInvHed.CurrencyCode, ttChainRows);
                    }
                }
                else
                {

                    ttAPLnTax.ScrReportableAmt = ttAPLnTax.DocScrReportableAmt;
                    ttAPLnTax.ScrTaxableAmt = ttAPLnTax.DocScrTaxableAmt;
                    ttAPLnTax.ScrTaxAmt = ttAPLnTax.DocScrTaxAmt;
                    ttAPLnTax.ScrDedTaxAmt = ttAPLnTax.DocScrDedTaxAmt;
                    ttAPLnTax.SysCalcReportableAmt = ttAPLnTax.SysCalcDocReportableAmt;
                    ttAPLnTax.SysCalcTaxableAmt = ttAPLnTax.SysCalcDocTaxableAmt;
                    ttAPLnTax.DefTaxableAmt = ttAPLnTax.DocDefTaxableAmt;
                    ttAPLnTax.DefTaxAmt = ttAPLnTax.DocDefTaxAmt;
                    ttAPLnTax.DocScrFixedAmount = ttAPLnTax.ScrFixedAmount;

                }
            } //related Invoice line is not null
        }


        private void chgRateCodeLnMscCore()
        {

            DateTime? vInvDate = null;
            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            decimal termsDiscount = decimal.Zero;
            string baseCurrency = string.Empty;
            int rndRule = 0;
            int nDecTaxAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvLnMscTax", "TaxAmt", "");
            int nDecTaxableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvLnMscTax", "TaxableAmt", "");
            int nDecDocTaxAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvLnMscTax", "DocTaxAmt", "");
            int nDecDocTaxableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvLnMscTax", "DocTaxableAmt", "");
            int nDecReportableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvLnMscTax", "ReportableAmt", "");
            int nDecDocReportableAmt = LibGetDecimalsNumber.getDecimalsNumberByName("APInvLnMscTax", "DocReportableAmt", "");

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceHeaderIsNotFound, "APInvHed");
            }

            baseCurrency = this.FindCurrencyBase(Session.CompanyID, true);
            int apTaxRoundOption = APInvHed.APTaxRoundOption;
            bool diffCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);

            var apInvMsc = this.FindFirstAPInvMsc(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum);

            if (apInvMsc != null)
            {


                PurTerms = PurTerms.FindFirstByPrimaryKey(Db, Session.CompanyID, APInvHed.TermsCode);
                var PurTermDQuery2 = DBExpressionCompiler.Compile(PurTermDExpression2);
                PurTermD = PurTermDQuery2(Db, Session.CompanyID, APInvHed.TermsCode);

                if (APInvHed.TaxRateDate != null)
                {
                    vInvDate = APInvHed.TaxRateDate;
                }
                else if (APInvHed.TaxPoint != null)
                {
                    vInvDate = APInvHed.TaxPoint;
                }
                else if (APInvHed.InvoiceDate != null)
                {
                    vInvDate = APInvHed.InvoiceDate;
                }

                SalesTax = SalesTax.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvLnMscTax.TaxCode);
                if (SalesTax == null)
                {
                    throw new BLException(Strings.InvalidTaxCode, "APInvLnMscTax", "TaxCode");
                }
                if (!String.IsNullOrEmpty(ttAPInvLnMscTax.RateCode))
                {


                    TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, vInvDate.Value);
                    if (TaxRate == null)
                    {
                        throw new BLException(Strings.InvalidRateCode, "APInvLnMscTax", "RateCode");
                    }
                }

                if (SalesTax.RoundDown == true)
                {
                    rndRule = 2;
                }
                else
                {
                    rndRule = 0;
                }

                /* RESET INFO FOR RECALC OF TAX INFO */
                ttAPInvLnMscTax.ScrTaxableAmt = 0;
                ttAPInvLnMscTax.ScrTaxAmt = 0;
                ttAPInvLnMscTax.DocScrTaxableAmt = 0;
                ttAPInvLnMscTax.DocScrTaxAmt = 0;
                ttAPInvLnMscTax.ScrReportableAmt = 0;
                ttAPInvLnMscTax.DocScrReportableAmt = 0;
                ttAPInvLnMscTax.Rpt1ScrTaxAmt = 0;
                ttAPInvLnMscTax.Rpt1ScrTaxableAmt = 0;
                ttAPInvLnMscTax.Rpt1ScrReportableAmt = 0;
                ttAPInvLnMscTax.Rpt2ScrTaxAmt = 0;
                ttAPInvLnMscTax.Rpt2ScrTaxableAmt = 0;
                ttAPInvLnMscTax.Rpt2ScrReportableAmt = 0;
                ttAPInvLnMscTax.Rpt3ScrTaxAmt = 0;
                ttAPInvLnMscTax.Rpt3ScrTaxableAmt = 0;
                ttAPInvLnMscTax.Rpt3ScrReportableAmt = 0;
                ttAPInvLnMscTax.ScrDedTaxAmt = 0;
                ttAPInvLnMscTax.DocScrDedTaxAmt = 0;
                ttAPInvLnMscTax.Rpt1ScrDedTaxAmt = 0;
                ttAPInvLnMscTax.Rpt2ScrDedTaxAmt = 0;
                ttAPInvLnMscTax.Rpt3ScrDedTaxAmt = 0;
                ttAPInvLnMscTax.DocScrFixedAmount = 0;
                ttAPInvLnMscTax.ScrFixedAmount = 0;
                ttAPInvLnMscTax.Rpt1ScrFixedAmount = 0;
                ttAPInvLnMscTax.Rpt2ScrFixedAmount = 0;
                ttAPInvLnMscTax.Rpt3ScrFixedAmount = 0;

                ttLineTypesRows = new List<Internal.Lib.ProcessTaxes.LineTypes>();
                ttLineTypes = new Internal.Lib.ProcessTaxes.LineTypes();
                ttLineTypesRows.Add(ttLineTypes);
                ttLineTypes.adKey = Compatibility.Convert.ToString(apInvMsc.InvoiceLine);
                ttLineTypes.DocType = "APINVOICES";
                ttLineTypes.TaxCode = ttAPInvLnMscTax.TaxCode;
                ttLineTypes.RateCode = ttAPInvLnMscTax.RateCode;
                ttLineTypes.LineNum = apInvMsc.InvoiceLine;
                ttLineTypes.ManAdd = true;
                ttLineTypes.Manual = false;
                ttLineTypes.TaxMethod = "L";
                ttLineTypes.RoundRule = rndRule;
                ttLineTypes.DocTaxableAmt = apInvMsc.DocMiscAmt;
                ttLineTypes.DocTermsTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttLineTypes.DocNoExemptTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttLineTypes.CollectionType = SalesTax.CollectionType;
                ttLineTypes.Timing = SalesTax.Timing;
                ttLineTypes.Algorithm = SalesTax.Algorithm;
                ttLineTypes.CurrencyCode = APInvHed.CurrencyCode;
                ttLineTypes.RateGrpCode = APInvHed.RateGrpCode;
                ttLineTypes.VendorNum = APInvHed.VendorNum;
                ttLineTypes.TaxCatID = apInvMsc.TaxCatID;
                ttLineTypes.nDecTaxAmt = nDecTaxAmt;
                ttLineTypes.nDecTaxableAmt = nDecTaxableAmt;
                ttLineTypes.nDecDocTaxAmt = nDecDocTaxAmt;
                ttLineTypes.nDecDocTaxableAmt = nDecDocTaxableAmt;
                ttLineTypes.nDecReportableAmt = nDecReportableAmt;
                ttLineTypes.nDecDocReportableAmt = nDecDocReportableAmt;
                ttLineTypes.TaxRateDate = vInvDate;
                ttLineTypes.SalesTaxLegalText = SalesTax.TextCode;

                var outExemptType2 = ttLineTypes.ExemptType;
                var outExemptRate2 = ttLineTypes.ExemptRate;
                var outResolutionNum2 = ttLineTypes.ResolutionNum;
                var outResolutionDate2 = ttLineTypes.ResolutionDate;
                var outLegalText2 = ttLineTypes.LegalText;
                var outReportable2 = ttLineTypes.Reportable;
                LibProcessTaxes.getCustomTaxExemptInfo(ttLineTypes.TaxCode, ttLineTypes.RateCode, out outExemptType2, out outExemptRate2, out outResolutionNum2, out outResolutionDate2, out outLegalText2, out outReportable2, ref ttLineExemptRows, ref ttLineTypes);
                ttLineTypes.ExemptType = outExemptType2;
                ttLineTypes.ExemptRate = outExemptRate2;
                ttLineTypes.ResolutionNum = outResolutionNum2;
                ttLineTypes.ResolutionDate = outResolutionDate2;
                ttLineTypes.LegalText = outLegalText2;
                ttLineTypes.Reportable = outReportable2;
                ttLineTypes.RoundRule = rndRule;
                ttLineTypes.TaxRoundOption = apTaxRoundOption;
                ttLineTypes.DiffDocCurr = !APInvHed.CurrencyCode.KeyEquals(baseCurrency);
                ttLineTypes.NoCurrRound = (apTaxRoundOption == 0 || (apTaxRoundOption == 2 && ttLineTypes.DiffDocCurr)) ? true : false;
                ttLineTypes.TaxTbl = "APInvLnMscTax";
                ttLineTypes.TaxFld = "DocTaxAmt";
                ttLineTypes.TaxableFld = "DocTaxableAmt";
                ttLineTypes.FullCalc = true;
                if (this.ExistsPurMiscDiscount(APInvHed.Company, apInvMsc.MiscCode, true))
                {
                    if ((SalesTax.DiscountType == 2 && termsDiscount != 0))
                    {
                        ttLineTypes.DocTaxableAmt = LibRoundRulesEF.RoundRuleApply((ttLineTypes.DocTaxableAmt * ((100 - termsDiscount) / 100)), LibRoundRulesEF.TypeAmt_UnitPrice, ttLineTypes.CurrencyCode);
                    }
                }

                LibProcessTaxes.ProcessOneTaxLine(ref ttLineTypes);
                if (ttLineTypes.CompMethod.Equals("I", StringComparison.OrdinalIgnoreCase) && (ttLineTypes.TaxMinAmt != 0 || ttLineTypes.TaxMaxAmt != 0))
                {
                    // this is limitation for manually added lines. The "Compare at" Document level is treated as "Line level"
                    if (Math.Abs(ttLineTypes.DocTaxAmt) > ttLineTypes.TaxMaxAmt && ttLineTypes.TaxMaxAmt != 0)
                    {
                        if (ttLineTypes.DocTaxableAmt >= 0)
                        {
                            ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt;
                        }
                        else
                        {
                            ttLineTypes.DocTaxAmt = ttLineTypes.TaxMaxAmt * -1;

                        }

                    }
                    else
                    {
                        if (Math.Abs(ttLineTypes.DocTaxAmt) < ttLineTypes.TaxMinAmt && ttLineTypes.TaxMinAmt != 0)
                        {
                            if (ttLineTypes.DocTaxableAmt >= 0)
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt;
                            }
                            else
                            {
                                ttLineTypes.DocTaxAmt = ttLineTypes.TaxMinAmt * -1;
                            }
                        }

                    }
                }

                ttLineTypes.DocDedTaxAmt = LibProcessTaxes.RoundRuleTaxMethodEx((ttLineTypes.DocTaxAmt * ttLineTypes.DeductPercent / 100), ttLineTypes.TaxMethod, ttLineTypes.RoundRule, ttLineTypes.CurrencyCode, ttLineTypes.NoCurrRound, "APInvLnMscTax", "DocDedTaxAmt");
                ttAPInvLnMscTax.Percent = ttLineTypes.Percent;
                ttAPInvLnMscTax.CollectionType = ttLineTypes.CollectionType;
                ttAPInvLnMscTax.Timing = ttLineTypes.Timing;
                ttAPInvLnMscTax.ReverseCharge = ttLineTypes.ReverseCharge;
                if (ttLineTypes.TaxRateDate == null)
                {
                    ttAPInvLnMscTax.TaxRateDate = null;
                }
                else
                {
                    ttAPInvLnMscTax.TaxRateDate = (DateTime)ttLineTypes.TaxRateDate;
                }

                ttAPInvLnMscTax.ExemptType = ttLineTypes.ExemptType;
                ttAPInvLnMscTax.ExemptPercent = ttLineTypes.ExemptRate;
                ttAPInvLnMscTax.ECAcquisitionSeq = 0;
                ttAPInvLnMscTax.ResolutionNum = ttLineTypes.ResolutionNum;
                if (ttLineTypes.ResolutionDate == null)
                {
                    ttAPInvLnMscTax.ResolutionDate = null;
                }
                else
                {
                    ttAPInvLnMscTax.ResolutionDate = (DateTime)ttLineTypes.ResolutionDate;
                }

                ttAPInvLnMscTax.TextCode = ttLineTypes.LegalText;

                ttAPInvLnMscTax.DocDefTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttAPInvLnMscTax.DocDefTaxAmt = ttLineTypes.DocDedTaxAmt;
                ttAPInvLnMscTax.SysCalcDocTaxableAmt = ttLineTypes.DocTaxableAmt;
                ttAPInvLnMscTax.SysCalcDocReportableAmt = ttLineTypes.DocReportableAmt;
                if (!APInvHed.DebitMemo)
                {
                    ttAPInvLnMscTax.DocScrReportableAmt = ttLineTypes.DocReportableAmt;
                    ttAPInvLnMscTax.DocScrTaxableAmt = ttLineTypes.DocTaxableAmt;
                    ttAPInvLnMscTax.DocScrTaxAmt = ttLineTypes.DocTaxAmt;
                    ttAPInvLnMscTax.DocScrDedTaxAmt = ttLineTypes.DocDedTaxAmt;
                    ttAPInvLnMscTax.DocScrFixedAmount = ttLineTypes.FixedAmount;
                }
                else
                {
                    ttAPInvLnMscTax.DocScrReportableAmt = -ttLineTypes.DocReportableAmt;
                    ttAPInvLnMscTax.DocScrTaxableAmt = -ttLineTypes.DocTaxableAmt;
                    ttAPInvLnMscTax.DocScrTaxAmt = -ttLineTypes.DocTaxAmt;
                    ttAPInvLnMscTax.DocScrDedTaxAmt = -ttLineTypes.DocDedTaxAmt;
                    ttAPInvLnMscTax.DocScrFixedAmount = -ttLineTypes.FixedAmount;
                }



                if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    if (String.IsNullOrEmpty(pCurrList))
                    {
                        this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(ttAPInvLnMscTax.VendorNum), Compatibility.Convert.ToString(ttAPInvLnMscTax.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                    }

                    if (XbSyst != null && XbSyst.UseTaxRate && String.IsNullOrEmpty(taxCurrList))
                    {
                        this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed-Tax", Compatibility.Convert.ToString(ttAPInvLnMscTax.VendorNum), Compatibility.Convert.ToString(ttAPInvLnMscTax.InvoiceNum), "", "", "", "", "", "", out tmpTaxChainRows, out taxCurrList, out taxRateList);
                    }

                    string cRFieldList = "DefTaxableAmt" + Ice.Constants.LIST_DELIM + "DefTaxAmt" + Ice.Constants.LIST_DELIM + "ScrReportableAmt" + Ice.Constants.LIST_DELIM + "ScrTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt" + Ice.Constants.LIST_DELIM + "ScrFixedAmount";
                    if (!(apTaxRoundOption == 3 || (apTaxRoundOption == 2 && diffCurr)))
                    {
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, cRFieldList, pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
                    }
                    else
                    {
                        cRFieldList = "DefTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrReportableAmt" + Ice.Constants.LIST_DELIM + "ScrTaxableAmt" + Ice.Constants.LIST_DELIM + "ScrFixedAmount";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, true, cRFieldList, pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
                        ttAPInvLnMscTax.ScrTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvLnMscTax.DocScrTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                        ttAPInvLnMscTax.ScrDedTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvLnMscTax.DocScrDedTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                        ttAPInvLnMscTax.DefTaxAmt = this.LibProcessTaxes.RoundRuleTaxSale((this.LibConvertAmtEF.ConvertAmt(ttAPInvLnMscTax.DocDefTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true)), LibRoundRulesEF.TypeAmt_ExtTax, rndRule, baseCurrency);
                        cRFieldList = "DefTaxAmt" + Ice.Constants.LIST_DELIM + "ScrTaxAmt" + Ice.Constants.LIST_DELIM + "ScrDedTaxAmt";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvLnMscTax, false, cRFieldList, pCurrList, "ttAPInvLnMscTax", APInvHed.CurrencyCode, ttChainRows);
                    }
                }
                else
                {

                    ttAPInvLnMscTax.ScrReportableAmt = ttAPInvLnMscTax.DocScrReportableAmt;
                    ttAPInvLnMscTax.ScrTaxableAmt = ttAPInvLnMscTax.DocScrTaxableAmt;
                    ttAPInvLnMscTax.ScrTaxAmt = ttAPInvLnMscTax.DocScrTaxAmt;
                    ttAPInvLnMscTax.ScrDedTaxAmt = ttAPInvLnMscTax.DocScrDedTaxAmt;
                    ttAPInvLnMscTax.SysCalcReportableAmt = ttAPInvLnMscTax.SysCalcDocReportableAmt;
                    ttAPInvLnMscTax.SysCalcTaxableAmt = ttAPInvLnMscTax.SysCalcDocTaxableAmt;
                    ttAPInvLnMscTax.DefTaxableAmt = ttAPInvLnMscTax.DocDefTaxableAmt;
                    ttAPInvLnMscTax.DefTaxAmt = ttAPInvTax.DocDefTaxAmt;
                    ttAPInvLnMscTax.DocScrFixedAmount = ttAPInvLnMscTax.ScrFixedAmount;

                }
            } //related Invoice line misc charge is not null
        }


        /// <summary>
        /// Before updating the APInvHed record, CheckBankRef will be called to check if the
        /// bank reference conforms to format standards.  If not, the user will be
        /// presented with a warning message and allowed to continue with the save.
        /// At this time this method is specific to Finland/Sweden localization
        /// </summary>
        /// <param name="OpMessage">The Message to ask the user if the changes for the linked AP Invoice are okay.</param>        
        /// <param name="OpError">Error Message</param>
        /// <param name="ipReturnIfEqual">True: if current value of bank reference is equal to value, stored in DB - no validation is required; False: validation is always required</param>
        private void chkBankRefCore(out string OpMessage, out string OpError, bool ipReturnIfEqual = true)
        {
            OpMessage = string.Empty;
            OpError = string.Empty;
            bool RefChanged = false;
            int iRepeat = 0;
            string cChar = string.Empty;
            string cNumString = "1234567890";
            string cCheckNum = string.Empty;
            bool notNumeric = false;
            string VendorBankRef = string.Empty;
            string checkDigit = string.Empty;
            string baseValue = string.Empty;
            bool VendorNoBankingReference = false;
            Erp.Tables.Vendor bVendor = null;
            Erp.Tables.VendBank bVendBank = null;
            Erp.Tables.Country bCountry = null;
            Erp.Tables.Currency bCurrency = null;

            if (!(isSEOrFILocalization || isEstoniaLocalization || isDenmarkLocalization || isNorwayLocalization || isSwissLocalization || isBelgiumLocalization))
            {
                return;
            }

            if (ttAPInvHed == null)
            {
                return;
            }

            if (String.IsNullOrEmpty(ttAPInvHed.InvoiceNum))
            {
                return;
            }

            if (isNOorEEorFIorDKLocalization)
            {
                if (!string.IsNullOrWhiteSpace(ttAPInvHed.SEBankRef) && !(isSEOrFILocalization && ttAPInvHed.SEBankRef.Compare("X") == 0))
                {
                    XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
                    if (XbSyst != null)
                    {
                        ttAPInvHed.SEBankRef = ttAPInvHed.SEBankRef.PadLeft(XbSyst.OCRLength, '0');
                    }
                }
            }

            if (isBelgiumLocalization)
            {
                if (string.IsNullOrWhiteSpace(ttAPInvHed.SEBankRef))
                {
                    if (!lUseBankReferencing)
                        return;
                    var BVendorQuery = DBExpressionCompiler.Compile(BVendorExpression);
                    bVendor = BVendorQuery(Db, Session.CompanyID, ttAPInvHed.VendorNum);
                    if (bVendor != null && bVendor.NoBankingReference)
                        return;

                    OpMessage = Strings.BankingReferenceIsEmptyForInvoices(ttAPInvHed.InvoiceNum);
                    return;
                }

                if (!System.Text.RegularExpressions.Regex.IsMatch(ttAPInvHed.SEBankRef, @"^\d{3}/\d{4}/\d{5}$"))
                {
                    OpMessage = Strings.BankReferenceNotValidFormat;
                    return;
                }

                string s = System.Text.RegularExpressions.Regex.Replace(ttAPInvHed.SEBankRef, @"/+", "");
                LibCheckDigitGenerate.ValidateCodeReference(s, Internal.Lib.CheckDigitGenerate.UsageFeatureType.PaymentReferenceNumber, 97, string.Empty, out OpMessage);
                return;

            }

            if (isNorwayLocalization)
            {
                string opKID = string.Empty;
                string opMessage = string.Empty;

                BIttAPInvHed = (from BIttAPInvHed_Row in CurrentFullTableset.APInvHed
                                where BIttAPInvHed_Row.SysRowID == ttAPInvHed.SysRowID &&
                                StringExtensions.Compare(BIttAPInvHed_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) == 0
                                select BIttAPInvHed_Row).FirstOrDefault();
                RefChanged = ((BIttAPInvHed != null && (StringExtensions.Compare(BIttAPInvHed.SEBankRef, ttAPInvHed.SEBankRef) != 0)) || (BIttAPInvHed == null));
                if (ttAPInvHed.SEBankRef.Trim().Length == 0)
                {
                    var BVendorQuery = DBExpressionCompiler.Compile(BVendorExpression);
                    bVendor = BVendorQuery(Db, Session.CompanyID, ttAPInvHed.VendorNum);
                    if (bVendor != null && bVendor.NoBankingReference)
                        return;
                }

                if (ttAPInvHed.SEBankRef.Length > 25)
                {
                    OpMessage = Strings.TheBankReferLengthIsGreaterThanCharaDoYouWishTo(25);
                    return;
                }

                if (LibCheckDigitGenerate.ValidateCodeReference(ttAPInvHed.SEBankRef.Trim(), Internal.Lib.CheckDigitGenerate.UsageFeatureType.PaymentReferenceNumber, 10, ttAPInvHed.InvoiceNum, out OpMessage))
                    OpMessage = opMessage;
                else
                    OpError = opMessage;
                return;
            }

            if (isSwissLocalization)
            {
                if (!lUseBankReferencing)
                    return;

                decimal pISRAmount = decimal.Zero;
                string cISRSlipType = string.Empty;
                string cISRSlipCode = string.Empty;
                string cISRCurrencyCode = string.Empty;
                string cISRPartyID = string.Empty;
                string cISRPOBankAcct = string.Empty;
                string cISRVendorBankType = string.Empty;
                string cISRRefNum = string.Empty;
                string cInvCurrencyID = string.Empty;
                string cVendBankPayCountryISOCode = string.Empty;

                var oldAPInvHedPartialRow = FindFirstAPInvHed2(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum);
                if (oldAPInvHedPartialRow != null)
                {
                    if ((StringExtensions.Compare(oldAPInvHedPartialRow.SEBankRef, ttAPInvHed.SEBankRef) == 0) &&
                        (StringExtensions.Compare(oldAPInvHedPartialRow.CHISRCodeLine, ttAPInvHed.CHISRCodeLine) == 0))
                    {
                        return;
                    }
                }

                bVendBank = VendBank.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.BankID);
                if (bVendBank != null)
                {
                    bCountry = Country.FindFirstByPrimaryKey(Db, Session.CompanyID, bVendBank.CountryNum);

                    if (bCountry != null)
                    {
                        cVendBankPayCountryISOCode = bCountry.ISOCode;
                    }
                }

                if ((cVendBankPayCountryISOCode.Compare("CH") != 0) && (cVendBankPayCountryISOCode.Compare("LI") != 0))
                {
                    return;
                }

                var BVendorQuery = DBExpressionCompiler.Compile(BVendorExpression);
                bVendor = BVendorQuery(Db, Session.CompanyID, ttAPInvHed.VendorNum);
                if (bVendor != null)
                {
                    VendorNoBankingReference = bVendor.NoBankingReference;
                }
                if (!VendorNoBankingReference)
                {
                    if (String.IsNullOrEmpty(ttAPInvHed.CHISRCodeLine) || String.IsNullOrEmpty(ttAPInvHed.SEBankRef))
                    {
                        OpMessage = string.Format("{0} {1}", Strings.ISRCodeLineAndISRRefNumMustBeEntered, Strings.DoYouWishToContinue);
                        return;
                    }
                }
                else
                {
                    if (String.IsNullOrEmpty(ttAPInvHed.CHISRCodeLine) && String.IsNullOrEmpty(ttAPInvHed.SEBankRef))
                        return;
                }
                if (ttAPInvHed.SEBankRef.Length > 27)
                {
                    OpMessage = string.Format("{0} {1}", Strings.TheISRRefNumLengthIsGreaterThanChara, Strings.DoYouWishToContinue);
                    return;
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(ttAPInvHed.SEBankRef, "^[0-9]*$"))
                {
                    OpMessage = string.Format("{0} {1}", Strings.ThereAreNonNumericCharaInISRRefNum, Strings.DoYouWishToContinue);
                    return;
                }

                if (!decodeISRCodeLine(ttAPInvHed.CHISRCodeLine, out OpMessage, out cISRSlipType, out cISRSlipCode, out pISRAmount, out cISRRefNum, out cISRPartyID, out cISRPOBankAcct, out int cISRVendorNum, out cISRVendorBankType))
                {
                    OpMessage = string.Format("{0} {1}", OpMessage, Strings.DoYouWishToContinue);
                    return;
                }

                if (ttAPInvHed.SEBankRef.Compare(cISRRefNum) != 0)
                {
                    OpMessage = string.Format("{0} {1}", Strings.TheISRRefNumDoesNotMatchISRCodeLine, Strings.DoYouWishToContinue);
                    return;
                }

                bCurrency = this.FindFirstCurrency(Session.CompanyID, ttAPInvHed.CurrencyCode);
                if (bCurrency != null)
                {
                    cInvCurrencyID = bCurrency.CurrencyID;
                }
                if (cISRSlipType.Compare("O") == 0)
                {
                    if ((cInvCurrencyID.Compare("CHF") != 0) && (cInvCurrencyID.Compare("EUR") != 0))
                    {
                        OpMessage = string.Format("{0} {1}", Strings.CurrencyISOCodeForInvoiceCurrMustBeEUROrCHF, Strings.DoYouWishToContinue);
                        return;
                    }
                    if (((cInvCurrencyID.Compare("CHF") == 0) && ((cISRSlipCode.Compare("01") != 0) && (cISRSlipCode.Compare("04") != 0))) ||
                        ((cInvCurrencyID.Compare("EUR") == 0) && ((cISRVendorBankType.Compare("B") == 0) || ((cISRSlipCode.Compare("21") != 0) && (cISRSlipCode.Compare("31") != 0)))))
                    {
                        OpMessage = Strings.TheSlipTypeIsNotAllowedForCurrency(cISRSlipCode, ttAPInvHed.CurrencyCode);
                        return;
                    }
                    if ((cISRVendorNum != 0) && (cISRVendorNum != ttAPInvHed.VendorNum))
                    {
                        OpMessage = string.Format("{0} {1}", Strings.SupplDoesNotCorrespondToISRCodeLine, Strings.DoYouWishToContinue);
                    }
                }
                else
                {
                    if (cInvCurrencyID.Compare("CHF") != 0)
                    {
                        OpMessage = string.Format("{0} {1}", Strings.CurrencyISOCodeForInvoiceCurrMustBeCHF, Strings.DoYouWishToContinue);
                        return;
                    }
                    if (!String.IsNullOrEmpty(cISRPOBankAcct))
                    {
                        if (!ExistsVendBank2(Session.CompanyID, ttAPInvHed.VendorNum, cISRPOBankAcct))
                        {
                            OpMessage = string.Format("{0} {1}", Strings.SupplDoesNotHaveABankWithISRPOAccount(cISRPOBankAcct), Strings.DoYouWishToContinue);
                        }
                    }
                    else
                    {
                        if (!ExistsVendBank(Session.CompanyID, ttAPInvHed.VendorNum, cISRPartyID))
                        {
                            OpMessage = string.Format("{0} {1}", Strings.SupplDoesNotHaveABankWithISRPartyID(cISRPartyID), Strings.DoYouWishToContinue);
                        }
                    }
                }

                return;
            }

            if (String.IsNullOrEmpty(ttAPInvHed.SEBankRef))
            {
                if (lUseBankReferencing)
                {
                    if (isEstoniaLocalization)
                    {
                        BIttAPInvHed = (from BIttAPInvHed_Row in CurrentFullTableset.APInvHed
                                        where BIttAPInvHed_Row.SysRowID == ttAPInvHed.SysRowID &&
                                        StringExtensions.Compare(BIttAPInvHed_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) == 0
                                        select BIttAPInvHed_Row).FirstOrDefault();

                        if ((BIttAPInvHed != null && (!BIttAPInvHed.SEBankRef.KeyEquals(ttAPInvHed.SEBankRef))) || (BIttAPInvHed == null))
                            OpMessage = Strings.TheBankReferIsNotAssigDoYouWishToConti;

                    }
                    else if (!isSEOrFILocalization)
                    {
                        OpMessage = Strings.TheBankReferIsNotAssigDoYouWishToConti;
                    }
                }
                return;
            }
            /* Allow user to enter "X" in Bank Reference to bypass format checking, this will be handled by the EFTs */
            if (isSEOrFILocalization && ttAPInvHed.SEBankRef.ToUpperInvariant().KeyEquals("X"))
            {
                return;
            }

            if (ipReturnIfEqual)
            {
                var APInvHedQuery58 = DBExpressionCompiler.Compile(APInvHedExpression58);
                string oldSEBankRef = APInvHedQuery58(Db, Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum);
                if (oldSEBankRef != null)
                {
                    if (StringExtensions.Compare(oldSEBankRef, ttAPInvHed.SEBankRef) == 0)
                    {
                        return;
                    }
                }
            }

            switch (vLocalization.ToUpperInvariant())
            {
                case "FI":
                case "EE":
                    {
                        if (ttAPInvHed.SEBankRef.Length > 20)
                        {
                            OpMessage = Strings.TheBankReferLengthIsGreaterThanCharaDoYouWishTo(20);
                            return;
                        }
                    }
                    break;
                case "SE":
                    {
                        if (ttAPInvHed.SEBankRef.Length > 25)
                        {
                            OpMessage = Strings.TheBankReferLengthIsGreaterThanCharaDoYouWishTo(25);
                            return;
                        }
                    }
                    break;
                case "DK":
                    {
                        if (ttAPInvHed.SEBankRef.Length > 15)
                        {
                            OpMessage = Strings.TheBankReferLengthIsGreaterThanCharaDoYouWishTo(15);
                            return;
                        }
                    }
                    break;
            }
            if (isEstoniaLocalization)
            {


                var BVendorQuery = DBExpressionCompiler.Compile(BVendorExpression);
                bVendor = BVendorQuery(Db, Session.CompanyID, ttAPInvHed.VendorNum);
                if (bVendor != null)
                {
                    VendorBankRef = bVendor.PmtAcctRef;
                }

                if (!String.IsNullOrEmpty(VendorBankRef))
                {
                    for (iRepeat = 1; iRepeat <= VendorBankRef.Length; iRepeat++)
                    {
                        cChar = StringExtensions.SubString(VendorBankRef, iRepeat - 1, 1);
                        if ((cNumString.IndexOf(cChar, StringComparison.OrdinalIgnoreCase) + 1) == 0)
                        {
                            notNumeric = true;
                        }
                    }
                }
            }
            if (notNumeric == false)
            {
                for (iRepeat = 1; iRepeat <= ttAPInvHed.SEBankRef.Length; iRepeat++)
                {
                    cChar = StringExtensions.SubString(ttAPInvHed.SEBankRef, iRepeat - 1, 1);
                    if ((cNumString.IndexOf(cChar, StringComparison.OrdinalIgnoreCase) + 1) == 0)
                    {
                        OpMessage = Strings.ThereAreNonNumericCharaInBankReferDoYouWishToConti;
                        return;
                    }
                }
            }
            if (String.IsNullOrEmpty(VendorBankRef) || !VendorBankRef.Equals(ttAPInvHed.SEBankRef, StringComparison.OrdinalIgnoreCase))
            {
                if (LibCheckDigitGenerate.ValidateCodeReference(ttAPInvHed.SEBankRef, Internal.Lib.CheckDigitGenerate.UsageFeatureType.PaymentReferenceNumber, 10) == false)
                {
                    OpMessage = Strings.TheBankReferEnteredIsNotConsiWithCountryBankRefer;
                    return;
                }
            }
        }

        /// <summary>
        ///Before updating the APInvHed record, CheckCPayBeforeUpdate will have to be called.  
        ///The CheckCPayBeforeUpdate method will pass back opMessage.  
        /// - If opMessage is not equal to null then a Yes/No question will have to be asked to the 
        ///user displaying the message in opMessage.  
        /// - If the user answers "Yes", then call the Update method to continue else stop update.
        /// </summary>
        /// <param name="OpMessage">The Message to ask the user if the changes for the linked AP Invoice are okay.</param>
        private void chkCPayCore(out string OpMessage)
        {
            OpMessage = string.Empty;

            if (ttAPInvHed != null)
            {
                if (ttAPInvHed.CPayLinked == true)
                {


                    BIttAPInvHed = (from BIttAPInvHed_Row in CurrentFullTableset.APInvHed
                                    where BIttAPInvHed_Row.SysRowID == ttAPInvHed.SysRowID &&
                                    StringExtensions.Compare(BIttAPInvHed_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) == 0
                                    select BIttAPInvHed_Row).FirstOrDefault();
                    if (BIttAPInvHed != null &&
                    (BIttAPInvHed.ScrInvoiceVendorAmt != ttAPInvHed.ScrInvoiceVendorAmt ||
                    BIttAPInvHed.ScrDocInvoiceVendorAmt != ttAPInvHed.ScrDocInvoiceVendorAmt))
                    {
                        OpMessage = Strings.ThisInvoiceIsLinkedToACentralPaymentInvoiceManual;
                    }
                }
                return;
            }
            else
            {
                if (ttAPInvDtl != null)
                {


                    var APInvHedQuery59 = DBExpressionCompiler.Compile(APInvHedExpression59);
                    if ((APInvHedQuery59(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, true)))
                    {


                        BIttAPInvDtl = (from BIttAPInvDtl_Row in CurrentFullTableset.APInvDtl
                                        where BIttAPInvDtl_Row.SysRowID == ttAPInvDtl.SysRowID &&
                                        StringExtensions.Compare(BIttAPInvDtl_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) == 0
                                        select BIttAPInvDtl_Row).FirstOrDefault();
                        if ((BIttAPInvDtl == null) ||
                        (BIttAPInvDtl.ScrExtCost != ttAPInvDtl.ScrExtCost ||
                        BIttAPInvDtl.ScrDocExtCost != ttAPInvDtl.ScrDocExtCost))
                        {
                            OpMessage = Strings.ThisInvoiceLineIsLinkedToACentralPaymentInvoice;
                        }
                    }
                    return;
                }
            }
        }

        /// <summary>
        /// Check for the correct Payment Method assigned.
        /// </summary>
        /// <param name="ipPaymentMethod">Payment Method ID</param>
        private void chkPMUIDCore(int ipPaymentMethod)
        {


            var PayMethodQuery2 = DBExpressionCompiler.Compile(PayMethodExpression2);
            PayMethod = PayMethodQuery2(Db, ttAPInvHed.Company, ipPaymentMethod);
            if (PayMethod != null)
            {
                if (PayMethod.PMSource != 0)
                {
                    throw new BLException(Strings.InvalidPaymentMethod, "APInvHed");
                }

                if (PayMethod.EFTHeadUID != 0)
                {


                    var EFTHeadQuery2 = DBExpressionCompiler.Compile(EFTHeadExpression2);
                    EFTHead = EFTHeadQuery2(Db, Session.CompanyID, PayMethod.EFTHeadUID);
                    if (EFTHead != null)
                    {
                        if (EFTHead.Type == 18)
                        {
                            throw new BLException(Strings.ThisPaymentMethodIsReserForBankAPPaymentImport, "APInvHed");
                        }
                    }
                }
            }
            else
            {
                throw new BLException(Strings.InvalidPaymentMethod, "APInvHed");
            }
        }

        /// <summary>
        /// Before updating the APInvDtl record, CheckRevChrgBeforeUpdate will have to be called.  
        /// The CheckRevChrgBeforeUpdate method will pass back opMessage.  
        /// - If opMessage is not equal to null then a Yes/No question will have to be asked to the 
        ///user displaying the message in opMessage.  
        /// - If the user answers "Yes", then call the Update method to continue else stop update.
        /// </summary>
        /// <param name="OpMessage">The Message to ask the user if the changes to reverse charge method is okay.</param>
        private void chkRevChrgCore(out string OpMessage)
        {
            OpMessage = string.Empty;

            if (ttAPInvDtl != null)
            {
                if ((ttAPInvDtl.OverrideReverseCharge == true) &&
                    (String.IsNullOrEmpty(ttAPInvDtl.RevChargeMethod)))
                {
                    Vendor = Vendor.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum);
                    if (Vendor != null && !String.IsNullOrEmpty(Vendor.RevChargeMethod))
                    {
                        OpMessage = Strings.TheSupplIsMarkedForReverseChargesButThisInvoice;
                    }
                    else
                    {
                        Part = Part.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.PartNum);
                        if (Part != null && !String.IsNullOrEmpty(Part.RevChargeMethod))
                        {
                            OpMessage = Strings.ThePartIsMarkedForReverseChargesButThisInvoice;
                        }
                    }
                }
                return;
            }
        }

        /// <summary>
        /// Decode ISR Code Line for Switzerland CSF
        /// </summary>
        /// <param name="ipISRCodeLine">ISR Code Line for decoding.</param>
        /// <param name="opErrorMsg">The Error message if ISR Code Line is incorrect.</param>
        /// <param name="opSlipType">output Slip Type of ISR Code Line (O-Orange, R-Red).</param>
        /// <param name="opSlipCode">output Slip Code extracted from ISR Code Line.</param>
        /// <param name="opAmount">output Amount extracted from ISR Code Line.</param>
        /// <param name="opISRRefNum">output ISR Reference Number extracted from ISR Code Line.</param>
        /// <param name="opISRPartyID">output Supplier ISR Party Number extracted from ISR Code Line.</param>
        /// <param name="opISRPOBankAcct">output Supplier ISR Postal Bank Account extracted from ISR Code Line for short Red Slip.</param>
        /// <param name="opVendorNum">output Vendor.VendorNum found for ISR Code Line.</param>
        /// <param name="opVendorBankType">output Supplier Bank Type for Orange Slip (P-Postfinance, B-Bank) found for ISR Code Line.</param>
        private bool decodeISRCodeLine(string ipISRCodeLine, out string opErrorMsg, out string opSlipType, out string opSlipCode, out decimal opAmount, out string opISRRefNum, out string opISRPartyID, out string opISRPOBankAcct, out int opVendorNum, out string opVendorBankType)
        {
            opSlipType = string.Empty;
            opSlipCode = string.Empty;
            opAmount = decimal.Zero;
            opISRRefNum = string.Empty;
            opISRPartyID = string.Empty;
            opISRPOBankAcct = string.Empty;
            opVendorNum = 0;
            opVendorBankType = string.Empty;
            opErrorMsg = Strings.TheISRCodeLineIsIncorrect;

            VendorBankJoinResult bVendorBankJoinResult = null;

            string cISRSlipAndAmt = string.Empty;

            string cISRRefNumAndPartyID = string.Empty;
            string cBankCustNum = string.Empty;
            int iBCNStartPos = 0;
            int iBCNLen = 0;
            string cBCNVendorFoundList = string.Empty;
            int iBCNVendorCount = 0;

            int iISRCodeLineNumEntries = ipISRCodeLine.NumEntries('>');
            if (iISRCodeLineNumEntries == 2)
            {
                opSlipType = "R"; // Red Slip
            }
            else if (iISRCodeLineNumEntries == 3)
            {
                opSlipType = "O"; // Orange Slip
            }
            else
            {
                return false;
            }
            if (!String.IsNullOrWhiteSpace(ipISRCodeLine.Entry(iISRCodeLineNumEntries - 1, '>')))
            {
                return false;
            }

            if (opSlipType.Compare("O") == 0)
            {
                cISRSlipAndAmt = ipISRCodeLine.Entry(0, '>').Trim();

                if (!((cISRSlipAndAmt.Length == 3) || (cISRSlipAndAmt.Length == 13)))
                {
                    return false;
                }

                if (!System.Text.RegularExpressions.Regex.IsMatch(cISRSlipAndAmt, "^[0-9]+$"))
                {
                    return false;
                }

                opSlipCode = cISRSlipAndAmt.Substring(0, 2);
                switch (opSlipCode.ToUpperInvariant())
                {
                    case "01":
                    case "21":
                        if (cISRSlipAndAmt.Length == 13)
                        {
                            // with pre-printed amounts
                            opAmount = Convert.ToDecimal(cISRSlipAndAmt.Substring(2, 10)) / 100m;
                        }
                        else
                        {
                            return false;
                        }
                        break;

                    case "04":
                    case "31":
                        if (cISRSlipAndAmt.Length != 3)
                        {
                            return false;
                        }
                        break;

                    default:
                        return false;

                }
            }

            cISRRefNumAndPartyID = ipISRCodeLine.Entry(iISRCodeLineNumEntries - 2, '>').Trim();
            if ((opSlipType.Compare("R") == 0) && (cISRRefNumAndPartyID.NumEntries('+') == 1))
            {
                opISRPOBankAcct = cISRRefNumAndPartyID;
                if (!System.Text.RegularExpressions.Regex.IsMatch(opISRPOBankAcct, "^[0-9]+$"))
                {
                    return false;
                }
            }
            else
            {
                if (cISRRefNumAndPartyID.NumEntries('+') != 2)
                {
                    return false;
                }

                opISRRefNum = cISRRefNumAndPartyID.Entry(0, '+').Trim();
                opISRPartyID = cISRRefNumAndPartyID.Entry(1, '+').Trim();

                if (opISRRefNum.Length > 27)
                {
                    return false;
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(opISRRefNum, "^[0-9]+$"))
                {
                    return false;
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(opISRPartyID, "^[0-9]+$"))
                {
                    return false;
                }
            }

            opErrorMsg = string.Empty;
            if (!String.IsNullOrEmpty(opISRRefNum))
            {
                if (!LibCheckDigitGenerate.ValidateCodeReference(opISRRefNum, Erp.Internal.Lib.CheckDigitGenerate.UsageFeatureType.ISRCodeLine, iCheckDigitModulus))
                {
                    opErrorMsg = string.Format("{0}: {1}", Strings.CheckDigitValidationFails, Strings.TheISRReferenceNumberIsInvalid);
                    return false;
                }
            }
            if (!String.IsNullOrEmpty(opISRPartyID))
            {
                if (!LibCheckDigitGenerate.ValidateCodeReference(opISRPartyID, Erp.Internal.Lib.CheckDigitGenerate.UsageFeatureType.ISRCodeLine, iCheckDigitModulus))
                {
                    opErrorMsg = string.Format("{0}: {1}", Strings.CheckDigitValidationFails, Strings.TheISRPartyNumberIsInvalid);
                    return false;
                }
            }
            if (!String.IsNullOrEmpty(opISRPOBankAcct))
            {
                if (!LibCheckDigitGenerate.ValidateCodeReference(opISRPOBankAcct, Erp.Internal.Lib.CheckDigitGenerate.UsageFeatureType.ISRCodeLine, iCheckDigitModulus))
                {
                    opErrorMsg = string.Format("{0}: {1}", Strings.CheckDigitValidationFails, Strings.TheISRPOBankAccountIsInvalid);
                    return false;
                }
            }
            if (opSlipType.Compare("O") == 0)
            {
                if (!LibCheckDigitGenerate.ValidateCodeReference(cISRSlipAndAmt, Erp.Internal.Lib.CheckDigitGenerate.UsageFeatureType.ISRCodeLine, iCheckDigitModulus))
                {
                    opErrorMsg = string.Format("{0}: {1}", Strings.CheckDigitValidationFails, Strings.TheAmountIsInvalid);
                    return false;
                }

                var ISRVendorBankRows = SelectVendorBank(Session.CompanyID, opISRPartyID);
                if (ISRVendorBankRows.Any())
                {
                    bVendorBankJoinResult = ISRVendorBankRows.FirstOrDefault();
                    if (ISRVendorBankRows.Count() == ISRVendorBankRows.Where(_row => _row.VendorNum == bVendorBankJoinResult.VendorNum).Count())
                    {
                        opVendorNum = bVendorBankJoinResult.VendorNum;
                        opVendorBankType = bVendorBankJoinResult.VendorBankType;
                    }
                    else
                    {
                        foreach (var ISRVendorBankRows_iterator in ISRVendorBankRows)
                        {
                            iBCNStartPos = ISRVendorBankRows_iterator.VendorBankCustNumStartPos;
                            iBCNLen = ISRVendorBankRows_iterator.VendorBankCustNumLen;
                            cBankCustNum = string.Empty;

                            if ((iBCNStartPos == 0) && (iBCNLen == 0))
                            {
                                iBCNLen = 6;
                                iBCNStartPos = 1;
                            }
                            else
                            {
                                if ((iBCNStartPos == 0) && (iBCNLen != 0))
                                {
                                    iBCNStartPos = 1;
                                }
                            }
                            if ((iBCNStartPos != 0) && (iBCNLen != 0) && (iBCNStartPos + iBCNLen <= opISRRefNum.Length))
                            {
                                cBankCustNum = opISRRefNum.Substring(iBCNStartPos - 1, iBCNLen).TrimStart('0');
                            }

                            if (!String.IsNullOrEmpty(cBankCustNum) && (ISRVendorBankRows_iterator.VendorBankCustNum.TrimStart('0').Compare(cBankCustNum) == 0))
                            {
                                opVendorNum = ISRVendorBankRows_iterator.VendorNum;
                                opVendorBankType = ISRVendorBankRows_iterator.VendorBankType;

                                iBCNVendorCount++;
                                if (iBCNVendorCount > 3) // more than 3 Suppliers were found
                                {
                                    cBCNVendorFoundList += string.Format("\r\n  {0}", Strings.AndMore);
                                    break;
                                }
                                else
                                {
                                    cBCNVendorFoundList += string.Format("\r\n  {0} {1} {2}", Strings.Supplier, ISRVendorBankRows_iterator.VendorID, ISRVendorBankRows_iterator.VendorName);
                                }
                            }
                        }
                        if (opVendorNum == 0)
                        {
                            opErrorMsg = Strings.SupplBankForISRPartyIDAndBankCustNumCouldNotBeFound(opISRPartyID, cBankCustNum);
                            return false;
                        }
                        else
                        {
                            if (iBCNVendorCount != 1)
                            {
                                opErrorMsg = Strings.MultipleSupplHaveBeenFoundForISRPartyIDAndRefNumber(opISRPartyID, opISRRefNum, cBCNVendorFoundList);
                                return false;
                            }
                        }
                    }
                }
                else
                {
                    opErrorMsg = Strings.SupplBankForISRPartyIDCouldNotBeFound(opISRPartyID);
                    return false;
                }
            }
            else
            {
                IEnumerable<VendorBankJoinResult> ISRVendorBankRows;
                if (!String.IsNullOrEmpty(opISRPOBankAcct))
                {
                    ISRVendorBankRows = SelectVendorBank2(Session.CompanyID, opISRPOBankAcct);
                }
                else
                {
                    ISRVendorBankRows = SelectVendorBank(Session.CompanyID, opISRPartyID);
                }
                if (ISRVendorBankRows.Any())
                {
                    bVendorBankJoinResult = ISRVendorBankRows.FirstOrDefault();
                    if (ISRVendorBankRows.Count() == ISRVendorBankRows.Where(_row => _row.VendorNum == bVendorBankJoinResult.VendorNum).Count())
                    {
                        opVendorNum = bVendorBankJoinResult.VendorNum;
                    }
                }
            }
            return true;
        }

        #region copyCorrection Methods

        /// <summary>
        /// Copy invoice header GL Controls for correction  or cancellation invoice 
        /// </summary>
        /// <param name="sourceInvoiceNum">Invoice num from which we are copying</param>
        /// <param name="destInvoiceNum">Invoice num to which we are copying</param>
        /// <param name="vendorNum">Vendor Number of the invoice should be the same for the source and destination</param>
        private void copyIHGLC(string sourceInvoiceNum, string destInvoiceNum, int vendorNum)
        {
            Erp.Tables.EntityGLC bufEntityGLC = null;

            APInvoiceTableset ds = CurrentFullTableset;

            LibDeleteRelatedToFile._DeleteRelatedToFile("EntityGLC", "APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), destInvoiceNum, "", "", "", "");


            var BufEntityGLCQuery = DBExpressionCompiler.Compile(BufEntityGLCExpression);
            foreach (var bufEntityGLC_iterator in (BufEntityGLCQuery(Db, Session.CompanyID, Compatibility.Convert.ToString(vendorNum), sourceInvoiceNum, "APInvHed")))
            {
                bufEntityGLC = bufEntityGLC_iterator;
                GetNewEntityGLC(ref ds, "APInvHed", Compatibility.Convert.ToString(vendorNum), destInvoiceNum, "", "", "", "");
                BufferCopy.CopyExceptFor(bufEntityGLC, ttEntityGLC, EntityGLC.ColumnNames.Key2, EntityGLC.ColumnNames.SysRowID, EntityGLC.ColumnNames.SysRevID);
            }

            Update(ref ds);
            CurrentFullTableset = ds;
        }

        /// <summary>
        /// Copy from source all records of APInvExp for correction or cancellation invoice.
        /// </summary>
        /// <param name="sourceGroup"></param>
        /// <param name="destGroup"></param>
        /// <param name="sourceInvoiceNum"></param>
        /// <param name="destInvoiceNum"></param>
        /// <param name="vendorNum"></param>
        /// <param name="sourceLineNum"></param>
        /// <param name="destLineNum"></param>
        /// <param name="reverseSignQty"></param>
        private void CopyInvoiceAPInvExp(string sourceGroup, string destGroup, string sourceInvoiceNum, string destInvoiceNum, int vendorNum, int sourceLineNum, int destLineNum, bool reverseSignQty)
        {
            Erp.Tables.APInvExp bufSrcAPInvExp = null;
            Erp.Tables.APInvExp bufDestAPInvExp = null;
            Erp.Tables.TranGLC bufSrcTranGLC = null;
            Erp.Tables.TranGLC bufDestTranGLC = null;
            int factor = 1;
            int NextSeq = 1;

            if (reverseSignQty)
            {
                factor = -1;
            }

            if (destLineNum > 0)
            {


                var BufDestAPInvExpQuery = DBExpressionCompiler.Compile(BufDestAPInvExpExpression);
                foreach (var bufDestAPInvExp_iterator in (BufDestAPInvExpQuery(Db, Session.CompanyID, destInvoiceNum, destLineNum)))
                {
                    bufDestAPInvExp = bufDestAPInvExp_iterator;
                    LibDeleteRelatedToFile._DeleteRelatedToFile("TranGLC", "APInvExp", Compatibility.Convert.ToString(vendorNum), destInvoiceNum, Compatibility.Convert.ToString(destLineNum), "", destGroup, "");

                    Db.APInvExp.Delete(bufDestAPInvExp);
                }
            }



            APInvExp = FindLastAPInvExp(Session.CompanyID, vendorNum, destInvoiceNum, destLineNum);
            if (APInvExp != null)
            {
                NextSeq = APInvExp.InvExpSeq + 1;
            }




            foreach (var bufSrcAPInvExp_iterator in FindAPInvExp(Session.CompanyID, vendorNum, sourceInvoiceNum, sourceLineNum))
            {
                bufSrcAPInvExp = bufSrcAPInvExp_iterator;
                bufDestAPInvExp = new Erp.Tables.APInvExp();
                Db.APInvExp.Insert(bufDestAPInvExp);
                BufferCopy.CopyExceptFor(bufSrcAPInvExp, bufDestAPInvExp, APInvExp.ColumnNames.InvoiceNum, APInvExp.ColumnNames.InvoiceLine, APInvExp.ColumnNames.InvExpSeq, APInvExp.ColumnNames.SysRowID, APInvExp.ColumnNames.SysRevID);

                bufDestAPInvExp.InvoiceNum = destInvoiceNum;
                bufDestAPInvExp.InvoiceLine = destLineNum;
                bufDestAPInvExp.InvExpSeq = NextSeq;
                bufDestAPInvExp.ExpAmt = factor * bufSrcAPInvExp.ExpAmt;
                bufDestAPInvExp.DocExpAmt = factor * bufSrcAPInvExp.DocExpAmt;
                bufDestAPInvExp.Rpt1ExpAmt = factor * bufSrcAPInvExp.Rpt1ExpAmt;
                bufDestAPInvExp.Rpt2ExpAmt = factor * bufSrcAPInvExp.Rpt2ExpAmt;
                bufDestAPInvExp.Rpt3ExpAmt = factor * bufSrcAPInvExp.Rpt3ExpAmt;

                if (!CopyExcRate)
                {
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(bufDestAPInvExp, true, "ExpAmt", pCurrList, "bufDestAPInvExp", APInvHed.CurrencyCode, ttChainRows);
                }
                Db.Validate(bufDestAPInvExp);


                string originalSysGLControlCode = string.Empty;
                string newSysGLControlCode = string.Empty;
                var BufSrcTranGLCQuery = DBExpressionCompiler.Compile(BufSrcTranGLCExpression);
                foreach (var bufSrcTranGLC_iterator in (BufSrcTranGLCQuery(Db, Session.CompanyID, "APInvExp", Compatibility.Convert.ToString(vendorNum), sourceInvoiceNum, Compatibility.Convert.ToString(sourceLineNum), Compatibility.Convert.ToString(bufSrcAPInvExp.InvExpSeq), sourceGroup)))
                {
                    bufSrcTranGLC = bufSrcTranGLC_iterator;
                    bufDestTranGLC = new Erp.Tables.TranGLC();
                    Db.TranGLC.Insert(bufDestTranGLC);
                    BufferCopy.CopyExceptFor(bufSrcTranGLC, bufDestTranGLC, TranGLC.ColumnNames.Key2, TranGLC.ColumnNames.Key3, TranGLC.ColumnNames.Key4, TranGLC.ColumnNames.Key5, TranGLC.ColumnNames.SysGLControlCode, TranGLC.ColumnNames.SysRowID, TranGLC.ColumnNames.SysRevID);
                    bufDestTranGLC.Key2 = destInvoiceNum;
                    bufDestTranGLC.Key3 = Compatibility.Convert.ToString(destLineNum);
                    bufDestTranGLC.Key4 = Compatibility.Convert.ToString(NextSeq);
                    bufDestTranGLC.Key5 = destGroup;

                    if (!originalSysGLControlCode.Equals(bufSrcTranGLC.SysGLControlCode, StringComparison.OrdinalIgnoreCase))
                    {
                        newSysGLControlCode = Compatibility.Convert.ToString(LibLongSequence.GetNextSequence("SysGLCntrlCodeSeq"));
                        bufDestTranGLC.SysGLControlCode = newSysGLControlCode;
                        originalSysGLControlCode = bufSrcTranGLC.SysGLControlCode;
                    }
                    else
                    {
                        bufDestTranGLC.SysGLControlCode = newSysGLControlCode;
                    }

                    Db.Validate(bufDestTranGLC);
                }
                NextSeq = NextSeq + 1;
            }
        }

        /// <summary>
        /// Copy from source all records of APInvJob for correction invoice.
        /// </summary>
        /// <param name="sourceInvoiceNum"></param>
        /// <param name="destInvoiceNum"></param>
        /// <param name="vendorNum"></param>
        /// <param name="sourceLineNum"></param>
        /// <param name="destLineNum"></param>
        /// <param name="reverseSignQty"></param>
        private void copyCorrectionInvoiceJob(string sourceInvoiceNum, string destInvoiceNum, int vendorNum, int sourceLineNum, int destLineNum, bool reverseSignQty)
        {
            Erp.Tables.APInvJob bufAPInvJob = null;
            int factor = 1;

            APInvoiceTableset ds = CurrentFullTableset;

            if (reverseSignQty)
            {
                factor = -1;
            }


            var BufAPInvJobQuery = DBExpressionCompiler.Compile(BufAPInvJobExpression);
            foreach (var bufAPInvJob_iterator in (BufAPInvJobQuery(Db, Session.CompanyID, vendorNum, sourceInvoiceNum, sourceLineNum)))
            {
                bufAPInvJob = bufAPInvJob_iterator;
                GetNewAPInvJob(ref ds, vendorNum, destInvoiceNum, destLineNum, bufAPInvJob.JobNum, bufAPInvJob.AssemblySeq, bufAPInvJob.MtlSeq);
                BufferCopy.CopyExceptFor(bufAPInvJob, ttAPInvJob, APInvJob.ColumnNames.InvoiceNum, APInvJob.ColumnNames.InvoiceLine, APInvJob.ColumnNames.SysRowID, APInvJob.ColumnNames.SysRevID);
                if (!CopyExcRate)
                {
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvJob, true, "ExtCost", pCurrList, "ttAPInvJob", APInvHed.CurrencyCode, ttChainRows);
                }

                ttAPInvJob.ScrExtCost = factor * ttAPInvJob.ExtCost;
                ttAPInvJob.DocScrExtCost = factor * ttAPInvJob.DocExtCost;
                ttAPInvJob.Rpt1ScrExtCost = factor * ttAPInvJob.Rpt1ExtCost;
                ttAPInvJob.Rpt2ScrExtCost = factor * ttAPInvJob.Rpt2ExtCost;
                ttAPInvJob.Rpt3ScrExtCost = factor * ttAPInvJob.Rpt3ExtCost;
            }

            Update(ref ds);
            CurrentFullTableset = ds;
        }

        /// <summary>
        /// Copy invoice Lines for correction or cancellation invoice.
        /// </summary>
        /// <param name="typeOfCreation">options : Correction, Cancellation</param>
        /// <param name="sourceGroup">Group from which we are copying</param>
        /// <param name="destGroup">Group to which we are copying</param>
        /// <param name="sourceInvoiceNum">Invoice num from which we are copying</param>
        /// <param name="destInvoiceNum">Invoice num to which we are copying</param>
        /// <param name="vendorNum">Vendor Number of the invoice should be the same for the source and destination</param>
        /// <param name="reverseSignQty">Indicates whether the sign is going to be reverse or not</param>
        private void copyInvoiceLines(TypeOfCreation typeOfCreation, string sourceGroup, string destGroup, string sourceInvoiceNum, string destInvoiceNum, int vendorNum, bool reverseSignQty)
        {
            validateTypeOfCreation(typeOfCreation);

            Erp.Tables.APInvDtl bAPInvDtl = null;
            Erp.Tables.APInvHed newAPInvHed = null;
            bool inPrice = false;
            APInvoiceTableset ds = CurrentFullTableset;
            newAPInvHed = FindFirstAPInvHed(Session.CompanyID, vendorNum, destInvoiceNum);
            if (newAPInvHed != null)
            {
                inPrice = newAPInvHed.InPrice;
                if (!(typeOfCreation == TypeOfCreation.Cancellation && newAPInvHed.LockRate))
                    newAPInvHed.LockRate = false;
            }


            foreach (var bAPInvDtl_iterator in (SelectAPInvDtl(Session.CompanyID, sourceInvoiceNum, vendorNum, false)))
            {
                bAPInvDtl = bAPInvDtl_iterator;

                GetNewAPInvDtl(ref ds, vendorNum, destInvoiceNum);

                BufferCopy.CopyExceptFor(bAPInvDtl, ttAPInvDtl, new string[] {
                    APInvDtl.ColumnNames.InvoiceNum, APInvDtl.ColumnNames.SysRowID, APInvDtl.ColumnNames.SysRevID,
                    APInvDtl.ColumnNames.TotalMiscChrg, APInvDtl.ColumnNames.DocTotalMiscChrg, APInvDtl.ColumnNames.Rpt1TotalMiscChrg,
                    APInvDtl.ColumnNames.Rpt2TotalMiscChrg,
                    APInvDtl.ColumnNames.Rpt3TotalMiscChrg, "ScrTotalMiscChrg", "ScrDocTotalMiscChrg"});

                ttAPInvDtl.InvoiceNum = newAPInvHed.InvoiceNum;
                ttAPInvDtl.InvoiceLine = GetNextInvoiceLine(Session.CompanyID, vendorNum, destInvoiceNum);
                ttAPInvDtl.RowMod = IceRow.ROWSTATE_ADDED;

                ttAPInvDtl.ExtCost = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocExtCost, newAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", APInvDtl.ColumnNames.ExtCost);
                ttAPInvDtl.TotalMiscChrg = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocTotalMiscChrg, newAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", APInvDtl.ColumnNames.TotalMiscChrg);
                ttAPInvDtl.UnitCost = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocUnitCost, newAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", APInvDtl.ColumnNames.UnitCost);
                ttAPInvDtl.InAdvancePayAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocInAdvancePayAmt, newAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", APInvDtl.ColumnNames.InAdvancePayAmt);
                ttAPInvDtl.AdvancePayAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocAdvancePayAmt, newAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", APInvDtl.ColumnNames.AdvancePayAmt);
                ttAPInvDtl.InUnitCost = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocInUnitCost, newAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", APInvDtl.ColumnNames.InUnitCost);
                ttAPInvDtl.InExtCost = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocInExtCost, newAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", APInvDtl.ColumnNames.InExtCost);
                ttAPInvDtl.InTotalMiscChrg = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocInTotalMiscChrg, newAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", APInvDtl.ColumnNames.InLineDiscAmt);
                ttAPInvDtl.LineDiscAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocLineDiscAmt, newAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", APInvDtl.ColumnNames.LineDiscAmt);
                ttAPInvDtl.InLineDiscAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocInLineDiscAmt, newAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", APInvDtl.ColumnNames.InLineDiscAmt);


                pFieldList = "ExtCost" + Ice.Constants.LIST_DELIM + "TotalMiscChrg" + Ice.Constants.LIST_DELIM + "InExtCost" + Ice.Constants.LIST_DELIM + "LineDiscAmt" + Ice.Constants.LIST_DELIM + "InLineDiscAmt" + Ice.Constants.LIST_DELIM + "UnitCost" + Ice.Constants.LIST_DELIM + "InAdvancePayAmt" + Ice.Constants.LIST_DELIM + "InUnitCost" + Ice.Constants.LIST_DELIM + "InTotalMiscChrg" + Ice.Constants.LIST_DELIM + "AdvancePayAmt";
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvDtl, false, pFieldList, pCurrList, "APInvDtl", newAPInvHed.CurrencyCode, ttChainRows);
                ttAPInvDtl.ScrDocTotalMiscChrg = ttAPInvDtl.DocTotalMiscChrg;
                ttAPInvDtl.ScrTotalMiscChrg = ttAPInvDtl.TotalMiscChrg;

                if (reverseSignQty)
                {
                    if (typeOfCreation == TypeOfCreation.Correction)
                    {
                        ttAPInvDtl.CorrectionDtl = true;
                    }

                    ttAPInvDtl.OurQty = -ttAPInvDtl.OurQty;
                    ttAPInvDtl.VendorQty = -ttAPInvDtl.VendorQty;
                    ttAPInvDtl.AdvancePayAmt = -ttAPInvDtl.AdvancePayAmt;
                    ttAPInvDtl.DocAdvancePayAmt = -ttAPInvDtl.DocAdvancePayAmt;
                    ttAPInvDtl.Rpt1AdvancePayAmt = -ttAPInvDtl.Rpt1AdvancePayAmt;
                    ttAPInvDtl.Rpt2AdvancePayAmt = -ttAPInvDtl.Rpt2AdvancePayAmt;
                    ttAPInvDtl.Rpt3AdvancePayAmt = -ttAPInvDtl.Rpt3AdvancePayAmt;
                    ttAPInvDtl.InAdvancePayAmt = -ttAPInvDtl.InAdvancePayAmt;
                    ttAPInvDtl.DocInAdvancePayAmt = -ttAPInvDtl.DocInAdvancePayAmt;
                    ttAPInvDtl.Rpt1InAdvancePayAmt = -ttAPInvDtl.Rpt1InAdvancePayAmt;
                    ttAPInvDtl.Rpt2InAdvancePayAmt = -ttAPInvDtl.Rpt2InAdvancePayAmt;
                    ttAPInvDtl.Rpt3InAdvancePayAmt = -ttAPInvDtl.Rpt3InAdvancePayAmt;


                    ttAPInvDtl.AdvGainLoss = -ttAPInvDtl.AdvGainLoss;
                    ttAPInvDtl.Rpt1AdvGainLoss = -ttAPInvDtl.Rpt1AdvGainLoss;
                    ttAPInvDtl.Rpt2AdvGainLoss = -ttAPInvDtl.Rpt2AdvGainLoss;
                    ttAPInvDtl.Rpt3AdvGainLoss = -ttAPInvDtl.Rpt3AdvGainLoss;

                    ttAPInvDtl.LineDiscAmt = -ttAPInvDtl.LineDiscAmt;
                    ttAPInvDtl.DocLineDiscAmt = -ttAPInvDtl.DocLineDiscAmt;
                    ttAPInvDtl.Rpt1LineDiscAmt = -ttAPInvDtl.Rpt1LineDiscAmt;
                    ttAPInvDtl.Rpt2LineDiscAmt = -ttAPInvDtl.Rpt2LineDiscAmt;
                    ttAPInvDtl.Rpt3LineDiscAmt = -ttAPInvDtl.Rpt3LineDiscAmt;
                    ttAPInvDtl.InLineDiscAmt = -ttAPInvDtl.InLineDiscAmt;
                    ttAPInvDtl.DocInLineDiscAmt = -ttAPInvDtl.DocInLineDiscAmt;
                    ttAPInvDtl.Rpt1InLineDiscAmt = -ttAPInvDtl.Rpt1InLineDiscAmt;
                    ttAPInvDtl.Rpt2InLineDiscAmt = -ttAPInvDtl.Rpt2InLineDiscAmt;
                    ttAPInvDtl.Rpt3InLineDiscAmt = -ttAPInvDtl.Rpt3InLineDiscAmt;

                    ttAPInvDtl.TotalMiscChrg = 0;
                    ttAPInvDtl.DocTotalMiscChrg = 0;
                    ttAPInvDtl.Rpt1TotalMiscChrg = 0;
                    ttAPInvDtl.Rpt2TotalMiscChrg = 0;
                    ttAPInvDtl.Rpt3TotalMiscChrg = 0;
                    ttAPInvDtl.InTotalMiscChrg = 0;
                    ttAPInvDtl.DocInTotalMiscChrg = 0;
                    ttAPInvDtl.Rpt1InTotalMiscChrg = 0;
                    ttAPInvDtl.Rpt2InTotalMiscChrg = 0;
                    ttAPInvDtl.Rpt3InTotalMiscChrg = 0;

                    ttAPInvDtl.ExtCost = -ttAPInvDtl.ExtCost;
                    ttAPInvDtl.DocExtCost = -ttAPInvDtl.DocExtCost;
                    ttAPInvDtl.Rpt1ExtCost = -ttAPInvDtl.Rpt1ExtCost;
                    ttAPInvDtl.Rpt2ExtCost = -ttAPInvDtl.Rpt2ExtCost;
                    ttAPInvDtl.Rpt3ExtCost = -ttAPInvDtl.Rpt3ExtCost;
                    ttAPInvDtl.InExtCost = -ttAPInvDtl.InExtCost;
                    ttAPInvDtl.DocInExtCost = -ttAPInvDtl.DocInExtCost;
                    ttAPInvDtl.Rpt1InExtCost = -ttAPInvDtl.Rpt1InExtCost;
                    ttAPInvDtl.Rpt2InExtCost = -ttAPInvDtl.Rpt2InExtCost;
                    ttAPInvDtl.Rpt3InExtCost = -ttAPInvDtl.Rpt3InExtCost;

                    ttAPInvDtl.TotalTax = -ttAPInvDtl.TotalTax;
                    ttAPInvDtl.DocTotalTax = -ttAPInvDtl.DocTotalTax;
                    ttAPInvDtl.Rpt1TotalTax = -ttAPInvDtl.Rpt1TotalTax;
                    ttAPInvDtl.Rpt2TotalTax = -ttAPInvDtl.Rpt2TotalTax;
                    ttAPInvDtl.Rpt3TotalTax = -ttAPInvDtl.Rpt3TotalTax;
                    ttAPInvDtl.TotalSATax = -ttAPInvDtl.TotalSATax;
                    ttAPInvDtl.DocTotalSATax = -ttAPInvDtl.DocTotalSATax;
                    ttAPInvDtl.Rpt1TotalTax = -ttAPInvDtl.Rpt1TotalSATax;
                    ttAPInvDtl.Rpt2TotalTax = -ttAPInvDtl.Rpt2TotalSATax;
                    ttAPInvDtl.Rpt3TotalTax = -ttAPInvDtl.Rpt3TotalSATax;
                    ttAPInvDtl.TotalDedTax = -ttAPInvDtl.TotalDedTax;
                    ttAPInvDtl.DocTotalDedTax = -ttAPInvDtl.DocTotalDedTax;
                    ttAPInvDtl.Rpt1TotalDedTax = -ttAPInvDtl.Rpt1TotalDedTax;
                    ttAPInvDtl.Rpt2TotalDedTax = -ttAPInvDtl.Rpt2TotalDedTax;
                    ttAPInvDtl.Rpt3TotalDedTax = -ttAPInvDtl.Rpt3TotalDedTax;

                }

                ttAPInvDtl.ScrUnitCost = ttAPInvDtl.UnitCost;
                ttAPInvDtl.DocScrUnitCost = ttAPInvDtl.DocUnitCost;
                ttAPInvDtl.Rpt1ScrUnitCost = ttAPInvDtl.Rpt1UnitCost;
                ttAPInvDtl.Rpt2ScrUnitCost = ttAPInvDtl.Rpt2UnitCost;
                ttAPInvDtl.Rpt3ScrUnitCost = ttAPInvDtl.Rpt3UnitCost;

                ttAPInvDtl.InvoiceLineRef = bAPInvDtl.InvoiceLine;

                ttAPInvDtl.ScrOurQty = ttAPInvDtl.OurQty;
                ttAPInvDtl.ScrVendorQty = ttAPInvDtl.VendorQty;

                if (typeOfCreation == TypeOfCreation.Correction)
                {
                    ttAPInvDtl.NoTaxRecal = false;
                }

                ttAPInvDtl.ScrExtCost = ttAPInvDtl.ExtCost;
                ttAPInvDtl.ScrDocExtCost = ttAPInvDtl.DocExtCost;
                ttAPInvDtl.Rpt1ScrExtCost = ttAPInvDtl.Rpt1ExtCost;
                ttAPInvDtl.Rpt2ScrExtCost = ttAPInvDtl.Rpt2ExtCost;
                ttAPInvDtl.Rpt3ScrExtCost = ttAPInvDtl.Rpt3ExtCost;

                ttAPInvDtl.ScrLineDiscAmt = ttAPInvDtl.LineDiscAmt;
                ttAPInvDtl.ScrDocLineDiscAmt = ttAPInvDtl.DocLineDiscAmt;
                ttAPInvDtl.Rpt1ScrLineDiscAmt = ttAPInvDtl.Rpt1LineDiscAmt;
                ttAPInvDtl.Rpt2ScrLineDiscAmt = ttAPInvDtl.Rpt2LineDiscAmt;
                ttAPInvDtl.Rpt3ScrLineDiscAmt = ttAPInvDtl.Rpt3LineDiscAmt;

                ttAPInvDtl.ScrTotalMiscChrg = 0;
                ttAPInvDtl.ScrDocTotalMiscChrg = 0;
                ttAPInvDtl.Rpt1ScrTotalMiscChrg = 0;
                ttAPInvDtl.Rpt2ScrTotalMiscChrg = 0;
                ttAPInvDtl.Rpt3ScrTotalMiscChrg = 0;

                if (newAPInvHed.CorrectionInv == true && ttAPInvDtl.CorrectionDtl == false)
                {
                    ttAPInvDtl.AdjustmentValue = ttAPInvDtl.OrgExtCost;
                    ttAPInvDtl.DocAdjustmentValue = ttAPInvDtl.DocOrgExtCost;
                    ttAPInvDtl.Rpt1AdjustmentValue = ttAPInvDtl.Rpt1OrgExtCost;
                    ttAPInvDtl.Rpt2AdjustmentValue = ttAPInvDtl.Rpt2OrgExtCost;
                    ttAPInvDtl.Rpt3AdjustmentValue = ttAPInvDtl.Rpt3OrgExtCost;
                }

                if (typeOfCreation == TypeOfCreation.Cancellation)
                {
                    ttAPInvDtl.CancellationDtl = true;
                }

                //calcExtCost();
                //calcUnitCost();

                getLineTotals();
                Update(ref ds);
                using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
                {
                    copyInvoiceMisc(sourceInvoiceNum, destInvoiceNum, vendorNum, bAPInvDtl.InvoiceLine, curInvoiceLine, reverseSignQty);

                    if (typeOfCreation == TypeOfCreation.Correction)
                    {
                        copyCorrectionInvoiceJob(sourceInvoiceNum, destInvoiceNum, vendorNum, bAPInvDtl.InvoiceLine, curInvoiceLine, reverseSignQty);
                    }

                    CopyInvoiceAPInvExp(sourceGroup, destGroup, sourceInvoiceNum, destInvoiceNum, vendorNum, bAPInvDtl.InvoiceLine, curInvoiceLine, reverseSignQty);
                    trans.Complete();
                }
            }
        }

        /// <summary>
        /// Copy invoice header misc. charges for correction or cancellation invoice
        /// </summary>
        /// <param name="sourceInvoiceNum">Invoice num from which we are copying</param>
        /// <param name="destInvoiceNum">Invoice num to which we are copying</param>
        /// <param name="vendorNum">Vendor Number of the invoice should be the same for the source and destination</param>		
        /// <param name="sourceLineNum">Invoice num Line from which we are copying</param>
        /// <param name="destLineNum">Invoice num  Line to which we are copying</param>
        /// <param name="reverseSignQty">Indicates whether the sign is going to be reverse or not</param>
        private void copyInvoiceMisc(string sourceInvoiceNum, string destInvoiceNum, int vendorNum, int sourceLineNum, int destLineNum, bool reverseSignQty)
        {
            Erp.Tables.APInvMsc bufAPInvMsc = null;
            Erp.Tables.APInvHed newAPInvHed = null;
            bool inPrice = false;
            bool cancellationInv = false;
            int debitMemoFactor = 1;
            APInvoiceTableset ds = CurrentFullTableset;

            newAPInvHed = FindFirstAPInvHed(Session.CompanyID, vendorNum, destInvoiceNum);
            if (newAPInvHed != null)
            {
                inPrice = newAPInvHed.InPrice;
                if (!(newAPInvHed.CancellationInv && newAPInvHed.LockRate))
                    newAPInvHed.LockRate = false;

                cancellationInv = newAPInvHed.CancellationInv;
                debitMemoFactor = (newAPInvHed.DebitMemo) ? -1 : 1;
            }

            int factor = 1;
            if (reverseSignQty)
            {
                factor = -1;
            }


            /*Empty tables as other procedures may have leftover records*/
            CurrentFullTableset.APIHAPInvMsc.Clear();
            CurrentFullTableset.APInvMsc.Clear();


            foreach (var bufAPInvMsc_iterator in (SelectAPInvMsc(Session.CompanyID, vendorNum, sourceInvoiceNum, sourceLineNum)))
            {

                bufAPInvMsc = bufAPInvMsc_iterator;
                if (sourceLineNum == 0)
                {
                    GetNewAPIHAPInvMsc(ref ds, vendorNum, destInvoiceNum, destLineNum);
                    BufferCopy.CopyExceptFor(bufAPInvMsc, ttAPIHAPInvMsc, APInvMsc.ColumnNames.InvoiceNum, APInvMsc.ColumnNames.InvoiceLine, APInvMsc.ColumnNames.SysRowID, APInvMsc.ColumnNames.SysRevID);
                    if (!CopyExcRate)
                    {
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPIHAPInvMsc, true, "MiscAmt", pCurrList, "ttAPIHAPInvMsc", APInvHed.CurrencyCode, ttChainRows);
                    }



                    ttAPIHAPInvMsc.InPrice = inPrice;
                    ttAPIHAPInvMsc.MiscAmt = factor * ttAPIHAPInvMsc.MiscAmt;
                    ttAPIHAPInvMsc.DocMiscAmt = factor * ttAPIHAPInvMsc.DocMiscAmt;
                    ttAPIHAPInvMsc.Rpt1MiscAmt = factor * ttAPIHAPInvMsc.Rpt1MiscAmt;
                    ttAPIHAPInvMsc.Rpt2MiscAmt = factor * ttAPIHAPInvMsc.Rpt2MiscAmt;
                    ttAPIHAPInvMsc.Rpt3MiscAmt = factor * ttAPIHAPInvMsc.Rpt3MiscAmt;
                    ttAPIHAPInvMsc.InMiscAmt = factor * ttAPIHAPInvMsc.InMiscAmt;
                    ttAPIHAPInvMsc.DocInMiscAmt = factor * ttAPIHAPInvMsc.DocInMiscAmt;
                    ttAPIHAPInvMsc.Rpt1InMiscAmt = factor * ttAPIHAPInvMsc.Rpt1InMiscAmt;
                    ttAPIHAPInvMsc.Rpt2InMiscAmt = factor * ttAPIHAPInvMsc.Rpt2InMiscAmt;
                    ttAPIHAPInvMsc.Rpt3InMiscAmt = factor * ttAPIHAPInvMsc.Rpt3InMiscAmt;
                    if (inPrice == false)
                    {
                        ttAPIHAPInvMsc.ScrMiscAmt = debitMemoFactor * ttAPIHAPInvMsc.MiscAmt;
                        ttAPIHAPInvMsc.ScrDocMiscAmt = debitMemoFactor * ttAPIHAPInvMsc.DocMiscAmt;
                        ttAPIHAPInvMsc.Rpt1ScrMiscAmt = debitMemoFactor * ttAPIHAPInvMsc.Rpt1MiscAmt;
                        ttAPIHAPInvMsc.Rpt2ScrMiscAmt = debitMemoFactor * ttAPIHAPInvMsc.Rpt2MiscAmt;
                        ttAPIHAPInvMsc.Rpt3ScrMiscAmt = debitMemoFactor * ttAPIHAPInvMsc.Rpt3MiscAmt;
                    }
                    else
                    {
                        ttAPIHAPInvMsc.ScrMiscAmt = debitMemoFactor * ttAPIHAPInvMsc.InMiscAmt;
                        ttAPIHAPInvMsc.ScrDocMiscAmt = debitMemoFactor * ttAPIHAPInvMsc.DocInMiscAmt;
                        ttAPIHAPInvMsc.Rpt1ScrMiscAmt = debitMemoFactor * ttAPIHAPInvMsc.Rpt1InMiscAmt;
                        ttAPIHAPInvMsc.Rpt2ScrMiscAmt = debitMemoFactor * ttAPIHAPInvMsc.Rpt2InMiscAmt;
                        ttAPIHAPInvMsc.Rpt3ScrMiscAmt = debitMemoFactor * ttAPIHAPInvMsc.Rpt3InMiscAmt;

                    }

                    if (reverseSignQty && !cancellationInv)
                    {
                        ttAPIHAPInvMsc.CorrectionDtl = true;
                        ttAPIHAPInvMsc.InvExpSeq = 0;
                    }
                }
                else
                {
                    GetNewAPInvMsc(ref ds, vendorNum, destInvoiceNum, destLineNum);
                    BufferCopy.CopyExceptFor(bufAPInvMsc, ttAPInvMsc, APInvMsc.ColumnNames.InvoiceNum, APInvMsc.ColumnNames.InvoiceLine, APInvMsc.ColumnNames.SysRowID, APInvMsc.ColumnNames.SysRevID);
                    if (!CopyExcRate)
                    {
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvMsc, true, "MiscAmt", pCurrList, "ttAPInvMsc", APInvHed.CurrencyCode, ttChainRows);
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvMsc, true, "InMiscAmt", pCurrList, "ttAPInvMsc", APInvHed.CurrencyCode, ttChainRows);

                    }


                    ttAPInvMsc.InPrice = inPrice;
                    ttAPInvMsc.MiscAmt = factor * ttAPInvMsc.MiscAmt;
                    ttAPInvMsc.DocMiscAmt = factor * ttAPInvMsc.DocMiscAmt;
                    ttAPInvMsc.Rpt1MiscAmt = factor * ttAPInvMsc.Rpt1MiscAmt;
                    ttAPInvMsc.Rpt2MiscAmt = factor * ttAPInvMsc.Rpt2MiscAmt;
                    ttAPInvMsc.Rpt3MiscAmt = factor * ttAPInvMsc.Rpt3MiscAmt;
                    ttAPInvMsc.InMiscAmt = factor * ttAPInvMsc.InMiscAmt;
                    ttAPInvMsc.DocInMiscAmt = factor * ttAPInvMsc.DocInMiscAmt;
                    ttAPInvMsc.Rpt1InMiscAmt = factor * ttAPInvMsc.Rpt1InMiscAmt;
                    ttAPInvMsc.Rpt2InMiscAmt = factor * ttAPInvMsc.Rpt2InMiscAmt;
                    ttAPInvMsc.Rpt3InMiscAmt = factor * ttAPInvMsc.Rpt3InMiscAmt;
                    if (inPrice == false)
                    {
                        ttAPInvMsc.ScrMiscAmt = debitMemoFactor * ttAPInvMsc.MiscAmt;
                        ttAPInvMsc.ScrDocMiscAmt = debitMemoFactor * ttAPInvMsc.DocMiscAmt;
                        ttAPInvMsc.Rpt1ScrMiscAmt = debitMemoFactor * ttAPInvMsc.Rpt1MiscAmt;
                        ttAPInvMsc.Rpt2ScrMiscAmt = debitMemoFactor * ttAPInvMsc.Rpt2MiscAmt;
                        ttAPInvMsc.Rpt3ScrMiscAmt = debitMemoFactor * ttAPInvMsc.Rpt3MiscAmt;
                    }
                    else
                    {
                        ttAPInvMsc.ScrMiscAmt = debitMemoFactor * ttAPInvMsc.InMiscAmt;
                        ttAPInvMsc.ScrDocMiscAmt = debitMemoFactor * ttAPInvMsc.DocInMiscAmt;
                        ttAPInvMsc.Rpt1ScrMiscAmt = debitMemoFactor * ttAPInvMsc.Rpt1InMiscAmt;
                        ttAPInvMsc.Rpt2ScrMiscAmt = debitMemoFactor * ttAPInvMsc.Rpt2InMiscAmt;
                        ttAPInvMsc.Rpt3ScrMiscAmt = debitMemoFactor * ttAPInvMsc.Rpt3InMiscAmt;
                    }
                    if (reverseSignQty && !cancellationInv)
                    {
                        ttAPInvMsc.CorrectionDtl = true;
                    }
                }

                Update(ref ds);
                CurrentFullTableset = ds;
            }
        }

        /// <summary>
        /// Copy from source all records of APInvTax for correction or cancellation invoice.
        /// </summary>
        /// <param name="typeOfCreation">options : Correction, Cancellation</param>
        /// <param name="vendorNum"></param>
        /// <param name="srcInvoiceNum"></param>
        /// <param name="newInvoiceNum"></param>
        private void CopyInvoiceTax(TypeOfCreation typeOfCreation, int vendorNum, string srcInvoiceNum, string newInvoiceNum)
        {
            validateTypeOfCreation(typeOfCreation);

            Erp.Tables.APInvTax srcAPInvTax;
            APInvoiceTableset ds = CurrentFullTableset;
            foreach (var srcAPInvTax_iterator in (SelectAPInvTax3(Session.CompanyID, vendorNum, srcInvoiceNum)))
            {
                srcAPInvTax = srcAPInvTax_iterator;
                if (ExistsAPInvTax2(Session.CompanyID, vendorNum, newInvoiceNum, srcAPInvTax.TaxCode, srcAPInvTax.RateCode, srcAPInvTax.ECAcquisitionSeq))
                    continue;

                APInvTax = new Erp.Tables.APInvTax();
                Db.APInvTax.Insert(APInvTax);
                APInvTax.Company = srcAPInvTax.Company;
                APInvTax.VendorNum = srcAPInvTax.VendorNum;
                APInvTax.InvoiceNum = newInvoiceNum;
                APInvTax.TaxCode = srcAPInvTax.TaxCode;
                APInvTax.Percent = srcAPInvTax.Percent;
                APInvTax.SysCalcDocTaxableAmt = srcAPInvTax.SysCalcDocTaxableAmt;
                APInvTax.SysCalcDocReportableAmt = srcAPInvTax.SysCalcDocReportableAmt;
                APInvTax.ECAcquisitionSeq = srcAPInvTax.ECAcquisitionSeq;
                APInvTax.RateCode = srcAPInvTax.RateCode;
                APInvTax.TaxRateDate = srcAPInvTax.TaxRateDate;

                if (typeOfCreation == TypeOfCreation.Cancellation)
                {
                    BufferCopy.CopyExceptFor(srcAPInvTax, APInvTax, APInvTax.ColumnNames.InvoiceNum);
                    APInvTax.InvoiceNum = newInvoiceNum;
                    APInvTax.DedTaxAmt = -srcAPInvTax.DedTaxAmt;
                    APInvTax.DefTaxableAmt = -srcAPInvTax.DefTaxableAmt;
                    APInvTax.DefTaxAmt = -srcAPInvTax.DefTaxAmt;
                    APInvTax.FixedAmount = -srcAPInvTax.FixedAmount;
                    APInvTax.ReportableAmt = -srcAPInvTax.ReportableAmt;
                    APInvTax.SysCalcReportableAmt = -srcAPInvTax.SysCalcReportableAmt;
                    APInvTax.SysCalcTaxableAmt = -srcAPInvTax.SysCalcTaxableAmt;
                    APInvTax.TaxAmt = -srcAPInvTax.TaxAmt;
                    APInvTax.TaxableAmt = -srcAPInvTax.TaxableAmt;
                    APInvTax.TaxAmtVar = -srcAPInvTax.TaxAmtVar;
                    APInvTax.DocDedTaxAmt = -srcAPInvTax.DocDedTaxAmt;
                    APInvTax.DocDefTaxableAmt = -srcAPInvTax.DocDefTaxableAmt;
                    APInvTax.DocDefTaxAmt = -srcAPInvTax.DocDefTaxAmt;
                    APInvTax.DocFixedAmount = -srcAPInvTax.DocFixedAmount;
                    APInvTax.DocReportableAmt = -srcAPInvTax.DocReportableAmt;
                    APInvTax.SysCalcDocReportableAmt = -srcAPInvTax.SysCalcDocReportableAmt;
                    APInvTax.SysCalcDocTaxableAmt = -srcAPInvTax.SysCalcDocTaxableAmt;
                    APInvTax.DocTaxAmt = -srcAPInvTax.DocTaxAmt;
                    APInvTax.DocTaxableAmt = -srcAPInvTax.DocTaxableAmt;
                    APInvTax.DocTaxAmtVar = -srcAPInvTax.DocTaxAmtVar;
                    APInvTax.Rpt1DedTaxAmt = -srcAPInvTax.Rpt1DedTaxAmt;
                    APInvTax.Rpt1DefTaxableAmt = -srcAPInvTax.Rpt1DefTaxableAmt;
                    APInvTax.Rpt1DefTaxAmt = -srcAPInvTax.Rpt1DefTaxAmt;
                    APInvTax.Rpt1FixedAmount = -srcAPInvTax.Rpt1FixedAmount;
                    APInvTax.Rpt1ReportableAmt = -srcAPInvTax.Rpt1ReportableAmt;
                    APInvTax.Rpt1SysCalcReportableAmt = -srcAPInvTax.Rpt1SysCalcReportableAmt;
                    APInvTax.Rpt1SysCalcTaxableAmt = -srcAPInvTax.Rpt1SysCalcTaxableAmt;
                    APInvTax.Rpt1TaxableAmt = -srcAPInvTax.Rpt1TaxableAmt;
                    APInvTax.Rpt1TaxAmt = -srcAPInvTax.Rpt1TaxAmt;
                    APInvTax.Rpt1TaxAmtVar = -srcAPInvTax.Rpt1TaxAmtVar;
                    APInvTax.Rpt2DedTaxAmt = -srcAPInvTax.Rpt2DedTaxAmt;
                    APInvTax.Rpt2DefTaxableAmt = -srcAPInvTax.Rpt2DefTaxableAmt;
                    APInvTax.Rpt2DefTaxAmt = -srcAPInvTax.Rpt2DefTaxAmt;
                    APInvTax.Rpt2FixedAmount = -srcAPInvTax.Rpt2FixedAmount;
                    APInvTax.Rpt2ReportableAmt = -srcAPInvTax.Rpt2ReportableAmt;
                    APInvTax.Rpt2SysCalcReportableAmt = -srcAPInvTax.Rpt2SysCalcReportableAmt;
                    APInvTax.Rpt2SysCalcTaxableAmt = -srcAPInvTax.Rpt2SysCalcTaxableAmt;
                    APInvTax.Rpt2TaxableAmt = -srcAPInvTax.Rpt2TaxableAmt;
                    APInvTax.Rpt2TaxAmt = -srcAPInvTax.Rpt2TaxAmt;
                    APInvTax.Rpt2TaxAmtVar = -srcAPInvTax.Rpt2TaxAmtVar;
                    APInvTax.Rpt3DedTaxAmt = -srcAPInvTax.Rpt3DedTaxAmt;
                    APInvTax.Rpt3DefTaxableAmt = -srcAPInvTax.Rpt3DefTaxableAmt;
                    APInvTax.Rpt3DefTaxAmt = -srcAPInvTax.Rpt3DefTaxAmt;
                    APInvTax.Rpt3FixedAmount = -srcAPInvTax.Rpt3FixedAmount;
                    APInvTax.Rpt3ReportableAmt = -srcAPInvTax.Rpt3ReportableAmt;
                    APInvTax.Rpt3SysCalcReportableAmt = -srcAPInvTax.Rpt3SysCalcReportableAmt;
                    APInvTax.Rpt3SysCalcTaxableAmt = -srcAPInvTax.Rpt3SysCalcTaxableAmt;
                    APInvTax.Rpt3TaxableAmt = -srcAPInvTax.Rpt3TaxableAmt;
                    APInvTax.Rpt3TaxAmt = -srcAPInvTax.Rpt3TaxAmt;
                    APInvTax.Rpt3TaxAmtVar = -srcAPInvTax.Rpt3TaxAmtVar;
                }

                Db.Validate(APInvTax);
            }
            CopyInvoiceLnTax(typeOfCreation, vendorNum, srcInvoiceNum, newInvoiceNum);
        }
        /// <summary>
        /// Copy from source all records of APInvHedMscTax for correction  or cancellation invoice.
        /// </summary>
        /// <param name="typeOfCreation">options : Correction, Cancellation</param>
        /// <param name="vendorNum"></param>
        /// <param name="srcInvoiceNum"></param>
        /// <param name="newInvoiceNum"></param>
        private void CopyInvoiceMiscTax(TypeOfCreation typeOfCreation, int vendorNum, string srcInvoiceNum, string newInvoiceNum)
        {
            validateTypeOfCreation(typeOfCreation);

            Erp.Tables.APInvHedMscTax srcAPInvMiscTax;
            using (Db.DisableTriggerScope(nameof(Erp.Tables.APInvHedMscTax)))
            {
                foreach (var newAPInvMiscTax_iterator in SelectAPInvMsc(Session.CompanyID, vendorNum, newInvoiceNum, 0))
                {
                    APInvMsc aPInvMsc = newAPInvMiscTax_iterator;
                    foreach (var srcAPInvMiscTax_iterator in (SelectAPInvHedMiscTax(Session.CompanyID, vendorNum, srcInvoiceNum, aPInvMsc.MiscCode)))
                    {
                        srcAPInvMiscTax = srcAPInvMiscTax_iterator;
                        if (srcAPInvMiscTax.ManAdd || (typeOfCreation == TypeOfCreation.Cancellation))
                        {
                            if (!ExistsAPInvHedMscTax(Session.CompanyID, vendorNum, newInvoiceNum, aPInvMsc.MscNum, srcAPInvMiscTax.TaxCode, srcAPInvMiscTax.RateCode, srcAPInvMiscTax.ECAcquisitionSeq))
                            {
                                if (!aPInvMsc.CorrectionDtl && typeOfCreation != TypeOfCreation.Cancellation)
                                    CopyPosMiscTax(srcAPInvMiscTax, newInvoiceNum, aPInvMsc.MscNum);
                                else
                                    CopyNegMiscTax(srcAPInvMiscTax, newInvoiceNum, aPInvMsc.MscNum);

                            }
                            else if (typeOfCreation == TypeOfCreation.Cancellation)
                                CopyNegMiscTax(srcAPInvMiscTax, newInvoiceNum, aPInvMsc.MscNum);
                        }
                    }
                }
            }
            CopyInvoicesMiscLnTax(typeOfCreation, vendorNum, srcInvoiceNum, newInvoiceNum);
        }
        /// <summary>
        /// Execute functions copyPosLnTax and copyNegLnTax to insert APLnTax records to the correction  or cancellation invoice.
        /// </summary>
        /// <param name="typeOfCreation">options : Correction, Cancellation</param>
        /// <param name="vendorNum"></param>
        /// <param name="srcInvoiceNum"></param>
        /// <param name="newInvoiceNum"></param>        
        private void CopyInvoiceLnTax(TypeOfCreation typeOfCreation, int vendorNum, string srcInvoiceNum, string newInvoiceNum)
        {
            validateTypeOfCreation(typeOfCreation);

            Erp.Tables.APInvDtl APInvDtl;
            Erp.Tables.APLnTax srcAPLnTax;
            int invoiceLine = 0;
            using (Db.DisableTriggerScope(nameof(Erp.Tables.APLnTax)))
            {
                foreach (APInvDtl APInvDtl_iterator in (SelectAPInvDtl(Session.CompanyID, vendorNum, newInvoiceNum)))
                {
                    APInvDtl = APInvDtl_iterator;
                    foreach (APLnTax APLnTax_iterator in (SelectAPLnTax5(Session.CompanyID, vendorNum, srcInvoiceNum, APInvDtl.InvoiceLineRef)))
                    {
                        srcAPLnTax = APLnTax_iterator;
                        invoiceLine = FindFirstAPInvDtlCorrectionLine(Session.CompanyID, vendorNum, newInvoiceNum, APInvDtl.InvoiceLineRef, APInvDtl.CorrectionDtl);
                        if (ExistsAPLnTax2(Session.CompanyID, vendorNum, newInvoiceNum, invoiceLine, srcAPLnTax.TaxCode, srcAPLnTax.RateCode, srcAPLnTax.ECAcquisitionSeq))
                        {
                            continue;
                        }

                        if (invoiceLine != 0)
                            if (!APInvDtl.CorrectionDtl && typeOfCreation != TypeOfCreation.Cancellation)
                                CopyPosLnTax(srcAPLnTax, newInvoiceNum, invoiceLine);
                            else
                                CopyNegLnTax(srcAPLnTax, newInvoiceNum, invoiceLine);
                    }
                }
            }
        }
        /// <summary>
        /// Copy a Positive APLnTax for correction or cancellation invoice from source to new APLnTax, also insert and valid in DB.
        /// </summary>
        /// <param name="srcAPLnTax"></param>
        /// <param name="newInvoiceNum"></param>
        /// <param name="invoiceLine"></param>
        private void CopyPosLnTax(APLnTax srcAPLnTax, string newInvoiceNum, int invoiceLine)
        {
            APLnTax = new Erp.Tables.APLnTax();
            Db.APLnTax.Insert(APLnTax);
            BufferCopy.CopyExceptFor(srcAPLnTax, APLnTax, APLnTax.ColumnNames.InvoiceNum);
            APLnTax.InvoiceNum = newInvoiceNum;
            APLnTax.InvoiceLine = invoiceLine;
            Db.Validate(APLnTax);
        }
        /// <summary>
        /// Copy a Negative APLnTax for correction or cancellation invoice from source to new APLnTax, also insert and valid in DB.
        /// </summary>
        /// <param name="srcAPLnTax"></param>
        /// <param name="newInvoiceNum"></param>
        /// <param name="invoiceLine"></param>
        private void CopyNegLnTax(APLnTax srcAPLnTax, string newInvoiceNum, int invoiceLine)
        {
            APLnTax = new Erp.Tables.APLnTax();
            Db.APLnTax.Insert(APLnTax);
            BufferCopy.CopyExceptFor(srcAPLnTax, APLnTax, APLnTax.ColumnNames.InvoiceNum);
            APLnTax.InvoiceNum = newInvoiceNum;
            APLnTax.InvoiceLine = invoiceLine;
            APLnTax.TaxableAmt = -APLnTax.TaxableAmt;
            APLnTax.DocTaxableAmt = -APLnTax.DocTaxableAmt;
            APLnTax.TaxAmt = -APLnTax.TaxAmt;
            APLnTax.DocTaxAmt = -APLnTax.DocTaxAmt;
            APLnTax.ReportableAmt = -APLnTax.ReportableAmt;
            APLnTax.DocReportableAmt = -APLnTax.DocReportableAmt;
            APLnTax.SysCalcDocTaxableAmt = -APLnTax.SysCalcDocTaxableAmt;
            APLnTax.SysCalcDocReportableAmt = -APLnTax.SysCalcDocReportableAmt;
            APLnTax.Rpt1ReportableAmt = -APLnTax.Rpt1ReportableAmt;
            APLnTax.Rpt2ReportableAmt = -APLnTax.Rpt2ReportableAmt;
            APLnTax.Rpt3ReportableAmt = -APLnTax.Rpt3ReportableAmt;
            APLnTax.Rpt1TaxableAmt = -APLnTax.Rpt1TaxableAmt;
            APLnTax.Rpt2TaxableAmt = -APLnTax.Rpt2TaxableAmt;
            APLnTax.Rpt3TaxableAmt = -APLnTax.Rpt3TaxableAmt;
            APLnTax.Rpt1TaxAmt = -APLnTax.Rpt1TaxAmt;
            APLnTax.Rpt2TaxAmt = -APLnTax.Rpt2TaxAmt;
            APLnTax.Rpt3TaxAmt = -APLnTax.Rpt3TaxAmt;
            APLnTax.DedTaxAmt = -APLnTax.DedTaxAmt;
            APLnTax.DocDedTaxAmt = -APLnTax.DocDedTaxAmt;
            APLnTax.Rpt1DedTaxAmt = -APLnTax.Rpt1DedTaxAmt;
            APLnTax.Rpt2DedTaxAmt = -APLnTax.Rpt2DedTaxAmt;
            APLnTax.Rpt3DedTaxAmt = -APLnTax.Rpt3DedTaxAmt;
            APLnTax.DefTaxAmt = -APLnTax.DefTaxAmt;
            APLnTax.DefTaxableAmt = -APLnTax.DefTaxableAmt;

            APLnTax.DocDefTaxableAmt = -APLnTax.DocDefTaxableAmt;
            APLnTax.Rpt1DefTaxableAmt = -APLnTax.Rpt1DefTaxableAmt;
            APLnTax.Rpt2DefTaxableAmt = -APLnTax.Rpt2DefTaxableAmt;
            APLnTax.Rpt3DefTaxableAmt = -APLnTax.Rpt3DefTaxableAmt;
            APLnTax.DocDefTaxAmt = -APLnTax.DocDefTaxAmt;
            APLnTax.Rpt1DefTaxAmt = -APLnTax.Rpt1DefTaxAmt;
            APLnTax.Rpt2DefTaxAmt = -APLnTax.Rpt2DefTaxAmt;
            APLnTax.Rpt3DefTaxAmt = -APLnTax.Rpt3DefTaxAmt;

            APLnTax.ChangedBy = Session.UserID;
            APLnTax.ChangedOn = CompanyTime.Now();
            Db.Validate(APLnTax);
        }
        /// <summary>
        /// Execute functions CopyPosMiscLnTax and CopyNegMiscLnTax to insert APInvLnMscTax records to the correction or cancellation invoice.
        /// </summary>
        /// <param name="typeOfCreation">options : Correction, Cancellation</param>
        /// <param name="vendorNum"></param>
        /// <param name="srcInvoiceNum"></param>
        /// <param name="newInvoiceNum"></param>
        private void CopyInvoicesMiscLnTax(TypeOfCreation typeOfCreation, int vendorNum, string srcInvoiceNum, string newInvoiceNum)
        {
            validateTypeOfCreation(typeOfCreation);

            Erp.Tables.APInvDtl APInvDtl;
            Erp.Tables.APInvLnMscTax srcAPInvLnMscTax;
            int invoiceLine = 0;
            using (Db.DisableTriggerScope(nameof(Erp.Tables.APInvLnMscTax)))
            {
                foreach (APInvDtl APInvDtl_iterator in (SelectAPInvDtl(Session.CompanyID, vendorNum, newInvoiceNum)))
                {
                    APInvDtl = APInvDtl_iterator;
                    foreach (APInvLnMscTax APInvLnMscTax_iterator in (SelectAPInvLnMiscTax(Session.CompanyID, vendorNum, srcInvoiceNum, APInvDtl.InvoiceLineRef)))
                    {
                        srcAPInvLnMscTax = APInvLnMscTax_iterator;

                        if (srcAPInvLnMscTax.ManAdd || (typeOfCreation == TypeOfCreation.Cancellation))
                        {
                            invoiceLine = FindFirstAPInvDtlCorrectionLine(Session.CompanyID, vendorNum, newInvoiceNum, APInvDtl.InvoiceLineRef, APInvDtl.CorrectionDtl);
                            if (!ExistsAPInvLnMscTax(Session.CompanyID, vendorNum, newInvoiceNum, invoiceLine, srcAPInvLnMscTax.MscNum, srcAPInvLnMscTax.TaxCode, srcAPInvLnMscTax.RateCode, srcAPInvLnMscTax.ECAcquisitionSeq))
                            {
                                if (invoiceLine != 0)
                                    if (!APInvDtl.CorrectionDtl && typeOfCreation != TypeOfCreation.Cancellation)
                                        CopyPosMiscLnTax(srcAPInvLnMscTax, newInvoiceNum, invoiceLine);
                                    else
                                        CopyNegMiscLnTax(srcAPInvLnMscTax, newInvoiceNum, invoiceLine);
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Copy a Positive APInvLnMscTax for correction or cancellation invoice from source to new APLnTax, also insert and valid in DB.
        /// </summary>
        /// <param name="srcAPInvLnMscTax"></param>
        /// <param name="newInvoiceNum"></param>
        /// <param name="invoiceLine"></param>
        private void CopyPosMiscLnTax(APInvLnMscTax srcAPInvLnMscTax, string newInvoiceNum, int invoiceLine)
        {
            APInvLnMscTax = new Erp.Tables.APInvLnMscTax();
            Db.APInvLnMscTax.Insert(APInvLnMscTax);
            BufferCopy.CopyExceptFor(srcAPInvLnMscTax, APInvLnMscTax, APInvLnMscTax.ColumnNames.InvoiceNum);
            APInvLnMscTax.InvoiceNum = newInvoiceNum;
            APInvLnMscTax.InvoiceLine = invoiceLine;
            APInvLnMscTax.APInvMscSysRowID = FindFirstAPInvHedMscTax(Session.CompanyID, APInvLnMscTax.VendorNum, newInvoiceNum, APInvLnMscTax.InvoiceLine, APInvLnMscTax.MscNum);
            Db.Validate(APInvLnMscTax);
        }
        /// <summary>
        /// Copy a Negative APInvLnMscTax for correction or cancellation invoice from source to new APLnTax, also insert and valid in DB.
        /// </summary>
        /// <param name="srcAPInvLnMscTax"></param>
        /// <param name="newInvoiceNum"></param>
        /// <param name="invoiceLine"></param>
        private void CopyNegMiscLnTax(APInvLnMscTax srcAPInvLnMscTax, string newInvoiceNum, int invoiceLine)
        {
            APInvLnMscTax = new Erp.Tables.APInvLnMscTax();
            Db.APInvLnMscTax.Insert(APInvLnMscTax);
            BufferCopy.CopyExceptFor(srcAPInvLnMscTax, APInvLnMscTax, APInvLnMscTax.ColumnNames.InvoiceNum);
            APInvLnMscTax.InvoiceNum = newInvoiceNum;
            APInvLnMscTax.InvoiceLine = invoiceLine;
            APInvLnMscTax.APInvMscSysRowID = FindFirstAPInvHedMscTax(Session.CompanyID, APInvLnMscTax.VendorNum, newInvoiceNum, APInvLnMscTax.InvoiceLine, APInvLnMscTax.MscNum);
            APInvLnMscTax.TaxableAmt = -APInvLnMscTax.TaxableAmt;
            APInvLnMscTax.DocTaxableAmt = -APInvLnMscTax.DocTaxableAmt;
            APInvLnMscTax.TaxAmt = -APInvLnMscTax.TaxAmt;
            APInvLnMscTax.DocTaxAmt = -APInvLnMscTax.DocTaxAmt;
            APInvLnMscTax.ReportableAmt = -APInvLnMscTax.ReportableAmt;
            APInvLnMscTax.DocReportableAmt = -APInvLnMscTax.DocReportableAmt;
            APInvLnMscTax.SysCalcDocTaxableAmt = -APInvLnMscTax.SysCalcDocTaxableAmt;
            APInvLnMscTax.SysCalcDocReportableAmt = -APInvLnMscTax.SysCalcDocReportableAmt;
            APInvLnMscTax.Rpt1ReportableAmt = -APInvLnMscTax.Rpt1ReportableAmt;
            APInvLnMscTax.Rpt2ReportableAmt = -APInvLnMscTax.Rpt2ReportableAmt;
            APInvLnMscTax.Rpt3ReportableAmt = -APInvLnMscTax.Rpt3ReportableAmt;
            APInvLnMscTax.Rpt1TaxableAmt = -APInvLnMscTax.Rpt1TaxableAmt;
            APInvLnMscTax.Rpt2TaxableAmt = -APInvLnMscTax.Rpt2TaxableAmt;
            APInvLnMscTax.Rpt3TaxableAmt = -APInvLnMscTax.Rpt3TaxableAmt;
            APInvLnMscTax.Rpt1TaxAmt = -APInvLnMscTax.Rpt1TaxAmt;
            APInvLnMscTax.Rpt2TaxAmt = -APInvLnMscTax.Rpt2TaxAmt;
            APInvLnMscTax.Rpt3TaxAmt = -APInvLnMscTax.Rpt3TaxAmt;
            APInvLnMscTax.DedTaxAmt = -APInvLnMscTax.DedTaxAmt;
            APInvLnMscTax.DocDedTaxAmt = -APInvLnMscTax.DocDedTaxAmt;
            APInvLnMscTax.Rpt1DedTaxAmt = -APInvLnMscTax.Rpt1DedTaxAmt;
            APInvLnMscTax.Rpt2DedTaxAmt = -APInvLnMscTax.Rpt2DedTaxAmt;
            APInvLnMscTax.Rpt3DedTaxAmt = -APInvLnMscTax.Rpt3DedTaxAmt;
            APInvLnMscTax.DefTaxAmt = -APInvLnMscTax.DefTaxAmt;
            APInvLnMscTax.DefTaxableAmt = -APInvLnMscTax.DefTaxableAmt;

            APInvLnMscTax.DocDefTaxableAmt = -APInvLnMscTax.DocDefTaxableAmt;
            APInvLnMscTax.Rpt1DefTaxableAmt = -APInvLnMscTax.Rpt1DefTaxableAmt;
            APInvLnMscTax.Rpt2DefTaxableAmt = -APInvLnMscTax.Rpt2DefTaxableAmt;
            APInvLnMscTax.Rpt3DefTaxableAmt = -APInvLnMscTax.Rpt3DefTaxableAmt;
            APInvLnMscTax.DocDefTaxAmt = -APInvLnMscTax.DocDefTaxAmt;
            APInvLnMscTax.Rpt1DefTaxAmt = -APInvLnMscTax.Rpt1DefTaxAmt;
            APInvLnMscTax.Rpt2DefTaxAmt = -APInvLnMscTax.Rpt2DefTaxAmt;
            APInvLnMscTax.Rpt3DefTaxAmt = -APInvLnMscTax.Rpt3DefTaxAmt;

            APInvLnMscTax.ChangedBy = Session.UserID;
            APInvLnMscTax.ChangedOn = CompanyTime.Now();
            Db.Validate(APInvLnMscTax);
        }

        /// <summary>
        /// Copy a Positive APInvHedMscTax for correction or cancellation invoice from source to new APLnTax, also insert and valid in DB.
        /// </summary>
        /// <param name="srcAPInvMscTax"></param>
        /// <param name="newInvoiceNum"></param>
        /// <param name="mscNum"></param>
        private void CopyPosMiscTax(APInvHedMscTax srcAPInvMscTax, string newInvoiceNum, int mscNum)
        {
            APInvHedMscTax = new Erp.Tables.APInvHedMscTax();
            Db.APInvHedMscTax.Insert(APInvHedMscTax);
            BufferCopy.CopyExceptFor(srcAPInvMscTax, APInvHedMscTax, new string[] { APInvHedMscTax.ColumnNames.InvoiceNum, APInvHedMscTax.ColumnNames.MscNum });
            APInvHedMscTax.InvoiceNum = newInvoiceNum;
            APInvHedMscTax.MscNum = mscNum;
            APInvHedMscTax.APInvMscSysRowID = FindFirstAPInvHedMscTax(Session.CompanyID, APInvHedMscTax.VendorNum, newInvoiceNum, 0, APInvHedMscTax.MscNum);
            Db.Validate(APInvHedMscTax);
        }
        /// <summary>
        /// Copy a Negative APInvHedMscTax for correction or cancellation invoice from source to new APLnTax, also insert and valid in DB.
        /// </summary>
        /// <param name="srcAPInvMscTax"></param>
        /// <param name="newInvoiceNum"></param>
        /// <param name="mscNum"></param>
        private void CopyNegMiscTax(APInvHedMscTax srcAPInvMscTax, string newInvoiceNum, int mscNum)
        {
            APInvHedMscTax = new Erp.Tables.APInvHedMscTax();
            Db.APInvHedMscTax.Insert(APInvHedMscTax);
            BufferCopy.CopyExceptFor(srcAPInvMscTax, APInvHedMscTax, new string[] { APInvHedMscTax.ColumnNames.InvoiceNum, APInvHedMscTax.ColumnNames.MscNum });
            APInvHedMscTax.InvoiceNum = newInvoiceNum;
            APInvHedMscTax.MscNum = mscNum;
            APInvHedMscTax.APInvMscSysRowID = FindFirstAPInvHedMscTax(Session.CompanyID, APInvHedMscTax.VendorNum, newInvoiceNum, 0, APInvHedMscTax.MscNum);
            APInvHedMscTax.TaxableAmt = -APInvHedMscTax.TaxableAmt;
            APInvHedMscTax.DocTaxableAmt = -APInvHedMscTax.DocTaxableAmt;
            APInvHedMscTax.TaxAmt = -APInvHedMscTax.TaxAmt;
            APInvHedMscTax.DocTaxAmt = -APInvHedMscTax.DocTaxAmt;
            APInvHedMscTax.ReportableAmt = -APInvHedMscTax.ReportableAmt;
            APInvHedMscTax.DocReportableAmt = -APInvHedMscTax.DocReportableAmt;
            APInvHedMscTax.SysCalcDocTaxableAmt = -APInvHedMscTax.SysCalcDocTaxableAmt;
            APInvHedMscTax.SysCalcDocReportableAmt = -APInvHedMscTax.SysCalcDocReportableAmt;
            APInvHedMscTax.Rpt1ReportableAmt = -APInvHedMscTax.Rpt1ReportableAmt;
            APInvHedMscTax.Rpt2ReportableAmt = -APInvHedMscTax.Rpt2ReportableAmt;
            APInvHedMscTax.Rpt3ReportableAmt = -APInvHedMscTax.Rpt3ReportableAmt;
            APInvHedMscTax.Rpt1TaxableAmt = -APInvHedMscTax.Rpt1TaxableAmt;
            APInvHedMscTax.Rpt2TaxableAmt = -APInvHedMscTax.Rpt2TaxableAmt;
            APInvHedMscTax.Rpt3TaxableAmt = -APInvHedMscTax.Rpt3TaxableAmt;
            APInvHedMscTax.Rpt1TaxAmt = -APInvHedMscTax.Rpt1TaxAmt;
            APInvHedMscTax.Rpt2TaxAmt = -APInvHedMscTax.Rpt2TaxAmt;
            APInvHedMscTax.Rpt3TaxAmt = -APInvHedMscTax.Rpt3TaxAmt;
            APInvHedMscTax.DedTaxAmt = -APInvHedMscTax.DedTaxAmt;
            APInvHedMscTax.DocDedTaxAmt = -APInvHedMscTax.DocDedTaxAmt;
            APInvHedMscTax.Rpt1DedTaxAmt = -APInvHedMscTax.Rpt1DedTaxAmt;
            APInvHedMscTax.Rpt2DedTaxAmt = -APInvHedMscTax.Rpt2DedTaxAmt;
            APInvHedMscTax.Rpt3DedTaxAmt = -APInvHedMscTax.Rpt3DedTaxAmt;
            APInvHedMscTax.DefTaxAmt = -APInvHedMscTax.DefTaxAmt;
            APInvHedMscTax.DefTaxableAmt = -APInvHedMscTax.DefTaxableAmt;

            APInvHedMscTax.DocDefTaxableAmt = -APInvHedMscTax.DocDefTaxableAmt;
            APInvHedMscTax.Rpt1DefTaxableAmt = -APInvHedMscTax.Rpt1DefTaxableAmt;
            APInvHedMscTax.Rpt2DefTaxableAmt = -APInvHedMscTax.Rpt2DefTaxableAmt;
            APInvHedMscTax.Rpt3DefTaxableAmt = -APInvHedMscTax.Rpt3DefTaxableAmt;
            APInvHedMscTax.DocDefTaxAmt = -APInvHedMscTax.DocDefTaxAmt;
            APInvHedMscTax.Rpt1DefTaxAmt = -APInvHedMscTax.Rpt1DefTaxAmt;
            APInvHedMscTax.Rpt2DefTaxAmt = -APInvHedMscTax.Rpt2DefTaxAmt;
            APInvHedMscTax.Rpt3DefTaxAmt = -APInvHedMscTax.Rpt3DefTaxAmt;

            APInvHedMscTax.ChangedBy = Session.UserID;
            APInvHedMscTax.ChangedOn = CompanyTime.Now();
            Db.Validate(APInvHedMscTax);
        }

        #endregion

        /// <summary>
        /// Gets list of Recurring Source Invoices
        /// </summary>
        /// <param name="ipSuppList">Vendors, for which recurring source invoices are searched</param>
        /// <param name="ipCycleCodesList">Cycle Codes, for which recurring source invoices are searched</param>
        /// <param name="ipGrpDate">Apply date of the AP Invoice Group</param>
        /// <returns type="Erp.BO.APInvGetRecInvSourceDataSet"></returns>        
        public APInvGetRecInvSourceTableset GetRecurInvoiceSourceSearch(string ipSuppList, string ipCycleCodesList, DateTime ipGrpDate)
        {
            APInvGetRecInvSourceTableset ds = new APInvGetRecInvSourceTableset();

            foreach (var item in SelectAPInvHedRecurring(Session.CompanyID, ipCycleCodesList))
            {
                if ((string.IsNullOrEmpty(ipSuppList) || ErpEFFunctions.ListLookup(Compatibility.Convert.ToString(item.APInvHed.VendorNum), ipSuppList, Ice.Constants.LIST_DELIM) > -1))
                {
                    if (item.APInvHed.InvoiceDate <= ipGrpDate)
                    {
                        ttAPInvGetRecInvSource = new APInvGetRecInvSourceRow();
                        BufferCopy.Copy(item.APInvHed, ttAPInvGetRecInvSource);
                        ttAPInvGetRecInvSource.SupplierName = !string.IsNullOrEmpty(item.SupplierName) ? item.SupplierName : string.Empty;
                        ds.APInvGetRecInvSource.Add(ttAPInvGetRecInvSource);
                    }
                }
            }

            return ds;
        }

        /// <summary>
        /// Get list of DMR Debit Memos.
        /// </summary>
        /// <param name="ipSuppList">List of suppliers.</param>
        /// <returns></returns>
        public APInvGetDMRDMSourceTableset GetDMRDMSourceSearch(string ipSuppList)
        {
            APInvGetDMRDMSourceTableset ds = new APInvGetDMRDMSourceTableset();

            string[] ipSuppArray = ipSuppList.Split(new string[] { Ice.Constants.LIST_DELIM }, StringSplitOptions.RemoveEmptyEntries);
            foreach (var item in SelectDMRDMQuery(Session.CompanyID, ipSuppArray != null ? ipSuppArray.ToList() : new List<string>(), "D", 0))
            {
                ttAPInvGetDMRDMSource = new APInvGetDMRDMSourceRow();
                ttAPInvGetDMRDMSource.VendorNum = item.VendorNum;
                ttAPInvGetDMRDMSource.DMRNum = item.DMRNum;
                ttAPInvGetDMRDMSource.PartNum = item.PartNum;
                ttAPInvGetDMRDMSource.ExtAmount = item.OurUnitCost * item.VendorQty;
                ttAPInvGetDMRDMSource.CurrencyCode = item.CurrencyCode;
                ttAPInvGetDMRDMSource.Quantity = item.Quantity;
                ttAPInvGetDMRDMSource.IUM = item.IUM;
                ttAPInvGetDMRDMSource.OurUnitCost = item.OurUnitCost;
                ttAPInvGetDMRDMSource.VendorQty = item.VendorQty;
                ttAPInvGetDMRDMSource.CostPerCode = item.CostPerCode;
                ttAPInvGetDMRDMSource.RevisionNum = item.RevisionNum;
                ttAPInvGetDMRDMSource.PONum = item.PONum;
                ttAPInvGetDMRDMSource.ReceiptDate = item.ReceiptDate;
                ttAPInvGetDMRDMSource.VendorName = item.VendorName;
                ttAPInvGetDMRDMSource.ActionNum = item.ActionNum;
                ttAPInvGetDMRDMSource.SysRowID = item.SysRowID;

                ds.APInvGetDMRDMSource.Add(ttAPInvGetDMRDMSource);
            }

            return ds;
        }

        /// <summary>
        /// Get List of Not Invoicing Receipts
        /// </summary>
        /// <param name="ipSuppList">Vendors</param>
        /// <param name="invoiceDate">Invoice Date</param>
        /// <param name="alternateMessage">Alternate Message</param>
        /// <returns></returns>
        public APInvGetNotInvRecSourceTableset GetNotInvRecSourceSearch(string ipSuppList, DateTime invoiceDate, out bool alternateMessage)
        {
            APInvGetNotInvRecSourceTableset ds = new APInvGetNotInvRecSourceTableset();

            decimal mtlUnitCost = decimal.Zero;
            alternateMessage = true;
            decimal outSumIninvLineAmt = 0;
            decimal outDifferenceAmt = 0;
            double outDifferenceDays = 0;

            foreach (var item in SelectRcvNotInv(Session.CompanyID))
            {
                if ((string.IsNullOrEmpty(ipSuppList) || ErpEFFunctions.ListLookup(Compatibility.Convert.ToString(item.VendorNum), ipSuppList, Ice.Constants.LIST_DELIM) > -1))
                {
                    calcGRNIvalues(invoiceDate, item.ReceiptDate, item.SupplierUnInvcReceiptQty, item.VendorUnitCost, item.VendorNum, item.PONum, item.PartNum, item.VendorQty, item.Invoiced, out outDifferenceAmt, out outSumIninvLineAmt, out outDifferenceDays);

                    if (outDifferenceAmt <= apSystPartial.PercentageTolerance && outSumIninvLineAmt <= apSystPartial.ToleranceAmt && outDifferenceDays >= apSystPartial.DaysOutstanding)
                    {
                        if (item.Invoiced && alternateMessage)
                        {
                            alternateMessage = this.ExistsAPInvHedPosted(Session.CompanyID, item.VendorNum, item.PONum, item.PackSlip, item.PackLine, item.PartNum);
                        }

                        string POCurrencyCode = this.FindFirstPOHeaderCurrencyCode(Session.CompanyID, item.PONum, item.VendorNum);

                        mtlUnitCost = item.VendorUnitCost * item.VendorQty;

                        ttAPInvGetNotInvRecSource = new APInvGetNotInvRecSourceRow();
                        ttAPInvGetNotInvRecSource.CurrencyCode = POCurrencyCode;
                        ttAPInvGetNotInvRecSource.DSNum = item.DSNum;
                        ttAPInvGetNotInvRecSource.DSPackSlip = item.DSPackSlip;
                        ttAPInvGetNotInvRecSource.FailedQty = item.FailedQty;
                        ttAPInvGetNotInvRecSource.IUM = item.IUM;
                        ttAPInvGetNotInvRecSource.PackSlip = item.PackSlip;
                        ttAPInvGetNotInvRecSource.PartNum = item.PartNum;
                        ttAPInvGetNotInvRecSource.PassedQty = item.PassedQty;
                        ttAPInvGetNotInvRecSource.POLine = item.POLine;
                        ttAPInvGetNotInvRecSource.PONum = item.PONum;
                        ttAPInvGetNotInvRecSource.VendorQty = item.VendorQty;
                        ttAPInvGetNotInvRecSource.VendorUnitCost = item.VendorUnitCost;
                        ttAPInvGetNotInvRecSource.DocLineAmount = LibRoundAmountEF.RoundDecimalsTT((mtlUnitCost / costFactor(item.CostPerCode)), ttAPInvGetNotInvRecSource, "DocLineAmount");
                        ttAPInvGetNotInvRecSource.PartDescription = item.PartDescription;
                        ttAPInvGetNotInvRecSource.SysRowID = item.SysRowID;
                        ttAPInvGetNotInvRecSource.VendorNum = item.VendorNum;
                        ds.APInvGetNotInvRecSource.Add(ttAPInvGetNotInvRecSource);
                    }

                }
            }

            return ds;
        }

        /// <summary>
        /// Return Get Not Invoiced Receipts screen values
        /// </summary>
        /// <returns></returns>
        public APInvGetNotInvRecSourceTableset GetNotInvRecFilterSearch()
        {
            APInvGetNotInvRecSourceTableset ds = new APInvGetNotInvRecSourceTableset();

            ttAPInvGetNotInvRecFilter = new APInvGetNotInvRecFilterRow();
            ttAPInvGetNotInvRecFilter.DaysOutstanding = apSystPartial.DaysOutstanding;
            ttAPInvGetNotInvRecFilter.PcntTolerance = apSystPartial.PercentageTolerance;
            ttAPInvGetNotInvRecFilter.AmountTolerance = apSystPartial.ToleranceAmt;
            ttAPInvGetNotInvRecFilter.InvoiceDate = CompanyTime.Now();
            ttAPInvGetNotInvRecFilter.SupplierLabel = Strings.AllSelected;
            ttAPInvGetNotInvRecFilter.RowMod = "A";
            string tranDocType = string.Empty;
            LibLegalNumDocLib.GetDfltDocTypeLN("ManualGRNI", out tranDocType);
            ttAPInvGetNotInvRecFilter.TranDocTypeID = tranDocType;
            ds.APInvGetNotInvRecFilter.Add(ttAPInvGetNotInvRecFilter);

            return ds;
        }

        /// <summary>
        /// Method to validate if Mass Creation of GRNI documents Invoice can be created in the current group
        /// </summary>
        /// <param name="groupID"></param>
        public void ValidateGNRIClearingCreation(string groupID)
        {
            APInvHedTypePartialRow CurrentInvoices = FindGroupInvoiceTypeQuery(Session.CompanyID, groupID);
            if (CurrentInvoices != null)
            {
                if (!CurrentInvoices.GRNIClearing)
                {
                    throw new BLException(Strings.UnableToCreateGRNIClearing, "APInvGrp");
                }
            }

        }

        /// <summary>
        /// Return Get DMR Debit Memo Screen Values
        /// </summary>
        /// <returns></returns>
        public APInvGetDMRDMSourceTableset GetDMRDMFilterSearch()
        {
            APInvGetDMRDMSourceTableset ds = new APInvGetDMRDMSourceTableset();

            ttAPInvGetDMRDMFilter = new APInvGetDMRDMFilterRow();
            ttAPInvGetDMRDMFilter.SupplierLabel = Strings.AllSelected;
            ttAPInvGetDMRDMFilter.RowMod = "A";

            ds.APInvGetDMRDMFilter.Add(ttAPInvGetDMRDMFilter);

            return ds;
        }

        /// <summary>
        /// Creates a correction invoice from a another invoice.
        /// </summary>
        /// <param name="groupID">Current group for new invoice</param>
        /// <param name="sourceInvoiceNum">Invoice num which should be corrected</param>
        /// <param name="sourceVendorNum">Invoice vendor num</param>
        /// <param name="newInvoiceNum">Invoice num provided by user</param>
        /// <param name="newInvoiceDate">Date of new invoice</param>
        /// <param name="newDocType">Document Type for the new invoice</param>
        /// <param name="grpTotalInvAmt">return new TotalInvAmt to update APInvGrp in UI</param>
        /// <param name="lEnableGenLegalNum">flag for UI to determine whether Generate Legal Numbers option is available</param>
        /// <param name="ds">APInvoice data set</param>        
        public void CreateCorrectionInvoice(string groupID, string sourceInvoiceNum, int sourceVendorNum, string newInvoiceNum, DateTime? newInvoiceDate, string newDocType, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum, APInvoiceTableset ds)
        {
            createInvoice(TypeOfCreation.Correction, groupID, sourceInvoiceNum, sourceVendorNum, newInvoiceNum, newInvoiceDate, newDocType, out grpTotalInvAmt, out lEnableGenLegalNum, ds);
        }

        /// <summary>
        /// Creates a cancellation invoice from a another invoice.
        /// </summary>        
        /// <param name="groupID">Current group for new invoice</param>
        /// <param name="sourceInvoiceNum">Invoice num which should be cancel</param>
        /// <param name="sourceVendorNum">Invoice vendor num</param>
        /// <param name="newInvoiceNum">Invoice num provided by user</param>
        /// <param name="newInvoiceDate">Date of new invoice</param>
        /// <param name="newDocType">Document Type for the new invoice</param>
        /// <param name="grpTotalInvAmt">return new TotalInvAmt to update APInvGrp in UI</param>
        /// <param name="lEnableGenLegalNum">flag for UI to determine whether Generate Legal Numbers option is available</param>
        /// <param name="ds">APInvoice data set</param>
        public void CreateCancellationInvoice(string groupID, string sourceInvoiceNum, int sourceVendorNum, string newInvoiceNum,
            DateTime? newInvoiceDate, string newDocType, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum, APInvoiceTableset ds)
        {
            createInvoice(TypeOfCreation.Cancellation, groupID, sourceInvoiceNum, sourceVendorNum, newInvoiceNum, newInvoiceDate, newDocType, out grpTotalInvAmt, out lEnableGenLegalNum, ds);
        }

        /// <summary>
        /// Creates a cancellation or correction invoice from a another invoice.
        /// </summary>        
        /// <param name="typeOfCreation">options : Correction, Cancellation</param>
        /// <param name="groupID">Current group for new invoice</param>
        /// <param name="sourceInvoiceNum">Invoice num which should be cancel</param>
        /// <param name="sourceVendorNum">Invoice vendor num</param>
        /// <param name="newInvoiceNum">Invoice num provided by user</param>
        /// <param name="newInvoiceDate">Date of new invoice</param>
        /// <param name="newDocType">Document Type for the new invoice</param>
        /// <param name="grpTotalInvAmt">return new TotalInvAmt to update APInvGrp in UI</param>
        /// <param name="lEnableGenLegalNum">flag for UI to determine whether Generate Legal Numbers option is available</param>
        /// <param name="ds">APInvoice data set</param>
        private void createInvoice(TypeOfCreation typeOfCreation, string groupID, string sourceInvoiceNum, int sourceVendorNum, string newInvoiceNum,
            DateTime? newInvoiceDate, string newDocType, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum, APInvoiceTableset ds)
        {
            validateTypeOfCreation(typeOfCreation);

            isNewCorrectionCancellationInvoice = true;
            grpTotalInvAmt = decimal.Zero;
            lEnableGenLegalNum = false;
            APInvHed bAPInvHed = null;

            #region Validations that apply to both Corrections and Cancellations
            string errorMsg = string.Empty;
            string action = string.Empty;

            if (typeOfCreation == TypeOfCreation.Correction)
            {
                errorMsg = Strings.Correction;
                action = "correct";
            }
            else
            {
                errorMsg = Strings.Cancellation;
                action = "cancel";
            }

            if (String.IsNullOrEmpty(newInvoiceNum) || (newInvoiceNum.KeyEquals(sourceInvoiceNum)))
            {
                throw new BLException(Strings.InvalidNewInvoiceNumber(errorMsg), "APInvHed", "InvoiceNum");
            }

            bAPInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, sourceVendorNum, newInvoiceNum);
            if (bAPInvHed != null)
            {
                throw new BLException(Strings.InvoiceAlreadyExists, "APInvHed", "InvoiceNum");
            }

            bAPInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, sourceVendorNum, sourceInvoiceNum);
            if (bAPInvHed == null)
            {
                throw new BLException(Strings.InvoiceNumberWasNotFound, "APInvHed", "InvoiceNum");
            }

            if (bAPInvHed.StartUp || !bAPInvHed.Posted)
            {
                throw new BLException(Strings.InvalidInvoiceNumberSpecified, "APInvHed", "InvoiceNum");
            }

            var AltAPInvHedQuery5 = DBExpressionCompiler.Compile(AltAPInvHedExpression5);
            Erp.Tables.APInvHed altAPInvHed = AltAPInvHedQuery5(Db, Session.CompanyID, sourceInvoiceNum, sourceVendorNum);
            if (altAPInvHed != null)
            {
                throw new BLException(Strings.InvoiceHasAlreadyBeenCorreByInvoice(altAPInvHed.InvoiceNum), "APInvHed", "InvoiceNum");
            }

            if (this.ExistsNettingDtl(Session.CompanyID, sourceVendorNum, sourceInvoiceNum))
                throw new BLException(Strings.InvoiceUsedInNetting(sourceInvoiceNum), "ApInvHed", "InvoiceNum");

            foreach (var bAPInvDtl_iterator in (SelectAPInvoiceDtl(Session.CompanyID, sourceInvoiceNum, sourceVendorNum, "R", false)))
            {
                if (ExistFinalInvoice(bAPInvDtl_iterator.Company, bAPInvDtl_iterator.InvoiceNum, bAPInvDtl_iterator.PONum, bAPInvDtl_iterator.POLine, bAPInvDtl_iterator.PORelNum, bAPInvDtl_iterator.PackSlip, bAPInvDtl_iterator.PackLine, false, string.Empty, true))
                {
                    throw new BLException(Strings.FinalInvoiceExists(action), "APInvHed", "InvoiceNum");
                }
            }
            #endregion  Validations that apply to both Corrections and Cancellations


            if (typeOfCreation == TypeOfCreation.Correction && bAPInvHed.CancellationInv)
            {
                throw new BLException(Strings.UnableToCorrectCancellationInvoices, "APInvHed", "InvoiceNum");
            }

            if (typeOfCreation == TypeOfCreation.Cancellation)
            {
                if (bAPInvHed.CorrectionInv)
                {
                    throw new BLException(Strings.UnableToCancelCorrectionInvoices, "APInvHed", "InvoiceNum");
                }

                if (ExistsAPInvDtlDEASch(Session.CompanyID, bAPInvHed.VendorNum, bAPInvHed.InvoiceNum, true))
                {
                    throw new BLException(Strings.InvcWithPostedAmortization, "APInvDtlDEASch", "posted");
                }

                if (!(String.IsNullOrEmpty(bAPInvHed.RefCancelledby)))
                {
                    throw new BLException(Strings.InvoiceHasAlreadyBeenCancelByInvoice(bAPInvHed.RefCancelledby));
                }

                if (bAPInvHed.CancellationInv)
                {
                    throw new BLException(Strings.IsCancellationInvoice, "APInvHed", "InvoiceNum");
                }

                if (bAPInvHed.DebitMemo)
                {
                    throw new BLException(Strings.HasDebitMemos, "APInvHed", "InvoiceNum");
                }

                if (bAPInvHed.PrePayment)
                {
                    throw new BLException(Strings.CantCancelPrepayments, "APInvHed", "InvoiceNum");
                }

                if (bAPInvHed.DocInvoiceBal != bAPInvHed.DocUnpostedBal)
                {
                    throw new BLException(Strings.UnpostedPayments, "APInvHed", "InvoiceNum");
                }

                if (ExistsAPTranNotVoided(Session.CompanyID, bAPInvHed.InvoiceNum, bAPInvHed.VendorNum))
                    throw new BLException(Strings.PostedPaymentExists, "APInvHed", "InvoiceNum");

                if (bAPInvHed.DocPrePaymentAmt != 0)
                {
                    throw new BLException(Strings.TheInvoiceHasPrepayments, "APInvHed", "InvoiceNum");
                }

                if (ExistsInvDtlLine(Session.CompanyID, bAPInvHed.InvoiceNum, "R", "M"))
                {
                    throw new BLException(Strings.LineNotSupported, "APInvHed", "InvoiceNum");
                }

                if (this.ExistsAPInvMsc(bAPInvHed.Company, bAPInvHed.VendorNum, bAPInvHed.InvoiceNum, 0, true))
                {
                    throw new BLException(Strings.LateCostExist, "APInvHed", "InvoiceNum");
                }

            }

            string cDocType = (bAPInvHed.DebitMemo || typeOfCreation == TypeOfCreation.Cancellation) ? "DebitMemo" : "APInvoice";

            getLNSettings(typeOfCreation, newDocType, cDocType, bAPInvHed, ref ds);

            copyInvoiceHeader(typeOfCreation, groupID, newInvoiceNum, newInvoiceDate, newDocType, bAPInvHed, out bool calcTaxes);

            /* Copy invoice header GL Controls*/
            copyIHGLC(sourceInvoiceNum, newInvoiceNum, sourceVendorNum);

            if (typeOfCreation == TypeOfCreation.Correction)
            {
                /*NOTE: The order in which the following records are created is important, we first create the original records from the source invoice
                        if the source invoice is not a correction invoice itself, we do these first so we can keep the relations between the original records
                        and the APInvExp records by maintaining the same InvExpSeq column values. We want this because these records can be modified by the user
                        and also deleted in which case the APInvExp records should be synchronized. After this we create the reverse amount records which will be
                        read only to the UI so it does not matter if the APInvExp records maintain their relations.*/
                /*Copy all of the original records of the invoice if we are not copying from a correction invoice*/
                /*for Russia CSF correcting a Correction Invoice is a Revision so positive lines also added*/
                /* Copy invoice original values */
                copyInvoiceMisc(sourceInvoiceNum, newInvoiceNum, sourceVendorNum, 0, 0, false);
                copyInvoiceLines(typeOfCreation, bAPInvHed.GroupID, groupID, sourceInvoiceNum, newInvoiceNum, sourceVendorNum, false);

                /* Copy invoice reverse values */
                copyInvoiceMisc(sourceInvoiceNum, newInvoiceNum, sourceVendorNum, 0, 0, true);
                copyInvoiceLines(typeOfCreation, bAPInvHed.GroupID, groupID, sourceInvoiceNum, newInvoiceNum, sourceVendorNum, true);
            }

            if (typeOfCreation == TypeOfCreation.Cancellation)
            {
                copyInvoiceMisc(sourceInvoiceNum, newInvoiceNum, sourceVendorNum, 0, 0, true);
                copyInvoiceLines(typeOfCreation, bAPInvHed.GroupID, groupID, sourceInvoiceNum, newInvoiceNum, sourceVendorNum, true);
            }

            copyInvoiceTaxes(typeOfCreation, calcTaxes, newInvoiceNum, bAPInvHed);

            if (typeOfCreation == TypeOfCreation.Cancellation)
            {
                using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
                {
                    APInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, sourceVendorNum, sourceInvoiceNum);
                    if (APInvHed != null)
                    {
                        APInvHed.RefCancelledby = newInvoiceNum;
                    }
                    Db.Validate();
                    trans.Complete();
                }
            }

            updateAPInvGrpFields(groupID, out grpTotalInvAmt, out lEnableGenLegalNum);
            isNewCorrectionCancellationInvoice = false;
        }


        private void validateTypeOfCreation(TypeOfCreation typeOfCreation)
        {
            if (typeOfCreation != TypeOfCreation.Correction && typeOfCreation != TypeOfCreation.Cancellation)
            {
                throw new BLException(Strings.typeOfCreation);
            }
        }

        /// <summary>
        /// Copy invoice ExchangeRate for correction  or cancellation invoice 
        /// </summary>
        /// <param name="sourceAPInvHed">APInvHed row from which we are copying the information</param>        
        private void copyExchangeRate(APInvHed sourceAPInvHed)
        {
            APInvoiceTableset ds = CurrentFullTableset;

            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.RecordNotFound, "APInvHed", "RowMod");
            }

            apSystPartial = FindPartialAPSyst(Session.CompanyID);
            if (apSystPartial != null)
            {
                CopyExcRate = (ttAPInvHed.CorrectionInv) ? apSystPartial.CopyExcRateCorrInv : apSystPartial.CopyExcRateCancelInv;
                if (CopyExcRate)
                {
                    using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
                    {
                        foreach (var CurrExChain_iterator in SelectCurrExChainWithUpdLock(Session.CompanyID, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum)))
                        {
                            CurrExChain = CurrExChain_iterator;
                            Db.CurrExChain.Delete(CurrExChain);
                        }
                        this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(sourceAPInvHed.VendorNum), Compatibility.Convert.ToString(sourceAPInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);


                        foreach (var libconvertamtefttChainRow in (from ttChain_Row in ttChainRows
                                                                   select ttChain_Row))
                        {
                            var ttChainRow = libconvertamtefttChainRow;
                            CurrExChain = new Erp.Tables.CurrExChain();
                            Db.CurrExChain.Insert(CurrExChain);
                            BufferCopy.CopyExceptFor(ttChainRow, CurrExChain, CurrExChain.ColumnNames.TableName, CurrExChain.ColumnNames.Key1, CurrExChain.ColumnNames.Key2, CurrExChain.ColumnNames.Key3, CurrExChain.ColumnNames.Key4, CurrExChain.ColumnNames.SysRowID, CurrExChain.ColumnNames.SysRevID);
                            CurrExChain.TableName = "APInvHed";
                            CurrExChain.Key1 = Compatibility.Convert.ToString(ttAPInvHed.VendorNum);
                            CurrExChain.Key2 = Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);
                            Db.Validate(CurrExChain);
                        }
                        trans.Complete();
                    }

                    ttAPInvHed.CurrencyCode = sourceAPInvHed.CurrencyCode;
                    ttAPInvHed.RateGrpCode = sourceAPInvHed.RateGrpCode;
                    ttAPInvHed.ExchangeRate = sourceAPInvHed.ExchangeRate;
                    APInvHed_Foreign_Link();
                }
                else
                {
                    XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
                    if (XbSyst != null)
                    {
                        ttAPInvHed.RateGrpCode = XbSyst.PORateGrp;
                    }

                    if (vUseDate == 1)
                    {
                        vExDate = ttAPInvHed.InvoiceDate;
                    }
                    else
                    {
                        vExDate = ttAPInvHed.ApplyDate;
                    }
                    using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
                    {
                        foreach (var CurrExChain_iterator in SelectCurrExChainWithUpdLock(Session.CompanyID, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum)))
                        {
                            CurrExChain = CurrExChain_iterator;
                            Db.CurrExChain.Delete(CurrExChain);
                        }

                        this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);


                        foreach (var libconvertamtefttChainRow in (from ttChain_Row in ttChainRows
                                                                   select ttChain_Row))
                        {
                            var ttChainRow = libconvertamtefttChainRow;
                            CurrExChain = new Erp.Tables.CurrExChain();
                            Db.CurrExChain.Insert(CurrExChain);
                            BufferCopy.CopyExceptFor(ttChainRow, CurrExChain, CurrExChain.ColumnNames.SysRowID, CurrExChain.ColumnNames.SysRevID);
                            CurrExChain.TableName = "APInvHed";
                            CurrExChain.Key1 = Compatibility.Convert.ToString(ttAPInvHed.VendorNum);
                            CurrExChain.Key2 = Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);
                            Db.Validate(CurrExChain);
                        }
                        trans.Complete();
                    }

                    if (!(ttAPInvHed.CancellationInv && ttAPInvHed.LockRate))
                        ttAPInvHed.ExchangeRate = Compatibility.Convert.ToDecimal(pRateList.Entry(0, Ice.Constants.LIST_DELIM));
                }
            }
            else
            {
                throw new BLException(Strings.ModuleConfiAPSystemControlIsMissing, "APInvHed");
            }
        }

        /// <summary>
        /// Copy Invoice Taxes for correction  or cancellation invoice 
        /// </summary>
        /// <param name="typeOfCreation">options : Correction, Cancellation</param>
        /// <param name="calcTaxes">Flag used to decide if recalculate now or leave for the UI to decide.</param>
        /// <param name="newInvoiceNum">Invoice num provided by user</param>
        /// <param name="sourceAPInvHed">APInvHed row from which we are copying the information</param>        
        private void copyInvoiceTaxes(TypeOfCreation typeOfCreation, bool calcTaxes, string newInvoiceNum, APInvHed sourceAPInvHed)
        {
            validateTypeOfCreation(typeOfCreation);

            APInvoiceTableset ds = CurrentFullTableset;

            if (calcTaxes)
            {
                ErpCallContext.SetDisposableKey("CreateCorrectionInvoice");
                using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
                {
                    APInvHed newAPInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, sourceAPInvHed.VendorNum, newInvoiceNum);
                    if (newAPInvHed != null)
                    {
                        newAPInvHed.ReadyToCalc = true;
                        SetReadyToCalc("", newInvoiceNum, sourceAPInvHed.VendorNum, false, false, ref ds);
                        CurrentFullTableset = ds;
                        newAPInvHed.ReadyToCalc = sourceAPInvHed.ReadyToCalc;
                    } // NewAPInvhed

                    Db.Validate(newAPInvHed);

                    //Create expenses for Non recoverable taxes
                    if (ExistsXbSystLineTax(Session.CompanyID, true))
                    {
                        foreach (APInvDtl apInvDtl in SelectAPInvDtl(Session.CompanyID, sourceAPInvHed.VendorNum, newInvoiceNum))
                        {
                            GenerateNonDedExpForDtls(apInvDtl.SysRowID, apInvDtl.VendorNum, apInvDtl.InvoiceNum, apInvDtl.InvoiceLine);
                        }
                    }
                    trans.Complete();
                } // end transaction scope               
            } //ReadytoCalc
            else
            {
                using (TransactionScope txScope = ErpContext.CreateDefaultTransactionScope())
                {
                    CopyInvoiceTax(typeOfCreation, sourceAPInvHed.VendorNum, sourceAPInvHed.InvoiceNum, newInvoiceNum);
                    CopyInvoiceMiscTax(typeOfCreation, sourceAPInvHed.VendorNum, sourceAPInvHed.InvoiceNum, newInvoiceNum);
                    if (ExistsXbSystLineTax(Session.CompanyID, true))
                    {
                        foreach (APInvDtl apInvDtl in SelectAPInvDtl(Session.CompanyID, sourceAPInvHed.VendorNum, newInvoiceNum))
                        {
                            GenerateNonDedExpForDtls(apInvDtl.SysRowID, apInvDtl.VendorNum, apInvDtl.InvoiceNum, apInvDtl.InvoiceLine);
                        }
                    }
                    APInvHed newAPInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, sourceAPInvHed.VendorNum, newInvoiceNum);
                    if (newAPInvHed != null)
                    {
                        newAPInvHed.ReadyToCalc = sourceAPInvHed.ReadyToCalc;
                    }
                    Db.Validate();
                    txScope.Complete();
                }
            }
        }

        /// <summary>
        /// Gets the Invoice Legal Number settings for the correction or cancellation invoice.
        /// </summary>
        /// <param name="typeOfCreation">options : Correction, Cancellation</param>
        /// <param name="DocType">Document type to validate</param>
        /// <param name="sysTranTypeID">Type of transaction to validate for the document type </param>
        /// <param name="sourceAPInvHed"></param>
        /// <param name="ds">APInvoice data set</param>
        private void getLNSettings(TypeOfCreation typeOfCreation, string DocType, string sysTranTypeID, APInvHed sourceAPInvHed, ref APInvoiceTableset ds)
        {
            validateTypeOfCreation(typeOfCreation);

            LibValidateTranDocType.RunValidateTranDocType(DocType, sysTranTypeID);

            if (!string.IsNullOrEmpty(DocType))
            {
                APInvHedRow tmpAPInvHedRow = new APInvHedRow();
                BufferCopy.Copy(sourceAPInvHed, tmpAPInvHedRow);
                tmpAPInvHedRow.TranDocTypeID = DocType;

                if (typeOfCreation == TypeOfCreation.Cancellation)
                {
                    tmpAPInvHedRow.DebitMemo = true;
                }

                CurrentFullTableset = ds;
                if (GetLegalNumberDfltsCommon(tmpAPInvHedRow))
                {
                    CurrentFullTableset.LegalNumGenOpts.Clear();
                }

                ds = CurrentFullTableset;
            }
        }

        /// <summary>
        /// Copy invoice Header for correction or cancellation invoice			
        /// </summary>                
        /// <param name="typeOfCreation">options : Correction, Cancellation</param>
        /// <param name="groupID">Current group for new invoice</param>
        /// <param name="newInvoiceNum">Invoice num provided by user</param>
        /// <param name="newInvoiceDate">Date of new invoice</param>
        /// <param name="newDocType">Document Type for the new invoice</param>
        /// <param name="sourceAPInvHed">APInvHed row from which we are copying the information</param>        
        /// <param name="calcTaxes">Flag used to decide if recalculate now or leave for the UI to decide.</param>
        private void copyInvoiceHeader(TypeOfCreation typeOfCreation, string groupID, string newInvoiceNum, DateTime? newInvoiceDate, string newDocType,
            Erp.Tables.APInvHed sourceAPInvHed, out bool calcTaxes)
        {
            validateTypeOfCreation(typeOfCreation);

            APInvoiceTableset ds = CurrentFullTableset;

            calcTaxes = false;

            if (typeOfCreation == TypeOfCreation.Correction)
            {
                GetNewAPInvHedInvoice(ref ds, groupID);
                ttAPInvHed.CorrectionInv = true;
            }
            else if (typeOfCreation == TypeOfCreation.Cancellation)
            {
                GetNewAPInvHedDebitMemo(ref ds, groupID);
                ttAPInvHed.CancellationInv = true;
            }

            /* Copy information from original invoice to new cancellation invoice */
            string[] excludedColumns = new string[] {
                APInvHed.ColumnNames.ApplyDate, APInvHed.ColumnNames.InvoiceNum, APInvHed.ColumnNames.InvoiceComment, APInvHed.ColumnNames.Posted, APInvHed.ColumnNames.DebitMemo,
                APInvHed.ColumnNames.LegalNumber, APInvHed.ColumnNames.RecurSource, APInvHed.ColumnNames.IsRecurring, APInvHed.ColumnNames.IsMaxValue,APInvHed.ColumnNames.CancellationInv,
                APInvHed.ColumnNames.HoldInvoice, APInvHed.ColumnNames.CopyLatestInvoice, APInvHed.ColumnNames.OverrideEndDate, APInvHed.ColumnNames.InstanceNum,APInvHed.ColumnNames.CorrectionInv,
                APInvHed.ColumnNames.OpenPayable, APInvHed.ColumnNames.CycleCode, APInvHed.ColumnNames.CycleInactive, APInvHed.ColumnNames.Duration,
                APInvHed.ColumnNames.InvoiceAmt, APInvHed.ColumnNames.DocInvoiceAmt, APInvHed.ColumnNames.Rpt1InvoiceAmt, APInvHed.ColumnNames.Rpt2InvoiceAmt, APInvHed.ColumnNames.Rpt3InvoiceAmt,
                APInvHed.ColumnNames.InvoiceBal, APInvHed.ColumnNames.DocInvoiceBal, APInvHed.ColumnNames.Rpt1InvoiceBal, APInvHed.ColumnNames.Rpt2InvoiceBal, APInvHed.ColumnNames.Rpt3InvoiceBal,
                APInvHed.ColumnNames.UnpostedBal, APInvHed.ColumnNames.DocUnpostedBal, APInvHed.ColumnNames.Rpt1UnpostedBal, APInvHed.ColumnNames.Rpt2UnpostedBal, APInvHed.ColumnNames.Rpt3UnpostedBal,
                APInvHed.ColumnNames.RecurBalance, APInvHed.ColumnNames.DocRecurBalance, APInvHed.ColumnNames.Rpt1RecurBalance, APInvHed.ColumnNames.Rpt2RecurBalance, APInvHed.ColumnNames.Rpt3RecurBalance,
                APInvHed.ColumnNames.MaxValueAmt, APInvHed.ColumnNames.DocMaxValueAmt, APInvHed.ColumnNames.Rpt1MaxValueAmt, APInvHed.ColumnNames.Rpt2MaxValueAmt, APInvHed.ColumnNames.Rpt3MaxValueAmt,
                APInvHed.ColumnNames.PrePaymentNum, APInvHed.ColumnNames.PrePaymentAmt, APInvHed.ColumnNames.DocPrePaymentAmt, APInvHed.ColumnNames.Rpt1PrePaymentAmt, APInvHed.ColumnNames.Rpt2PrePaymentAmt, APInvHed.ColumnNames.Rpt3PrePaymentAmt,
                APInvHed.ColumnNames.DiscountAmt, APInvHed.ColumnNames.DocDiscountAmt, APInvHed.ColumnNames.Rpt1DiscountAmt, APInvHed.ColumnNames.Rpt2DiscountAmt, APInvHed.ColumnNames.Rpt3DiscountAmt,
                APInvHed.ColumnNames.WithholdAmt, APInvHed.ColumnNames.DocWithholdAmt, APInvHed.ColumnNames.Rpt1WithholdAmt, APInvHed.ColumnNames.Rpt2WithholdAmt, APInvHed.ColumnNames.Rpt3WithholdAmt,
                APInvHed.ColumnNames.InvoiceVendorAmt, APInvHed.ColumnNames.DocInvoiceVendorAmt, APInvHed.ColumnNames.Rpt1InvoiceVendorAmt, APInvHed.ColumnNames.Rpt2InvoiceVendorAmt, APInvHed.ColumnNames.Rpt3InvoiceVendorAmt, APInvHed.ColumnNames.FiscalPeriod};

            // SCR 138713 - Update copy with additional  cancellation invoice fields to clear. 
            apSystPartial = FindPartialAPSyst(Session.CompanyID);
            if (apSystPartial != null && apSystPartial.DatesSetUp)
            {
                excludedColumns = excludedColumns.Append(APInvHed.ColumnNames.TaxPoint).ToArray();
                excludedColumns = excludedColumns.Append(APInvHed.ColumnNames.TaxRateDate).ToArray();
            }

            BufferCopy.CopyExceptFor(sourceAPInvHed, ttAPInvHed, excludedColumns);

            ttAPInvHed.GroupID = groupID;
            ttAPInvHed.InvoiceNum = newInvoiceNum;
            ttAPInvHed.TranDocTypeID = newDocType;
            ttAPInvHed.TaxAmt = 0;
            ttAPInvHed.DocTaxAmt = 0;
            ttAPInvHed.Rpt1TaxAmt = 0;
            ttAPInvHed.Rpt2TaxAmt = 0;
            ttAPInvHed.Rpt3TaxAmt = 0;
            ttAPInvHed.ReadyToCalc = false;

            if (isPolandLocalization)
            {
                ttAPInvHed.PLInvoiceReference = newInvoiceNum;
            }

            if (newInvoiceDate == null)
            {
                ttAPInvHed.InvoiceDate = null;
            }
            else
            {
                ttAPInvHed.InvoiceDate = (DateTime)newInvoiceDate;
            }

            // SCR 96807 - Using XBSyst.UseTaxRate to assign Tax Rate Date and Tax Point in E9 was incorrect and has been removed.
            LibSetDefaultInvoiceDates.RunSetDefaultInvoiceDates(ttAPInvHed, "AP", APInvGrp.ApplyDate, true);

            // Taxes

            if (isVNLocalization)
            {
                PurTerms ttTerms = FindFirstPurTerms(ttAPInvHed.Company, ttAPInvHed.TermsCode);
                if (ttTerms != null && ttTerms.TermsType.KeyEquals("L"))
                {
                    DateTime? outDueDate = ttAPInvHed.InvoiceDate;
                    LibCalcInvDueDate.CalcDueDate("D", ttTerms.NumberOfDays, ttTerms.MinimumDays, ttTerms.DueOnDay, ttTerms.NumberOfMonths, ref outDueDate);
                    if (outDueDate != null)
                    {
                        ttAPInvHed.DueDate = outDueDate;
                    }
                }
            }

            if (isTaiwanLocalization
                && ttAPInvHed.CancellationInv
                && !string.IsNullOrEmpty(sourceAPInvHed.LegalNumber))
            {
                ttAPInvHed.LegalNumber = sourceAPInvHed.LegalNumber;
            }

            if (ttAPInvHed.CorrectionInv)
            {
                ttAPInvHed.InvoiceRef = sourceAPInvHed.InvoiceNum;
                this.setVendorAndDiscountAmt();
            }

            if (ttAPInvHed.CancellationInv)
            {
                ttAPInvHed.InvoiceVendorAmt = -sourceAPInvHed.InvoiceVendorAmt;
                ttAPInvHed.DocInvoiceVendorAmt = -sourceAPInvHed.DocInvoiceVendorAmt;
                ttAPInvHed.Rpt1InvoiceVendorAmt = -sourceAPInvHed.Rpt1InvoiceVendorAmt;
                ttAPInvHed.Rpt2InvoiceVendorAmt = -sourceAPInvHed.Rpt2InvoiceVendorAmt;
                ttAPInvHed.Rpt3InvoiceVendorAmt = -sourceAPInvHed.Rpt3InvoiceVendorAmt;

                // If the tax Liability is Tax Connect (Avalara), then we recalculate the negative taxes
                // to get the transactions reflected in the Avalara platform.
                // Otherwise we do not recalculate taxes, instead we just copy them with negative value.
                calcTaxes = ExistsTaxRgnAvalara(Session.CompanyID, ttAPInvHed.TaxRegionCode, true, true);
            }

            if (typeOfCreation == TypeOfCreation.Correction)
            {
                if (!string.IsNullOrEmpty(ttAPInvHed.TaxRegionCode))
                {
                    TaxRgn = TaxRgn.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvHed.TaxRegionCode);
                    ttAPInvHed.InPrice = (TaxRgn != null) ? TaxRgn.InPrice : false;

                    if (ttAPInvHed.InPrice)
                    {
                        if (ExistsAPLnTax(ttAPInvHed.Company, ttAPInvHed.VendorNum, sourceAPInvHed.InvoiceNum) == true)
                        {
                            calcTaxes = true;
                            ttAPInvHed.DevLog1 = false;   /* Tax Recalculation flag for include taxes*/
                        }
                    }
                    else
                    {
                        calcTaxes = sourceAPInvHed.ReadyToCalc;
                    }
                }
            }

            copyExchangeRate(sourceAPInvHed);

            ttAPInvHed.InvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.DocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "InvoiceVendorAmt");
            Update(ref ds);
            CurrentFullTableset = ds;
        }

        ///<summary>
        ///  Purpose:     
        ///  Parameters:  none
        ///  Notes:       
        /// <param name="ds">The APInvoice data set</param>
        ///</summary>
        public void CreateJobMtl(ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            Erp.Tables.JobMtl AltJobMtl = null;


            ttAPInvJob = (from ttAPInvJob_Row in ds.APInvJob
                          where !String.IsNullOrEmpty(ttAPInvJob_Row.RowMod)
                          select ttAPInvJob_Row).FirstOrDefault();
            if (ttAPInvJob == null)
            {
                throw new BLException(Strings.RecordNotFound, "APInvJob", "RowMod");
            }

            var AltJobMtlQuery = DBExpressionCompiler.Compile(AltJobMtlExpression);
            AltJobMtl = AltJobMtlQuery(Db, Session.CompanyID, ttAPInvJob.JobNum, 0);

            JobHead = JobHead.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvJob.JobNum);
            if (JobHead == null)
            {
                throw new BLException(Strings.JobNotFound, "JobHead", "JobNum");
            }

            PurMisc = FindFirstPurMisc(Session.CompanyID, ttAPInvJob.MiscCode);
            JobMtl = new Erp.Tables.JobMtl();
            Db.JobMtl.Insert(JobMtl);
            JobMtl.Company = Session.CompanyID;
            JobMtl.JobNum = ttAPInvJob.JobNum;
            JobMtl.AssemblySeq = 0;
            JobMtl.MtlSeq = ((AltJobMtl != null) ? AltJobMtl.MtlSeq + 10 : 10);
            JobMtl.Plant = JobHead.Plant;
            JobMtl.PartNum = ttAPInvJob.MiscCode;
            JobMtl.Description = ((PurMisc != null) ? PurMisc.Description : "");
            JobMtl.MiscCode = ttAPInvJob.MiscCode;
            JobMtl.MiscCharge = true;
            JobMtl.Direct = false;
            JobMtl.BuyIt = false;
            JobMtl.QtyPer = 1;
            JobMtl.RequiredQty = 1;
            JobMtl.IssuedQty = 1;
            JobMtl.FixedQty = true;
            JobMtl.IssuedComplete = true;
            JobMtl.IUM = Session.DefaultUOM;
            Part = this.FindFirstPart(Session.CompanyID, JobMtl.PartNum);
            if (Part != null)
            {
                JobMtl.BaseUOM = Part.IUM;
                JobMtl.ProdCode = Part.ProdCode;
            }
            else
            {
                string JobMtl_BaseUOM;
                LibAppService.DefaultTransUOM("", JobMtl.IUM, out JobMtl_BaseUOM);
                JobMtl.BaseUOM = JobMtl_BaseUOM;
            }
            var outBaseRequiredQty = JobMtl.BaseRequiredQty;
            LibAppService.UOMConv(JobMtl.PartNum, JobMtl.RequiredQty, JobMtl.IUM, JobMtl.BaseUOM, out outBaseRequiredQty, false);
            JobMtl.BaseRequiredQty = outBaseRequiredQty;

            Db.Validate(JobMtl);
            ttAPInvJob.MtlSeq = JobMtl.MtlSeq;
            ttAPInvJob.AddedJobMtlSeq = JobMtl.MtlSeq;
            AssignAPInvJobJobMtlFields();
        }

        private void createttAPInvDtl(int iVendorNum, string cInvoiceNum, string cLineType, int iDMRNum, int iActionNum)
        {
            if (cLineType.Equals("M", StringComparison.OrdinalIgnoreCase) ||
                cLineType.Equals("J", StringComparison.OrdinalIgnoreCase) ||
                cLineType.Equals("S", StringComparison.OrdinalIgnoreCase))
            {
                var vendorPartial_row = FindFirstVendor(Session.CompanyID, iVendorNum);
                if (vendorPartial_row != null && vendorPartial_row.Inactive)
                {
                    if (cLineType.Equals("M", StringComparison.OrdinalIgnoreCase))
                        ExceptionManager.AddBLException(Strings.InactiveSupplierMiscLines(vendorPartial_row.VendorID));
                    else if (cLineType.Equals("J", StringComparison.OrdinalIgnoreCase))
                        ExceptionManager.AddBLException(Strings.InactiveSupplierJobMiscLines(vendorPartial_row.VendorID));
                    else if (cLineType.Equals("S", StringComparison.OrdinalIgnoreCase))
                        ExceptionManager.AddBLException(Strings.InactiveSupplierAssetLines(vendorPartial_row.VendorID));
                    return;
                }
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, iVendorNum, cInvoiceNum);
            if (APInvHed == null)
            {
                ExceptionManager.AddBLException(Strings.InvalidAPInvoice, "APInvHed");
                return;
            }
            if (APInvHed.Posted == true)
            {
                ExceptionManager.AddBLException(Strings.TheInvoiceHasBeenPostedDetailLinesMayNotBeAdded, "APInvHed");
                return;
            }
            /* Can't add an unreceived line to a debit memo */
            if (StringExtensions.Compare(cLineType, "U") == 0 &&
            APInvHed.DebitMemo == true)
            {
                ExceptionManager.AddBLException(Strings.AnUnrecLineCannotBeAddedToADebitMemo, "APInvHed");
                return;
            }

            ttAPInvDtl = new Erp.Tablesets.APInvDtlRow();
            CurrentFullTableset.APInvDtl.Add(ttAPInvDtl);
            ttAPInvDtl.Company = APInvHed.Company;
            ttAPInvDtl.VendorNum = APInvHed.VendorNum;
            ttAPInvDtl.InvoiceNum = APInvHed.InvoiceNum;
            ttAPInvDtl.InPrice = APInvHed.InPrice;
            ttAPInvDtl.LineType = cLineType;
            ttAPInvDtl.DMRNum = iDMRNum;
            ttAPInvDtl.DMRActionNum = iActionNum;
            ttAPInvDtl.RcptReceiptDate = null;
            ttAPInvDtl.RowMod = IceRow.ROWSTATE_ADDED;


            if (cLineType.Equals("M", StringComparison.OrdinalIgnoreCase))
                ttAPInvDtl.InvoiceLine = GetNextInvoiceLine(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);

            if (StringExtensions.Lookup("M,S", cLineType) > -1)
            {
                ttAPInvDtl.Description = APInvHed.Description;

                XaSyst = XaSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
                if (XaSyst != null)
                {
                    ttAPInvDtl.PUM = XaSyst.DefaultUM;
                }



                var TaxCatQuery2 = DBExpressionCompiler.Compile(TaxCatExpression2);
                TaxCat = TaxCatQuery2(Db, Session.CompanyID);
                if (TaxCat != null)
                {
                    ttAPInvDtl.TaxCatID = TaxCat.TaxCatID;
                    ttAPInvDtl.TaxCatIDDescription = TaxCat.Description;
                }
            }

            if (isIndiaLocalization && cLineType.KeyEquals("M"))
            {
                ttAPInvDtl.PurPoint = APInvHed.PurPoint;
            }

            vInvoiceType = APInvHed.InvoiceType;
            if (vInvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
            {
                ttAPInvDtl.TaxExempt = Strings.BOE;
                ttAPInvDtl.OurQty = 1;
                ttAPInvDtl.VendorQty = 1;
                ttAPInvDtl.PartNum = Strings.BOE;
                ttAPInvDtl.IUM = "EA";
                ttAPInvDtl.PUM = "EA";
            }

            if (ttAPInvDtl.DMRNum != 0 && ttAPInvDtl.DMRActionNum != 0)
            {
                GetLineDMRInfo();
                APInvDtlAfterGetRows();
                APInvDtl_Foreign_Link();
                var outUnitCost6 = ttAPInvDtl.UnitCost;
                var outRpt1UnitCost6 = ttAPInvDtl.Rpt1UnitCost;
                var outRpt2UnitCost6 = ttAPInvDtl.Rpt2UnitCost;
                var outRpt3UnitCost6 = ttAPInvDtl.Rpt3UnitCost;
                CalcBaseAmt(ttAPInvDtl.DocUnitCost, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "UnitCost", out outUnitCost6, out outRpt1UnitCost6, out outRpt2UnitCost6, out outRpt3UnitCost6);
                ttAPInvDtl.UnitCost = outUnitCost6;
                ttAPInvDtl.Rpt1UnitCost = outRpt1UnitCost6;
                ttAPInvDtl.Rpt2UnitCost = outRpt2UnitCost6;
                ttAPInvDtl.Rpt3UnitCost = outRpt3UnitCost6;
                CalcExtCost();
                getLineTotals();
            }
            else
            {
                APInvDtlAfterGetRows();
                APInvDtl_Foreign_Link();
            }

            if (isMalaysiaLocalization)
            {
                using (var csfMalaysiaLib = new Internal.CSF.Malaysia(this.Db))
                {
                    ((IBOAPInvoice)csfMalaysiaLib).InitAPInvDtl(CurrentFullTableset, iVendorNum, cInvoiceNum);
                }
            }
        }
        private void CreatettAPInvDtlFromReceipt(int inVendorNum, string inInvoiceNum, string inLineType, int inPONum, string inPurPoint, string inPackSlip, int inPackLine, bool dropShip, int iActionNum)
        {

            decimal mtlUnitCost = decimal.Zero;
            int pStep = 0;
            string partBaseUM = string.Empty;
            decimal partBaseQty = decimal.Zero;
            decimal calcVendorUnitCost = decimal.Zero;
            decimal calcInVendorUnitCost = decimal.Zero;
            decimal pExRate = decimal.Zero;
            string vInspection = string.Empty;
            bool okToGet = true;
            bool InGRNIClearing = false;

            if (!inLineType.Equals("R", StringComparison.OrdinalIgnoreCase))
            {
                throw new BLException(Strings.InvalidUninvoicedReceipt, "APInvDtl");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, inVendorNum, inInvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceNotFound, "APInvHed");
            }
            if (APInvHed.Posted == true)
            {
                throw new BLException(Strings.TheInvoiceHasBeenPostedDetailLinesMayNotBeAdded, "APInvHed");
            }
            if (APInvHed.DebitMemo == true)
                throw new BLException(Strings.AddingUninvReceiToADebitMemoIsNotAllowed, "APInvHed");

            /* If the po is a consolidated po and it is not the global po, skip the record. */
            //POHeader = FindFirstPOHeader(Session.CompanyID, inPONum);
            if (IsLocalConsolidatedPO(inPONum) == true)
            {
                throw new BLException(Strings.AConsoPOMayNotBeSelec, "APInvDtl", "PONum");
            }

            if (dropShip)
            {
                this.CreatettAPInvDtlFromDropShip(inVendorNum, inInvoiceNum, inLineType, inPONum, inPurPoint, inPackSlip, inPackLine);
                return;
            }

            RcvDtl = FindFirstRcvDtl(Session.CompanyID, APInvHed.VendorNum, inPurPoint, inPackSlip, inPackLine);

            if (RcvDtl == null)
                return;


            if (!existsRcvDtlNotInvoiced(Session.CompanyID, inPackSlip, APInvHed.VendorNum, APInvHed.InvoiceNum))
                throw new BLException(Strings.InvalidUninvoicedReceipt, "APInvDtl");

            APInvReceiptBillingTableset ds = new APInvReceiptBillingTableset();

            var RcvDtlQuery4 = DBExpressionCompiler.Compile(RcvDtlExpression4);
            if (!RcvDtlQuery4(Db, Session.CompanyID, APInvHed.VendorNum, inPurPoint, inPackSlip, true, "Std", "SMI", true, false))
                throw new BLException(Strings.ReceiptNotFoundOrIsInvoiced, "APInvDtl");

            okToGet = (APInvHed.InPrice == ExistsRcvHead(Session.CompanyID, RcvDtl.VendorNum, RcvDtl.PurPoint, RcvDtl.PackSlip, true));

            if (RcvDtl.PONum != 0)
            {
                POHeader = FindFirstPOHeader(Session.CompanyID, RcvDtl.PONum);
                if (POHeader != null && inPONum != 0 && RcvDtl.PONum != inPONum)
                    throw new BLException(Strings.PODoesNotMatchReceipt, "APInvDtl");
            }

            if (okToGet)
            {
                if (this.existsRcvDtlNotInvoiced2(Session.CompanyID, RcvDtl.PackSlip, RcvDtl.VendorNum, RcvDtl.PackLine, APInvHed.InvoiceNum))
                {
                    decimal vendorUnitCost = RcvDtl.DocVendorUnitCost;
                    decimal vendorQty = RcvDtl.VendorQty;
                    bool isCurrentRowVendorQty = false;
                    bool isCurrentRowExtCost = false;
                    decimal currentRowExtCost = decimal.Zero;

                    if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt_CurrentRow"))
                    {
                        IceRow currentRow = (IceRow)Erp.Internal.Lib.ErpCallContext.GetValue("UpdateExt_CurrentRow");
                        if (currentRow.IsSpecified("DocScrUnitCost"))
                        {
                            vendorUnitCost = (Decimal)currentRow["DocScrUnitCost"];
                        }
                        if (currentRow.IsSpecified("ScrVendorQty"))
                        {
                            vendorQty = (Decimal)currentRow["ScrVendorQty"];
                            isCurrentRowVendorQty = true;
                        }

                        if (currentRow.IsSpecified("ScrDocExtCost"))
                        {
                            currentRowExtCost = (Decimal)currentRow["ScrDocExtCost"];
                            isCurrentRowExtCost = true;
                        }
                    }

                    if (isCurrentRowExtCost)
                    {
                        if (vendorQty != 0)
                        {
                            vendorUnitCost = LibRoundAmountEF.RoundDecimalsApply((currentRowExtCost / (vendorQty / costFactor(RcvDtl.CostPerCode))), APInvHed.CurrencyCode, "APInvDtl", "DocUnitCost");
                        }
                        else
                        {
                            vendorUnitCost = 0;
                        }
                    }

                    if (POHeader == null || StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) == 0)
                    {
                        calcVendorUnitCost = vendorUnitCost;
                        calcInVendorUnitCost = RcvDtl.DocInVendorUnitCost;
                    }
                    else
                    {
                        if (tmpChainRows != null)
                        {
                            tmpChainRows.Clear();
                        }

                        if (vUseDate == 1)
                        {
                            vExDate = APInvHed.InvoiceDate;
                        }
                        else
                        {
                            vExDate = APInvHed.ApplyDate;
                        }

                        this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, POHeader.CurrencyCode, APInvHed.CurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", APInvHed.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                        calcVendorUnitCost = this.LibConvertAmtEF.ConvertAmt(vendorUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                        calcVendorUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcVendorUnitCost, APInvHed.CurrencyCode, "RcvDtl", "DocVendorUnitCost");
                        calcInVendorUnitCost = this.LibConvertAmtEF.ConvertAmt(RcvDtl.DocInVendorUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                        calcInVendorUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcInVendorUnitCost, APInvHed.CurrencyCode, "RcvDtl", "DocVendorUnitCost");
                    }

                    ttAPUninvoicedRcptLines = new Erp.Tablesets.APUninvoicedRcptLinesRow();

                    ds.APUninvoicedRcptLines.Add(ttAPUninvoicedRcptLines);
                    vInspection = (((RcvDtl.InspectionReq == true && RcvDtl.InspectionPending == true)) ? (Strings.Pending) : (((RcvDtl.InspectionPending == false && RcvDtl.FailedQty > 0)) ? (Strings.Failed) : (((RcvDtl.InspectionPending == false && RcvDtl.PassedQty > 0 && RcvDtl.FailedQty == 0)) ? (Strings.Passed) : (Strings.None))));
                    BufferCopy.Copy(RcvDtl, ttAPUninvoicedRcptLines);
                    ttAPUninvoicedRcptLines.DummyKey = RcvDtl.SysRowID.ToString();
                    ttAPUninvoicedRcptLines.GridVenPartNum = ((RcvDtl.VenPartNum.Length > 0) ? RcvDtl.VenPartNum : RcvDtl.PartNum);
                    ttAPUninvoicedRcptLines.VendorUnitCost = calcVendorUnitCost;
                    ttAPUninvoicedRcptLines.InVendorUnitCost = calcInVendorUnitCost;
                    ttAPUninvoicedRcptLines.PassedQty = RcvDtl.PassedQty * RcvDtl.DimConvFactor;
                    ttAPUninvoicedRcptLines.FailedQty = RcvDtl.FailedQty * RcvDtl.DimConvFactor;
                    ttAPUninvoicedRcptLines.Inspection = vInspection;
                    ttAPUninvoicedRcptLines.InvoiceNum = APInvHed.InvoiceNum;
                    ttAPUninvoicedRcptLines.CurrencyCode = APInvHed.CurrencyCode;
                    ttAPUninvoicedRcptLines.SelectLine = true;
                    ttAPUninvoicedRcptLines.RowMod = IceRow.ROWSTATE_UPDATED;


                    Part = Part.FindFirstByPrimaryKey(Db, RcvDtl.Company, RcvDtl.PartNum);
                    partBaseUM = ((Part != null) ? Part.IUM : RcvDtl.IUM);
                    partBaseQty = RcvDtl.OurQty;
                    if (StringExtensions.Compare(partBaseUM, RcvDtl.IUM) != 0)
                    {
                        LibAppService.UOMConv(RcvDtl.PartNum, RcvDtl.OurQty, RcvDtl.IUM, partBaseUM, out partBaseQty, false);
                    }

                    /*NOTE: The mtlUnitCost is calculated this way to match the calculation that will be done for PartTran. It may seem odd
                            to divide by partBaseQty and then later multiply by it BUT DO NOT CHANGE IT, it is necessary to meet the same calculation
                            that will be done for the PartTran.ExtCost, if not doing so will result in decimal mismatches between the AP Invoice and the
                            PUR-STK Part Transaction.
                            When using OurUnitCost and OurQty to find the cost, we don't need to divide it by the Cost Factor. We only need
                            to apply the Cost Factor (per Each, per/100, etc) if we're using Vendor UnitCost and VendorQty.*/

                    if (RcvDtl.PONum != 0)
                    {
                        if (StringExtensions.Compare(RcvDtl.PUM, RcvDtl.IUM) != 0)
                        {

                            if (!APInvHed.InPrice || calcVendorUnitCost == 0)
                            {
                                mtlUnitCost = (calcVendorUnitCost * vendorQty);
                            }
                            else
                            {
                                mtlUnitCost = (calcInVendorUnitCost * vendorQty);

                            }
                            ttAPUninvoicedRcptLines.DocLineAmount = LibRoundAmountEF.RoundDecimalsTT((mtlUnitCost / costFactor(RcvDtl.CostPerCode)), ttAPUninvoicedRcptLines, "DocLineAmount");
                        }
                        else
                        {
                            if (!APInvHed.InPrice || calcVendorUnitCost == 0)
                            {
                                mtlUnitCost = (calcVendorUnitCost * vendorQty) / partBaseQty;
                            }
                            else
                            {
                                mtlUnitCost = (calcInVendorUnitCost * vendorQty) / partBaseQty;

                            }
                            ttAPUninvoicedRcptLines.DocLineAmount = LibRoundAmountEF.RoundDecimalsTT((mtlUnitCost * partBaseQty / costFactor(RcvDtl.CostPerCode)), ttAPUninvoicedRcptLines, "DocLineAmount");
                        }

                        var outLineAmount2 = ttAPUninvoicedRcptLines.LineAmount;
                        var outRpt1LineAmount2 = ttAPUninvoicedRcptLines.Rpt1LineAmount;
                        var outRpt2LineAmount2 = ttAPUninvoicedRcptLines.Rpt2LineAmount;
                        var outRpt3LineAmount2 = ttAPUninvoicedRcptLines.Rpt3LineAmount;
                        CalcBaseAmt(ttAPUninvoicedRcptLines.DocLineAmount, APInvHed.VendorNum, APInvHed.InvoiceNum, ttAPUninvoicedRcptLines, "LineAmount", out outLineAmount2, out outRpt1LineAmount2, out outRpt2LineAmount2, out outRpt3LineAmount2);
                        ttAPUninvoicedRcptLines.LineAmount = outLineAmount2;
                        ttAPUninvoicedRcptLines.Rpt1LineAmount = outRpt1LineAmount2;
                        ttAPUninvoicedRcptLines.Rpt2LineAmount = outRpt2LineAmount2;
                        ttAPUninvoicedRcptLines.Rpt3LineAmount = outRpt3LineAmount2;
                    }
                    else
                    {
                        if (!APInvHed.InPrice || RcvDtl.InOurCost == 0)
                        {
                            mtlUnitCost = (RcvDtl.OurUnitCost * RcvDtl.OurQty) / partBaseQty;
                        }
                        else
                        {
                            mtlUnitCost = (RcvDtl.InOurCost * RcvDtl.OurQty) / partBaseQty;
                        }
                        ttAPUninvoicedRcptLines.LineAmount = LibRoundAmountEF.RoundDecimalsTT((mtlUnitCost * partBaseQty), ttAPUninvoicedRcptLines, "LineAmount");
                        var outLineAmount3 = ttAPUninvoicedRcptLines.LineAmount;
                        var outDocLineAmount = ttAPUninvoicedRcptLines.DocLineAmount;
                        var outRpt1LineAmount3 = ttAPUninvoicedRcptLines.Rpt1LineAmount;
                        var outRpt2LineAmount3 = ttAPUninvoicedRcptLines.Rpt2LineAmount;
                        var outRpt3LineAmount3 = ttAPUninvoicedRcptLines.Rpt3LineAmount;
                        CalcDocAmt(ref outLineAmount3, APInvHed.VendorNum, APInvHed.InvoiceNum, ttAPUninvoicedRcptLines, "DocLineAmount", "LineAmount", out outDocLineAmount, out outRpt1LineAmount3, out outRpt2LineAmount3, out outRpt3LineAmount3);
                        ttAPUninvoicedRcptLines.LineAmount = outLineAmount3;
                        ttAPUninvoicedRcptLines.DocLineAmount = outDocLineAmount;
                        ttAPUninvoicedRcptLines.Rpt1LineAmount = outRpt1LineAmount3;
                        ttAPUninvoicedRcptLines.Rpt2LineAmount = outRpt2LineAmount3;
                        ttAPUninvoicedRcptLines.Rpt3LineAmount = outRpt3LineAmount3;
                    }
                    ttAPSelectedRcptLines = new Erp.Tablesets.APSelectedRcptLinesRow();
                    ds.APSelectedRcptLines.Add(ttAPSelectedRcptLines);
                    BufferCopy.Copy(ttAPUninvoicedRcptLines, ref ttAPSelectedRcptLines);
                    ttAPSelectedRcptLines.VendorQty = (ttAPUninvoicedRcptLines.SupplierUnInvcReceiptQty > 0) ? ttAPUninvoicedRcptLines.SupplierUnInvcReceiptQty : ttAPSelectedRcptLines.VendorQty;
                    if (isCurrentRowVendorQty)
                    {
                        ttAPSelectedRcptLines.VendorQty = vendorQty;
                        if (vendorQty < RcvDtl.VendorQty)
                        {
                            ttAPSelectedRcptLines.FinalInvoice = false;
                        }

                    }
                    ttAPSelectedRcptLines.InvoiceQty = (InGRNIClearing) ? 0 : ttAPSelectedRcptLines.VendorQty;
                    ttAPUninvoicedRcptLines.RowMod = "D";
                    string opLOCMsg = string.Empty;
                    InvoiceSelectedLines(ref ds, out opLOCMsg);
                }/* if not(can-find(ttAPUninvoicedRcptLines  */
                else
                    throw new BLException(Strings.ReceiptNotFoundOrIsInvoiced, "APInvDtl");


            }  // AP Invoice and related PO have the same Tax Liability type
            if (ErpCallContext.ContainsKey("UpdateExt_CurrentRow"))
            {
                ErpCallContext.RemoveValue("UpdateExt_CurrentRow");
            }


        }
        private void CreatettAPInvDtlFromDropShip(int inVendorNum, string inInvoiceNum, string inLineType, int inPONum, string inPurPoint, string inPackSlip, int inPackLine)
        {
            int pStep = 0;
            decimal calcUnitCost = decimal.Zero;
            decimal calcInUnitCost = decimal.Zero;
            decimal pExRate = decimal.Zero;
            bool poInPrice = false;

            var DropShipDtlQuery4 = DBExpressionCompiler.Compile(DropShipDtlExpression4);
            DropShipDtl = DropShipDtlQuery4(Db, Session.CompanyID, APInvHed.VendorNum, inPurPoint, inPackSlip, inPackLine);

            if (DropShipDtl == null)
            {
                throw new BLException(Strings.ReceiptNotFound, "APInvDtl");

            }
            if (DropShipDtl.APInvoiced == true)
            {
                throw new BLException(Strings.ReceiptNotFound, "APInvDtl");
            }
            if (DropShipDtl.PONum != inPONum)
            {
                throw new BLException(Strings.PODoesNotMatchReceipt, "APInvDtl");
            }

            var DropShipHeadQuery2 = DBExpressionCompiler.Compile(DropShipHeadExpression2);
            DropShipHead = DropShipHeadQuery2(Db, Session.CompanyID, APInvHed.VendorNum, inPurPoint, inPackSlip);
            if (DropShipHead == null)
            {
                throw new BLException(Strings.ReceiptNotFound, "APInvDtl");

            }
            if (!(DropShipHead.APInvoiced == false && DropShipHead.ReceivedShipped == true))
            {
                throw new BLException(Strings.ReceiptNotFound, "APInvDtl");

            }

            APInvReceiptBillingTableset ds = new APInvReceiptBillingTableset();

            POHeader = FindFirstPOHeader(Session.CompanyID, inPONum);
            if (POHeader != null && POHeader.InPrice)
            {
                poInPrice = true;
            }

            if ((POHeader != null && POHeader.InPrice == APInvHed.InPrice) || (POHeader == null && !APInvHed.InPrice))
            {

                decimal vendorUnitCost = DropShipDtl.DocUnitCost;
                decimal vendorQty = DropShipDtl.VendorQty;
                bool isCurrentRowExtCost = false;
                decimal currentRowExtCost = decimal.Zero;

                if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt_CurrentRow"))
                {
                    IceRow currentRow = (IceRow)Erp.Internal.Lib.ErpCallContext.GetValue("UpdateExt_CurrentRow");
                    if (currentRow.IsSpecified("DocScrUnitCost"))
                    {
                        vendorUnitCost = (Decimal)currentRow["DocScrUnitCost"];
                    }
                    if (currentRow.IsSpecified("ScrVendorQty"))
                    {
                        vendorQty = (Decimal)currentRow["ScrVendorQty"];
                    }

                    if (currentRow.IsSpecified("ScrDocExtCost"))
                    {
                        currentRowExtCost = (Decimal)currentRow["ScrDocExtCost"];
                        isCurrentRowExtCost = true;
                    }
                }

                if (isCurrentRowExtCost)
                {
                    if (vendorQty != 0)
                    {
                        vendorUnitCost = LibRoundAmountEF.RoundDecimalsApply((currentRowExtCost / (vendorQty / costFactor(DropShipDtl.CostPerCode))), APInvHed.CurrencyCode, "APInvDtl", "DocUnitCost");
                    }
                    else
                    {
                        vendorUnitCost = 0;
                    }
                }

                if (POHeader == null || StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) == 0)
                {
                    calcUnitCost = vendorUnitCost;
                    if (poInPrice)
                    {
                        PODetail = this.FindFirstPODetail(Session.CompanyID, DropShipDtl.PONum, DropShipDtl.POLine);
                        if (PODetail != null)
                        {
                            calcInUnitCost = PODetail.DocInUnitCost;
                        }

                    }

                }
                else
                {
                    if (tmpChainRows != null)
                    {
                        tmpChainRows.Clear();
                    }

                    if (vUseDate == 1)
                    {
                        vExDate = APInvHed.InvoiceDate;
                    }
                    else
                    {
                        vExDate = APInvHed.ApplyDate;
                    }

                    this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, POHeader.CurrencyCode, APInvHed.CurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", APInvHed.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                    calcUnitCost = this.LibConvertAmtEF.ConvertAmt(vendorUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                    calcUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcUnitCost, APInvHed.CurrencyCode, "DropShipDtl", "DocUnitCost");
                    if (poInPrice)
                    {
                        PODetail = this.FindFirstPODetail(Session.CompanyID, DropShipDtl.PONum, DropShipDtl.POLine);
                        if (PODetail != null)
                        {
                            calcInUnitCost = this.LibConvertAmtEF.ConvertAmt(PODetail.DocInUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                            calcInUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcInUnitCost, APInvHed.CurrencyCode, "DropShipDtl", "DocUnitCost");
                        }

                    }

                }
                ttAPUninvoicedRcptLines = new Erp.Tablesets.APUninvoicedRcptLinesRow();
                ds.APUninvoicedRcptLines.Add(ttAPUninvoicedRcptLines);

                ttAPUninvoicedRcptLines.Company = DropShipDtl.Company;
                ttAPUninvoicedRcptLines.VendorNum = DropShipDtl.VendorNum;
                ttAPUninvoicedRcptLines.PurPoint = DropShipDtl.PurPoint;
                ttAPUninvoicedRcptLines.DropShipPackSlip = DropShipDtl.PackSlip;
                ttAPUninvoicedRcptLines.PackSlip = DropShipDtl.PackSlip;
                ttAPUninvoicedRcptLines.DummyKey = DropShipHead.SysRowID.ToString();
                ttAPUninvoicedRcptLines.DropShip = true;
                ttAPUninvoicedRcptLines.PackLine = DropShipDtl.PackLine;
                ttAPUninvoicedRcptLines.PartNum = DropShipDtl.PartNum;
                ttAPUninvoicedRcptLines.GridVenPartNum = ((DropShipDtl.VenPartNum.Length > 0) ? DropShipDtl.VenPartNum : DropShipDtl.PartNum);
                ttAPUninvoicedRcptLines.OurQty = DropShipDtl.OurQty;
                ttAPUninvoicedRcptLines.CurrencyCode = APInvHed.CurrencyCode;
                ttAPUninvoicedRcptLines.PONum = DropShipDtl.PONum;
                ttAPUninvoicedRcptLines.POLine = DropShipDtl.POLine;
                ttAPUninvoicedRcptLines.PORelNum = DropShipDtl.PORelNum;
                ttAPUninvoicedRcptLines.TranReference = DropShipDtl.TranReference;
                ttAPUninvoicedRcptLines.PartDescription = DropShipDtl.LineDesc;
                ttAPUninvoicedRcptLines.VendorQty = vendorQty;
                ttAPUninvoicedRcptLines.PUM = DropShipDtl.PUM;
                ttAPUninvoicedRcptLines.Inspection = (Strings.None);
                ttAPUninvoicedRcptLines.InvoiceNum = APInvHed.InvoiceNum;
                ttAPUninvoicedRcptLines.SysRowID = DropShipDtl.SysRowID;
                ttAPUninvoicedRcptLines.SelectLine = true;
                ttAPUninvoicedRcptLines.RowMod = IceRow.ROWSTATE_UPDATED;


                if (!poInPrice)
                {
                    ttAPUninvoicedRcptLines.OurUnitCost = DropShipDtl.OurUnitCost;
                    ttAPUninvoicedRcptLines.VendorUnitCost = calcUnitCost;
                    ttAPUninvoicedRcptLines.DocLineAmount = vendorQty * calcUnitCost;
                    ttAPUninvoicedRcptLines.DocLineAmount = ttAPUninvoicedRcptLines.DocLineAmount / costFactor(DropShipDtl.CostPerCode);
                    ttAPUninvoicedRcptLines.DocLineAmount = LibRoundAmountEF.RoundDecimalsTT(ttAPUninvoicedRcptLines.DocLineAmount, ttAPUninvoicedRcptLines, "DocLineAmount");
                }
                else
                {
                    ttAPUninvoicedRcptLines.VendorUnitCost = calcInUnitCost;
                    ttAPUninvoicedRcptLines.OurUnitCost = calcInUnitCost;
                    ttAPUninvoicedRcptLines.DocLineAmount = vendorQty * calcInUnitCost;
                    ttAPUninvoicedRcptLines.DocLineAmount = ttAPUninvoicedRcptLines.DocLineAmount / costFactor(DropShipDtl.CostPerCode);
                    ttAPUninvoicedRcptLines.DocLineAmount = LibRoundAmountEF.RoundDecimalsTT(ttAPUninvoicedRcptLines.DocLineAmount, ttAPUninvoicedRcptLines, "DocLineAmount");


                }
                var outLineAmount = ttAPUninvoicedRcptLines.LineAmount;
                var outRpt1LineAmount = ttAPUninvoicedRcptLines.Rpt1LineAmount;
                var outRpt2LineAmount = ttAPUninvoicedRcptLines.Rpt2LineAmount;
                var outRpt3LineAmount = ttAPUninvoicedRcptLines.Rpt3LineAmount;

                CalcBaseAmt(ttAPUninvoicedRcptLines.DocLineAmount, APInvHed.VendorNum, APInvHed.InvoiceNum, ttAPUninvoicedRcptLines, "LineAmount", out outLineAmount, out outRpt1LineAmount, out outRpt2LineAmount, out outRpt3LineAmount);

                ttAPUninvoicedRcptLines.LineAmount = outLineAmount;
                ttAPUninvoicedRcptLines.Rpt1LineAmount = outRpt1LineAmount;
                ttAPUninvoicedRcptLines.Rpt2LineAmount = outRpt2LineAmount;
                ttAPUninvoicedRcptLines.Rpt3LineAmount = outRpt3LineAmount;


                ttAPSelectedRcptLines = new Erp.Tablesets.APSelectedRcptLinesRow();
                ds.APSelectedRcptLines.Add(ttAPSelectedRcptLines);
                BufferCopy.Copy(ttAPUninvoicedRcptLines, ref ttAPSelectedRcptLines);
                ttAPUninvoicedRcptLines.RowMod = "D";
                string opLOCMsg = string.Empty;
                InvoiceSelectedLines(ref ds, out opLOCMsg);

            }
            if (ErpCallContext.ContainsKey("UpdateExt_CurrentRow"))
            {
                ErpCallContext.RemoveValue("UpdateExt_CurrentRow");
            }
        }

        private void createttAPInvHed(string cGroupID, bool lDebitMemo)
        {
            validateConfiguration();
            ExceptionManager.AssertNoBLExceptions();

            APInvGrp = FindFirstAPInvGrp(Session.CompanyID, cGroupID);
            if (APInvGrp == null)
            {
                throw new BLException(Strings.InvalidAPInvoiceGroup, "APInvGrp");
            }
            else if (!string.IsNullOrEmpty(APInvGrp.ActiveUserID) && !APInvGrp.ActiveUserID.KeyEquals(Session.UserID))
            {
                throw new BLException(Strings.GroupIsInUseByAnotherUser(APInvGrp.GroupID));
            }

            if (lDebitMemo == false)
            {
                // Check if a legal number configuration is required before adding an invoice. 
                if (legalNumSetupRequired(false, false) == true)
                {
                    throw new BLException(Strings.LegalNumCnfgInvoice);
                }
            }
            else
            {
                if (legalNumSetupRequired(true, false) == true)
                {

                    throw new BLException(Strings.LegalNumCnfgDM);
                }
            }


            apSystPartial = FindPartialAPSyst(Session.CompanyID);


            Currency = FindFirstBaseCurrency(Session.CompanyID, true);

            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            if (XbSyst != null)
            {
                vRateGrpCode = XbSyst.PORateGrp;
            }

            ttAPInvHed = new Erp.Tablesets.APInvHedRow();
            CurrentFullTableset.APInvHed.Add(ttAPInvHed);
            ttAPInvHed.Company = APInvGrp.Company;
            ttAPInvHed.GroupID = cGroupID;
            ttAPInvHed.FiscalPeriod = APInvGrp.FiscalPeriod;
            ttAPInvHed.FiscalYear = APInvGrp.FiscalYear;
            ttAPInvHed.FiscalYearSuffix = APInvGrp.FiscalYearSuffix;
            ttAPInvHed.FiscalCalendarID = APInvGrp.FiscalCalendarID;
            ttAPInvHed.ApplyDate = APInvGrp.ApplyDate;
            ttAPInvHed.TaxRateDate = ttAPInvHed.ApplyDate;
            ttAPInvHed.TaxPoint = ttAPInvHed.ApplyDate;
            ttAPInvHed.ReadyToCalc = apSystPartial.InvcReadyToCalcDflt;
            ttAPInvHed.EntryPerson = Session.UserID;
            ttAPInvHed.DebitMemo = lDebitMemo;
            ttAPInvHed.RateGrpCode = vRateGrpCode;
            ttAPInvHed.RowMod = IceRow.ROWSTATE_ADDED;
            ttAPInvHed.CurrencyCode = ((Currency != null) ? Currency.CurrencyCode : "");
            ttAPInvHed.TaxRateGrpCode = ((XbSyst != null && XbSyst.UseTaxRate) ? XbSyst.TaxRateGrp : "");

            // SCR 96807 - Using XBSyst.UseTaxRate to assign Tax Rate Date and Tax Point in E9 was incorrect and has been removed.
            LibSetDefaultInvoiceDates.RunSetDefaultInvoiceDates(ttAPInvHed, "AP", APInvGrp.ApplyDate, true);

            APInvHedAfterGetNew();
            APInvHedAfterGetRows();
            APInvHed_Foreign_Link();
        }

        private void createttAPInvPOMisc(APInvPOMiscTableset ttAPInvPOMiscTablesetDS)
        {
            decimal calcDocMiscAmt = decimal.Zero;
            decimal calcDocInMiscAmt = decimal.Zero;
            decimal calcDocInvoicedAmt = decimal.Zero;

            int pStep = 0;
            decimal pExRate = decimal.Zero;


            PurMisc = FindFirstPurMisc(POMisc.Company, POMisc.MiscCode);



            POHeader = FindFirstPOHeader(POMisc.Company, POMisc.PONum);
            if (StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) == 0)
            {
                calcDocMiscAmt = POMisc.DocMiscAmt;
                calcDocInvoicedAmt = POMisc.DocInvoicedAmt;
                calcDocInMiscAmt = POMisc.DocInMiscAmt;

            }
            else
            {
                if (tmpChainRows != null)
                {
                    tmpChainRows.Clear();
                }

                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, POHeader.CurrencyCode, APInvHed.CurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", APInvHed.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                calcDocMiscAmt = this.LibConvertAmtEF.ConvertAmt(POMisc.DocMiscAmt, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                calcDocInvoicedAmt = this.LibConvertAmtEF.ConvertAmt(POMisc.DocInvoicedAmt, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                calcDocMiscAmt = LibRoundAmountEF.RoundDecimalsApply(calcDocMiscAmt, APInvHed.CurrencyCode, "APInvPOMisc", "DocMiscAmt");
                calcDocInvoicedAmt = LibRoundAmountEF.RoundDecimalsApply(calcDocInvoicedAmt, APInvHed.CurrencyCode, "APInvPOMisc", "DocBalance");

                calcDocInMiscAmt = this.LibConvertAmtEF.ConvertAmt(POMisc.DocInMiscAmt, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                calcDocInMiscAmt = LibRoundAmountEF.RoundDecimalsApply(calcDocInMiscAmt, APInvHed.CurrencyCode, "APInvPOMisc", "DocMiscAmt");
            }
            ttAPInvPOMisc = new Erp.Tablesets.APInvPOMiscRow();
            ttAPInvPOMiscTablesetDS.APInvPOMisc.Add(ttAPInvPOMisc);
            ttAPInvPOMisc.Company = POMisc.Company;
            ttAPInvPOMisc.PONum = POMisc.PONum;
            ttAPInvPOMisc.POLine = POMisc.POLine;
            ttAPInvPOMisc.SeqNum = POMisc.SeqNum;
            ttAPInvPOMisc.MiscCode = POMisc.MiscCode;
            ttAPInvPOMisc.Description = POMisc.Description;
            ttAPInvPOMisc.Type = POMisc.Type;
            ttAPInvPOMisc.Percentage = POMisc.Percentage;
            if (!APInvHed.InPrice)
            {
                ttAPInvPOMisc.MiscAmt = POMisc.MiscAmt;
                ttAPInvPOMisc.DocMiscAmt = calcDocMiscAmt;
            }
            else
            {
                ttAPInvPOMisc.MiscAmt = POMisc.InMiscAmt;
                ttAPInvPOMisc.DocMiscAmt = calcDocInMiscAmt;

            }
            if (!APInvHed.InPrice)
            {
                ttAPInvPOMisc.Balance = POMisc.MiscAmt - POMisc.InvoicedAmt;
                ttAPInvPOMisc.DocBalance = calcDocMiscAmt - calcDocInvoicedAmt;
            }
            else
            {
                ttAPInvPOMisc.Balance = POMisc.InMiscAmt - POMisc.InvoicedAmt;
                ttAPInvPOMisc.DocBalance = calcDocInMiscAmt - calcDocInvoicedAmt;
            }
            ttAPInvPOMisc.RecordSource = ((POMisc.POLine > 0) ? Strings.Line : Strings.Header);
            ttAPInvPOMisc.MiscCodeDescription = PurMisc.Description;
            ttAPInvPOMisc.SysRowID = POMisc.SysRowID;
            ttAPInvPOMisc.RowMod = IceRow.ROWSTATE_UNCHANGED;
            if (APInvHed != null)
            {


                Currency = FindFirstCurrencyWithCode(APInvHed.Company, APInvHed.CurrencyCode);
                ttAPInvPOMisc.CurrencyCode = APInvHed.CurrencyCode;
                if (Currency != null)
                {
                    ttAPInvPOMisc.CurrSymbol = Currency.CurrSymbol;
                }
            }
        }

        /// <summary>
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="cGroupID">current APInvGrp GroupID</param>
        /// <param name="keyValue">VendorNum</param>
        /// <param name="keyValue2">InvoiceNum</param>
        /// <param name="grpTotalInvAmt">return new TotalInvAmt to update APInvGrp in UI</param>
        /// <param name="lEnableGenLegalNum">flag for UI to determine whether Generate Legal Numbers option is available</param>
        public void DeleteMaster(ref APInvoiceTableset ds, string cGroupID, string keyValue, string keyValue2, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum)
        {
            grpTotalInvAmt = decimal.Zero;
            lEnableGenLegalNum = false;
            CurrentFullTableset = ds;
            if (PELock.IsDocumentLock(Session.CompanyID, "APInvHed", keyValue, keyValue2, "", "", "", ""))
            {
                throw new BLException(PELock.LockMessage);
            }
            /* run the regular update  */
            Update(ref ds);
            updateAPInvGrpFields(cGroupID, out grpTotalInvAmt, out lEnableGenLegalNum);
        }

        /// <summary>
        /// Method to call to deselected selected lines.  This method will run through each
        /// APSelectedRcptLines where the DeselectLine flag is true and remove it from the 
        /// APSelectedRcptLines table.  Also, if the APUninvoicedReceipts record for the receipt line 
        /// being delesected is currently in the dataset, it will add the line back to the 
        /// APUninvoicedRcptLines table.
        /// </summary>
        /// <param name="ds"></param>  
        /// <param name="isDropShip"> isDropShip</param>
        /// <param name="PackSlip">Current Packslip</param>
        /// <param name="PurPoint">Current PurPoin</param>
        /// <param name="VendorNum">Current Vendor Num</param>
        /// <param name="InvoiceNum">Current InvoiceNum</param>
        /// <param name="iPONum">Current PONum</param>
        /// <returns></returns>
        public void DeselectSelectedRcptLines(ref APInvReceiptBillingTableset ds, int VendorNum, string PurPoint, string PackSlip, bool isDropShip, string InvoiceNum, int iPONum)
        {
            var emptyRecords = ds.APUninvoicedRcptLines.Where(l => l.SysRowID == Guid.Empty).ToList();
            if (emptyRecords.Count > 0)
            {
                foreach (var item in emptyRecords)
                {
                    ds.APUninvoicedRcptLines.Remove(item);
                }
            }

            APInvReceiptBillingTableset ttAPInvReceiptBillingTablesetDS = new APInvReceiptBillingTableset();
            ttAPInvReceiptBillingTablesetDS = ds;
            Guid SelectedRowIdent = Guid.Empty;
            int getPONum = 0;

            Erp.Tablesets.APReceiptTotalsRow ttAPReceiptTotalsReceipts = ds.APReceiptTotals.Where(x => x.VendorNum == VendorNum && x.Company.KeyEquals(Session.CompanyID) && x.InvoiceNum.KeyEquals(InvoiceNum) && x.RowMod != IceRow.ROWSTATE_UNCHANGED).FirstOrDefault();

            foreach (var ttAPSelectedRcptLines_iterator in (from ttAPSelectedRcptLines_Row in ds.APSelectedRcptLines
                                                            where ttAPSelectedRcptLines_Row.DeselectLine == true
                                                            && StringExtensions.Compare(ttAPSelectedRcptLines_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                                                            select ttAPSelectedRcptLines_Row).ToList())
            {
                ttAPSelectedRcptLines = ttAPSelectedRcptLines_iterator;
                ttAPReceiptTotalsReceipts.DocSelectedTotal -= ttAPSelectedRcptLines.DocLineAmount;

                getPONum = (iPONum == 0) ? iPONum : ttAPSelectedRcptLines.PONum;
                if (!ttAPSelectedRcptLines.DropShip)
                {
                    ttAPUninvoicedReceipts = (from ttAPUninvoicedReceipt in ds.APUninvoicedReceipts
                                              where ttAPUninvoicedReceipt.PONum == getPONum &&
                                              ttAPUninvoicedReceipt.VendorNum == ttAPSelectedRcptLines.VendorNum &&
                                              StringExtensions.Compare(ttAPUninvoicedReceipt.Company, ttAPSelectedRcptLines.Company) == 0 &&
                                              StringExtensions.Compare(ttAPUninvoicedReceipt.PurPoint, ttAPSelectedRcptLines.PurPoint) == 0 &&
                                              StringExtensions.Compare(ttAPUninvoicedReceipt.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0 &&
                                              StringExtensions.Compare(ttAPUninvoicedReceipt.PackSlip, ttAPSelectedRcptLines.PackSlip) == 0
                                              select ttAPUninvoicedReceipt).FirstOrDefault();

                }
                else
                {
                    ttAPUninvoicedReceipts = (from ttAPUninvoicedReceipt in ds.APUninvoicedReceipts
                                              where ttAPUninvoicedReceipt.PONum == ttAPSelectedRcptLines.PONum &&
                                              ttAPUninvoicedReceipt.VendorNum == ttAPSelectedRcptLines.VendorNum &&
                                              StringExtensions.Compare(ttAPUninvoicedReceipt.Company, ttAPSelectedRcptLines.Company) == 0 &&
                                              StringExtensions.Compare(ttAPUninvoicedReceipt.PurPoint, ttAPSelectedRcptLines.PurPoint) == 0 &&
                                              StringExtensions.Compare(ttAPUninvoicedReceipt.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0 &&
                                              StringExtensions.Compare(ttAPUninvoicedReceipt.DropShipPackSlip, ttAPSelectedRcptLines.DropShipPackSlip) == 0
                                              select ttAPUninvoicedReceipt).FirstOrDefault();
                }

                if (ttAPUninvoicedReceipts != null)
                {

                    ttAPUninvoicedReceipts.AllSelected = false;
                    if (!(((from ttAPUninvoicedRcptLines_Row in ds.APUninvoicedRcptLines
                            where ttAPUninvoicedRcptLines_Row.SysRowID == ttAPSelectedRcptLines.SysRowID
                            select ttAPUninvoicedRcptLines_Row).Any())))
                    {
                        ttAPUninvoicedRcptLines = new Erp.Tablesets.APUninvoicedRcptLinesRow();
                        ds.APUninvoicedRcptLines.Add(ttAPUninvoicedRcptLines);
                        BufferCopy.Copy(ttAPSelectedRcptLines, ref ttAPUninvoicedRcptLines);
                        ttAPUninvoicedRcptLines.SupplierUnInvcReceiptQty = ttAPSelectedRcptLines.VendorQty;
                        ttAPUninvoicedRcptLines.VendorQty = this.getRcvDtlLineSuppQty(Session.CompanyID, ttAPUninvoicedRcptLines.PackSlip, ttAPUninvoicedRcptLines.PONum, ttAPUninvoicedRcptLines.POLine);
                    }
                }/* if available ttAPUninvoicedReceipts */

                ttAPSelectedRcptLines.RowMod = "D";

            }

            if (!isDropShip)
            {

                if ((from ttAPUninvoicedRcptLines_Row in ds.APUninvoicedRcptLines
                     where StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.Company, Session.CompanyID) == 0
                     && ttAPUninvoicedRcptLines_Row.VendorNum == VendorNum
                     && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PurPoint, PurPoint) == 0
                     && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PackSlip, PackSlip) == 0
                     select ttAPUninvoicedRcptLines_Row).FirstOrDefault() != null)
                {
                    ttAPReceiptTotalsReceipts.AvailableTotal = decimal.Zero;
                    ttAPReceiptTotalsReceipts.DocAvailableTotal = decimal.Zero;
                    ttAPReceiptTotalsReceipts.Rpt1AvailableTotal = decimal.Zero;
                    ttAPReceiptTotalsReceipts.Rpt2AvailableTotal = decimal.Zero;
                    ttAPReceiptTotalsReceipts.Rpt3AvailableTotal = decimal.Zero;
                }
                foreach (var ttAPUninvoicedRcptLines_iterator in (from ttAPUninvoicedRcptLines_Row in ds.APUninvoicedRcptLines
                                                                  where StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.Company, Session.CompanyID) == 0
                                                                  && ttAPUninvoicedRcptLines_Row.VendorNum == VendorNum
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PurPoint, PurPoint) == 0
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PackSlip, PackSlip) == 0
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.RowMod, Ice.IceRow.ROWSTATE_UNCHANGED) != 0
                                                                  select ttAPUninvoicedRcptLines_Row).ToList())
                {
                    ttAPUninvoicedRcptLines = ttAPUninvoicedRcptLines_iterator;
                    ttAPReceiptTotalsReceipts.DocAvailableTotal += ttAPUninvoicedRcptLines.DocLineAmount;
                    ttAPReceiptTotalsReceipts.CurrencyCode = ttAPUninvoicedRcptLines.CurrencyCode;
                }
            }
            else
            {

                if ((from ttAPUninvoicedRcptLines_Row in ds.APUninvoicedRcptLines
                     where StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.Company, Session.CompanyID) == 0
                     && ttAPUninvoicedRcptLines_Row.VendorNum == VendorNum
                     && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PurPoint, PurPoint) == 0
                     && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.DropShipPackSlip, PackSlip) == 0
                     select ttAPUninvoicedRcptLines_Row).FirstOrDefault() != null)
                {
                    ttAPReceiptTotalsReceipts.AvailableTotal = decimal.Zero;
                    ttAPReceiptTotalsReceipts.DocAvailableTotal = decimal.Zero;
                    ttAPReceiptTotalsReceipts.Rpt1AvailableTotal = decimal.Zero;
                    ttAPReceiptTotalsReceipts.Rpt2AvailableTotal = decimal.Zero;
                    ttAPReceiptTotalsReceipts.Rpt3AvailableTotal = decimal.Zero;
                }

                foreach (var ttAPUninvoicedRcptLines_iterator in (from ttAPUninvoicedRcptLines_Row in ds.APUninvoicedRcptLines
                                                                  where StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.Company, Session.CompanyID) == 0
                                                                  && ttAPUninvoicedRcptLines_Row.VendorNum == VendorNum
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PurPoint, PurPoint) == 0
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.DropShipPackSlip, PackSlip) == 0
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.RowMod, Ice.IceRow.ROWSTATE_UNCHANGED) != 0
                                                                  select ttAPUninvoicedRcptLines_Row).ToList())
                {
                    ttAPUninvoicedRcptLines = ttAPUninvoicedRcptLines_iterator;
                    ttAPReceiptTotalsReceipts.DocAvailableTotal += ttAPUninvoicedRcptLines.LineAmount;
                    ttAPReceiptTotalsReceipts.CurrencyCode = ttAPUninvoicedRcptLines.CurrencyCode;
                }
            }


            if (ttAPUninvoicedReceipts != null)
            {
                var outAvailableTotal = ttAPReceiptTotalsReceipts.AvailableTotal;
                var outRpt1AvailableTotal = ttAPReceiptTotalsReceipts.Rpt1AvailableTotal;
                var outRpt2AvailableTotal = ttAPReceiptTotalsReceipts.Rpt2AvailableTotal;
                var outRpt3AvailableTotal = ttAPReceiptTotalsReceipts.Rpt3AvailableTotal;
                CalcBaseAmt(ttAPReceiptTotalsReceipts.DocAvailableTotal, VendorNum, InvoiceNum, ttAPUninvoicedReceipts, "AvailableTotal", out outAvailableTotal, out outRpt1AvailableTotal, out outRpt2AvailableTotal, out outRpt3AvailableTotal);
                ttAPReceiptTotalsReceipts.AvailableTotal = outAvailableTotal;
                ttAPReceiptTotalsReceipts.Rpt1AvailableTotal = outRpt1AvailableTotal;
                ttAPReceiptTotalsReceipts.Rpt2AvailableTotal = outRpt2AvailableTotal;
                ttAPReceiptTotalsReceipts.Rpt3AvailableTotal = outRpt3AvailableTotal;

                var outSelectedTotal = ttAPReceiptTotalsReceipts.SelectedTotal;
                var outRpt1SelectedTotal = ttAPReceiptTotalsReceipts.Rpt1SelectedTotal;
                var outRpt2SelectedTotal = ttAPReceiptTotalsReceipts.Rpt2SelectedTotal;
                var outRpt3SelectedTotal = ttAPReceiptTotalsReceipts.Rpt3SelectedTotal;
                CalcBaseAmt(ttAPReceiptTotalsReceipts.DocSelectedTotal, VendorNum, InvoiceNum, ttAPUninvoicedReceipts, "SelectedTotal", out outSelectedTotal, out outRpt1SelectedTotal, out outRpt2SelectedTotal, out outRpt3SelectedTotal);
                ttAPReceiptTotalsReceipts.SelectedTotal = outSelectedTotal;
                ttAPReceiptTotalsReceipts.Rpt1SelectedTotal = outRpt1SelectedTotal;
                ttAPReceiptTotalsReceipts.Rpt2SelectedTotal = outRpt2SelectedTotal;
                ttAPReceiptTotalsReceipts.Rpt3SelectedTotal = outRpt3SelectedTotal;
            }

        }

        /// <summary>
        /// Decode ISR Code Line and return data for filling Invoice Header
        /// At this time this method is specific to Switzerland localization
        /// </summary>
        /// <param name="ipISRCodeLine">ISR Code Line for decoding</param>
        /// <param name="opSlipType">output Type of ISR Code Line (O-Orange, R-Red).</param>
        /// <param name="opSlipCode">output SlipCode extracted from ISR Code Line.</param>
        /// <param name="opAmount">output Amount extracted from ISR Code Line.</param>
        /// <param name="opCurrencyCode">output Vendor.CurrencyCode found by ISR Party Number.</param>
        /// <param name="opCurrencyID">output Vendor.CurrencyID found by ISR Party Number.</param>
        /// <param name="opISRRefNum">output ISR Reference Number extracted from ISR Code Line.</param>
        /// <param name="opVendorNum">output Vendor.VendorNum found by ISR Party Number.</param>
        /// <param name="opVendorID">output Vendor.VendorID found by ISR Party Number.</param>
        /// <param name="opVendorName">output Vendor.VendorName found by ISR Party Number.</param>
        public void DecodeISRCodeLine(string ipISRCodeLine, out string opSlipType, out string opSlipCode, out decimal opAmount, out string opCurrencyCode, out string opCurrencyID, out string opISRRefNum, out int opVendorNum, out string opVendorID, out string opVendorName)
        {
            opVendorNum = 0;
            opVendorID = string.Empty;
            opVendorName = string.Empty;
            opCurrencyCode = string.Empty;
            opCurrencyID = string.Empty;
            string opMessage = string.Empty;
            string opISRPartyID = string.Empty;
            string cISRPOBankAcct = string.Empty;
            int cISRVendorNum = 0;
            string cISRVendorBankType = string.Empty;
            string cVendCurrencyID = string.Empty;

            Erp.Tables.Vendor bVendor = null;
            Erp.Tables.Currency bCurrency = null;

            if (!decodeISRCodeLine(ipISRCodeLine, out opMessage, out opSlipType, out opSlipCode, out opAmount, out opISRRefNum, out opISRPartyID, out cISRPOBankAcct, out cISRVendorNum, out cISRVendorBankType))
            {
                throw new BLException(opMessage);
            }

            if (opSlipType.Compare("O") == 0)
            {
                var bVendorQuery = DBExpressionCompiler.Compile(BVendorExpression);
                bVendor = bVendorQuery(this.Db, Session.CompanyID, cISRVendorNum);
                if (bVendor != null)
                {
                    bCurrency = this.FindFirstCurrency(Session.CompanyID, bVendor.CurrencyCode);
                    if (bCurrency != null)
                    {
                        cVendCurrencyID = bCurrency.CurrencyID;
                    }
                    if ((cVendCurrencyID.Compare("CHF") != 0) && (cVendCurrencyID.Compare("EUR") != 0))
                    {
                        throw new BLException(Strings.CurrencyISOCodeForSupplierMustBeEUROrCHF(bVendor.Name));
                    }
                    if (((bCurrency.CurrencyID.Compare("CHF") == 0) && ((opSlipCode.Compare("01") != 0) && (opSlipCode.Compare("04") != 0))) ||
                        ((bCurrency.CurrencyID.Compare("EUR") == 0) && ((cISRVendorBankType.Compare("B") == 0) || ((opSlipCode.Compare("21") != 0) && (opSlipCode.Compare("31") != 0)))))
                    {
                        throw new BLException(Strings.TheSlipTypeIsNotAllowedForCurrency(opSlipCode, bVendor.CurrencyCode));
                    }
                    opVendorNum = bVendor.VendorNum;
                    opVendorID = bVendor.VendorID;
                    opVendorName = bVendor.Name;
                    opCurrencyCode = bVendor.CurrencyCode;
                    opCurrencyID = bCurrency.CurrencyID;
                }
            }
            else
            {
                bCurrency = FindFirstCurrency(Session.CompanyID, "CHF");
                if (bCurrency == null)
                {
                    throw new BLException(Strings.CurrencyWithISOCodeIsNotFound);
                }

                bVendor = Vendor.FindFirstByPrimaryKey(this.Db, Session.CompanyID, cISRVendorNum);
                if (bVendor != null)
                {
                    if (bVendor.CurrencyCode.Compare(bCurrency.CurrencyCode) == 0)
                    {
                        opVendorNum = bVendor.VendorNum;
                        opVendorID = bVendor.VendorID;
                        opVendorName = bVendor.Name;
                    }
                }
                opCurrencyCode = bCurrency.CurrencyCode;
                opCurrencyID = bCurrency.CurrencyID;
            }
        }

        /// <summary>
        /// This method return wish dates have to be enable on AP Invoice.
        /// </summary>
        /// <param name="EnApplyDate">Enable Apply Date.</param>
        /// <param name="EnTaxPDate">Enable Tax Point Date.</param>
        /// <param name="EnTaxRDate">Enable Tax Rate Date.</param>
        public void EnableAPDates(out bool EnApplyDate, out bool EnTaxPDate, out bool EnTaxRDate)
        {
            EnApplyDate = true;
            EnTaxPDate = true;
            EnTaxRDate = true;

            apSystPartial = FindPartialAPSyst(Session.CompanyID);

            if (apSystPartial != null)
            {
                if (apSystPartial.DatesSetUp)
                {
                    EnApplyDate = apSystPartial.APAmdApplyDate;
                    EnTaxPDate = apSystPartial.APAmdTaxPDate;
                    EnTaxRDate = apSystPartial.APAmdTaxRateD;
                }
                else
                {
                    EnApplyDate = true;
                    EnTaxPDate = true;
                    EnTaxRDate = true;
                }
            }
            else
            {
                EnApplyDate = true;
                EnTaxPDate = true;
                EnTaxRDate = true;
            }
        }

        #region EntityGLC
        partial void EntityGLCAfterGetRows()
        {
            LibEntityGLC.AssignForeignKey(ttEntityGLC, "VendorNum", "InvoiceNum");
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, Compatibility.Convert.ToInt32(ttEntityGLC.Key1), ttEntityGLC.Key2);
            if (APInvHed != null)
            {
                ttEntityGLC.GroupID = APInvHed.GroupID;
            }
        }

        partial void EntityGLCAfterGetNew()
        {
            LibEntityGLC.AssignForeignKey(ttEntityGLC, "VendorNum", "InvoiceNum");
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, Compatibility.Convert.ToInt32(ttEntityGLC.Key1), ttEntityGLC.Key2);
            if (APInvHed != null)
            {
                ttEntityGLC.GroupID = APInvHed.GroupID;
            }
        }

        partial void EntityGLCBeforeUpdate()
        {
            LibEntityGLC.EntityGLCBeforeUpdate(ttEntityGLC);
        }
        #endregion

        private void genBOEapInvdtl(int inBOEVendorNum, string inBOEInvoiceNum, string inInvoiceRef, bool hasUnpaidDetraction)
        {
            decimal PEDetAmt = decimal.Zero;
            decimal DocPEDetAmt = decimal.Zero;
            APInvDtlBeforeGetNew();/* Optional procedure */

            createttAPInvDtl(inBOEVendorNum, inBOEInvoiceNum, "M", 0, 0);

            curInvoiceLine = ttAPInvDtl.InvoiceLine;

            /* from this point forward if processing is aborted, the ttInvcDtl record must be explicitly deleted
               before leaving genInvcDtl because the table definition for the BO has the no-undo clause for the table, so the new ttInvcDtl
               will not be undone due to error processing and will get returned to the UI via MassGenerateInvcDtl since
               it does not throw exceptions */
            APInvDtlAfterCreate();
            APInvDtlAfterGetNew();

            if (ExceptionManager.Exceptions.Count != 0)
            {
                CurrentFullTableset.APInvDtl.Remove(ttAPInvDtl);
                ExceptionManager.AssertNoBLExceptions();
            }

            ttAPInvDtl.InvoiceRef = inInvoiceRef;
            ApInvDtlInvoiceRefChanged(inInvoiceRef);
            if (ExceptionManager.Exceptions.Count != 0)
            {
                CurrentFullTableset.APInvDtl.Remove(ttAPInvDtl);
                ExceptionManager.AssertNoBLExceptions();
            }

            /* if a successful validation, create record in dataset and return temp-table */
            using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
            {
                APInvDtl = new Erp.Tables.APInvDtl();
                Db.APInvDtl.Insert(APInvDtl);
                BufferCopy.CopyExceptFor(ttAPInvDtl, APInvDtl, APInvDtl.ColumnNames.SysRevID, APInvDtl.ColumnNames.SysRowID);
                ExceptionManager.AssertNoBLExceptions();
                if (Local010 != null)
                {
                    Db.Release(ref Local010);
                }
                if (hasUnpaidDetraction)
                {
                    APInvHed apInvHed = FindFirstAPInvHed(Session.CompanyID, APInvDtl.VendorNum, inInvoiceRef);
                    if (apInvHed != null)
                    {
                        PEDetAmt = apInvHed.PEDetTaxAmt;
                        DocPEDetAmt = apInvHed.DocPEDetTaxAmt;
                    }
                    ttAPInvDtl.DocPEDetAmt = DocPEDetAmt;
                    var outPEDetAmt = ttAPInvDtl.PEDetAmt;
                    var outRpt1PEDetAmt = ttAPInvDtl.Rpt1PEDetAmt;
                    var outRpt2PEDetAmt = ttAPInvDtl.Rpt2PEDetAmt;
                    var outRpt3PEDetAmt = ttAPInvDtl.Rpt3PEDetAmt;
                    CalcBaseAmt(ttAPInvDtl.DocPEDetAmt, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "PEDetAmt", out outPEDetAmt, out outRpt1PEDetAmt, out outRpt2PEDetAmt, out outRpt3PEDetAmt);
                    ttAPInvDtl.PEDetAmt = outPEDetAmt;
                    ttAPInvDtl.Rpt1PEDetAmt = outRpt1PEDetAmt;
                    ttAPInvDtl.Rpt2PEDetAmt = outRpt2PEDetAmt;
                    ttAPInvDtl.Rpt3PEDetAmt = outRpt3PEDetAmt;

                    ttAPInvDtl.UnitCost = ttAPInvDtl.UnitCost - ttAPInvDtl.PEDetAmt;
                    ttAPInvDtl.ScrExtCost = ttAPInvDtl.ScrExtCost - ttAPInvDtl.PEDetAmt;
                    ttAPInvDtl.DocUnitCost = ttAPInvDtl.DocUnitCost - ttAPInvDtl.DocPEDetAmt;
                    ttAPInvDtl.ScrDocExtCost = ttAPInvDtl.ScrDocExtCost - ttAPInvDtl.DocPEDetAmt;
                    ttAPInvDtl.Rpt1UnitCost = ttAPInvDtl.Rpt1UnitCost - ttAPInvDtl.Rpt1PEDetAmt;
                    ttAPInvDtl.Rpt1ScrExtCost = ttAPInvDtl.Rpt1ScrExtCost - ttAPInvDtl.Rpt1PEDetAmt;
                    ttAPInvDtl.Rpt2UnitCost = ttAPInvDtl.Rpt2UnitCost - ttAPInvDtl.Rpt2PEDetAmt;
                    ttAPInvDtl.Rpt2ScrExtCost = ttAPInvDtl.Rpt2ScrExtCost - ttAPInvDtl.Rpt2PEDetAmt;
                    ttAPInvDtl.Rpt3UnitCost = ttAPInvDtl.Rpt3UnitCost - ttAPInvDtl.Rpt3PEDetAmt;
                    ttAPInvDtl.Rpt3ScrExtCost = ttAPInvDtl.Rpt3ScrExtCost - ttAPInvDtl.Rpt3PEDetAmt;
                }

                APInvDtlBeforeUpdate();

                if (ExceptionManager.Exceptions.Count != 0)
                {
                    CurrentFullTableset.APInvDtl.Remove(ttAPInvDtl);
                    ExceptionManager.AssertNoBLExceptions();
                }
                BufferCopy.CopyExceptFor(ttAPInvDtl, APInvDtl, APInvDtl.ColumnNames.SysRevID, APInvDtl.ColumnNames.SysRowID);
                Db.Validate(APInvDtl);/* To FIRE OFF DB TRIGGERS NOW! */
                ttAPInvDtl.SysRowID = APInvDtl.SysRowID;
                APInvDtlAfterUpdate();
                APGeneratePaymentFromBOE.CreateDetails(APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine);
                Db.Validate();
                trans.Complete();
            }
        }

        /// <summary>
        /// Method to call to generate rebates.
        /// </summary>
        /// <param name="invoiceType">The invoice type</param>
        /// <param name="groupID">The group id</param>
        /// <param name="opMsg">The output message.</param>
        /// <param name="ds"></param>
        public void GenerateRebateInv(string invoiceType, string groupID, out string opMsg, RebateInvTableset ds)
        {
            opMsg = string.Empty;
            DateTime? vExDate = null;
            int vUseDate = 0;
            string pCurrList = string.Empty;
            string pRateList = string.Empty;

            ARRebateInv.GenerateRebateInv(invoiceType, groupID, out opMsg, ds.RebateInv, ref vExDate, ref vUseDate, ref pCurrList, ref pRateList);
        }

        /// <summary>
        /// Method to call to get a rebate list
        /// </summary>
        /// <returns></returns>
        /// <param name="invoiceType">The invoice type</param>
        public RebateInvTableset GetRebateInvList(string invoiceType)
        {
            Erp.Tablesets.RebateInvTableset ds = new RebateInvTableset();
            ARRebateInv.GetRebateInvList(invoiceType, ds.RebateInv);

            return ds;
        }

        private void getGLDistTotals(out decimal dGLDistTotal, out decimal dDocGLDistTotal, out decimal dRpt1GLDistTotal, out decimal dRpt2GLDistTotal, out decimal dRpt3GLDistTotal)
        {
            /* SCR105962 Add procedure */
            dGLDistTotal = decimal.Zero;
            dDocGLDistTotal = decimal.Zero;
            dRpt1GLDistTotal = decimal.Zero;
            dRpt2GLDistTotal = decimal.Zero;
            dRpt3GLDistTotal = decimal.Zero;

            var APInvExpGroupResults = SelectSumAPInvExp(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum, 0);
            if (APInvExpGroupResults != null)
            {
                dGLDistTotal = dGLDistTotal + APInvExpGroupResults.ExpAmt;
                dDocGLDistTotal = dDocGLDistTotal + APInvExpGroupResults.DocExpAmt;
                dRpt1GLDistTotal = dRpt1GLDistTotal + APInvExpGroupResults.Rpt1ExpAmt;
                dRpt2GLDistTotal = dRpt2GLDistTotal + APInvExpGroupResults.Rpt2ExpAmt;
                dRpt3GLDistTotal = dRpt3GLDistTotal + APInvExpGroupResults.Rpt3ExpAmt;
            }
        }


        private void getAPInvHedAttributes(int iVendorNum, string cInvoiceNum, out bool lDebitMemo, out bool lPosted, out string cGroupID)
        {
            lDebitMemo = false;
            lPosted = true;
            cGroupID = string.Empty;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, iVendorNum, cInvoiceNum);
            if (APInvHed != null)
            {
                lDebitMemo = APInvHed.DebitMemo;
                lPosted = APInvHed.Posted;
                cGroupID = APInvHed.GroupID;
            }
        }

        /// <summary>
        /// Method to call to retrieve the POMisc records that can be added to an AP Invoice Header
        /// or an AP Invoice Line.  This method will create the available po misc charges for the invoice
        /// and all lines of the invoice.
        /// </summary>
        /// <returns></returns>
        /// <param name="InVendorNum">The vendor number on the invoice.</param>
        /// <param name="InInvoiceNum">The invoice number.</param>
        public APInvPOMiscTableset GetAPInvPOMisc(int InVendorNum, string InInvoiceNum)
        {
            APInvPOMiscTableset ttAPInvPOMiscTablesetDS = new APInvPOMiscTableset();

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, InVendorNum, InInvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvalidAPInvoice, "APInvHed");
            }

            if (APInvHed.REFPONum != 0)
            {
                foreach (var PoMscHead__iterator in (this.SelectPOMisc(Session.CompanyID, APInvHed.REFPONum, 0)))
                {
                    POMisc = PoMscHead__iterator;
                    if (POMisc.DocMiscAmt - POMisc.DocInvoicedAmt != 0)
                    {
                        createttAPInvPOMisc(ttAPInvPOMiscTablesetDS);
                    }
                }

            }

            foreach (var APInvDtl_iterator in (SelectAPInvDtl(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
            {
                if (APInvDtl_iterator.PONum > 0)
                {

                    var POMiscQuery3 = DBExpressionCompiler.Compile(POMiscExpression3);
                    foreach (var POMisc_iterator in (POMiscQuery3(Db, APInvHed.Company, APInvDtl_iterator.PONum, 0)))
                    {
                        POMisc = POMisc_iterator;
                        if (POMisc.MiscAmt - POMisc.InvoicedAmt == 0)
                        {
                            continue;
                        }

                        createttAPInvPOMisc(ttAPInvPOMiscTablesetDS);
                    }
                }
            }

            /* if APInvHed.REFPONum > 0 */
            /* Create APInvPOMisc records for the detail lines.  Records get created for
               po misc charges tied to the POHeader and for the POLine record from the
               invoice detail record. */

            var APInvDtlQuery24 = DBExpressionCompiler.Compile(APInvDtlExpression24);
            foreach (var APInvDtl_iterator in (APInvDtlQuery24(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, 0)))
            {
                APInvDtl = APInvDtl_iterator;


                var POMiscQuery4 = DBExpressionCompiler.Compile(POMiscExpression4);
                //POMiscForLines_LOOP:
                foreach (var POMisc_iterator in (POMiscQuery4(Db, APInvDtl.Company, APInvDtl.PONum)))
                {
                    POMisc = POMisc_iterator;
                    if (APInvDtl.POLine != 0 &&
                    POMisc.POLine != 0 &&
                    APInvDtl.POLine != POMisc.POLine)
                    {
                        continue;
                    }



                    ttAPInvPOMisc = (from ttAPInvPOMisc_Row in ttAPInvPOMiscTablesetDS.APInvPOMisc
                                     where ttAPInvPOMisc_Row.SysRowID == POMisc.SysRowID
                                     select ttAPInvPOMisc_Row).FirstOrDefault();
                    if (ttAPInvPOMisc != null)
                    {
                        continue;
                    }
                    /* If the balance is zero, skip the record. */
                    if (POMisc.MiscAmt - POMisc.InvoicedAmt == 0)
                    {
                        continue;
                    }

                    createttAPInvPOMisc(ttAPInvPOMiscTablesetDS);
                }/* for each POMisc */
            }
            return ttAPInvPOMiscTablesetDS;
        }

        private void getAPUninvoicedDropShipments(int InVendorNum, string InInvoiceNum, int InPONum, ref APInvReceiptBillingTableset ds)
        {
            int currentPO = 0;
            var DropShipHeadQuery = DBExpressionCompiler.Compile(DropShipHeadExpression);
            bool firstTransaction = !(ds.APUninvoicedReceipts.Any());
            //DropShipHead_LOOP:

            Erp.Tablesets.APReceiptTotalsRow ttAPReceiptTotalsReceipts = new Erp.Tablesets.APReceiptTotalsRow();
            if (ds.APReceiptTotals.Count == 0)
            {
                ds.APReceiptTotals.Add(ttAPReceiptTotalsReceipts);
                ttAPReceiptTotalsReceipts.CurrencyCode = APInvHed.CurrencyCode;
                ttAPReceiptTotalsReceipts.VendorNum = InVendorNum;
                ttAPReceiptTotalsReceipts.Company = Session.CompanyID;
                ttAPReceiptTotalsReceipts.InvoiceNum = InInvoiceNum;
                ttAPReceiptTotalsReceipts.RowMod = Ice.IceRow.ROWSTATE_UPDATED;
            }
            else
                ttAPReceiptTotalsReceipts = ds.APReceiptTotals.Where(x => x.Company.KeyEquals(Session.CompanyID) && x.VendorNum == InVendorNum && x.InvoiceNum.KeyEquals(InInvoiceNum)).FirstOrDefault();


            foreach (var DropShipHead_iterator in (DropShipHeadQuery(Db, APInvHed.Company, APInvHed.VendorNum, false, true)))
            {
                DropShipHead = DropShipHead_iterator;
                if (InPONum != 0)
                {
                    currentPO = InPONum;
                    if (DropShipHead.PONum != InPONum)
                    {
                        var DropShipDtlQuery = DBExpressionCompiler.Compile(DropShipDtlExpression);
                        if (!(DropShipDtlQuery(Db, Session.CompanyID, DropShipHead.VendorNum, DropShipHead.PurPoint, DropShipHead.PackSlip, InPONum)))
                        {
                            continue;
                        }
                    }
                }
                else
                {
                    currentPO = DropShipHead.PONum;
                }

                POHeader = FindFirstPOHeader(DropShipHead.Company, currentPO);

                var DropShipDtlQuery2 = DBExpressionCompiler.Compile(DropShipDtlExpression2);
                if (!((DropShipDtlQuery2(Db, DropShipHead.Company, DropShipHead.VendorNum, DropShipHead.PurPoint, DropShipHead.PackSlip, false))))
                {
                    continue;
                }
                /* If the po is a consolidated po and it is not the global po, skip the record. */
                if (POHeader != null &&
                POHeader.ConsolidatedPO == true &&
                !String.IsNullOrEmpty(POHeader.GlbCompany))
                {
                    continue;
                }
                ttAPUninvoicedReceipts = new Erp.Tablesets.APUninvoicedReceiptsRow();
                ds.APUninvoicedReceipts.Add(ttAPUninvoicedReceipts);
                ttAPUninvoicedReceipts.Company = DropShipHead.Company;
                ttAPUninvoicedReceipts.VendorNum = DropShipHead.VendorNum;
                ttAPUninvoicedReceipts.PONum = currentPO;
                ttAPUninvoicedReceipts.DropShipPackSlip = DropShipHead.PackSlip;
                ttAPUninvoicedReceipts.PackSlip = DropShipHead.PackSlip;
                ttAPUninvoicedReceipts.DummyKey = DropShipHead.SysRowID.ToString();
                ttAPUninvoicedReceipts.DropShip = true;
                ttAPUninvoicedReceipts.ReceiptDate = DropShipHead.ReceiptDate;
                ttAPUninvoicedReceipts.PurPoint = DropShipHead.PurPoint;
                ttAPUninvoicedReceipts.InvoiceNum = InInvoiceNum;
                ttAPUninvoicedReceipts.SysRowID = DropShipHead.SysRowID;
                ttAPUninvoicedReceipts.BaseCurrSymbol = getBaseCurrSymbol();
                ttAPUninvoicedReceipts.BaseCurrencyID = getBaseCurrID();
                ttAPUninvoicedReceipts.CurrencyCode = APInvHed.CurrencyCode;
                var outCurrSymbol8 = ttAPUninvoicedReceipts.CurrSymbol;
                var outCurrencySwitch9 = ttAPUninvoicedReceipts.CurrencySwitch;
                var outCurrencyID3 = ttAPUninvoicedReceipts.CurrencyID;
                getCurrencyInfo(APInvHed.CurrencyCode, out outCurrSymbol8, out outCurrencySwitch9, out outCurrencyID3);
                ttAPUninvoicedReceipts.CurrSymbol = outCurrSymbol8;
                ttAPUninvoicedReceipts.CurrencySwitch = outCurrencySwitch9;
                ttAPUninvoicedReceipts.CurrencyID = outCurrencyID3;
                ttAPUninvoicedReceipts.RowMod = Ice.IceRow.ROWSTATE_UPDATED;

                if (firstTransaction && !Erp.Internal.Lib.ErpCallContext.ContainsKey("GetReceipts"))
                {
                    this.GetAPUninvoicedDropShipmentLines(ttAPUninvoicedReceipts.VendorNum, ttAPUninvoicedReceipts.PurPoint, ttAPUninvoicedReceipts.PackSlip, ttAPUninvoicedReceipts.InvoiceNum, ref ds);
                    firstTransaction = false;
                }
                if (Erp.Internal.Lib.ErpCallContext.ContainsKey("GetReceipts"))
                {
                    this.GetAPUninvoicedDropShipmentLines(ttAPUninvoicedReceipts.VendorNum, ttAPUninvoicedReceipts.PurPoint, ttAPUninvoicedReceipts.PackSlip, ttAPUninvoicedReceipts.InvoiceNum, ref ds);
                    ttAPUninvoicedReceipts.AllSelected = true;
                    ttAPUninvoicedReceipts.RowMod = Ice.IceRow.ROWSTATE_UPDATED;
                    SelectUninvoicedRcptLines(ref ds, ttAPUninvoicedReceipts.VendorNum, ttAPUninvoicedReceipts.PurPoint, currentPO, ttAPUninvoicedReceipts.PackSlip, true, InInvoiceNum, false);

                }

            }
        }

        /// <summary>
        /// Method to call to get uninvoiced receipts for Receipt billing.
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="InVendorNum">The APInvHed Vendor Number</param>
        /// <param name="InInvoiceNum">The APInvHed Invoice Number</param>
        /// <param name="InPONum">The PO Number to retrieve uninvoiced receipts for.  May be blank.</param>
        public void GetAPUninvoicedReceipts(ref APInvReceiptBillingTableset ds, int InVendorNum, string InInvoiceNum, int InPONum)
        {
            int currentPO = 0;
            bool isFirstReceipt = true;
            Erp.Tablesets.APUninvoicedReceiptsRow APUninvoicedReceiptsRow = null;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, InVendorNum, InInvoiceNum);
            if (APInvHed == null)
                throw new BLException(Strings.InvalidAPInvoice, "APInvHed");

            if (APInvHed.Posted == true)
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvHed");

            if (APInvHed.DebitMemo == true)
                throw new BLException(Strings.AddingUninvReceiToADebitMemoIsNotAllowed, "APInvHed");

            if (!Erp.Internal.Lib.ErpCallContext.ContainsKey("GetReceipts"))
            {
                ds.APUninvoicedRcptLines.Clear();
                ds.APUninvoicedReceipts.Clear();
            }

            Erp.Tablesets.APReceiptTotalsRow ttAPReceiptTotalsReceipts = new Erp.Tablesets.APReceiptTotalsRow();
            if (ds.APReceiptTotals.Count == 0)
            {
                ds.APReceiptTotals.Add(ttAPReceiptTotalsReceipts);
                ttAPReceiptTotalsReceipts.CurrencyCode = APInvHed.CurrencyCode;
                ttAPReceiptTotalsReceipts.VendorNum = InVendorNum;
                ttAPReceiptTotalsReceipts.Company = Session.CompanyID;
                ttAPReceiptTotalsReceipts.InvoiceNum = InInvoiceNum;
                ttAPReceiptTotalsReceipts.RowMod = Ice.IceRow.ROWSTATE_UPDATED;
            }
            else
                ttAPReceiptTotalsReceipts = ds.APReceiptTotals.Where(x => x.Company.KeyEquals(Session.CompanyID) && x.VendorNum == InVendorNum && x.InvoiceNum.KeyEquals(InInvoiceNum)).FirstOrDefault();

            foreach (ReceiptInv.VendorExpressionResult RcvHead_iterator in APReceiptInv.SelectRcvHead(APInvHed.Company, APInvHed.VendorNum, isIndiaLocalization, APInvHed.TaxRegionCode, null, null))
            {
                RcvHead = RcvHead_iterator.RcvHead;
                if (InPONum != 0)
                {
                    currentPO = InPONum;
                    if (RcvHead.PONum != InPONum)
                    {
                        var RcvDtlQuery3 = DBExpressionCompiler.Compile(RcvDtlExpression3);
                        if (!RcvDtlQuery3(Db, Session.CompanyID, RcvHead.VendorNum, RcvHead.PurPoint, RcvHead.PackSlip, InPONum))
                            continue;
                    }
                }
                else
                {
                    currentPO = RcvHead.PONum;
                }

                var RcvDtlQuery4 = DBExpressionCompiler.Compile(RcvDtlExpression4);
                if (!RcvDtlQuery4(Db, RcvHead.Company, RcvHead.VendorNum, RcvHead.PurPoint, RcvHead.PackSlip, true, "Std", "SMI", true, false))
                    continue;

                //Validate there are receipt lines for this Rcvhead with no invoice detail record already created for this receipt line
                if (!existsRcvDtlNotInvoiced(Session.CompanyID, RcvHead.PackSlip, RcvHead.VendorNum, InInvoiceNum))
                    continue;

                /* If the po is a consolidated po and it is not the global po, skip the record. */
                POHeader = FindFirstPOHeader(RcvHead.Company, currentPO);
                if (POHeader != null && POHeader.ConsolidatedPO == true && !String.IsNullOrEmpty(POHeader.GlbCompany))
                    continue;

                // Search if the receipt already exists in the APUninvoicedReceipts table
                APUninvoicedReceiptsRow = ds.APUninvoicedReceipts.FirstOrDefault(
                    row => row.Company.KeyEquals(RcvHead.Company) && row.VendorNum == RcvHead.VendorNum
                        && row.PONum == currentPO
                        && row.PackSlip.KeyEquals(RcvHead.PackSlip) && row.SysRowID == RcvHead.SysRowID);

                if (APUninvoicedReceiptsRow == null)
                {
                    // If the receipt does not exist, create a new row
                    ttAPUninvoicedReceipts = new Erp.Tablesets.APUninvoicedReceiptsRow();
                    ds.APUninvoicedReceipts.Add(ttAPUninvoicedReceipts);
                    ttAPUninvoicedReceipts.Company = RcvHead.Company;
                    ttAPUninvoicedReceipts.VendorNum = RcvHead.VendorNum;
                    ttAPUninvoicedReceipts.PONum = currentPO;
                    ttAPUninvoicedReceipts.PackSlip = RcvHead.PackSlip;
                    ttAPUninvoicedReceipts.DummyKey = RcvHead.SysRowID.ToString();
                    ttAPUninvoicedReceipts.ReceiptDate = RcvHead.ReceiptDate;
                    ttAPUninvoicedReceipts.PurPoint = RcvHead.PurPoint;
                    ttAPUninvoicedReceipts.InvoiceNum = InInvoiceNum;
                    ttAPUninvoicedReceipts.LegalNumber = RcvHead.LegalNumber;
                    ttAPUninvoicedReceipts.SysRowID = RcvHead.SysRowID;
                    ttAPUninvoicedReceipts.BaseCurrSymbol = getBaseCurrSymbol();
                    ttAPUninvoicedReceipts.BaseCurrencyID = getBaseCurrID();
                    ttAPUninvoicedReceipts.CurrencyCode = APInvHed.CurrencyCode;
                    var outCurrSymbol = ttAPUninvoicedReceipts.CurrSymbol;
                    var outCurrencySwitch = ttAPUninvoicedReceipts.CurrencySwitch;
                    var outCurrencyID = ttAPUninvoicedReceipts.CurrencyID;
                    getCurrencyInfo(APInvHed.CurrencyCode, out outCurrSymbol, out outCurrencySwitch, out outCurrencyID);
                    ttAPUninvoicedReceipts.CurrSymbol = outCurrSymbol;
                    ttAPUninvoicedReceipts.CurrencySwitch = outCurrencySwitch;
                    ttAPUninvoicedReceipts.CurrencyID = outCurrencyID;
                    ttAPUninvoicedReceipts.RowMod = Ice.IceRow.ROWSTATE_UPDATED;
                }


                /* Get unmatched lines */
                if (isFirstReceipt && !Erp.Internal.Lib.ErpCallContext.ContainsKey("GetReceipts"))
                {
                    GetAPUninvoicedReceiptLines(ref ds, ttAPUninvoicedReceipts.VendorNum, ttAPUninvoicedReceipts.PurPoint, ttAPUninvoicedReceipts.PackSlip, isFirstReceipt, InInvoiceNum, InPONum);
                    isFirstReceipt = false;
                }
                if (Erp.Internal.Lib.ErpCallContext.ContainsKey("GetReceipts"))
                {
                    GetAPUninvoicedReceiptLines(ref ds, ttAPUninvoicedReceipts.VendorNum, ttAPUninvoicedReceipts.PurPoint, ttAPUninvoicedReceipts.PackSlip, isFirstReceipt, InInvoiceNum, InPONum);
                    ttAPUninvoicedReceipts.AllSelected = true;
                    ttAPUninvoicedReceipts.RowMod = Ice.IceRow.ROWSTATE_UPDATED;
                    SelectUninvoicedRcptLines(ref ds, ttAPUninvoicedReceipts.VendorNum, ttAPUninvoicedReceipts.PurPoint, currentPO, ttAPUninvoicedReceipts.PackSlip, false, InInvoiceNum, false);

                }
            }

            getAPUninvoicedDropShipments(InVendorNum, InInvoiceNum, InPONum, ref ds);
        }

        /// <summary>
        /// Method to call to get uninvoiced receipts for Receipt billing and select them for invoicing.
        /// </summary>
        /// <param name="InVendorNum">The APInvHed Vendor Number</param>
        /// <param name="InInvoiceNum">The APInvHed Invoice Number</param>
        /// <param name="InPONumList">Delimited list of PO numbers to retrieve uninvoiced receipts for.  May be blank to retrieve all POs.</param>
        public APInvReceiptBillingTableset GetAPUninvoicedReceiptsSelectAll(int InVendorNum, string InInvoiceNum, string InPONumList)
        {
            TaxRegPartialRow inPriceTaxRegionCode = new TaxRegPartialRow();
            POHeaderTaxRegCodePartialRow POTaxRegionCode = new POHeaderTaxRegCodePartialRow();
            int NumPOs = 0;
            int InPONum = 0;

            APInvReceiptBillingTableset ds = new APInvReceiptBillingTableset();
            using (Internal.Lib.ErpCallContext.SetDisposableKey("GetReceipts"))
            using (TransactionScope txScope = ErpContext.CreateDefaultTransactionScope())

            {
                string ipGroupID = string.Empty;
                ipGroupID = String.Format("B{0:D7}", (new Random()).Next(1, 9999999));
                CreateGroup(ipGroupID);
                Vendor = FindFirstVendor(Session.CompanyID, InVendorNum);
                if (Vendor == null)
                    throw new BLException(Strings.InvalidVendor, "APInvHed", "VendorNum");

                FiscalPer = this.FindFirstFiscalPer(Session.CompanyID, CompanyFiscalCalendarID, CompanyTime.Today(), CompanyTime.Today());
                if (FiscalPer == null)
                {
                    throw new BLException(Strings.FiscalPeriodNotFound(CompanyTime.Today()), "APInvHed");
                }

                if (String.IsNullOrEmpty(InPONumList) || InPONumList.NumEntries(",") > 1)
                    inPriceTaxRegionCode = FindFirstInPriceTaxRegionCode(Session.CompanyID, Vendor.TaxRegionCode);
                else
                {
                    POTaxRegionCode = FindFirstPOTaxRegionCode(Session.CompanyID, Vendor.VendorNum, Compatibility.Convert.ToInt32(InPONumList.Entry(NumPOs, ',')));

                    if (POTaxRegionCode != null && !String.IsNullOrEmpty(POTaxRegionCode.TaxRegionCode))
                        inPriceTaxRegionCode = FindFirstInPriceTaxRegionCode(Session.CompanyID, POTaxRegionCode.TaxRegionCode);
                    else
                        inPriceTaxRegionCode = FindFirstInPriceTaxRegionCode(Session.CompanyID, Vendor.TaxRegionCode);
                }

                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, InVendorNum, InInvoiceNum);
                if (APInvHed == null)
                {
                    apSystPartial = FindPartialAPSyst(Session.CompanyID);

                    XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
                    if (XbSyst != null)
                    {
                        vRateGrpCode = XbSyst.PORateGrp;
                    }

                    APInvHed = new Erp.Tables.APInvHed();
                    Db.APInvHed.Insert(APInvHed);

                    APInvHed.Company = Session.CompanyID;
                    APInvHed.VendorNum = Vendor.VendorNum;
                    APInvHed.InvoiceNum = InInvoiceNum;
                    APInvHed.GroupID = ipGroupID;
                    APInvHed.FiscalPeriod = FiscalPer.FiscalPeriod;
                    APInvHed.FiscalYear = FiscalPer.FiscalYear;
                    APInvHed.FiscalYearSuffix = FiscalPer.FiscalYearSuffix;
                    APInvHed.FiscalCalendarID = FiscalPer.FiscalCalendarID;
                    APInvHed.InvoiceDate = CompanyTime.Today();
                    APInvHed.ApplyDate = CompanyTime.Today();
                    APInvHed.TaxRateDate = APInvHed.ApplyDate;
                    APInvHed.TaxPoint = APInvHed.ApplyDate;
                    APInvHed.APTaxRoundOption = apSystPartial.APTaxRoundOption;
                    APInvHed.ReadyToCalc = apSystPartial.InvcReadyToCalcDflt;
                    APInvHed.EntryPerson = Session.UserID;
                    APInvHed.DebitMemo = false;
                    APInvHed.RateGrpCode = vRateGrpCode;
                    APInvHed.TermsCode = Vendor.TermsCode;
                    APInvHed.CurrencyCode = Vendor.CurrencyCode;
                    if (inPriceTaxRegionCode != null)
                        APInvHed.InPrice = inPriceTaxRegionCode.InPrice;

                    Db.Validate(APInvHed);


                    foreach (var CurrExChain_iterator in SelectCurrExChainWithUpdLock(Session.CompanyID, "APInvHed", Compatibility.Convert.ToString(Vendor.VendorNum), Compatibility.Convert.ToString(InInvoiceNum)))
                    {
                        CurrExChain = CurrExChain_iterator;
                        Db.CurrExChain.Delete(CurrExChain);
                        Db.Validate(CurrExChain);
                    }

                    vExDate = APInvHed.InvoiceDate;

                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(Vendor.VendorNum), InInvoiceNum, "", "", "", "", "", "",
                    APInvHed.CurrencyCode, vRateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);


                    foreach (var libconvertamtefttChainRow in (from ttChain_Row in ttChainRows
                                                               select ttChain_Row))
                    {
                        var ttChainRow = libconvertamtefttChainRow;
                        CurrExChain = new Erp.Tables.CurrExChain();
                        Db.CurrExChain.Insert(CurrExChain);
                        CurrExChain.TableName = "APInvHed";
                        CurrExChain.Company = APInvHed.Company;
                        CurrExChain.Key1 = Compatibility.Convert.ToString(APInvHed.VendorNum);
                        CurrExChain.Key2 = Compatibility.Convert.ToString(APInvHed.InvoiceNum);
                        BufferCopy.CopyExceptFor(ttChainRow, CurrExChain, CurrExChain.ColumnNames.TableName, CurrExChain.ColumnNames.Company, CurrExChain.ColumnNames.Key1, CurrExChain.ColumnNames.Key2, CurrExChain.ColumnNames.SysRevID, CurrExChain.ColumnNames.SysRowID);
                        Db.Validate(CurrExChain);
                    }
                    Db.Release(ref APInvHed);

                }




                ds.APUninvoicedRcptLines.Clear();
                ds.APUninvoicedReceipts.Clear();
                ds.APReceiptTotals.Clear();
                ds.APSelectedRcptLines.Clear();

                if (String.IsNullOrEmpty(InPONumList))
                {
                    GetAPUninvoicedReceipts(ref ds, InVendorNum, InInvoiceNum, InPONum);
                }
                else
                {
                    for (NumPOs = 1; NumPOs <= InPONumList.NumEntries(","); NumPOs++)  // verify delimiter
                    {
                        InPONum = Compatibility.Convert.ToInt32(InPONumList.Entry(NumPOs - 1, ','));
                        GetAPUninvoicedReceipts(ref ds, InVendorNum, InInvoiceNum, InPONum);

                    }
                }


                //It is intended NOT to commit transaction
                //Do NOT uncomment the transaction commit code.
                //Db.Validate();
                //txScope.Complete();

            }
            return ds;

        }

        private void getBillAddressList()
        {
            if (Vendor == null)
            {
                Vendor = Vendor.FindFirstByPrimaryKey(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum);
            }
            if (Vendor != null)
            {
                string addrList = string.Empty;
                LibAddrBld.AddressBuild(7, Vendor.Name, Vendor.Address1, Vendor.Address2, Vendor.Address3, Vendor.City, Vendor.State, Vendor.ZIP, Vendor.Country, out addrList);
                ttAPInvHed.BillAddressList = addrList;
            }
            else
            {
                ttAPInvHed.BillAddressList = "";
            }
        }

        /// <summary>
        /// Method to call to get available tran doc types. 
        /// </summary>
        /// <param name="AvailTypes">The available tran doc types</param>
        public void GetAvailTranDocTypes(out string AvailTypes)
        {
            AvailTypes = string.Empty;
            LibGetAvailTranDocTypes.RunGetAvailTranDocTypes(out AvailTypes, "APInvoice,DebitMemo,APBillExch,ManualGRNI");
        }

        /// <summary>
        /// Method to call to get a Code Description list. 
        /// </summary>
        /// <param name="tableName">The table name</param>
        /// <param name="fieldName">The field name.</param>
        public string GetCodeDescList(string tableName, string fieldName)
        {
            string myList = string.Empty;
            myList = LibGetcodedesclist.GetCodeDescList(Session.SystemCode, tableName, fieldName);
            return myList;
        }

        private void GetCurrency(string cCurrencyCode)
        {


            Currency = FindFirstCurrencyWithCode(Session.CompanyID, cCurrencyCode);
            if (Currency != null)
            {
                if (Currency.BaseCurr == true)
                {
                    ttAPInvHed.LockRate = false;
                    ttAPInvHed.EnableLockRate = false;
                    ttAPInvHed.EnableExchangeRate = false;
                    ttAPInvHed.LockTaxRate = false;
                    ttAPInvHed.EnableTaxLock = false;
                    ttAPInvHed.EnableTaxExRate = false;
                }
                else
                {
                    ttAPInvHed.EnableExchangeRate = ttAPInvHed.LockRate;
                    if (ttAPInvHed.UseTaxRate)
                    {
                        ttAPInvHed.EnableTaxExRate = ttAPInvHed.LockTaxRate;
                    }
                    else
                    {
                        ttAPInvHed.EnableTaxExRate = false;
                    }
                }
                ttAPInvHed.CurrencyCode = Currency.CurrencyCode;
            }
            else
            {
                ttAPInvHed.EnableExchangeRate = false;
                ttAPInvHed.EnableTaxExRate = false;
                ttAPInvHed.CurrencyCode = "";
            }
        }

        private void getCurrencyInfo(string cCurrencyCode, out string cCurrSymbol, out bool lCurrencySwitch, out string cCurrencyID)
        {
            lCurrencySwitch = false;
            cCurrSymbol = string.Empty;
            cCurrencyID = string.Empty;

            var PartialCurrency = this.SelectCurrency(Session.CompanyID, cCurrencyCode);
            if (PartialCurrency != null)
            {
                cCurrSymbol = PartialCurrency.CurrSymbol;
                cCurrencyID = PartialCurrency.CurrencyID;
                /* validate if the currencyCode is Base */
                if (PartialCurrency.BaseCurr)
                {
                    v_currCode = PartialCurrency.CurrencyCode;
                }
                else
                {
                    v_currCode = this.SelectBaseCurrencyCode(Session.CompanyID, true);
                }
            }
            lCurrencySwitch = (StringExtensions.Compare(cCurrencyCode, v_currCode) == 0);
        }


        /// <summary>
        /// Method to call to get DMR Correction Invoice Requests. 
        /// </summary>
        /// <param name="AddToGroupID">The group id to add the invoices to</param>
        /// <param name="ReturnMsg">Text of a message to inform the user of how many invoices were created.
        /// Informational only.</param>
        /// <param name="ds">The APInvoice data set</param>
        public void GetDMRCorrInvRequests(string AddToGroupID, out string ReturnMsg, ref APInvoiceTableset ds)
        {
            ReturnMsg = string.Empty;
            CurrentFullTableset = ds;
            string vInvoiceNum = string.Empty;
            Dictionary<string, string> vInvoicesList =
                new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase);
            int vNumInvoicesCreated = 0;
            Erp.Tables.APInvHed bAPInvHed = null;
            Erp.Tables.APInvDtl bAPInvDtl = null;
            Erp.Tables.DMRHead bDMRHead = null;
            Erp.Tables.APInvHed rAPInvHed = null;
            decimal grpTotalInvAmt = decimal.Zero;
            bool lEnableGenLegalNum = false;

            APInvGrp = FindFirstAPInvGrp(Session.CompanyID, AddToGroupID);
            if (APInvGrp == null)
            {
                throw new BLException(Strings.InvalidGroup, "APInvGrp");
            }

            var DMRActnQuery2 = DBExpressionCompiler.Compile(DMRActnExpression2);
            DMRActn = DMRActnQuery2(Db, Session.CompanyID, "I", 0);
            if (DMRActn == null)
            {
                throw new BLException(Strings.DMRCorreInvoiceRequeAreNotAvailOrHaveAlreadyBeen, "APInvGrp");
            }
            using (TransactionScope txScope = ErpContext.CreateDefaultTransactionScope())//start the transaction
            {
                var DMRActnQuery3 = DBExpressionCompiler.Compile(DMRActnExpression3);
                //PROC_LOOP:
                foreach (var DMRActn_iterator in (DMRActnQuery3(Db, Session.CompanyID, "I", 0)))
                {
                    DMRActn = DMRActn_iterator;

                    var BDMRHeadQuery = DBExpressionCompiler.Compile(BDMRHeadExpression);
                    bDMRHead = BDMRHeadQuery(Db, Session.CompanyID, DMRActn.DMRNum, 0);
                    if (bDMRHead == null)
                    {
                        continue; /* No DMR, Skip Process */
                    }

                    Vendor = Vendor.FindFirstByPrimaryKey(Db, Session.CompanyID, bDMRHead.VendorNum);
                    if (Vendor == null)
                    {
                        continue; /* No Vendor, Skip Process */
                    }

                    /* CREATE A CORRECTION INVOICE INVOICE NUMBER FROM DMRNum and ActionNum */
                    vInvoiceNum = Strings.Resource_0(DMRActn.DMRNum, DMRActn.ActionNum);

                    /* VALIDATE EXISTING INVOICE NUMBER, IF FOUND, SKIP RECORD - TEMPORARY SOLUTION */
                    APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, bDMRHead.VendorNum, vInvoiceNum);
                    if (APInvHed != null)
                    {
                        continue;
                    }

                    /* CREATE INVOICE HEADER WHEN NEEDED */
                    if (!String.IsNullOrEmpty(DMRActn.RefInvoiceNum))
                    {

                        rAPInvHed = FindFirstAPInvHed(Session.CompanyID, bDMRHead.VendorNum, DMRActn.RefInvoiceNum);
                        if (rAPInvHed != null)
                        {
                            if (!vInvoicesList.ContainsKey(string.Concat(bDMRHead.VendorNum.ToString(), DMRActn.RefInvoiceNum.ToString())))
                                CreateCorrectionInvoice(AddToGroupID, DMRActn.RefInvoiceNum, bDMRHead.VendorNum, vInvoiceNum, DMRActn.ActionDate, rAPInvHed.TranDocTypeID, out grpTotalInvAmt, out lEnableGenLegalNum, ds);
                            else
                                vInvoicesList.TryGetValue(string.Concat(bDMRHead.VendorNum.ToString(), DMRActn.RefInvoiceNum.ToString()), out vInvoiceNum);
                        }

                        bAPInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, bDMRHead.VendorNum, vInvoiceNum);
                        if (bAPInvHed != null)
                        {
                            DMRActn.DebitMemoNum = vInvoiceNum;
                            bAPInvHed.Description = Strings.DMR(DMRActn.DMRNum, DMRActn.ActionNum);
                            if (!vInvoicesList.ContainsKey(string.Concat(bDMRHead.VendorNum.ToString(), DMRActn.RefInvoiceNum.ToString())))
                            {
                                vNumInvoicesCreated = vNumInvoicesCreated + 1;
                                vInvoicesList.Add(string.Concat(bDMRHead.VendorNum.ToString(), DMRActn.RefInvoiceNum.ToString()), vInvoiceNum);
                            }

                            int vInvoiceLine = FindFirstAPInvDtlFromDMRActn(Session.CompanyID, DMRActn.DMRNum, DMRActn.ActionNum, "R", bDMRHead.VendorNum, vInvoiceNum);
                            if (vInvoiceLine != 0)
                            {
                                DMRActn.DebitMemoLine = vInvoiceLine;
                            }
                            else
                                DMRActn.DebitMemoLine = 1;
                        }
                    }

                    if (rAPInvHed != null)
                    {
                        Db.Release(ref rAPInvHed);
                    }

                    if (bAPInvHed != null)
                    {
                        Db.Release(ref bAPInvHed);
                    }

                    if (bAPInvDtl != null)
                    {
                        Db.Release(ref bAPInvDtl);
                    }

                    if (DMRActn != null)
                    {
                        Db.Release(ref DMRActn);
                    }
                }
                Db.Validate(DMRActn);
                txScope.Complete();//commit the transaction
            }/* TRANSACTION */

            /* Refresh the dataset if invoices were created */
            if (vNumInvoicesCreated > 0)
            {

                foreach (var APInvHed_iterator in SelectAPInvHed(Session.CompanyID, AddToGroupID))
                {
                    APInvHed = APInvHed_iterator;


                    if (!(((from ttAPInvHed_Row in CurrentFullTableset.APInvHed
                            where ttAPInvHed_Row.SysRowID == APInvHed.SysRowID
                            select ttAPInvHed_Row).Any())))
                    {
                        refreshttAPInvHed();

                        foreach (var APInvDtl_iterator in (SelectAPInvDtl(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                        {
                            APInvDtl = APInvDtl_iterator;
                            refreshttAPInvDtl();

                            foreach (var APInvExp_iterator in (SelectAPInvExp(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine)))
                            {
                                APInvExp = APInvExp_iterator;
                                refreshttAPInvExp();
                            }/* for each APInvExp */
                        }
                    }/* if not(can-find(first ttAPInvHed */
                }
            }/* if NumInvoicesCreated > 0 */

            ReturnMsg = Strings.DebitMemoCreated(vNumInvoicesCreated);
        }

        /// <summary>
        /// Method to call to get DMR Debit Memos for invoicing. 
        /// </summary>
        /// <param name="sysRowIDList">SysRowID List of the DMR selected by user</param>
        /// <param name="suppList">Supplier List selected by user</param>
        /// <param name="AddToGroupID">The group id to add the invoices to</param>
        /// <param name="ReturnMsg">Text of a message to inform the user of how many invoices were created.
        /// Informational only.</param>
        /// <param name="grpTotalInvAmt">return new TotalInvAmt to update APInvGrp in UI</param>
        /// <param name="lEnableGenLegalNum">flag for UI to determine whether Generate Legal Numbers option is available</param>
        /// <param name="ds">The APInvoice data set</param>
        public void GetDMRDebitMemos(string sysRowIDList, string suppList, string AddToGroupID, out string ReturnMsg, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum, ref APInvoiceTableset ds)
        {
            ReturnMsg = string.Empty;
            grpTotalInvAmt = decimal.Zero;
            lEnableGenLegalNum = false;
            CurrentFullTableset = ds;
            int NumInvoicesCreated = 0;


            APInvGrp = FindFirstAPInvGrp(Session.CompanyID, AddToGroupID);
            if (APInvGrp == null)
            {
                throw new BLException(Strings.InvalidGroup, "APInvGrp");
            }

            if (!ExistsAPSyst(Session.CompanyID))
            {
                throw new BLException(Strings.ModuleConfiAPSystemControlIsMissing, "APInvGrp");
            }/* if not available APSyst */

            using (TransactionScope txScope = ErpContext.CreateDefaultTransactionScope())//start the transaction
            {
                isNewReturnDebitMemo = true;
                APGetDMRDebitMemos.RunGetDMRDebitMemos(AddToGroupID, out NumInvoicesCreated, sysRowIDList, suppList);

                /* Refresh the dataset if invoices were created */
                if (NumInvoicesCreated > 0)
                {
                    foreach (var APInvHed_iterator in SelectAPInvHedDMRWithUpdLock(Session.CompanyID, AddToGroupID))
                    {
                        APInvHed = APInvHed_iterator;

                        if (!(from ttAPInvHed_Row in CurrentFullTableset.APInvHed
                              where ttAPInvHed_Row.SysRowID == APInvHed.SysRowID
                              select ttAPInvHed_Row).Any())
                        {
                            refreshttAPInvHed();

                            foreach (var APInvDtl_iterator in (SelectAPInvDtl(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                            {
                                APInvDtl = APInvDtl_iterator;
                                refreshttAPInvDtl();

                                foreach (var APInvExp_iterator in (SelectAPInvExp(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine)))
                                {
                                    APInvExp = APInvExp_iterator;
                                    refreshttAPInvExp();
                                }/* for each APInvExp */
                            }
                            if (APInvHed.ReadyToCalc)
                            {
                                SetReadyToCalc("", APInvHed.InvoiceNum, APInvHed.VendorNum, false, false, ref ds);
                            }

                            APInvHed.DocInvoiceVendorAmt = APInvHed.DocInvoiceAmt;
                            APInvHed.InvoiceVendorAmt = APInvHed.InvoiceAmt;
                            APInvHed.Rpt1InvoiceVendorAmt = APInvHed.Rpt1InvoiceAmt;
                            APInvHed.Rpt2InvoiceVendorAmt = APInvHed.Rpt2InvoiceAmt;
                            APInvHed.Rpt3InvoiceVendorAmt = APInvHed.Rpt3InvoiceAmt;

                            Db.Validate(APInvHed);
                        }/* if not(can-find(first ttAPInvHed */
                    }
                }/* if NumInvoicesCreated > 0 */

                ReturnMsg = Strings.DebitMemoCreated(NumInvoicesCreated);
                updateAPInvGrpFields(AddToGroupID, out grpTotalInvAmt, out lEnableGenLegalNum);
                isNewReturnDebitMemo = false;

                Db.Validate();
                txScope.Complete();
            }
        }

        private void getExchangeRate(string ipType)
        {
            DateTime? taxdate = null;
            if (!((StringExtensions.Compare(ipType, "LOCK") == 0) && ttAPInvHed.LockRate))
            {
                Currency = FindFirstBaseCurrency(Session.CompanyID, true);
                if (Currency != null)
                {
                    v_currCode = Currency.CurrencyCode;
                }
                else
                {
                    v_currCode = "";
                }

                if (StringExtensions.Compare(ttAPInvHed.CurrencyCode, v_currCode) == 0)
                {
                    ttAPInvHed.EnableExchangeRate = false;
                    ttAPInvHed.EnableLockRate = false;
                    ttAPInvHed.LockRate = false;
                    ttAPInvHed.LockTaxRate = false;
                    ttAPInvHed.EnableTaxExRate = false;
                    ttAPInvHed.EnableTaxLock = false;
                }
                else
                {
                    ttAPInvHed.EnableLockRate = true;
                    ttAPInvHed.LockRate = ((StringExtensions.Compare(ipType, "CURR") == 0) ? false : ttAPInvHed.LockRate);
                    ttAPInvHed.EnableExchangeRate = ttAPInvHed.LockRate;
                    if (ttAPInvHed.UseTaxRate)
                    {
                        ttAPInvHed.EnableTaxLock = true;
                        ttAPInvHed.LockTaxRate = ((StringExtensions.Compare(ipType, "CURR") == 0) ? false : ttAPInvHed.LockTaxRate);
                        ttAPInvHed.EnableTaxExRate = ttAPInvHed.LockTaxRate;
                    }
                    else
                    {
                        ttAPInvHed.EnableTaxLock = false;
                        ttAPInvHed.LockTaxRate = false;
                        ttAPInvHed.EnableTaxExRate = false;
                    }
                }
                if (vUseDate == 1)
                {
                    vExDate = ttAPInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = ttAPInvHed.ApplyDate;
                }

                this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                ttAPInvHed.ExchangeRate = Compatibility.Convert.ToDecimal(pRateList.Entry(0, Ice.Constants.LIST_DELIM));
            }

            if (ttAPInvHed.UseTaxRate)
            {
                if (StringExtensions.Compare(ipType, "LOCK") == 0 && ttAPInvHed.LockTaxRate)
                {
                    return;
                }

                taxdate = ((ttAPInvHed.TaxRateDate != null) ? ttAPInvHed.TaxRateDate : ((ttAPInvHed.TaxPoint != null) ? ttAPInvHed.TaxPoint : ((vUseDate == 1) ? ttAPInvHed.InvoiceDate : ttAPInvHed.ApplyDate)));
                this.LibGetCurrencyRatesEF.BuildCurrencyRates(taxdate, "APInvHed-Tax", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.TaxRateGrpCode, ttAPInvHed.LockTaxRate, out tmpTaxChainRows, out taxCurrList, out taxRateList);
                ttAPInvHed.TaxExchangeRate = Compatibility.Convert.ToDecimal(taxRateList.Entry(0, Ice.Constants.LIST_DELIM));
            }
        }

        private void getFiscalDefaults(DateTime? dApplyDate, out string CurFCal, out int CurFPer, out int CurFYear, out string CurFYearSuffix, out DateTime? CurADate)
        {
            CurFCal = string.Empty;
            CurFPer = 0;
            CurFYear = 0;
            CurFYearSuffix = string.Empty;
            CurADate = null;

            var FiscalPerQuery3 = DBExpressionCompiler.Compile(FiscalPerExpression3);
            FiscalPer = FiscalPerQuery3(Db, Session.CompanyID, CompanyFiscalCalendarID, dApplyDate, dApplyDate);
            if (FiscalPer != null)
            {
                CurFCal = FiscalPer.FiscalCalendarID;
                CurFPer = FiscalPer.FiscalPeriod;
                CurFYear = FiscalPer.FiscalYear;
                CurFYearSuffix = FiscalPer.FiscalYearSuffix;
                CurADate = dApplyDate;
            }
            else
            {
                if (dApplyDate.Value != CompanyTime.Today())
                {
                    throw new BLException(Strings.FiscalPeriodNotFound(dApplyDate), "APInvHed");
                }
                else
                {
                    throw new BLException(Strings.AFiscalPeriodForTodayCouldNotBeFound, "apInvGrp");
                }
            }
        }

        /// <summary>
        /// </summary>
        /// <param name="inTransType">Source Module</param>
        /// <param name="inDateLabel">Date Label</param>
        /// <param name="proposedDate">The proposed invoice date</param>
        /// <param name="cMessageText">Warning messages</param>
        public void GetvalidEAD(string inTransType, string inDateLabel, ref DateTime? proposedDate, out string cMessageText)
        {
            cMessageText = string.Empty;
            LibEADValidation.ValidateEADEx(inTransType, inDateLabel, ref proposedDate, out cMessageText);
        }

        /// <summary>
        /// This method will return a record in the LegalNumGenOpts datatable that will
        /// be used to generate a legal number.
        /// </summary>
        /// <param name="inGroupID">The group id</param>
        /// <param name="inVendor">The vendor num</param>
        /// <param name="inInvNum">The invoice number</param>
        /// <param name="ds"></param>
        /// <param name="requiresUserInput">Indicates if the legal number requires user input</param>
        public bool GetLegalNumberOpts(string inGroupID, int inVendor, string inInvNum, ref APInvoiceTableset ds, out bool requiresUserInput)
        {
            requiresUserInput = false;
            CurrentFullTableset = ds;

            var APInvHedQuery67 = DBExpressionCompiler.Compile(APInvHedExpression67);
            APInvHed = APInvHedQuery67(Db, Session.CompanyID, inVendor, inInvNum, inGroupID, true);
            if (APInvHed == null)
            {
                throw new BLException(Strings.DebitMemoIsNotAvailable, "APInvHed");
            }/* if not avail APInvHed */

            APInvHedRow tmpAPInvHedRow = new APInvHedRow();
            BufferCopy.Copy(APInvHed, tmpAPInvHedRow);

            CurrentFullTableset.LegalNumGenOpts.Clear();

            GetLegalNumberDfltsCommon(tmpAPInvHedRow);

            ttLegalNumGenOpts = (from ttLegalNumGenOpts_Row in CurrentFullTableset.LegalNumGenOpts
                                 where StringExtensions.Compare(ttLegalNumGenOpts_Row.RowMod, IceRow.ROWSTATE_ADDED) == 0
                                 select ttLegalNumGenOpts_Row).FirstOrDefault();

            if (ttLegalNumGenOpts != null)
            {
                if (ttLegalNumGenOpts.GenerationOption.Compare("Save") == 0 && !string.IsNullOrEmpty(tmpAPInvHedRow.LegalNumber))
                {
                    return false;
                }

                if (!String.IsNullOrEmpty(APInvHed.LegalNumber))
                {
                    throw new BLException(Strings.ALegalNumberHasAlreadyBeenAssig);
                }

                if (StringExtensions.Compare(ttLegalNumGenOpts.GenerationType, "manual") == 0)
                {
                    requiresUserInput = true;
                }
            }

            ds = CurrentFullTableset;
            return true;
        }

        /// <summary>
        /// Method for generating legal numbers for generated Debit Memo. 
        /// </summary>
        /// <param name="cGroupID">The group id</param>
        public void GetLegalNumforDebitMemo(string cGroupID)
        {
            string tempLegalNumberMsg = string.Empty;
            bool lGenLegalNumber = false;
            string foreignKeyString = string.Empty;
            string cOCRNumber = string.Empty;
            bool lManual = false;
            APInvoiceTableset ds = CurrentFullTableset;

            CheckLegalNumsDisplay(cGroupID, out lGenLegalNumber);
            if (lGenLegalNumber == true)
            {
                using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
                {


                    var APInvHedQuery68 = DBExpressionCompiler.Compile(APInvHedExpression68);
                    foreach (var APInvHed_iterator in (APInvHedQuery68(Db, Session.CompanyID, cGroupID, true)))
                    {
                        APInvHed = APInvHed_iterator;

                        /*SCR 120544 Use Apply or Invoice date for legal number assignment */
                        if (vLNBasedOnDate == 1)
                            vLNDate = APInvHed.ApplyDate;
                        else
                            vLNDate = APInvHed.InvoiceDate;

                        ds.LegalNumGenOpts.Clear();
                        LibLegalNumberGetDflts.GetDefaults("DebitMemo", "", vLNDate, ds.LegalNumGenOpts);

                        ttLegalNumGenOpts = (from ttLegalNumGenOpts_Row in ds.LegalNumGenOpts
                                             where !String.IsNullOrEmpty(ttLegalNumGenOpts_Row.RowMod)
                                             select ttLegalNumGenOpts_Row).FirstOrDefault();
                        if (ttLegalNumGenOpts != null && (ttLegalNumGenOpts.GenerationOption.KeyEquals("Save")))
                        {
                            foreignKeyString = Compatibility.Convert.ToString(APInvHed.VendorNum).Trim() + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(APInvHed.InvoiceNum).Trim();
                            var outLegalNumber3 = APInvHed.LegalNumber;
                            LibLegalNumberGenerate.GenerateLegalNumber(ds.LegalNumGenOpts, "APInvHed", foreignKeyString, out outLegalNumber3, out cOCRNumber, out tempLegalNumberMsg);
                            APInvHed.LegalNumber = outLegalNumber3;
                        }

                        if (ttLegalNumGenOpts != null && StringExtensions.Compare(ttLegalNumGenOpts.GenerationType, "manual") == 0)
                            lManual = true;

                        ds.LegalNumGenOpts.Clear();
                    }

                    if (lManual)
                    {
                        throw new BLException(Strings.LegalNumbersAreNotGenerForManualGenerTypeAtThe, "APInvHed", "LegalNumber");
                    }

                    Db.Validate();
                    trans.Complete();
                }

            }
        }

        /// <summary>
        /// Voids the legal number.
        /// </summary>
        /// <param name="ipInvoiceNum">Invoice number</param>
        /// <param name="ipVoidedReason">Reason for the void</param>
        /// <param name="ipVendorNum">Vendor Number</param>
        /// <returns>The Miscellaneous Shipment data set </returns>
        public APInvoiceTableset VoidLegalNumber(string ipInvoiceNum, string ipVoidedReason, int ipVendorNum)
        {
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, ipVendorNum, ipInvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceNotFound);
            }
            if (String.IsNullOrEmpty(ipVoidedReason))
            {
                throw new BLException(Strings.AVoidReasonMustBeEntered);
            }

            using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
            {
                LibLegalNumberVoid.RunLegalNumberVoid(APInvHed.LegalNumber, ipVoidedReason, "");

                var APInvHedQuery70 = DBExpressionCompiler.Compile(APInvHedExpression70);
                APInvHed = APInvHedQuery70(Db, Session.CompanyID, ipInvoiceNum, ipVendorNum);
                if (APInvHed != null)
                {
                    APInvHed.LegalNumber = "";
                    Db.Validate(APInvHed);
                }

                Db.Validate();
                trans.Complete();
            }
            /* Return refreshed dataset */
            using (var svc = Ice.Assemblies.ServiceRenderer.GetService<Erp.Contracts.APInvoiceSvcContract>(Db))
            {
                CurrentFullTableset = svc.GetByID(APInvHed.VendorNum, ipInvoiceNum);
            }
            return CurrentFullTableset;
        }

        private void GetLineDMRInfo()
        {
            string vPurch = string.Empty;
            string vTaxCatID = string.Empty;

            DMRHead = DMRHead.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvDtl.DMRNum);
            if (DMRHead == null)
            {
                throw new BLException(Strings.DMRHeaderRecordNotFound);
            }

            var DMRActnQuery5 = DBExpressionCompiler.Compile(DMRActnExpression5);
            DMRActn = DMRActnQuery5(Db, Session.CompanyID, ttAPInvDtl.DMRNum, ttAPInvDtl.DMRActionNum);
            if (DMRActn == null)
            {
                throw new BLException(Strings.DMRActionRecordNotFound);
            }
            if (StringExtensions.Compare(DMRActn.ActionType, "C") != 0)
            {
                throw new BLException(Strings.TheSpeciDMRDoesNotRequireSupplCredit);
            }
            if (DMRHead.VendorNum != ttAPInvDtl.VendorNum)
            {
                throw new BLException(Strings.TheSpeciDMRIsForADiffeSuppl);
            }
            vPurch = "";

            Part = Part.FindFirstByPrimaryKey(Db, Session.CompanyID, DMRHead.PartNum);
            if (Part != null)
            {
                if (isGermanyLocalization)
                {
                    ttAPInvDtl.DEInternationalSecuritiesID = Part.DEInternationalSecuritiesID;
                    ttAPInvDtl.DEIsInvestment = Part.DEIsInvestment;
                    ttAPInvDtl.DEIsSecurityFinancialDerivative = Part.DEIsSecurityFinancialDerivative;
                    ttAPInvDtl.DEIsServices = Part.DEIsServices;
                    ttAPInvDtl.DEPayStatCode = Part.DEPayStatCode;
                    ttAPInvDtl.DEDenomination = Part.DEDenomination;
                    ttAPInvDtl.DEPayStatCodeDescr = LibValidateUDCodes.checkUDCode("PmtStatCod", ttAPInvDtl.DEPayStatCode, false);
                    ttAPInvDtl.DEDenominationDescr = LibValidateUDCodes.checkUDCode("PmtDenomin", ttAPInvDtl.DEDenomination, false);
                }

                vTaxCatID = Part.TaxCatID;

                var XbSystQuery2 = DBExpressionCompiler.Compile(XbSystExpression2);
                if ((XbSystQuery2(Db, Session.CompanyID, true)))
                {
                    PartClass = PartClass.FindFirstByPrimaryKey(Db, Session.CompanyID, Part.ClassID);
                    if (PartClass != null)
                    {
                        vPurch = PartClass.PurchCode;
                    }
                }
            }/* if available Part */


            ttAPInvDtl.UnitCost = DMRActn.UnitCredit;
            ttAPInvDtl.InUnitCost = APInvHed.InPrice ? DMRActn.UnitCredit : 0;

            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
            ttAPInvDtl.DocUnitCost = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.UnitCost, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "APInvDtl", "UnitCost");
            ttAPInvDtl.DocInUnitCost = APInvHed.InPrice ? ttAPInvDtl.DocUnitCost : 0;
            ttAPInvDtl.PartNum = DMRHead.PartNum;
            ttAPInvDtl.Description = Strings.DMR(DMRActn.DMRNum, DMRActn.ActionNum);
            ttAPInvDtl.JobNum = DMRActn.JobNum;
            ttAPInvDtl.AssemblySeq = DMRActn.AssemblySeq;
            ttAPInvDtl.JobSeqType = DMRActn.DestinationType;
            ttAPInvDtl.JobSeq = DMRActn.DMRSeqNum;
            ttAPInvDtl.PurPoint = DMRHead.PurPoint;
            ttAPInvDtl.VendorQty = (-DMRActn.Quantity);
            ttAPInvDtl.PUM = DMRActn.CreditUM;
            ttAPInvDtl.IUM = DMRHead.IUM;
            ttAPInvDtl.OurQty = CalculateOurQty(ttAPInvDtl.VendorNum, ttAPInvDtl.PartNum, ttAPInvDtl.VendorQty, ttAPInvDtl.PUM, ttAPInvDtl.IUM);
            ttAPInvDtl.LineComment = DMRActn.CommentText;
            ttAPInvDtl.DocExtCost = (ttAPInvDtl.VendorQty * ttAPInvDtl.DocUnitCost);
            ttAPInvDtl.TaxCatID = vTaxCatID;
            ttAPInvDtl.PurchCode = vPurch;
        }
        private decimal CalculateOurQty(int iVendorNum, string iPartNum, decimal iVendorQty, string iPUM, string iIUM)
        {
            decimal outCalcOurQty = decimal.Zero;

            LibAppService.UOMConv2(iVendorNum, "", iPartNum, iVendorQty, iPUM, iIUM, "Supplier->Our", out outCalcOurQty, false);
            LibAppService.RoundToUOMDec(iIUM, ref outCalcOurQty);

            return outCalcOurQty;
        }

        private void getLineDropShipInfo()
        {

            var DropShipHeadQuery2 = DBExpressionCompiler.Compile(DropShipHeadExpression2);
            DropShipHead = DropShipHeadQuery2(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.PurPoint, ttAPInvDtl.DropShipPackSlip);
            if (DropShipHead == null)
            {
                return;
            }


            var DropShipDtlQuery4 = DBExpressionCompiler.Compile(DropShipDtlExpression4);
            DropShipDtl = DropShipDtlQuery4(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.PurPoint, ttAPInvDtl.DropShipPackSlip, ttAPInvDtl.DropShipPackLine);
            if (DropShipDtl == null)
            {
                return;
            }

            ttAPInvDtl.RcptReceiptDate = DropShipHead.ReceiptDate;
            ttAPInvDtl.RcptPartNum = DropShipDtl.PartNum;
            ttAPInvDtl.RcptPartDescription = DropShipDtl.LineDesc;
            ttAPInvDtl.RcptVenPartNum = DropShipDtl.VenPartNum;
            ttAPInvDtl.RcptVendorQty = DropShipDtl.VendorQty;
            ttAPInvDtl.RcptOurQty = DropShipDtl.OurQty;
            ttAPInvDtl.RcptPUM = DropShipDtl.PUM;
            ttAPInvDtl.RcptIUM = DropShipDtl.IUM;
            ttAPInvDtl.RcptRevisionNum = DropShipDtl.RevisionNum;

            Customer = Customer.FindFirstByPrimaryKey(Db, DropShipHead.Company, DropShipHead.CustNum);
            if (Customer != null)
            {
                ttAPInvDtl.RcptDestination = Strings.Customer(Customer.CustID);
            }
        }

        private void getLinePOInfo()
        {
            decimal calcDocUnitCost = decimal.Zero;
            decimal calcDocInUnitCost = decimal.Zero;
            int pStep = 0;
            decimal pExRate = decimal.Zero;

            POHeader = FindFirstPOHeader(ttAPInvDtl.Company, ttAPInvDtl.PONum);

            PODetail = FindFirstPODetail(ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine);

            PORel = FindFirstPORel(ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ttAPInvDtl.PORelNum);
            if (PODetail != null)
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
                if (StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) == 0)
                {
                    calcDocUnitCost = PODetail.DocUnitCost;
                    calcDocInUnitCost = PODetail.DocInUnitCost;
                }
                else
                {
                    if (tmpChainRows != null)
                    {
                        tmpChainRows.Clear();
                    }

                    if (vUseDate == 1)
                    {
                        vExDate = APInvHed.InvoiceDate;
                    }
                    else
                    {
                        vExDate = APInvHed.ApplyDate;
                    }

                    this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, POHeader.CurrencyCode, APInvHed.CurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", APInvHed.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                    calcDocUnitCost = this.LibConvertAmtEF.ConvertAmt(PODetail.DocUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                    calcDocUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcDocUnitCost, APInvHed.CurrencyCode, "PODetail", "DocUnitCost");
                    calcDocInUnitCost = this.LibConvertAmtEF.ConvertAmt(PODetail.DocInUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                    calcDocInUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcDocInUnitCost, APInvHed.CurrencyCode, "PODetail", "DocInUnitCost");
                }

                ttAPInvDtl.POPartNum = PODetail.PartNum;
                ttAPInvDtl.POLineDesc = PODetail.LineDesc;
                ttAPInvDtl.POVenPartNum = PODetail.VenPartNum;
                ttAPInvDtl.PORevisionNum = PODetail.RevisionNum;

                ttAPInvDtl.POUnitCost = (!APInvHed.InPrice) ? PODetail.UnitCost : PODetail.InUnitCost;
                ttAPInvDtl.PODocUnitCost = (!APInvHed.InPrice) ? calcDocUnitCost : calcDocInUnitCost;
                ttAPInvDtl.POCostPerCode = PODetail.CostPerCode;
                ttAPInvDtl.POPUM = PODetail.PUM;
                ttAPInvDtl.PORelIUM = PODetail.IUM;

                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
                if (String.IsNullOrEmpty(pCurrList))
                {
                    this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                }

                string fieldNamePOUnitCost = string.Empty;

                for (i = 2; i <= 4; i++)
                {
                    if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                    {
                        fieldNamePOUnitCost = "Rpt" + (i - 1).ToString() + "POUnitCost";
                        ttAPInvDtl[fieldNamePOUnitCost] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.PODocUnitCost, POHeader.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvDtl", "POUnitCost");
                    }
                }
            }

            ttAPInvDtl.AttributeSetShortDescription = string.Empty;
            ttAPInvDtl.AttributeSetDescription = string.Empty;
            if (PORel != null)
            {
                ttAPInvDtl.PORelQty = PORel.RelQty;
                ttAPInvDtl.PORelOurQty = PORel.XRelQty;
                ttAPInvDtl.POReceivedQty = PORel.ReceivedQty;
                ttAPInvDtl.AttributeSetID = PORel.AttributeSetID;
                if (ttAPInvDtl.AttributeSetID != 0)
                {
                    string attributeSetDescription = string.Empty;
                    string attributeSetShortDescription = string.Empty;
                    using (Erp.Internal.Lib.AdvancedUOM LibAdvancedUOM = new Erp.Internal.Lib.AdvancedUOM(Db))
                    {
                        LibAdvancedUOM.GetAttributeSetDescriptions(Session.CompanyID, PORel.AttributeSetID, out attributeSetDescription, out attributeSetShortDescription);
                    }
                    ttAPInvDtl.AttributeSetShortDescription = attributeSetShortDescription;
                    ttAPInvDtl.AttributeSetDescription = attributeSetDescription;

                    // Maintains the attribute descriptions based on if they are Attribute tracked
                    if (ttAPInvDtl != null && !ttAPInvDtl.PartNumTrackInventoryAttributes)
                    {
                        ttAPInvDtl.AttributeSetDescription = string.Empty;
                        ttAPInvDtl.AttributeSetShortDescription = string.Empty;
                    }
                }

            }
            else if (PODetail != null)
            {
                ttAPInvDtl.PORelQty = PODetail.OrderQty;
                ttAPInvDtl.PORelOurQty = PODetail.XOrderQty;
            }
        }

        private void getLineRcptInfo()
        {
            var RcvHeadQuery2 = DBExpressionCompiler.Compile(RcvHeadExpression2);
            RcvHead = RcvHeadQuery2(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.PurPoint, ttAPInvDtl.PackSlip);
            if (RcvHead == null)
            {
                return;
            }
            RcvDtl = FindFirstRcvDtl(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.PurPoint, ttAPInvDtl.PackSlip, ttAPInvDtl.PackLine);
            if (RcvDtl == null)
            {
                return;
            }

            ttAPInvDtl.RcptReceiptDate = RcvHead.ReceiptDate;
            ttAPInvDtl.RcptPartNum = RcvDtl.PartNum;
            ttAPInvDtl.RcptPartDescription = RcvDtl.PartDescription;
            ttAPInvDtl.RcptVenPartNum = RcvDtl.VenPartNum;
            ttAPInvDtl.RcptVendorQty = RcvDtl.VendorQty;
            ttAPInvDtl.RcptOurQty = RcvDtl.OurQty;
            ttAPInvDtl.RcptPUM = RcvDtl.PUM;
            ttAPInvDtl.RcptIUM = RcvDtl.IUM;
            ttAPInvDtl.RcptRevisionNum = RcvDtl.RevisionNum;
            ttAPInvDtl.RcptDestination = Strings.Unknown;
            ttAPInvDtl.RelatedToRcvDtlSysRowID = RcvDtl.SysRowID;
            /* if length(RcvDtl.WarehouseCode) > 0 */
            if (RcvDtl.WareHouseCode.Length > 0)
            {
                Warehse = this.FindFirstWarehse(RcvDtl.Company, RcvDtl.WareHouseCode);
                if (Warehse != null)
                {
                    ttAPInvDtl.RcptDestination = Strings.WhseBin(Warehse.Description, RcvDtl.BinNum);
                }
            }
            else if (RcvDtl.JobNum.Length > 0)
            {
                ttAPInvDtl.RcptDestination = Strings.JobAsm(RcvDtl.JobNum, RcvDtl.AssemblySeq, ((StringExtensions.Compare(RcvDtl.JobSeqType, "M") == 0) ? Strings.Mtl : Strings.Opr), RcvDtl.JobSeq);
            }
        }

        private void getLineTotals()
        {
            CalculateGLAnalysisVariance.APNonDedTaxSum APNonDedTaxSum = null;
            string vForeignKey = string.Empty;
            ttAPInvDtl.InTaxAmt = 0;
            ttAPInvDtl.DocInTaxAmt = 0;
            ttAPInvDtl.Rpt1InTaxAmt = 0;
            ttAPInvDtl.Rpt2InTaxAmt = 0;
            ttAPInvDtl.Rpt3InTaxAmt = 0;


            foreach (var ApLnTax__iterator in (this.SelectAPLnTax(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine)))
            {

                var bAPLnTax = ApLnTax__iterator;
                if (ttAPInvDtl.DebitMemo == false)
                {
                    ttAPInvDtl.InTaxAmt = ttAPInvDtl.InTaxAmt + bAPLnTax.TaxAmt;
                    ttAPInvDtl.DocInTaxAmt = ttAPInvDtl.DocInTaxAmt + bAPLnTax.DocTaxAmt;
                    ttAPInvDtl.Rpt1InTaxAmt = ttAPInvDtl.Rpt1InTaxAmt + bAPLnTax.Rpt1TaxAmt;
                    ttAPInvDtl.Rpt2InTaxAmt = ttAPInvDtl.Rpt2InTaxAmt + bAPLnTax.Rpt2TaxAmt;
                    ttAPInvDtl.Rpt3InTaxAmt = ttAPInvDtl.Rpt3InTaxAmt + bAPLnTax.Rpt3TaxAmt;
                }
                else
                {
                    ttAPInvDtl.InTaxAmt = ttAPInvDtl.InTaxAmt - bAPLnTax.TaxAmt;
                    ttAPInvDtl.DocInTaxAmt = ttAPInvDtl.DocInTaxAmt - bAPLnTax.DocTaxAmt;
                    ttAPInvDtl.Rpt1InTaxAmt = ttAPInvDtl.Rpt1InTaxAmt - bAPLnTax.Rpt1TaxAmt;
                    ttAPInvDtl.Rpt2InTaxAmt = ttAPInvDtl.Rpt2InTaxAmt - bAPLnTax.Rpt2TaxAmt;
                    ttAPInvDtl.Rpt3InTaxAmt = ttAPInvDtl.Rpt3InTaxAmt - bAPLnTax.Rpt3TaxAmt;
                }
            }

            foreach (var apInvLnmscTax in (this.SelectAPInvLnMscTax(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine)))
            {
                if (!ttAPInvDtl.DebitMemo)
                {
                    ttAPInvDtl.InTaxAmt = ttAPInvDtl.InTaxAmt + apInvLnmscTax.TaxAmt;
                    ttAPInvDtl.DocInTaxAmt = ttAPInvDtl.DocInTaxAmt + apInvLnmscTax.DocTaxAmt;
                    ttAPInvDtl.Rpt1InTaxAmt = ttAPInvDtl.Rpt1InTaxAmt + apInvLnmscTax.Rpt1TaxAmt;
                    ttAPInvDtl.Rpt2InTaxAmt = ttAPInvDtl.Rpt2InTaxAmt + apInvLnmscTax.Rpt2TaxAmt;
                    ttAPInvDtl.Rpt3InTaxAmt = ttAPInvDtl.Rpt3InTaxAmt + apInvLnmscTax.Rpt3TaxAmt;
                }
                else
                {
                    ttAPInvDtl.InTaxAmt = ttAPInvDtl.InTaxAmt - apInvLnmscTax.TaxAmt;
                    ttAPInvDtl.DocInTaxAmt = ttAPInvDtl.DocInTaxAmt - apInvLnmscTax.DocTaxAmt;
                    ttAPInvDtl.Rpt1InTaxAmt = ttAPInvDtl.Rpt1InTaxAmt - apInvLnmscTax.Rpt1TaxAmt;
                    ttAPInvDtl.Rpt2InTaxAmt = ttAPInvDtl.Rpt2InTaxAmt - apInvLnmscTax.Rpt2TaxAmt;
                    ttAPInvDtl.Rpt3InTaxAmt = ttAPInvDtl.Rpt3InTaxAmt - apInvLnmscTax.Rpt3TaxAmt;
                }
            }

            ttAPInvDtl.LineSubtotal = ttAPInvDtl.ScrExtCost + ttAPInvDtl.ScrTotalMiscChrg + ttAPInvDtl.InTaxAmt;
            ttAPInvDtl.DocLineSubtotal = ttAPInvDtl.ScrDocExtCost + ttAPInvDtl.ScrDocTotalMiscChrg + ttAPInvDtl.DocInTaxAmt;
            ttAPInvDtl.LineTotal = (ttAPInvDtl.ScrExtCost + ttAPInvDtl.ScrTotalMiscChrg + ttAPInvDtl.InTaxAmt) - ttAPInvDtl.AdvancePayAmt - ttAPInvDtl.ScrWithholdAmt;
            ttAPInvDtl.DocLineTotal = (ttAPInvDtl.ScrDocExtCost + ttAPInvDtl.ScrDocTotalMiscChrg + ttAPInvDtl.DocInTaxAmt) - ttAPInvDtl.DocAdvancePayAmt - ttAPInvDtl.DocScrWithholdAmt;
            ttAPInvDtl.DspLineTotal = (ttAPInvDtl.ScrExtCost + ttAPInvDtl.ScrTotalMiscChrg) - ttAPInvDtl.AdvancePayAmt - ttAPInvDtl.ScrWithholdAmt;
            ttAPInvDtl.DocDspLineTotal = (ttAPInvDtl.ScrDocExtCost + ttAPInvDtl.ScrDocTotalMiscChrg) - ttAPInvDtl.DocAdvancePayAmt - ttAPInvDtl.DocScrWithholdAmt;

            //New GL Line Total on Line>GL Analysis tab
            ttAPInvDtl.LineExpenses = (ttAPInvDtl.ScrExtCost + ttAPInvDtl.ScrTotalMiscChrg) - ttAPInvDtl.AdvancePayAmt - ttAPInvDtl.ScrWithholdAmt;
            ttAPInvDtl.DocLineExpenses = (ttAPInvDtl.ScrDocExtCost + ttAPInvDtl.ScrDocTotalMiscChrg) - ttAPInvDtl.DocAdvancePayAmt - ttAPInvDtl.DocScrWithholdAmt;

            APInvDtl tempAPInvDtl = null;
            BufferCopy.Copy(ttAPInvDtl, ref tempAPInvDtl);
            APInvHedPartial APInvHedPartial = FindFirstAPInvHedPartial(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (APInvHedPartial != null)
            {
                APNonDedTaxSum = APCalculateGLAnalysisVariance.GetAPNonDeducTaxSum(APInvHedPartial.DebitMemo, tempAPInvDtl, APInvHedPartial.MatchedFromLI, APInvHedPartial.AllowOverrideLI);
                ttAPInvDtl.NonDeducTaxExpense = APNonDedTaxSum?.NonDeducAmt ?? 0;
                ttAPInvDtl.DocNonDeducTaxExpense = APNonDedTaxSum?.DocNonDeducAmt ?? 0;
                ttAPInvDtl.Rpt1NonDeducTaxExpense = APNonDedTaxSum?.Rpt1NonDeducAmt ?? 0;
                ttAPInvDtl.Rpt2NonDeducTaxExpense = APNonDedTaxSum?.Rpt2NonDeducAmt ?? 0;
                ttAPInvDtl.Rpt3NonDeducTaxExpense = APNonDedTaxSum?.Rpt3NonDeducAmt ?? 0;
            }

            ttAPInvDtl.GLLineTotal = (ttAPInvDtl.ScrExtCost + ttAPInvDtl.ScrTotalMiscChrg) - ttAPInvDtl.AdvancePayAmt - ttAPInvDtl.ScrWithholdAmt + ttAPInvDtl.NonDeducTaxExpense;
            ttAPInvDtl.DocGLLineTotal = (ttAPInvDtl.ScrDocExtCost + ttAPInvDtl.ScrDocTotalMiscChrg) - ttAPInvDtl.DocAdvancePayAmt - ttAPInvDtl.DocScrWithholdAmt + ttAPInvDtl.DocNonDeducTaxExpense;

            if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                ttAPInvDtl.Rpt1LineSubTotal = ttAPInvDtl.Rpt1ScrExtCost + ttAPInvDtl.Rpt1ScrTotalMiscChrg + ttAPInvDtl.Rpt1InTaxAmt;
                ttAPInvDtl.Rpt2LineSubtotal = ttAPInvDtl.Rpt2ScrExtCost + ttAPInvDtl.Rpt2ScrTotalMiscChrg + ttAPInvDtl.Rpt2InTaxAmt;
                ttAPInvDtl.Rpt3LineSubtotal = ttAPInvDtl.Rpt3ScrExtCost + ttAPInvDtl.Rpt3ScrTotalMiscChrg + ttAPInvDtl.Rpt3InTaxAmt;

                ttAPInvDtl.Rpt1LineTotal = (ttAPInvDtl.Rpt1ScrExtCost + ttAPInvDtl.Rpt1ScrTotalMiscChrg + ttAPInvDtl.Rpt1InTaxAmt) - ttAPInvDtl.Rpt1AdvancePayAmt - ttAPInvDtl.Rpt1ScrWithholdAmt;
                ttAPInvDtl.Rpt2LineTotal = (ttAPInvDtl.Rpt2ScrExtCost + ttAPInvDtl.Rpt2ScrTotalMiscChrg + ttAPInvDtl.Rpt2InTaxAmt) - ttAPInvDtl.Rpt2AdvancePayAmt - ttAPInvDtl.Rpt2ScrWithholdAmt;
                ttAPInvDtl.Rpt3LineTotal = (ttAPInvDtl.Rpt3ScrExtCost + ttAPInvDtl.Rpt3ScrTotalMiscChrg + ttAPInvDtl.Rpt3InTaxAmt) - ttAPInvDtl.Rpt3AdvancePayAmt - ttAPInvDtl.Rpt3ScrWithholdAmt;

                ttAPInvDtl.Rpt1DspLineTotal = (ttAPInvDtl.Rpt1ScrExtCost + ttAPInvDtl.Rpt1ScrTotalMiscChrg) - ttAPInvDtl.Rpt1AdvancePayAmt - ttAPInvDtl.Rpt1ScrWithholdAmt;
                ttAPInvDtl.Rpt2DspLineTotal = (ttAPInvDtl.Rpt2ScrExtCost + ttAPInvDtl.Rpt2ScrTotalMiscChrg) - ttAPInvDtl.Rpt2AdvancePayAmt - ttAPInvDtl.Rpt2ScrWithholdAmt;
                ttAPInvDtl.Rpt3DspLineTotal = (ttAPInvDtl.Rpt3ScrExtCost + ttAPInvDtl.Rpt3ScrTotalMiscChrg) - ttAPInvDtl.Rpt3AdvancePayAmt - ttAPInvDtl.Rpt3ScrWithholdAmt;

                ttAPInvDtl.Rpt1LineExpenses = (ttAPInvDtl.Rpt1ScrExtCost + ttAPInvDtl.Rpt1ScrTotalMiscChrg) - ttAPInvDtl.Rpt1AdvancePayAmt - ttAPInvDtl.Rpt1ScrWithholdAmt;
                ttAPInvDtl.Rpt2LineExpenses = (ttAPInvDtl.Rpt2ScrExtCost + ttAPInvDtl.Rpt2ScrTotalMiscChrg) - ttAPInvDtl.Rpt2AdvancePayAmt - ttAPInvDtl.Rpt2ScrWithholdAmt;
                ttAPInvDtl.Rpt3LineExpenses = (ttAPInvDtl.Rpt3ScrExtCost + ttAPInvDtl.Rpt3ScrTotalMiscChrg) - ttAPInvDtl.Rpt3AdvancePayAmt - ttAPInvDtl.Rpt3ScrWithholdAmt;

                ttAPInvDtl.GLLineTotal = ttAPInvDtl.LineExpenses + ttAPInvDtl.NonDeducTaxExpense;
                ttAPInvDtl.DocGLLineTotal = ttAPInvDtl.DocLineExpenses + ttAPInvDtl.DocNonDeducTaxExpense;
                ttAPInvDtl.Rpt1GLLineTotal = ttAPInvDtl.Rpt1LineExpenses + ttAPInvDtl.Rpt1NonDeducTaxExpense;
                ttAPInvDtl.Rpt2GLLineTotal = ttAPInvDtl.Rpt2LineExpenses + ttAPInvDtl.Rpt2NonDeducTaxExpense;
                ttAPInvDtl.Rpt3GLLineTotal = ttAPInvDtl.Rpt3LineExpenses + ttAPInvDtl.Rpt3NonDeducTaxExpense;
            }

            CalculateGLAnalysisVariance.APInvVariance APInvVariance = new CalculateGLAnalysisVariance.APInvVariance();
            bool calledFromPE = false;
            bool isAPTaxLnLevel = IsAPTaxLnLevel(Session.CompanyID);
            APCalculateGLAnalysisVariance.CalcLineGLAnalysisVariance(ref APInvVariance, APInvHed, tempAPInvDtl, null, null, APNonDedTaxSum, isAPTaxLnLevel, calledFromPE);
            if (IsAPInvoiceDebitMemo(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum))
            {
                ttAPInvDtl.Variance = -APInvVariance.Variance;
                ttAPInvDtl.DocVariance = -APInvVariance.DocVariance;
                ttAPInvDtl.Rpt1Variance = -APInvVariance.Rpt1Variance;
                ttAPInvDtl.Rpt2Variance = -APInvVariance.Rpt2Variance;
                ttAPInvDtl.Rpt3Variance = -APInvVariance.Rpt3Variance;
            }
            else
            {
                ttAPInvDtl.Variance = APInvVariance.Variance;
                ttAPInvDtl.DocVariance = APInvVariance.DocVariance;
                ttAPInvDtl.Rpt1Variance = APInvVariance.Rpt1Variance;
                ttAPInvDtl.Rpt2Variance = APInvVariance.Rpt2Variance;
                ttAPInvDtl.Rpt3Variance = APInvVariance.Rpt3Variance;
            }
        }

        partial void GetListRowLoaded()
        {
            Erp.Tables.APInvHed bfAPInvHed = null;

            /*SCR #3119 - show if the CPay invoice is still open payable at corporate */
            ttAPInvHedList.CPayOpenPayable = (ttAPInvHedList.CPayInvoiceBal != 0);

            bfAPInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHedList.Company, ttAPInvHedList.VendorNum, ttAPInvHedList.InvoiceNum);
            if (bfAPInvHed != null)
            {
                ttAPInvHedList.ScrInvoiceVendorAmt = bfAPInvHed.InvoiceVendorAmt;
                ttAPInvHedList.ScrDocInvoiceVendorAmt = bfAPInvHed.DocInvoiceVendorAmt;
                ttAPInvHedList.ScrInvoiceAmt = bfAPInvHed.InvoiceAmt;
                ttAPInvHedList.ScrDocInvoiceAmt = bfAPInvHed.DocInvoiceAmt;
                ttAPInvHedList.ScrInvoiceBal = bfAPInvHed.InvoiceBal;
                ttAPInvHedList.ScrDocInvoiceBal = bfAPInvHed.DocInvoiceBal;
                ttAPInvHedList.ScrUnpostedBal = bfAPInvHed.UnpostedBal;
                ttAPInvHedList.ScrDocUnpostedBal = bfAPInvHed.DocUnpostedBal;

                if (bfAPInvHed.StartUp == true)
                {
                    ttAPInvHedList.ScrInvoiceVendorAmt = bfAPInvHed.InvoiceAmt;
                    ttAPInvHedList.ScrDocInvoiceVendorAmt = bfAPInvHed.DocInvoiceAmt;
                }
            }

            ttAPInvHedList.DocInvoiceVariance = (ttAPInvHedList.ScrDocInvoiceAmt - ttAPInvHedList.ScrDocInvoiceVendorAmt);
            ttAPInvHedList.InvoiceVariance = (ttAPInvHedList.ScrInvoiceAmt - ttAPInvHedList.ScrInvoiceVendorAmt);

            Vendor = Vendor.FindFirstByPrimaryKey(Db, ttAPInvHedList.Company, ttAPInvHedList.VendorNum);
            if (Vendor != null)
            {
                ttAPInvHedList.VendorNumName = Vendor.Name;
                ttAPInvHedList.VendorNumVendorID = Vendor.VendorID;
            }

            if (isTaiwanLocalization)
            {
                TranDocType = TranDocType.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvHedList.TranDocTypeID);
                if (TranDocType != null)
                {
                    ttAPInvHedList.TranDocTypeDescription = TranDocType.Description;
                }
            }

        }

        ///<summary>
        /// Method to return invoice headers for asset addition UI 
        ///</summary>
        /// <param name = "WhereClause">COASegValues search clause</param>
        /// <param name = "pageSize">Page size</param>
        /// <param name = "absolutePage">Absolute page</param>
        /// <param name = "morePages">More Pages</param>
        public Erp.Tablesets.APInvHedListTableset GetListForAssetAdd(string WhereClause, int pageSize, int absolutePage, out bool morePages)
        {
            morePages = false;
            int rowCount = 0;

            CurrentListTableset = GetList(WhereClause, 0, absolutePage, out morePages);
            foreach (var ttAPInvHedValues_iterator in CurrentListTableset.APInvHedList.ToList())
            {
                if (ExistsAPInvDtlAssetAdd(ttAPInvHedValues_iterator.Company, ttAPInvHedValues_iterator.VendorNum, ttAPInvHedValues_iterator.InvoiceNum))
                {
                    rowCount++;
                    if (rowCount > pageSize && pageSize > 0)
                    {
                        morePages = true;
                        CurrentListTableset.APInvHedList.Remove(ttAPInvHedValues_iterator);
                    }
                }
                else
                {
                    CurrentListTableset.APInvHedList.Remove(ttAPInvHedValues_iterator);
                }
            }
            return CurrentListTableset;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="groupId"></param>
        /// <param name="vendorId"></param>
        /// <returns></returns>
        public APInvHedListTableset GetApInvHeadListLoaded(string groupId, int vendorId)
        {
            var APInvHedQuery92 = DBExpressionCompiler.Compile(APInvHedExpression92);
            foreach (var APInvHed_iterator in (APInvHedQuery92(Db, Session.CompanyID, groupId, vendorId)))
            {
                APInvHed = APInvHed_iterator;
                Db.ReadCurrent(ref APInvHed);
                ttAPInvHedList = new Erp.Tablesets.APInvHedListRow();
                BufferCopy.Copy(APInvHed, ref ttAPInvHedList);
                Db.Validate();
                ttAPInvHedList.InvoiceNum = APInvHed.InvoiceNum;
                GetListRowLoaded();
                CurrentListTableset.APInvHedList.Add(ttAPInvHedList);
                ttAPInvHedList.SysRowID = APInvHed.SysRowID;
            }
            return CurrentListTableset;
        }

        /// <summary>
        /// This method called from Kinetic UI
        /// </summary>
        /// <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
        /// <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
        /// <param name="absolutePage">Page of rows to return.</param>
        /// <param name="morePages">Whether there are more pages of rows available.</param>
        /// <returns>The list DataSet.</returns>
        [Ice.Hosting.Http.HttpGet]
        public APInvHedListTableset GetListForLandingPage(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            bool lLock;
            CurrentListTableset = this.GetList(whereClause, pageSize, absolutePage, out morePages);

            foreach (var ttAPInvHed in (this.CurrentListTableset.APInvHedList))
            {
                lLock = PELock.IsDocumentLock(ttAPInvHed.Company, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), "", "", "", "");

                ttAPInvHed.IsLcked = PELock.IsLock;
            }
            return CurrentListTableset;
        }

        /// <summary>
        /// Method to call when adding a new Advance Billing line AP Invoice Detail record 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="iVendorNum">The vendor number of the invoice</param>
        /// <param name="cInvoiceNum">The invoice number of the invoice</param>
        public void GetNewAPInvDtlAdvance(ref APInvoiceTableset ds, int iVendorNum, string cInvoiceNum)
        {
            CurrentFullTableset = ds;
            createttAPInvDtl(iVendorNum, cInvoiceNum, "A", 0, 0);
            ttAPInvDtl.IsAdvance = true;
            ExceptionManager.AssertNoBLExceptions();
        }

        /// <summary>
        /// Method to call when adding a new Asset line AP Invoice Detail record 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="iVendorNum">The vendor number of the invoice</param>
        /// <param name="cInvoiceNum">The invoice number of the invoice</param>
        public void GetNewAPInvDtlAsset(ref APInvoiceTableset ds, int iVendorNum, string cInvoiceNum)
        {
            CurrentFullTableset = ds;
            createttAPInvDtl(iVendorNum, cInvoiceNum, "S", 0, 0);
            ExceptionManager.AssertNoBLExceptions();
        }

        /// <summary>
        /// Method to call when adding a new DMR Credit line AP Invoice Detail record 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="iVendorNum">The vendor number of the invoice</param>
        /// <param name="cInvoiceNum">The invoice number of the invoice</param>
        /// <param name="iDMRNum">The DMR Num that we are creating a line for.</param>
        /// <param name="iDMRActionNum">The DMR ActionNum that we are creating a line for.</param>
        public void GetNewAPInvDtlDMRCredit(ref APInvoiceTableset ds, int iVendorNum, string cInvoiceNum, int iDMRNum, int iDMRActionNum)
        {
            CurrentFullTableset = ds;
            createttAPInvDtl(iVendorNum, cInvoiceNum, "M", iDMRNum, iDMRActionNum);
            ExceptionManager.AssertNoBLExceptions();
        }

        /// <summary>
        /// Method to call when adding a new Job Miscellaneous line AP Invoice Detail record 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="iVendorNum">The vendor number of the invoice</param>
        /// <param name="cInvoiceNum">The invoice number of the invoice</param>
        public void GetNewAPInvDtlJobMiscellaneous(ref APInvoiceTableset ds, int iVendorNum, string cInvoiceNum)
        {
            CurrentFullTableset = ds;
            createttAPInvDtl(iVendorNum, cInvoiceNum, "J", 0, 0);
            ExceptionManager.AssertNoBLExceptions();
        }

        /// <summary>
        /// Method to call when adding a new Miscellaneous line AP Invoice Detail record 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="iVendorNum">The vendor number of the invoice</param>
        /// <param name="cInvoiceNum">The invoice number of the invoice</param>
        public void GetNewAPInvDtlMiscellaneous(ref APInvoiceTableset ds, int iVendorNum, string cInvoiceNum)
        {
            CurrentFullTableset = ds;
            createttAPInvDtl(iVendorNum, cInvoiceNum, "M", 0, 0);
            ExceptionManager.AssertNoBLExceptions();
        }

        /// <summary>
        /// Method to call when adding a new Unreceived Billing line AP Invoice Detail record 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="iVendorNum">The vendor number of the invoice</param>
        /// <param name="cInvoiceNum">The invoice number of the invoice</param>
        public void GetNewAPInvDtlUnreceived(ref APInvoiceTableset ds, int iVendorNum, string cInvoiceNum)
        {
            CurrentFullTableset = ds;
            createttAPInvDtl(iVendorNum, cInvoiceNum, "U", 0, 0);
            ExceptionManager.AssertNoBLExceptions();
        }

        /// <summary>
        /// Method to call when adding a new BOE AP Invoice record 
        /// </summary>
        /// <param name="groupID">The group ID</param>
        /// <param name="ds">The APInvoice data set</param>
        public void GetNewAPInvHedBOE(string groupID, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            validateConfiguration();
            ExceptionManager.AssertNoBLExceptions();

            apSystPartial = FindPartialAPSyst(Session.CompanyID);
            Currency = FindFirstBaseCurrency(Session.CompanyID, true);

            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            if (XbSyst != null)
            {
                vRateGrpCode = XbSyst.PORateGrp;
            }

            // Check if a legal number configuration is required before adding an invoice. 
            if (legalNumSetupRequired(false, true) == true)
            {
                throw new BLException(Strings.LegalNumCnfgBoe);
            }

            APInvGrp apInvGrp = FindFirstAPInvGrp(Session.CompanyID, groupID);
            if (apInvGrp == null)
            {
                throw new BLException(Strings.InvalidAPInvoiceGroup, "APInvGrp");
            }
            DateTime? applyDate = apInvGrp.ApplyDate;

            isBOEInvoice = true;
            ttAPInvHed = new Erp.Tablesets.APInvHedRow();
            CurrentFullTableset.APInvHed.Add(ttAPInvHed);
            ttAPInvHed.Company = Session.CompanyID;
            ttAPInvHed.GroupID = groupID;
            ttAPInvHed.ReadyToCalc = true;
            ttAPInvHed.EntryPerson = Session.UserID;
            ttAPInvHed.DebitMemo = false;
            ttAPInvHed.RateGrpCode = vRateGrpCode;
            ttAPInvHed.RowMod = IceRow.ROWSTATE_ADDED;
            ttAPInvHed.CurrencyCode = ((Currency != null) ? Currency.CurrencyCode : "");
            ttAPInvHed.UseTaxRate = ((XbSyst != null) ? XbSyst.UseTaxRate : false);
            ttAPInvHed.TaxRateGrpCode = ((XbSyst != null && XbSyst.UseTaxRate) ? XbSyst.TaxRateGrp : "");
            var outFiscalCalendarID = ttAPInvHed.FiscalCalendarID;
            var outFiscalPeriod = ttAPInvHed.FiscalPeriod;
            var outFiscalYear = ttAPInvHed.FiscalYear;
            var outFiscalYearSuffix = ttAPInvHed.FiscalYearSuffix;
            var outApplyDate = ttAPInvHed.ApplyDate;
            getFiscalDefaults(applyDate, out outFiscalCalendarID, out outFiscalPeriod, out outFiscalYear, out outFiscalYearSuffix, out outApplyDate);
            ttAPInvHed.FiscalCalendarID = outFiscalCalendarID;
            ttAPInvHed.FiscalPeriod = outFiscalPeriod;
            ttAPInvHed.FiscalYear = outFiscalYear;
            ttAPInvHed.FiscalYearSuffix = outFiscalYearSuffix;

            if (outApplyDate == null)
            {
                ttAPInvHed.ApplyDate = null;
            }
            else
            {
                ttAPInvHed.ApplyDate = (DateTime)outApplyDate;
            }

            // SCR 96807 - Using XBSyst.UseTaxRate to assign Tax Rate Date and Tax Point in E9 was incorrect and has been removed.
            LibSetDefaultInvoiceDates.RunSetDefaultInvoiceDates(ttAPInvHed, "AP", ttAPInvHed.ApplyDate, true);
            ttAPInvHed.InvoiceType = "BOE";

            ttAPInvHed.InvoiceNum = "";
            ttAPInvHed.InvoiceRef = "";
            ttAPInvHed.ScrInvoiceRef = "";
            ttAPInvHed.REFPONum = 0;

            APInvHedAfterGetNew();
            APInvHedAfterGetRows();
            APInvHed_Foreign_Link();

            ds = CurrentFullTableset;
        }

        /// <summary>
        /// Method to call when adding a new Debit Memo AP Invoice record 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="cGroupID">The group id to add the invoice to</param>
        public void GetNewAPInvHedInvoice(ref APInvoiceTableset ds, string cGroupID)
        {
            CurrentFullTableset = ds;
            APInvHedTypePartialRow CurrentInvoices = FindGroupInvoiceTypeQuery(Session.CompanyID, cGroupID);
            if (CurrentInvoices == null)
                createttAPInvHed(cGroupID, false);
            else if (!CurrentInvoices.GRNIClearing)
                createttAPInvHed(cGroupID, false);
            else
                throw new BLException(Strings.UnableToCreateGRNIClearingWithExistingNormalInvoice, "APInvGrp");
        }


        /// <summary>
        /// Method to call when adding a new Debit Memo AP Invoice record 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="cGroupID">The group id to add the invoice to</param>
        public void GetNewAPInvHedDebitMemo(ref APInvoiceTableset ds, string cGroupID)
        {
            CurrentFullTableset = ds;
            APInvHedTypePartialRow CurrentInvoices = FindGroupInvoiceTypeQuery(Session.CompanyID, cGroupID);
            if (CurrentInvoices == null)
                createttAPInvHed(cGroupID, true);
            else if (!CurrentInvoices.GRNIClearing)
                createttAPInvHed(cGroupID, true);
            else
                throw new BLException(Strings.UnableToCreateGRNIClearingWithExistingNormalInvoice, "APInvGrp");
        }

        /// <summary>
        /// Method to call when adding a new Manual GRNI Clearing record 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="cGroupID">The group id to add the invoice to</param>
        public void GetNewManualGRNIClearing(ref APInvoiceTableset ds, string cGroupID)
        {
            CurrentFullTableset = ds;
            APInvHedTypePartialRow CurrentInvoices = FindGroupInvoiceTypeQuery(Session.CompanyID, cGroupID);
            if (CurrentInvoices == null)
                createttManualGRNIClearing(cGroupID);
            else if (CurrentInvoices.GRNIClearing)
                createttManualGRNIClearing(cGroupID);
            else
                throw new BLException(Strings.UnableToCreateGRNIClearingWithExistingNormalInvoice, "APInvGrp");
        }

        private void createttManualGRNIClearing(string cGroupID)
        {
            validateConfiguration();
            ExceptionManager.AssertNoBLExceptions();

            APInvGrp = FindFirstAPInvGrp(Session.CompanyID, cGroupID);
            if (APInvGrp == null)
            {
                throw new BLException(Strings.InvalidAPInvoiceGroup, "APInvGrp");
            }
            else if (!string.IsNullOrEmpty(APInvGrp.ActiveUserID) && !APInvGrp.ActiveUserID.KeyEquals(Session.UserID))
            {
                throw new BLException(Strings.GroupIsInUseByAnotherUser(APInvGrp.GroupID));
            }

            // Check if a legal number configuration is required before adding an invoice. 
            /*if (legalNumSetupRequired(false, false) == true)
            {
                throw new BLException(Strings.LegalNumCnfgInvoice);
            }*/

            apSystPartial = FindPartialAPSyst(Session.CompanyID);
            Currency = FindFirstBaseCurrency(Session.CompanyID, true);

            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            if (XbSyst != null)
            {
                vRateGrpCode = XbSyst.PORateGrp;
            }

            ttAPInvHed = new Erp.Tablesets.APInvHedRow();
            CurrentFullTableset.APInvHed.Add(ttAPInvHed);
            ttAPInvHed.Company = APInvGrp.Company;
            ttAPInvHed.GroupID = cGroupID;
            ttAPInvHed.FiscalPeriod = APInvGrp.FiscalPeriod;
            ttAPInvHed.FiscalYear = APInvGrp.FiscalYear;
            ttAPInvHed.FiscalYearSuffix = APInvGrp.FiscalYearSuffix;
            ttAPInvHed.FiscalCalendarID = APInvGrp.FiscalCalendarID;
            ttAPInvHed.ApplyDate = APInvGrp.ApplyDate;
            ttAPInvHed.TaxRateDate = ttAPInvHed.ApplyDate;
            ttAPInvHed.TaxPoint = ttAPInvHed.ApplyDate;
            ttAPInvHed.ReadyToCalc = apSystPartial.InvcReadyToCalcDflt;
            ttAPInvHed.EntryPerson = Session.UserID;
            ttAPInvHed.RateGrpCode = vRateGrpCode;
            ttAPInvHed.RowMod = IceRow.ROWSTATE_ADDED;
            ttAPInvHed.CurrencyCode = ((Currency != null) ? Currency.CurrencyCode : "");
            ttAPInvHed.TaxRateGrpCode = ((XbSyst != null && XbSyst.UseTaxRate) ? XbSyst.TaxRateGrp : "");
            ttAPInvHed.GRNIClearing = true;
            ttAPInvHed.TaxRegionCode = string.Empty;

            // SCR 96807 - Using XBSyst.UseTaxRate to assign Tax Rate Date and Tax Point in E9 was incorrect and has been removed.
            LibSetDefaultInvoiceDates.RunSetDefaultInvoiceDates(ttAPInvHed, "AP", APInvGrp.ApplyDate, true);

            APInvHedAfterGetNew();
            APInvHedAfterGetRows();
            APInvHed_Foreign_Link();
        }

        /// <summary>
        /// Method to call when adding a new Header/Late Cost charge 
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="iVendorNum">The vendor number of the invoice</param>
        /// <param name="cInvoiceNum">The invoice number of the invoice</param>
        /// <param name="lcFlag">true if late cost should be added</param>
        public void GetNewHdrCharge(ref APInvoiceTableset ds, int iVendorNum, string cInvoiceNum, bool lcFlag)
        {
            CurrentFullTableset = ds;
            GetNewAPIHAPInvMsc(ref ds, iVendorNum, cInvoiceNum, 0);
            ttAPIHAPInvMsc.LCFlag = lcFlag;
        }

        /// <summary>
        /// Method to call when adding a new Header/Late Cost charge for Plastic Packaging Tax Report
        /// </summary>
        /// <param name="ds">The APInvoice data set</param>
        /// <param name="vendorNum">The vendor number of the invoice</param>
        /// <param name="invoiceNum">The invoice number of the invoice</param>
        /// <param name="plasticPackTaxReportID">The plastic packaging tax report ID</param>
        public void GetNewAPIHAPInvMscPlasticPackTaxCost(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, string plasticPackTaxReportID)
        {
            CurrentFullTableset = ds;

            var plasticPackTaxReport = PlasticPackagingTaxReport.FindFirstByPrimaryKey(Db, Session.CompanyID, plasticPackTaxReportID);
            if (plasticPackTaxReport == null) throw new BLException(Strings.PlasticPackTaxReportIsNotFound, "APIHAPInvMsc");
            if (!plasticPackTaxReport.Submitted) throw new BLException(Strings.PlasticPackTaxReportIsNotSubmitted, "APIHAPInvMsc");
            if (ExistsAPInvMscPlasticPackTaxReport(Session.CompanyID, plasticPackTaxReportID)) throw new BLException(Strings.PlasticPackTaxReportHasAlreadyBeenSelected, "APIHAPInvMsc");

            GetNewHdrCharge(ref ds, vendorNum, invoiceNum, true);
            ttAPIHAPInvMsc.PlasticPackTaxReportID = plasticPackTaxReportID;
            ttAPIHAPInvMsc.Type = "A";
            ttAPIHAPInvMsc.Percentage = decimal.Zero;

            // get Plastic Pack Imported Tax Due in base currency
            ttAPIHAPInvMsc.ScrMiscAmt = PlasticPackagingTaxReportDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, plasticPackTaxReportID, "99", "")?.ImportedQty ?? decimal.Zero;

            var outScrMiscAmt11 = ttAPIHAPInvMsc.ScrMiscAmt;
            var outScrDocMiscAmt6 = ttAPIHAPInvMsc.ScrDocMiscAmt;
            var outRpt1ScrMiscAmt9 = ttAPIHAPInvMsc.Rpt1ScrMiscAmt;
            var outRpt2ScrMiscAmt9 = ttAPIHAPInvMsc.Rpt2ScrMiscAmt;
            var outRpt3ScrMiscAmt9 = ttAPIHAPInvMsc.Rpt3ScrMiscAmt;
            CalcDocAmt(ref outScrMiscAmt11, ttAPIHAPInvMsc.VendorNum, ttAPIHAPInvMsc.InvoiceNum, ttAPIHAPInvMsc, "ScrDocMiscAmt", "ScrMiscAmt", out outScrDocMiscAmt6, out outRpt1ScrMiscAmt9, out outRpt2ScrMiscAmt9, out outRpt3ScrMiscAmt9);
            ttAPIHAPInvMsc.ScrMiscAmt = outScrMiscAmt11;
            ttAPIHAPInvMsc.ScrDocMiscAmt = outScrDocMiscAmt6;
            ttAPIHAPInvMsc.Rpt1ScrMiscAmt = outRpt1ScrMiscAmt9;
            ttAPIHAPInvMsc.Rpt2ScrMiscAmt = outRpt2ScrMiscAmt9;
            ttAPIHAPInvMsc.Rpt3ScrMiscAmt = outRpt3ScrMiscAmt9;

            if (ttAPIHAPInvMsc.InPrice == true)
            {
                ttAPIHAPInvMsc.InMiscAmt = ttAPIHAPInvMsc.ScrMiscAmt;
                ttAPIHAPInvMsc.DocInMiscAmt = ttAPIHAPInvMsc.ScrDocMiscAmt;
                ttAPIHAPInvMsc.Rpt1InMiscAmt = ttAPIHAPInvMsc.Rpt1ScrMiscAmt;
                ttAPIHAPInvMsc.Rpt2InMiscAmt = ttAPIHAPInvMsc.Rpt2ScrMiscAmt;
                ttAPIHAPInvMsc.Rpt3InMiscAmt = ttAPIHAPInvMsc.Rpt3ScrMiscAmt;
            }
        }

        /// <summary>
        /// Inserts a new row into the DataSet with fields populated depending on parent Invoice Line
        /// </summary>
        public void GetNewAPInvDtlDEASchPopulated(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            CurrentFullTableset = ds;
            findChangedTTAPInvDtl(vendorNum, invoiceNum, invoiceLine);

            var apInvHed = FindFirstAPInvHed(ttAPInvDtl.Company, vendorNum, invoiceNum);
            if (apInvHed == null)
            {
                throw new BLException(Strings.APInvHedRecordNotFound);
            }

            var fiscalPeriods = LibCreateAmort.BuildFiscalPeriods(ttAPInvDtl.DEACode, ttAPInvDtl.DEAStartDate, ttAPInvDtl.DEAEndDate);

            CreateAmortizations._FiscalPer availFiscalPeriod = findAvailDEAScheduleFiscalPeriod(fiscalPeriods);
            if (availFiscalPeriod == null)
            {
                throw new BLException(Strings.ThereIsNoAvailFiscalPeriodBetweenStartAndEndDates);
            }

            ttAPInvDtlDEASch = new APInvDtlDEASchRow()
            {
                Company = apInvHed.Company,
                VendorNum = vendorNum,
                InvoiceNum = invoiceNum,
                InvoiceLine = invoiceLine,
                AmortSeq = CurrentFullTableset.APInvDtlDEASch.Any() ? CurrentFullTableset.APInvDtlDEASch.Max(row => row.AmortSeq) + 1 : 1,
                GroupID = apInvHed.GroupID,
                CurrencyCode = apInvHed.CurrencyCode,
                FiscalCalendarID = availFiscalPeriod.FiscalCalendarID,
                FiscalYear = availFiscalPeriod.FiscalYear,
                FiscalYearSuffix = availFiscalPeriod.FiscalYearSuffix,
                FiscalPeriod = availFiscalPeriod.FiscalPeriod,
                AmortDate = availFiscalPeriod.EndDate,
                RowMod = IceRow.ROWSTATE_ADDED
            };
            CurrentFullTableset.APInvDtlDEASch.Add(ttAPInvDtlDEASch);
            ttAPInvDtl.DEAScheduled = true;
        }

        private CreateAmortizations._FiscalPer findAvailDEAScheduleFiscalPeriod(List<CreateAmortizations._FiscalPer> fiscalPeriods)
        {
            foreach (var fiscalPer in fiscalPeriods)
            {
                var ttApInvDtlDEASchSel = CurrentFullTableset.APInvDtlDEASch.FirstOrDefault(
                    row => row.FiscalYear == fiscalPer.FiscalYear && row.FiscalYearSuffix.Compare(fiscalPer.FiscalYearSuffix) == 0 && row.FiscalPeriod == fiscalPer.FiscalPeriod);
                if (ttApInvDtlDEASchSel == null)
                {
                    return fiscalPer;
                }
            }
            return null;
        }

        private void validateAllAmortScheduleFiscalPeriods(List<CreateAmortizations._FiscalPer> fiscalPeriods, bool setAmortSeq)
        {
            var ttAPInvDtlDEASchRows = CurrentFullTableset.APInvDtlDEASch.Where(row => row.RowMod.Compare(IceRow.ROWSTATE_UNCHANGED) != 0 && row.RowMod.Compare(IceRow.ROWSTATE_DELETED) != 0);
            foreach (var ttAPInvDtlDEASchRow in ttAPInvDtlDEASchRows)
            {
                validateAmortScheduleFiscalPeriod(ttAPInvDtlDEASchRow, fiscalPeriods, setAmortSeq, true);
            }
        }

        private DateTime? validateAmortScheduleFiscalPeriod(APInvDtlDEASchRow ttAPInvDtlDEASchRow, List<CreateAmortizations._FiscalPer> fiscalPeriods, bool setAmortSeq, bool errorIfNotFound)
        {
            CreateAmortizations._FiscalPer foundFiscalPeriod = null;
            for (int i = 0; i < fiscalPeriods.Count; i++)
            {
                if (ttAPInvDtlDEASchRow.FiscalYear == fiscalPeriods[i].FiscalYear &&
                    ttAPInvDtlDEASchRow.FiscalYearSuffix.Compare(fiscalPeriods[i].FiscalYearSuffix) == 0 &&
                    ttAPInvDtlDEASchRow.FiscalPeriod == fiscalPeriods[i].FiscalPeriod)
                {
                    if (setAmortSeq)
                    {
                        ttAPInvDtlDEASchRow.AmortSeq = i + 1;
                    }
                    foundFiscalPeriod = fiscalPeriods[i];
                    break;
                }
            }
            if (foundFiscalPeriod == null)
            {
                if (errorIfNotFound)
                {
                    throw new BLException(Strings.FiscalPeriodIsNotBetweenStartAndEndDates(ttAPInvDtlDEASchRow.FiscalYear, ttAPInvDtlDEASchRow.FiscalYearSuffix, ttAPInvDtlDEASchRow.FiscalPeriod));
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return foundFiscalPeriod.EndDate;
            }
        }

        private void getOldBOEAmounts()
        {
            if (BIttAPInvDtl != null)
            {
                dOldExtCost = BIttAPInvDtl.ExtCost;
                dOldDocExtCost = BIttAPInvDtl.DocExtCost;
                dOldRpt1ExtCost = BIttAPInvDtl.Rpt1ExtCost;
                dOldRpt2ExtCost = BIttAPInvDtl.Rpt2ExtCost;
                dOldRpt3ExtCost = BIttAPInvDtl.Rpt3ExtCost;
                /* store old WithholdAmt values */
                dOldBOEWithholdAmt = BIttAPInvDtl.ScrWithholdAmt;
                dOldBOEDocWithholdAmt = BIttAPInvDtl.DocScrWithholdAmt;
                dOldBOERpt1WithholdAmt = BIttAPInvDtl.Rpt1ScrWithholdAmt;
                dOldBOERpt2WithholdAmt = BIttAPInvDtl.Rpt2ScrWithholdAmt;
                dOldBOERpt3WithholdAmt = BIttAPInvDtl.Rpt3ScrWithholdAmt;
            }
            else
            {
                dOldExtCost = 0;
                dOldDocExtCost = 0;
                dOldRpt1ExtCost = 0;
                dOldRpt2ExtCost = 0;
                dOldRpt3ExtCost = 0;
                dOldBOEWithholdAmt = 0;
                dOldBOEDocWithholdAmt = 0;
                dOldBOERpt1WithholdAmt = 0;
                dOldBOERpt2WithholdAmt = 0;
                dOldBOERpt3WithholdAmt = 0;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ipInvDate"></param>
        public void GetPercentFixedAmt(DateTime? ipInvDate)
        {
            TaxRate = FindFirstTaxRate(Session.CompanyID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, ipInvDate.Value);
            if (TaxRate != null)
            {
                ttAPInvTax.RateType = TaxRate.RateType;
                if (TaxRate.RateType == 0)
                {
                    ttAPInvTax.Percent = TaxRate.TaxPercent;
                    ttAPInvTax.FixedAmount = 0;
                    ttAPInvTax.EnableSuperGRate = true;
                }
                else if (TaxRate.RateType == 1)
                { /* FixedAmt */
                    ttAPInvTax.FixedAmount = TaxRate.TaxAmount;
                    ttAPInvTax.Percent = 0;
                    ttAPInvTax.EnableSuperGRate = false;
                }
                else if (TaxRate.RateType == 2)
                {
                    var TaxGRateQuery2 = DBExpressionCompiler.Compile(TaxGRateExpression2);
                    TaxGRate = TaxGRateQuery2(Db, Session.CompanyID, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, ipInvDate.Value, ttAPInvTax.TaxableAmt);
                    if (TaxGRate != null)
                    {
                        if (TaxGRate.TaxPercent > 0)
                        {
                            ttAPInvTax.Percent = TaxGRate.TaxPercent;
                            ttAPInvTax.FixedAmount = 0;
                            ttAPInvTax.EnableSuperGRate = true;
                        }
                        else if (TaxGRate.TaxAmount > 0)
                        {
                            ttAPInvTax.Percent = 0;
                            ttAPInvTax.FixedAmount = TaxGRate.TaxAmount;
                            ttAPInvTax.EnableSuperGRate = false;
                        }
                    }
                }
            }
        }

        private void FilterBOEReferences(int IPageSize, out bool MorePages)
        {
            bool skipThisRec = false;
            MorePages = false;
            int Rowcount = 0;

            foreach (var ttAPInvHedList_Row in CurrentListTableset.APInvHedList.ToList())
            {
                skipThisRec = false;
                ttAPInvHedList = ttAPInvHedList_Row;
                if (ttAPInvHedList.DebitMemo)
                {
                    CurrentListTableset.APInvHedList.Remove(ttAPInvHedList);
                    continue;
                }
                var altAPInvHed = FindFirstAPInvHed(Session.CompanyID, ttAPInvHedList.VendorNum, ttAPInvHedList.InvoiceNum);
                if (altAPInvHed != null && !String.IsNullOrEmpty(altAPInvHed.ReferencedByBOE))
                {
                    if (altAPInvHed.DocUnpostedBal == 0)
                    {
                        CurrentListTableset.APInvHedList.Remove(ttAPInvHedList);
                        continue;
                    }
                }

                foreach (var APInvDtl_iterator in (SelectAPInvDtlByInvoiceRef(Session.CompanyID, ttAPInvHedList.InvoiceNum)))
                {
                    var APInvHedQuery75 = DBExpressionCompiler.Compile(APInvHedExpression75);
                    if ((APInvHedQuery75(Db, Session.CompanyID, APInvDtl_iterator.VendorNum, APInvDtl_iterator.InvoiceNum, false)))
                    {
                        CurrentListTableset.APInvHedList.Remove(ttAPInvHedList);
                        skipThisRec = true;
                        break;
                    }
                }
                if (skipThisRec)
                { continue; }

                if (altAPInvHed != null && altAPInvHed.PEDetTaxAmt != 0)
                {
                    if (altAPInvHed.UnpostedBal <= altAPInvHed.PEDetTaxAmt)
                    {
                        CurrentListTableset.APInvHedList.Remove(ttAPInvHedList);
                        continue;
                    }
                }
                GetListRowLoaded();

                if (IPageSize > 0)
                {
                    Rowcount++;
                    if (Rowcount > IPageSize)
                    {
                        MorePages = true;
                        CurrentListTableset.APInvHedList.Remove(ttAPInvHedList);
                    }
                }
            }
        }

        /// <summary>
        /// This procedure returns the invoices for BOE selection
        /// </summary>
        /// <param name="whereClause">Where clause for Payments.</param>
        /// <returns>A/P invoice list data set.</returns>
        public APInvHedListTableset GetRefInvoicesForBOE(string whereClause)
        {
            APInvHedListTableset ttAPInvHedListTablesetDS = new APInvHedListTableset();
            string[] pcTableName = new string[Ice.Constants.MAX_TABLES];    /* Real database table name.  No temp-table names */
            string[] pcEFL = new string[Ice.Constants.MAX_TABLES];          /* each, first or last for every pcTableName entry*/
            string[] pcFieldName = new string[Ice.Constants.MAX_TABLES];    /* field name for every table. blank for all, without the tablename, pass RepRate[10] for array field */
            string[] pcJoinType = new string[Ice.Constants.MAX_TABLES];     /* valid value is blank or outer-join. Mapping = outer-join = "left join" , blank = " join " of SQL */
            string[] pcWhereClause = new string[Ice.Constants.MAX_TABLES];  /* where clause for every table including company if applicable and without the "where" itself */
            string pcOrderBy = string.Empty;                                /* Order By for the whole query comma separated tablename.fieldname without "by"  */
            string pcErrorMsg = string.Empty;                               /* This method returns Blank if everything ok */
            bool MorePages = false;

            CurrentListTableset.APInvHedList.Clear();
            pcTableName[0] = "Erp.APInvHed";
            pcEFL[0] = " each ";
            pcFieldName[0] = Strings.CompanyCurreDescrVendoOpenPInvoiDueDateInvoiInvoi + Strings.DocInDocInLegalEntryInvoi + Strings.InvoiDebitUnposDocUnFiscaFiscaInvoiPayHold + "PMUID,TermsCode";
            pcJoinType[0] = "";
            pcWhereClause[0] = "Company = '" + Session.CompanyID + "' AND " + whereClause;
            pcOrderBy = "";
            pcTableName[1] = "Erp.Vendor";
            pcEFL[1] = " first ";
            pcFieldName[1] = "VendorID:VendorID,VendorName:Name";
            pcJoinType[1] = " outer-join ";
            pcWhereClause[1] = "Vendor.Company = ApInvHed.Company and Vendor.VendorNum = ApInvHed.VendorNum";
            pcTableName[2] = "Erp.Currency";
            pcEFL[2] = " first ";
            pcFieldName[2] = "CurrencyCodeCurrencyID:CurrencyID";
            pcJoinType[2] = " outer-join ";
            pcWhereClause[2] = " Currency.Company = ApInvHed.Company and Currency.CurrencyCode = ApInvHed.CurrencyCode ";

            LibExecuteQuery.Run<APInvHedListRow>(pcTableName, pcEFL, pcFieldName, pcJoinType, pcWhereClause, pcOrderBy, 2, CurrentListTableset.APInvHedList, out pcErrorMsg);
            if (!String.IsNullOrEmpty(pcErrorMsg))
            {
                throw new BLException(pcErrorMsg);
            }

            FilterBOEReferences(0, out MorePages);

            ttAPInvHedListTablesetDS = CurrentListTableset;
            return ttAPInvHedListTablesetDS;
        }

        ///<summary>
        ///  Purpose: Used to get additional filter to get the list of purchase points on line level
        ///</summary>   
        /// <param name="ipVendorNum">Supplier ID</param>
        /// <param name="ipInvoiceNum">Invoice Number</param>   
        /// <param name="opFilterString">Sub filter</param>
        public void GetLinePurPointFilterString(int ipVendorNum, string ipInvoiceNum, out string opFilterString)
        {
            opFilterString = String.Empty;
            if (isIndiaLocalization)
            {
                Erp.Tables.APInvHed altAPInvHed = Erp.Tables.APInvHed.FindFirstByPrimaryKey(this.Db, Session.CompanyID, ipVendorNum, ipInvoiceNum);
                if (altAPInvHed != null)
                {
                    opFilterString = " INTaxRegionCode IN ('" + altAPInvHed.TaxRegionCode + "','')";
                }
            }
        }

        /// <param name="APInvHedWhereClause"></param>
        /// <param name="PageSize"></param>
        /// <param name="AbsolutePage"></param>
        /// <param name="MorePages"></param>
        /// <returns></returns>
        public APInvHedListTableset GetListBOEReferences(string APInvHedWhereClause, int PageSize, int AbsolutePage, out bool MorePages)
        {
            MorePages = false;
            CurrentListTableset = this.GetList(APInvHedWhereClause, PageSize, AbsolutePage, out MorePages);

            FilterBOEReferences(PageSize, out MorePages);
            return CurrentListTableset;
        }

        ///<summary>
        ///  Purpose: Used to get additional filter to get the list of purchase orders
        ///</summary>   
        /// <param name="ipVendorNum">Supplier ID</param>
        /// <param name="ipInvoiceNum">Invoice Number</param>   
        /// <param name="opFilterString">Sub filter</param>
        public void GetPOFilterString(int ipVendorNum, string ipInvoiceNum, out string opFilterString)
        {
            opFilterString = String.Empty;
            if (isIndiaLocalization)
            {
                Erp.Tables.APInvHed altAPInvHed = Erp.Tables.APInvHed.FindFirstByPrimaryKey(this.Db, Session.CompanyID, ipVendorNum, ipInvoiceNum);
                if (altAPInvHed != null)
                {
                    opFilterString = " TaxRegionCode IN ('" + altAPInvHed.TaxRegionCode + "','')";
                }
            }
        }

        /// <summary>
        /// This method returns the Exchange Rate information for the selected Currency.  The system
        /// may not have an exchange rate between the APInvoice and Base so it may use an middle Currency
        /// so that it will go APInvoice Currency -> Ref Currency -> Base Currency
        /// </summary>
        /// <param name="vCurrencyCode">Currency selected for the APInvoice</param>
        /// <param name="vRateGrpCode">Currency Rate Group selected for the APInvoice </param>
        /// <param name="vExchangeRate">Current exchange rate between the APInvoice currency and the Ref Currency</param>
        /// <param name="vXRateLabel">Label for the Exchange Rate field</param>
        /// <param name="ds">The APInvoice data set</param>
        public void GetValueExchageRate(string vCurrencyCode, string vRateGrpCode, out decimal vExchangeRate, out string vXRateLabel, ref APInvoiceTableset ds)
        {
            vExchangeRate = decimal.Zero;
            vXRateLabel = string.Empty;
            CurrentFullTableset = ds;

            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvHed");
            }
            getValueExchRateCore(vCurrencyCode, vRateGrpCode, out vExchangeRate, out vXRateLabel);
        }

        /// <summary>
        /// This method returns the Exchange Rate information for the selected Currency.  The system
        /// may not have an exchange rate between the APInvoice and Base so it may use an middle Currency
        /// so that it will go APInvoice Currency -> Ref Currency -> Base Currency
        /// </summary>
        /// <param name="vCurrencyCode">Currency selected for the APInvoice</param>
        /// <param name="vRateGrpCode">Currency Rate Group selected for the APInvoice </param>
        /// <param name="vExchangeRate">Current exchange rate between the APInvoice currency and the Ref Currency</param>
        /// <param name="vXRateLabel">Label for the Exchange Rate field</param>
        private void getValueExchRateCore(string vCurrencyCode, string vRateGrpCode, out decimal vExchangeRate, out string vXRateLabel)
        {
            vExchangeRate = decimal.Zero;
            vXRateLabel = string.Empty;
            if (vUseDate == 1)
            {
                vExDate = ttAPInvHed.InvoiceDate;
            }
            else
            {
                vExDate = ttAPInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", "", "", "", "", "", "", "", "", vCurrencyCode, vRateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);
            vExchangeRate = Compatibility.Convert.ToDecimal(pRateList.Entry(0, Ice.Constants.LIST_DELIM));
            vXRateLabel = this.LibXRateLabelEF.XRateLabel(vCurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows);
            ExceptionManager.AssertNoBLExceptions();
        }

        private void calcSummarizationDate()
        {
            string JPTermsCode = string.Empty;

            if (ttAPInvHed.InvoiceDate != null && (this.ExistsJPAPPerBillHead(Session.CompanyID, ttAPInvHed.VendorNum)))
            {
                if (!(this.ExistsJPAPPerBillDtl(Session.CompanyID, ttAPInvHed.VendorNum, 0)))
                {
                    throw new BLException(Strings.SuppIsMissingPaymentProposalSchedConfi, "JPAPPerBillDtl", "VendorNum");
                }

                var outSummarizationDate = ttAPInvHed.JPSummarizationDate;
                using (GetPBDates libGetPBDates = new GetPBDates(Db))
                {

                    libGetPBDates.APGetPBDates(ttAPInvHed.VendorNum, ttAPInvHed.InvoiceDate, out outSummarizationDate, out JPTermsCode);
                    ttAPInvHed.JPSummarizationDate = outSummarizationDate;
                }
            }

        }

        private void getVendorDefaults()
        {
            string foreignKey = string.Empty;
            string sReturnTaxRegionCode = string.Empty;
            string sInvoiceTaxRegionCode = string.Empty;

            if (!ttAPInvHed.InvoiceType.KeyEquals("BOE"))
            {
                if (!ttAPInvHed.GRNIClearing)
                    sInvoiceTaxRegionCode = Vendor.TaxRegionCode;
            }

            ttAPInvHed.VendorNumVendorID = Vendor.VendorID;
            ttAPInvHed.VendorNum = Vendor.VendorNum;
            ttAPInvHed.TaxRegionCode = sInvoiceTaxRegionCode;
            getBillAddressList();

            if (isJapanLocalization)
            {
                calcSummarizationDate();
            }

            if (String.IsNullOrEmpty(ttAPInvHed.TaxRegionCode) && !ttAPInvHed.InvoiceType.KeyEquals("BOE"))
            {
                Country = Country.FindFirstByPrimaryKey(Db, Vendor.Company, Vendor.CountryNum);
                if (Country != null)
                {
                    ttAPInvHed.TaxRegionCode = Country.APTaxRegionCode;
                }
            }

            TaxRgn = TaxRgn.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvHed.TaxRegionCode);
            if (TaxRgn != null)
            {
                ttAPInvHed.InPrice = TaxRgn.InPrice;
            }
            else
            {
                ttAPInvHed.InPrice = false;
            }

            /*Any change of Vendor will reset TermsCode*/
            if ((ttAPInvHed.DebitMemo == false || isDiscountforDebitM == true) && !String.IsNullOrEmpty(Vendor.TermsCode))
            {
                ttAPInvHed.TermsCode = Vendor.TermsCode;

                PurTerms = PurTerms.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvHed.TermsCode);
                if (PurTerms != null)
                {
                    ttAPInvHed.PayDiscPartPay = PurTerms.PartPayment;
                }
            }
            /* SCR #3119 - Default the central payment flag from Vendor. *
             * But if Parent Company is the Current Company then CPay is *
             * always set to no.                                         */
            if (apSystPartial == null)
            {


                apSystPartial = FindPartialAPSyst(ttAPInvHed.Company);
            }
            if (apSystPartial == null || String.IsNullOrEmpty(apSystPartial.CPayCompany) ||
            StringExtensions.Compare(apSystPartial.CPayCompany, ttAPInvHed.Company) == 0)
            {
                ttAPInvHed.CPay = false;
            }
            else
            {
                ttAPInvHed.CPay = Vendor.CPay;
            }

            ttAPInvHed.PMUID = 0;
            if (Vendor.PMUID != 0)
            {
                ttAPInvHed.PMUID = Vendor.PMUID;
            }
            if (isDenmarkLocalization)
            {


                var VendBankQuery2 = DBExpressionCompiler.Compile(VendBankExpression2);
                foreach (var VendBank_iterator in (VendBankQuery2(Db, Session.CompanyID, ttAPInvHed.VendorNum)))
                {
                    VendBank = VendBank_iterator;


                    var VendorQuery17 = DBExpressionCompiler.Compile(VendorExpression17);
                    if ((VendorQuery17(Db, Session.CompanyID, VendBank.VendorNum, VendBank.BankID)))
                    {
                        ttAPInvHed.BankID = VendBank.BankID;
                        break;
                    }
                }
            }
            /* Sweden Finland Localization */
            if (isSEOrFILocalization)
            {
                PayMethod = PayMethod.FindFirstByPrimaryKey(Db, Vendor.Company, Vendor.PMUID);
                if (PayMethod != null)
                {
                    ttAPInvHed.SEPayCode = PayMethod.DefPayCode;
                }

                var bVendor = Vendor.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvHed.VendorNum);
                if (bVendor != null && bVendor.NoBankingReference)
                {
                    ttAPInvHed.SEBankRef = "X";
                }
                else if (StringExtensions.Compare(ttAPInvHed.SEBankRef, "X") == 0)
                {
                    ttAPInvHed.SEBankRef = "";
                }
            }
            if (isNorwayLocalization)
            {
                string cVendCountryISOCode = string.Empty;
                var bCountry = Country.FindFirstByPrimaryKey(Db, Session.CompanyID, Vendor.CountryNum);
                if (bCountry != null)
                {
                    cVendCountryISOCode = bCountry.ISOCode;
                }
                if ((cVendCountryISOCode.Compare("NO") != 0) && (ExistsUDCodes(Session.CompanyID, "TranReason", true, "14")))
                {
                    ttAPInvHed.SEPayCode = "14";
                }
            }
            /* Estonia Localization */
            if (isEstoniaLocalization || isDenmarkLocalization)
            {
                ttAPInvHed.SEBankRef = Vendor.PmtAcctRef;
            }

            if (isPolandLocalization)
            {
                ttAPInvHed.PLVendorAutoInvoiceNum = IsVendorPLAutomaticInvoiceNumber(ttAPInvHed.VendorNum);
            }

            if (isTaiwanLocalization)
            {
                var guiVendDfltDocType = FindFirstTWGUIVendDfltDocType(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.DebitMemo ? "DM" : "Inv");
                if (guiVendDfltDocType != null)
                {
                    try
                    {
                        APInvoiceTableset APInvoiceDS = CurrentFullTableset;
                        OnChangeTranDocTypeID(guiVendDfltDocType.TranDocType, ref APInvoiceDS);
                    }
                    catch { }
                }
            }

            /* Thai Localization */
            if (isThaiLocalization)
            {
                ttAPInvHed.SupAgentTaxRegNo = Vendor.TaxPayerID;
                ttAPInvHed.BranchID = Vendor.THBranchID;
            }

            if (isMexicoLocalization)
            {
                ttAPInvHed.MXRetentionCode = Vendor.MXRetentionCode;
                ttAPInvHed.MXTARCode = Vendor.MXTARCode;
            }
        }

        /// <summary>
        /// Method to call when peforming G/L allocation. This method uses the AllocationID
        /// and AllocationAmount fields from APInvDtl to create the allocation records.  After
        /// this method runs, the APInvDtl and APInvExp records will be passed back.  It is expected 
        /// that the AllocationID and AllocationAmount fields will be entered separately from the 
        /// other APInvDtl fields since the fields are used only for this method and are not written
        /// to the APInvDtl database table.
        /// </summary>
        /// <param name="vCurrSwitch">Currency Swithch</param> 
        /// <param name="ds">The APInvoice data set</param>
        public void GLAllocation(bool vCurrSwitch, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            bool lRcdsUpdated = false;


            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, "APInvDtl");
            }

            var APInvDtlQuery26 = DBExpressionCompiler.Compile(APInvDtlExpression26);
            APInvDtl = APInvDtlQuery26(Db, ttAPInvDtl.SysRowID);
            if (APInvDtl == null)
            {
                throw new BLException(Strings.InvalidInvoiceLine, "APInvDtl");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvalidInvoice, "APInvHed");
            }
            /* Validate Allocation was chosen */

            var APAlcHedQuery = DBExpressionCompiler.Compile(APAlcHedExpression);
            if (!((APAlcHedQuery(Db, ttAPInvDtl.Company, ttAPInvDtl.AllocationID))))
            {
                ExceptionManager.AddBLException(Strings.TheAllocationIDIsInvalid, "APInvDtl", "AllocationID");
            }/* if not(can-find(APAlcHed  */

            if (ttAPInvDtl.DspAllocationAmount == 0)
            {
                ExceptionManager.AddBLException(Strings.AnAllocationAmountIsRequired, "APInvDtl", "AllocationAmount");
            }/* if ttAPInvDtl.AllocationAmount = 0 */

            ExceptionManager.AssertNoBLExceptions();

            this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);

            if (vCurrSwitch)
            {
                ttAPInvDtl.AllocationAmount = ttAPInvDtl.DspAllocationAmount;
                if (ttAPInvDtl.AllocationAmount == ttAPInvDtl.Variance)
                {
                    ttAPInvDtl.DocAllocationAmount = ttAPInvDtl.DocVariance;
                    ttAPInvDtl.Rpt1AllocationAmount = ttAPInvDtl.Rpt1Variance;
                    ttAPInvDtl.Rpt2AllocationAmount = ttAPInvDtl.Rpt2Variance;
                    ttAPInvDtl.Rpt3AllocationAmount = ttAPInvDtl.Rpt3Variance;
                }
                else
                {
                    ttAPInvDtl.DocAllocationAmount = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.AllocationAmount, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "APInvDtl", "ExtCost");
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvDtl, false, "AllocationAmount", pCurrList, "ttAPInvDtl", APInvHed.CurrencyCode, ttChainRows);
                }
            }
            else
            {
                ttAPInvDtl.DocAllocationAmount = ttAPInvDtl.DspAllocationAmount;
                if (ttAPInvDtl.DocAllocationAmount == ttAPInvDtl.DocVariance)
                {
                    ttAPInvDtl.AllocationAmount = ttAPInvDtl.Variance;
                    ttAPInvDtl.Rpt1AllocationAmount = ttAPInvDtl.Rpt1Variance;
                    ttAPInvDtl.Rpt2AllocationAmount = ttAPInvDtl.Rpt2Variance;
                    ttAPInvDtl.Rpt3AllocationAmount = ttAPInvDtl.Rpt3Variance;
                }
                else
                {
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvDtl, true, "AllocationAmount", pCurrList, "ttAPInvDtl", APInvHed.CurrencyCode, ttChainRows);
                }
            }

            APCreateGLAlloc.RunCreateGLAlloc(APInvDtl.SysRowID, ttAPInvDtl.AllocationID, ttAPInvDtl.AllocationAmount, ttAPInvDtl.DocAllocationAmount, ttAPInvDtl.Rpt1AllocationAmount, ttAPInvDtl.Rpt2AllocationAmount, ttAPInvDtl.Rpt3AllocationAmount, vCurrSwitch, out lRcdsUpdated);

            /* Send back refreshed datatable records if records were updated. */
            if (lRcdsUpdated == true)
            {
                var APInvDtlQuery26_4 = DBExpressionCompiler.Compile(APInvDtlExpression26);
                APInvDtl = APInvDtlQuery26_4(Db, ttAPInvDtl.SysRowID);
                BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
                ttAPInvDtl.SysRowID = APInvDtl.SysRowID;
                APInvDtlAfterGetRows();
                APInvDtl_Foreign_Link();
                ttAPInvDtl.RowMod = IceRow.ROWSTATE_UNCHANGED;

                foreach (var APInvExp_iterator in (SelectAPInvExp(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine)))
                {
                    APInvExp = APInvExp_iterator;
                    refreshttAPInvExp();
                }/* for each APInvExp */

                ttAPInvDtl.AllocationID = "";
                ttAPInvDtl.AllocationDesc = "";
                ttAPInvDtl.AllocationAmount = 0;
            }
        }

        #region GlbAPIETGLC Table Methods

        partial void GlbAPIETGLCAfterUpdate()
        {
            bool hasToBeRefreshed = false;
            if (ttAPInvExp == null)
            {
                hasToBeRefreshed = true;
            }
            else if (ttAPInvExp.VendorNum != ttGlbAPIETGLC.VendorNum ||
                       StringExtensions.Compare(ttAPInvExp.InvoiceNum, ttGlbAPIETGLC.InvoiceNum) != 0 ||
                       ttAPInvExp.InvoiceLine != ttGlbAPIETGLC.InvoiceLine ||
                       ttAPInvExp.InvExpSeq != ttGlbAPIETGLC.InvExpSeq)
            {
                hasToBeRefreshed = true;
            }

            if (hasToBeRefreshed)
            {
                ttAPInvExp = (from ttAPInvExp_Row in CurrentFullTableset.APInvExp
                              where StringExtensions.Compare(ttAPInvExp_Row.Company, ttGlbAPIETGLC.Company) == 0
                              && StringExtensions.Compare(ttAPInvExp_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) == 0
                              && ttAPInvExp_Row.VendorNum == ttGlbAPIETGLC.VendorNum
                              && StringExtensions.Compare(ttAPInvExp_Row.InvoiceNum, ttGlbAPIETGLC.InvoiceNum) == 0
                              && ttAPInvExp_Row.InvoiceLine == ttGlbAPIETGLC.InvoiceLine
                              && ttAPInvExp_Row.InvExpSeq == ttGlbAPIETGLC.InvExpSeq
                              select ttAPInvExp_Row).FirstOrDefault();
            }

            if (ttAPInvExp != null)
            {
                // SCR 127350 Force update of external GL account information
                ttAPInvExp.ExtGLAccount = ttGlbAPIETGLC.GLAccount;
                var GLBGLAcctDisp = FindFirstGLBGLAcctDisp(Session.CompanyID, ttAPInvExp.ExtCompanyID, ttAPInvExp.ExtCOACode, ttAPInvExp.ExtGLAccount);
                if (GLBGLAcctDisp != null)
                {
                    ttAPInvExp.ExpGlbDispGLAcct = GLBGLAcctDisp.GLAcctDisp;
                    ttAPInvExp.ExtGLAccountDesc = GLBGLAcctDisp.AccountDesc;
                }
            }
        }
        partial void GlbAPIETGLCAfterGetNew()
        {
            if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt"))
            {

                APInvHed bAPInvHed = FindFirstAPInvHed(Session.CompanyID, ttGlbAPIETGLC.VendorNum, ttGlbAPIETGLC.InvoiceNum);
                if (bAPInvHed != null)
                {
                    ttGlbAPIETGLC.GroupID = bAPInvHed.GroupID;
                    ttGlbAPIETGLC.Key5 = bAPInvHed.GroupID;
                }

                int iNextTranNum = 0;

                var TranGLCQuery5 = DBExpressionCompiler.Compile(TranGLCExpression5);
                TranGLC = TranGLCQuery5(Db, Session.CompanyID, "APInvExp", Compatibility.Convert.ToString(ttGlbAPIETGLC.VendorNum), Compatibility.Convert.ToString(ttGlbAPIETGLC.InvoiceNum), Compatibility.Convert.ToString(ttGlbAPIETGLC.InvoiceLine), Compatibility.Convert.ToString(ttGlbAPIETGLC.InvExpSeq));
                if (TranGLC != null)
                {
                    iNextTranNum = TranGLC.TGLCTranNum + 1;
                }

                ttAPInvExpTGLC = (from ttAPInvExpTGLC_Row in CurrentFullTableset.APInvExpTGLC
                                  where ttAPInvExpTGLC_Row.Company.KeyEquals(Session.CompanyID)
                                  && StringExtensions.Compare(ttAPInvExpTGLC_Row.RelatedToFile, "APInvExp") == 0
                                  && ttAPInvExpTGLC_Row.Key1.KeyEquals(Compatibility.Convert.ToString(ttGlbAPIETGLC.VendorNum))
                                  && ttAPInvExpTGLC_Row.Key2.KeyEquals(Compatibility.Convert.ToString(ttGlbAPIETGLC.InvoiceNum))
                                  && ttAPInvExpTGLC_Row.Key3.KeyEquals(Compatibility.Convert.ToString(ttGlbAPIETGLC.InvoiceLine))
                                  && ttAPInvExpTGLC_Row.Key4.KeyEquals(Compatibility.Convert.ToString(ttGlbAPIETGLC.InvExpSeq))
                                  && (ttAPInvExpTGLC_Row.RowMod == IceRow.ROWSTATE_ADDED || ttAPInvExpTGLC_Row.RowMod == IceRow.ROWSTATE_UPDATED)
                                  select ttAPInvExpTGLC_Row).LastOrDefault();
                if (ttAPInvExpTGLC != null)
                {
                    if (iNextTranNum <= ttAPInvExpTGLC.TGLCTranNum)
                    {
                        iNextTranNum = ttAPInvExpTGLC.TGLCTranNum + 1;
                    }
                }

                ttGlbAPIETGLC.RelatedToFile = "APInvExp";
                ttGlbAPIETGLC.Key1 = Compatibility.Convert.ToString(ttGlbAPIETGLC.VendorNum);
                ttGlbAPIETGLC.Key2 = Compatibility.Convert.ToString(ttGlbAPIETGLC.InvoiceNum);
                ttGlbAPIETGLC.Key3 = Compatibility.Convert.ToString(ttGlbAPIETGLC.InvoiceLine);
                ttGlbAPIETGLC.Key4 = Compatibility.Convert.ToString(ttGlbAPIETGLC.InvExpSeq);
                ttGlbAPIETGLC.TGLCTranNum = iNextTranNum;
                ttGlbAPIETGLC.SysGLControlType = "AP Invoice Expense";
                ttGlbAPIETGLC.GLAcctContext = "External Expense";
                ttGlbAPIETGLC.UserCanModify = true;
                ttGlbAPIETGLC.IsExternalCompany = true;
                ttGlbAPIETGLC.RecordType = "A";
                ttGlbAPIETGLC.CreateDate = CompanyTime.Today();
                ttGlbAPIETGLC.TranDate = ttGlbAPIETGLC.CreateDate;
            }
        }

        partial void GlbAPIETGLCAfterGetRows()
        {
            ttGlbAPIETGLC.VendorNum = Compatibility.Convert.ToInt32(ttGlbAPIETGLC.Key1);
            ttGlbAPIETGLC.InvoiceNum = Compatibility.Convert.ToString(ttGlbAPIETGLC.Key2);
            ttGlbAPIETGLC.InvoiceLine = Compatibility.Convert.ToInt32(ttGlbAPIETGLC.Key3);
            ttGlbAPIETGLC.InvExpSeq = Compatibility.Convert.ToInt32(ttGlbAPIETGLC.Key4);
            ttGlbAPIETGLC.GroupID = Compatibility.Convert.ToString(ttGlbAPIETGLC.Key5);

            bool hasToBeRefreshed = false;
            if (ttAPInvExp == null)
            {
                hasToBeRefreshed = true;
            }
            else if (ttAPInvExp.VendorNum != ttGlbAPIETGLC.VendorNum ||
                       StringExtensions.Compare(ttAPInvExp.InvoiceNum, ttGlbAPIETGLC.InvoiceNum) != 0 ||
                       ttAPInvExp.InvoiceLine != ttGlbAPIETGLC.InvoiceLine ||
                       ttAPInvExp.InvExpSeq != ttGlbAPIETGLC.InvExpSeq)
            {
                hasToBeRefreshed = true;
            }

            if (hasToBeRefreshed)
            {
                ttAPInvExp = (from ttAPInvExp_Row in CurrentFullTableset.APInvExp
                              where StringExtensions.Compare(ttAPInvExp_Row.Company, ttGlbAPIETGLC.Company) == 0
                              && StringExtensions.Compare(ttAPInvExp_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) == 0
                              && ttAPInvExp_Row.VendorNum == ttGlbAPIETGLC.VendorNum
                              && StringExtensions.Compare(ttAPInvExp_Row.InvoiceNum, ttGlbAPIETGLC.InvoiceNum) == 0
                              && ttAPInvExp_Row.InvoiceLine == ttGlbAPIETGLC.InvoiceLine
                              && ttAPInvExp_Row.InvExpSeq == ttGlbAPIETGLC.InvExpSeq
                              select ttAPInvExp_Row).FirstOrDefault();
            }

            if (ttAPInvExp == null)
            {


                var APInvExpQuery21 = DBExpressionCompiler.Compile(APInvExpExpression21);
                APInvExp = APInvExpQuery21(Db, ttGlbAPIETGLC.Company, ttGlbAPIETGLC.VendorNum, ttGlbAPIETGLC.InvoiceNum, ttGlbAPIETGLC.InvoiceLine, ttGlbAPIETGLC.InvExpSeq);
                if (APInvExp != null)
                {
                    ttAPInvExp = new Erp.Tablesets.APInvExpRow();
                    CurrentFullTableset.APInvExp.Add(ttAPInvExp);
                    BufferCopy.Copy(APInvExp, ref ttAPInvExp);
                    APInvExpAfterGetRows();
                    APInvExp_Foreign_Link();
                }
            }/* if not available ttAPInvExp */

            if (ttAPInvExp != null)
            {
                GLAcctDisp = FindFirstGLAcctDispByGLAccount(ttAPInvExp.ExtCompanyID, ttAPInvExp.ExtCOACode, ttAPInvExp.ExtGLAccount);
                if (GLAcctDisp != null)
                {
                    ttAPInvExp.ExpGlbDispGLAcct = GLAcctDisp.GLAcctDisp1;
                    ttAPInvExp.ExtGLAccountDesc = GLAcctDisp.AccountDesc;
                }
            }
        }

        partial void GlbAPIETGLCBeforeCreate()
        {
            Erp.Tables.TranGLC bTranGLC = new TranGLC();

            var BTranGLCQuery = DBExpressionCompiler.Compile(BTranGLCExpression);
            bTranGLC = BTranGLCQuery(Db, ttGlbAPIETGLC.Company, ttGlbAPIETGLC.RelatedToFile, ttGlbAPIETGLC.Key1, ttGlbAPIETGLC.Key2, ttGlbAPIETGLC.Key3, ttGlbAPIETGLC.Key4, ttGlbAPIETGLC.Key5, ttGlbAPIETGLC.Key6, ttGlbAPIETGLC.SysGLControlType);
            if (bTranGLC != null)
            {
                ttGlbAPIETGLC.SysGLControlCode = bTranGLC.SysGLControlCode;
            }
            else
            {
                ttGlbAPIETGLC.SysGLControlCode = Compatibility.Convert.ToString(LibLongSequence.GetNextSequence("SysGLCntrlCodeSeq"));
            }
            if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt"))
            {
                if (string.IsNullOrEmpty(ttGlbAPIETGLC.COACode))
                {
                    ttGlbAPIETGLC.COACode = FindFirstGLBCOACode(Session.CompanyID, ttGlbAPIETGLC.ExtCompanyID);
                }
                if (bTranGLC != null && !ttGlbAPIETGLC.IsExternalCompany)
                {
                    ttGlbAPIETGLC.BookID = bTranGLC.BookID;
                }
            }
        }

        partial void GlbAPIETGLCBeforeUpdate()
        {

            LibAPInvExpTranGLCBO.BeforeUpdate(ttGlbAPIETGLC);
            var vParams = LibAPInvExpTranGLCBO.GetDefaultValidateParams(ttGlbAPIETGLC);
            vParams.MessageDoc = Strings.InvalidExtAccountDoc(vParams.DocumentKeys.Key2, vParams.DocumentKeys.Key3, vParams.GLAccount, ttGlbAPIETGLC.BookID);
            vParams.MessageTab = Strings.ReviewGLAnalysisTab;

            var ttAPInvHedRow = FindFirstAPInvHed(ttGlbAPIETGLC.Company, ttGlbAPIETGLC.VendorNum, ttGlbAPIETGLC.InvoiceNum);
            if (ttAPInvHedRow != null)
                vParams.EffectiveDate = ttAPInvHedRow.InvoiceDate;
            LibAPInvExpTranGLCBO.ValidateGLAccount(vParams);

            //It validates inside if it exists a GLAcctDisp. If not, it creates a new record for it.
            GLCreateGLAcctDisp.CheckDispAcctGLB(ttGlbAPIETGLC.Company, ttGlbAPIETGLC.ExtCompanyID, ttGlbAPIETGLC.COACode, ttGlbAPIETGLC.GLAccount);

            //Look for GLAcctDisp that corresponds to the GL Account. If not found create it.
            GLBGLAcctDisp glbGLAcctDisp = FindFirstGLBGLAcctDisp(ttGlbAPIETGLC.Company, ttGlbAPIETGLC.ExtCompanyID, ttGlbAPIETGLC.COACode, ttGlbAPIETGLC.GLAccount);

            //If GLAcctDisp was created or already existed, set the proper information.
            if (glbGLAcctDisp != null)
            {
                ttGlbAPIETGLC.GLAccountGLAcctDisp = glbGLAcctDisp.GLAcctDisp;
                ttGlbAPIETGLC.GLAccountAccountDesc = glbGLAcctDisp.AccountDesc;
            }
        }

        #endregion

        /// <summary>
        /// Method to call to invoice the selected receipt lines.  This method will run through each
        /// APSelectedRcptLines and create an APInvDtl record.  After this method is called, the
        /// GetRows method should be called to get the invoice lines that were created.
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="opLOCMsg">Message to return on unmatch LOC</param>
        /// <returns></returns>
        public void InvoiceSelectedLines(ref APInvReceiptBillingTableset ds, out string opLOCMsg)
        {
            string vTaxRegionCode = string.Empty;
            string InvoiceLOC = string.Empty;
            string PoLOC = string.Empty;
            string locLineList = string.Empty;

            opLOCMsg = string.Empty;
            APInvoiceTableset apInvoiceTableset = new APInvoiceTableset();

            Erp.Tables.APInvHed bAPInvHed = null;

            var dropShipSelectedLine = (from ttAPSelectedRcptLines_Row in ds.APSelectedRcptLines
                                        where !ttAPSelectedRcptLines_Row.RowMod.Equals(IceRow.ROWSTATE_UNCHANGED, StringComparison.OrdinalIgnoreCase) &&
                                              ttAPSelectedRcptLines_Row.DropShip
                                        select ttAPSelectedRcptLines_Row).FirstOrDefault();

            if (dropShipSelectedLine != null && IsGRNIInvoice(dropShipSelectedLine.Company, dropShipSelectedLine.InvoiceNum, dropShipSelectedLine.VendorNum))
            {
                throw new BLException(Strings.CannotDropShipGRNI);
            }

            /* SCR 91988 Because the selection is passing back selected rows as modified, we'll delete the unchanged to improve performance. */
            foreach (var ttAPSelectedRcptLines_iterator in (from ttAPSelectedRcptLines_Row in ds.APSelectedRcptLines
                                                            where StringExtensions.Compare(ttAPSelectedRcptLines_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) == 0
                                                            select ttAPSelectedRcptLines_Row).ToList())
            {
                ds.APSelectedRcptLines.Remove(ttAPSelectedRcptLines_iterator);
            }

            APCreateAPLinesFromRcptDtl.RunCreateAPLinesFromRcptDtl(ds.APSelectedRcptLines);
            APCreateAPLinesFromDropShipDtl.RunCreateAPLinesFromDropShipDtl(ds.APSelectedRcptLines);


            ttAPSelectedRcptLines = (from ttAPSelectedRcptLines_Row in ds.APSelectedRcptLines
                                     select ttAPSelectedRcptLines_Row).FirstOrDefault();
            if (ttAPSelectedRcptLines != null)
            {
                using (var txScope = ErpContext.CreateDefaultTransactionScope())
                {

                    bAPInvHed = this.FindFirstAPInvHedWithUpdLock(Session.CompanyID, ttAPSelectedRcptLines.VendorNum, ttAPSelectedRcptLines.InvoiceNum);
                    if (bAPInvHed != null)
                    {
                        InvoiceLOC = bAPInvHed.APLOCID;

                        if (bAPInvHed.ReadyToCalc)
                        {
                            ErpCallContext.Add("NonRecTax-Massive");
                            ErpCallContext.SetDisposableKeyValue(new KeyValuePair<string, object>("NonRecTax-Massive", bAPInvHed.SysRowID));
                            SetReadyToCalc("", bAPInvHed.InvoiceNum, bAPInvHed.VendorNum, false, false, ref apInvoiceTableset);
                        }
                        else
                        {
                            if (bAPInvHed.MatchedFromLI && !bAPInvHed.AllowOverrideLI && ExistsNonDedTaxForInvoice(Session.CompanyID, bAPInvHed.VendorNum, bAPInvHed.InvoiceNum))

                            {
                                foreach (var apInvDtl in (SelectAPInvDtl(bAPInvHed.Company, bAPInvHed.VendorNum, bAPInvHed.InvoiceNum)))
                                {
                                    generateNonDeducExpenses(apInvDtl.VendorNum, apInvDtl.InvoiceNum, apInvDtl.InvoiceLine);
                                }
                            }
                        }
                    }
                    Db.Validate();
                    txScope.Complete();
                }
                //Check if any mismatch with Letter of Credit assigned to invoice and Letter of Credit assigned to PO related to invoice lines
                opLOCMsg = VerifyLocMismatch(ttAPSelectedRcptLines.VendorNum, ttAPSelectedRcptLines.InvoiceNum, InvoiceLOC);
            }
            ds.APUninvoicedReceipts.Clear();
            ds.APUninvoicedRcptLines.Clear();
            ds.APSelectedRcptLines.Clear();
        }

        private string VerifyLocMismatch(int vendorNum, string invoiceNum, string invoiceLOC)
        {
            string locMessage = string.Empty;
            string locLineList = string.Empty;
            string locIDList = string.Empty;
            bool apInvDtlHasLoc = false; //will be set equal to true if at least one invcDtl has assigned a LOC

            var apInvcDtlList = SelectAPInvDtl(Session.CompanyID, vendorNum, invoiceNum, "R");
            apInvDtlHasLoc = ((from row in apInvcDtlList
                               where !string.IsNullOrEmpty(row.APLOCID)
                               select row).Any());

            if (apInvcDtlList.Any() && (!string.IsNullOrEmpty(invoiceLOC) || apInvDtlHasLoc))
            {
                foreach (int invLine in (from row in apInvcDtlList
                                         where !row.APLOCID.KeyEquals(invoiceLOC)
                                         select row.InvoiceLine))
                {
                    if (String.IsNullOrEmpty(locLineList))
                    {
                        locLineList = Compatibility.Convert.ToString(invLine);
                    }
                    else
                    {
                        locLineList = locLineList + ", " + Compatibility.Convert.ToString(invLine);
                    }
                }
                foreach (string apLocId in (from row in apInvcDtlList
                                            where !row.APLOCID.KeyEquals(invoiceLOC)
                                            select row.APLOCID).Distinct())
                {
                    if (String.IsNullOrEmpty(locIDList))
                    {
                        locIDList = String.IsNullOrEmpty(apLocId) ? Strings.NotDefined : apLocId;
                    }
                    else
                    {
                        locIDList = locIDList + ", " + (String.IsNullOrEmpty(apLocId) ? Strings.NotDefined : apLocId);
                    }
                }
                if (!String.IsNullOrEmpty(locLineList))
                {
                    locMessage = Strings.LOCNotMatch((String.IsNullOrEmpty(invoiceLOC) ? Strings.NotDefined : invoiceLOC), locIDList, locLineList);
                }
            }
            return locMessage;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cpInvoiceNum">Invoice Number</param>
        /// <param name="opIsCorrectionInvoice">Is Correction Invoice</param>
        public void IsCorrectionInvoice(string cpInvoiceNum, out bool opIsCorrectionInvoice)
        {
            opIsCorrectionInvoice = false;

            var APInvHedQuery = DBExpressionCompiler.Compile(APInvHedExpression90);
            APInvHed = APInvHedQuery(Db, Session.CompanyID, cpInvoiceNum);

            if (APInvHed != null)
            {
                opIsCorrectionInvoice = APInvHed.CorrectionInv;
            }
        }

        /// <summary>
        /// Create multiple ApInvDtl for a BOE ApInvHed from multiple selected invoices.
        /// </summary>
        /// <param name="ipVendorNum">Vendor Number</param> 
        /// <param name="ipInvoiceNum">Invoice Number</param> 
        /// <param name="ds">The selected invoices </param>
        /// <param name="massGenErrorMsg">Indicates if one or more selected invoices generated an error</param>
        /// <param name="opWarning">Warning</param>
        /// <returns>AP Invoice data set</returns>
        public APInvoiceTableset MassGenerateBOEapInvDtl(int ipVendorNum, string ipInvoiceNum, ref APInvHedListTableset ds, out string massGenErrorMsg, out string opWarning)
        {
            massGenErrorMsg = string.Empty;

            int errCount = 0;
            int invCount = 0;
            opWarning = string.Empty;
            bool hasUnpaidDetraction = false;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, ipVendorNum, ipInvoiceNum);

            if (APInvHed == null)
            {
                throw new BLException(Strings.AValidInvoiceIsRequired, "ApInvHed", "InoviceNum");
            }
            vInvoiceType = APInvHed.InvoiceType;
            if (!vInvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
            {
                throw new BLException(Strings.TheInvoiceIsNotABillOfExchaInvoice, "ApInvHed", "InoviceNum");
            }

            /* if called procedures throw an error within each loop, updates for that particular invoice will
               auotmatically get backed out due to the behavior of try/throw/catch but processing
               will continue with the others. We have to clear the exception messages between invoices to prevent
               unwanted back out or throwing of a final exception to the framework when this procedure ends.
               If multiple invoices fail we pass back a generic message, if a single invoice fails we pass back the
               specific error message  */

            //nbrSelectedLoop: 
            foreach (var ttApInvHedList_iterator in (from ttApInvHedList_Row in ds.APInvHedList
                                                     where StringExtensions.Compare(ttApInvHedList_Row.RowMod, "A") == 0
                                                     select ttApInvHedList_Row))
            {
                ttAPInvHedList = ttApInvHedList_iterator;
                invCount = invCount + 1;
                if (invCount > 1)
                {
                    goto nbrSelectedLoop_END;
                }
            }

        nbrSelectedLoop_END:
            ;


            //BOE_Loop: 
            foreach (var ttApInvHedList_iterator in (from ttApInvHedList_Row in ds.APInvHedList
                                                     where StringExtensions.Compare(ttApInvHedList_Row.RowMod, "A") == 0
                                                     select ttApInvHedList_Row))
            {
                ttAPInvHedList = ttApInvHedList_iterator;
                if (ExceptionManager.Exceptions.Count != 0)
                {
                    errCount = errCount + 1;
                    if (invCount > 1)
                    {
                        ExceptionManager.ClearException();
                    }
                }
                hasUnpaidDetraction = false;
                APInvHed apInvHed = FindFirstAPInvHed(Session.CompanyID, ipVendorNum, ttAPInvHedList.InvoiceNum);
                if (apInvHed != null)
                {
                    /* Unpaid Detraction */
                    if (apInvHed.PEDetTaxAmt != 0 && apInvHed.PESUNATDepAmt == 0 && apInvHed.PEAPPayNum == 0)
                    {
                        if (opWarning.Length == 0)
                            opWarning = ttAPInvHedList.InvoiceNum;
                        else
                            opWarning = String.Join(",", new string[] { opWarning, ttAPInvHedList.InvoiceNum });
                        hasUnpaidDetraction = true;
                    }
                }
                genBOEapInvdtl(ipVendorNum, ipInvoiceNum, ttAPInvHedList.InvoiceNum, hasUnpaidDetraction);
            }
            if (opWarning.Length > 0)
            {
                opWarning = Strings.InvoiceDetraTaxesHaveNotYetBeenPaidForInvoiceS(opWarning);
            }

            /* check for errors in case the very last invoice in the second loop had validation errors */
            if (ExceptionManager.Exceptions.Count != 0)
            {
                errCount = errCount + 1;
                if (invCount > 1)
                {
                    ExceptionManager.ClearException();
                }
            }

            CurrentFullTableset = GetByID(ipVendorNum, ipInvoiceNum);

            if (invCount == 1 && errCount > 0)
            {
                throw new BLException(Strings.ErrorBOEDetails);
            }
            if (errCount > 0)
            {
                massGenErrorMsg = massGenErrorMsg + " " + Strings.OneOrMoreSelecInvoiWereSkippedDueToValidErrors;
            }
            return CurrentFullTableset;
        }

        ///<summary>
        ///
        ///</summary>
        public void MatchLoggedInvoice(ref GetLogAPInvTableset ds, string cGroupID, bool confirmCheck, out string confirmMsg, bool skipInactiveVendors, ref APInvoiceTableset ds1)
        {
            ttGetLogAPInvTablesetDS = ds;
            CurrentFullTableset = ds1;
            /************IMPORTANT NOTE!!!!!  **************************
            *   I any change is done in this method, the changes needs * 
            *   to be applied too in the method UpdAPInvoiceMatched    *
            ***********************************************************/
            string txtMsg = string.Empty;
            string txtPOMsg = string.Empty;
            confirmMsg = string.Empty;


            foreach (var ttGetLogAPInv_iterator in (from ttGetLogAPInv_Row in ds.GetLogAPInv
                                                    where ttGetLogAPInv_Row.Selected == true
                                                    select ttGetLogAPInv_Row))
            {

                ttGetLogAPInv = ttGetLogAPInv_iterator;

                LogAPInv = LogAPInv.FindFirstByPrimaryKey(Db, ttGetLogAPInv.Company, ttGetLogAPInv.VendorNum, ttGetLogAPInv.InvoiceNum);
                if (LogAPInv == null)
                {
                    txtMsg = txtMsg + Strings.NInvoiceSupplErrorNoLoggedInvoiceFound(ttGetLogAPInv.InvoiceNum.Trim(), ttGetLogAPInv.VendorNumName.Trim());
                    continue;
                }
                if (confirmCheck && ttGetLogAPInv.Inactive)
                {
                    confirmMsg = Strings.InactiveSupplierConfirmationLoggedInv;
                    return;
                }
                if (!confirmCheck && ttGetLogAPInv.Inactive && skipInactiveVendors)
                {
                    ttGetLogAPInv.Selected = false;
                    continue;
                }

                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttGetLogAPInv.Company, ttGetLogAPInv.VendorNum, ttGetLogAPInv.InvoiceNum);
                if (APInvHed != null)
                {
                    txtMsg = txtMsg + Strings.NInvoiceSupplErrorLoggedInvoiceAlreadyExistAsAP(ttGetLogAPInv.InvoiceNum.Trim(), ttGetLogAPInv.VendorNumName.Trim());
                    continue;
                }

                ttAPInvHed = new Erp.Tablesets.APInvHedRow();
                CurrentFullTableset.APInvHed.Add(ttAPInvHed);
                BufferCopy.CopyExceptFor(LogAPInv, ttAPInvHed, LogAPInv.ColumnNames.GroupID, LogAPInv.ColumnNames.SysRowID, LogAPInv.ColumnNames.EntryPerson, LogAPInv.ColumnNames.Posted, LogAPInv.ColumnNames.InvoiceAmt, LogAPInv.ColumnNames.DocInvoiceAmt, LogAPInv.ColumnNames.Rpt1InvoiceAmt, LogAPInv.ColumnNames.Rpt2InvoiceAmt, LogAPInv.ColumnNames.Rpt3InvoiceAmt, LogAPInv.ColumnNames.TaxAmt, LogAPInv.ColumnNames.Rpt1TaxAmt, LogAPInv.ColumnNames.Rpt2TaxAmt, LogAPInv.ColumnNames.Rpt3TaxAmt, LogAPInv.ColumnNames.DocTaxAmt, LogAPInv.ColumnNames.WithholdAmt, LogAPInv.ColumnNames.DocWithholdAmt, LogAPInv.ColumnNames.Rpt1WithholdAmt, LogAPInv.ColumnNames.Rpt2WithholdAmt, LogAPInv.ColumnNames.Rpt3WithholdAmt);

                ttAPInvHed.PMUID = LogAPInv.SEPMUID;
                ttAPInvHed.GroupID = cGroupID;
                ttAPInvHed.SysRowID = Guid.NewGuid();
                ttAPInvHed.EntryPerson = Session.UserID;
                ttAPInvHed.RowMod = IceRow.ROWSTATE_ADDED;
                ttAPInvHed.ReadyToCalc = LogAPInv.ReadyToCalc;
                ttAPInvHed.Plant = Session.PlantID;

                SetDatesDiscount(true);

                if (isTaiwanLocalization)
                {
                    InitializeGUIFields(ttAPInvHed);
                }

                var LogAPInvTaxQuery = DBExpressionCompiler.Compile(LogAPInvTaxExpression);
                foreach (var LogAPInvTax_iterator in (LogAPInvTaxQuery(Db, ttAPInvHed.Company, ttAPInvHed.InvoiceNum, ttAPInvHed.VendorNum, 1)))
                {
                    LogAPInvTax = LogAPInvTax_iterator;
                    ttAPInvTax = new Erp.Tablesets.APInvTaxRow();
                    CurrentFullTableset.APInvTax.Add(ttAPInvTax);
                    BufferCopy.Copy(LogAPInvTax, ref ttAPInvTax);
                    ttAPInvTax.RowMod = IceRow.ROWSTATE_ADDED;
                    ttAPInvTax.SysRowID = Guid.NewGuid();
                    ttAPInvTax.DebitMemo = ttAPInvHed.DebitMemo;
                    MatchLoggedScrUpdate();
                    APInvTax_Foreign_Link();
                }
                ttAPInvHed.MatchedFromLI = true;
                APInvHedAfterGetRows();
                APInvHed_Foreign_Link();

                foreach (var bufTranGLC in SelectInvoiceTranGLC(Session.CompanyID, "LogAPInv", Compatibility.Convert.ToString(ttGetLogAPInv.VendorNum), ttGetLogAPInv.InvoiceNum))
                {
                    TranGLC = new Erp.Tables.TranGLC();
                    Db.TranGLC.Insert(TranGLC);
                    BufferCopy.CopyExceptFor(bufTranGLC, TranGLC, TranGLC.ColumnNames.RelatedToFile, TranGLC.ColumnNames.SysRevID, TranGLC.ColumnNames.SysRowID);
                    TranGLC.RelatedToFile = "APInvHed";
                }
            }
            if (!String.IsNullOrEmpty(txtMsg))
            {
                txtMsg = Strings.TheFollowLoggedInvoiceSHadIssueSAndWereNotCreated(txtMsg);
                throw new BLException(txtMsg, "ttAPInvHed");
            }
        }

        private void InitializeGUIFields(APInvHedRow apInvHed)
        {
            if (!string.IsNullOrEmpty(apInvHed.TranDocTypeID))
            {
                var tranDocType = TranDocType.FindFirstByPrimaryKey(Db, Session.CompanyID, apInvHed.TranDocTypeID);
                if (tranDocType != null)
                {
                    apInvHed.GUIFormatCode = tranDocType.GUIFormatCode;
                    apInvHed.GUITaxTypeCode = tranDocType.GUITaxTypeCode;
                    apInvHed.GUIDeductCode = tranDocType.GUIDeductCode;
                }
            }

            if (apInvHed.VendorNum != 0)
            {
                var vendor = Vendor.FindFirstByPrimaryKey(Db, Session.CompanyID, apInvHed.VendorNum);
                if (vendor != null)
                {
                    apInvHed.TWGUIRegNumSeller = vendor.TWGUIRegNum;
                }
            }

            var ttXBSystTWParam = FindFirstXbSystTWParam(Session.CompanyID);
            if (ttXBSystTWParam != null)
            {
                apInvHed.TWGUIRegNumBuyer = ttXBSystTWParam.TWGUIRegNum;
            }
        }

        ///<summary>
        ///
        ///</summary>
        private void MatchLoggedScrUpdate()
        {
            if (ttAPInvHed.DebitMemo == true)
            {
                ttAPInvTax.ScrTaxableAmt = -ttAPInvTax.TaxableAmt;
                ttAPInvTax.ScrDocTaxableAmt = -ttAPInvTax.DocTaxableAmt;
                ttAPInvTax.Rpt1ScrTaxableAmt = -ttAPInvTax.Rpt1TaxableAmt;
                ttAPInvTax.Rpt2ScrTaxableAmt = -ttAPInvTax.Rpt2TaxableAmt;
                ttAPInvTax.Rpt3ScrTaxableAmt = -ttAPInvTax.Rpt3TaxableAmt;
                ttAPInvTax.ScrReportableAmt = -ttAPInvTax.ReportableAmt;
                ttAPInvTax.ScrDocReportableAmt = -ttAPInvTax.DocReportableAmt;
                ttAPInvTax.Rpt1ScrReportableAmt = -ttAPInvTax.Rpt1ReportableAmt;
                ttAPInvTax.Rpt2ScrReportableAmt = -ttAPInvTax.Rpt2ReportableAmt;
                ttAPInvTax.Rpt3ScrReportableAmt = -ttAPInvTax.Rpt3ReportableAmt;
                ttAPInvTax.ScrTaxAmt = -ttAPInvTax.TaxAmt;
                ttAPInvTax.ScrDocTaxAmt = -ttAPInvTax.DocTaxAmt;
                ttAPInvTax.Rpt1ScrTaxAmt = -ttAPInvTax.Rpt1TaxAmt;
                ttAPInvTax.Rpt2ScrTaxAmt = -ttAPInvTax.Rpt2TaxAmt;
                ttAPInvTax.Rpt3ScrTaxAmt = -ttAPInvTax.Rpt3TaxAmt;
                ttAPInvTax.ScrFixedAmount = -ttAPInvTax.FixedAmount;
                ttAPInvTax.ScrDocFixedAmount = -ttAPInvTax.DocFixedAmount;
                ttAPInvTax.Rpt1ScrFixedAmount = -ttAPInvTax.Rpt1FixedAmount;
                ttAPInvTax.Rpt2ScrFixedAmount = -ttAPInvTax.Rpt2FixedAmount;
                ttAPInvTax.Rpt3ScrFixedAmount = -ttAPInvTax.Rpt3FixedAmount;
                ttAPInvTax.ScrDedTaxAmt = -ttAPInvTax.DedTaxAmt;
                ttAPInvTax.ScrDocDedTaxAmt = -ttAPInvTax.DocDedTaxAmt;
                ttAPInvTax.Rpt1ScrDedTaxAmt = -ttAPInvTax.Rpt1DedTaxAmt;
                ttAPInvTax.Rpt2ScrDedTaxAmt = -ttAPInvTax.Rpt2DedTaxAmt;
                ttAPInvTax.Rpt3ScrDedTaxAmt = -ttAPInvTax.Rpt3DedTaxAmt;
                ttAPInvTax.ScrTaxAmtVar = -ttAPInvTax.TaxAmtVar;
                ttAPInvTax.ScrDocTaxAmtVar = -ttAPInvTax.DocTaxAmtVar;
                ttAPInvTax.Rpt1ScrTaxAmtVar = -ttAPInvTax.Rpt1TaxAmtVar;
                ttAPInvTax.Rpt2ScrTaxAmtVar = -ttAPInvTax.Rpt2TaxAmtVar;
                ttAPInvTax.Rpt3ScrTaxAmtVar = -ttAPInvTax.Rpt3TaxAmtVar;
            }
            else
            {
                ttAPInvTax.ScrTaxableAmt = ttAPInvTax.TaxableAmt;
                ttAPInvTax.ScrDocTaxableAmt = ttAPInvTax.DocTaxableAmt;
                ttAPInvTax.Rpt1ScrTaxableAmt = ttAPInvTax.Rpt1TaxableAmt;
                ttAPInvTax.Rpt2ScrTaxableAmt = ttAPInvTax.Rpt2TaxableAmt;
                ttAPInvTax.Rpt3ScrTaxableAmt = ttAPInvTax.Rpt3TaxableAmt;
                ttAPInvTax.ScrReportableAmt = ttAPInvTax.ReportableAmt;
                ttAPInvTax.ScrDocReportableAmt = ttAPInvTax.DocReportableAmt;
                ttAPInvTax.Rpt1ScrReportableAmt = ttAPInvTax.Rpt1ReportableAmt;
                ttAPInvTax.Rpt2ScrReportableAmt = ttAPInvTax.Rpt2ReportableAmt;
                ttAPInvTax.Rpt3ScrReportableAmt = ttAPInvTax.Rpt3ReportableAmt;
                ttAPInvTax.ScrTaxAmt = ttAPInvTax.TaxAmt;
                ttAPInvTax.ScrDocTaxAmt = ttAPInvTax.DocTaxAmt;
                ttAPInvTax.Rpt1ScrTaxAmt = ttAPInvTax.Rpt1TaxAmt;
                ttAPInvTax.Rpt2ScrTaxAmt = ttAPInvTax.Rpt2TaxAmt;
                ttAPInvTax.Rpt3ScrTaxAmt = ttAPInvTax.Rpt3TaxAmt;
                ttAPInvTax.ScrFixedAmount = ttAPInvTax.FixedAmount;
                ttAPInvTax.ScrDocFixedAmount = ttAPInvTax.DocFixedAmount;
                ttAPInvTax.Rpt1ScrFixedAmount = ttAPInvTax.Rpt1FixedAmount;
                ttAPInvTax.Rpt2ScrFixedAmount = ttAPInvTax.Rpt2FixedAmount;
                ttAPInvTax.ScrDedTaxAmt = ttAPInvTax.DedTaxAmt;
                ttAPInvTax.ScrDocDedTaxAmt = ttAPInvTax.DocDedTaxAmt;
                ttAPInvTax.Rpt1ScrDedTaxAmt = ttAPInvTax.Rpt1DedTaxAmt;
                ttAPInvTax.Rpt2ScrDedTaxAmt = ttAPInvTax.Rpt2DedTaxAmt;
                ttAPInvTax.Rpt3ScrDedTaxAmt = ttAPInvTax.Rpt3DedTaxAmt;
                ttAPInvTax.ScrTaxAmtVar = ttAPInvTax.TaxAmtVar;
                ttAPInvTax.ScrDocTaxAmtVar = ttAPInvTax.DocTaxAmtVar;
                ttAPInvTax.Rpt1ScrTaxAmtVar = ttAPInvTax.Rpt1TaxAmtVar;
                ttAPInvTax.Rpt2ScrTaxAmtVar = ttAPInvTax.Rpt2TaxAmtVar;
                ttAPInvTax.Rpt3ScrTaxAmtVar = ttAPInvTax.Rpt3TaxAmtVar;
            }
        }

        #region OnChange Methods

        private void OnChangeAPInvJob(decimal ipExtCost, decimal ipScrExtCost)
        {
            string cFieldList = string.Empty;


            ttAPInvJob = (from ttAPInvJob_Row in CurrentFullTableset.APInvJob
                          where StringExtensions.Compare(ttAPInvJob_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                          select ttAPInvJob_Row).FirstOrDefault();
            if (ttAPInvJob == null)
            {
                throw new BLException(Strings.APInvJobNotFound, "APInvJob", "ActAmount");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvJob.VendorNum, ttAPInvJob.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceNotFound, "APInvHed", "InvoiceNum");
            }
            ttAPInvJob.DocExtCost = ipExtCost;
            ttAPInvJob.DocScrExtCost = ipScrExtCost;
            if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                ttAPInvJob.ExtCost = ttAPInvJob.DocExtCost;
                ttAPInvJob.ScrExtCost = ttAPInvJob.DocScrExtCost;
            }
            else
            {
                if (String.IsNullOrEmpty(pCurrList))
                {
                    if (vUseDate == 1)
                    {
                        vExDate = APInvHed.InvoiceDate;
                    }
                    else
                    {
                        vExDate = APInvHed.ApplyDate;
                    }

                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(ttAPInvJob.VendorNum), ttAPInvJob.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);
                }
                ttAPInvJob.ExtCost = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvJob.DocExtCost, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvJob", "ExtCost");
                ttAPInvJob.ScrExtCost = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvJob.DocScrExtCost, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvJob", "ScrExtCost");
                cFieldList = "ExtCost" + Ice.Constants.LIST_DELIM + "ScrExtCost";
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvJob, false, cFieldList, pCurrList, "ttAPInvJob", APInvHed.CurrencyCode, ttChainRows);
            }
        }

        private void OnChangeAPInvPB(decimal ipInvDtlValue, decimal ipMtlChg, decimal ipScrInvDtlValue, decimal ipScrMtlChg)
        {
            string cFieldList = string.Empty;


            ttAPInvPB = (from ttAPInvPB_Row in CurrentFullTableset.APInvPB
                         where StringExtensions.Compare(ttAPInvPB_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                         select ttAPInvPB_Row).FirstOrDefault();
            if (ttAPInvPB == null)
            {
                throw new BLException(Strings.APInvPBHasNotChanged, "APInvPB", "InvDtlValue");
            }

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvPB.VendorNum, ttAPInvPB.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvoiceNotFound, "APInvHed", "InvoiceNum");
            }
            if (ttAPInvPB.CurrencySwitch)
            {
                ttAPInvPB.InvDtlValue = ipInvDtlValue;
                ttAPInvPB.MtlChg = ipMtlChg;
                ttAPInvPB.ScrInvDtlValue = ipScrInvDtlValue;
                ttAPInvPB.ScrMtlChg = ipScrMtlChg;
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvPB.DocInvDtlValue = ttAPInvPB.InvDtlValue;
                    ttAPInvPB.DocMtlChg = ttAPInvPB.MtlChg;
                    ttAPInvPB.ScrDocInvDtlValue = ttAPInvPB.ScrInvDtlValue;
                    ttAPInvPB.ScrDocMtlChg = ttAPInvPB.ScrMtlChg;
                }
                else
                {
                    if (String.IsNullOrEmpty(pCurrList))
                    {
                        if (vUseDate == 1)
                        {
                            vExDate = APInvHed.InvoiceDate;
                        }
                        else
                        {
                            vExDate = APInvHed.ApplyDate;
                        }

                        this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(ttAPInvPB.VendorNum), ttAPInvPB.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);
                    }

                    ttAPInvPB.DocInvDtlValue = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvPB.InvDtlValue, ttAPInvPB.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvPB", "DocInvDtlValue");
                    ttAPInvPB.DocMtlChg = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvPB.MtlChg, ttAPInvPB.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvPB", "DocMtlChg");
                    ttAPInvPB.ScrDocInvDtlValue = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvPB.ScrInvDtlValue, ttAPInvPB.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvPB", "ScrDocInvDtlValue");
                    ttAPInvPB.ScrDocMtlChg = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvPB.ScrMtlChg, ttAPInvPB.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvPB", "ScrDocMtlChg");
                    cFieldList = "InvDtlValue" + Ice.Constants.LIST_DELIM + "MtlChg";                             /*  + list-delim + "ScrInvDtlValue":U + list-delim + "ScrMtlChg":U . */
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvPB, false, cFieldList, pCurrList, "ttAPInvPB", ttAPInvPB.CurrencyCode, ttChainRows);
                }
            }
            else
            {
                ttAPInvPB.DocInvDtlValue = ipInvDtlValue;
                ttAPInvPB.DocMtlChg = ipMtlChg;
                ttAPInvPB.ScrDocInvDtlValue = ipScrInvDtlValue;
                ttAPInvPB.ScrDocMtlChg = ipScrMtlChg;
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvPB.InvDtlValue = ttAPInvPB.DocInvDtlValue;
                    ttAPInvPB.MtlChg = ttAPInvPB.DocMtlChg;
                    ttAPInvPB.ScrInvDtlValue = ttAPInvPB.ScrDocInvDtlValue;
                    ttAPInvPB.ScrMtlChg = ttAPInvPB.ScrDocMtlChg;
                    return;
                }
                else
                {
                    if (String.IsNullOrEmpty(pCurrList))
                    {
                        if (vUseDate == 1)
                        {
                            vExDate = APInvHed.InvoiceDate;
                        }
                        else
                        {
                            vExDate = APInvHed.ApplyDate;
                        }

                        this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", Compatibility.Convert.ToString(ttAPInvPB.VendorNum), ttAPInvPB.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);
                    }

                    ttAPInvPB.InvDtlValue = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvPB.DocInvDtlValue, ttAPInvPB.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvPB", "InvDtlValue");
                    ttAPInvPB.MtlChg = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvPB.DocMtlChg, ttAPInvPB.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvPB", "MtlChg");
                    ttAPInvPB.ScrInvDtlValue = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvPB.ScrDocInvDtlValue, ttAPInvPB.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvPB", "ScrInvDtlValue");
                    ttAPInvPB.ScrMtlChg = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvPB.ScrDocMtlChg, ttAPInvPB.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvPB", "ScrMtlChg");
                    cFieldList = "InvDtlValue" + Ice.Constants.LIST_DELIM + "MtlChg";                                /* + list-delim + "ScrInvDtlValue":U + list-delim + "ScrMtlChg":U . */

                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvPB, true, cFieldList, pCurrList, "ttAPInvPB", ttAPInvPB.CurrencyCode, ttChainRows);
                }
            }
        }

        /// <summary>
        /// This method should be called before the pInvDtl invoice reference has been updated.
        /// Specific to Bill of Exchange invoices.
        /// </summary> 
        /// <param name="NewInvoiceRef">Proposed invoice reference.</param>
        /// <param name="opWarning">Warning.</param>/// 
        /// <param name="ds">A/P invoice data set.</param>   
        public void OnChangeLineInvoiceRef(string NewInvoiceRef, out string opWarning, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            decimal PEDetAmt = decimal.Zero;
            decimal DocPEDetAmt = decimal.Zero;
            opWarning = string.Empty;


            ttAPInvDtl = (from ttApInvDtl_Row in ds.APInvDtl
                          where ttApInvDtl_Row.Company.KeyEquals(Session.CompanyID)
                          && StringExtensions.Compare(ttApInvDtl_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                          select ttApInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                ExceptionManager.AddBLException(Strings.TtApInvDtlNotFound, "ttApInvDtl");
            }

            ExceptionManager.AssertNoBLExceptions();

            if (!String.IsNullOrEmpty(NewInvoiceRef))
            {
                ApInvDtlInvoiceRefChanged(NewInvoiceRef);
            }
            if (isPeruLocalization == true)
            {
                var altAPInvHed = FindFirstAPInvHed(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
                if (altAPInvHed != null && altAPInvHed.InvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
                {
                    if (ttAPInvDtl.UnitCost == 0)
                    {
                        throw new BLException(Strings.TheReferInvoiceSelecCannotBeSelecInvoiceAmount, "APInvDtl");
                    }
                    setBOEDtlFields();

                    APInvHed apInvHed = FindFirstAPInvHed(Session.CompanyID, ttAPInvDtl.VendorNum, NewInvoiceRef);
                    if (apInvHed != null)
                    {
                        /* Unpaid Detraction */
                        if (apInvHed.PEDetTaxAmt != 0 && apInvHed.PESUNATDepAmt == 0 && apInvHed.PEAPPayNum == 0)
                            opWarning = Strings.InvoiceDetraTaxesHaveNotYetBeenPaidForInvoiceS(NewInvoiceRef);
                        PEDetAmt = apInvHed.PEDetTaxAmt;
                        DocPEDetAmt = apInvHed.DocPEDetTaxAmt;
                    }
                    if ((ttAPInvDtl.UnitCost - PEDetAmt) <= PEDetAmt)
                    {
                        throw new BLException(Strings.TheReferInvoiceSelecCannotBeSelecInvoiceUnassAmount, "APInvDtl");
                    }
                    else
                    {
                        ttAPInvDtl.DocPEDetAmt = DocPEDetAmt;
                        var outPEDetAmt2 = ttAPInvDtl.PEDetAmt;
                        var outRpt1PEDetAmt2 = ttAPInvDtl.Rpt1PEDetAmt;
                        var outRpt2PEDetAmt2 = ttAPInvDtl.Rpt2PEDetAmt;
                        var outRpt3PEDetAmt2 = ttAPInvDtl.Rpt3PEDetAmt;
                        CalcBaseAmt(ttAPInvDtl.DocPEDetAmt, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "PEDetAmt", out outPEDetAmt2, out outRpt1PEDetAmt2, out outRpt2PEDetAmt2, out outRpt3PEDetAmt2);
                        ttAPInvDtl.PEDetAmt = outPEDetAmt2;
                        ttAPInvDtl.Rpt1PEDetAmt = outRpt1PEDetAmt2;
                        ttAPInvDtl.Rpt2PEDetAmt = outRpt2PEDetAmt2;
                        ttAPInvDtl.Rpt3PEDetAmt = outRpt3PEDetAmt2;
                        ttAPInvDtl.UnitCost = ttAPInvDtl.UnitCost - ttAPInvDtl.PEDetAmt;
                        ttAPInvDtl.ScrExtCost = ttAPInvDtl.ScrExtCost - ttAPInvDtl.PEDetAmt;
                        ttAPInvDtl.DocUnitCost = ttAPInvDtl.DocUnitCost - ttAPInvDtl.DocPEDetAmt;
                        ttAPInvDtl.ScrDocExtCost = ttAPInvDtl.ScrDocExtCost - ttAPInvDtl.DocPEDetAmt;
                        ttAPInvDtl.Rpt1UnitCost = ttAPInvDtl.Rpt1UnitCost - ttAPInvDtl.Rpt1PEDetAmt;
                        ttAPInvDtl.Rpt1ScrExtCost = ttAPInvDtl.Rpt1ScrExtCost - ttAPInvDtl.Rpt1PEDetAmt;
                        ttAPInvDtl.Rpt2UnitCost = ttAPInvDtl.Rpt2UnitCost - ttAPInvDtl.Rpt2PEDetAmt;
                        ttAPInvDtl.Rpt2ScrExtCost = ttAPInvDtl.Rpt2ScrExtCost - ttAPInvDtl.Rpt2PEDetAmt;
                        ttAPInvDtl.Rpt3UnitCost = ttAPInvDtl.Rpt3UnitCost - ttAPInvDtl.Rpt3PEDetAmt;
                        ttAPInvDtl.Rpt3ScrExtCost = ttAPInvDtl.Rpt3ScrExtCost - ttAPInvDtl.Rpt3PEDetAmt;
                    }
                }
            }

            getLineTotals();
        }

        /// <summary>
        /// This method should be called to validate the new apply date entered by the user.
        /// </summary>
        /// <param name="VendorNum">Vendor Number.</param>
        /// <param name="InvoiceNum">Invoice Number.</param>
        /// <param name="recalcAmts">Recalculate Amounts String.</param>
        /// <param name="NewApplyDate">New Apply Date.</param>
        /// <param name="ds">AP Invoice Entry data set.</param>
        public void OnChangeofApplyDate(int VendorNum, string InvoiceNum, string recalcAmts, DateTime? NewApplyDate, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            string cMessageText = string.Empty;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where ttAPInvHed_Row.Company.KeyEquals(Session.CompanyID)
                          && ttAPInvHed_Row.VendorNum == VendorNum
                          && StringExtensions.Compare(ttAPInvHed_Row.InvoiceNum, InvoiceNum) == 0
                          && !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();

            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvHedRecordNotFound, "APInvHed", "VendorNum");
            }
            /* LINKING DATES */
            apSystPartial = FindPartialAPSyst(Session.CompanyID);

            if (apSystPartial != null)
            {
                if (apSystPartial.DatesSetUp)
                {
                    if (StringExtensions.Compare(apSystPartial.APLinkTaxPDate, "A") == 0 && ttAPInvHed.TaxPoint == ttAPInvHed.ApplyDate)
                    {
                        if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "T") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.TaxPoint)
                        {
                            if (NewApplyDate == null)
                            {
                                ttAPInvHed.TaxRateDate = null;
                            }
                            else
                            {
                                ttAPInvHed.TaxRateDate = (DateTime)NewApplyDate;
                            }
                        }

                        if (NewApplyDate == null)
                        {
                            ttAPInvHed.TaxPoint = null;
                        }
                        else
                        {
                            ttAPInvHed.TaxPoint = (DateTime)NewApplyDate;
                        }
                    }
                    if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "A") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.ApplyDate)
                    {
                        if (NewApplyDate == null)
                        {
                            ttAPInvHed.TaxRateDate = null;
                        }
                        else
                        {
                            ttAPInvHed.TaxRateDate = (DateTime)NewApplyDate;
                        }
                    }
                }/* LINKING DATES */
                else
                {
                    if (NewApplyDate != null)
                    {
                        ttAPInvHed.TaxRateDate = (DateTime)NewApplyDate;
                        ttAPInvHed.TaxPoint = (DateTime)NewApplyDate;
                    }

                }
            }

            cMessageText = LibEADValidation.validateEAD(NewApplyDate, "AP", "Apply");

            if (!String.IsNullOrEmpty(cMessageText))
            {
                throw new BLException(cMessageText);
            }

            var FiscalPerQuery4 = DBExpressionCompiler.Compile(FiscalPerExpression4);
            FiscalPer = FiscalPerQuery4(Db, Session.CompanyID, CompanyFiscalCalendarID, NewApplyDate, NewApplyDate);
            if (FiscalPer == null)
            {
                if (NewApplyDate == null)
                {
                    ttAPInvHed.ApplyDate = null;
                }
                else
                {
                    ttAPInvHed.ApplyDate = (DateTime)NewApplyDate;
                }

                if (NewApplyDate == null)
                {
                    ttAPInvHed.TransApplyDate = null;
                }
                else
                {
                    ttAPInvHed.TransApplyDate = (DateTime)NewApplyDate;
                }

                ttAPInvHed.FiscalCalendarID = CompanyFiscalCalendarID;
                ttAPInvHed.FiscalPeriod = 0;
                ttAPInvHed.FiscalYear = 0;
                ttAPInvHed.FiscalYearSuffix = "";
            }
            else
            {
                if (NewApplyDate == null)
                {
                    ttAPInvHed.ApplyDate = null;
                }
                else
                {
                    ttAPInvHed.ApplyDate = (DateTime)NewApplyDate;
                }

                if (NewApplyDate == null)
                {
                    ttAPInvHed.TransApplyDate = null;
                }
                else
                {
                    ttAPInvHed.TransApplyDate = (DateTime)NewApplyDate;
                }

                ttAPInvHed.FiscalCalendarID = FiscalPer.FiscalCalendarID;
                ttAPInvHed.FiscalPeriod = FiscalPer.FiscalPeriod;
                ttAPInvHed.FiscalYear = FiscalPer.FiscalYear;
                ttAPInvHed.FiscalYearSuffix = FiscalPer.FiscalYearSuffix;
            }
            ttAPInvHed.RecalcAmts = recalcAmts;
            getExchangeRate("Lock");
        }

        /// <summary>
        /// This method should be called to validate the new apply date entered by the user.
        /// </summary>
        /// <param name="VendorNum">Vendor Number.</param>
        /// <param name="InvoiceNum">Invoice Number.</param>
        /// <param name="recalcAmts">Recalculate Amounts String.</param>
        /// <param name="NewApplyDate">New Apply Date.</param>
        /// <param name="ds">AP Invoice Entry data set.</param>
        public void OnChangeofApplyDateEx(int VendorNum, string InvoiceNum, string recalcAmts, DateTime? NewApplyDate, ref APInvoiceTableset ds)
        {
            if (NewApplyDate == null)
            {
                throw new BLException(Strings.InvalidApplyDate, "APInvHed");
            }
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where ttAPInvHed_Row.Company.KeyEquals(Session.CompanyID)
                          && ttAPInvHed_Row.VendorNum == VendorNum
                          && StringExtensions.Compare(ttAPInvHed_Row.InvoiceNum, InvoiceNum) == 0
                          && !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvHedRecordNotFound, "APInvHed", "VendorNum");
            }
            /* LINKING DATES */
            apSystPartial = FindPartialAPSyst(Session.CompanyID);

            if (apSystPartial != null)
            {
                if (apSystPartial.DatesSetUp)
                {
                    if (StringExtensions.Compare(apSystPartial.APLinkTaxPDate, "A") == 0 && ttAPInvHed.TaxPoint == ttAPInvHed.ApplyDate)
                    {
                        if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "T") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.TaxPoint)
                        {
                            ttAPInvHed.TaxRateDate = (DateTime)NewApplyDate;
                        }
                        ttAPInvHed.TaxPoint = (DateTime)NewApplyDate;
                    }
                    if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "A") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.ApplyDate)
                    {
                        ttAPInvHed.TaxRateDate = (DateTime)NewApplyDate;
                    }
                }/* LINKING DATES */
                else
                {
                    ttAPInvHed.TaxRateDate = (DateTime)NewApplyDate;
                    ttAPInvHed.TaxPoint = (DateTime)NewApplyDate;

                }
            }

            var FiscalPerQuery4 = DBExpressionCompiler.Compile(FiscalPerExpression4);
            FiscalPer = FiscalPerQuery4(Db, Session.CompanyID, CompanyFiscalCalendarID, NewApplyDate, NewApplyDate);
            if (FiscalPer == null)
            {
                ttAPInvHed.ApplyDate = (DateTime)NewApplyDate;
                ttAPInvHed.TransApplyDate = (DateTime)NewApplyDate;

                ttAPInvHed.FiscalCalendarID = CompanyFiscalCalendarID;
                ttAPInvHed.FiscalPeriod = 0;
                ttAPInvHed.FiscalYear = 0;
                ttAPInvHed.FiscalYearSuffix = "";
            }
            else
            {
                ttAPInvHed.ApplyDate = (DateTime)NewApplyDate;
                ttAPInvHed.TransApplyDate = (DateTime)NewApplyDate;

                ttAPInvHed.FiscalCalendarID = FiscalPer.FiscalCalendarID;
                ttAPInvHed.FiscalPeriod = FiscalPer.FiscalPeriod;
                ttAPInvHed.FiscalYear = FiscalPer.FiscalYear;
                ttAPInvHed.FiscalYearSuffix = FiscalPer.FiscalYearSuffix;
            }
            ttAPInvHed.RecalcAmts = recalcAmts;
            getExchangeRate("Lock");
        }

        /// <summary>
        /// This method should be called to validate the new apply date entered by the user.
        /// This method will additionally return a message to present to the user if the date is greater than
        /// the client today date.
        /// </summary>
        /// <param name="VendorNum">Vendor Number.</param>
        /// <param name="InvoiceNum">Invoice Number.</param>
        /// <param name="recalcAmts">Recalculate Amounts String.</param>
        /// <param name="NewApplyDate">New Apply Date.</param>        
        /// <param name="DateMessage">The date message to present to the user.  Blank means a message does not need to be presented.</param>
        /// <param name="ds">AP Invoice Entry data set.</param>
        public void OnChangeofApplyDateWithDateCheck(int VendorNum, string InvoiceNum, string recalcAmts, DateTime? NewApplyDate, out string DateMessage, ref APInvoiceTableset ds)
        {
            DateMessage = string.Empty;
            OnChangeofApplyDateEx(VendorNum, InvoiceNum, recalcAmts, NewApplyDate, ref ds);

            using (Erp.Internal.AP.CheckInvoiceAndApplyDate CheckInvoiceAndApplyDate = new Erp.Internal.AP.CheckInvoiceAndApplyDate(Db))
            {
                DateMessage = CheckInvoiceAndApplyDate.GetDateGreaterThanMessage(NewApplyDate, CompanyTime.Today(), "A");
            }
        }

        /// <summary>
        /// This method should be called to validate the new tax rate date entered by the user.
        /// </summary>
        /// <param name="VendorNum">Vendor Number.</param>
        /// <param name="InvoiceNum">Invoice Number.</param>
        /// <param name="newTaxPoint">New Tax Point.</param>
        /// <param name="ds">AP Invoice Entry data set.</param>
        public void OnChangeofTaxPoint(int VendorNum, string InvoiceNum, DateTime? newTaxPoint, ref APInvoiceTableset ds)
        {
            if (newTaxPoint == null)
            {
                throw new BLException(Strings.InvalidTaxPointDate, "APInvHed");
            }
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where ttAPInvHed_Row.Company.KeyEquals(Session.CompanyID)
                          && ttAPInvHed_Row.VendorNum == VendorNum
                          && StringExtensions.Compare(ttAPInvHed_Row.InvoiceNum, InvoiceNum) == 0
                          && !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvHedRecordNotFound, "APInvHed", "VendorNum");
            }

            /* LINKING DATES */
            apSystPartial = FindPartialAPSyst(Session.CompanyID);

            if (apSystPartial != null)
            {
                if (apSystPartial.DatesSetUp)
                {
                    if (StringExtensions.Compare(apSystPartial.APLinkTaxRateD, "T") == 0 && ttAPInvHed.TaxRateDate == ttAPInvHed.TaxPoint)
                    {
                        if (newTaxPoint == null)
                        {
                            ttAPInvHed.TaxRateDate = null;
                        }
                        else
                        {
                            ttAPInvHed.TaxRateDate = (DateTime)newTaxPoint;
                        }
                    }

                    if (newTaxPoint == null)
                    {
                        ttAPInvHed.TaxPoint = null;
                    }
                    else
                    {
                        ttAPInvHed.TaxPoint = (DateTime)newTaxPoint;
                    }
                }
            }
        }

        /// <summary>
        /// This method should be called to validate the new tax rate date entered by the user.
        /// </summary>
        /// <param name="VendorNum">Vendor Number.</param>
        /// <param name="InvoiceNum">Invoice Number.</param>
        /// <param name="newTaxDate">New Tax Date.</param>
        /// <param name="ds">AP Invoice Entry data set.</param>
        public void OnChangeofTaxRateDate(int VendorNum, string InvoiceNum, DateTime? newTaxDate, ref APInvoiceTableset ds)
        {
            if (newTaxDate == null)
            {
                throw new BLException(Strings.InvalidTaxRateDate, "APInvHed");
            }
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where ttAPInvHed_Row.Company.KeyEquals(Session.CompanyID)
                          && ttAPInvHed_Row.VendorNum == VendorNum
                          && StringExtensions.Compare(ttAPInvHed_Row.InvoiceNum, InvoiceNum) == 0
                          && !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvHedRecordNotFound, "APInvHed", "VendorNum");
            }

            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            if (newTaxDate == null)
            {
                ttAPInvHed.TaxRateDate = null;
            }
            else
            {
                ttAPInvHed.TaxRateDate = (DateTime)newTaxDate;
            }

            if (XbSyst != null && XbSyst.UseTaxRate)
            {
                getExchangeRate("Lock");
            }
        }

        ///  /// <summary>
        /// This method should be called to validate the new apply date entered by the user for transferred invoice.
        /// </summary>
        /// <param name="VendorNum">Vendor Number.</param>
        /// <param name="InvoiceNum">Invoice Number.</param>
        /// <param name="NewTransApplyDate">New Apply Date for Transferred Invoice.</param>
        /// <param name="ds">AP Invoice Entry data set.</param>
        public void OnChangeofTransApplyDate(int VendorNum, string InvoiceNum, DateTime? NewTransApplyDate, ref APInvoiceTableset ds)
        {
            if (NewTransApplyDate == null)
            {
                throw new BLException(Strings.InvalidApplyDate, "APInvHed");
            }
            CurrentFullTableset = ds;
            string cMessageText = string.Empty;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where ttAPInvHed_Row.Company.KeyEquals(Session.CompanyID)
                          && ttAPInvHed_Row.VendorNum == VendorNum
                          && StringExtensions.Compare(ttAPInvHed_Row.InvoiceNum, InvoiceNum) == 0
                          && !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvHedRecordNotFound, "APInvHed", "VendorNum");
            }

            cMessageText = LibEADValidation.validateEAD(NewTransApplyDate, "AP", "Apply");

            if (!String.IsNullOrEmpty(cMessageText))
            {
                throw new BLException(cMessageText);
            }
            if (NewTransApplyDate == null)
            {
                ttAPInvHed.TransApplyDate = null;
            }
            else
            {
                ttAPInvHed.TransApplyDate = (DateTime)NewTransApplyDate;
            }
        }

        /// <summary>
        /// Sets default values when the TranDocTypeID changes
        /// </summary>
        /// <param name="ipTranDocTypeID">TranDocTypeID supplied</param>
        /// <param name="ds"></param>
        public void OnChangeTranDocTypeID(string ipTranDocTypeID, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Compare(ttAPInvHed_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.RecordNotAvailable_0, "ttAPInvHed");
            }

            TranDocType = TranDocType.FindFirstByPrimaryKey(Db, Session.CompanyID, ipTranDocTypeID);
            if (TranDocType == null)
            {
                throw new BLException(Strings.InvalidTransactionDocumentType, "TranDocType");
            }
            else
            {
                if (!TranDocType.SystemTranID.Equals(ttAPInvHed.SystemTranType, StringComparison.OrdinalIgnoreCase))
                {
                    throw new BLException(Strings.InvalidTransactionDocumentType, "TranDocType");
                }
            }

            ttAPInvHed.TranDocTypeID = ipTranDocTypeID;
            ttAPInvHed.TranDocTypeDescription = TranDocType.Description;
            if (isPeruLocalization)
            {
                ttAPInvHed.PEIsNRInvc = TranDocType.PENRInvoices;
                if (!ttAPInvHed.PEIsNRInvc)
                {
                    ttAPInvHed.PESUNATNum = "";
                }
            }

            if (isTaiwanLocalization)
            {
                ttAPInvHed.GUIFormatCode = TranDocType.GUIFormatCode;
                ttAPInvHed.GUITaxTypeCode = TranDocType.GUITaxTypeCode;
                ttAPInvHed.GUIDeductCode = TranDocType.GUIDeductCode;
            }

            if (isIndiaLocalization)
            {
                ttAPInvHed.SelfInvoice = FindFirstTranDocTypeSelfInvoice(ttAPInvHed.Company, ttAPInvHed.TranDocTypeID);
            }
            LibLegalNumDocLib.SetLegNumExternalFlds(string.Empty, ttAPInvHed);
            APInvHed_Foreign_Link();
            ds = CurrentFullTableset;
        }

        /// <summary>
        /// Call this method when the user enters the ttApInv.BankID
        /// </summary>
        /// <param name="pcVendBankID">Vendor Bank ID</param>
        /// <param name="ds"></param>
        public void OnChangeVendBankID(string pcVendBankID, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Compare(ttAPInvHed_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.RecordNotFound, "ttAPInvHed");
            }
        }

        #endregion

        /// <summary>
        /// Verifies if a Miscellaneous Charge can be marked as Landed Cost.
        /// </summary>
        /// <param name="ipMiscCode">The Purchase Miscellaneous ID</param>
        /// <param name="ipLCFlag">The Landed Cost Flag (true/false)</param>
        public void OnLCFlagOfLineMiscChargeChange(string ipMiscCode, bool ipLCFlag)
        {
            PurMisc = FindFirstPurMisc(Session.CompanyID, ipMiscCode);
            if (PurMisc == null)
            {
                throw new BLException(Strings.NoMiscellaneousChargeSelected, "PurMisc", "MiscCode");
            }
            /* If Purchase Miscellaneous is not for Landed Cost and try to use it for Landed Cost */
            if (!PurMisc.LCFlag && ipLCFlag)
            {
                throw new BLException(Strings.MisceChargeCannotBeMarkedAsLandedCost, "PurMisc", "LCFlag");
            }
        }

        /// <summary>
        /// Verifies if a Shipment ID (ContainerHeader.ContainerID) is valid.
        /// </summary>
        /// <param name="ipShipmentID">The Shipment ID (ContainerHeader.ContainerID)</param>
        /// <param name="ds">AP Invoice Entry data set.</param>
        public void OnShipmentIDChange(int ipShipmentID, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Lookup(modList, ttAPInvDtl_Row.RowMod) != -1
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.TheRecordWasNotModified, "ttAPInvDtl");
            }
            /* Validates Shipment ID */
            var ContainerHeaderQuery = DBExpressionCompiler.Compile(ContainerHeaderExpression);
            ContainerHeader = ContainerHeaderQuery(Db, Session.CompanyID, ipShipmentID);
            if (ContainerHeader == null)
            {
                throw new BLException(Strings.InvalidShipmentID, "ContainerHeader", "ContainerID");
            }
            /* Container Description */
            ttAPInvDtl.ContainerIDContainerDescription = ContainerHeader.ContainerDescription;
        }

        /// <summary>
        /// Verify selected TH Reference Customer
        /// </summary>
        /// <param name="vendorID">Selected Vendor ID</param>
        /// <param name="ds">Full tableset</param>
        public void OnTHRefVendorIDChange(string vendorID, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, APInvHed.GetTableName());
            }

            if (!String.IsNullOrEmpty(vendorID))
            {
                Vendor vendor = FindFirstVendor(Session.CompanyID, vendorID);
                if (vendor == null)
                {
                    throw new BLException(Strings.InvalidVendor, APInvHed.GetTableName());
                }

                ttAPInvHed.THRefVendorNumVendorID = vendor.VendorID;
                ttAPInvHed.THRefVendorNumName = vendor.Name;
                ttAPInvHed.THRefVendorNum = vendor.VendorNum;
            }
            else
            {
                ttAPInvHed.THRefVendorNumVendorID = vendorID;
                ttAPInvHed.THRefVendorNumName = string.Empty;
                ttAPInvHed.THRefVendorNum = 0;
            }
            ttAPInvHed.THRefInvoiceNum = string.Empty;
        }

        /// <summary>
        /// Verify selected Reference Invoice NUmber
        /// </summary>
        /// <param name="apInvoiceNum">Selected Invoice Number</param>
        /// <param name="ds">Full tableset</param>
        public void OnTHRefInvoiceNumChange(string apInvoiceNum, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, APInvHed.GetTableName());
            }

            OnTHRefInvoiceNumChangeEx(ttAPInvHed.THRefVendorNum, apInvoiceNum);
        }

        /// <summary>
        /// Verify selected Reference Invoice NUmber
        /// </summary>
        /// <param name="apInvoiceNum">Selected Invoice Number</param>
        /// <param name="opMessage">Message</param>
        /// <param name="ds">Full tableset</param>
        public void OnTHRefInvoiceNumChangeWithUnknownSupplier(string apInvoiceNum, out string opMessage, ref APInvoiceTableset ds)
        {
            opMessage = string.Empty;

            CurrentFullTableset = ds;
            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Lookup(modList, ttAPInvHed_Row.RowMod) != -1
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.APInvoiceCriteriaNotAvailable, APInvHed.GetTableName());
            }

            int iTHRefVendorNum = ttAPInvHed.THRefVendorNum;

            if (iTHRefVendorNum == 0)
            {
                List<Erp.Tables.APInvHed> apInvHedList = SelectAPInvHed2(Session.CompanyID, apInvoiceNum).ToList<Erp.Tables.APInvHed>();
                if (apInvHedList.Count > 1)
                {
                    opMessage = Strings.EnterVendorID;
                    return;
                }
                else
                {
                    Erp.Tables.APInvHed apInvHed = (from APInvHed_row in apInvHedList
                                                    select APInvHed_row).FirstOrDefault();
                    if (apInvHed != null)
                    {
                        iTHRefVendorNum = apInvHed.VendorNum;
                    }
                }
            }

            OnTHRefInvoiceNumChangeEx(iTHRefVendorNum, apInvoiceNum);

            if (ttAPInvHed.THRefVendorNum != iTHRefVendorNum)
            {
                Erp.Tables.Vendor vendor = Erp.Tables.Vendor.FindFirstByPrimaryKey(this.Db, Session.CompanyID, iTHRefVendorNum);
                if (vendor != null)
                {
                    ttAPInvHed.THRefVendorNum = vendor.VendorNum;
                    ttAPInvHed.THRefVendorNumVendorID = vendor.VendorID;
                    ttAPInvHed.THRefVendorNumName = vendor.Name;
                }
            }
        }

        private void OnTHRefInvoiceNumChangeEx(int vendorNum, string apInvoiceNum)
        {
            if (ttAPInvHed.VendorNum == vendorNum && ttAPInvHed.InvoiceNum.KeyEquals(apInvoiceNum))
            {
                throw new BLException(Strings.THSelfRefNotAllowed, APInvHed.GetTableName(), "THRefInvoiceNum");
            }
            APInvHed apInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvHed.Company, vendorNum, apInvoiceNum);
            if (apInvHed == null)
            {
                throw new BLException(Strings.InvoiceNotFound, APInvHed.GetTableName(), "THRefInvoiceNum");
            }
            if (!apInvHed.Posted)
            {
                throw new BLException(Strings.THRefToPostedInvOnly, APInvHed.GetTableName(), "THRefInvoiceNum");
            }
            if (apInvHed.DebitMemo)
            {
                throw new BLException(Strings.THDebitMemoRefNotAllowed);
            }
            ttAPInvHed.THRefInvoiceNum = apInvHed.InvoiceNum;
        }

        /// <summary>
        /// OnUpdateExt override for ErpCallContext purposes.
        /// </summary>
        /// <param name="sourceTs"></param>
        /// <param name="continueProcessingOnError"></param>
        /// <param name="rollBackParentOnChildError"></param>
        /// <param name="errorsOcurred"></param>
        /// <param name="errors"></param>
        /// <returns></returns>
        protected override bool OnUpdateExt(IceTableset sourceTs, bool continueProcessingOnError, bool rollBackParentOnChildError, out bool errorsOcurred, BOUpdErrorTableset errors)
        {
            Erp.Internal.Lib.ErpCallContext.Add("UpdateExt");
            ErpCallContext.Add("UpdateExt_sourceTs", sourceTs);
            return base.OnUpdateExt(sourceTs, continueProcessingOnError, rollBackParentOnChildError, out errorsOcurred, errors);
        }

        private void poRelNumChanged()
        {
            decimal CalcDocAdvPay = decimal.Zero;
            decimal CalcDocInAdvPay = decimal.Zero;
            decimal CurLineBal = decimal.Zero;
            decimal CurInLineBal = decimal.Zero;
            decimal calcUnitCost = decimal.Zero;
            decimal calcInUnitCost = decimal.Zero;
            int pStep = 0;
            decimal pExRate = decimal.Zero;
            if (APInvHed == null)
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            }
            if (PODetail == null)
            {
                PODetail = FindFirstPODetail(ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine);
                if (PODetail == null)
                {
                    return;
                }
            }/* if not available PODetail */
            if (POHeader == null)
            {
                POHeader = FindFirstPOHeader(ttAPInvDtl.Company, ttAPInvDtl.PONum);
                if (POHeader == null)
                {
                    return;
                }
            }
            if (StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) == 0)
            {
                calcUnitCost = PODetail.DocUnitCost;
                CalcDocAdvPay = PODetail.DocAdvancePayBal;
                calcInUnitCost = PODetail.DocInUnitCost;
                CalcDocInAdvPay = PODetail.DocInAdvancePayBal;
            }
            else
            {
                if (tmpChainRows != null)
                {
                    tmpChainRows.Clear();
                }

                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, POHeader.CurrencyCode, APInvHed.CurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", APInvHed.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                calcUnitCost = this.LibConvertAmtEF.ConvertAmt(PODetail.DocUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                CalcDocAdvPay = this.LibConvertAmtEF.ConvertAmt(PODetail.DocAdvancePayBal, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                calcUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcUnitCost, APInvHed.CurrencyCode, "PODetail", "DocUnitCost");
                CalcDocAdvPay = LibRoundAmountEF.RoundDecimalsApply(CalcDocAdvPay, APInvHed.CurrencyCode, "PODetail", "DocAdvancePayBal");
                calcInUnitCost = this.LibConvertAmtEF.ConvertAmt(PODetail.DocInUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                CalcDocInAdvPay = this.LibConvertAmtEF.ConvertAmt(PODetail.DocInAdvancePayBal, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                calcInUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcInUnitCost, APInvHed.CurrencyCode, "PODetail", "DocInUnitCost");
                CalcDocInAdvPay = LibRoundAmountEF.RoundDecimalsApply(CalcDocInAdvPay, APInvHed.CurrencyCode, "PODetail", "DocINAdvancePayBal");
            }

            if (vUseDate == 1)
            {
                vExDate = APInvHed.InvoiceDate;
            }
            else
            {
                vExDate = APInvHed.ApplyDate;
            }

            this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

            ttAPInvDtl.ScrVendorQty = PORel.RelQty;
            ttAPInvDtl.PUM = PODetail.PUM;
            ttAPInvDtl.CostPerCode = PODetail.CostPerCode;
            ttAPInvDtl.DocUnitCost = calcUnitCost;
            ttAPInvDtl.DocInUnitCost = calcInUnitCost;
            ttAPInvDtl.UnitCost = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocUnitCost, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", "UnitCost");
            ttAPInvDtl.InUnitCost = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocInUnitCost, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", "InUnitCost");

            LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvDtl, false, "UnitCost", pCurrList, "ttAPInvDtl", APInvHed.CurrencyCode, ttChainRows);

            if (!APInvHed.InPrice)
            {
                ttAPInvDtl.DocScrUnitCost = ttAPInvDtl.DocUnitCost;
                ttAPInvDtl.ScrUnitCost = ttAPInvDtl.UnitCost;
                ttAPInvDtl.Rpt1ScrUnitCost = ttAPInvDtl.Rpt1UnitCost;
                ttAPInvDtl.Rpt2ScrUnitCost = ttAPInvDtl.Rpt2UnitCost;
                ttAPInvDtl.Rpt3ScrUnitCost = ttAPInvDtl.Rpt3UnitCost;
            }
            else
            {

                ttAPInvDtl.DocScrUnitCost = ttAPInvDtl.DocInUnitCost;
                ttAPInvDtl.ScrUnitCost = ttAPInvDtl.InUnitCost;
                ttAPInvDtl.Rpt1ScrUnitCost = ttAPInvDtl.Rpt1InUnitCost;
                ttAPInvDtl.Rpt2ScrUnitCost = ttAPInvDtl.Rpt2InUnitCost;
                ttAPInvDtl.Rpt3ScrUnitCost = ttAPInvDtl.Rpt3InUnitCost;
            }

            /* CREDIT ADVANCED  */
            if (CalcDocAdvPay > 0)
            {
                CurLineBal = LibRoundAmountEF.RoundDecimalsApply(((ttAPInvDtl.DocUnitCost * (ttAPInvDtl.ScrVendorQty / costFactor(ttAPInvDtl.CostPerCode))) - ttAPInvDtl.DocTotalMiscChrg), APInvHed.CurrencyCode, "APInvDtl", "DocUnitCost");
                CurInLineBal = LibRoundAmountEF.RoundDecimalsApply(((ttAPInvDtl.DocInUnitCost * (ttAPInvDtl.ScrVendorQty / costFactor(ttAPInvDtl.CostPerCode))) - ttAPInvDtl.DocInTotalMiscChrg), APInvHed.CurrencyCode, "APInvDtl", "DocInUnitCost");
                ttAPInvDtl.DocAdvancePayAmt = LibRoundAmountEF.RoundDecimalsTT(((CalcDocAdvPay > CurLineBal) ? CurLineBal : CalcDocAdvPay), ttAPInvDtl, "DocAdvancePayAmt");
                ttAPInvDtl.DocInAdvancePayAmt = LibRoundAmountEF.RoundDecimalsTT(((CalcDocAdvPay > CurLineBal) ? CurInLineBal : CalcDocInAdvPay), ttAPInvDtl, "DocAdvancePayAmt");
                if (APInvHed.InPrice)
                {
                    if ((CalcDocAdvPay > CurLineBal) && (ttAPInvDtl.DocAdvancePayAmt == ttAPInvDtl.DocInAdvancePayAmt) && (CalcDocAdvPay != CalcDocInAdvPay))
                    {
                        //need to check if Advance payment should be adjusted by tax taken on Advance Payment
                        if (CalcDocInAdvPay != 0)
                        {
                            decimal advTax = CalcDocInAdvPay - CalcDocAdvPay;
                            ttAPInvDtl.DocAdvancePayAmt = LibRoundAmountEF.RoundDecimalsApply((ttAPInvDtl.DocAdvancePayAmt - advTax * ttAPInvDtl.DocInAdvancePayAmt / CalcDocInAdvPay), APInvHed.CurrencyCode, "APInvDtl", "DocAdvancePayAmt");

                        }
                    }
                }

                ttAPInvDtl.AdvancePayAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocAdvancePayAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvDtl", "AdvancePayAmt");
                ttAPInvDtl.InAdvancePayAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtl.DocInAdvancePayAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvDtl", "AdvancePayAmt");
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvDtl, false, "AdvancePayAmt", pCurrList, "ttAPInvDtl", APInvHed.CurrencyCode, ttChainRows);
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvDtl, false, "InAdvancePayAmt", pCurrList, "ttAPInvDtl", APInvHed.CurrencyCode, ttChainRows);
            }/* if CalcDocAdvPay > 0 */


            CalcExtCost();
            getLineTotals();
        }

        #region Pre Methods

        /// <summary>
        ///  This method sets the amount to be allocated
        /// on condition of the currency switch
        /// </summary>
        /// <param name="nCurrSwitch">Indicates if the currency is swithed to Base before Allocation</param>
        /// <param name="ds"></param>
        public void PreSetAllocationAmt(bool nCurrSwitch, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                          where StringExtensions.Compare(ttAPInvDtl_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                          select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl != null)
            {
                if (nCurrSwitch)
                    ttAPInvDtl.DspAllocationAmount = ttAPInvDtl.Variance;
                else
                    ttAPInvDtl.DspAllocationAmount = ttAPInvDtl.DocVariance;
            }
        }
        #endregion

        partial void RcvMiscBeforeDelete()
        {
            Erp.Tables.APInvMsc bufAPInvMsc = null;
            Erp.Tables.RcvMisc bufRcvMisc = null;
            decimal miscAmt = decimal.Zero;
            int nDec = 0;
            string baseWUOM = string.Empty;
            string baseVUOM = string.Empty;
            string lcDM = string.Empty;
            decimal totBasis = decimal.Zero;
            decimal curBasis = decimal.Zero;
            int numLines = 0;
            Erp.Tables.APInvHed bufAPInvHed = null;
            decimal actualDocHighestAmt = decimal.Zero;
            decimal actualDocTotalAmt = decimal.Zero;
            decimal actualBaseHighestAmt = decimal.Zero;
            decimal actualBaseTotalAmt = decimal.Zero;
            int vendorNum = 0;
            int docVendorNum = 0;
            string purPoint = string.Empty;
            string packSlip = string.Empty;
            string docPurPoint = string.Empty;
            string docPackSlip = string.Empty;
            int miscSeq = 0;
            int docMiscSeq = 0;


            var BufAPInvMscQuery3 = DBExpressionCompiler.Compile(BufAPInvMscExpression3);
            bufAPInvMsc = BufAPInvMscQuery3(Db, Session.CompanyID, ttRcvMisc.APInvVendorNum, ttRcvMisc.InvoiceNum, ttRcvMisc.InvoiceLine, ttRcvMisc.MscNum);
            if (bufAPInvMsc == null)
            {
                return;
            }

            miscAmt = bufAPInvMsc.MiscAmt;
            nDec = LibGetDecimalsNumber.getDecimalsNumberByName("RcvDtl", "AppliedRCptLCAmt", "");
            lcDM = bufAPInvMsc.LCDisburseMethod;

            UOMClass = FindFirstUOMClassByType(Session.CompanyID, "Weight");
            if (UOMClass != null)
            {
                baseWUOM = UOMClass.BaseUOMCode;
            }

            UOMClass = FindFirstUOMClassByType(Session.CompanyID, "Volume");
            if (UOMClass != null)
            {
                baseVUOM = UOMClass.BaseUOMCode;
            }



            var BufRcvMiscQuery4 = DBExpressionCompiler.Compile(BufRcvMiscExpression4);
            foreach (var bufRcvMisc_iterator in (BufRcvMiscQuery4(Db, Session.CompanyID, ttRcvMisc.APInvVendorNum, ttRcvMisc.InvoiceNum, ttRcvMisc.InvoiceLine, ttRcvMisc.MscNum, ttRcvMisc.Company, ttRcvMisc.VendorNum, ttRcvMisc.PurPoint, ttRcvMisc.PackSlip, ttRcvMisc.MiscSeq)))
            {
                bufRcvMisc = bufRcvMisc_iterator;


                RcvDtl = FindFirstRcvDtl(Session.CompanyID, bufRcvMisc.VendorNum, bufRcvMisc.PurPoint, bufRcvMisc.PackSlip, bufRcvMisc.PackLine);
                curBasis = calcAllocBasis(RcvDtl, lcDM, nDec, baseWUOM, baseVUOM);
                totBasis = totBasis + curBasis;
                numLines = numLines + 1;
            }

            if (bufRcvMisc != null)
            {
                bufAPInvHed = FindFirstAPInvHed(Session.CompanyID, bufRcvMisc.APInvVendorNum, bufRcvMisc.InvoiceNum);
                if (bufAPInvHed == null)
                {
                    throw new BLException(Strings.InvoiceNotFound, "APInvHed", "InvoiceNum");
                }
            }
            else
                return;


            var BufRcvMiscQuery5 = DBExpressionCompiler.Compile(BufRcvMiscExpression5);
            foreach (var bufRcvMisc_iterator in (BufRcvMiscQuery5(Db, Session.CompanyID, ttRcvMisc.APInvVendorNum, ttRcvMisc.InvoiceNum, ttRcvMisc.InvoiceLine, ttRcvMisc.MscNum, ttRcvMisc.Company, ttRcvMisc.VendorNum, ttRcvMisc.PurPoint, ttRcvMisc.PackSlip, ttRcvMisc.MiscSeq)))
            {
                bufRcvMisc = bufRcvMisc_iterator;

                RcvDtl = FindFirstRcvDtl(Session.CompanyID, bufRcvMisc.VendorNum, bufRcvMisc.PurPoint, bufRcvMisc.PackSlip, bufRcvMisc.PackLine);

                this.LibGetCurrencyRatesEF.BuildCurrencyRates(bufAPInvHed.ApplyDate, "RcvMisc", Compatibility.Convert.ToString(bufRcvMisc.VendorNum), bufRcvMisc.PurPoint, bufRcvMisc.PackSlip, Compatibility.Convert.ToString(bufRcvMisc.MiscSeq), "", "", "", "", bufAPInvHed.CurrencyCode, bufAPInvHed.RateGrpCode, bufAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);

                curBasis = calcAllocBasis(RcvDtl, lcDM, nDec, baseWUOM, baseVUOM);
                bufRcvMisc.ActualAmt = LibRoundAmountEF.RoundDecimalsApply(((totBasis == 0) ? (miscAmt / numLines) : (curBasis * miscAmt / totBasis)), pCurrList.Entry(0, Ice.Constants.LIST_DELIM), "RcvMisc", "ActualAmt");

                decimal outActualAmt3 = bufRcvMisc.ActualAmt;
                decimal outDocActualAmt3 = bufRcvMisc.DocActualAmt;
                decimal outRpt1ActualAmt3 = bufRcvMisc.Rpt1ActualAmt;
                decimal outRpt2ActualAmt3 = bufRcvMisc.Rpt2ActualAmt;
                decimal outRpt3ActualAmt3 = bufRcvMisc.Rpt3ActualAmt;
                string outRateGrpCode = bufRcvMisc.RateGrpCode;
                string outCurrencyCode = bufRcvMisc.CurrencyCode;
                DateTime? outApplyDate = bufRcvMisc.ApplyDate;

                actualBaseTotalAmt += outActualAmt3;

                if ((!bufAPInvHed.DebitMemo && outActualAmt3 > actualBaseHighestAmt) ||
                    (bufAPInvHed.DebitMemo && outActualAmt3 < actualBaseHighestAmt))
                {
                    actualBaseHighestAmt = outActualAmt3;
                    vendorNum = bufRcvMisc.VendorNum;
                    purPoint = bufRcvMisc.PurPoint;
                    packSlip = bufRcvMisc.PackSlip;
                    miscSeq = bufRcvMisc.MiscSeq;
                }

                CalcDocAmtByTableName(ref outActualAmt3, bufRcvMisc.APInvVendorNum, bufRcvMisc.InvoiceNum, "RcvMisc", "DocActualAmt", "ActualAmt", out outDocActualAmt3, out outRpt1ActualAmt3, out outRpt2ActualAmt3, out outRpt3ActualAmt3, out outRateGrpCode, out outCurrencyCode, out outApplyDate);

                bufRcvMisc.ActualAmt = outActualAmt3;
                bufRcvMisc.DocActualAmt = outDocActualAmt3;
                bufRcvMisc.Rpt1ActualAmt = outRpt1ActualAmt3;
                bufRcvMisc.Rpt2ActualAmt = outRpt2ActualAmt3;
                bufRcvMisc.Rpt3ActualAmt = outRpt3ActualAmt3;
                bufRcvMisc.RateGrpCode = outRateGrpCode;
                bufRcvMisc.CurrencyCode = outCurrencyCode;
                bufRcvMisc.ApplyDate = outApplyDate;

                actualDocTotalAmt += outDocActualAmt3;

                if ((!bufAPInvHed.DebitMemo && outDocActualAmt3 > actualDocHighestAmt) ||
                    (bufAPInvHed.DebitMemo && outDocActualAmt3 < actualDocHighestAmt))
                {
                    actualDocHighestAmt = outDocActualAmt3;
                    docVendorNum = bufRcvMisc.VendorNum;
                    docPurPoint = bufRcvMisc.PurPoint;
                    docPackSlip = bufRcvMisc.PackSlip;
                    docMiscSeq = bufRcvMisc.MiscSeq;
                }
            }

            if ((actualDocTotalAmt != bufAPInvMsc.DocMiscAmt) && actualDocTotalAmt != 0) //Handle rounding errors so need to adjust the highest amount.
            {
                AllocateRoundingValidation(docVendorNum, docPurPoint, docPackSlip, docMiscSeq, bufAPInvMsc.DocMiscAmt, actualDocTotalAmt, true);
            }

            if ((actualBaseTotalAmt != bufAPInvMsc.MiscAmt) && actualBaseTotalAmt != 0)
            {
                AllocateRoundingValidation(vendorNum, purPoint, packSlip, miscSeq, bufAPInvMsc.MiscAmt, actualBaseTotalAmt, false);
            }

        }

        /// <summary>
        /// Recalculates Invoice amount if invoice Apply Date was changed for transferred invoice.
        /// </summary>
        /// <param name="transInvoiceNum">Invoice num which is being transferred</param>
        /// <param name="transVendorNum">Vendor num of transferred invoice</param>
        private void recalcInvoiceAmounts(string transInvoiceNum, int transVendorNum)
        {
            string cRFieldList = string.Empty;

            if (Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
            {
                var APInvHedQuery82 = DBExpressionCompiler.Compile(APInvHedExpression82);
                APInvHed = APInvHedQuery82(Db, Session.CompanyID, transInvoiceNum, transVendorNum);
                if (APInvHed == null)
                {
                    throw new BLException(Strings.InvalidInvoiceNumber, "APInvHed", "InvoiceNum");
                }

                this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);

                Db.DisableTriggers(APInvHed.GetTableName(), TriggerType.Write);
                Db.DisableTriggers(APInvDtl.GetTableName(), TriggerType.Write);
                Db.DisableTriggers(APInvTax.GetTableName(), TriggerType.Write);
                Db.DisableTriggers(APInvMsc.GetTableName(), TriggerType.Write);
                Db.DisableTriggers(APInvExp.GetTableName(), TriggerType.Write);

                /*        Recalculate APInvHed amounts     */
                cRFieldList = "DiscountAmt" + Ice.Constants.LIST_DELIM + "InvoiceVendorAmt" + Ice.Constants.LIST_DELIM + "WithholdAmt" + Ice.Constants.LIST_DELIM + "PrePaymentAmt";

                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvHed, true, cRFieldList, pCurrList, "APInvHed", APInvHed.CurrencyCode, ttChainRows);

                APInvHed.InvoiceAmt = 0;
                APInvHed.DocInvoiceAmt = 0;
                APInvHed.Rpt1InvoiceAmt = 0;
                APInvHed.Rpt2InvoiceAmt = 0;
                APInvHed.Rpt3InvoiceAmt = 0;
                APInvHed.Rounding = 0;
                APInvHed.DocRounding = 0;
                APInvHed.Rpt1Rounding = 0;
                APInvHed.Rpt2Rounding = 0;
                APInvHed.Rpt3Rounding = 0;
                /*SCR 82210 Recalculation of patch field 'PrePaymentAmt'*/

                bool isAPTaxLnLevel = IsAPTaxLnLevel(Session.CompanyID);

                /*        Recalculate APInvDtl amounts     */
                foreach (var APInvDtl_iterator in (SelectAPInvDtlWithUpdLock(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                {
                    APInvDtl = APInvDtl_iterator;
                    cRFieldList = "AdvancePayAmt" + Ice.Constants.LIST_DELIM + "ExtCost" + Ice.Constants.LIST_DELIM + "LineDiscAmt" + Ice.Constants.LIST_DELIM + "TotalMiscChrg" + Ice.Constants.LIST_DELIM + "UnitCost";
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvDtl, true, cRFieldList, pCurrList, "APInvDtl", APInvHed.CurrencyCode, ttChainRows);
                    Db.Validate(APInvDtl);
                    refreshttAPInvDtl();

                    APInvHed.InvoiceAmt += APInvDtl.ExtCost + APInvDtl.TotalMiscChrg - APInvDtl.AdvancePayAmt - APInvDtl.ScrWithholdAmt;
                    APInvHed.DocInvoiceAmt += APInvDtl.DocExtCost + APInvDtl.DocTotalMiscChrg - APInvDtl.DocAdvancePayAmt - APInvDtl.DocScrWithholdAmt;
                    APInvHed.Rpt1InvoiceAmt += APInvDtl.Rpt1ExtCost + APInvDtl.Rpt1TotalMiscChrg - APInvDtl.Rpt1AdvancePayAmt - APInvDtl.Rpt1ScrWithholdAmt;
                    APInvHed.Rpt2InvoiceAmt += APInvDtl.Rpt2ExtCost + APInvDtl.Rpt2TotalMiscChrg - APInvDtl.Rpt2AdvancePayAmt - APInvDtl.Rpt2ScrWithholdAmt;
                    APInvHed.Rpt3InvoiceAmt += APInvDtl.Rpt3ExtCost + APInvDtl.Rpt3TotalMiscChrg - APInvDtl.Rpt3AdvancePayAmt - APInvDtl.Rpt3ScrWithholdAmt;
                }

                var APInvTaxQuery12 = DBExpressionCompiler.Compile(APInvTaxExpression12);
                foreach (var APInvTax_iterator in (APInvTaxQuery12(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                {
                    APInvTax = APInvTax_iterator;
                    if (!isAPTaxLnLevel)
                    {
                        cRFieldList = "ReportableAmt" + Ice.Constants.LIST_DELIM + "TaxableAmt" + Ice.Constants.LIST_DELIM + "TaxAmt" + Ice.Constants.LIST_DELIM + "DefTaxableAmt" + Ice.Constants.LIST_DELIM + "DefTaxAmt" + Ice.Constants.LIST_DELIM + "DedTaxAmt" + Ice.Constants.LIST_DELIM + "FixedAmount";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvTax, true, cRFieldList, pCurrList, "APInvTax", APInvHed.CurrencyCode, ttChainRows);
                        APInvTax.SysCalcTaxableAmt = APInvTax.TaxableAmt;
                        APInvTax.Rpt1SysCalcTaxableAmt = APInvTax.Rpt1TaxableAmt;
                        APInvTax.Rpt2SysCalcTaxableAmt = APInvTax.Rpt2TaxableAmt;
                        APInvTax.Rpt3SysCalcTaxableAmt = APInvTax.Rpt3TaxableAmt;
                        APInvTax.SysCalcReportableAmt = APInvTax.ReportableAmt;
                        APInvTax.Rpt1SysCalcReportableAmt = APInvTax.Rpt1ReportableAmt;
                        APInvTax.Rpt2SysCalcReportableAmt = APInvTax.Rpt2ReportableAmt;
                        APInvTax.Rpt3SysCalcReportableAmt = APInvTax.Rpt3ReportableAmt;
                    }

                    if (APInvTax.ECAcquisitionSeq != 2 && APInvTax.ECAcquisitionSeq != 3)
                    {
                        if (APInvTax.CollectionType != 1)
                        {
                            APInvHed.InvoiceAmt += APInvTax.TaxAmt + APInvTax.TaxAmtVar;
                            APInvHed.DocInvoiceAmt += APInvTax.DocTaxAmt + APInvTax.DocTaxAmtVar;
                            APInvHed.Rpt1InvoiceAmt += APInvTax.Rpt1TaxAmt + APInvTax.Rpt1TaxAmtVar;
                            APInvHed.Rpt2InvoiceAmt += APInvTax.Rpt2TaxAmt + APInvTax.Rpt2TaxAmtVar;
                            APInvHed.Rpt3InvoiceAmt += APInvTax.Rpt3TaxAmt + APInvTax.Rpt3TaxAmtVar;
                        }
                    }
                    Db.Validate(APInvTax);
                    refreshttAPInvTax();
                }

                var APInvMscQuery21 = DBExpressionCompiler.Compile(APInvMscExpression21);
                foreach (var APInvMsc_iterator in (APInvMscQuery21(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                {
                    APInvMsc = APInvMsc_iterator;
                    cRFieldList = "MiscAmt";
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvMsc, true, cRFieldList, pCurrList, "APInvMsc", APInvHed.CurrencyCode, ttChainRows);

                    if (APInvMsc.InvoiceLine == 0)
                    {
                        APInvHed.InvoiceAmt += APInvMsc.MiscAmt;
                        APInvHed.DocInvoiceAmt += APInvMsc.DocMiscAmt;
                        APInvHed.Rpt1InvoiceAmt += APInvMsc.Rpt1MiscAmt;
                        APInvHed.Rpt2InvoiceAmt += APInvMsc.Rpt2MiscAmt;
                        APInvHed.Rpt3InvoiceAmt += APInvMsc.Rpt3MiscAmt;
                    }
                    Db.Validate(APInvMsc);
                    refreshttAPInvMsc();
                }

                var APInvExpQuery22 = DBExpressionCompiler.Compile(APInvExpExpression22);
                foreach (var APInvExp_iterator in (APInvExpQuery22(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                {
                    APInvExp = APInvExp_iterator;
                    cRFieldList = "ExpAmt";
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvExp, true, cRFieldList, pCurrList, "APInvExp", APInvHed.CurrencyCode, ttChainRows);
                    Db.Validate(APInvExp);
                    refreshttAPInvExp();
                }

                var bufAPSyst = this.FindPartialAPSyst(APInvHed.Company);
                Currency = this.FindFirstCurrency(APInvHed.Company, APInvHed.CurrencyCode);
                decimal docVariance = APInvHed.DocInvoiceVendorAmt - APInvHed.DocInvoiceAmt;

                if ((bufAPSyst != null && bufAPSyst.RoundInvoice == true && Currency != null && Math.Abs(docVariance) < Currency.RoundMltpTotalAmt) || docVariance == 0.0m)
                {
                    APInvHed.Rounding = APInvHed.InvoiceVendorAmt - APInvHed.InvoiceAmt;
                    APInvHed.DocRounding = docVariance;
                    APInvHed.Rpt1Rounding = APInvHed.Rpt1InvoiceVendorAmt - APInvHed.Rpt1InvoiceAmt;
                    APInvHed.Rpt2Rounding = APInvHed.Rpt2InvoiceVendorAmt - APInvHed.Rpt2InvoiceAmt;
                    APInvHed.Rpt3Rounding = APInvHed.Rpt3InvoiceVendorAmt - APInvHed.Rpt3InvoiceAmt;
                    APInvHed.InvoiceAmt = APInvHed.InvoiceVendorAmt;
                    APInvHed.DocInvoiceAmt = APInvHed.DocInvoiceVendorAmt;
                    APInvHed.Rpt1InvoiceAmt = APInvHed.Rpt1InvoiceVendorAmt;
                    APInvHed.Rpt2InvoiceAmt = APInvHed.Rpt2InvoiceVendorAmt;
                    APInvHed.Rpt3InvoiceAmt = APInvHed.Rpt3InvoiceVendorAmt;
                }

                cRFieldList = "InvoiceAmt" + Ice.Constants.LIST_DELIM + "InvoiceBal" + Ice.Constants.LIST_DELIM + "UnpostedBal";
                this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), Compatibility.Convert.ToString(APInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvHed, true, cRFieldList, pCurrList, "APInvHed", APInvHed.CurrencyCode, ttChainRows);

                Db.Validate(APInvHed);
                BufferCopy.Copy(APInvHed, ref ttAPInvHed); /* refresh temp-table */

                Db.EnableTriggers(APInvHed.GetTableName(), TriggerType.Write);
                Db.EnableTriggers(APInvDtl.GetTableName(), TriggerType.Write);
                Db.EnableTriggers(APInvTax.GetTableName(), TriggerType.Write);
                Db.EnableTriggers(APInvMsc.GetTableName(), TriggerType.Write);
                Db.EnableTriggers(APInvExp.GetTableName(), TriggerType.Write);
            }
        }

        #region Refresh TT Methods

        private void refreshttAPIHAPInvExp()
        {
            ttAPIHAPInvExp = new Erp.Tablesets.APIHAPInvExpRow();
            CurrentFullTableset.APIHAPInvExp.Add(ttAPIHAPInvExp);
            BufferCopy.Copy(APInvExp, ref ttAPIHAPInvExp);
            ttAPIHAPInvExp.SysRowID = APInvExp.SysRowID;
            APIHAPInvExpAfterGetRows();


            var TranGLCQuery4 = DBExpressionCompiler.Compile(TranGLCExpression4);
            foreach (var TranGLC_iterator in (TranGLCQuery4(Db, APInvExp.Company, "APInvExp", Compatibility.Convert.ToString(APInvExp.VendorNum), Compatibility.Convert.ToString(APInvExp.InvoiceNum), Compatibility.Convert.ToString(APInvExp.InvoiceLine), Compatibility.Convert.ToString(APInvExp.InvExpSeq), true)))
            {
                TranGLC = TranGLC_iterator;
                ttAPIHAPInvExpTGLC = new Erp.Tablesets.APIHAPInvExpTGLCRow();
                CurrentFullTableset.APIHAPInvExpTGLC.Add(ttAPIHAPInvExpTGLC);
                BufferCopy.Copy(TranGLC, ref ttAPIHAPInvExpTGLC);
                ttAPIHAPInvExpTGLC.SysRowID = TranGLC.SysRowID;
                APIHAPInvExpTGLC_Foreign_Link();
                APIHAPInvExpTGLCAfterGetRows();
            }
        }

        private void refreshttAPIHAPInvMsc()
        {
            ttAPIHAPInvMsc = new Erp.Tablesets.APIHAPInvMscRow();
            CurrentFullTableset.APIHAPInvMsc.Add(ttAPIHAPInvMsc);
            BufferCopy.Copy(APInvMsc, ref ttAPIHAPInvMsc);
            ttAPIHAPInvMsc.SysRowID = APInvMsc.SysRowID;
            APIHAPInvMscAfterGetRows();
            APIHAPInvMsc_Foreign_Link();
        }


        private void refreshttAPIHAPInvMscAll(int vendorNum, string invoiceNum)
        {
            foreach (var apInvMscHd in (SelectAPInvMsc(Session.CompanyID, vendorNum, invoiceNum, 0)))
            {
                ttAPIHAPInvMsc = new Erp.Tablesets.APIHAPInvMscRow();
                CurrentFullTableset.APIHAPInvMsc.Add(ttAPIHAPInvMsc);
                BufferCopy.Copy(apInvMscHd, ref ttAPIHAPInvMsc);
                ttAPIHAPInvMsc.SysRowID = apInvMscHd.SysRowID;
                APIHAPInvMscAfterGetRows();
                APIHAPInvMsc_Foreign_Link();
            }
        }

        private void refreshttAPInvDtl()
        {
            ttAPInvDtl = new Erp.Tablesets.APInvDtlRow();
            CurrentFullTableset.APInvDtl.Add(ttAPInvDtl);
            BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
            ttAPInvDtl.SysRowID = APInvDtl.SysRowID;
            APInvDtlAfterGetRows();
            APInvDtl_Foreign_Link();
        }

        private void refreshttAPInvDtl(Erp.Tables.APInvDtl bAPInvDtl)
        {
            ttAPInvDtl = (from ttAPInvDtl_Row in CurrentFullTableset.APInvDtl
                          where ttAPInvDtl_Row.Company.KeyEquals(bAPInvDtl.Company) &&
                          ttAPInvDtl_Row.VendorNum == bAPInvDtl.VendorNum &&
                          ttAPInvDtl_Row.InvoiceNum.KeyEquals(bAPInvDtl.InvoiceNum) &&
                          ttAPInvDtl_Row.InvoiceLine == bAPInvDtl.InvoiceLine &&
                          !String.IsNullOrEmpty(ttAPInvDtl_Row.RowMod)
                          select ttAPInvDtl_Row).FirstOrDefault();

            if (ttAPInvDtl == null)
            {
                ttAPInvDtl = new Erp.Tablesets.APInvDtlRow();
                CurrentFullTableset.APInvDtl.Add(ttAPInvDtl);
                ttAPInvDtl.SysRowID = bAPInvDtl.SysRowID;
            }
            BufferCopy.Copy(bAPInvDtl, ref ttAPInvDtl);
            this.APInvDtlAfterGetRows();
            APInvDtl_Foreign_Link();
        }

        private void refreshttAPInvExp()
        {
            ttAPInvExp = new Erp.Tablesets.APInvExpRow();
            CurrentFullTableset.APInvExp.Add(ttAPInvExp);
            BufferCopy.Copy(APInvExp, ref ttAPInvExp);
            APInvExpAfterGetRows();
            APInvExp_Foreign_Link();



            var TranGLCQuery4 = DBExpressionCompiler.Compile(TranGLCExpression4);
            foreach (var TranGLC_iterator in (TranGLCQuery4(Db, APInvExp.Company, "APInvExp", Compatibility.Convert.ToString(APInvExp.VendorNum), Compatibility.Convert.ToString(APInvExp.InvoiceNum), Compatibility.Convert.ToString(APInvExp.InvoiceLine), Compatibility.Convert.ToString(APInvExp.InvExpSeq), true)))
            {
                TranGLC = TranGLC_iterator;
                if (StringExtensions.Compare(TranGLC.GLAcctContext, "External Expense") == 0)
                {
                    ttGlbAPIETGLC = new Erp.Tablesets.GlbAPIETGLCRow();
                    CurrentFullTableset.GlbAPIETGLC.Add(ttGlbAPIETGLC);
                    BufferCopy.Copy(TranGLC, ref ttGlbAPIETGLC);
                    ttGlbAPIETGLC.SysRowID = TranGLC.SysRowID;
                    GlbAPIETGLC_Foreign_Link();
                    GlbAPIETGLCAfterGetRows();
                }
                else
                {
                    ttAPInvExpTGLC = new Erp.Tablesets.APInvExpTGLCRow();
                    CurrentFullTableset.APInvExpTGLC.Add(ttAPInvExpTGLC);
                    BufferCopy.Copy(TranGLC, ref ttAPInvExpTGLC);
                    ttAPInvExpTGLC.SysRowID = TranGLC.SysRowID;
                    APInvExpTGLC_Foreign_Link();
                    APInvExpTGLCAfterGetRows();
                }
            }
        }

        private void refreshttAPInvHedAfterTaxes()
        {

            // refer to SetReadyToCalc method, SCR 116857 note
            Currency = FindFirstBaseCurrency(Session.CompanyID, true);
            ttAPInvHed = new Erp.Tablesets.APInvHedRow();
            BufferCopy.Copy(APInvHed, ref ttAPInvHed);
            SetDatesDiscount();
            Db.Validate();
            BufferCopy.Copy(APInvHed, ref ttAPInvHed);
            CurrentFullTableset.APInvHed.Add(ttAPInvHed);
            ttAPInvHed.SysRowID = APInvHed.SysRowID;
            if (String.IsNullOrEmpty(ttAPInvHed.CurrencyCode))
            {
                ttAPInvHed.CurrencyCode = ((Currency != null) ? Currency.CurrencyCode : "");
            }

            if (isNewReturnDebitMemo)
            {
                APInvHedAfterGetNew();
            }

            APInvHedAfterGetRows();
            APInvHed_Foreign_Link();

            if (refreshAPInvSched)
            {
                foreach (var APInvSchedRow in SelectAPInvSched(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum))
                {
                    refreshttAPInvSched(APInvSchedRow);
                }
            }
        }

        private void refreshttAPInvHed()
        {


            Currency = FindFirstBaseCurrency(Session.CompanyID, true);
            ttAPInvHed = new Erp.Tablesets.APInvHedRow();
            CurrentFullTableset.APInvHed.Add(ttAPInvHed);
            BufferCopy.Copy(APInvHed, ref ttAPInvHed);
            ttAPInvHed.SysRowID = APInvHed.SysRowID;
            if (String.IsNullOrEmpty(ttAPInvHed.CurrencyCode))
            {
                ttAPInvHed.CurrencyCode = ((Currency != null) ? Currency.CurrencyCode : "");
            }

            if (isNewReturnDebitMemo)
            {
                APInvHedAfterGetNew();
            }

            APInvHedAfterGetRows();
            APInvHed_Foreign_Link();

            ttAPInvHed.FormattedVendorNameAddress = FormatNameAddress(ttAPInvHed);

            if (refreshAPInvSched)
            {
                foreach (var APInvSchedRow in SelectAPInvSched(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum))
                {
                    refreshttAPInvSched(APInvSchedRow);
                }
            }
        }

        private void refreshttAPInvJob()
        {
            ttAPInvJob = new Erp.Tablesets.APInvJobRow();
            CurrentFullTableset.APInvJob.Add(ttAPInvJob);
            BufferCopy.Copy(APInvJob, ref ttAPInvJob);
            ttAPInvJob.SysRowID = APInvJob.SysRowID;
            APInvJobAfterGetRows();
            APInvJob_Foreign_Link();
        }

        private void refreshttAPInvMsc()
        {
            ttAPInvMsc = new Erp.Tablesets.APInvMscRow();
            CurrentFullTableset.APInvMsc.Add(ttAPInvMsc);
            BufferCopy.Copy(APInvMsc, ref ttAPInvMsc);
            ttAPInvMsc.SysRowID = APInvMsc.SysRowID;
            APInvMscAfterGetRows();
            APInvMsc_Foreign_Link();
        }


        private void refreshttAPInvMscAll(int vendorNum, string invoiceNum)
        {
            foreach (var apInvMscLn in (SelectAPInvMsc1(Session.CompanyID, vendorNum, invoiceNum)))
            {
                ttAPInvMsc = new Erp.Tablesets.APInvMscRow();
                CurrentFullTableset.APInvMsc.Add(ttAPInvMsc);
                BufferCopy.Copy(apInvMscLn, ref ttAPInvMsc);
                ttAPInvMsc.SysRowID = apInvMscLn.SysRowID;
                APInvMscAfterGetRows();
                APInvMsc_Foreign_Link();
            }
        }


        private void refreshttAPInvMsc(Erp.Tables.APInvMsc bAPInvMsc)
        {
            ttAPInvMsc = (from ttAPInvMsc_Row in CurrentFullTableset.APInvMsc
                          where !String.IsNullOrEmpty(ttAPInvMsc_Row.RowMod)
                          select ttAPInvMsc_Row).FirstOrDefault();

            if (ttAPInvMsc != null)
            {
                BufferCopy.Copy(bAPInvMsc, ref ttAPInvMsc);
                ttAPInvMsc.RowMod = IceRow.ROWSTATE_UPDATED;
                APInvMscAfterGetRows();
                APInvMsc_Foreign_Link();
            }
        }

        private void refreshttAPInvSched(Erp.Tables.APInvSched APInvSched)
        {
            ttAPInvSched = new Erp.Tablesets.APInvSchedRow();
            CurrentFullTableset.APInvSched.Add(ttAPInvSched);
            BufferCopy.Copy(APInvSched, ref ttAPInvSched);
            ttAPInvSched.SysRowID = APInvSched.SysRowID;
            APInvSchedAfterGetRows();
        }

        private void refreshttAPInvTax()
        {
            ttAPInvTax = new Erp.Tablesets.APInvTaxRow();
            CurrentFullTableset.APInvTax.Add(ttAPInvTax);
            BufferCopy.Copy(APInvTax, ref ttAPInvTax);
            ttAPInvTax.SysRowID = APInvTax.SysRowID;
            APInvTaxAfterGetRows();
            APInvTax_Foreign_Link();
        }


        private void refreshttAPLnTax()
        {
            ttAPLnTax = new Erp.Tablesets.APLnTaxRow();
            CurrentFullTableset.APLnTax.Add(ttAPLnTax);
            BufferCopy.Copy(APLnTax, ref ttAPLnTax);
            ttAPLnTax.SysRowID = APLnTax.SysRowID;
            APLnTaxAfterGetRows();
            APLnTax_Foreign_Link();
        }
        private void refreshAPIHAPLnTax()
        {
            ttAPIHAPLnTax = new Erp.Tablesets.APIHAPLnTaxRow();
            CurrentFullTableset.APIHAPLnTax.Add(ttAPIHAPLnTax);
            BufferCopy.Copy(APLnTax, ref ttAPIHAPLnTax);
            ttAPIHAPLnTax.SysRowID = APLnTax.SysRowID;
            APIHAPLnTaxAfterGetRows();
        }

        private void refreshttAPInvLnMscTax(int vendorNum, string invoiceNum)
        {

            foreach (var apInvLnMscTax in (this.SelectAPInvLnMscTaxRefresh(Session.CompanyID, vendorNum, invoiceNum)))
            {
                ttAPInvLnMscTax = new Erp.Tablesets.APInvLnMscTaxRow();
                CurrentFullTableset.APInvLnMscTax.Add(ttAPInvLnMscTax);
                BufferCopy.Copy(apInvLnMscTax, ref ttAPInvLnMscTax);
                ttAPInvLnMscTax.SysRowID = apInvLnMscTax.SysRowID;
                APInvLnMscTaxAfterGetRows();
                APInvLnMscTax_Foreign_Link();
            }

        }

        private void refreshttAPInvHedMscTax(int vendorNum, string invoiceNum)
        {

            foreach (var APInvHedMscTax in (this.SelectAPInvHedMscTaxRefresh(Session.CompanyID, vendorNum, invoiceNum)))
            {
                ttAPInvHedMscTax = new Erp.Tablesets.APInvHedMscTaxRow();
                CurrentFullTableset.APInvHedMscTax.Add(ttAPInvHedMscTax);
                BufferCopy.Copy(APInvHedMscTax, ref ttAPInvHedMscTax);
                ttAPInvHedMscTax.SysRowID = APInvHedMscTax.SysRowID;
                APInvHedMscTaxAfterGetRows();
                APInvHedMscTax_Foreign_Link();
            }

        }

        private void refreshttPEAPInvTax(int vendorNum, string invoiceNum, string groupID)
        {
            foreach (var PEAPInvTax_iterator in (SelectPEAPInvTax(Session.CompanyID, vendorNum, invoiceNum)))
            {
                ttPEAPInvTax = new Erp.Tablesets.PEAPInvTaxRow();
                CurrentFullTableset.PEAPInvTax.Add(ttPEAPInvTax);
                BufferCopy.Copy(PEAPInvTax_iterator, ref ttPEAPInvTax);
                ttPEAPInvTax.SysRowID = PEAPInvTax_iterator.SysRowID;
                ttPEAPInvTax.GroupID = groupID;
            }
        }

        #endregion

        /// <summary>
        /// Method to call to selected uninvoiced lines.  This method will run through each
        /// APUninvoicedRcptLines where the SelectLine flag is true, move the record to the
        /// APSelectedRcptLines table and remove it from the APUninvoicedRcptLines table.  This
        /// method can also be called for the SelectAll functionality.  In that case all APUninvoicedRcptLines
        /// must have the SelectLine flag set to true before calling the method.
        /// </summary>
        /// <param name="ds"></param>
        /// <returns></returns>
        /// <param name="InVendorNum">The Vendor Number of the receipt the uninvoiced lines are assigned to.</param>
        /// <param name="InPurPoint">The PurPoint of the receipt the uninvoiced lines are assigned to.</param>
        /// <param name="InPONum">The PO Number of the receipt the uninvoiced lines are assigned to.</param>
        /// <param name="InPackSlip">The Pack Slip of the receipt the uninvoiced lines are assigned to.</param>
        /// <param name="InDropShip">The Drop Ship value.</param>
        /// <param name="InvoiceNum"> Current InvoiceNum</param>
        /// <param name="InGRNIClearing"> Current GRNIClearing flag</param>
        public void SelectUninvoicedRcptLines(ref APInvReceiptBillingTableset ds, int InVendorNum, string InPurPoint, int InPONum, string InPackSlip, bool InDropShip, string InvoiceNum, bool InGRNIClearing)
        {
            var emptyRecords = ds.APUninvoicedRcptLines.Where(l => l.SysRowID == Guid.Empty).ToList();
            if (emptyRecords.Count > 0)
            {
                foreach (var item in emptyRecords)
                {
                    ds.APUninvoicedRcptLines.Remove(item);
                }
            }
            Erp.Tablesets.APReceiptTotalsRow ttAPReceiptTotalsReceipts = ds.APReceiptTotals.Where(x => x.VendorNum == InVendorNum && x.Company.KeyEquals(Session.CompanyID) && x.InvoiceNum.KeyEquals(InvoiceNum) && x.RowMod != IceRow.ROWSTATE_UNCHANGED).FirstOrDefault();

            if (!InDropShip)
            {
                ttAPUninvoicedReceipts = (from ttAPUninvoicedReceipts_Row in ds.APUninvoicedReceipts
                                          where ttAPUninvoicedReceipts_Row.Company.KeyEquals(Session.CompanyID) &&
                                          ttAPUninvoicedReceipts_Row.VendorNum == InVendorNum &&
                                          StringExtensions.Compare(ttAPUninvoicedReceipts_Row.PurPoint, InPurPoint) == 0 &&
                                          ttAPUninvoicedReceipts_Row.PONum == InPONum &&
                                          StringExtensions.Compare(ttAPUninvoicedReceipts_Row.PackSlip, InPackSlip) == 0 &&
                                          ttAPUninvoicedReceipts_Row.DropShip == false
                                          select ttAPUninvoicedReceipts_Row).FirstOrDefault();
            }
            else
            {
                ttAPUninvoicedReceipts = (from ttAPUninvoicedReceipts_Row in ds.APUninvoicedReceipts
                                          where ttAPUninvoicedReceipts_Row.Company.KeyEquals(Session.CompanyID) &&
                                          ttAPUninvoicedReceipts_Row.VendorNum == InVendorNum &&
                                          StringExtensions.Compare(ttAPUninvoicedReceipts_Row.PurPoint, InPurPoint) == 0 &&
                                          ttAPUninvoicedReceipts_Row.PONum == InPONum &&
                                          StringExtensions.Compare(ttAPUninvoicedReceipts_Row.DropShipPackSlip, InPackSlip) == 0 &&
                                          ttAPUninvoicedReceipts_Row.DropShip == true
                                          select ttAPUninvoicedReceipts_Row).FirstOrDefault();
            }

            if (ttAPUninvoicedReceipts == null)
            {
                throw new BLException(Strings.InvalidUninvoicedReceipt, "APUninvoicedReceipts");
            }/* if not available ttAPUninvoicedReceipts */

            if (!InDropShip)
            {
                foreach (var ttAPUninvoicedRcptLines_iterator in (from ttAPUninvoicedRcptLines_Row in ds.APUninvoicedRcptLines
                                                                  where StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.Company, ttAPUninvoicedReceipts.Company) == 0
                                                                  && ttAPUninvoicedRcptLines_Row.VendorNum == ttAPUninvoicedReceipts.VendorNum
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PurPoint, ttAPUninvoicedReceipts.PurPoint) == 0
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PackSlip, ttAPUninvoicedReceipts.PackSlip) == 0
                                                                  && ttAPUninvoicedRcptLines_Row.SelectLine == true
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                                                                  && ttAPUninvoicedRcptLines_Row.DropShip == false
                                                                  select ttAPUninvoicedRcptLines_Row).ToList())
                {
                    ttAPUninvoicedRcptLines = ttAPUninvoicedRcptLines_iterator;

                    if (!(((from ttAPSelectedRcptLines_Row in ds.APSelectedRcptLines
                            where ttAPSelectedRcptLines_Row.SysRowID == ttAPUninvoicedRcptLines.SysRowID
                            select ttAPSelectedRcptLines_Row).Any())))
                    {

                        ttAPSelectedRcptLines = new Erp.Tablesets.APSelectedRcptLinesRow();
                        ds.APSelectedRcptLines.Add(ttAPSelectedRcptLines);
                        BufferCopy.Copy(ttAPUninvoicedRcptLines, ref ttAPSelectedRcptLines);
                        ttAPSelectedRcptLines.VendorQty = (ttAPUninvoicedRcptLines.SupplierUnInvcReceiptQty > 0) ? ttAPUninvoicedRcptLines.SupplierUnInvcReceiptQty : ttAPSelectedRcptLines.VendorQty;
                        ttAPSelectedRcptLines.InvoiceQty = (InGRNIClearing) ? 0 : ttAPSelectedRcptLines.VendorQty;
                        ttAPReceiptTotalsReceipts.DocSelectedTotal += ttAPUninvoicedRcptLines.DocLineAmount;
                        ttAPUninvoicedRcptLines.RowMod = "D";
                    }
                }
            }
            else
            {
                foreach (var ttAPUninvoicedRcptLines_iterator in (from ttAPUninvoicedRcptLines_Row in ds.APUninvoicedRcptLines
                                                                  where StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.Company, ttAPUninvoicedReceipts.Company) == 0
                                                                  && ttAPUninvoicedRcptLines_Row.VendorNum == ttAPUninvoicedReceipts.VendorNum
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PurPoint, ttAPUninvoicedReceipts.PurPoint) == 0
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.DropShipPackSlip, ttAPUninvoicedReceipts.DropShipPackSlip) == 0
                                                                  && ttAPUninvoicedRcptLines_Row.SelectLine == true
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                                                                  && ttAPUninvoicedRcptLines_Row.DropShip == true
                                                                  select ttAPUninvoicedRcptLines_Row).ToList())
                {
                    ttAPUninvoicedRcptLines = ttAPUninvoicedRcptLines_iterator;

                    if (!(((from ttAPSelectedRcptLines_Row in ds.APSelectedRcptLines
                            where ttAPSelectedRcptLines_Row.SysRowID == ttAPUninvoicedRcptLines.SysRowID
                            select ttAPSelectedRcptLines_Row).Any())))
                    {
                        ttAPSelectedRcptLines = new Erp.Tablesets.APSelectedRcptLinesRow();
                        ds.APSelectedRcptLines.Add(ttAPSelectedRcptLines);
                        BufferCopy.Copy(ttAPUninvoicedRcptLines, ref ttAPSelectedRcptLines);
                        ttAPSelectedRcptLines.VendorQty = (ttAPUninvoicedRcptLines.SupplierUnInvcReceiptQty > 0) ? ttAPUninvoicedRcptLines.SupplierUnInvcReceiptQty : ttAPSelectedRcptLines.VendorQty;
                        ttAPSelectedRcptLines.InvoiceQty = (InGRNIClearing) ? 0 : ttAPSelectedRcptLines.VendorQty;
                        ttAPReceiptTotalsReceipts.DocSelectedTotal += ttAPUninvoicedRcptLines.DocLineAmount;
                        ttAPUninvoicedRcptLines.RowMod = "D";
                    }
                }
            }

            /* Recalculate totals for the UnInvoicedReceipts record */
            ttAPReceiptTotalsReceipts.AvailableTotal = decimal.Zero;
            ttAPReceiptTotalsReceipts.DocAvailableTotal = decimal.Zero;
            ttAPReceiptTotalsReceipts.Rpt1AvailableTotal = decimal.Zero;
            ttAPReceiptTotalsReceipts.Rpt2AvailableTotal = decimal.Zero;
            ttAPReceiptTotalsReceipts.Rpt3AvailableTotal = decimal.Zero;

            if (!InDropShip)
            {
                foreach (var ttAPUninvoicedRcptLines_iterator in (from ttAPUninvoicedRcptLines_Row in ds.APUninvoicedRcptLines
                                                                  where StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.Company, ttAPUninvoicedReceipts.Company) == 0
                                                                  && ttAPUninvoicedRcptLines_Row.VendorNum == ttAPUninvoicedReceipts.VendorNum
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PurPoint, ttAPUninvoicedReceipts.PurPoint) == 0
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PackSlip, ttAPUninvoicedReceipts.PackSlip) == 0
                                                                  && (StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.RowMod, Ice.IceRow.ROWSTATE_UNCHANGED) != 0
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.RowMod, Ice.IceRow.ROWSTATE_DELETED) != 0)
                                                                  && ttAPUninvoicedRcptLines_Row.DropShip == false
                                                                  select ttAPUninvoicedRcptLines_Row))
                {
                    ttAPUninvoicedRcptLines = ttAPUninvoicedRcptLines_iterator;
                    ttAPReceiptTotalsReceipts.DocAvailableTotal += ttAPUninvoicedRcptLines.DocLineAmount;
                }
            }
            else
            {
                foreach (var ttAPUninvoicedRcptLines_iterator in (from ttAPUninvoicedRcptLines_Row in ds.APUninvoicedRcptLines
                                                                  where StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.Company, ttAPUninvoicedReceipts.Company) == 0
                                                                  && ttAPUninvoicedRcptLines_Row.VendorNum == ttAPUninvoicedReceipts.VendorNum
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.PurPoint, ttAPUninvoicedReceipts.PurPoint) == 0
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.DropShipPackSlip, ttAPUninvoicedReceipts.DropShipPackSlip) == 0
                                                                  && (StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.RowMod, Ice.IceRow.ROWSTATE_UNCHANGED) != 0
                                                                  && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.RowMod, Ice.IceRow.ROWSTATE_DELETED) != 0)
                                                                  && ttAPUninvoicedRcptLines_Row.DropShip == true
                                                                  select ttAPUninvoicedRcptLines_Row))
                {
                    ttAPUninvoicedRcptLines = ttAPUninvoicedRcptLines_iterator;
                    ttAPReceiptTotalsReceipts.DocAvailableTotal += ttAPUninvoicedRcptLines.DocLineAmount;
                }
            }

            var outAvailableTotal = ttAPReceiptTotalsReceipts.AvailableTotal;
            var outRpt1AvailableTotal = ttAPReceiptTotalsReceipts.Rpt1AvailableTotal;
            var outRpt2AvailableTotal = ttAPReceiptTotalsReceipts.Rpt2AvailableTotal;
            var outRpt3AvailableTotal = ttAPReceiptTotalsReceipts.Rpt3AvailableTotal;
            CalcBaseAmt(ttAPReceiptTotalsReceipts.DocAvailableTotal, ttAPUninvoicedReceipts.VendorNum, ttAPUninvoicedReceipts.InvoiceNum, ttAPUninvoicedReceipts, "AvailableTotal", out outAvailableTotal, out outRpt1AvailableTotal, out outRpt2AvailableTotal, out outRpt3AvailableTotal);
            ttAPReceiptTotalsReceipts.AvailableTotal = outAvailableTotal;
            ttAPReceiptTotalsReceipts.Rpt1AvailableTotal = outRpt1AvailableTotal;
            ttAPReceiptTotalsReceipts.Rpt2AvailableTotal = outRpt2AvailableTotal;
            ttAPReceiptTotalsReceipts.Rpt3AvailableTotal = outRpt3AvailableTotal;

            var outSelectedTotal = ttAPReceiptTotalsReceipts.SelectedTotal;
            var outRpt1SelectedTotal = ttAPReceiptTotalsReceipts.Rpt1SelectedTotal;
            var outRpt2SelectedTotal = ttAPReceiptTotalsReceipts.Rpt2SelectedTotal;
            var outRpt3SelectedTotal = ttAPReceiptTotalsReceipts.Rpt3SelectedTotal;
            CalcBaseAmt(ttAPReceiptTotalsReceipts.DocSelectedTotal, ttAPUninvoicedReceipts.VendorNum, ttAPUninvoicedReceipts.InvoiceNum, ttAPUninvoicedReceipts, "SelectedTotal", out outSelectedTotal, out outRpt1SelectedTotal, out outRpt2SelectedTotal, out outRpt3SelectedTotal);
            ttAPReceiptTotalsReceipts.SelectedTotal = outSelectedTotal;
            ttAPReceiptTotalsReceipts.Rpt1SelectedTotal = outRpt1SelectedTotal;
            ttAPReceiptTotalsReceipts.Rpt2SelectedTotal = outRpt2SelectedTotal;
            ttAPReceiptTotalsReceipts.Rpt3SelectedTotal = outRpt3SelectedTotal;
        }

        /// <summary>
        /// This method sets the XRef fields for a supplier part
        /// </summary>
        private void SetARInvDtlXRef()
        {
            foreach (var ttSupplierXRef in CurrentFullTableset.SupplierXRef)
            {
                var RcvDtlXRefQuery = DBExpressionCompiler.Compile(RcvDtlXRefExpression);
                RcvDtlXRef = RcvDtlXRefQuery(Db, Session.CompanyID, ttSupplierXRef.RcvXRefNum);
                if (RcvDtlXRef != null)
                {
                    if (ttSupplierXRef.Inspected)
                    {
                        RcvDtlXRef.Inspected = true;
                    }
                    else
                    {
                        RcvDtlXRef.Inspected = false;
                    }
                }
            }
        }

        private void setBOEDtlFields()
        {
            if (isPeruLocalization)
            {
                //if there are any withholding taxes on linked invoice (on header or on details)
                if (!String.IsNullOrEmpty(ttAPInvDtl.InvoiceRef) &&
                    (this.ExistsAPInvHedWthTax(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceRef, 1, 1, 2) ||
                    (!ttAPInvDtl.EnableScrWithholdAmt &&
                    this.ExistsAPInvDtlWthTax(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceRef, 1, 1, 2))))
                {
                    ttAPInvDtl.EnableScrWithholdAmt = true;
                }
                else
                {
                    ttAPInvDtl.EnableScrWithholdAmt = false;
                    ttAPInvDtl.ScrWithholdAmt = 0;
                    ttAPInvDtl.DocScrWithholdAmt = 0;
                    ttAPInvDtl.Rpt1ScrWithholdAmt = 0;
                    ttAPInvDtl.Rpt2ScrWithholdAmt = 0;
                    ttAPInvDtl.Rpt3ScrWithholdAmt = 0;
                }

                PEAPInvHedPartialRow apInvHed = FindFirstPEAPInvHedPartial(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceRef);
                if (apInvHed != null)
                {
                    ttAPInvDtl.DocPEDetAmt = apInvHed.DocPEDetTaxAmt;
                    var outPEDetAmt3 = ttAPInvDtl.PEDetAmt;
                    var outRpt1PEDetAmt3 = ttAPInvDtl.Rpt1PEDetAmt;
                    var outRpt2PEDetAmt3 = ttAPInvDtl.Rpt2PEDetAmt;
                    var outRpt3PEDetAmt3 = ttAPInvDtl.Rpt3PEDetAmt;
                    CalcBaseAmt(ttAPInvDtl.DocPEDetAmt, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl, "PEDetAmt", out outPEDetAmt3, out outRpt1PEDetAmt3, out outRpt2PEDetAmt3, out outRpt3PEDetAmt3);
                    ttAPInvDtl.PEDetAmt = outPEDetAmt3;
                    ttAPInvDtl.Rpt1PEDetAmt = outRpt1PEDetAmt3;
                    ttAPInvDtl.Rpt2PEDetAmt = outRpt2PEDetAmt3;
                    ttAPInvDtl.Rpt3PEDetAmt = outRpt3PEDetAmt3;

                    ttAPInvDtl.ScrInvoiceBal = apInvHed.UnpostedBal;
                    ttAPInvDtl.DocScrInvoiceBal = apInvHed.DocUnpostedBal;
                    ttAPInvDtl.Rpt1ScrInvoiceBal = apInvHed.Rpt1UnpostedBal;
                    ttAPInvDtl.Rpt2ScrInvoiceBal = apInvHed.Rpt2UnpostedBal;
                    ttAPInvDtl.Rpt3ScrInvoiceBal = apInvHed.Rpt3UnpostedBal;
                }
            }
        }

        /// <summary />
        private string setBankName(int vendorNum, string bankID)
        {
            return FindFirstVendBankName(Session.CompanyID, bankID, vendorNum);
        }

        private void SetDatesDiscount(bool forceUpdateDueDate = false, bool onlyUpdateDiscount = false)
        {
            decimal tmpAmt = decimal.Zero;
            decimal tmpDocAmt = decimal.Zero;
            decimal tmpRpt1Amt = decimal.Zero;
            decimal tmpRpt2Amt = decimal.Zero;
            decimal tmpRpt3Amt = decimal.Zero;
            decimal PTDDiscountPercent = decimal.Zero;

            PurTerms = PurTerms.FindFirstByPrimaryKey(Db, ttAPInvHed.Company, ttAPInvHed.TermsCode);


            var PurTermDQuery3 = DBExpressionCompiler.Compile(PurTermDExpression3);
            PurTermD = PurTermDQuery3(Db, ttAPInvHed.Company, ttAPInvHed.TermsCode);

            PTDDiscountPercent = ((PurTermD != null) ? PurTermD.DiscountPercent : 0);

            if ((ttAPInvHed.DebitMemo == true && isDiscountforDebitM == false) || (PurTerms == null))
            {

                if (isVNLocalization && (PurTerms != null && PurTerms.TermsType.KeyEquals("L")))
                {
                    if (ttAPInvHed.DueDate == null || ttAPInvHed.DueDate < ttAPInvHed.InvoiceDate)
                    {
                        var outDueDate = ttAPInvHed.InvoiceDate;
                        LibCalcInvDueDate.CalcDueDate("D", PurTerms.NumberOfDays, PurTerms.MinimumDays, PurTerms.DueOnDay, PurTerms.NumberOfMonths, ref outDueDate);
                        ttAPInvHed.DueDate = (outDueDate != null ? outDueDate : ttAPInvHed.DueDate);
                    }
                }
                else
                {
                    if (!onlyUpdateDiscount)
                        ttAPInvHed.DueDate = ttAPInvHed.InvoiceDate;
                }

                ttAPInvHed.DiscountDate = (PurTermD == null) ? null : ttAPInvHed.InvoiceDate;
                ttAPInvHed.DiscountAmt = 0;
                ttAPInvHed.DocDiscountAmt = 0;
                ttAPInvHed.Rpt1DiscountAmt = 0;
                ttAPInvHed.Rpt2DiscountAmt = 0;
                ttAPInvHed.Rpt3DiscountAmt = 0;
                ttAPInvHed.ScrDiscountAmt = 0;
                ttAPInvHed.ScrDocDiscountAmt = 0;
            }
            else
            {
                var outDueDate = ttAPInvHed.DueDate;
                if (isVNLocalization && (PurTerms != null && PurTerms.TermsType.KeyEquals("L")))
                {
                    if (ttAPInvHed.DueDate == null || ttAPInvHed.DueDate < ttAPInvHed.InvoiceDate)
                    {
                        outDueDate = ttAPInvHed.InvoiceDate;
                        LibCalcInvDueDate.CalcDueDate("D", PurTerms.NumberOfDays, PurTerms.MinimumDays, PurTerms.DueOnDay, PurTerms.NumberOfMonths, ref outDueDate);
                    }
                }
                else
                {
                    if (!onlyUpdateDiscount)
                        ttAPInvHed.DueDate = ttAPInvHed.InvoiceDate;

                    outDueDate = ttAPInvHed.DueDate;
                    if (PurTerms != null)
                    {
                        LibCalcInvDueDate.CalcDueDate(PurTerms.TermsType, PurTerms.NumberOfDays, PurTerms.MinimumDays, PurTerms.DueOnDay, PurTerms.NumberOfMonths, ref outDueDate);
                    }
                }
                if ((!ttAPInvHed.EnableDueDate || forceUpdateDueDate) && !onlyUpdateDiscount)
                {
                    ttAPInvHed.DueDate = outDueDate;
                }
                if (PurTermD != null)
                {
                    ttAPInvHed.DiscountDate = ttAPInvHed.InvoiceDate;
                    var outDiscountDate = ttAPInvHed.DiscountDate;

                    if (PurTerms != null)
                    {
                        LibCalcInvDueDate.CalcDueDate(PurTerms.DiscountType, (Int32)Math.Round(PurTermD.NumberOfDays, MidpointRounding.AwayFromZero), PurTermD.MinimumDays, PurTermD.DueOnDay, (Int32)Math.Round(PurTermD.NumberOfMonths, MidpointRounding.AwayFromZero), ref outDiscountDate);
                    }

                    ttAPInvHed.DiscountDate = outDiscountDate;
                }
                if (ttAPInvHed.FixedAmt == false)
                {
                    /* BACKOFF INVOICE HEAD MISC CHARGES */


                    var APInvMscQuery22 = DBExpressionCompiler.Compile(APInvMscExpression22);
                    foreach (var APInvMsc_iterator in (APInvMscQuery22(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum)))
                    {
                        var JoinFieldsResult = APInvMsc_iterator;

                        var purMiscResultQuery = DBExpressionCompiler.Compile(PurMiscExpression13);
                        var purMiscResult = purMiscResultQuery(Db, Session.CompanyID, JoinFieldsResult.MiscCode);
                        bool takeDiscount = (purMiscResult != null) ? purMiscResult.TakeDiscount : false;
                        // SCR 97332 Skip if no amount or Discount Applies (Header and Detail) 
                        if (JoinFieldsResult.MiscAmt == 0 || takeDiscount)
                        {
                            continue;
                        }

                        tmpAmt += JoinFieldsResult.MiscAmt;
                        tmpDocAmt += JoinFieldsResult.DocMiscAmt;
                        tmpRpt1Amt += JoinFieldsResult.Rpt1MiscAmt;
                        tmpRpt2Amt += JoinFieldsResult.Rpt2MiscAmt;
                        tmpRpt3Amt += JoinFieldsResult.Rpt3MiscAmt;
                    }/* for each APInvMsc */

                    /* determine if taxes should be removed from invoice total for discount */
                    var APInvTaxQuery13 = DBExpressionCompiler.Compile(APInvTaxExpression13);
                    foreach (var APInvTax_iterator in (APInvTaxQuery13(Db, ttAPInvHed.Company, ttAPInvHed.InvoiceNum, 0, ttAPInvHed.VendorNum)))
                    {
                        APInvTax = APInvTax_iterator;

                        var SalesTaxQuery11 = DBExpressionCompiler.Compile(SalesTaxExpression11);
                        if ((SalesTaxQuery11(Db, ttAPInvHed.Company, APInvTax.TaxCode, 2, 3)))
                        {
                            tmpAmt += APInvTax.TaxAmt + APInvTax.TaxAmtVar;
                            tmpDocAmt += APInvTax.DocTaxAmt + APInvTax.DocTaxAmtVar;
                            tmpRpt1Amt += APInvTax.Rpt1TaxAmt + APInvTax.Rpt1TaxAmtVar;
                            tmpRpt2Amt += APInvTax.Rpt2TaxAmt + APInvTax.Rpt2TaxAmtVar;
                            tmpRpt3Amt += APInvTax.Rpt3TaxAmt + APInvTax.Rpt3TaxAmtVar;
                            ttAPInvHed.UpdateTax = true;
                        }
                    }
                    if (ttAPInvHed.DebitMemo == true && isDiscountforDebitM == true)
                    {
                        ttAPInvHed.ScrDiscountAmt = LibRoundAmountEF.RoundDecimalsTT(((ttAPInvHed.InvoiceAmt - tmpAmt)) * (PTDDiscountPercent / 100), ttAPInvHed, "ScrDiscountAmt");
                        ttAPInvHed.ScrDocDiscountAmt = LibRoundAmountEF.RoundDecimalsTT(((ttAPInvHed.DocInvoiceAmt - tmpDocAmt)) * (PTDDiscountPercent / 100), ttAPInvHed, "ScrDocDiscountAmt");
                        ttAPInvHed.Rpt1ScrDiscountAmt = LibRoundAmountEF.RoundDecimalsTT(((ttAPInvHed.Rpt1InvoiceAmt - tmpRpt1Amt)) * (PTDDiscountPercent / 100), ttAPInvHed, "Rpt1ScrDiscountAmt");
                        ttAPInvHed.Rpt2ScrDiscountAmt = LibRoundAmountEF.RoundDecimalsTT(((ttAPInvHed.Rpt2InvoiceAmt - tmpRpt2Amt)) * (PTDDiscountPercent / 100), ttAPInvHed, "Rpt2ScrDiscountAmt");
                        ttAPInvHed.Rpt3ScrDiscountAmt = LibRoundAmountEF.RoundDecimalsTT(((ttAPInvHed.Rpt3InvoiceAmt - tmpRpt3Amt)) * (PTDDiscountPercent / 100), ttAPInvHed, "Rpt3ScrDiscountAmt");
                    }
                    else
                    {
                        ttAPInvHed.ScrDiscountAmt = LibRoundAmountEF.RoundDecimalsTT(Math.Max((ttAPInvHed.InvoiceAmt - tmpAmt), 0) * (PTDDiscountPercent / 100), ttAPInvHed, "ScrDiscountAmt");
                        ttAPInvHed.ScrDocDiscountAmt = LibRoundAmountEF.RoundDecimalsTT(Math.Max((ttAPInvHed.DocInvoiceAmt - tmpDocAmt), 0) * (PTDDiscountPercent / 100), ttAPInvHed, "ScrDocDiscountAmt");
                        ttAPInvHed.Rpt1ScrDiscountAmt = LibRoundAmountEF.RoundDecimalsTT(Math.Max((ttAPInvHed.Rpt1InvoiceAmt - tmpRpt1Amt), 0) * (PTDDiscountPercent / 100), ttAPInvHed, "Rpt1ScrDiscountAmt");
                        ttAPInvHed.Rpt2ScrDiscountAmt = LibRoundAmountEF.RoundDecimalsTT(Math.Max((ttAPInvHed.Rpt2InvoiceAmt - tmpRpt2Amt), 0) * (PTDDiscountPercent / 100), ttAPInvHed, "Rpt2ScrDiscountAmt");
                        ttAPInvHed.Rpt3ScrDiscountAmt = LibRoundAmountEF.RoundDecimalsTT(Math.Max((ttAPInvHed.Rpt3InvoiceAmt - tmpRpt3Amt), 0) * (PTDDiscountPercent / 100), ttAPInvHed, "Rpt3ScrDiscountAmt");
                    }

                    // scr 94770 on 3-29-2012 added the check for APInvHed = null and the updates to the APInvHed fields instead of the ttAPInvHed.  
                    //  The only time APInvHed is not null is when this method is called from SetReadyToCalc.  It is not clear to me why this logic was added in this method and not in 
                    // setReadyToCalc.  I am leaving the code here for now to keep the E905 and E10 code lines in sync as much as possible.  This should be reviewed once APInvoice has
                    // been completely uplifted to see if this logic should be moved to SetReadyToCalc.
                    if (APInvHed != null)
                    {
                        APInvHed.DiscountAmt = ttAPInvHed.ScrDiscountAmt;
                        APInvHed.DocDiscountAmt = ttAPInvHed.ScrDocDiscountAmt;
                        APInvHed.Rpt1DiscountAmt = ttAPInvHed.Rpt1ScrDiscountAmt;
                        APInvHed.Rpt2DiscountAmt = ttAPInvHed.Rpt2ScrDiscountAmt;
                        APInvHed.Rpt3DiscountAmt = ttAPInvHed.Rpt3ScrDiscountAmt;

                        Db.Validate(APInvHed);
                    }
                    else
                    {
                        ttAPInvHed.DiscountAmt = ttAPInvHed.ScrDiscountAmt;
                        ttAPInvHed.DocDiscountAmt = ttAPInvHed.ScrDocDiscountAmt;
                        ttAPInvHed.Rpt1DiscountAmt = ttAPInvHed.Rpt1ScrDiscountAmt;
                        ttAPInvHed.Rpt2DiscountAmt = ttAPInvHed.Rpt2ScrDiscountAmt;
                        ttAPInvHed.Rpt3DiscountAmt = ttAPInvHed.Rpt3ScrDiscountAmt;
                    }
                    vExDate = (vUseDate == 1) ? ttAPInvHed.InvoiceDate : ttAPInvHed.ApplyDate;

                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), ttAPInvHed.InvoiceNum, "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, ttAPInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHed, false, "DiscountAmt", pCurrList, "ttAPInvHed", ttAPInvHed.CurrencyCode, ttChainRows);
                }/* if not ttAPInvHed.FixedAmt */

                /* Set Discount Date and Percent Lists */
                ttAPInvHed.PayDiscDays = "";
                ttAPInvHed.PayDiscPer = "";


                var PurTermDQuery4 = DBExpressionCompiler.Compile(PurTermDExpression4);
                foreach (var PurTermD_iterator in (PurTermDQuery4(Db, ttAPInvHed.Company, ttAPInvHed.TermsCode)))
                {
                    PurTermD = PurTermD_iterator;
                    var calcDiscountDate = ttAPInvHed.InvoiceDate;
                    if (PurTerms != null)
                    {
                        LibCalcInvDueDate.CalcDueDate(PurTerms.DiscountType, (Int32)Math.Round(PurTermD.NumberOfDays, MidpointRounding.AwayFromZero), PurTermD.MinimumDays, PurTermD.DueOnDay, (Int32)Math.Round(PurTermD.NumberOfMonths, MidpointRounding.AwayFromZero), ref calcDiscountDate);
                    }
                    ttAPInvHed.PayDiscPer = ((String.IsNullOrEmpty(ttAPInvHed.PayDiscPer)) ? Compatibility.Convert.ToString(PurTermD.DiscountPercent) : ttAPInvHed.PayDiscPer + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(PurTermD.DiscountPercent));
                    ttAPInvHed.PayDiscDays = ((String.IsNullOrEmpty(ttAPInvHed.PayDiscDays)) ? Compatibility.Convert.ToString(calcDiscountDate) : ttAPInvHed.PayDiscDays + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(calcDiscountDate));
                }
            }
            SetEnableDueDate();
        }

        private void setEnableCPay()
        {
            ttAPInvHed.EnableCPay = false;

            apSystPartial = FindPartialAPSyst(ttAPInvHed.Company);
            if (apSystPartial != null)
            {
                if (!String.IsNullOrEmpty(apSystPartial.CPayCompany) &&
                    StringExtensions.Compare(apSystPartial.CPayCompany, ttAPInvHed.Company) != 0 &&
                    Hasher.VerifyHash(PY_KEY + apSystPartial.CPayCompany.ToUpperInvariant(), apSystPartial.CPayParent))
                {
                    ttAPInvHed.EnableCPay = true;
                }
            }

            ttAPInvHed.CPayOpenPayable = (ttAPInvHed.CPayInvoiceBal != 0);
            /* to indicate whether the CPay invoice has already been received/created *
             * at corporate, check if GlbInvoiceNum <> 0 CPay = yes                   */
            if (ttAPInvHed.CPay == true && !String.IsNullOrEmpty(ttAPInvHed.GlbInvoiceNum))
            {
                ttAPInvHed.CPayIMReceived = true;
            }
            else
            {
                ttAPInvHed.CPayIMReceived = false;
            }
        }

        private void setExchangeRate()
        {
            DateTime? taxdate = null;
            decimal tmpTax = decimal.Zero;
            decimal doctmpTax = decimal.Zero;
            decimal rpt1tmpTax = decimal.Zero;
            decimal rpt2tmpTax = decimal.Zero;
            decimal rpt3tmpTax = decimal.Zero;
            decimal outExchangeRate = ttAPInvHed.ExchangeRate;
            bool rateFound = false;
            string changedFromCurr = string.Empty;
            string changedTargetCurr = string.Empty;
            int changedRule = 0;
            bool rateChanged = false;
            decimal priorRate = decimal.Zero;
            bool poLockRate = false;
            Erp.Tables.APInvHed refAPInvHed = null;
            changedFromCurr = "";
            changedTargetCurr = "";
            rateFound = false;
            Currency ttCurrency = null;
            ttCurrency = FindFirstBaseCurrency(Session.CompanyID, true);
            if (ttCurrency == null)
            {
                throw new BLException(Strings.BaseCurrency);
            }
            if (XbSyst == null)
            {
                XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            }
            /* delete existing chain */
            foreach (var CurrExChain_iterator in SelectCurrExChainWithUpdLock(ttAPInvHed.Company, "APInvHed", Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum)))
            {
                CurrExChain = CurrExChain_iterator;
                Db.CurrExChain.Delete(CurrExChain);
                Db.Validate(CurrExChain);
            }

            if ((ttAPInvHed.REFPONum > 0 && ttAPInvHed.LockRate))
            {
                POHeader = FindFirstPOHeader(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.REFPONum);
                if (POHeader != null)
                {
                    if (StringExtensions.Compare(POHeader.CurrencyCode, ttAPInvHed.CurrencyCode) == 0
                    && StringExtensions.Compare(POHeader.RateGrpCode, ttAPInvHed.RateGrpCode) == 0
                    && POHeader.ExchangeRate == ttAPInvHed.ExchangeRate)
                    {
                        poLockRate = true;
                        CalcCurrencyRatesEF.CalcCurrencyRates(0, 0, ttAPInvHed.CurrencyCode, ttCurrency.CurrencyCode, ttAPInvHed.RateGrpCode, vExDate, true, false, ref outExchangeRate, out ttChainRows, out pCurrList);

                        foreach (var libconvertamtefttChainRow in (from ttChain_Row in ttChainRows
                                                                   select ttChain_Row))
                        {
                            var ttChainRow = libconvertamtefttChainRow;
                            CurrExChain = new Erp.Tables.CurrExChain();
                            Db.CurrExChain.Insert(CurrExChain);
                            BufferCopy.CopyExceptFor(ttChainRow, CurrExChain, CurrExChain.ColumnNames.TableName, CurrExChain.ColumnNames.Key1, CurrExChain.ColumnNames.Key2, CurrExChain.ColumnNames.Key3, CurrExChain.ColumnNames.Key4, CurrExChain.ColumnNames.SysRowID, CurrExChain.ColumnNames.SysRevID);
                            CurrExChain.TableName = "APInvHed";
                            CurrExChain.Key1 = Compatibility.Convert.ToString(ttAPInvHed.VendorNum);
                            CurrExChain.Key2 = Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);
                            Db.Validate(CurrExChain);
                        }
                    }
                }
            }

            if (vUseDate == 1)
            {
                vExDate = ttAPInvHed.InvoiceDate;
            }
            else
            {
                vExDate = ttAPInvHed.ApplyDate;
            }

            if (!poLockRate)
            {
                if (ttAPInvHed.DebitMemo && !String.IsNullOrEmpty(ttAPInvHed.InvoiceRef) && !ttAPInvHed.InvoiceRef.KeyEquals(ttAPInvHed.InvoiceNum))
                {
                    refAPInvHed = FindFirstAPInvHed(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceRef);
                    if (refAPInvHed != null)
                    {
                        if (!apSystPartial.CopyExcRateDM)
                        {
                            if (!ttAPInvHed.LockRate)
                            {
                                this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);
                            }
                            else
                            {
                                CalcCurrencyRatesEF.CalcCurrencyRates(0, 0, ttAPInvHed.CurrencyCode, ttCurrency.CurrencyCode, ttAPInvHed.RateGrpCode, vExDate, true, false, ref outExchangeRate, out ttChainRows, out pCurrList);
                            }
                        }
                        else
                        {
                            if (ttAPInvHed.LockRate || !ttAPInvHed.CurrencyCode.KeyEquals(refAPInvHed.CurrencyCode) || !ttAPInvHed.RateGrpCode.KeyEquals(refAPInvHed.RateGrpCode))
                            {
                                CalcCurrencyRatesEF.CalcCurrencyRates(0, 0, ttAPInvHed.CurrencyCode, ttCurrency.CurrencyCode, ttAPInvHed.RateGrpCode, vExDate, true, false, ref outExchangeRate, out ttChainRows, out pCurrList);
                            }
                            else
                            {
                                this.LibGetCurrencyRatesEF.FindCurrencyRates("APInvHed", Compatibility.Convert.ToString(refAPInvHed.VendorNum), Compatibility.Convert.ToString(refAPInvHed.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
                            }
                        }
                    }
                    else
                    {
                        this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);
                    }
                }
                else
                {
                    if (ttAPInvHed.LockRate)
                    {
                        CalcCurrencyRatesEF.CalcCurrencyRates(0, 0, ttAPInvHed.CurrencyCode, ttCurrency.CurrencyCode, ttAPInvHed.RateGrpCode, vExDate, true, false, ref outExchangeRate, out ttChainRows, out pCurrList);
                    }
                    else
                    {
                        this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "APInvHed", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.RateGrpCode, false, out ttChainRows, out pCurrList, out pRateList);
                        ttAPInvHed.ExchangeRate = decimal.Parse(pRateList.Entry(0, Constants.ListSeparator), System.Globalization.CultureInfo.InvariantCulture);
                    }
                }


                foreach (var libconvertamtefttChainRow in (from ttChain_Row in ttChainRows
                                                           select ttChain_Row))
                {
                    var ttChainRow = libconvertamtefttChainRow;
                    CurrExChain = new Erp.Tables.CurrExChain();
                    Db.CurrExChain.Insert(CurrExChain);
                    CurrExChain.TableName = "APInvHed";
                    CurrExChain.Company = ttAPInvHed.Company;
                    CurrExChain.Key1 = Compatibility.Convert.ToString(ttAPInvHed.VendorNum);
                    CurrExChain.Key2 = Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);
                    BufferCopy.CopyExceptFor(ttChainRow, CurrExChain, CurrExChain.ColumnNames.TableName, CurrExChain.ColumnNames.Company, CurrExChain.ColumnNames.Key1, CurrExChain.ColumnNames.Key2, CurrExChain.ColumnNames.SysRevID, CurrExChain.ColumnNames.SysRowID);
                    Db.Validate(CurrExChain);
                }
            }
            rateFound = false;
            if (ttAPInvHed.UseTaxRate)
            {
                changedFromCurr = "";
                changedTargetCurr = "";
                rateFound = false;
                rateChanged = false;
                taxdate = ((ttAPInvHed.TaxRateDate != null) ? ttAPInvHed.TaxRateDate : ((ttAPInvHed.TaxPoint != null) ? ttAPInvHed.TaxPoint : ((vUseDate == 1) ? ttAPInvHed.InvoiceDate : ttAPInvHed.ApplyDate)));
                this.LibGetCurrencyRatesEF.BuildCurrencyRates(taxdate, "APInvHed-Tax", "", "", "", "", "", "", "", "", ttAPInvHed.CurrencyCode, ttAPInvHed.TaxRateGrpCode, false, out tmpTaxChainRows, out taxCurrList, out taxRateList);



                foreach (var _tmpTaxChain in (from tmpTaxChain_Row in tmpTaxChainRows
                                              select tmpTaxChain_Row))
                {
                    var tmpTaxChainRow = _tmpTaxChain;
                    CurrExChain = new Erp.Tables.CurrExChain();
                    Db.CurrExChain.Insert(CurrExChain);
                    CurrExChain.TableName = "APInvHed-Tax";
                    CurrExChain.Company = ttAPInvHed.Company;
                    CurrExChain.Key1 = Compatibility.Convert.ToString(ttAPInvHed.VendorNum);
                    CurrExChain.Key2 = Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);
                    BufferCopy.CopyExceptFor(tmpTaxChainRow, CurrExChain, CurrExChain.ColumnNames.TableName, CurrExChain.ColumnNames.Company, CurrExChain.ColumnNames.Key1, CurrExChain.ColumnNames.Key2, CurrExChain.ColumnNames.SysRevID, CurrExChain.ColumnNames.SysRowID);
                    if (CurrExChain.DisplayStep && CurrExChain.TargetCurrCode.KeyEquals(taxCurrList.Entry(0, Ice.Constants.LIST_DELIM)))
                    {
                        rateFound = true;
                        priorRate = tmpTaxChainRow.ExchangeRate;
                        if (priorRate != ttAPInvHed.TaxExchangeRate)
                        {
                            rateChanged = true;
                        }

                        CurrExChain.ExchangeRate = ttAPInvHed.TaxExchangeRate;
                        tmpTaxChainRow.ExchangeRate = ttAPInvHed.TaxExchangeRate;
                        taxRateList = taxRateList.Entry(Compatibility.Convert.ToString(ttAPInvHed.TaxExchangeRate), 0, Ice.Constants.LIST_DELIM);
                        changedFromCurr = CurrExChain.FromCurrCode;
                        changedTargetCurr = CurrExChain.TargetCurrCode;
                        changedRule = CurrExChain.RuleCode;
                    }
                    Db.Validate(CurrExChain);
                }
                if ((rateFound && rateChanged && StringExtensions.Compare(XbSyst.RateLockType, "C") == 0))
                {


                    foreach (var tmpTaxChain_iterator in (from tmpTaxChain_Row in tmpTaxChainRows
                                                          where tmpTaxChain_Row.FromCurrCode.KeyEquals(changedFromCurr) &&
                                                          tmpTaxChain_Row.ToCurrCode.KeyEquals(changedTargetCurr)
                                                          select tmpTaxChain_Row))
                    {
                        var tmpTaxChainRow = tmpTaxChain_iterator;


                        var CurrConvRuleQuery3 = DBExpressionCompiler.Compile(CurrConvRuleExpression3);
                        CurrConvRule = CurrConvRuleQuery3(Db, Session.CompanyID, ttAPInvHed.TaxRateGrpCode, tmpTaxChainRow.TargetCurrCode, changedFromCurr);
                        if (CurrConvRule != null)
                        {
                            if (CurrConvRule.DisplayMode == 0)
                            {
                                if ((changedRule == tmpTaxChainRow.RuleCode && priorRate != 0))
                                {
                                    tmpTaxChainRow.ExchangeRate = tmpTaxChainRow.ExchangeRate / priorRate * ttAPInvHed.TaxExchangeRate;
                                }
                                else if (ttAPInvHed.TaxExchangeRate != 0)
                                {
                                    tmpTaxChainRow.ExchangeRate = tmpTaxChainRow.ExchangeRate / ttAPInvHed.TaxExchangeRate * priorRate;
                                }
                            }
                            else
                            {
                                if (changedRule == tmpTaxChainRow.RuleCode)
                                {
                                    tmpTaxChainRow.ExchangeRate = ttAPInvHed.TaxExchangeRate;
                                }
                                else if (ttAPInvHed.TaxExchangeRate != 0)
                                {
                                    tmpTaxChainRow.ExchangeRate = 1 / ttAPInvHed.TaxExchangeRate;
                                }
                            }
                        }
                    }


                    var CurrExChainQuery6 = DBExpressionCompiler.Compile(CurrExChainExpression6);
                    foreach (var CurrExChain_iterator in (CurrExChainQuery6(Db, "APInvHed-Tax", ttAPInvHed.Company, Compatibility.Convert.ToString(ttAPInvHed.VendorNum), Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum), changedFromCurr, changedTargetCurr)))
                    {
                        CurrExChain = CurrExChain_iterator;


                        var CurrConvRuleQuery2_9 = DBExpressionCompiler.Compile(CurrConvRuleExpression2);
                        CurrConvRule = CurrConvRuleQuery2_9(Db, Session.CompanyID, ttAPInvHed.RateGrpCode, CurrExChain.TargetCurrCode, changedFromCurr);
                        if (CurrConvRule != null)
                        {
                            if (CurrConvRule.DisplayMode == 0)
                            {
                                if ((changedRule == CurrExChain.RuleCode && priorRate != 0))
                                {
                                    CurrExChain.ExchangeRate = CurrExChain.ExchangeRate / priorRate * ttAPInvHed.TaxExchangeRate;
                                }
                                else if (ttAPInvHed.TaxExchangeRate != 0)
                                {
                                    CurrExChain.ExchangeRate = CurrExChain.ExchangeRate / ttAPInvHed.TaxExchangeRate * priorRate;
                                }
                            }
                            else
                            {
                                if (changedRule == CurrExChain.RuleCode)
                                {
                                    CurrExChain.ExchangeRate = ttAPInvHed.TaxExchangeRate;
                                }
                                else if (ttAPInvHed.TaxExchangeRate != 0)
                                {
                                    CurrExChain.ExchangeRate = 1 / ttAPInvHed.TaxExchangeRate;
                                }
                            }
                            Db.Validate(CurrExChain);
                        }
                    }
                }
            } /* Use Tax Rate */

            /* if existing record and only exchange rate changed
               update document amounts, trigger will take care of other cases */
            if (BIttAPInvHed != null &&
                ((StringExtensions.Compare(BIttAPInvHed.RateGrpCode, ttAPInvHed.RateGrpCode) == 0 &&
                    StringExtensions.Compare(BIttAPInvHed.CurrencyCode, ttAPInvHed.CurrencyCode) == 0 &&
                    BIttAPInvHed.ExchangeRate != ttAPInvHed.ExchangeRate) ||
                (ttAPInvHed.UseTaxRate &&
                    StringExtensions.Compare(BIttAPInvHed.TaxRateGrpCode, ttAPInvHed.TaxRateGrpCode) == 0 &&
                    BIttAPInvHed.TaxExchangeRate != ttAPInvHed.TaxExchangeRate)))
            {
                if (BIttAPInvHed.ExchangeRate != ttAPInvHed.ExchangeRate)
                {
                    foreach (var APInvDtl_iterator in (SelectAPInvDtlWithUpdLock(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                    {
                        APInvDtl = APInvDtl_iterator;
                        APInvDtl.AdvancePayAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvDtl.DocAdvancePayAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", "AdvancePayAmt");
                        APInvDtl.ExtCost = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvDtl.DocExtCost, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", "ExtCost");
                        APInvDtl.LineDiscAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvDtl.DocLineDiscAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", "LineDiscAmt");
                        APInvDtl.TotalMiscChrg = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvDtl.DocTotalMiscChrg, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", "TotalMiscChrg");
                        APInvDtl.UnitCost = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvDtl.DocUnitCost, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvDtl", "UnitCost");
                        pFieldList = "AdvancePayAmt" + Ice.Constants.LIST_DELIM + "ExtCost" + Ice.Constants.LIST_DELIM + "LineDiscAmt" + Ice.Constants.LIST_DELIM + "TotalMiscChrg" + Ice.Constants.LIST_DELIM + "UnitCost";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvDtl, false, pFieldList, pCurrList, "APInvDtl", APInvHed.CurrencyCode, ttChainRows);
                    }

                    var APInvMscQuery23 = DBExpressionCompiler.Compile(APInvMscExpression23);
                    foreach (var APInvMsc_iterator in (APInvMscQuery23(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                    {
                        APInvMsc = APInvMsc_iterator;
                        APInvMsc.MiscAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvMsc.DocMiscAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvMsc", "MiscAmt");
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvMsc, false, "MiscAmt", pCurrList, "APInvMsc", APInvHed.CurrencyCode, ttChainRows);
                    }

                    var APInvSelQuery = DBExpressionCompiler.Compile(APInvSelExpression);
                    foreach (var APInvSel_iterator in (APInvSelQuery(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                    {
                        APInvSel = APInvSel_iterator;
                        APInvSel.AmtDue = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvSel.DocAmtDue, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvSel", "AmtDue");
                        APInvSel.DiscAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvSel.DocDiscAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvSel", "DiscAmt");
                        APInvSel.DiscAvailable = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvSel.DocDiscAvailable, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvSel", "DiscAvailable");
                        APInvSel.GrossPay = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvSel.DocGrossPay, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvSel", "GrossPay");
                        APInvSel.InvoiceAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvSel.DocInvoiceAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvSel", "Invoiceamt");
                        APInvSel.InvoiceBal = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvSel.DocInvoiceBal, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvSel", "InvoiceBal");
                        APInvSel.NetPay = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvSel.DocNetPay, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvSel", "NetPay");
                        pFieldList = "AmtDue" + Ice.Constants.LIST_DELIM + "DiscAmt" + Ice.Constants.LIST_DELIM + "DiscAvailable" + Ice.Constants.LIST_DELIM + "GrossPay" + Ice.Constants.LIST_DELIM + "Invoiceamt" + Ice.Constants.LIST_DELIM + "InvoiceBal" + Ice.Constants.LIST_DELIM + "NetPay";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvSel, false, pFieldList, pCurrList, "APInvSel", APInvHed.CurrencyCode, ttChainRows);
                    }
                }

                var APInvTaxQuery14 = DBExpressionCompiler.Compile(APInvTaxExpression14);
                foreach (var APInvTax_iterator in (APInvTaxQuery14(Db, APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                {
                    APInvTax = APInvTax_iterator;
                    if (ttAPInvHed.UseTaxRate)
                    {
                        doctmpTax = APInvTax.DocTaxAmt;
                        pFieldList = "ReportableAmt" + Ice.Constants.LIST_DELIM + "TaxableAmt" + Ice.Constants.LIST_DELIM + "TaxAmt";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvTax, true, pFieldList, taxCurrList, "APInvTax", APInvHed.CurrencyCode, tmpTaxChainRows);
                        LibRptfieldscalc.ConvertAmtVarRoundDec(pCurrList, APInvHed.CurrencyCode, ttChainRows, "APInvTax", "TaxAmt", doctmpTax, out rpt1tmpTax, out rpt2tmpTax, out rpt3tmpTax);
                        APInvTax.TaxAmtVar = tmpTax - APInvTax.TaxAmt;
                        APInvTax.Rpt1TaxAmtVar = rpt1tmpTax - APInvTax.Rpt1TaxAmt;
                        APInvTax.Rpt2TaxAmtVar = rpt2tmpTax - APInvTax.Rpt2TaxAmt;
                        APInvTax.Rpt3TaxAmtVar = rpt3tmpTax - APInvTax.Rpt3TaxAmt;
                    }
                    else
                    {
                        APInvTax.ReportableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvTax.DocReportableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvTax", "ReportableAmt");
                        APInvTax.TaxableAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvTax.DocTaxableAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvTax", "TaxableAmt");
                        APInvTax.TaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvTax.DocTaxAmt, APInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "APInvTax", "TaxAmt");
                        pFieldList = "ReportableAmt" + Ice.Constants.LIST_DELIM + "TaxableAmt" + Ice.Constants.LIST_DELIM + "TaxAmt";
                        LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvTax, false, pFieldList, pCurrList, "APInvTax", APInvHed.CurrencyCode, ttChainRows);
                    }
                }
            }
        }

        private void setInvoicePurPoint(string purPoint)
        {
            ttAPInvHed.PurPoint = purPoint;
            if (!String.IsNullOrEmpty(purPoint))
            {
                Erp.Tables.VendorPP altVendorPP = Erp.Tables.VendorPP.FindFirstByPrimaryKey(this.Db, Session.CompanyID, ttAPInvHed.VendorNum, purPoint);
                if (altVendorPP == null)
                {
                    throw new BLException(Strings.TheInvoicePurPointIsInvalid, "APInvHed");
                }
                else
                {
                    if (!String.IsNullOrEmpty(altVendorPP.INTaxRegionCode))
                    {
                        ttAPInvHed.TaxRegionCode = altVendorPP.INTaxRegionCode;
                        Erp.Tables.TaxRgn altTaxRgn = Erp.Tables.TaxRgn.FindFirstByPrimaryKey(this.Db, Session.CompanyID, altVendorPP.INTaxRegionCode);
                        if (TaxRgn != null)
                        {
                            ttAPInvHed.InPrice = altTaxRgn.InPrice;
                        }
                        else
                        {
                            ttAPInvHed.InPrice = false;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Pre-calculate missing APInxTax records which will be used for WH taxes created on Payment time
        /// <param name="ipGroupID">ipGroupID </param>        
        /// </summary>
        public void CompletePrecalcWHTax(string ipGroupID)
        {
            string opError = string.Empty;
            bool opTCStatus = false;
            using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
            {
                foreach (var APInvHedPrecalcTaxPartialRow in (this.SelectAPInvHedPrecalcTax(Session.CompanyID, ipGroupID)))
                {
                    this.LibProcessTaxes.CalcTaxes(0, 0, 0, (APInvHedPrecalcTaxPartialRow.InvoiceNum + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(APInvHedPrecalcTaxPartialRow.VendorNum)), string.Empty, 0, 0, string.Empty, 0, 0, false, out opCommFailure, out opError, out opTCStatus, ref ttTxSvcHeadRows, ref ttTxSvcDetailRows);
                }
                trans.Complete();
            }

        }

        /// <summary>
        /// CALCULATE VANTAGE\TAX CONNECT TAX CALCULATIONS UI NEEDS TO CALL A SAVE BEFORE CALLING THIS PROCEDURE
        /// <param name="ipGroupID">ipGroupID </param>        
        /// <param name="ipInvoiceNum">ipInvoiceNum </param>  
        /// <param name="ipVendorNum">ipVendorNum </param> 
        /// <param name="ipCalcAll">ipCalcAll</param>   
        /// <param name="ipCalledFromUI">ipCalledFromUI</param>   
        /// <param name="ds">APInvoice dataset</param>   
        /// </summary>
        public void SetReadyToCalc(string ipGroupID, string ipInvoiceNum, int ipVendorNum, bool ipCalcAll, bool ipCalledFromUI, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            string opError = string.Empty;
            bool opTCStatus = false;
            int bVendorNum = 0;
            string bInvoiceNum = string.Empty;
            string ForeignKey = string.Empty;
            decimal minumumInvAmt = decimal.Zero;/*Peru's detraction Minimum Invoice Amount*/
            bool inPriceAP = false;
            bool whInclRgn = false;
            bool apTaxLnLevel = this.ExistsXbSystLineTax(Session.CompanyID, true);


            IEnumerable<APInvHed> APInvHedRows;
            AUInvoiceNumber = ipInvoiceNum;

            if (!String.IsNullOrEmpty(ipGroupID))
            {
                APInvHedRows = FindAPInvHed1(Session.CompanyID, ipGroupID, ipCalcAll);
            }
            else
            {
                APInvHedRows = FindAPInvHed2(Session.CompanyID, ipInvoiceNum, ipVendorNum);
            }


            using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
            {
                foreach (var row_iterator in APInvHedRows)
                {
                    APInvHed = row_iterator;
                    whInclRgn = false;
                    if ((APInvHed.MatchedFromLI == true && APInvHed.AllowOverrideLI == false))
                    {
                        continue;
                    }

                    if (APInvHed.CorrectionInv || APInvHed.CancellationInv)
                    {
                        TypeOfCreation typeOfCreation = (APInvHed.CorrectionInv) ? TypeOfCreation.Correction : TypeOfCreation.Cancellation;
                        using (TransactionScope txScope = IceDataContext.CreateDefaultTransactionScope())
                        {
                            CopyInvoiceTax(typeOfCreation, APInvHed.VendorNum, APInvHed.InvoiceRef, APInvHed.InvoiceNum);
                            CopyInvoiceMiscTax(typeOfCreation, APInvHed.VendorNum, APInvHed.InvoiceRef, APInvHed.InvoiceNum);
                            Db.Validate();
                            txScope.Complete();
                        }
                    }

                    bVendorNum = APInvHed.VendorNum;
                    bInvoiceNum = APInvHed.InvoiceNum;
                    inPriceAP = APInvHed.InPrice;

                    if (inPriceAP)
                    {
                        foreach (var TaxCode_iterator in (this.SelectTaxRgnSalesTax(Session.CompanyID, APInvHed.TaxRegionCode)))
                        {
                            if (ExistsSalesTax(Session.CompanyID, TaxCode_iterator.TaxCode, 1, 0))
                            {
                                whInclRgn = true;

                            }
                        }

                    }
                    /* We need to save existing ApInvTax records in testApInvTax temp-table before TaxEngine deletes existing Tax Records and created new records */

                    var APInvTaxQuery15 = DBExpressionCompiler.Compile(APInvTaxExpression15);
                    foreach (var APInvTax_iterator in (APInvTaxQuery15(Db, Session.CompanyID, bInvoiceNum, bVendorNum, 0)))
                    {
                        if (testAPInvTaxRows == null)
                        {
                            testAPInvTaxRows = new List<APInvTaxRow>();
                        }

                        APInvTax = APInvTax_iterator;
                        testAPInvTax = new APInvTaxRow();
                        testAPInvTaxRows.Add(testAPInvTax);
                        BufferCopy.Copy(APInvTax, ref testAPInvTax);
                        testAPInvTax.SysRowID = APInvTax.SysRowID;
                        testAPInvTax.RowMod = IceRow.ROWSTATE_DELETED;
                    }


                    if (inPriceAP || apTaxLnLevel)
                    {
                        foreach (var ApLnTax_iterator in (this.SelectAPLnTax(Session.CompanyID, bVendorNum, bInvoiceNum)))
                        {
                            APLnTax = ApLnTax_iterator;

                            if (testAPLnTaxRows == null)
                            {
                                testAPLnTaxRows = new List<APLnTaxRow>();
                            }
                            testAPLnTax = new APLnTaxRow();
                            testAPLnTaxRows.Add(testAPLnTax);
                            BufferCopy.Copy(APLnTax, ref testAPLnTax);
                            testAPLnTax.SysRowID = APLnTax.SysRowID;
                            testAPLnTax.RowMod = IceRow.ROWSTATE_DELETED;
                        }


                        foreach (var apInvLnMscTax in (this.SelectAPInvLnMscTaxRefresh(Session.CompanyID, bVendorNum, bInvoiceNum)))
                        {
                            if (testAPInvLnMscTaxRows == null)
                            {
                                testAPInvLnMscTaxRows = new List<APInvLnMscTaxRow>();
                            }
                            testAPInvLnMscTax = new APInvLnMscTaxRow();
                            testAPInvLnMscTaxRows.Add(testAPInvLnMscTax);
                            BufferCopy.Copy(apInvLnMscTax, ref testAPInvLnMscTax);
                            testAPInvLnMscTax.SysRowID = apInvLnMscTax.SysRowID;
                            testAPInvLnMscTax.RowMod = IceRow.ROWSTATE_DELETED;
                        }

                        foreach (var APInvHedMscTax in (this.SelectAPInvHedMscTaxRefresh(Session.CompanyID, bVendorNum, bInvoiceNum)))
                        {
                            if (testAPInvHedMscTaxRows == null)
                            {
                                testAPInvHedMscTaxRows = new List<APInvHedMscTaxRow>();
                            }
                            testAPInvHedMscTax = new APInvHedMscTaxRow();
                            testAPInvHedMscTaxRows.Add(testAPInvHedMscTax);
                            BufferCopy.Copy(APInvHedMscTax, ref testAPInvHedMscTax);
                            testAPInvHedMscTax.SysRowID = APInvHedMscTax.SysRowID;
                            testAPInvHedMscTax.RowMod = IceRow.ROWSTATE_DELETED;
                        }
                        if (inPriceAP)
                        {
                            foreach (var ApInvExpTax_iterator in (this.SelectAPInvExp(Session.CompanyID, bVendorNum, bInvoiceNum)))
                            {
                                APInvExp = ApInvExpTax_iterator;
                                if (APInvExp.InvoiceLine != 0)
                                {
                                    if (testAPInvExpRows == null)
                                    {
                                        testAPInvExpRows = new List<APInvExpRow>();
                                    }
                                    testAPInvExp = new APInvExpRow();
                                    testAPInvExpRows.Add(testAPInvExp);
                                    BufferCopy.Copy(APInvExp, ref testAPInvExp);
                                    testAPInvExp.SysRowID = APInvExp.SysRowID;
                                    testAPInvExp.RowMod = IceRow.ROWSTATE_DELETED;
                                }
                                else
                                {
                                    if (testapihAPInvExpRows == null)
                                    {
                                        testapihAPInvExpRows = new List<APInvExpRow>();
                                    }

                                    testapihAPInvExp = new APInvExpRow();
                                    testapihAPInvExpRows.Add(testapihAPInvExp);
                                    BufferCopy.Copy(APInvExp, ref testapihAPInvExp);
                                    testapihAPInvExp.SysRowID = APInvExp.SysRowID;
                                    testapihAPInvExp.RowMod = IceRow.ROWSTATE_DELETED;
                                }
                            }
                        }
                    }

                    if (!String.IsNullOrEmpty(ipGroupID))
                    {
                        APInvHed.ReadyToCalc = true;
                    }

                    APInvHed.RecalcBeforePost = false;
                    /*This will check Invoice's Tax Type for Peru's effective rate*/
                    #region "peru"
                    if (isPeruLocalization)
                    {
                        foreach (PEAPInvTax peAPInvTax in (this.SelectPEAPInvTaxUpdLock(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                        {
                            Db.PEAPInvTax.Delete(peAPInvTax);
                        }
                    }/*End Peru*/

                    #endregion "peru"


                    using (Db.DisableTriggerScope(nameof(Erp.Tables.APInvHedMscTax)))
                    using (Db.DisableTriggerScope(nameof(Erp.Tables.APInvLnMscTax)))
                    using (Db.DisableTriggerScope(nameof(Erp.Tables.APLnTax)))
                    {
                        if (!ipCalledFromUI)
                        {
                            this.LibProcessTaxes.CalcTaxes(0, 0, 0, (bInvoiceNum + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(bVendorNum)), "", 0, 0, "", 0, 0, false, out opCommFailure, out opError, out opTCStatus, ref ttTxSvcHeadRows, ref ttTxSvcDetailRows);
                            if (whInclRgn)
                            {
                                this.LibProcessTaxes.CalcTaxes(0, 0, 0, (bInvoiceNum + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(bVendorNum)), "", 0, 0, "", 0, 0, true, out opCommFailure, out opError, out opTCStatus, ref ttTxSvcHeadRows, ref ttTxSvcDetailRows);
                            }
                        }
                        else
                        {
                            this.LibProcessTaxes.ProcessTaxes_CalcManualTax(0, 0, 0, (bInvoiceNum + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(bVendorNum)), "", 0, 0, 0, false, out opCommFailure, out opError, out opTCStatus, ref ttTxSvcHeadRows, ref ttTxSvcDetailRows);
                            if (whInclRgn)
                            {
                                this.LibProcessTaxes.ProcessTaxes_CalcManualTax(0, 0, 0, (bInvoiceNum + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(bVendorNum)), "", 0, 0, 0, true, out opCommFailure, out opError, out opTCStatus, ref ttTxSvcHeadRows, ref ttTxSvcDetailRows);
                            }
                        }
                    }

                    DeleteOldExpenses(bVendorNum, bInvoiceNum);

                    foreach (var apInvDtl in SelectAPInvDtlWithUpdLock(Session.CompanyID, bVendorNum, bInvoiceNum))
                    {
                        apInvDtl.TotalTax = 0;
                        apInvDtl.DocTotalTax = 0;
                        apInvDtl.Rpt1TotalTax = 0;
                        apInvDtl.Rpt2TotalTax = 0;
                        apInvDtl.Rpt3TotalTax = 0;

                        apInvDtl.TotalSATax = 0;
                        apInvDtl.DocTotalSATax = 0;
                        apInvDtl.Rpt1TotalSATax = 0;
                        apInvDtl.Rpt2TotalSATax = 0;
                        apInvDtl.Rpt3TotalSATax = 0;

                        apInvDtl.TotalDedTax = 0;
                        apInvDtl.DocTotalDedTax = 0;
                        apInvDtl.Rpt1TotalDedTax = 0;
                        apInvDtl.Rpt2TotalDedTax = 0;
                        apInvDtl.Rpt3TotalDedTax = 0;

                        foreach (var apLnTax in SelectAPLnTax(Session.CompanyID, apInvDtl.VendorNum, apInvDtl.InvoiceNum, apInvDtl.InvoiceLine))
                        {
                            if (apLnTax.CollectionType != 1)
                            {
                                if (apLnTax.CollectionType == 2 || apLnTax.CollectionType == 3)
                                {
                                    if (apLnTax.ECAcquisitionSeq == 0)
                                    {
                                        apInvDtl.TotalSATax = apInvDtl.TotalSATax + apLnTax.TaxAmt + apLnTax.TaxAmtVar;
                                        apInvDtl.DocTotalSATax = apInvDtl.DocTotalSATax + apLnTax.DocTaxAmt + apLnTax.DocTaxAmtVar;
                                        apInvDtl.Rpt1TotalSATax = apInvDtl.Rpt1TotalSATax + apLnTax.Rpt1TaxAmt + apLnTax.Rpt1TaxAmtVar;
                                        apInvDtl.Rpt2TotalSATax = apInvDtl.Rpt2TotalSATax + apLnTax.Rpt2TaxAmt + apLnTax.Rpt2TaxAmtVar;
                                        apInvDtl.Rpt3TotalSATax = apInvDtl.Rpt3TotalSATax + apLnTax.Rpt3TaxAmt + apLnTax.Rpt3TaxAmtVar;
                                    }
                                }
                                else
                                {
                                    apInvDtl.TotalTax = apInvDtl.TotalTax + apLnTax.TaxAmt + apLnTax.TaxAmtVar;
                                    apInvDtl.DocTotalTax = apInvDtl.DocTotalTax + apLnTax.DocTaxAmt + apLnTax.DocTaxAmtVar;
                                    apInvDtl.Rpt1TotalTax = apInvDtl.Rpt1TotalTax + apLnTax.Rpt1TaxAmt + apLnTax.Rpt1TaxAmtVar;
                                    apInvDtl.Rpt2TotalTax = apInvDtl.Rpt2TotalTax + apLnTax.Rpt2TaxAmt + apLnTax.Rpt2TaxAmtVar;
                                    apInvDtl.Rpt3TotalTax = apInvDtl.Rpt3TotalTax + apLnTax.Rpt3TaxAmt + apLnTax.Rpt3TaxAmtVar;

                                    apInvDtl.TotalDedTax = apInvDtl.TotalDedTax + apLnTax.DedTaxAmt;
                                    apInvDtl.DocTotalDedTax = apInvDtl.DocTotalDedTax + apLnTax.DocDedTaxAmt;
                                    apInvDtl.Rpt1TotalDedTax = apInvDtl.Rpt1TotalDedTax + apLnTax.Rpt1DedTaxAmt;
                                    apInvDtl.Rpt2TotalDedTax = apInvDtl.Rpt2TotalDedTax + apLnTax.Rpt2DedTaxAmt;
                                    apInvDtl.Rpt3TotalDedTax = apInvDtl.Rpt3TotalDedTax + apLnTax.Rpt3DedTaxAmt;
                                }
                            }
                        }

                        foreach (var apInvLnMscTax in SelectAPInvLnMscTax(Session.CompanyID, apInvDtl.VendorNum, apInvDtl.InvoiceNum, apInvDtl.InvoiceLine))
                        {
                            if (apInvLnMscTax.CollectionType != 1)
                            {
                                if (apInvLnMscTax.CollectionType == 2 || apInvLnMscTax.CollectionType == 3)
                                {
                                    if (apInvLnMscTax.ECAcquisitionSeq == 0)
                                    {
                                        apInvDtl.TotalSATax = apInvDtl.TotalSATax + apInvLnMscTax.TaxAmt + apInvLnMscTax.TaxAmtVar;
                                        apInvDtl.DocTotalSATax = apInvDtl.DocTotalSATax + apInvLnMscTax.DocTaxAmt + apInvLnMscTax.DocTaxAmtVar;
                                        apInvDtl.Rpt1TotalSATax = apInvDtl.Rpt1TotalSATax + apInvLnMscTax.Rpt1TaxAmt + apInvLnMscTax.Rpt1TaxAmtVar;
                                        apInvDtl.Rpt2TotalSATax = apInvDtl.Rpt2TotalSATax + apInvLnMscTax.Rpt2TaxAmt + apInvLnMscTax.Rpt2TaxAmtVar;
                                        apInvDtl.Rpt3TotalSATax = apInvDtl.Rpt3TotalSATax + apInvLnMscTax.Rpt3TaxAmt + apInvLnMscTax.Rpt3TaxAmtVar;
                                    }
                                }
                                else
                                {
                                    apInvDtl.TotalTax = apInvDtl.TotalTax + apInvLnMscTax.TaxAmt + apInvLnMscTax.TaxAmtVar;
                                    apInvDtl.DocTotalTax = apInvDtl.DocTotalTax + apInvLnMscTax.DocTaxAmt + apInvLnMscTax.DocTaxAmtVar;
                                    apInvDtl.Rpt1TotalTax = apInvDtl.Rpt1TotalTax + apInvLnMscTax.Rpt1TaxAmt + apInvLnMscTax.Rpt1TaxAmtVar;
                                    apInvDtl.Rpt2TotalTax = apInvDtl.Rpt2TotalTax + apInvLnMscTax.Rpt2TaxAmt + apInvLnMscTax.Rpt2TaxAmtVar;
                                    apInvDtl.Rpt3TotalTax = apInvDtl.Rpt3TotalTax + apInvLnMscTax.Rpt3TaxAmt + apInvLnMscTax.Rpt3TaxAmtVar;

                                    apInvDtl.TotalDedTax = apInvDtl.TotalDedTax + apInvLnMscTax.DedTaxAmt;
                                    apInvDtl.DocTotalDedTax = apInvDtl.DocTotalDedTax + apInvLnMscTax.DocDedTaxAmt;
                                    apInvDtl.Rpt1TotalDedTax = apInvDtl.Rpt1TotalDedTax + apInvLnMscTax.Rpt1DedTaxAmt;
                                    apInvDtl.Rpt2TotalDedTax = apInvDtl.Rpt2TotalDedTax + apInvLnMscTax.Rpt2DedTaxAmt;
                                    apInvDtl.Rpt3TotalDedTax = apInvDtl.Rpt3TotalDedTax + apInvLnMscTax.Rpt3DedTaxAmt;
                                }
                            }
                        }
                    }

                    ReCalcTaxes = false;

                    opErrorMessage = "";

                    ttTaxSvcHead = null;
                    if (ttTxSvcHeadRows != null)
                    {
                        ttTaxSvcHead = (from ttTxSvcHead_Row in ttTxSvcHeadRows
                                        select ttTxSvcHead_Row).FirstOrDefault();
                    }

                    if (ttTaxSvcHead != null)
                    {
                        ttTaxConnectStatus = (
                                    from ttTaxConnectStatus_Row in ds.TaxConnectStatus
                                    where ttTaxConnectStatus_Row.Company.KeyEquals(Session.CompanyID) && ttTaxConnectStatus_Row.RowMod.Compare("U") == 0
                                    select ttTaxConnectStatus_Row).FirstOrDefault();

                        LibProcessTaxes.ProcessTaxesAP(ttTxSvcHeadRows, ttTxSvcDetailRows, bVendorNum, out opCommFailure, out opErrorMessage, out opTCStatus, ttOTTxSvcJurDtlRows);

                        if (StringExtensions.Compare(opErrorMessage, "Tax Connect is down.") == 0)
                        {
                            opCommFailure = true;
                        }

                        /* opCommFailure or opTCStatus will set all invoices on hold, individual invoices will go on hold
                            if not opCommFailur or opTCSTatus but TaxSvcHead.ResultCode is not Success after tax calc */
                        if (ttTxSvcHeadRows != null)
                        {
                            ttTxSvcHeadRows.Clear();
                        }

                        if (ttTxSvcDetailRows != null)
                        {
                            ttTxSvcDetailRows.Clear();
                        }
                        if (ttTaxConnectStatus == null)
                        {
                            ttTaxConnectStatus = (
                                from ttTaxConnectStatus_Row in ds.TaxConnectStatus
                                where ttTaxConnectStatus_Row.Company.KeyEquals(Session.CompanyID) && ttTaxConnectStatus_Row.RowMod.Compare("U") == 0
                                select ttTaxConnectStatus_Row).FirstOrDefault();
                        }

                        if (ttTaxConnectStatus != null)
                        {
                            ttTaxConnectStatus.ETCOffline = opCommFailure;
                            ttTaxConnectStatus.ErrorMessage = opErrorMessage;
                            ttTaxConnectStatus.TCStatus = opTCStatus;
                            ttTaxConnectStatus.RowMod = "";
                        }
                    }    /*<--- Tax Connect Records*/

                    /* Refresh UI tax records */
                    CurrentFullTableset.APInvTax.Clear();


                    var APInvTaxQuery16 = DBExpressionCompiler.Compile(APInvTaxExpression16);
                    foreach (var APInvTax_iterator in (APInvTaxQuery16(Db, Session.CompanyID, bVendorNum, bInvoiceNum, 0)))
                    {

                        APInvTax = APInvTax_iterator;
                        refreshttAPInvTax();
                    }/* for each APInvTax */

                    if (this.ExistsAPInvHedRecalc(Session.CompanyID, bVendorNum, bInvoiceNum, true))
                    {
                        var updtAPInvHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, bVendorNum, bInvoiceNum);
                        if (updtAPInvHed != null)
                        {
                            updtAPInvHed.DevLog2 = false;  //re-set the flag in case if Post is canceled and the user has more changes
                            Db.Validate(updtAPInvHed);
                        }
                    }

                    if (inPriceAP == true)
                    {
                        APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, bVendorNum, bInvoiceNum);
                        foreach (var APInvMsc_iterator in (SelectAPInvMsc(Session.CompanyID, bVendorNum, bInvoiceNum, 0)))
                        {
                            APInvMsc = APInvMsc_iterator;
                            foreach (var ApInvExp_iterator in (this.SelectAPInvExp(Session.CompanyID, APInvMsc.VendorNum, APInvMsc.InvoiceNum, 0, APInvMsc.InvExpSeq)))
                            {
                                APInvExp = ApInvExp_iterator;
                                Db.APInvExp.Delete(APInvExp);
                                Db.Validate(APInvExp);
                            }
                            APSyncAPInvExp.RunSyncAPInvExp("APInvHed", Guid.Empty, APInvHed.SysRowID, APInvMsc.SysRowID, Guid.Empty, false, "", 0M, "MiscCharge", string.Empty, out lAPInvExpUpdated);
                        }

                        //The APInvDtl ,  APInvMsc, APInvExp,  APInvExpTGLC, APLnTax tables need to be cleared because they can have outdated information if the tax liability
                        //had been changed and/or taxes have been recalculated. This prevents "Row has been modified by another user..." errors.
                        //After being cleared, both of the tables are refreshed in the loop below.
                        CurrentFullTableset.APInvDtl.Clear();
                        CurrentFullTableset.APInvMsc.Clear();
                        CurrentFullTableset.APIHAPInvMsc.Clear();
                        CurrentFullTableset.APInvExp.Clear();
                        CurrentFullTableset.APInvExpTGLC.Clear();
                        CurrentFullTableset.APLnTax.Clear();

                        foreach (var APInvDtl_iterator in (SelectAPInvDtl(Session.CompanyID, bVendorNum, bInvoiceNum)))
                        {
                            APInvDtl = APInvDtl_iterator;

                            foreach (var APInvMsc_iterator in (SelectAPInvMsc(Session.CompanyID, APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine)))
                            {
                                APInvMsc = APInvMsc_iterator;
                                foreach (var ApInvExp_iterator in (this.SelectAPInvExp(Session.CompanyID, APInvMsc.VendorNum, APInvMsc.InvoiceNum, APInvMsc.InvoiceLine, APInvMsc.InvExpSeq)))
                                {
                                    APInvExp = ApInvExp_iterator;
                                    Db.APInvExp.Delete(APInvExp);
                                    Db.Validate(APInvExp);
                                }
                                APSyncAPInvExp.RunSyncAPInvExp("APInvDtl", APInvDtl.SysRowID, Guid.Empty, APInvMsc.SysRowID, Guid.Empty, false, "", 0M, "MiscCharge", string.Empty, out lAPInvExpUpdated);
                                refreshttAPInvMsc();
                            }
                            APSyncAPInvExp.RunSyncAPInvExp("APInvDtl", APInvDtl.SysRowID, Guid.Empty, Guid.Empty, Guid.Empty, false, APInvDtl.PartNum, 0M, "InvoiceLine", string.Empty, out lAPInvExpUpdated);
                            refreshttAPInvDtl();
                        }

                        foreach (var apInvMscHed in (SelectAPInvMsc(Session.CompanyID, bVendorNum, bInvoiceNum, 0)))
                        {
                            this.refreshttAPIHAPInvMsc();

                        }


                        foreach (var ApLnTax_iterator in (this.SelectAPLnTax(Session.CompanyID, bVendorNum, bInvoiceNum)))
                        {
                            APLnTax = ApLnTax_iterator;
                            refreshttAPLnTax();

                        }

                        refreshttAPInvLnMscTax(bVendorNum, bInvoiceNum);
                        refreshttAPInvHedMscTax(bVendorNum, bInvoiceNum);

                        foreach (var ApInvExpTax_iterator in (this.SelectAPInvExp(Session.CompanyID, bVendorNum, bInvoiceNum)))
                        {
                            APInvExp = ApInvExpTax_iterator;
                            if (APInvExp.InvoiceLine == 0)
                            {
                                refreshttAPIHAPInvExp();
                            }
                            else
                            {
                                refreshttAPInvExp();
                            }
                        }
                    }
                    else
                    {
                        if (apTaxLnLevel)
                        {
                            CurrentFullTableset.APInvMsc.RemoveAll(row => row.VendorNum == bVendorNum && row.InvoiceNum.KeyEquals(bInvoiceNum));
                            CurrentFullTableset.APIHAPInvMsc.RemoveAll(row => row.VendorNum == bVendorNum && row.InvoiceNum.KeyEquals(bInvoiceNum));


                            foreach (var ApLnTax_iterator in (this.SelectAPLnTax(Session.CompanyID, bVendorNum, bInvoiceNum)))
                            {
                                APLnTax = ApLnTax_iterator;

                                refreshttAPLnTax();
                            }
                            if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt"))
                            {
                                CurrentFullTableset.APIHAPLnTax.Clear();

                                foreach (var ApLnTax_iterator in (this.SelectAPLnTax(Session.CompanyID, bVendorNum, bInvoiceNum)))
                                {
                                    APLnTax = ApLnTax_iterator;

                                    refreshAPIHAPLnTax();
                                }
                            }

                            this.refreshttAPIHAPInvMscAll(bVendorNum, bInvoiceNum);
                            this.refreshttAPInvMscAll(bVendorNum, bInvoiceNum);
                            refreshttAPInvLnMscTax(bVendorNum, bInvoiceNum);
                            refreshttAPInvHedMscTax(bVendorNum, bInvoiceNum);

                        }
                    }


                    #region Peru Localization
                    if (isPeruLocalization)
                    {
                        bool noDetractions = true;
                        IEnumerable<DetractionsResult> taxLines = SelectDetractions(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum);
                        if (taxLines != null)
                        {
                            if (((from detractions in taxLines
                                  where !String.IsNullOrEmpty(detractions.DetTaxCode)
                                  select detractions).Select(row => (row.DetTaxCode)).Distinct().Count() > 1) ||
                                ((from detractions in taxLines
                                  where !String.IsNullOrEmpty(detractions.DetTaxCode)
                                  select detractions).Select(row => (row.DetRateCode)).Distinct().Count() > 1)
                               )
                            {
                                throw new BLException(Strings.MixedDetractionRatesNotAllowed, "TaxCatD", "TaxCode");
                            }
                            DetractionsResult detraction = taxLines.FirstOrDefault();
                            if (detraction != null)
                            {
                                TaxRate taxRate = this.FindLastTaxRate(Session.CompanyID, detraction.DetTaxCode, detraction.DetRateCode, this.getTaxRateDate(APInvHed));
                                if (taxRate != null)
                                {
                                    string pPECurrlist = string.Empty;
                                    string pPERatelist = string.Empty;
                                    this.LibGetCurrencyRatesEF.BuildCurrencyRates(APInvHed.ApplyDate, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty,
                                                                                    taxRate.PEWHCurrencyCode, APInvHed.RateGrpCode, false,
                                                                                    out ttPEChain2Rows, out pCurrList, out pRateList);
                                    minumumInvAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(taxRate.PEMinInvAmt, taxRate.PEWHCurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttPEChain2Rows, true, "APInvHed", "InvoiceAmt");
                                    if (APInvHed.InvoiceAmt >= minumumInvAmt)
                                    {
                                        if (taxRate.PEIncTaxAmt)
                                        {
                                            {
                                                PEAPInvTax peAPInvTax = FindFirstPEAPInvTaxUpdLock(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum, taxRate.TaxCode, taxRate.RateCode);
                                                if (peAPInvTax == null)
                                                {
                                                    peAPInvTax = new Erp.Tables.PEAPInvTax();
                                                    Db.PEAPInvTax.Insert(peAPInvTax);
                                                    peAPInvTax.Company = APInvHed.Company;
                                                    peAPInvTax.VendorNum = APInvHed.VendorNum;
                                                    peAPInvTax.LineNum = 1;
                                                    peAPInvTax.InvoiceNum = APInvHed.InvoiceNum;
                                                    peAPInvTax.TaxCode = taxRate.TaxCode;
                                                    peAPInvTax.RateCode = taxRate.RateCode;
                                                }
                                                peAPInvTax.TaxableAmt = APInvHed.InvoiceAmt;
                                                peAPInvTax.ReportableAmt = peAPInvTax.TaxableAmt;
                                                peAPInvTax.TaxAmt = (APInvHed.InvoiceAmt * (taxRate.TaxPercent / 100));
                                                if (taxRate.EffectiveFrom == null)
                                                {
                                                    peAPInvTax.TaxRateDate = null;
                                                }
                                                else
                                                {
                                                    peAPInvTax.TaxRateDate = taxRate.EffectiveFrom;
                                                }
                                                detraction.TaxAmt = peAPInvTax.TaxAmt;
                                                Db.Release(ref peAPInvTax);
                                            }
                                        }
                                        APInvHed.PEDetTaxAmt = detraction.TaxAmt;
                                        noDetractions = false;
                                        roundPEDetractions();
                                    }
                                }
                            }
                        }
                        if (noDetractions)
                        {
                            foreach (PEAPInvTax peAPInvTax in (this.SelectPEAPInvTaxUpdLock(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum)))
                            {
                                Db.PEAPInvTax.Delete(peAPInvTax);
                            }
                            APInvHed.PEDetTaxAmt = decimal.Zero;
                            roundPEDetractions();
                        }
                        CurrentFullTableset.PEAPInvTax.Clear();
                        refreshttPEAPInvTax(APInvHed.VendorNum, APInvHed.InvoiceNum, APInvHed.GroupID);
                    }/*End Peru*/
                    #endregion Peru Localization

                    /* if calculating a specific invoice, refresh temp-table */
                    if (!String.IsNullOrEmpty(ipInvoiceNum))
                    {


                        Db.ReadCurrent(ref APInvHed);
                        ttAPInvHed = new Erp.Tablesets.APInvHedRow();
                        BufferCopy.Copy(APInvHed, ref ttAPInvHed);
                        if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") && APInvDtl != null)
                        {
                            Db.ReadCurrent(ref APInvDtl);
                            ttAPInvDtl = new Erp.Tablesets.APInvDtlRow();
                            BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
                        }
                        // scr 116857 - moved the called to setDatesDiscount up to this point.  This logic was added on 3-20-2012 under scr 94770.  SetDiscountDates
                        // updates the APInvHed when called from SetReadyToCalc.  The way the code was structured this caused 'row has been modified' errors if the user
                        // updates the APInvHed after taxes have been calculated.  By moving the logic here and forcing the Db.Validate and then executing buffer-copy the
                        // tableset has the current data.  Buffer copy has to be executed before the call to setDatesDiscount because that method relies upon the existence
                        // of the ttAPInvHed.  
                        SetDatesDiscount();
                        Db.Validate();
                        BufferCopy.Copy(APInvHed, ref ttAPInvHed);
                        CurrentFullTableset.APInvHed.Add(ttAPInvHed);
                        ttAPInvHed.SysRowID = APInvHed.SysRowID;
                        APInvHedAfterGetRows();
                        APInvHed_Foreign_Link();
                        if (Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt") && APInvDtl != null)
                        {
                            BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
                            CurrentFullTableset.APInvDtl.Add(ttAPInvDtl);
                            ttAPInvDtl.SysRowID = APInvDtl.SysRowID;
                            APInvDtlAfterGetRows();
                        }

                        if (ipCalledFromUI || inPriceAP || apTaxLnLevel)
                        {


                            generateExpensesAfterCalTaxes(ipGroupID, ipInvoiceNum, ipVendorNum, ipCalcAll);

                            foreach (var APInvExp_iterator in SelectAPInvExpNonDedTax(Session.CompanyID, ipVendorNum, ipInvoiceNum, true))
                            {
                                APInvExp = APInvExp_iterator;
                                refreshttAPInvExp();
                            }
                            foreach (var APInvExp_iterator in SelectAPInvExpNonDedTax(Session.CompanyID, ipVendorNum, ipInvoiceNum, false))
                            {
                                APInvExp = APInvExp_iterator;
                                refreshttAPIHAPInvExp();
                            }
                            lAPInvExpUpdated = true;
                            RefreshAfterSyncAPInvExp();
                        }

                        foreach (var APInvDtl_iterator in (SelectAPInvDtl(Session.CompanyID, bVendorNum, bInvoiceNum)))
                        {
                            APInvDtl = APInvDtl_iterator;
                            refreshttAPInvDtl();
                        }/* for each APInvDtl */
                    }
                    AssignAPInvHedExtAmtFields(false);

                    foreach (var APInvExp_iterator in SelectAPInvExpNonDedTax(Session.CompanyID, bVendorNum, bInvoiceNum, true))
                    {
                        APInvExp = APInvExp_iterator;
                        refreshttAPInvExp();
                    }
                    foreach (var APInvExp_iterator in SelectAPInvExpNonDedTax(Session.CompanyID, bVendorNum, bInvoiceNum, false))
                    {
                        APInvExp = APInvExp_iterator;
                        refreshttAPIHAPInvExp();
                    }
                    if (!apTaxLnLevel)
                    {
                        foreach (var APInvExp_iterator in SelectAPInvExpNonDedTax2(Session.CompanyID, bVendorNum, bInvoiceNum))
                        {
                            APInvExp = APInvExp_iterator;
                            refreshttAPInvExp();
                        }
                    }

                    lAPInvExpUpdated = true;
                    RefreshAfterSyncAPInvExp();
                } // end for each  
                Db.Validate();
                trans.Complete();
            }// end transaction scope             
        }

        private void roundPEDetractions()
        {
            if (APInvHed.PEDetTaxAmt != decimal.Zero)
            {
                APInvHed.PEDetTaxAmt = Math.Round(APInvHed.PEDetTaxAmt, 0, MidpointRounding.AwayFromZero);
                APInvHed.DocPEDetTaxAmt = APInvHed.PEDetTaxAmt;
                string baseCurrency = FindFirstBaseCurrencyCode(Session.CompanyID, true);
                if (!String.IsNullOrEmpty(baseCurrency))
                {
                    if (String.IsNullOrEmpty(APInvHed.PEDetTaxCurrencyCode))
                        APInvHed.PEDetTaxCurrencyCode = baseCurrency;
                    if (!baseCurrency.KeyEquals(APInvHed.CurrencyCode))
                    {
                        tmpChainRows = new List<CurrExChain>();
                        int pStep = 0;
                        decimal pExRate = decimal.Zero;
                        this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, baseCurrency, APInvHed.CurrencyCode,
                                                              (vUseDate == 1) ? APInvHed.InvoiceDate : APInvHed.ApplyDate,
                                                              false, 0, "APInvHed", APInvHed.VendorNum.ToString(), APInvHed.InvoiceNum.ToString(), string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty,
                                                              APInvHed.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                        if (tmpChainRows.Count > 0)
                        {
                            APInvHed.DocPEDetTaxAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(APInvHed.PEDetTaxAmt, baseCurrency, APInvHed.CurrencyCode, tmpChainRows, true, "APInvHed", "DocTaxAmt");
                        }
                    }
                }
            }
            else
                APInvHed.DocPEDetTaxAmt = APInvHed.PEDetTaxAmt;
            Db.Validate(APInvHed);
        }

        ///<summary>
        ///Purpose:     
        ///Parameters:  none
        ///Notes:       
        /// <param name="ipVendorNum">Vendor Num</param>   
        /// <param name="ipInvoiceNum">Invoice Num</param>   
        /// <param name="ipInvoiceLine">Invoice Line</param>    
        /// <param name="ds">APInvoice dataset</param>   
        ///</summary>
        public void SubCDataBtnClicked(int ipVendorNum, string ipInvoiceNum, int ipInvoiceLine, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, ipVendorNum, ipInvoiceNum);

            APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, ipVendorNum, ipInvoiceNum, ipInvoiceLine);
            if (APInvDtl == null)
            {
                throw new BLException(Strings.InvoiceDetailNotFound, "APInvDtl", "InvoiceLine");
            }

            PORel = FindFirstPORel(Session.CompanyID, APInvDtl.PONum, APInvDtl.POLine, APInvDtl.PORelNum);
            if (PORel == null)
            {
                return;
            }

            if (StringExtensions.Compare(PORel.TranType, "PUR-SUB") == 0)
            {
                JobHead = JobHead.FindFirstByPrimaryKey(Db, Session.CompanyID, PORel.JobNum);
            }
            if (JobHead == null || String.IsNullOrEmpty(JobHead.ProjectID))
            {
                return;
            }

            JobOper = JobOper.FindFirstByPrimaryKey(Db, Session.CompanyID, JobHead.JobNum, PORel.AssemblySeq, PORel.JobSeq);
            ttAPInvPB = new Erp.Tablesets.APInvPBRow();
            CurrentFullTableset.APInvPB.Add(ttAPInvPB);
            ttAPInvPB.Company = Session.CompanyID;
            ttAPInvPB.VendorNum = APInvDtl.VendorNum;
            ttAPInvPB.InvoiceNum = APInvDtl.InvoiceNum;
            ttAPInvPB.InvoiceLine = APInvDtl.InvoiceLine;
            ttAPInvPB.RoleCd = (((JobOper != null && !String.IsNullOrEmpty(JobOper.PrjRoleList))) ? JobOper.PrjRoleList.Entry(0, Ice.Constants.LIST_DELIM) : "");
            ttAPInvPB.ProjectID = JobHead.ProjectID;
            ttAPInvPB.PhaseID = JobHead.PhaseID;
            ttAPInvPB.RowMod = IceRow.ROWSTATE_ADDED;
            ttAPInvPB.GroupID = APInvHed.GroupID;
            ttAPInvPB.CurrencyCode = APInvHed.CurrencyCode;
            APInvPBAfterGetRows();
            APInvPB_Foreign_Link();
        }

        private void transferInvoice(string TransferToGroupID, DateTime TransferApplyDate)
        {
            string DumKey1 = string.Empty;
            string DumKey2 = string.Empty;
            string DumKey3 = string.Empty;
            string OldGroupID = string.Empty;

            APInvoiceTableset tempAPInvTableSet = new APInvoiceTableset();
            APInvHed tempHed;
            APInvHedRow APHedRow = null;
            DateTime? ProposedApplyDate = null;

            Ice.Tables.Memo bMemo = null;
            Ice.Tables.Memo bNewMemo = null;

            using (System.Transactions.TransactionScope txScope = ErpContext.CreateDefaultTransactionScope())
            {
                APHedRow = new APInvHedRow();
                tempAPInvTableSet = GetByID(APInvHed.VendorNum, APInvHed.InvoiceNum);

                if (tempAPInvTableSet.APInvHed.Count == 1)
                {
                    CurrentFullTableset = tempAPInvTableSet;
                    BufferCopy.Copy(tempAPInvTableSet.APInvHed[0], APHedRow);
                    ProposedApplyDate = TransferApplyDate;


                    BIttAPInvHed = APHedRow;

                    OldGroupID = tempAPInvTableSet.APInvHed[0].GroupID;

                    tempAPInvTableSet.APInvHed[0].RowMod = "U";
                    tempAPInvTableSet.APInvHed[0].ApplyDate = ProposedApplyDate;
                    tempAPInvTableSet.APInvHed[0].GroupID = TransferToGroupID;

                    if (BIttAPInvHed.ApplyDate != ttAPInvHed.ApplyDate)
                    {
                        tempHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, APHedRow.VendorNum, APHedRow.InvoiceNum);
                        OnChangeofApplyDateEx(APHedRow.VendorNum, APHedRow.InvoiceNum, "R", TransferApplyDate, ref tempAPInvTableSet);
                        APInvHedBeforeUpdate();
                        BufferCopy.Copy(ttAPInvHed, tempHed);
                        Db.Validate();
                        APInvHedAfterUpdate();
                        BIttAPInvHed = null;
                    }
                    else
                    {
                        tempHed = FindFirstAPInvHedWithUpdLock(Session.CompanyID, APHedRow.VendorNum, APHedRow.InvoiceNum);
                        BufferCopy.Copy(ttAPInvHed, tempHed);
                        Db.Validate(tempHed);
                    }

                    //Update TranGLC GroupId
                    foreach (var iTranGLC in SelectTranGLCWithUpdLock(tempHed.Company, Erp.Tables.APInvExp.GetTableName(), tempHed.VendorNum.ToString(), tempHed.InvoiceNum))
                    {
                        iTranGLC.Key5 = tempHed.GroupID;
                        Db.Validate(iTranGLC);
                    }

                    //Update EntityTGLC
                    EntityGLC bEntityTGLC = FindFirstEntityGLCUpdLock(tempHed.Company, Erp.Tables.APInvHed.GetTableName(), tempHed.VendorNum.ToString(), tempHed.InvoiceNum, OldGroupID);

                    if (bEntityTGLC != null)
                    {
                        bEntityTGLC.Key3 = tempHed.GroupID;
                        Db.Validate(bEntityTGLC);
                    }
                }

                txScope.Complete();
            }
            DumKey1 = Compatibility.Convert.ToString(ttAPInvHed.GroupID);
            DumKey3 = Compatibility.Convert.ToString(ttAPInvHed.InvoiceNum);

            Vendor = Vendor.FindFirstByPrimaryKey(Db, ttAPInvHed.Company, ttAPInvHed.VendorNum);
            if (Vendor == null)
            {
                throw new BLException(Strings.TheVendorIsInvalid, "Vendor");
            }/* if not available Vendor */
            DumKey2 = Compatibility.Convert.ToString(Vendor.VendorNum);

            var BMemoQuery = DBExpressionCompiler.Compile(BMemoExpression);
            foreach (var bMemo_iterator in (BMemoQuery(Db, ttAPInvHed.Company, OldGroupID, DumKey2, DumKey3, "APInvHed")))
            {
                bMemo = bMemo_iterator;
                bNewMemo = new Ice.Tables.Memo();
                Db.Memo.Insert(bNewMemo);
                bNewMemo.Company = Vendor.Company;
                bNewMemo.Key1 = DumKey1;
                bNewMemo.Key2 = DumKey2;
                bNewMemo.Key3 = DumKey3;
                bNewMemo.MemoDate = bMemo.MemoDate;
                bNewMemo.MemoDesc = bMemo.MemoDesc;
                bNewMemo.MemoNum = bMemo.MemoNum;
                bNewMemo.MemoText = bMemo.MemoText;
                bNewMemo.MemoUserID = bMemo.MemoUserID;
                bNewMemo.Notify = bMemo.Notify;
                bNewMemo.NotifyDate = bMemo.NotifyDate;
                bNewMemo.NotifyUserID = bMemo.NotifyUserID;
                bNewMemo.RelatedToFile = bMemo.RelatedToFile;
                bNewMemo.CategoryID = bMemo.CategoryID;
                Db.Release(ref bNewMemo);

                var BNewMemoQuery = DBExpressionCompiler.Compile(BNewMemoExpression);
                bNewMemo = BNewMemoQuery(Db, bMemo.SysRowID);
                if (bNewMemo != null)
                {
                    Db.Memo.Delete(bNewMemo);
                }
            }
        }

        /// <summary>
        /// Method to call when transferring an invoice to a different group.
        /// </summary>
        /// <param name="TransferToGroupID">The group id to transfer the invoice to</param>
        /// <param name="XferInvVendorNum">The vendor number on the invoice to transfer</param>
        /// <param name="XferInvInvoiceNum">The invoice number of the invoice to transfer</param>
        /// <param name="XferApplyDate">The apply date of the invoice to transfer</param>
        /// <param name="cGroupID">current APInvGrp GroupID</param>
        /// <param name="grpTotalInvAmt">return new TotalInvAmt to update APInvGrp in UI</param>
        /// <param name="lEnableGenLegalNum">flag for UI to determine whether Generate Legal Numbers option is available</param>
        public void TransferInvoiceToGroup(string TransferToGroupID, int XferInvVendorNum, string XferInvInvoiceNum, DateTime XferApplyDate, string cGroupID, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum)
        {
            grpTotalInvAmt = decimal.Zero;
            lEnableGenLegalNum = false;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, XferInvVendorNum, XferInvInvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.TheInvoiceDoesNotExist, "APInvHed");
            }/* if not available APInvHed */
            if (APInvHed.Posted == true)
            {
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvHed");
            }
            if (StringExtensions.Compare(APInvHed.GroupID, TransferToGroupID) == 0)
            {
                throw new BLException(Strings.TheInvoiceIsAlreadyInGroup(TransferToGroupID), "APInvHed");
            }/* if APInvHed.GroupID = TransferToGroupID */
            APInvHedTypePartialRow CurrentInvoices = FindGroupInvoiceTypeQuery(Session.CompanyID, TransferToGroupID);

            if (CurrentInvoices != null && CurrentInvoices.GRNIClearing != APInvHed.GRNIClearing)
                throw new BLException(Strings.UnableToCreateGRNIClearingWithExistingNormalInvoice, "APInvGrp");


            APInvGrp = FindFirstAPInvGrp(Session.CompanyID, TransferToGroupID);
            if (APInvGrp == null)
            {
                throw new BLException(Strings.TheGroupIsInvalid, "APInvHed");
            }/* if not available APInvGrp */
            transferInvoice(TransferToGroupID, XferApplyDate);
            updateAPInvGrpFields(cGroupID, out grpTotalInvAmt, out lEnableGenLegalNum);
        }

        /// <summary>
        /// Updates an AP Invoice using a Logged Invoice.
        /// </summary>
        /// <param name="txtGroup"> Group Id </param>
        /// <param name="intVendorNum"> Vendor Num</param>
        /// <param name="txtInvoiceNum"> Invoice Num </param>
        /// <param name="ds"> APInvoice data set </param>
        public void UpdAPInvoiceMatched(string txtGroup, int intVendorNum, string txtInvoiceNum, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            /************IMPORTANT NOTE!!!!!  **************************
            *   I any change is done in this method, the changes needs * 
            *   to be applied too in the method MatchLoggedInvoice    *
            ***********************************************************/
            string txtPOMsg = string.Empty;

            ttAPInvHed = (from ttAPinvHed_Row in ds.APInvHed
                          where !String.IsNullOrEmpty(ttAPinvHed_Row.RowMod)
                          select ttAPinvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
            {
                throw new BLException(Strings.NoAPInvoiceSelected, "APinvHed");
            }

            LogAPInv = LogAPInv.FindFirstByPrimaryKey(Db, Session.CompanyID, intVendorNum, txtInvoiceNum);
            if (LogAPInv == null)
            {
                throw new BLException(Strings.NoLoggedInvoiceFound, "LogAPInv");
            }
            BufferCopy.CopyExceptFor(LogAPInv, ttAPInvHed, LogAPInv.ColumnNames.GroupID, LogAPInv.ColumnNames.SysRowID, LogAPInv.ColumnNames.EntryPerson, LogAPInv.ColumnNames.Posted, LogAPInv.ColumnNames.InvoiceAmt, LogAPInv.ColumnNames.DocInvoiceAmt, LogAPInv.ColumnNames.Rpt1InvoiceAmt, LogAPInv.ColumnNames.Rpt2InvoiceAmt, LogAPInv.ColumnNames.Rpt3InvoiceAmt, LogAPInv.ColumnNames.DocTaxAmt, LogAPInv.ColumnNames.TaxAmt, LogAPInv.ColumnNames.Rpt1TaxAmt, LogAPInv.ColumnNames.Rpt2TaxAmt, LogAPInv.ColumnNames.Rpt3TaxAmt, LogAPInv.ColumnNames.WithholdAmt, LogAPInv.ColumnNames.DocWithholdAmt, LogAPInv.ColumnNames.Rpt1WithholdAmt, LogAPInv.ColumnNames.Rpt2WithholdAmt, LogAPInv.ColumnNames.Rpt3WithholdAmt);
            ttAPInvHed.ReadyToCalc = false;
            if (LogAPInv.REFPONum != 0)
            {
                updRefPONumFields(out txtPOMsg);
                if (!String.IsNullOrEmpty(txtPOMsg))
                {
                    throw new BLException(txtPOMsg, "LogAPInv", "REFPONum");
                }
            }

            if (isPolandLocalization)
            {
                ttAPInvHed.PLVendorAutoInvoiceNum = IsVendorPLAutomaticInvoiceNumber(ttAPInvHed.VendorNum);
            }

            foreach (var bufTranGLC in SelectInvoiceTranGLC(Session.CompanyID, "LogAPInv", Compatibility.Convert.ToString(LogAPInv.VendorNum), LogAPInv.InvoiceNum))
            {
                TranGLC = new Erp.Tables.TranGLC();
                Db.TranGLC.Insert(TranGLC);
                BufferCopy.CopyExceptFor(bufTranGLC, TranGLC, TranGLC.ColumnNames.RelatedToFile, TranGLC.ColumnNames.SysRevID, TranGLC.ColumnNames.SysRowID);
                TranGLC.RelatedToFile = "APInvHed";
            }

            var LogAPInvTaxQuery2 = DBExpressionCompiler.Compile(LogAPInvTaxExpression2);
            foreach (var LogAPInvTax_iterator in (LogAPInvTaxQuery2(Db, ttAPInvHed.Company, ttAPInvHed.InvoiceNum, ttAPInvHed.VendorNum, 1)))
            {
                LogAPInvTax = LogAPInvTax_iterator;
                ttAPInvTax = new Erp.Tablesets.APInvTaxRow();
                CurrentFullTableset.APInvTax.Add(ttAPInvTax);
                BufferCopy.Copy(LogAPInvTax, ref ttAPInvTax);
                ttAPInvTax.RowMod = IceRow.ROWSTATE_ADDED;
                ttAPInvTax.SysRowID = Guid.NewGuid();
                ttAPInvTax.DebitMemo = ttAPInvHed.DebitMemo;
                MatchLoggedScrUpdate();
                APInvTax_Foreign_Link();
            }
            APInvHedAfterGetRows();
            APInvHed_Foreign_Link();
            ttAPInvHed.MatchedFromLI = true;

        }

        /// <summary>
        /// populates grpTotalInvAmt and lEnableGenLegalNum to pass back to UI to update the APInvGrp record.
        /// </summary>
        /// <param name="cGroupID">current GroupID on Invoice</param>
        /// <param name="grpTotalInvAmt">return new TotalInvAmt to update APInvGrp in UI</param>
        /// <param name="lEnableGenLegalNum">flag for UI to determine whether Generate Legal Numbers option is available</param>
        private void updateAPInvGrpFields(string cGroupID, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum)
        {
            grpTotalInvAmt = decimal.Zero;
            lEnableGenLegalNum = false;
            grpTotalInvAmt = 0;


            var APInvHedQuery86 = DBExpressionCompiler.Compile(APInvHedExpression86);
            foreach (var APInvHed_iterator in (APInvHedQuery86(Db, Session.CompanyID, cGroupID, false)))
            {
                var JoinFieldsResult = APInvHed_iterator;
                grpTotalInvAmt = grpTotalInvAmt + JoinFieldsResult.InvoiceAmt;
            }
            lEnableGenLegalNum = false;


            var LegalNumCnfgQuery2 = DBExpressionCompiler.Compile(LegalNumCnfgExpression2);
            LegalNumCnfg = LegalNumCnfgQuery2(Db, Session.CompanyID, "DebitMemo");
            if (LegalNumCnfg != null)
            {


                var APInvHedQuery56 = DBExpressionCompiler.Compile(APInvHedExpression56);
                APInvHed = APInvHedQuery56(Db, Session.CompanyID, cGroupID, true);
                if (APInvHed != null)
                {
                    lEnableGenLegalNum = true;
                }
            }
        }

        /// <summary>
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="cGroupID">current GroupID on Invoice</param>
        /// <param name="cTableName">Indicates the tableName that triggered the update</param>
        /// <param name="runChkCPay">Indicates whether the chkCPayCore method should be called</param>
        /// <param name="runChkBankRef">Indicates whether the chkBankRefCore method should be called</param>
        /// <param name="runChkRevChrg">Indicates whether the chkRevChrgCore method should be called</param>
        /// <param name="suppressUserPrompts">Indicates if user prompts should be suppressed</param>
        /// <param name="grpTotalInvAmt">APInvGrp.BaseAmount to update in UI</param>
        /// <param name="requiresUserInput">Indicates if the legal number requires user input</param>
        /// <param name="opMessage">output message returned to user for response</param>
        /// <param name="opMsgChkBankRef">output message returned to user for response</param>
        /// <param name="opChkRevMsg">output message returned to user for response</param>
        /// <param name="lEnableGenLegalNum">Indicates whether the Generate legal Numbers option should be enabled on action menu</param>
        /// <param name="lUpdateRan">Indicates that the Update process did run</param>
        /// <param name="opDUAMsg">output message returned to user for response</param>
        public void UpdateMaster(ref APInvoiceTableset ds, string cGroupID, string cTableName, bool runChkCPay, bool runChkBankRef, bool runChkRevChrg, bool suppressUserPrompts, out decimal grpTotalInvAmt, out bool requiresUserInput, out string opMessage, out string opMsgChkBankRef, out string opChkRevMsg, out bool lEnableGenLegalNum, out bool lUpdateRan, out string opDUAMsg)
        {
            opDUAMsg = string.Empty;
            BeforeUpdateMaster(ref ds, out opDUAMsg);
            requiresUserInput = false;
            grpTotalInvAmt = decimal.Zero;
            opMessage = string.Empty;
            opMsgChkBankRef = string.Empty;
            opChkRevMsg = string.Empty;
            lEnableGenLegalNum = false;
            lUpdateRan = false;
            CurrentFullTableset = ds;
            string cLegalNumberType = string.Empty;
            lUpdateRan = false;
            opMsgChkBankRef = "";
            opMessage = "";
            opChkRevMsg = "";
            string opError = string.Empty;
            ValidateAmortizationScheduleBeforeUpdate();
            if (StringExtensions.Compare(cTableName, "APInvHed") == 0)
            {


                ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                              where StringExtensions.Compare(ttAPInvHed_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                              select ttAPInvHed_Row).FirstOrDefault();
                if (ttAPInvHed != null)
                {
                    if (runChkCPay)
                    {
                        opMessage = "";
                        chkCPayCore(out opMessage);
                        if (!String.IsNullOrEmpty(opMessage) && suppressUserPrompts == false)
                        {
                            return;
                        }
                    }
                    if (runChkBankRef)
                    {
                        opMsgChkBankRef = "";
                        opError = string.Empty;
                        chkBankRefCore(out opMsgChkBankRef, out opError);
                        if (isNorwayLocalization && !String.IsNullOrEmpty(opError))
                        {
                            throw new BLException(opError, "ttAPInvHed");
                        }
                        if (!String.IsNullOrEmpty(opMsgChkBankRef) && suppressUserPrompts == false)
                        {
                            return;
                        }
                    }
                }

                if (isThaiLocalization)
                {
                    ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                                  where StringExtensions.Compare(ttAPInvHed_Row.RowMod, String.Empty) != 0
                                  select ttAPInvHed_Row).FirstOrDefault();
                    if (ttAPInvHed != null && ttAPInvHed.REFPONum != 0)
                    {
                        POHeader = FindFirstPOHeader(ttAPInvHed.Company, ttAPInvHed.REFPONum);
                        if (POHeader != null)
                        {
                            var RcvDtlQuery = DBExpressionCompiler.Compile(RcvDtlExpression8);
                            foreach (var RcvDtl_iterator in (RcvDtlQuery(Db, POHeader.Company, POHeader.PONum)))
                            {
                                RcvDtl = RcvDtl_iterator;
                                var RcvHeadQuery2 = DBExpressionCompiler.Compile(RcvHeadExpression2);
                                RcvHead = RcvHeadQuery2(Db, RcvDtl.Company, RcvDtl.VendorNum, RcvDtl.PurPoint, RcvDtl.PackSlip);
                                if (RcvHead != null && POHeader.OrderDate > RcvHead.EntryDate)
                                {
                                    throw new BLException(Strings.GoodsReceiptDateMustBeLaterPODate);
                                }
                            }
                        }
                    }
                }
            }
            if (StringExtensions.Compare(cTableName, "APInvDtl") == 0)
            {


                ttAPInvDtl = (from ttAPInvDtl_Row in ds.APInvDtl
                              where StringExtensions.Compare(ttAPInvDtl_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                              select ttAPInvDtl_Row).FirstOrDefault();
                if (ttAPInvDtl != null)
                {
                    if (runChkCPay)
                    {
                        opMessage = "";
                        chkCPayCore(out opMessage);
                        if (!String.IsNullOrEmpty(opMessage) && suppressUserPrompts == false)
                        {
                            return;
                        }
                    }
                    if (runChkRevChrg)
                    {
                        opChkRevMsg = "";
                        chkRevChrgCore(out opChkRevMsg);
                        if (!String.IsNullOrEmpty(opChkRevMsg) && suppressUserPrompts == false)
                        {
                            return;
                        }
                    }
                }
            }

            /* run the regular update  */
            Update(ref ds);
            lUpdateRan = true;
            updateAPInvGrpFields(cGroupID, out grpTotalInvAmt, out lEnableGenLegalNum);
            AfterUpdateMaster(ref ds);
        }

        private void ValidateAmortizationScheduleBeforeUpdate()
        {
            ttAPInvDtlDEASch = CurrentFullTableset.APInvDtlDEASch.
                Where(row => row.RowMod.Compare(IceRow.ROWSTATE_UNCHANGED) != 0 && row.RowMod.Compare(IceRow.ROWSTATE_DELETED) != 0).
                OrderBy(row => row.AmortSeq).LastOrDefault();
            if (ttAPInvDtlDEASch == null)
            {
                return;
            }
            findChangedTTAPInvDtl(ttAPInvDtlDEASch.VendorNum, ttAPInvDtlDEASch.InvoiceNum, ttAPInvDtlDEASch.InvoiceLine);

            calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, true);
            if (ttAPInvDtl.Remaining != 0m && ttAPInvDtl.DocRemaining != 0m)
            {
                throw new BLException(Strings.RemainingMustBeZero);
            }
            else if (ttAPInvDtl.Remaining != 0m)
            {
                ttAPInvDtlDEASch.DspAmortAmt += ttAPInvDtl.Remaining;
                decimal extCost = ttAPInvDtl.DebitMemo ? -ttAPInvDtl.ExtCost : ttAPInvDtl.ExtCost;
                ttAPInvDtlDEASch.AmortPercent = LibRoundAmountEF.RoundDecimalsApply(ttAPInvDtlDEASch.DspAmortAmt * 100m / extCost, ttAPInvDtlDEASch.CurrencyCode, APInvDtlDEASch.GetTableName(), APInvDtlDEASch.ColumnNames.AmortPercent);
            }
            ttAPInvDtlDEASch.DocDspAmortAmt += ttAPInvDtl.DocRemaining;
            ttAPInvDtlDEASch.Rpt1DspAmortAmt += ttAPInvDtl.Rpt1Remaining;
            ttAPInvDtlDEASch.Rpt2DspAmortAmt += ttAPInvDtl.Rpt2Remaining;
            ttAPInvDtlDEASch.Rpt3DspAmortAmt += ttAPInvDtl.Rpt3Remaining;

            calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, true);

            var ttAPInvDtlDEASchAddedRows = CurrentFullTableset.APInvDtlDEASch.Where(row => row.RowMod.Compare(IceRow.ROWSTATE_ADDED) == 0);
            foreach (var ttAPInvDtlDEASchRow in ttAPInvDtlDEASchAddedRows)
            {
                if (CurrentFullTableset.APInvDtlDEASch.Exists(
                    row => row.FiscalYear == ttAPInvDtlDEASchRow.FiscalYear && row.FiscalYearSuffix.Compare(ttAPInvDtlDEASchRow.FiscalYearSuffix) == 0 && row.FiscalPeriod == ttAPInvDtlDEASchRow.FiscalPeriod && row.SysRowID != ttAPInvDtlDEASchRow.SysRowID))
                {
                    if (string.IsNullOrEmpty(ttAPInvDtlDEASchRow.FiscalYearSuffix))
                    {
                        throw new BLException(Strings.ThereIsAlreadyLineForFiscalYearPeriod(ttAPInvDtlDEASchRow.FiscalYear, ttAPInvDtlDEASchRow.FiscalPeriod));
                    }
                    else
                    {
                        throw new BLException(Strings.ThereIsAlreadyLineForFiscalYearSuffixPeriod(ttAPInvDtlDEASchRow.FiscalYear, ttAPInvDtlDEASchRow.FiscalYearSuffix, ttAPInvDtlDEASchRow.FiscalPeriod));
                    }
                }
            }

            var fiscalPeriods = LibCreateAmort.BuildFiscalPeriods(ttAPInvDtl.DEACode, ttAPInvDtl.DEAStartDate, ttAPInvDtl.DEAEndDate);
            validateAllAmortScheduleFiscalPeriods(fiscalPeriods, true);
        }

        private void BeforeUpdateMaster(ref APInvoiceTableset ds, out string opDUAMsg)
        {
            opDUAMsg = string.Empty;
            if (isPeruLocalization)
            {

                ttAPInvHed = (from row in ds.APInvHed
                              where row.Company.KeyEquals(Session.CompanyID) &&
                              String.Compare(row.RowMod, Ice.IceRow.ROWSTATE_ADDED, StringComparison.OrdinalIgnoreCase) == 0 &&
                              String.IsNullOrEmpty(row.InvoiceNum) &&
                              !String.IsNullOrEmpty(row.ImportNum)
                              select row).FirstOrDefault();

                if (ttAPInvHed != null)
                {
                    string tempInvoice = ttAPInvHed.ImportNum;
                    if (this.ExistsUniqueAPImportNum(ttAPInvHed.Company, tempInvoice))
                        opDUAMsg = Strings.DUANoExists(tempInvoice);
                    using (var libCSFPeru = new Internal.CSF.Peru(this.Db))
                    {
                        ttAPInvHed.InvoiceNum = libCSFPeru.GetDUAInvoiceNumber();
                    }
                }
            }
        }

        ///<summary>
        ///
        ///</summary>
        public void UpdGetLogAPInv(ref GetLogAPInvTableset ds)
        {
            ttGetLogAPInvTablesetDS = ds;


            foreach (var ttGetLogAPInv in ds.GetLogAPInv)
            {
                Vendor = Vendor.FindFirstByPrimaryKey(Db, ttGetLogAPInv.Company, ttGetLogAPInv.VendorNum);
                if (Vendor != null)
                {
                    ttGetLogAPInv.VendorNumName = Vendor.Name;
                    ttGetLogAPInv.Inactive = Vendor.Inactive;
                }
            }
        }

        ///<summary>
        ///  Purpose:  Called when matching APinvoices to update PO data.   
        ///  Parameters:  none
        ///  Notes:       
        ///</summary>
        private void updRefPONumFields(out string txtMsg)
        {
            txtMsg = string.Empty;


            POHeader = FindFirstPOHeader(ttAPInvHed.Company, ttAPInvHed.REFPONum);
            if (POHeader != null)
            {
                Vendor = Vendor.FindFirstByPrimaryKey(Db, Session.CompanyID, POHeader.VendorNum);
            }
            ttAPInvHed.VendorNum = ((POHeader != null) ? POHeader.VendorNum : 0);
            ttAPInvHed.VendorNumVendorID = ((Vendor != null) ? Vendor.VendorID : "");
            if (ttAPInvHed.VendorNum != 0)
            {


                POHeader = FindFirstPOHeader(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.REFPONum);
            }
            if (POHeader == null)
            {
                txtMsg = Strings.NInvoiceSupplErrorInvalidReferPONumber(ttAPInvHed.InvoiceNum.Trim(), ttAPInvHed.VendorNumName.Trim());
            }
            /* The PO cannot be the local version of the consolidated po */
            if (IsLocalConsolidatedPO(POHeader.PONum) == true)
            {
                txtMsg = Strings.NInvoiceSupplErrorAConsoPOMayNotBeSelec(ttAPInvHed.InvoiceNum.Trim(), ttAPInvHed.VendorNumName.Trim());
            }
            /* SCR #3119 - do not allow central payment for consolidated PO */
            if (ttAPInvHed.CPay == true && POHeader.ConsolidatedPO == true)
            {
                txtMsg = Strings.NInvoiceSupplErrorAConsoPOMayNotBeSelecForCentral(ttAPInvHed.InvoiceNum.Trim(), ttAPInvHed.VendorNumName.Trim());
            }

            Vendor = Vendor.FindFirstByPrimaryKey(Db, POHeader.Company, POHeader.VendorNum);
            getVendorDefaults();
            /*The Ref PO should populate the Terms from PO and not from Supplier.*/
            if ((ttAPInvHed.DebitMemo == false || isDiscountforDebitM == true) && !String.IsNullOrEmpty(POHeader.TermsCode))
            {
                ttAPInvHed.TermsCode = POHeader.TermsCode;

                PurTerms = PurTerms.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvHed.TermsCode);
                if (PurTerms != null)
                {
                    ttAPInvHed.PayDiscPartPay = PurTerms.PartPayment;
                }
            }
            if (ttAPInvHed.VendorNum == 0)
            {
                ttAPInvHed.InvoiceNum = "";
                ttAPInvHed.InvoiceRef = "";
                ttAPInvHed.ScrInvoiceRef = "";
            }
            if (StringExtensions.Compare(POHeader.CurrencyCode, ttAPInvHed.CurrencyCode) == 0)
            {
                ttAPInvHed.LockRate = POHeader.LockRate;
                ttAPInvHed.RateGrpCode = POHeader.RateGrpCode;
                ttAPInvHed.CurrencyCode = POHeader.CurrencyCode;
            }
            if (POHeader.LockRate && StringExtensions.Compare(POHeader.CurrencyCode, ttAPInvHed.CurrencyCode) == 0)
            {
                ttAPInvHed.ExchangeRate = POHeader.ExchangeRate;
            }
            else
            {
                getExchangeRate("CURR");
            }
            if (ttAPInvHed.LockRate)
            {
                this.LibGetCurrencyRatesEF.FindCurrencyRates("POHeader", Compatibility.Convert.ToString(POHeader.PONum), "", "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            }

            /* If an InvoiceVendorAmount has been entered recalculate the appropriate field */
            if (String.IsNullOrEmpty(pCurrList))
            {
                if (vUseDate == 1)
                {
                    vExDate = APInvHed.InvoiceDate;
                }
                else
                {
                    vExDate = APInvHed.ApplyDate;
                }

                this.LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", "", "", "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
            }

            string fieldNameScrInvoiceVendorAmt = string.Empty;

            if (ttAPInvHed.CurrencySwitch == true && ttAPInvHed.ScrInvoiceVendorAmt != 0)
            {
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.ScrDocInvoiceVendorAmt = ttAPInvHed.ScrInvoiceVendorAmt;
                }
                else
                {
                    ttAPInvHed.ScrDocInvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, false, "ttAPInvHed", "ScrDocInvoiceVendorAmt");

                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrInvoiceVendorAmt = "Rpt" + (i - 1).ToString() + "ScrInvoiceVendorAmt";
                            ttAPInvHed[fieldNameScrInvoiceVendorAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrInvoiceVendorAmt");
                        }
                    }
                }
            }
            else if (ttAPInvHed.CurrencySwitch == false &&
            ttAPInvHed.ScrDocInvoiceVendorAmt != 0)
            {
                if (!Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiCurrencyManagement))
                {
                    ttAPInvHed.ScrInvoiceVendorAmt = ttAPInvHed.ScrDocInvoiceVendorAmt;
                }
                else
                {
                    ttAPInvHed.ScrInvoiceVendorAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(0, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrInvoiceVendorAmt");
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingIceRow(ttAPInvHed, false, "InvoiceVendorAmt", pCurrList, "ttAPInvHed", ttAPInvHed.CurrencyCode, ttChainRows);

                    for (i = 2; i <= 4; i++)
                    {
                        if (pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM) != "")
                        {
                            fieldNameScrInvoiceVendorAmt = "Rpt" + (i - 1).ToString() + "ScrInvoiceVendorAmt";
                            ttAPInvHed[fieldNameScrInvoiceVendorAmt] = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvHed.ScrDocInvoiceVendorAmt, ttAPInvHed.CurrencyCode, pCurrList.Entry(i - 1, Ice.Constants.LIST_DELIM), ttChainRows, true, "ttAPInvHed", "ScrInvoiceVendorAmt");
                        }
                    }
                }
            }/* else do */

            /* Recalculate variance */
            CalcVariance();
            APInvHed_Foreign_Link();
        }

        private void updRevChargeLine(string ipAction)
        {
            Erp.Tables.APInvTax altAPInvTax = null;
            if (ttAPInvTax == null)
            {
                return;
            }
            /* find the other related reverse charge tax line if available */



            var AltAPInvTaxQuery = DBExpressionCompiler.Compile(AltAPInvTaxExpression);
            altAPInvTax = AltAPInvTaxQuery(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum, ttAPInvTax.TaxCode, ttAPInvTax.RateCode, 1);

            /* no need to do anything if not Reverse Charge or EC Acquisition tax line */
            if (StringExtensions.Compare(ipAction, "ADD") != 0 && altAPInvTax == null)
            {
                return;
            }

            switch (ipAction.ToUpperInvariant())
            {
                case "DELETE":
                    if (tmpAPInvTaxRows == null)
                    {
                        tmpAPInvTaxRows = new List<APInvTaxRow>();
                    }

                    tmpAPInvTax = new APInvTaxRow();
                    tmpAPInvTaxRows.Add(tmpAPInvTax);
                    BufferCopy.Copy(altAPInvTax, ref tmpAPInvTax);
                    tmpAPInvTax.SysRowID = altAPInvTax.SysRowID;
                    tmpAPInvTax.RowMod = IceRow.ROWSTATE_DELETED;
                    /* delete the other related reverse charge tax line */
                    Db.APInvTax.Delete(altAPInvTax);
                    return;
                case "UPDATE":
                    {
                        altAPInvTax.Manual = ttAPInvTax.Manual;
                        altAPInvTax.Percent = ttAPInvTax.Percent;
                        altAPInvTax.TaxAmt = -(ttAPInvTax.TaxAmt);
                        altAPInvTax.DocTaxAmt = -(ttAPInvTax.DocTaxAmt);
                        altAPInvTax.Rpt1TaxAmt = -(ttAPInvTax.Rpt1TaxAmt);
                        altAPInvTax.Rpt2TaxAmt = -(ttAPInvTax.Rpt2TaxAmt);
                        altAPInvTax.Rpt3TaxAmt = -(ttAPInvTax.Rpt3TaxAmt);
                        altAPInvTax.TaxableAmt = -(ttAPInvTax.TaxableAmt);
                        altAPInvTax.DocTaxableAmt = -(ttAPInvTax.DocTaxableAmt);
                        altAPInvTax.Rpt1TaxableAmt = -(ttAPInvTax.Rpt1TaxableAmt);
                        altAPInvTax.Rpt2TaxableAmt = -(ttAPInvTax.Rpt2TaxableAmt);
                        altAPInvTax.Rpt3TaxableAmt = -(ttAPInvTax.Rpt3TaxableAmt);
                        altAPInvTax.ReportableAmt = -(ttAPInvTax.ReportableAmt);
                        altAPInvTax.DocReportableAmt = -(ttAPInvTax.DocReportableAmt);
                        altAPInvTax.Rpt1ReportableAmt = -(ttAPInvTax.Rpt1ReportableAmt);
                        altAPInvTax.Rpt2ReportableAmt = -(ttAPInvTax.Rpt2ReportableAmt);
                        altAPInvTax.Rpt3ReportableAmt = -(ttAPInvTax.Rpt3ReportableAmt);
                        altAPInvTax.SysCalcTaxableAmt = -(ttAPInvTax.SysCalcTaxableAmt);
                        altAPInvTax.SysCalcDocTaxableAmt = -(ttAPInvTax.SysCalcDocTaxableAmt);
                        altAPInvTax.SysCalcReportableAmt = -(ttAPInvTax.SysCalcReportableAmt);
                        altAPInvTax.SysCalcDocReportableAmt = -(ttAPInvTax.SysCalcDocReportableAmt);
                        altAPInvTax.TaxAmtVar = -(ttAPInvTax.TaxAmtVar);
                        altAPInvTax.DocTaxAmtVar = -(ttAPInvTax.DocTaxAmtVar);
                        altAPInvTax.Rpt1TaxAmtVar = -(ttAPInvTax.Rpt1TaxAmtVar);
                        altAPInvTax.Rpt2TaxAmtVar = -(ttAPInvTax.Rpt2TaxAmtVar);
                        altAPInvTax.Rpt3TaxAmtVar = -(ttAPInvTax.Rpt3TaxAmtVar);
                        Db.Validate(altAPInvTax);
                    }
                    break;
                case "ADD":
                    {
                        if (ttAPInvTax.ReverseCharge)
                        {
                            altAPInvTax = new Erp.Tables.APInvTax();
                            Db.APInvTax.Insert(altAPInvTax);
                            altAPInvTax.Company = ttAPInvTax.Company;
                            altAPInvTax.VendorNum = ttAPInvTax.VendorNum;
                            altAPInvTax.InvoiceNum = ttAPInvTax.InvoiceNum;
                            altAPInvTax.TaxCode = ttAPInvTax.TaxCode;
                            altAPInvTax.RateCode = ttAPInvTax.RateCode;
                            altAPInvTax.ECAcquisitionSeq = 1;  /* 2ND TAX RECORD FOR ECACQUISITIONS OR REVERSE CHARGES */
                            altAPInvTax.ReverseCharge = ttAPInvTax.ReverseCharge;
                            altAPInvTax.Manual = ttAPInvTax.Manual;
                            altAPInvTax.Percent = ttAPInvTax.Percent;
                            altAPInvTax.TaxAmt = -(ttAPInvTax.TaxAmt);
                            altAPInvTax.DocTaxAmt = -(ttAPInvTax.DocTaxAmt);
                            altAPInvTax.Rpt1TaxAmt = -(ttAPInvTax.Rpt1TaxAmt);
                            altAPInvTax.Rpt2TaxAmt = -(ttAPInvTax.Rpt2TaxAmt);
                            altAPInvTax.Rpt3TaxAmt = -(ttAPInvTax.Rpt3TaxAmt);
                            altAPInvTax.TaxableAmt = -(ttAPInvTax.TaxableAmt);
                            altAPInvTax.DocTaxableAmt = -(ttAPInvTax.DocTaxableAmt);
                            altAPInvTax.Rpt1TaxableAmt = -(ttAPInvTax.Rpt1TaxableAmt);
                            altAPInvTax.Rpt2TaxableAmt = -(ttAPInvTax.Rpt2TaxableAmt);
                            altAPInvTax.Rpt3TaxableAmt = -(ttAPInvTax.Rpt3TaxableAmt);
                            altAPInvTax.ReportableAmt = -(ttAPInvTax.ReportableAmt);
                            altAPInvTax.DocReportableAmt = -(ttAPInvTax.DocReportableAmt);
                            altAPInvTax.Rpt1ReportableAmt = -(ttAPInvTax.Rpt1ReportableAmt);
                            altAPInvTax.Rpt2ReportableAmt = -(ttAPInvTax.Rpt2ReportableAmt);
                            altAPInvTax.Rpt3ReportableAmt = -(ttAPInvTax.Rpt3ReportableAmt);
                            altAPInvTax.SysCalcTaxableAmt = -(ttAPInvTax.SysCalcTaxableAmt);
                            altAPInvTax.SysCalcDocTaxableAmt = -(ttAPInvTax.SysCalcDocTaxableAmt);
                            altAPInvTax.SysCalcReportableAmt = -(ttAPInvTax.SysCalcReportableAmt);
                            altAPInvTax.SysCalcDocReportableAmt = -(ttAPInvTax.SysCalcDocReportableAmt);
                            altAPInvTax.TaxAmtVar = -(ttAPInvTax.TaxAmtVar);
                            altAPInvTax.DocTaxAmtVar = -(ttAPInvTax.DocTaxAmtVar);
                            altAPInvTax.Rpt1TaxAmtVar = -(ttAPInvTax.Rpt1TaxAmtVar);
                            altAPInvTax.Rpt2TaxAmtVar = -(ttAPInvTax.Rpt2TaxAmtVar);
                            altAPInvTax.Rpt3TaxAmtVar = -(ttAPInvTax.Rpt3TaxAmtVar);
                            Db.Validate(altAPInvTax);
                        }
                    }
                    break;
            }
        }

        private void updRevTaxHedMsc(string ipAction)
        {

            Erp.Tables.APInvHedMscTax revAPInvHedMscTax = null;

            if (ttAPInvHedMscTax == null)
            {
                return;
            }
            /* find the other related reverse charge tax line if available */

            revAPInvHedMscTax = FindFirstAPInvHedMscTaxWithUpdLock(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum, ttAPInvHedMscTax.MscNum, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode, ttAPInvHedMscTax.ECAcquisitionSeq);

            /* no need to do anything if not Reverse Charge or EC Acquisition tax line */
            if (StringExtensions.Compare(ipAction, "ADD") != 0 && revAPInvHedMscTax == null)
            {
                return;
            }

            switch (ipAction.ToUpperInvariant())
            {
                case "DELETE":
                    Db.APInvHedMscTax.Delete(revAPInvHedMscTax);
                    return;
                case "UPDATE":
                    {
                        revAPInvHedMscTax.Manual = ttAPInvHedMscTax.Manual;
                        revAPInvHedMscTax.Percent = ttAPInvHedMscTax.Percent;
                        revAPInvHedMscTax.TaxAmt = -(ttAPInvHedMscTax.TaxAmt);
                        revAPInvHedMscTax.DocTaxAmt = -(ttAPInvHedMscTax.DocTaxAmt);
                        revAPInvHedMscTax.Rpt1TaxAmt = -(ttAPInvHedMscTax.Rpt1TaxAmt);
                        revAPInvHedMscTax.Rpt2TaxAmt = -(ttAPInvHedMscTax.Rpt2TaxAmt);
                        revAPInvHedMscTax.Rpt3TaxAmt = -(ttAPInvHedMscTax.Rpt3TaxAmt);
                        revAPInvHedMscTax.TaxableAmt = -(ttAPInvHedMscTax.TaxableAmt);
                        revAPInvHedMscTax.DocTaxableAmt = -(ttAPInvHedMscTax.DocTaxableAmt);
                        revAPInvHedMscTax.Rpt1TaxableAmt = -(ttAPInvHedMscTax.Rpt1TaxableAmt);
                        revAPInvHedMscTax.Rpt2TaxableAmt = -(ttAPInvHedMscTax.Rpt2TaxableAmt);
                        revAPInvHedMscTax.Rpt3TaxableAmt = -(ttAPInvHedMscTax.Rpt3TaxableAmt);
                        revAPInvHedMscTax.ReportableAmt = -(ttAPInvHedMscTax.ReportableAmt);
                        revAPInvHedMscTax.DocReportableAmt = -(ttAPInvHedMscTax.DocReportableAmt);
                        revAPInvHedMscTax.Rpt1ReportableAmt = -(ttAPInvHedMscTax.Rpt1ReportableAmt);
                        revAPInvHedMscTax.Rpt2ReportableAmt = -(ttAPInvHedMscTax.Rpt2ReportableAmt);
                        revAPInvHedMscTax.Rpt3ReportableAmt = -(ttAPInvHedMscTax.Rpt3ReportableAmt);
                        revAPInvHedMscTax.SysCalcTaxableAmt = -(ttAPInvHedMscTax.SysCalcTaxableAmt);
                        revAPInvHedMscTax.SysCalcDocTaxableAmt = -(ttAPInvHedMscTax.SysCalcDocTaxableAmt);
                        revAPInvHedMscTax.SysCalcReportableAmt = -(ttAPInvHedMscTax.SysCalcReportableAmt);
                        revAPInvHedMscTax.SysCalcDocReportableAmt = -(ttAPInvHedMscTax.SysCalcDocReportableAmt);
                        revAPInvHedMscTax.TaxAmtVar = -(ttAPInvHedMscTax.TaxAmtVar);
                        revAPInvHedMscTax.DocTaxAmtVar = -(ttAPInvHedMscTax.DocTaxAmtVar);
                        revAPInvHedMscTax.Rpt1TaxAmtVar = -(ttAPInvHedMscTax.Rpt1TaxAmtVar);
                        revAPInvHedMscTax.Rpt2TaxAmtVar = -(ttAPInvHedMscTax.Rpt2TaxAmtVar);
                        revAPInvHedMscTax.Rpt3TaxAmtVar = -(ttAPInvHedMscTax.Rpt3TaxAmtVar);
                        revAPInvHedMscTax.DedTaxAmt = -(ttAPInvHedMscTax.DedTaxAmt);
                        revAPInvHedMscTax.DocDedTaxAmt = -(ttAPInvHedMscTax.DocDedTaxAmt);
                        revAPInvHedMscTax.Rpt1DedTaxAmt = -(ttAPInvHedMscTax.Rpt1DedTaxAmt);
                        revAPInvHedMscTax.Rpt2DedTaxAmt = -(ttAPInvHedMscTax.Rpt2DedTaxAmt);
                        revAPInvHedMscTax.Rpt3DedTaxAmt = -(ttAPInvHedMscTax.Rpt3DedTaxAmt);
                        revAPInvHedMscTax.FixedAmount = -(ttAPInvHedMscTax.FixedAmount);
                        revAPInvHedMscTax.DocFixedAmount = -(ttAPInvHedMscTax.DocFixedAmount);
                        revAPInvHedMscTax.Rpt1FixedAmount = -(ttAPInvHedMscTax.Rpt1FixedAmount);
                        revAPInvHedMscTax.Rpt2FixedAmount = -(ttAPInvHedMscTax.Rpt2FixedAmount);
                        revAPInvHedMscTax.Rpt3FixedAmount = -(ttAPInvHedMscTax.Rpt3FixedAmount);
                        Db.Validate(revAPInvHedMscTax);
                    }
                    break;
                case "ADD":
                    {
                        if (ttAPInvHedMscTax.ReverseCharge || (ttAPInvHedMscTax.CollectionType == 2 || ttAPInvHedMscTax.CollectionType == 3))
                        {
                            revAPInvHedMscTax = new Erp.Tables.APInvHedMscTax();
                            Db.APInvHedMscTax.Insert(revAPInvHedMscTax);
                            revAPInvHedMscTax.Company = ttAPInvHedMscTax.Company;
                            revAPInvHedMscTax.VendorNum = ttAPInvHedMscTax.VendorNum;
                            revAPInvHedMscTax.InvoiceNum = ttAPInvHedMscTax.InvoiceNum;
                            revAPInvHedMscTax.TaxCode = ttAPInvHedMscTax.TaxCode;
                            revAPInvHedMscTax.RateCode = ttAPInvHedMscTax.RateCode;
                            revAPInvHedMscTax.ECAcquisitionSeq = 1;
                            revAPInvHedMscTax.MscNum = ttAPInvHedMscTax.MscNum;
                            revAPInvHedMscTax.APInvMscSysRowID = ttAPInvHedMscTax.APInvMscSysRowID;
                            revAPInvHedMscTax.MiscCode = ttAPInvHedMscTax.MiscCode;
                            revAPInvHedMscTax.CollectionType = ttAPInvHedMscTax.CollectionType;
                            revAPInvHedMscTax.Timing = ttAPInvHedMscTax.Timing;
                            revAPInvHedMscTax.ReverseCharge = ttAPInvHedMscTax.ReverseCharge;
                            revAPInvHedMscTax.Manual = ttAPInvHedMscTax.Manual;
                            revAPInvHedMscTax.Percent = ttAPInvHedMscTax.Percent;
                            revAPInvHedMscTax.TaxAmt = -(ttAPInvHedMscTax.TaxAmt);
                            revAPInvHedMscTax.DocTaxAmt = -(ttAPInvHedMscTax.DocTaxAmt);
                            revAPInvHedMscTax.Rpt1TaxAmt = -(ttAPInvHedMscTax.Rpt1TaxAmt);
                            revAPInvHedMscTax.Rpt2TaxAmt = -(ttAPInvHedMscTax.Rpt2TaxAmt);
                            revAPInvHedMscTax.Rpt3TaxAmt = -(ttAPInvHedMscTax.Rpt3TaxAmt);
                            revAPInvHedMscTax.TaxableAmt = -(ttAPInvHedMscTax.TaxableAmt);
                            revAPInvHedMscTax.DocTaxableAmt = -(ttAPInvHedMscTax.DocTaxableAmt);
                            revAPInvHedMscTax.Rpt1TaxableAmt = -(ttAPInvHedMscTax.Rpt1TaxableAmt);
                            revAPInvHedMscTax.Rpt2TaxableAmt = -(ttAPInvHedMscTax.Rpt2TaxableAmt);
                            revAPInvHedMscTax.Rpt3TaxableAmt = -(ttAPInvHedMscTax.Rpt3TaxableAmt);
                            revAPInvHedMscTax.ReportableAmt = -(ttAPInvHedMscTax.ReportableAmt);
                            revAPInvHedMscTax.DocReportableAmt = -(ttAPInvHedMscTax.DocReportableAmt);
                            revAPInvHedMscTax.Rpt1ReportableAmt = -(ttAPInvHedMscTax.Rpt1ReportableAmt);
                            revAPInvHedMscTax.Rpt2ReportableAmt = -(ttAPInvHedMscTax.Rpt2ReportableAmt);
                            revAPInvHedMscTax.Rpt3ReportableAmt = -(ttAPInvHedMscTax.Rpt3ReportableAmt);
                            revAPInvHedMscTax.SysCalcTaxableAmt = -(ttAPInvHedMscTax.SysCalcTaxableAmt);
                            revAPInvHedMscTax.SysCalcDocTaxableAmt = -(ttAPInvHedMscTax.SysCalcDocTaxableAmt);
                            revAPInvHedMscTax.SysCalcReportableAmt = -(ttAPInvHedMscTax.SysCalcReportableAmt);
                            revAPInvHedMscTax.SysCalcDocReportableAmt = -(ttAPInvHedMscTax.SysCalcDocReportableAmt);
                            revAPInvHedMscTax.TaxAmtVar = -(ttAPInvHedMscTax.TaxAmtVar);
                            revAPInvHedMscTax.DocTaxAmtVar = -(ttAPInvHedMscTax.DocTaxAmtVar);
                            revAPInvHedMscTax.Rpt1TaxAmtVar = -(ttAPInvHedMscTax.Rpt1TaxAmtVar);
                            revAPInvHedMscTax.Rpt2TaxAmtVar = -(ttAPInvHedMscTax.Rpt2TaxAmtVar);
                            revAPInvHedMscTax.Rpt3TaxAmtVar = -(ttAPInvHedMscTax.Rpt3TaxAmtVar);
                            revAPInvHedMscTax.DedTaxAmt = -(ttAPInvHedMscTax.DedTaxAmt);
                            revAPInvHedMscTax.DocDedTaxAmt = -(ttAPInvHedMscTax.DocDedTaxAmt);
                            revAPInvHedMscTax.Rpt1DedTaxAmt = -(ttAPInvHedMscTax.Rpt1DedTaxAmt);
                            revAPInvHedMscTax.Rpt2DedTaxAmt = -(ttAPInvHedMscTax.Rpt2DedTaxAmt);
                            revAPInvHedMscTax.Rpt3DedTaxAmt = -(ttAPInvHedMscTax.Rpt3DedTaxAmt);
                            revAPInvHedMscTax.FixedAmount = -(ttAPInvHedMscTax.FixedAmount);
                            revAPInvHedMscTax.DocFixedAmount = -(ttAPInvHedMscTax.DocFixedAmount);
                            revAPInvHedMscTax.Rpt1FixedAmount = -(ttAPInvHedMscTax.Rpt1FixedAmount);
                            revAPInvHedMscTax.Rpt2FixedAmount = -(ttAPInvHedMscTax.Rpt2FixedAmount);
                            revAPInvHedMscTax.Rpt3FixedAmount = -(ttAPInvHedMscTax.Rpt3FixedAmount);
                            Db.Validate(revAPInvHedMscTax);
                        }
                    }
                    break;
            }
        }

        private void updRevTaxLine(string ipAction)
        {
            Erp.Tables.APLnTax revAPLnTax = null;

            if (ttAPLnTax == null)
            {
                return;
            }
            /* find the other related reverse charge tax line if available */
            revAPLnTax = this.FindFirstAPLnTaxWithUpdLock(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum, ttAPLnTax.InvoiceLine, ttAPLnTax.TaxCode, ttAPLnTax.RateCode, ttAPLnTax.ECAcquisitionSeq);


            /* no need to do anything if not Reverse Charge or EC Acquisition tax line */
            if (StringExtensions.Compare(ipAction, "ADD") != 0 && revAPLnTax == null)
            {
                return;
            }

            switch (ipAction.ToUpperInvariant())
            {
                case "DELETE":
                    Db.APLnTax.Delete(revAPLnTax);
                    return;
                case "UPDATE":
                    {
                        revAPLnTax.Manual = ttAPLnTax.Manual;
                        revAPLnTax.Percent = ttAPLnTax.Percent;
                        revAPLnTax.TaxAmt = -(ttAPLnTax.TaxAmt);
                        revAPLnTax.DocTaxAmt = -(ttAPLnTax.DocTaxAmt);
                        revAPLnTax.Rpt1TaxAmt = -(ttAPLnTax.Rpt1TaxAmt);
                        revAPLnTax.Rpt2TaxAmt = -(ttAPLnTax.Rpt2TaxAmt);
                        revAPLnTax.Rpt3TaxAmt = -(ttAPLnTax.Rpt3TaxAmt);
                        revAPLnTax.TaxableAmt = -(ttAPLnTax.TaxableAmt);
                        revAPLnTax.DocTaxableAmt = -(ttAPLnTax.DocTaxableAmt);
                        revAPLnTax.Rpt1TaxableAmt = -(ttAPLnTax.Rpt1TaxableAmt);
                        revAPLnTax.Rpt2TaxableAmt = -(ttAPLnTax.Rpt2TaxableAmt);
                        revAPLnTax.Rpt3TaxableAmt = -(ttAPLnTax.Rpt3TaxableAmt);
                        revAPLnTax.ReportableAmt = -(ttAPLnTax.ReportableAmt);
                        revAPLnTax.DocReportableAmt = -(ttAPLnTax.DocReportableAmt);
                        revAPLnTax.Rpt1ReportableAmt = -(ttAPLnTax.Rpt1ReportableAmt);
                        revAPLnTax.Rpt2ReportableAmt = -(ttAPLnTax.Rpt2ReportableAmt);
                        revAPLnTax.Rpt3ReportableAmt = -(ttAPLnTax.Rpt3ReportableAmt);
                        revAPLnTax.SysCalcTaxableAmt = -(ttAPLnTax.SysCalcTaxableAmt);
                        revAPLnTax.SysCalcDocTaxableAmt = -(ttAPLnTax.SysCalcDocTaxableAmt);
                        revAPLnTax.SysCalcReportableAmt = -(ttAPLnTax.SysCalcReportableAmt);
                        revAPLnTax.SysCalcDocReportableAmt = -(ttAPLnTax.SysCalcDocReportableAmt);
                        revAPLnTax.TaxAmtVar = -(ttAPLnTax.TaxAmtVar);
                        revAPLnTax.DocTaxAmtVar = -(ttAPLnTax.DocTaxAmtVar);
                        revAPLnTax.Rpt1TaxAmtVar = -(ttAPLnTax.Rpt1TaxAmtVar);
                        revAPLnTax.Rpt2TaxAmtVar = -(ttAPLnTax.Rpt2TaxAmtVar);
                        revAPLnTax.Rpt3TaxAmtVar = -(ttAPLnTax.Rpt3TaxAmtVar);
                        revAPLnTax.DedTaxAmt = -(ttAPLnTax.DedTaxAmt);
                        revAPLnTax.DocDedTaxAmt = -(ttAPLnTax.DocDedTaxAmt);
                        revAPLnTax.Rpt1DedTaxAmt = -(ttAPLnTax.Rpt1DedTaxAmt);
                        revAPLnTax.Rpt2DedTaxAmt = -(ttAPLnTax.Rpt2DedTaxAmt);
                        revAPLnTax.Rpt3DedTaxAmt = -(ttAPLnTax.Rpt3DedTaxAmt);
                        revAPLnTax.FixedAmount = -(ttAPLnTax.FixedAmount);
                        revAPLnTax.DocFixedAmount = -(ttAPLnTax.DocFixedAmount);
                        revAPLnTax.Rpt1FixedAmount = -(ttAPLnTax.Rpt1FixedAmount);
                        revAPLnTax.Rpt2FixedAmount = -(ttAPLnTax.Rpt2FixedAmount);
                        revAPLnTax.Rpt3FixedAmount = -(ttAPLnTax.Rpt3FixedAmount);
                        Db.Validate(revAPLnTax);
                    }
                    break;
                case "ADD":
                    {
                        if (ttAPLnTax.ReverseCharge || (ttAPLnTax.CollectionType == 2 || ttAPLnTax.CollectionType == 3))
                        {
                            revAPLnTax = new Erp.Tables.APLnTax();
                            Db.APLnTax.Insert(revAPLnTax);
                            revAPLnTax.Company = ttAPLnTax.Company;
                            revAPLnTax.VendorNum = ttAPLnTax.VendorNum;
                            revAPLnTax.InvoiceNum = ttAPLnTax.InvoiceNum;
                            revAPLnTax.InvoiceLine = ttAPLnTax.InvoiceLine;
                            revAPLnTax.TaxCode = ttAPLnTax.TaxCode;
                            revAPLnTax.RateCode = ttAPLnTax.RateCode;
                            revAPLnTax.ECAcquisitionSeq = 1;
                            revAPLnTax.CollectionType = ttAPLnTax.CollectionType;
                            revAPLnTax.Timing = ttAPLnTax.Timing;
                            revAPLnTax.ReverseCharge = ttAPLnTax.ReverseCharge;
                            revAPLnTax.Manual = ttAPLnTax.Manual;
                            revAPLnTax.Percent = ttAPLnTax.Percent;
                            revAPLnTax.TaxAmt = -(ttAPLnTax.TaxAmt);
                            revAPLnTax.DocTaxAmt = -(ttAPLnTax.DocTaxAmt);
                            revAPLnTax.Rpt1TaxAmt = -(ttAPLnTax.Rpt1TaxAmt);
                            revAPLnTax.Rpt2TaxAmt = -(ttAPLnTax.Rpt2TaxAmt);
                            revAPLnTax.Rpt3TaxAmt = -(ttAPLnTax.Rpt3TaxAmt);
                            revAPLnTax.TaxableAmt = -(ttAPLnTax.TaxableAmt);
                            revAPLnTax.DocTaxableAmt = -(ttAPLnTax.DocTaxableAmt);
                            revAPLnTax.Rpt1TaxableAmt = -(ttAPLnTax.Rpt1TaxableAmt);
                            revAPLnTax.Rpt2TaxableAmt = -(ttAPLnTax.Rpt2TaxableAmt);
                            revAPLnTax.Rpt3TaxableAmt = -(ttAPLnTax.Rpt3TaxableAmt);
                            revAPLnTax.ReportableAmt = -(ttAPLnTax.ReportableAmt);
                            revAPLnTax.DocReportableAmt = -(ttAPLnTax.DocReportableAmt);
                            revAPLnTax.Rpt1ReportableAmt = -(ttAPLnTax.Rpt1ReportableAmt);
                            revAPLnTax.Rpt2ReportableAmt = -(ttAPLnTax.Rpt2ReportableAmt);
                            revAPLnTax.Rpt3ReportableAmt = -(ttAPLnTax.Rpt3ReportableAmt);
                            revAPLnTax.SysCalcTaxableAmt = -(ttAPLnTax.SysCalcTaxableAmt);
                            revAPLnTax.SysCalcDocTaxableAmt = -(ttAPLnTax.SysCalcDocTaxableAmt);
                            revAPLnTax.SysCalcReportableAmt = -(ttAPLnTax.SysCalcReportableAmt);
                            revAPLnTax.SysCalcDocReportableAmt = -(ttAPLnTax.SysCalcDocReportableAmt);
                            revAPLnTax.TaxAmtVar = -(ttAPLnTax.TaxAmtVar);
                            revAPLnTax.DocTaxAmtVar = -(ttAPLnTax.DocTaxAmtVar);
                            revAPLnTax.Rpt1TaxAmtVar = -(ttAPLnTax.Rpt1TaxAmtVar);
                            revAPLnTax.Rpt2TaxAmtVar = -(ttAPLnTax.Rpt2TaxAmtVar);
                            revAPLnTax.Rpt3TaxAmtVar = -(ttAPLnTax.Rpt3TaxAmtVar);
                            revAPLnTax.DedTaxAmt = -(ttAPLnTax.DedTaxAmt);
                            revAPLnTax.DocDedTaxAmt = -(ttAPLnTax.DocDedTaxAmt);
                            revAPLnTax.Rpt1DedTaxAmt = -(ttAPLnTax.Rpt1DedTaxAmt);
                            revAPLnTax.Rpt2DedTaxAmt = -(ttAPLnTax.Rpt2DedTaxAmt);
                            revAPLnTax.Rpt3DedTaxAmt = -(ttAPLnTax.Rpt3DedTaxAmt);
                            revAPLnTax.FixedAmount = -(ttAPLnTax.FixedAmount);
                            revAPLnTax.DocFixedAmount = -(ttAPLnTax.DocFixedAmount);
                            revAPLnTax.Rpt1FixedAmount = -(ttAPLnTax.Rpt1FixedAmount);
                            revAPLnTax.Rpt2FixedAmount = -(ttAPLnTax.Rpt2FixedAmount);
                            revAPLnTax.Rpt3FixedAmount = -(ttAPLnTax.Rpt3FixedAmount);
                            Db.Validate(revAPLnTax);
                        }
                    }
                    break;
            }
        }

        private void updRevTaxLnMsc(string ipAction)
        {

            Erp.Tables.APInvLnMscTax revAPInvLnMscTax = null;

            if (ttAPInvLnMscTax == null)
            {
                return;
            }
            /* find the other related reverse charge tax line if available */

            revAPInvLnMscTax = FindFirstAPInvLnMscTaxWithUpdLock(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum, ttAPInvLnMscTax.InvoiceLine, ttAPInvLnMscTax.MscNum, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode, ttAPInvLnMscTax.ECAcquisitionSeq);

            /* no need to do anything if not Reverse Charge or EC Acquisition tax line */
            if (StringExtensions.Compare(ipAction, "ADD") != 0 && revAPInvLnMscTax == null)
            {
                return;
            }

            switch (ipAction.ToUpperInvariant())
            {
                case "DELETE":
                    Db.APInvLnMscTax.Delete(revAPInvLnMscTax);
                    return;
                case "UPDATE":
                    {
                        revAPInvLnMscTax.Manual = ttAPInvLnMscTax.Manual;
                        revAPInvLnMscTax.Percent = ttAPInvLnMscTax.Percent;
                        revAPInvLnMscTax.TaxAmt = -(ttAPInvLnMscTax.TaxAmt);
                        revAPInvLnMscTax.DocTaxAmt = -(ttAPInvLnMscTax.DocTaxAmt);
                        revAPInvLnMscTax.Rpt1TaxAmt = -(ttAPInvLnMscTax.Rpt1TaxAmt);
                        revAPInvLnMscTax.Rpt2TaxAmt = -(ttAPInvLnMscTax.Rpt2TaxAmt);
                        revAPInvLnMscTax.Rpt3TaxAmt = -(ttAPInvLnMscTax.Rpt3TaxAmt);
                        revAPInvLnMscTax.TaxableAmt = -(ttAPInvLnMscTax.TaxableAmt);
                        revAPInvLnMscTax.DocTaxableAmt = -(ttAPInvLnMscTax.DocTaxableAmt);
                        revAPInvLnMscTax.Rpt1TaxableAmt = -(ttAPInvLnMscTax.Rpt1TaxableAmt);
                        revAPInvLnMscTax.Rpt2TaxableAmt = -(ttAPInvLnMscTax.Rpt2TaxableAmt);
                        revAPInvLnMscTax.Rpt3TaxableAmt = -(ttAPInvLnMscTax.Rpt3TaxableAmt);
                        revAPInvLnMscTax.ReportableAmt = -(ttAPInvLnMscTax.ReportableAmt);
                        revAPInvLnMscTax.DocReportableAmt = -(ttAPInvLnMscTax.DocReportableAmt);
                        revAPInvLnMscTax.Rpt1ReportableAmt = -(ttAPInvLnMscTax.Rpt1ReportableAmt);
                        revAPInvLnMscTax.Rpt2ReportableAmt = -(ttAPInvLnMscTax.Rpt2ReportableAmt);
                        revAPInvLnMscTax.Rpt3ReportableAmt = -(ttAPInvLnMscTax.Rpt3ReportableAmt);
                        revAPInvLnMscTax.SysCalcTaxableAmt = -(ttAPInvLnMscTax.SysCalcTaxableAmt);
                        revAPInvLnMscTax.SysCalcDocTaxableAmt = -(ttAPInvLnMscTax.SysCalcDocTaxableAmt);
                        revAPInvLnMscTax.SysCalcReportableAmt = -(ttAPInvLnMscTax.SysCalcReportableAmt);
                        revAPInvLnMscTax.SysCalcDocReportableAmt = -(ttAPInvLnMscTax.SysCalcDocReportableAmt);
                        revAPInvLnMscTax.TaxAmtVar = -(ttAPInvLnMscTax.TaxAmtVar);
                        revAPInvLnMscTax.DocTaxAmtVar = -(ttAPInvLnMscTax.DocTaxAmtVar);
                        revAPInvLnMscTax.Rpt1TaxAmtVar = -(ttAPInvLnMscTax.Rpt1TaxAmtVar);
                        revAPInvLnMscTax.Rpt2TaxAmtVar = -(ttAPInvLnMscTax.Rpt2TaxAmtVar);
                        revAPInvLnMscTax.Rpt3TaxAmtVar = -(ttAPInvLnMscTax.Rpt3TaxAmtVar);
                        revAPInvLnMscTax.DedTaxAmt = -(ttAPInvLnMscTax.DedTaxAmt);
                        revAPInvLnMscTax.DocDedTaxAmt = -(ttAPInvLnMscTax.DocDedTaxAmt);
                        revAPInvLnMscTax.Rpt1DedTaxAmt = -(ttAPInvLnMscTax.Rpt1DedTaxAmt);
                        revAPInvLnMscTax.Rpt2DedTaxAmt = -(ttAPInvLnMscTax.Rpt2DedTaxAmt);
                        revAPInvLnMscTax.Rpt3DedTaxAmt = -(ttAPInvLnMscTax.Rpt3DedTaxAmt);
                        revAPInvLnMscTax.FixedAmount = -(ttAPInvLnMscTax.FixedAmount);
                        revAPInvLnMscTax.DocFixedAmount = -(ttAPInvLnMscTax.DocFixedAmount);
                        revAPInvLnMscTax.Rpt1FixedAmount = -(ttAPInvLnMscTax.Rpt1FixedAmount);
                        revAPInvLnMscTax.Rpt2FixedAmount = -(ttAPInvLnMscTax.Rpt2FixedAmount);
                        revAPInvLnMscTax.Rpt3FixedAmount = -(ttAPInvLnMscTax.Rpt3FixedAmount);
                        Db.Validate(revAPInvLnMscTax);
                    }
                    break;
                case "ADD":
                    {
                        if (ttAPInvLnMscTax.ReverseCharge || (ttAPInvLnMscTax.CollectionType == 2 || ttAPInvLnMscTax.CollectionType == 3))
                        {
                            revAPInvLnMscTax = new Erp.Tables.APInvLnMscTax();
                            Db.APInvLnMscTax.Insert(revAPInvLnMscTax);
                            revAPInvLnMscTax.Company = ttAPInvLnMscTax.Company;
                            revAPInvLnMscTax.VendorNum = ttAPInvLnMscTax.VendorNum;
                            revAPInvLnMscTax.InvoiceNum = ttAPInvLnMscTax.InvoiceNum;
                            revAPInvLnMscTax.InvoiceLine = ttAPInvLnMscTax.InvoiceLine;
                            revAPInvLnMscTax.TaxCode = ttAPInvLnMscTax.TaxCode;
                            revAPInvLnMscTax.RateCode = ttAPInvLnMscTax.RateCode;
                            revAPInvLnMscTax.ECAcquisitionSeq = 1;
                            revAPInvLnMscTax.MscNum = ttAPInvLnMscTax.MscNum;
                            revAPInvLnMscTax.MiscCode = ttAPInvLnMscTax.MiscCode;
                            revAPInvLnMscTax.APInvMscSysRowID = ttAPInvLnMscTax.APInvMscSysRowID;
                            revAPInvLnMscTax.CollectionType = ttAPInvLnMscTax.CollectionType;
                            revAPInvLnMscTax.Timing = ttAPInvLnMscTax.Timing;
                            revAPInvLnMscTax.ReverseCharge = ttAPInvLnMscTax.ReverseCharge;
                            revAPInvLnMscTax.Manual = ttAPInvLnMscTax.Manual;
                            revAPInvLnMscTax.Percent = ttAPInvLnMscTax.Percent;
                            revAPInvLnMscTax.TaxAmt = -(ttAPInvLnMscTax.TaxAmt);
                            revAPInvLnMscTax.DocTaxAmt = -(ttAPInvLnMscTax.DocTaxAmt);
                            revAPInvLnMscTax.Rpt1TaxAmt = -(ttAPInvLnMscTax.Rpt1TaxAmt);
                            revAPInvLnMscTax.Rpt2TaxAmt = -(ttAPInvLnMscTax.Rpt2TaxAmt);
                            revAPInvLnMscTax.Rpt3TaxAmt = -(ttAPInvLnMscTax.Rpt3TaxAmt);
                            revAPInvLnMscTax.TaxableAmt = -(ttAPInvLnMscTax.TaxableAmt);
                            revAPInvLnMscTax.DocTaxableAmt = -(ttAPInvLnMscTax.DocTaxableAmt);
                            revAPInvLnMscTax.Rpt1TaxableAmt = -(ttAPInvLnMscTax.Rpt1TaxableAmt);
                            revAPInvLnMscTax.Rpt2TaxableAmt = -(ttAPInvLnMscTax.Rpt2TaxableAmt);
                            revAPInvLnMscTax.Rpt3TaxableAmt = -(ttAPInvLnMscTax.Rpt3TaxableAmt);
                            revAPInvLnMscTax.ReportableAmt = -(ttAPInvLnMscTax.ReportableAmt);
                            revAPInvLnMscTax.DocReportableAmt = -(ttAPInvLnMscTax.DocReportableAmt);
                            revAPInvLnMscTax.Rpt1ReportableAmt = -(ttAPInvLnMscTax.Rpt1ReportableAmt);
                            revAPInvLnMscTax.Rpt2ReportableAmt = -(ttAPInvLnMscTax.Rpt2ReportableAmt);
                            revAPInvLnMscTax.Rpt3ReportableAmt = -(ttAPInvLnMscTax.Rpt3ReportableAmt);
                            revAPInvLnMscTax.SysCalcTaxableAmt = -(ttAPInvLnMscTax.SysCalcTaxableAmt);
                            revAPInvLnMscTax.SysCalcDocTaxableAmt = -(ttAPInvLnMscTax.SysCalcDocTaxableAmt);
                            revAPInvLnMscTax.SysCalcReportableAmt = -(ttAPInvLnMscTax.SysCalcReportableAmt);
                            revAPInvLnMscTax.SysCalcDocReportableAmt = -(ttAPInvLnMscTax.SysCalcDocReportableAmt);
                            revAPInvLnMscTax.TaxAmtVar = -(ttAPInvLnMscTax.TaxAmtVar);
                            revAPInvLnMscTax.DocTaxAmtVar = -(ttAPInvLnMscTax.DocTaxAmtVar);
                            revAPInvLnMscTax.Rpt1TaxAmtVar = -(ttAPInvLnMscTax.Rpt1TaxAmtVar);
                            revAPInvLnMscTax.Rpt2TaxAmtVar = -(ttAPInvLnMscTax.Rpt2TaxAmtVar);
                            revAPInvLnMscTax.Rpt3TaxAmtVar = -(ttAPInvLnMscTax.Rpt3TaxAmtVar);
                            revAPInvLnMscTax.DedTaxAmt = -(ttAPInvLnMscTax.DedTaxAmt);
                            revAPInvLnMscTax.DocDedTaxAmt = -(ttAPInvLnMscTax.DocDedTaxAmt);
                            revAPInvLnMscTax.Rpt1DedTaxAmt = -(ttAPInvLnMscTax.Rpt1DedTaxAmt);
                            revAPInvLnMscTax.Rpt2DedTaxAmt = -(ttAPInvLnMscTax.Rpt2DedTaxAmt);
                            revAPInvLnMscTax.Rpt3DedTaxAmt = -(ttAPInvLnMscTax.Rpt3DedTaxAmt);
                            revAPInvLnMscTax.FixedAmount = -(ttAPInvLnMscTax.FixedAmount);
                            revAPInvLnMscTax.DocFixedAmount = -(ttAPInvLnMscTax.DocFixedAmount);
                            revAPInvLnMscTax.Rpt1FixedAmount = -(ttAPInvLnMscTax.Rpt1FixedAmount);
                            revAPInvLnMscTax.Rpt2FixedAmount = -(ttAPInvLnMscTax.Rpt2FixedAmount);
                            revAPInvLnMscTax.Rpt3FixedAmount = -(ttAPInvLnMscTax.Rpt3FixedAmount);
                            Db.Validate(revAPInvLnMscTax);
                        }
                    }
                    break;
            }
        }

        /// <summary>
        /// Method to call to determine if Purchase Codes are in use or not.  They are 
        /// only in use when Financial Integration is implemented with Purchase Types.
        /// </summary>
        /// <param name="UsePurchaseCode">True if purchase codes are in use; otherwise false</param>
        public void UsePurchaseCode(out bool UsePurchaseCode)
        {
            UsePurchaseCode = false;


            var XbSystQuery2 = DBExpressionCompiler.Compile(XbSystExpression2);
            UsePurchaseCode = (XbSystQuery2(Db, Session.CompanyID, true));
        }

        private void validateConfiguration()
        {
            if (!ExistsAPSyst(Session.CompanyID))
            {
                throw new BLException(Strings.AValidAPSystemControlRecordIsRequi, "APInvHed");
            }
        }

        /// <summary>
        /// Validate Banking References
        /// </summary>
        /// <param name="ipGroupID"> Group ID </param>
        /// <param name="cErrorMsg"></param>
        public bool ValidateBankRefs(string ipGroupID, out string cErrorMsg)
        {
            cErrorMsg = string.Empty;
            if (!isNorwayLocalization)
            {
                return true;
            }
            var APInvHedQuery91 = DBExpressionCompiler.Compile(APInvHedExpression91);
            foreach (var APInvHed_iterator in (APInvHedQuery91(Db, Session.CompanyID, ipGroupID)))
            {
                APInvHed = APInvHed_iterator;
                var bVendor = Vendor.FindFirstByPrimaryKey(Db, Session.CompanyID, APInvHed.VendorNum);
                if (bVendor != null && !bVendor.NoBankingReference)
                {
                    cErrorMsg += "\n" + APInvHed.InvoiceNum;
                }
            }
            if (!string.IsNullOrEmpty(cErrorMsg))
            {
                cErrorMsg = Strings.BankingReferenceIsEmptyForInvoices(cErrorMsg);
                return false;
            }
            return true;
        }


        /// <summary>
        /// Validate InvoiceID and return a true if a logged invoice exist for it.
        /// </summary>
        /// <param name="txtVendorID"> Vendor ID </param>
        /// <param name="txtInvoiceNum"> Invoice Num</param>
        /// <param name="intVendorNum"> Returns VendorNum as a character </param>
        /// <param name="logAPInvFound"> </param>
        public void ValidateInvoiceID(string txtVendorID, string txtInvoiceNum, out int intVendorNum, out bool logAPInvFound)
        {
            intVendorNum = 0;
            logAPInvFound = false;
            int _intVendorNum = intVendorNum;
            logAPInvFound = false;

            if (isTaiwanLocalization)
            {
                if (ExistsAPInvHed(Session.CompanyID, txtInvoiceNum))
                {
                    throw new BLException(Strings.GUIUnique, "APInvHed", "InvoiceNum");
                }
            }


            var VendorQuery21 = DBExpressionCompiler.Compile(VendorExpression21);
            Vendor = VendorQuery21(Db, Session.CompanyID, txtVendorID);
            if (Vendor == null)
            {
                throw new BLException(Strings.InvalidSupplier, "vendor", "VendorID");
            }
            intVendorNum = Vendor.VendorNum;

            _intVendorNum = intVendorNum;
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, _intVendorNum, txtInvoiceNum);
            if (APInvHed != null)
            {
                if (APInvHed.InvoiceType.Equals("BOE", StringComparison.OrdinalIgnoreCase))
                {
                    throw new BLException(Strings.ThisInvoiceAlreadyExistsAsABillOfExchaForTheSelec, "APinvHed", "InvoiceNum");
                }
                else
                {
                    throw new BLException(Strings.ThisInvoiceAlreadyExistsForTheSelecSuppl, "APinvHed", "InvoiceNum");
                }
            }



            _intVendorNum = intVendorNum;
            var LogAPInvQuery5 = DBExpressionCompiler.Compile(LogAPInvExpression5);
            LogAPInv = LogAPInvQuery5(Db, Session.CompanyID, _intVendorNum, txtInvoiceNum);
            if (LogAPInv != null)
            {
                if (LogAPInv.Void == true)
                {
                    throw new BLException(Strings.SelecInvoiceAlreadyExistsAsALoggedInvoiceAndHas, "LogAPInv");
                }
                else if (LogAPInv.Approved == false)
                {
                    throw new BLException(Strings.SelecInvoiceAlreadyExistsAsALoggedInvoiceButHas, "LogAPInv");
                }
                logAPInvFound = true;
            }
        }

        private void validateLineBOE()
        {
            Erp.Tables.APInvHed RefApInvHed = null;
            decimal AllowedBalance = decimal.Zero;


            RefApInvHed = FindFirstAPInvHed(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceRef);
            if (RefApInvHed == null)
            {
                throw new BLException(Strings.InvoiceReferenceNotFound, "ttApInvDtl", "InvoiceRef");
            }
            if ((BIttAPInvDtl == null ||
                (BIttAPInvDtl != null && !BIttAPInvDtl.InvoiceRef.KeyEquals(ttAPInvDtl.InvoiceRef))) &&
                !String.IsNullOrEmpty(RefApInvHed.ReferencedByBOE) && RefApInvHed.DocUnpostedBal == 0)
            {
                throw new BLException(Strings.TheInvoiceIsAlreadyAssigToABillOfExchaInvoice, "ttApInvDtl", "InvoiceRef");
            }
            AllowedBalance = RefApInvHed.DocUnpostedBal - ttAPInvDtl.DocPEDetAmt + ((BIttAPInvDtl != null) ? BIttAPInvDtl.DocUnitCost : 0);
            if (ttAPInvDtl.DocUnitCost > AllowedBalance)
            {
                throw new BLException(Strings.BOEAmountShouldBeLesserThanTheReferInvoiceBalance, "ttAPInvDtl", "UnitCost");
            }
        }

        private void validateLineInvoiceRef(int inVendorNum, string inInvoiceNum, string inNewInvoiceRef)
        {
            Erp.Tables.APInvHed RefApInvHed = null;
            Erp.Tables.APInvHed CurApInvHed = null;

            if (inInvoiceNum.Compare(inNewInvoiceRef) == 0)
            {
                throw new BLException(Strings.ExistInvoiceNumberCannotBeTheSameAsTheNewInvoice);
            }


            RefApInvHed = this.FindFirstAPInvHed(Session.CompanyID, ttAPInvDtl.VendorNum, inNewInvoiceRef);
            if (RefApInvHed == null)
            {
                throw new BLException(Strings.ReferenceInvoiceNotFound, "ttApInvDtl", "InvoiceRef");
            }

            if (ExistsAPInvDtlByInvoiceRef(Session.CompanyID, ttAPInvDtl.VendorNum, inNewInvoiceRef, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, false))
            {
                throw new BLException(Strings.ReferenceInvoiceIsAlreadyReferencedByUnpostedBOE, "ttApInvDtl", "InvoiceRef");
            }


            CurApInvHed = this.FindFirstAPInvHed(Session.CompanyID, inVendorNum, inInvoiceNum);
            if (CurApInvHed == null)
            {
                throw new BLException(Strings.InvoiceNotFound, "ttApInvDtl", "InvoiceNum");
            }
            if (CurApInvHed.VendorNum != RefApInvHed.VendorNum)
            {
                ExceptionManager.AddBLException(Strings.ReferInvoiceSupplDoesNotMatchTheInvoiceSuppl, "ttApInvDtl", "InvoiceRef");
            }
            if (RefApInvHed.Posted == false)
            {
                ExceptionManager.AddBLException(Strings.ReferenceInvoiceMustBePosted, "ttApInvDtl", "InvoiceRef");
            }
            if (RefApInvHed.OpenPayable == false)
            {
                ExceptionManager.AddBLException(Strings.ReferenceInvoiceMustBeOpen, "ttApInvDtl", "InvoiceRef");
            }

            /* InvoiceRef currencies must match for all lines */


            if (this.ExistsRefAPInvHed(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, RefApInvHed.CurrencyCode))
            {
                ExceptionManager.AddBLException(Strings.TheCurreForAllInvoiceReferLinkedToTheBillOfExcha, "ttApInvDtl", "InvoiceRef");
            }

            ExceptionManager.AssertNoBLExceptions();
        }

        private void validateMiscChrg(string cMiscCode, bool lCurrencySwitch, decimal dScrMiscAmt, decimal dScrDocMiscAmt, string cTableName)
        {


            var PurMiscQuery12 = DBExpressionCompiler.Compile(PurMiscExpression12);
            if (!((PurMiscQuery12(Db, Session.CompanyID, cMiscCode))))
            {
                ExceptionManager.AddBLException(Strings.InvalidMiscellaneousChargeCode, cTableName, "MiscCode");
            }
            if ((lCurrencySwitch == true && dScrMiscAmt == 0) ||
                (lCurrencySwitch == false && dScrDocMiscAmt == 0))
            {
                ExceptionManager.AddBLException(Strings.InvalidMisceChargeAmount, cTableName, "MiscCode");
            }
            ExceptionManager.AssertNoBLExceptions();
        }

        /// <summary>
        /// Method to call when changing the rate code on a tax record.  Validates the rate and tax code 
        /// </summary>
        /// <param name="proposedRateCode">The proposed rate code</param>
        /// <param name="ds">The APInvoice data set</param>      
        public void ValidateTaxRateCodes(string proposedRateCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;


            ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                          where StringExtensions.Lookup(modList, ttAPInvTax_Row.RowMod) != -1
                          select ttAPInvTax_Row).FirstOrDefault();
            if (ttAPInvTax == null)
            {
                throw new BLException(Strings.APInvoiceTaxCriteNotAvail, "APInvTax");
            }
            valTaxRateCodeCore(proposedRateCode);
        }

        /// <summary>
        /// Method to call when changing the rate code on a tax record.  Validates the rate and tax code 
        /// </summary>
        /// <param name="proposedRateCode">The proposed rate code</param>
        private void valTaxRateCodeCore(string proposedRateCode)
        {


            var SalesTaxQuery6 = DBExpressionCompiler.Compile(SalesTaxExpression6);
            SalesTax = SalesTaxQuery6(Db, Session.CompanyID, ttAPInvTax.TaxCode);
            if (SalesTax == null)
            {
                throw new BLException(Strings.InvalidTaxCode, "APInvTax", "TaxCode");
            }
            if (!String.IsNullOrEmpty(proposedRateCode))
            {


                var TaxRateQuery11 = DBExpressionCompiler.Compile(TaxRateExpression11);
                TaxRate = TaxRateQuery11(Db, Session.CompanyID, ttAPInvTax.TaxCode, proposedRateCode);
                if (TaxRate == null)
                {
                    throw new BLException(Strings.InvalidRateCode, "APInvTax", "RateCode");
                }
            }


            var APInvTaxQuery17 = DBExpressionCompiler.Compile(APInvTaxExpression17);
            if ((APInvTaxQuery17(Db, ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum, ttAPInvTax.TaxCode, proposedRateCode, ttAPInvTax.SysRowID)))
            {
                throw new BLException(Strings.ATaxLineAlreadyExistsForTaxCode(SalesTax.Description), "APInvTax", "TaxCode");
            }
            APInvTax_Foreign_Link();
        }


        #region RecurringInvoices
        /// <summary>
        /// Method to call when changing the CycleCode 
        /// </summary>
        /// <param name="ipVendorNum">The vendor number of the invoice</param>
        /// <param name="ipInvoiceNum">The invoice number.</param>
        /// <param name="ipCycleCode">Proposed cycle code </param>
        /// <param name="ds">The APInvoice data set</param>
        public void OnChangeCycleCode(int ipVendorNum, string ipInvoiceNum, string ipCycleCode, ref APInvoiceTableset ds)
        {
            if (string.IsNullOrEmpty(ipCycleCode))
            {
                throw new BLException(GlobalStrings.CycleCodeRequired);
            }
            var RecurringCycleColResult = this.FindFirstRecurringCycle(Session.CompanyID, ipCycleCode);
            if (RecurringCycleColResult == null)
            {
                throw new BLException(GlobalStrings.InvalidCycleCode(ipCycleCode));
            }
            if (RecurringCycleColResult.Inactive == true)
            {
                throw new BLException(GlobalStrings.InactiveCycleCode(ipCycleCode));
            }
            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where StringExtensions.Compare(ttAPInvHed_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                          select ttAPInvHed_Row).FirstOrDefault();
            ttAPInvHed.CycleCode = ipCycleCode;
            ttAPInvHed.Duration = RecurringCycleColResult.Duration;
            ttAPInvHed.MaxValueAmt = 0;
            ttAPInvHed.DocMaxValueAmt = 0;
            ttAPInvHed.Rpt1MaxValueAmt = 0;
            ttAPInvHed.Rpt2MaxValueAmt = 0;
            ttAPInvHed.Rpt3MaxValueAmt = 0;
            ttAPInvHed.HoldInvoice = RecurringCycleColResult.HoldInvoice;
            ttAPInvHed.CopyLatestInvoice = RecurringCycleColResult.CopyLatestInvoice;
            ttAPInvHed.CycleInactive = RecurringCycleColResult.Inactive;
            ttAPInvHed.OverrideEndDate = false;
            ttAPInvHed.EndDate = null;
            ttAPInvHed.RecurSource = true;
            ttAPInvHed.IsMaxValue = RecurringCycleColResult.MaximumValue;
            ttAPInvHed.InstanceNum = 1;
        }

        /// <summary>
        /// Method to call when changing the CycleCode 
        /// </summary>
        /// <param name="ipVendorNum">The vendor number of the invoice</param>
        /// <param name="ipInvoiceNum">The invoice number.</param>
        /// <param name="ipRecurring">Proposed recurring flag </param>
        /// <param name="ds">The APInvoice data set</param>
        public void OnChangeRecurring(int ipVendorNum, string ipInvoiceNum, bool ipRecurring, ref APInvoiceTableset ds)
        {
            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where ttAPInvHed_Row.Company.KeyEquals(Session.CompanyID) &&
                          ttAPInvHed_Row.VendorNum == ipVendorNum &&
                          ttAPInvHed_Row.InvoiceNum.KeyEquals(ipInvoiceNum) &&
                          StringExtensions.Compare(ttAPInvHed_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed == null)
                throw new BLException(GlobalStrings.RecordNotFound("ttAPInvHed"));
            ttAPInvHed.CycleCode = string.Empty;
            ttAPInvHed.Duration = 0;
            ttAPInvHed.MaxValueAmt = 0;
            ttAPInvHed.DocMaxValueAmt = 0;
            ttAPInvHed.Rpt1MaxValueAmt = 0;
            ttAPInvHed.Rpt2MaxValueAmt = 0;
            ttAPInvHed.Rpt3MaxValueAmt = 0;
            ttAPInvHed.HoldInvoice = false;
            ttAPInvHed.CopyLatestInvoice = false;
            ttAPInvHed.CycleInactive = false;
            ttAPInvHed.OverrideEndDate = false;
            ttAPInvHed.RecurSource = ipRecurring;
            ttAPInvHed.InstanceNum = 1;
            ttAPInvHed.RecurBalance = 0;
            ttAPInvHed.DocRecurBalance = 0;
            ttAPInvHed.Rpt1RecurBalance = 0;
            ttAPInvHed.Rpt2RecurBalance = 0;
            ttAPInvHed.Rpt3RecurBalance = 0;
            ttAPInvHed.EndDate = null;
            ttAPInvHed.SourceInvoiceNum = string.Empty;
            ttAPInvHed.TotalInstanceNum = 0;
            ttAPInvHed.CumulativeBalance = 0;
            ttAPInvHed.DocCumulativeBalance = 0;
            ttAPInvHed.Rpt1CumulativeBalance = 0;
            ttAPInvHed.Rpt2CumulativeBalance = 0;
            ttAPInvHed.Rpt3CumulativeBalance = 0;
            ttAPInvHed.SourceRecurBalance = 0;
            ttAPInvHed.DocSourceRecurBalance = 0;
            ttAPInvHed.Rpt1SourceRecurBalance = 0;
            ttAPInvHed.Rpt2SourceRecurBalance = 0;
            ttAPInvHed.Rpt3SourceRecurBalance = 0;
            ttAPInvHed.IsLatestRecurrence = false;
            ttAPInvHed.SourceLastDate = null;

        }

        /// <summary>
        /// Creates Recurring invoices from Source.
        /// </summary>
        /// <param name="ipVendorList">Vendors for which source invoices should be taken</param>
        /// <param name="ipCycleCodesList">Cycle Codes for which source invoices should be taken</param>
        /// <param name="ipSelectedVendorNum">Vendors of selected invoices</param>
        /// <param name="ipSelectedInvoiceNum">Numbers of selected invoice</param>
        /// <param name="ipNewGroupID">Group ID for new invoice</param>
        /// <param name="ipFirstDayOfWeek">First day of the week from Client system settings</param>
        /// <param name="opNewInvoiceNum">Messages - invoices created</param>
        /// <param name="opErrMsg">Error messages</param>
        /// <param name="inactiveVendorMsg">Message shown if the Vendor is Inactive.</param>
        public void CreateRecurInvoice(string ipVendorList, string ipCycleCodesList, string ipSelectedVendorNum, string ipSelectedInvoiceNum, string ipNewGroupID, int ipFirstDayOfWeek, out string opNewInvoiceNum, out string opErrMsg, out string inactiveVendorMsg)
        {
            opErrMsg = string.Empty;
            opNewInvoiceNum = string.Empty;
            string cWho = string.Empty;
            DateTime? nextInvoiceDate = null;
            int cycleInterval = 0;
            DateTime? lastDate = null;
            int billingDay = 0;
            int billingDayDiff = 0;
            bool holdInvoice = false;
            int lastDayOfMonth = 0;
            int instanceNum = 0;
            DateTime? cutoffDate = null;
            string srcInvoiceNum = string.Empty;
            string msgNumInvoices = string.Empty;
            int srcVendorNum = 0;
            string newInvoiceNum = string.Empty;
            bool bProceed = true;
            bool bInActive = false;
            int latestPostedInstanceNum = 0;
            string latestPostedInvoiceNum = string.Empty;
            inactiveVendorMsg = string.Empty;

            int i = 0;
            int numInvoices = 0;
            Erp.Tables.APInvHed newAPInvHed = null;

            int invoicePos = -1;
            int vendorPos = -1;
            bool invoiceFound = true;

            APInvGrp = FindFirstAPInvGrp(Session.CompanyID, ipNewGroupID);
            if (APInvGrp == null)
            {
                throw new BLException(Strings.APInvGrpNotFound, "APInvGrp", "GroupID");
            }
            cutoffDate = APInvGrp.ApplyDate;

            if (PELock.IsDocumentLock(Session.CompanyID, "APInvGrp", ipNewGroupID, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty))
            {
                ExceptionManager.AddBLException(PELock.LockMessage);
                ExceptionManager.AssertNoBLExceptions();
            }

            using (TransactionScope createInvTrans = ErpContext.CreateDefaultTransactionScope())
            {

                foreach (var APInvHed_iterator in (this.SelectAPInvHedWithUpdLock(Session.CompanyID)))
                {
                    APInvHed = APInvHed_iterator;
                    Vendor = FindFirstVendor(APInvHed.Company, APInvHed.VendorNum);

                    /* Skip Inactive Sources */
                    if (APInvHed.CycleInactive == true)
                    {
                        continue;
                    }
                    if (Vendor.Inactive)
                    {
                        inactiveVendorMsg = Strings.InactiveSupplierRecurringInvoice;
                        continue;
                    }

                    bInActive = APInvHed.CycleInactive;        /* Skip CycleCodes if filter is specified */
                    if ((!String.IsNullOrEmpty(ipCycleCodesList) && ipCycleCodesList.Lookup(Compatibility.Convert.ToString(APInvHed.CycleCode), Ice.Constants.LIST_DELIM[0]) == -1))
                    {
                        continue;
                    }
                    if ((!String.IsNullOrEmpty(ipVendorList) && ipVendorList.Lookup(Compatibility.Convert.ToString(APInvHed.VendorNum), Ice.Constants.LIST_DELIM[0]) == -1))
                    {
                        continue;
                    }



                    if (!String.IsNullOrEmpty(ipSelectedInvoiceNum))
                    {
                        invoicePos = -1;
                        vendorPos = -1;
                        invoiceFound = false;
                        invoicePos = ipSelectedInvoiceNum.Lookup((APInvHed.InvoiceNum), Ice.Constants.LIST_DELIM[0]);
                        vendorPos = ipSelectedVendorNum.Lookup(Compatibility.Convert.ToString(APInvHed.VendorNum), Ice.Constants.LIST_DELIM[0]);
                        if ((invoicePos > -1) && (vendorPos > -1))
                        {
                            invoiceFound = true;
                        }

                    }
                    else
                    {
                        invoiceFound = true;
                    }

                    if (invoiceFound == true)
                    {
                        RecurringCycle = this.FindFirstRecurringCycle2(Session.CompanyID, APInvHed.CycleCode);
                        if (RecurringCycle == null)
                        {
                            throw new BLException(Strings.RecurringCycleNotFound, "RecurringCycle", "CycleCode");
                        }


                        srcInvoiceNum = APInvHed.InvoiceNum;
                        srcVendorNum = APInvHed.VendorNum;
                        if (APInvHed.CopyLatestInvoice == true)
                        {

                            for (i = 0; i <= APInvHed.InstanceNum; i++)
                            {

                                latestPostedInstanceNum = Compatibility.Convert.ToInt32((APInvHed.InstanceNum - i));
                                latestPostedInvoiceNum = APInvHed.InvoiceNum + "-" + Compatibility.Convert.ToString(latestPostedInstanceNum);

                                var latestPostedAPInvHedColumnsResult = this.FindFirstAPInvHed20(Session.CompanyID, APInvHed.InvoiceNum, latestPostedInvoiceNum, APInvHed.VendorNum, true);

                                //latestPostedAPInvHed.InvoiceNum = latestPostedAPInvHedColumnsResult.InvoiceN//latestPostedAPInvHed.Posted = latestPostedAPInvHedColumnsResult.Posted;
                                if (latestPostedAPInvHedColumnsResult != null)
                                {
                                    srcInvoiceNum = latestPostedAPInvHedColumnsResult.InvoiceNum;
                                    break;
                                }

                            }
                        } //copy latest invoice

                        while (!(bInActive))
                        {
                            cycleInterval = Compatibility.Convert.ToInt32(RecurringCycle.Interval);
                            lastDate = APInvHed.LastDate;
                            billingDay = Compatibility.Convert.ToInt32(RecurringCycle.BillingDay);
                            holdInvoice = RecurringCycle.HoldInvoice;
                            /*Get nextInvoiceDate*/
                            if (RecurringCycle.Modifier.Compare("D") == 0)
                            {
                                nextInvoiceDate = lastDate.Value.AddDays(cycleInterval);
                            }

                            if (RecurringCycle.Modifier.Compare("W") == 0)
                            {
                                nextInvoiceDate = lastDate.Value.AddDays(cycleInterval * 7);
                                if ((Convert.ToInt32(((DateTime)nextInvoiceDate).DayOfWeek) + 1) != billingDay)
                                {
                                    billingDayDiff = billingDay - (Convert.ToInt32(((DateTime)nextInvoiceDate).DayOfWeek) + 1);
                                    if (ipFirstDayOfWeek > (Convert.ToInt32(((DateTime)nextInvoiceDate).DayOfWeek) + 1))
                                    {
                                        if (billingDay > ipFirstDayOfWeek)
                                        {
                                            nextInvoiceDate = nextInvoiceDate.Value.AddDays(billingDayDiff - 7);
                                        }
                                        else
                                        {
                                            nextInvoiceDate = nextInvoiceDate.Value.AddDays(billingDayDiff);
                                        }
                                    }
                                    else
                                    {
                                        if (billingDay <= ipFirstDayOfWeek)
                                        {
                                            nextInvoiceDate = nextInvoiceDate.Value.AddDays(billingDayDiff + 7);

                                        }
                                        else
                                        {
                                            if (billingDayDiff > 0)
                                            {
                                                nextInvoiceDate = nextInvoiceDate.Value.AddDays(billingDayDiff);
                                            }
                                            else
                                            {
                                                nextInvoiceDate = nextInvoiceDate.Value.AddDays(billingDayDiff + 7);
                                            }
                                        }
                                    }
                                }
                            }
                            if (RecurringCycle.Modifier.Compare("M") == 0)
                            {
                                nextInvoiceDate = lastDate.Value.AddMonths(cycleInterval);
                                if (((DateTime)nextInvoiceDate).Day != RecurringCycle.BillingDay)
                                {
                                    lastDayOfMonth = DateTime.DaysInMonth(nextInvoiceDate.Value.Year, nextInvoiceDate.Value.Month);
                                    if (lastDayOfMonth >= billingDay)
                                    {
                                        nextInvoiceDate = new DateTime(((DateTime)nextInvoiceDate).Year, ((DateTime)nextInvoiceDate).Month, billingDay);
                                    }
                                    else
                                    {
                                        nextInvoiceDate = new DateTime(((DateTime)nextInvoiceDate).Year, ((DateTime)nextInvoiceDate).Month, lastDayOfMonth);
                                    }
                                }
                            }
                            instanceNum = Compatibility.Convert.ToInt32(APInvHed.InstanceNum + 1);
                            bProceed = true;            /* Maximum Value is un-checked */
                            if (RecurringCycle.MaximumValue == false)
                            {
                                if (APInvHed.OverrideEndDate == true)
                                {
                                    if (nextInvoiceDate > APInvHed.EndDate)
                                    {
                                        bProceed = false;
                                    }
                                }
                                else
                                {
                                    if (instanceNum > APInvHed.Duration)
                                    {
                                        bProceed = false;
                                    }
                                }
                            }
                            if (nextInvoiceDate > cutoffDate)
                            {
                                bProceed = false;
                            }

                            if (bProceed)
                            {
                                newInvoiceNum = APInvHed.InvoiceNum + "-" + Compatibility.Convert.ToString(instanceNum - 1);
                                // newAPInvHed = new Erp.Tables.APInvHed();
                                //Db.APInvHed.Insert(newAPInvHed);
                                //Db.Local010.Insert(newLocal010);
                                //BufferCopy.CopyExceptFor(Local010, newLocal010, Local010.ColumnNames.Key2, Local010.ColumnNames.CheckBox05, Local010.ColumnNames.Number06, Local010.ColumnNames.SysRowID, Local010.ColumnNames.SysRevID);
                                //newAPInvHed.InvoiceNum = newInvoiceNum;
                                //newAPInvHed.RecurSource = false;
                                //newAPInvHed.InstanceNum = instanceNum;
                                //newAPInvHed.LastDate = nextInvoiceDate;
                                //Db.Validate(newAPInvHed);


                                //run ap/CopyAPInvoice.p (input no,
                                //           input ipNewGroupID,
                                //           input srcVendorNum,
                                //           input srcInvoiceNum,
                                //           input newInvoiceNum,
                                //           input Local010.Key2,
                                //           input nextInvoiceDate,
                                //           input nextInvoiceDate,
                                //           input Local010.CheckBox01,
                                //           output opErrMsg).

                                // this.LibGenerateRecInv.RunGenerateRecInv(IP_groupID, IP_customersList, IP_cycleCodesList, IP_firstDayOfweek, "", logicalBillToFlag, IP_cutoff_date, out Invoices, out numInvoices, out msgNumInvoices, out msgLOCErrors, out grpTotalInvAmt);
                                this.LibCopyAPInvoice.RunCopyAPInvoice(false, ipNewGroupID, srcVendorNum, srcInvoiceNum, newInvoiceNum, APInvHed.InvoiceNum, nextInvoiceDate, nextInvoiceDate, APInvHed.HoldInvoice, out opErrMsg);

                                if (String.IsNullOrEmpty(opErrMsg))
                                {

                                    newAPInvHed = this.FindFirstAPInvHedWithUpdLock(Session.CompanyID, srcVendorNum, newInvoiceNum);
                                    if (newAPInvHed == null)
                                    {
                                        throw new BLException(Strings.InvoiceHeaderNotFound, "APInvHed", "InvoiceNum");
                                    }
                                    newAPInvHed.RecurSource = false;
                                    newAPInvHed.InstanceNum = instanceNum;
                                    newAPInvHed.LastDate = nextInvoiceDate;

                                    if (isNorwayLocalization)
                                        newAPInvHed.SEBankRef = string.Empty;
                                    APInvHed.InstanceNum = instanceNum;
                                    APInvHed.LastDate = newAPInvHed.InvoiceDate;
                                    if (RecurringCycle.MaximumValue == false)
                                    {
                                        if (APInvHed.OverrideEndDate == true)
                                        {
                                            bInActive = (nextInvoiceDate == APInvHed.EndDate);
                                        }
                                        else
                                        {
                                            bInActive = (instanceNum == APInvHed.Duration);
                                        }
                                    }
                                    else
                                    {
                                        if (APInvHed.DocRecurBalance >= APInvHed.DocMaxValueAmt)
                                        {
                                            bInActive = true;
                                            if (APInvHed.DocRecurBalance > APInvHed.DocMaxValueAmt)
                                            {
                                                newAPInvHed.InvoiceHeld = true;
                                            }
                                            //Db.Validate(newAPInvHed);
                                        }
                                    }
                                    Db.Validate(newAPInvHed);
                                    Db.Release(ref newAPInvHed);
                                    APInvHed.CycleInactive = bInActive;
                                    numInvoices = numInvoices + 1;
                                }
                                else
                                {
                                    //throw new BLException(Strings.OpErrMsg);
                                }
                            }
                            else
                            {
                                bInActive = true;
                            }
                        }/* do while not(bInActive) */
                        Db.Validate(APInvHed);
                    }
                }     //For each Source Invoice


                Db.Validate();
                opNewInvoiceNum = Compatibility.Convert.ToString(numInvoices) + ' ' + Strings.RecInvoicesCreated;

                createInvTrans.Complete();
            }  // end of transaction scope


        }


        /// <summary>
        /// Invoices Recurring
        /// </summary>
        /// <param name="vendorNum">Vendor number</param>
        /// <param name="invoiceNum">Invoice number</param>
        /// <param name="ds">Recurring Invoices.</param>

        public void GetAPInvcRecurr(int vendorNum, string invoiceNum, ref APRecurringInvTableset ds)
        {
            APInvcRecurrRow ttAPInvcRecurr = null;
            APInvHed currInvoice = this.FindFirstAPInvHed(Session.CompanyID, vendorNum, invoiceNum);

            if (currInvoice == null)
                throw new BLException(Strings.Sourceinvoiceisnotfound);

            ttAPInvcRecurr = new APInvcRecurrRow();
            ds.APInvcRecurr.Add(ttAPInvcRecurr);
            ttAPInvcRecurr.Company = Session.CompanyID;
            ttAPInvcRecurr.VendorNum = currInvoice.VendorNum;
            ttAPInvcRecurr.InvoiceNum = currInvoice.InvoiceNum;
            ttAPInvcRecurr.InvoiceRef = currInvoice.InvoiceRef;
            ttAPInvcRecurr.InstanceNum = 1;
            ttAPInvcRecurr.InvoiceDate = currInvoice.InvoiceDate;
            ttAPInvcRecurr.DocInvoiceAmt = currInvoice.DocInvoiceAmt;
            ttAPInvcRecurr.CurrencyCode = currInvoice.CurrencyCode;
            ttAPInvcRecurr.InvoiceAmt = currInvoice.InvoiceAmt;
            ttAPInvcRecurr.InvoiceHeld = currInvoice.InvoiceHeld;
            ttAPInvcRecurr.DueDate = currInvoice.DueDate;
            ttAPInvcRecurr.ApplyDate = currInvoice.ApplyDate;
            ttAPInvcRecurr.Posted = currInvoice.Posted;
            ttAPInvcRecurr.SysRowID = Guid.NewGuid();
            foreach (APInvHed row in (this.SelectAPInvHed(Session.CompanyID, vendorNum, invoiceNum)))
            {

                ttAPInvcRecurr = new APInvcRecurrRow();
                ds.APInvcRecurr.Add(ttAPInvcRecurr);
                ttAPInvcRecurr.Company = Session.CompanyID;
                ttAPInvcRecurr.VendorNum = row.VendorNum;
                ttAPInvcRecurr.InvoiceNum = row.InvoiceNum;
                ttAPInvcRecurr.InvoiceRef = row.InvoiceRef;
                ttAPInvcRecurr.InstanceNum = row.InstanceNum;
                ttAPInvcRecurr.InvoiceDate = row.InvoiceDate;
                ttAPInvcRecurr.DocInvoiceAmt = row.DocInvoiceAmt;
                ttAPInvcRecurr.CurrencyCode = row.CurrencyCode;
                ttAPInvcRecurr.InvoiceAmt = row.InvoiceAmt;
                ttAPInvcRecurr.InvoiceHeld = row.InvoiceHeld;
                ttAPInvcRecurr.DueDate = row.DueDate;
                ttAPInvcRecurr.ApplyDate = row.ApplyDate;
                ttAPInvcRecurr.Posted = row.Posted;
                ttAPInvcRecurr.SysRowID = Guid.NewGuid();
            }

        }


        /// <summary>
        /// Invoices Recurring
        /// </summary>
        /// <param name="ipVendorNum">Vendor number</param>
        /// <param name="ipInvoiceNum">Invoice number</param>
        /// <param name="ipFirstDayOfWeek">First day of the week from Client system settings</param>
        ///<param name="outNexInvDate">Next recur invoice date</param>  

        public void GetAPInvRecurInfo(int ipVendorNum, string ipInvoiceNum, int ipFirstDayOfWeek, out DateTime? outNexInvDate)
        {

            DateTime? nextInvoiceDate = null;
            int cycleInterval = 0;
            DateTime? lastDate = null;
            int billingDay = 0;
            int billingDayDiff = 0;
            bool holdInvoice = false;
            int lastDayOfMonth = 0;
            int instanceNum = 0;
            outNexInvDate = null;

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, ipVendorNum, ipInvoiceNum);
            if (APInvHed != null)
            {
                if (APInvHed.RecurSource == true)
                {

                    RecurringCycle = this.FindFirstRecurringCycle2(Session.CompanyID, APInvHed.CycleCode);
                    if (RecurringCycle != null)
                    {

                        cycleInterval = Compatibility.Convert.ToInt32(RecurringCycle.Interval);
                        lastDate = APInvHed.LastDate;
                        if (lastDate == null)
                        {
                            lastDate = APInvHed.InvoiceDate;
                        }
                        billingDay = Compatibility.Convert.ToInt32(RecurringCycle.BillingDay);
                        holdInvoice = RecurringCycle.HoldInvoice;
                        /*Get nextInvoiceDate*/
                        if (RecurringCycle.Modifier.Compare("D") == 0)
                        {
                            nextInvoiceDate = lastDate.Value.AddDays(cycleInterval);
                        }

                        if (RecurringCycle.Modifier.Compare("W") == 0)
                        {
                            nextInvoiceDate = lastDate.Value.AddDays(cycleInterval * 7);
                            if ((Convert.ToInt32(((DateTime)nextInvoiceDate).DayOfWeek) + 1) != billingDay)
                            {
                                billingDayDiff = billingDay - (Convert.ToInt32(((DateTime)nextInvoiceDate).DayOfWeek) + 1);
                                if (ipFirstDayOfWeek > (Convert.ToInt32(((DateTime)nextInvoiceDate).DayOfWeek) + 1))
                                {
                                    if (billingDay > ipFirstDayOfWeek)
                                    {
                                        nextInvoiceDate = nextInvoiceDate.Value.AddDays(billingDayDiff - 7);
                                    }
                                    else
                                    {
                                        nextInvoiceDate = nextInvoiceDate.Value.AddDays(billingDayDiff);
                                    }
                                }
                                else
                                {
                                    if (billingDay <= ipFirstDayOfWeek)
                                    {
                                        //nextInvoiceDate = nextInvoiceDate.Value.AddDays(billingDayDiff + 7);
                                        nextInvoiceDate = nextInvoiceDate.Value.AddDays(billingDayDiff);
                                    }
                                    else
                                    {
                                        //nextInvoiceDate = nextInvoiceDate.Value.AddDays(billingDayDiff);
                                        nextInvoiceDate = nextInvoiceDate.Value.AddDays(billingDayDiff + 7);
                                    }
                                }
                            }
                        }
                        if (RecurringCycle.Modifier.Compare("M") == 0)
                        {
                            nextInvoiceDate = lastDate.Value.AddMonths(cycleInterval);
                            if (((DateTime)nextInvoiceDate).Day != RecurringCycle.BillingDay)
                            {
                                lastDayOfMonth = DateTime.DaysInMonth(nextInvoiceDate.Value.Year, nextInvoiceDate.Value.Month);
                                if (lastDayOfMonth >= billingDay)
                                {
                                    nextInvoiceDate = new DateTime(((DateTime)nextInvoiceDate).Year, ((DateTime)nextInvoiceDate).Month, billingDay);
                                }
                                else
                                {
                                    nextInvoiceDate = new DateTime(((DateTime)nextInvoiceDate).Year, ((DateTime)nextInvoiceDate).Month, lastDayOfMonth);
                                }
                            }
                        }
                        instanceNum = Compatibility.Convert.ToInt32(APInvHed.InstanceNum + 1);
                        outNexInvDate = nextInvoiceDate;


                    }

                }

            }

        }


        #endregion RecurringInvoices






        private decimal calcAllocBasis(IRow srcTable, string disburseMethod, int nDecimals, string baseWeightUOM, string baseVolumeUOM)
        {

            decimal convValue = decimal.Zero;

            if (srcTable == null)
                return convValue;

            switch (disburseMethod.ToUpperInvariant())
            {
                case "VALUE":
                    {
                        convValue = Math.Round((Decimal)srcTable["OurQty"] * (Decimal)srcTable["OurUnitCost"], nDecimals, MidpointRounding.AwayFromZero);
                    }
                    break;
                case "QUANTITY":
                    {
                        convValue = (Decimal)srcTable["OurQty"];

                        Part = Part.FindFirstByPrimaryKey(Db, Session.CompanyID, srcTable["PartNum"].ToString());
                        if (Part != null)
                        {
                            LibAppService.UOMConv(Part.PartNum, convValue, srcTable["IUM"].ToString(), Part.IUM, out convValue, false);
                        }
                    }
                    break;
                case "WEIGHT":
                    {
                        convValue = (Decimal)srcTable["Weight"];
                        if (!String.IsNullOrEmpty(baseWeightUOM) && !String.IsNullOrEmpty(srcTable["WeightUOM"].ToString()))
                        {
                            LibAppService.UOMConv("", convValue, srcTable["WeightUOM"].ToString(), baseWeightUOM, out convValue, false);
                        }
                    }
                    break;
                case "VOLUME":
                    {
                        convValue = (Decimal)srcTable["Volume"];
                        if (!String.IsNullOrEmpty(baseVolumeUOM) && !String.IsNullOrEmpty(srcTable["VolumeUOM"].ToString()))
                        {
                            LibAppService.UOMConv("", convValue, srcTable["VolumeUOM"].ToString(), baseVolumeUOM, out convValue, false);
                        }
                    }
                    break;
            }
            return convValue;
        }

        private (bool canUpdateInvoice, bool skipValidations) canUpdateInvoice(int iVendorNum, string cInvoiceNum)
        {
            bool lCanUpdate = false;
            bool skipValidations = false;

            if (APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, iVendorNum, cInvoiceNum)?.Posted ?? false)
            {
                PostedAPInvoiceExtension.CanUpdatePostedInvoice(CurrentFullTableset, ref lCanUpdate);
                skipValidations = lCanUpdate;
            }
            else
            {
                lCanUpdate = true;
            }
            return (lCanUpdate, skipValidations);  /* Function return value. */
        }

        /*------------------------------------------------------------------------------
          Purpose:  
          Notes:  SCR #3088 - Determines if the Multi-Company flag should be enabled.
        ------------------------------------------------------------------------------*/
        private bool checkEnableMulti()
        {

            var ExtCompanyQuery4 = DBExpressionCompiler.Compile(ExtCompanyExpression4);
            if ((ExtCompanyQuery4(Db, Session.CompanyID, "MULTI", true)) && Session.ModuleLicensed(Erp.License.ErpLicensableModules.MultiSiteGLJournals))
            {
                return true;
            }
            else
            {
                return false;  /* Function return value. */
            }
        }

        private bool dispWarning(string ipInvNum, int ipInvLine, int ipNewPoNum, int ipNewPOLine, int ipNewPORelNum)
        {
            bool vDispWarning = false;

            var APInvDtlQuery31 = DBExpressionCompiler.Compile(APInvDtlExpression31);
            APInvDtl = APInvDtlQuery31(Db, Session.CompanyID, ipInvNum, ipInvLine);
            if (APInvDtl != null)
            {
                if (APInvDtl.PONum != ipNewPoNum ||
                APInvDtl.POLine != ipNewPOLine ||
                APInvDtl.PORelNum != ipNewPORelNum)
                {
                    Erp.Tables.PORel AltPORel = null;


                    PORel = FindFirstPORel(Session.CompanyID, APInvDtl.PONum, APInvDtl.POLine, APInvDtl.PORelNum);



                    AltPORel = FindFirstPORel(Session.CompanyID, ipNewPoNum, ipNewPOLine, ipNewPORelNum);
                    if (AltPORel != null && PORel != null && (StringExtensions.Compare(PORel.JobNum, AltPORel.JobNum) != 0 || PORel.AssemblySeq != AltPORel.AssemblySeq ||
                    PORel.JobSeq != AltPORel.JobSeq))
                    {
                        vDispWarning = true;
                    }
                }
            }
            return vDispWarning;  /* Function return value. */
        }

        private bool legalNumSetupRequired(bool isDebitMemo, bool isBOEInvoice)
        {


            //Erp.Tables.APInvHed bAPInvHed = null;
            bool lnSetupRequired = false;
            string legNumType = string.Empty;
            bool vLNReqForInvc = false;

            if (isTaiwanLocalization)
            {
                return lnSetupRequired;
            }

            vLNReqForInvc = apSystPartial.LNReqForInvc;
            if (vLNReqForInvc == true)
            {
                //A legal number configuration for invoices or debit memos is required - Verify one exists.

                if (isDebitMemo == false)
                {
                    if (isBOEInvoice == true)
                    {
                        legNumType = "APBillExch";
                    }
                    else
                    {
                        legNumType = "APInvoice";
                    }
                }
                else
                {
                    legNumType = "DebitMemo";
                }
                var LegalNumCnfgQuery = DBExpressionCompiler.Compile(LegalNumCnfgExpression);
                if (LegalNumCnfgQuery(Db, Session.CompanyID, legNumType) == true)
                {
                    lnSetupRequired = false;
                }
                else
                {
                    lnSetupRequired = true;
                }
            }
            return lnSetupRequired;  /* Function return value. */
        }


        private string getBaseCurrID()
        {
            return this.SelectBaseCurrencyID(Session.CompanyID, true);
        }

        private string getBaseCurrSymbol()
        {
            return this.SelectBaseCurrencySymbol(Session.CompanyID, true);
        }

        /*------------------------------------------------------------------------------
          Purpose:  
            Notes:  SCR #563 - Determine if intrastat is available or not.  Determined by if the 
                               Vendor belongs to the European Community and IntraStat Country 
                               Code of the Vendor Purchase Point is different from the Company's 
                               IntraStat Country Code.
        ------------------------------------------------------------------------------*/
        private bool getEnableIntrastat()
        {
            string vVendIStatCode = string.Empty;
            string vCompIStatCode = string.Empty;
            bool vEnableIntrastat = false;
            string sTaxRegionCode = string.Empty;

            if (ttAPInvHed == null)
            { return vEnableIntrastat; }

            /* check if invoice type is "A" (Advance Billing) then return false */
            if (StringExtensions.Compare(ttAPInvDtl.LineType, "A") == 0 ||
                ttAPInvDtl.RowMod.Compare(IceRow.ROWSTATE_ADDED) == 0)
            {
                return vEnableIntrastat;
            }


            var ISSystQuery = DBExpressionCompiler.Compile(ISSystExpression);
            if ((ISSystQuery(Db, Session.CompanyID)))
            {
                TaxCat = TaxCat.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvDtl.TaxCatID);
                if (TaxCat == null)
                {

                    var TaxCatQuery2 = DBExpressionCompiler.Compile(TaxCatExpression2);
                    TaxCat = TaxCatQuery2(Db, Session.CompanyID);
                }
                if (TaxCat != null && TaxCat.ExcIntrastats)
                {
                    return vEnableIntrastat;
                }

                Vendor = Vendor.FindFirstByPrimaryKey(Db, Session.CompanyID, ttAPInvDtl.VendorNum);
                if (Vendor == null)
                {
                    return vEnableIntrastat;
                }

                RcvDtl = FindFirstRcvDtl(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.PurPoint, ttAPInvDtl.PackSlip, ttAPInvDtl.PackLine);
                /* if available RcvDtl */
                if (RcvDtl != null)
                {
                    VendorPP = VendorPP.FindFirstByPrimaryKey(Db, RcvDtl.Company, RcvDtl.VendorNum, RcvDtl.PurPoint);
                }
                else
                {
                    VendorPP = VendorPP.FindFirstByPrimaryKey(Db, Vendor.Company, Vendor.VendorNum, Vendor.PurPoint);
                }
                if (VendorPP == null)
                {
                    return vEnableIntrastat;
                }

                /* SCR 180919 - enable intrastat button only if Tax Liability supports Intrastat */
                /* validate tax liability, regardless if it's at Header or Detail.*/
                sTaxRegionCode = (string.IsNullOrEmpty(sTaxRegionCode)) ?
                    ((string.IsNullOrEmpty(ttAPInvDtl.TaxRegionCode)) ? ttAPInvHed.TaxRegionCode : ttAPInvDtl.TaxRegionCode) :
                    sTaxRegionCode;

                TaxRgn = TaxRgn.FindFirstByPrimaryKey(Db, Vendor.Company, sTaxRegionCode);
                if (TaxRgn == null)
                {
                    return vEnableIntrastat;
                }

                /* get the IntraStat Country Code of the Vendor Purchase Point */
                Country = Country.FindFirstByPrimaryKey(Db, VendorPP.Company, VendorPP.CountryNum);
                if (Country == null)
                {
                    return vEnableIntrastat;
                }
                vVendIStatCode = Country.IStatCode;

                /* get the IntraStat Country Code of the Company */
                Company = Company.FindFirstByPrimaryKey(Db, Session.CompanyID);
                if (Company == null)
                {
                    return vEnableIntrastat;
                }
                Country = Country.FindFirstByPrimaryKey(Db, Company.Company1, Company.CountryNum);
                if (Country == null)
                {
                    return vEnableIntrastat;
                }
                vCompIStatCode = Country.IStatCode;

                /* Tax Liability inside EU and the IntraStat Codes of the Vendor Purchase Point and the Company must be different */
                if (TaxRgn.InEC && !string.IsNullOrEmpty(vVendIStatCode) && !string.IsNullOrEmpty(vCompIStatCode) && vVendIStatCode.Compare(vCompIStatCode) != 0)
                {
                    vEnableIntrastat = true;
                }

                if (isNetherlandsLocalization)
                {
                    if (!TaxRgn.InEC && !string.IsNullOrEmpty(vVendIStatCode) && !string.IsNullOrEmpty(vCompIStatCode) && vVendIStatCode.Compare(vCompIStatCode) != 0)
                    {
                        vEnableIntrastat = true;
                    }
                }
            }

            return vEnableIntrastat;  /* Function return value. */
        }

        private int getNextTGLCTranNumForGlb()
        {
            int iNextTranNum = 0;

            var TranGLCQuery5 = DBExpressionCompiler.Compile(TranGLCExpression5);
            TranGLC = TranGLCQuery5(Db, Session.CompanyID, "APInvExp", Compatibility.Convert.ToString(ttAPInvExp.VendorNum), Compatibility.Convert.ToString(ttAPInvExp.InvoiceNum), Compatibility.Convert.ToString(ttAPInvExp.InvoiceLine), Compatibility.Convert.ToString(ttAPInvExp.InvExpSeq));
            if (TranGLC != null)
            {
                iNextTranNum = TranGLC.TGLCTranNum + 1;
            }

            ttAPInvExpTGLC = (from ttAPInvExpTGLC_Row in CurrentFullTableset.APInvExpTGLC
                              where ttAPInvExpTGLC_Row.Company.KeyEquals(Session.CompanyID)
                              && StringExtensions.Compare(ttAPInvExpTGLC_Row.RelatedToFile, "APInvExp") == 0
                              && ttAPInvExpTGLC_Row.Key1.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.VendorNum))
                              && ttAPInvExpTGLC_Row.Key2.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvoiceNum))
                              && ttAPInvExpTGLC_Row.Key3.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvoiceLine))
                              && ttAPInvExpTGLC_Row.Key4.KeyEquals(Compatibility.Convert.ToString(ttAPInvExp.InvExpSeq))
                              && (ttAPInvExpTGLC_Row.RowMod == IceRow.ROWSTATE_ADDED || ttAPInvExpTGLC_Row.RowMod == IceRow.ROWSTATE_UPDATED)
                              select ttAPInvExpTGLC_Row).LastOrDefault();
            if (ttAPInvExpTGLC != null)
            {
                if (iNextTranNum <= ttAPInvExpTGLC.TGLCTranNum)
                {
                    iNextTranNum = ttAPInvExpTGLC.TGLCTranNum + 1;
                }
            }

            return iNextTranNum;  /* Function return value. */
        }

        private bool IsLocalConsolidatedPO(int iPONum)
        {
            bool lIsLocalConsolidatedPO = false;
            Erp.Tables.POHeader bPOHeader = null;



            bPOHeader = FindFirstPOHeader(Session.CompanyID, iPONum);

            if (bPOHeader != null &&
            bPOHeader.ConsolidatedPO == true &&
            !String.IsNullOrEmpty(bPOHeader.GlbCompany))
            {
                lIsLocalConsolidatedPO = true;
            }
            return lIsLocalConsolidatedPO;  /* Function return value. */

        }

        /*------------------------------------------------------------------------------
          Purpose:  Return thecost conversion factor
            Notes:
        ------------------------------------------------------------------------------*/
        /* gCPCodeList and gCPFactorList are global variables in the DEFINITIONS procedure. */
        private decimal costFactor(string iCostPerCode)
        {
            decimal CPFactor = 1; /* DEFAULT TO EACH */
            int iIndex = 0;
            if ((iCostPerCode != null) && (!String.IsNullOrEmpty(iCostPerCode)))
            {
                iIndex = (gCPCodeList.IndexOf(iCostPerCode, StringComparison.OrdinalIgnoreCase) + 1);
                if (iIndex > 0)
                {
                    CPFactor = gCPFactorList[iIndex - 1];
                }
            }
            return CPFactor;  /* Function return value. */

        }

        private bool isNewOrModified(IceRow row)
        {
            if ((row.RowMod.Compare(IceRow.ROWSTATE_ADDED) == 0)
                || (row.RowMod.Compare(IceRow.ROWSTATE_UPDATED) == 0))
            {
                return true;
            }
            return false;
        }

        private void setVendorAndDiscountAmt()
        {
            if (ttAPInvHed.DebitMemo == false)
            {
                ttAPInvHed.InvoiceVendorAmt = ttAPInvHed.ScrInvoiceVendorAmt;
                ttAPInvHed.DocInvoiceVendorAmt = ttAPInvHed.ScrDocInvoiceVendorAmt;
                ttAPInvHed.Rpt1InvoiceVendorAmt = ttAPInvHed.Rpt1ScrInvoiceVendorAmt;
                ttAPInvHed.Rpt2InvoiceVendorAmt = ttAPInvHed.Rpt2ScrInvoiceVendorAmt;
                ttAPInvHed.Rpt3InvoiceVendorAmt = ttAPInvHed.Rpt3ScrInvoiceVendorAmt;
                ttAPInvHed.DiscountAmt = ttAPInvHed.ScrDiscountAmt;
                ttAPInvHed.DocDiscountAmt = ttAPInvHed.ScrDocDiscountAmt;
                ttAPInvHed.Rpt1DiscountAmt = ttAPInvHed.Rpt1ScrDiscountAmt;
                ttAPInvHed.Rpt2DiscountAmt = ttAPInvHed.Rpt2ScrDiscountAmt;
                ttAPInvHed.Rpt3DiscountAmt = ttAPInvHed.Rpt3ScrDiscountAmt;
            }
            else
            {
                ttAPInvHed.InvoiceVendorAmt = -ttAPInvHed.ScrInvoiceVendorAmt;
                ttAPInvHed.DocInvoiceVendorAmt = -ttAPInvHed.ScrDocInvoiceVendorAmt;
                ttAPInvHed.Rpt1InvoiceVendorAmt = -ttAPInvHed.Rpt1ScrInvoiceVendorAmt;
                ttAPInvHed.Rpt2InvoiceVendorAmt = -ttAPInvHed.Rpt2ScrInvoiceVendorAmt;
                ttAPInvHed.Rpt3InvoiceVendorAmt = -ttAPInvHed.Rpt3ScrInvoiceVendorAmt;
                ttAPInvHed.DiscountAmt = -ttAPInvHed.ScrDiscountAmt;
                ttAPInvHed.DocDiscountAmt = -ttAPInvHed.ScrDocDiscountAmt;
                ttAPInvHed.Rpt1DiscountAmt = -ttAPInvHed.Rpt1ScrDiscountAmt;
                ttAPInvHed.Rpt2DiscountAmt = -ttAPInvHed.Rpt2ScrDiscountAmt;
                ttAPInvHed.Rpt3DiscountAmt = -ttAPInvHed.Rpt3ScrDiscountAmt;
            }
        }

        /// <summary>
        /// Occurs when Invoice Line Deferred Expense switch changed
        /// </summary>
        public void OnChangeLineDefferedExp(int vendorNum, string invoiceNum, int invoiceLine, bool ipDefExp, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            findChangedTTAPInvDtl(vendorNum, invoiceNum, invoiceLine);

            if (ipDefExp)
            {
                APInvHed = FindFirstAPInvHed(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
                if (APInvHed != null)
                {
                    ttAPInvDtl.DEAStartDate = APInvHed.InvoiceDate;
                }

                CreateAPInvDtlTGLC(ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, ref ds);
            }
            else
            {
                bool postedSchedules = ExistsAPInvDtlDEASch(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, posted: true);
                if (postedSchedules)
                {
                    throw new BLException(Strings.CannotChangeTheDeferExpFlagToNoBecauseAtLeast, "APInvDtlDEASch", "Posted");
                }
                //bool schedExists = ExistsAPInvDtlDEASch(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, posted: false);
                ttAPInvDtl.DEAStartDate = null;
                ttAPInvDtl.DEAEndDate = null;
                ttAPInvDtl.DEACode = string.Empty;
                ttAPInvDtl.DEACodeDesc = string.Empty;
                ttAPInvDtl.DEAScheduled = false;
            }
            calculateAmortizationTotals(ttAPInvDtl, ipDefExp, false);
        }

        /// <summary>
        /// Validate entered Commodity Code
        /// </summary>
        /// <param name="newCommodityCode">New Commodity Code</param>
        /// <param name="ds">AP Invoice Full Dataset</param>
        public void OnChangeLineCommodityCode(string newCommodityCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            ttAPInvDtl = (from row in ds.APInvDtl
                          where !String.IsNullOrEmpty(row.RowMod)
                          select row).FirstOrDefault();

            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.TtApInvDtlNotFound, "ttAPInvDtl");
            }

            if (string.IsNullOrEmpty(newCommodityCode))
            {
                throw new BLException(Strings.EmptyCommodityCode, APInvDtl.GetTableName(), "CommodityCode");
            }

            Erp.Tables.ICommCode commCode = ICommCode.FindFirstByPrimaryKey(Db, Session.CompanyID, newCommodityCode);
            if (commCode == null)
            {
                throw new BLException(Strings.InvalidCommodityCode, APInvDtl.GetTableName(), "CommodityCode");
            }
            ttAPInvDtl.CommodityCode = commCode.CommodityCode;
            ttAPInvDtl.CommodityCodeDescription = commCode.Description;
        }

        /// <summary>
        /// Occurs when Invoice Line DEA Code changed
        /// </summary>
        public void OnChangeLineDEACode(int vendorNum, string invoiceNum, int invoiceLine, string deaCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            findChangedTTAPInvDtl(vendorNum, invoiceNum, invoiceLine);

            if (!string.IsNullOrEmpty(deaCode))
            {
                var raSchedCd = FindFirstRASchedCd(Session.CompanyID, deaCode, scope1: "AP", scope2: "GA", active: true);
                if (raSchedCd == null)
                {
                    throw new BLException(Strings.IsNotValidExpenseAmortCode(deaCode), "RASChedCd", "RACode");
                }
                if (ttAPInvDtl.DEAStartDate != null)
                {
                    ttAPInvDtl.DEAEndDate = LibCreateAmort.CalculateEndDate(deaCode, ttAPInvDtl.DEAStartDate);
                }
            }
        }

        /// <summary>
        /// Occurs when Invoice Line DEA Start Date changed
        /// </summary>
        public void OnChangeLineDEAStartDate(int vendorNum, string invoiceNum, int invoiceLine, DateTime? startDate, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            findChangedTTAPInvDtl(vendorNum, invoiceNum, invoiceLine);

            if (startDate == null)
            {
                ttAPInvDtl.DEAEndDate = null;
            }
            else if (!string.IsNullOrEmpty(ttAPInvDtl.DEACode))
            {
                ttAPInvDtl.DEAEndDate = LibCreateAmort.CalculateEndDate(ttAPInvDtl.DEACode, startDate);
            }
        }

        private void calculateAmortizationTotals(APInvDtlRow ttAPInvDtl, bool deferredExpValue, bool onTempTables)
        {
            bool debitMemo = ttAPInvDtl.DebitMemo;
            ttAPInvDtl.Expense = deferredExpValue ? (debitMemo ? -ttAPInvDtl.ExtCost + ttAPInvDtl.NonDeducTaxExpense : ttAPInvDtl.ExtCost + ttAPInvDtl.NonDeducTaxExpense) : decimal.Zero;
            ttAPInvDtl.DocExpense = deferredExpValue ? (debitMemo ? -ttAPInvDtl.DocExtCost + ttAPInvDtl.DocNonDeducTaxExpense : ttAPInvDtl.DocExtCost + ttAPInvDtl.DocNonDeducTaxExpense) : decimal.Zero;
            ttAPInvDtl.Rpt1Expense = deferredExpValue ? (debitMemo ? -ttAPInvDtl.Rpt1ExtCost + ttAPInvDtl.Rpt1NonDeducTaxExpense : ttAPInvDtl.Rpt1ExtCost + ttAPInvDtl.Rpt1NonDeducTaxExpense) : decimal.Zero;
            ttAPInvDtl.Rpt2Expense = deferredExpValue ? (debitMemo ? -ttAPInvDtl.Rpt2ExtCost + ttAPInvDtl.Rpt2NonDeducTaxExpense : ttAPInvDtl.Rpt2ExtCost + ttAPInvDtl.Rpt2NonDeducTaxExpense) : decimal.Zero;
            ttAPInvDtl.Rpt3Expense = deferredExpValue ? (debitMemo ? -ttAPInvDtl.Rpt3ExtCost + ttAPInvDtl.Rpt3NonDeducTaxExpense : ttAPInvDtl.Rpt3ExtCost + ttAPInvDtl.Rpt3NonDeducTaxExpense) : decimal.Zero;
            ttAPInvDtl.DEAAmt = decimal.Zero;
            ttAPInvDtl.Recognized = decimal.Zero;
            ttAPInvDtl.DocRecognized = decimal.Zero;
            ttAPInvDtl.Rpt1Recognized = decimal.Zero;
            ttAPInvDtl.Rpt2Recognized = decimal.Zero;
            ttAPInvDtl.Rpt3Recognized = decimal.Zero;
            ttAPInvDtl.Unrecognized = decimal.Zero;
            ttAPInvDtl.DocUnrecognized = decimal.Zero;
            ttAPInvDtl.Rpt1Unrecognized = decimal.Zero;
            ttAPInvDtl.Rpt2Unrecognized = decimal.Zero;
            ttAPInvDtl.Rpt3Unrecognized = decimal.Zero;
            ttAPInvDtl.Remaining = decimal.Zero;
            ttAPInvDtl.DocRemaining = decimal.Zero;
            ttAPInvDtl.Rpt1Remaining = decimal.Zero;
            ttAPInvDtl.Rpt2Remaining = decimal.Zero;
            ttAPInvDtl.Rpt3Remaining = decimal.Zero;
            ttAPInvDtl.Distributed = decimal.Zero;
            ttAPInvDtl.DocDistributed = decimal.Zero;
            ttAPInvDtl.Rpt1Distributed = decimal.Zero;
            ttAPInvDtl.Rpt2Distributed = decimal.Zero;
            ttAPInvDtl.Rpt3Distributed = decimal.Zero;

            APInvHed = FindFirstAPInvHed(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.APInvHedRecordNotFound, APInvHed.GetTableName());
            }
            ttAPInvDtl.CurrencyCode = APInvHed.CurrencyCode;

            if (!deferredExpValue)
            {
                return;
            }

            if (!onTempTables)
            {
                foreach (var APInvDtlDEASch_iter in SelectAPInvDtlDEASch(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine))
                {
                    if (APInvDtlDEASch_iter.Posted)
                    {
                        ttAPInvDtl.Recognized += (debitMemo ? -1m : 1m) * APInvDtlDEASch_iter.AmortAmt;
                        ttAPInvDtl.DocRecognized += (debitMemo ? -1m : 1m) * APInvDtlDEASch_iter.DocAmortAmount;
                        ttAPInvDtl.Rpt1Recognized += (debitMemo ? -1m : 1m) * APInvDtlDEASch_iter.Rpt1AmortAmt;
                        ttAPInvDtl.Rpt2Recognized += (debitMemo ? -1m : 1m) * APInvDtlDEASch_iter.Rpt2AmortAmt;
                        ttAPInvDtl.Rpt3Recognized += (debitMemo ? -1m : 1m) * APInvDtlDEASch_iter.Rpt3AmortAmt;
                    }
                    ttAPInvDtl.Distributed += (debitMemo ? -1m : 1m) * APInvDtlDEASch_iter.AmortAmt;
                    ttAPInvDtl.DocDistributed += (debitMemo ? -1m : 1m) * APInvDtlDEASch_iter.DocAmortAmount;
                    ttAPInvDtl.Rpt1Distributed += (debitMemo ? -1m : 1m) * APInvDtlDEASch_iter.Rpt1AmortAmt;
                    ttAPInvDtl.Rpt2Distributed += (debitMemo ? -1m : 1m) * APInvDtlDEASch_iter.Rpt2AmortAmt;
                    ttAPInvDtl.Rpt3Distributed += (debitMemo ? -1m : 1m) * APInvDtlDEASch_iter.Rpt3AmortAmt;
                }
            }
            else
            {
                var APInvDtlDEASchRows = CurrentFullTableset.APInvDtlDEASch.Where(row =>
                    row.Company.Compare(ttAPInvDtl.Company) == 0 && row.VendorNum == ttAPInvDtl.VendorNum &&
                    row.InvoiceNum.Compare(ttAPInvDtl.InvoiceNum) == 0 && row.InvoiceLine == ttAPInvDtl.InvoiceLine &&
                    row.RowMod.Compare(IceRow.ROWSTATE_UNCHANGED) != 0 && row.RowMod.Compare(IceRow.ROWSTATE_DELETED) != 0);
                foreach (var ttAPInvDtlDEASch_iter in APInvDtlDEASchRows)
                {
                    if (ttAPInvDtlDEASch_iter.Posted)
                    {
                        ttAPInvDtl.Recognized += ttAPInvDtlDEASch_iter.DspAmortAmt;
                        ttAPInvDtl.DocRecognized += ttAPInvDtlDEASch_iter.DocDspAmortAmt;
                        ttAPInvDtl.Rpt1Recognized += ttAPInvDtlDEASch_iter.Rpt1DspAmortAmt;
                        ttAPInvDtl.Rpt2Recognized += ttAPInvDtlDEASch_iter.Rpt2DspAmortAmt;
                        ttAPInvDtl.Rpt3Recognized += ttAPInvDtlDEASch_iter.Rpt3DspAmortAmt;
                    }
                    ttAPInvDtl.Distributed += ttAPInvDtlDEASch_iter.DspAmortAmt;
                    ttAPInvDtl.DocDistributed += ttAPInvDtlDEASch_iter.DocDspAmortAmt;
                    ttAPInvDtl.Rpt1Distributed += ttAPInvDtlDEASch_iter.Rpt1DspAmortAmt;
                    ttAPInvDtl.Rpt2Distributed += ttAPInvDtlDEASch_iter.Rpt2DspAmortAmt;
                    ttAPInvDtl.Rpt3Distributed += ttAPInvDtlDEASch_iter.Rpt3DspAmortAmt;
                }
            }

            ttAPInvDtl.DEAAmt = debitMemo ? -ttAPInvDtl.Distributed : ttAPInvDtl.Distributed;
            ttAPInvDtl.Remaining = ttAPInvDtl.Expense - ttAPInvDtl.Distributed;
            ttAPInvDtl.DocRemaining = ttAPInvDtl.DocExpense - ttAPInvDtl.DocDistributed;
            ttAPInvDtl.Rpt1Remaining = ttAPInvDtl.Rpt1Expense - ttAPInvDtl.Rpt1Distributed;
            ttAPInvDtl.Rpt2Remaining = ttAPInvDtl.Rpt2Expense - ttAPInvDtl.Rpt2Distributed;
            ttAPInvDtl.Rpt3Remaining = ttAPInvDtl.Rpt3Expense - ttAPInvDtl.Rpt3Distributed;
            ttAPInvDtl.Unrecognized = ttAPInvDtl.Expense - ttAPInvDtl.Recognized;
            ttAPInvDtl.DocUnrecognized = ttAPInvDtl.DocExpense - ttAPInvDtl.DocRecognized;
            ttAPInvDtl.Rpt1Unrecognized = ttAPInvDtl.Rpt1Expense - ttAPInvDtl.Rpt1Recognized;
            ttAPInvDtl.Rpt2Unrecognized = ttAPInvDtl.Rpt2Expense - ttAPInvDtl.Rpt2Recognized;
            ttAPInvDtl.Rpt3Unrecognized = ttAPInvDtl.Rpt3Expense - ttAPInvDtl.Rpt3Recognized;
        }

        /// <summary>
        /// Generates Amortization Schedule
        /// </summary>
        public void GenerateAmortizationSchedule(int vendorNum, string invoiceNum, int invoiceLine, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            findChangedTTAPInvDtl(vendorNum, invoiceNum, invoiceLine);

            if (!ttAPInvDtl.DEAScheduled && ttAPInvDtl.ExtCost != decimal.Zero)
            {
                var apInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine);
                APInvHedPartial APInvHedPartial = FindFirstAPInvHedPartial(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
                if (apInvDtl != null)
                {
                    DateTime? endDate = ttAPInvDtl.DEAEndDate;
                    //Generate amortization schedule considering non recoverable taxes
                    if (APInvHedPartial != null)
                    {
                        var APNonDeductTaxSum = APCalculateGLAnalysisVariance.GetAPNonDeducTaxSum(APInvHedPartial.DebitMemo, apInvDtl, APInvHedPartial.MatchedFromLI, APInvHedPartial.AllowOverrideLI);
                        decimal[] nonDeductTaxTotals = new decimal[]
                            {
                                APNonDeductTaxSum?.NonDeducAmt ?? 0,
                                APNonDeductTaxSum?.DocNonDeducAmt ?? 0,
                                APNonDeductTaxSum?.Rpt1NonDeducAmt ?? 0,
                                APNonDeductTaxSum?.Rpt2NonDeducAmt ?? 0,
                                APNonDeductTaxSum?.Rpt3NonDeducAmt ?? 0
                            };

                        LibCreateAmort.CreateAPAmortizationScheduleWithNonDeductTax(apInvDtl, nonDeductTaxTotals);
                    }
                    ttAPInvDtl.DEAScheduled = true;
                    if (ttAPInvDtl.DEAEndDate == null)
                    {
                        ttAPInvDtl.DEAEndDate = endDate;
                    }
                }
            }

            foreach (var apInvDtlDEASch_iterator in SelectAPInvDtlDEASch(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine))
            {
                ttAPInvDtlDEASch = new Erp.Tablesets.APInvDtlDEASchRow();
                BufferCopy.Copy(apInvDtlDEASch_iterator, ref ttAPInvDtlDEASch);
                ds.APInvDtlDEASch.Add(ttAPInvDtlDEASch);
                APInvDtlDEASchAfterGetRows();
            }

            calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, false);

        }

        /// <summary>
        /// Deletes Amortization Schedule
        /// </summary>
        public void DeleteAmortizationSchedule(int vendorNum, string invoiceNum, int invoiceLine, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            findChangedTTAPInvDtl(vendorNum, invoiceNum, invoiceLine);

            using (TransactionScope txScope = ErpContext.CreateDefaultTransactionScope())
            {
                foreach (var APInvDtlDEASch_iterator in SelectAPInvDtlDEASchWithUpdLock(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine))
                {
                    Db.APInvDtlDEASch.Delete(APInvDtlDEASch_iterator);
                }
                Db.Validate();
                txScope.Complete();
            }
            CurrentFullTableset.APInvDtlDEASch.RemoveAll(ttAPInvDtlDEASch_Row =>
                ttAPInvDtlDEASch_Row.Company.Compare(ttAPInvDtl.Company) == 0 && ttAPInvDtlDEASch_Row.VendorNum == ttAPInvDtl.VendorNum &&
                ttAPInvDtlDEASch_Row.InvoiceNum.Compare(ttAPInvDtl.InvoiceNum) == 0 && ttAPInvDtlDEASch_Row.InvoiceLine == ttAPInvDtl.InvoiceLine &&
                ttAPInvDtlDEASch_Row.RowMod.Compare(IceRow.ROWSTATE_ADDED) == 0);
            foreach (var ttAPInvDtlDEASch_iterator in (
                from ttAPInvDtlDEASch_Row in CurrentFullTableset.APInvDtlDEASch
                where ttAPInvDtlDEASch_Row.Company.Compare(ttAPInvDtl.Company) == 0 && ttAPInvDtlDEASch_Row.VendorNum == ttAPInvDtl.VendorNum &&
                      ttAPInvDtlDEASch_Row.InvoiceNum.Compare(ttAPInvDtl.InvoiceNum) == 0 && ttAPInvDtlDEASch_Row.InvoiceLine == ttAPInvDtl.InvoiceLine
                select ttAPInvDtlDEASch_Row))
            {
                ttAPInvDtlDEASch_iterator.RowMod = IceRow.ROWSTATE_DELETED;
            }
            ttAPInvDtl.DEAScheduled = false;
            calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, false);
        }

        /// <summary>
        /// Occurs when DEA Schedule Line Amortization Amount changed
        /// </summary>
        public void OnChangeDEAScheduleLineAmount(int vendorNum, string invoiceNum, int invoiceLine, int amortSeq, string srcField, decimal propValue, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            findChangedTTAPInvDtl(vendorNum, invoiceNum, invoiceLine);
            findChangedTTAPInvDtlDEASch(vendorNum, invoiceNum, invoiceLine, amortSeq);

            if (String.IsNullOrEmpty(pCurrList))
            {
                LibGetCurrencyRatesEF.FindCurrencyRates(APInvHed.GetTableName(), Compatibility.Convert.ToString(ttAPInvDtlDEASch.VendorNum), Compatibility.Convert.ToString(ttAPInvDtlDEASch.InvoiceNum), "", "", "", "", "", "", out ttChainRows, out pCurrList, out pRateList);
            }
            string baseCurrCode = pCurrList.Entry(0, Ice.Constants.LIST_DELIM);

            decimal extCost = ttAPInvDtl.DebitMemo ? -ttAPInvDtl.ExtCost : ttAPInvDtl.ExtCost,
                    docExtCost = ttAPInvDtl.DebitMemo ? -ttAPInvDtl.DocExtCost : ttAPInvDtl.DocExtCost;

            if (srcField.Equals("DspAmortAmt", StringComparison.OrdinalIgnoreCase))
            {
                ttAPInvDtlDEASch.DocDspAmortAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(propValue, ttAPInvDtlDEASch.CurrencyCode, baseCurrCode, ttChainRows, false, APInvDtlDEASch.GetTableName(), APInvDtlDEASch.ColumnNames.DocAmortAmount);
                ttAPInvDtlDEASch.AmortPercent = LibRoundAmountEF.RoundDecimalsApply(ttAPInvDtlDEASch.DspAmortAmt * 100m / extCost, ttAPInvDtlDEASch.CurrencyCode, APInvDtlDEASch.GetTableName(), APInvDtlDEASch.ColumnNames.AmortPercent);
            }
            else if (srcField.Equals("DocDspAmortAmt", StringComparison.OrdinalIgnoreCase))
            {
                ttAPInvDtlDEASch.DspAmortAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(propValue, ttAPInvDtlDEASch.CurrencyCode, baseCurrCode, ttChainRows, true, APInvDtlDEASch.GetTableName(), APInvDtlDEASch.ColumnNames.AmortAmt);
                ttAPInvDtlDEASch.AmortPercent = LibRoundAmountEF.RoundDecimalsApply(ttAPInvDtlDEASch.DspAmortAmt * 100m / extCost, ttAPInvDtlDEASch.CurrencyCode, APInvDtlDEASch.GetTableName(), APInvDtlDEASch.ColumnNames.AmortPercent);
            }
            else if (srcField.Equals("AmortPercent", StringComparison.OrdinalIgnoreCase))
            {
                ttAPInvDtlDEASch.DspAmortAmt = LibRoundAmountEF.RoundDecimalsApply(extCost * propValue / 100m, ttAPInvDtlDEASch.CurrencyCode, APInvDtlDEASch.GetTableName(), APInvDtlDEASch.ColumnNames.AmortAmt);
                ttAPInvDtlDEASch.DocDspAmortAmt = LibRoundAmountEF.RoundDecimalsApply(docExtCost * propValue / 100m, ttAPInvDtlDEASch.CurrencyCode, APInvDtlDEASch.GetTableName(), APInvDtlDEASch.ColumnNames.DocAmortAmount);
            }

            string rptCurrCode1 = pCurrList.Entry(1, Ice.Constants.LIST_DELIM);
            if (!string.IsNullOrEmpty(rptCurrCode1))
            {
                ttAPInvDtlDEASch.Rpt1DspAmortAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtlDEASch.DocDspAmortAmt, ttAPInvDtlDEASch.CurrencyCode, rptCurrCode1, ttChainRows, true, APInvDtlDEASch.GetTableName(), APInvDtlDEASch.ColumnNames.Rpt1AmortAmt);
            }
            string rptCurrCode2 = pCurrList.Entry(2, Ice.Constants.LIST_DELIM);
            if (!string.IsNullOrEmpty(rptCurrCode2))
            {
                ttAPInvDtlDEASch.Rpt2DspAmortAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtlDEASch.DocDspAmortAmt, ttAPInvDtlDEASch.CurrencyCode, rptCurrCode2, ttChainRows, true, APInvDtlDEASch.GetTableName(), APInvDtlDEASch.ColumnNames.Rpt2AmortAmt);
            }
            string rptCurrCode3 = pCurrList.Entry(3, Ice.Constants.LIST_DELIM);
            if (!string.IsNullOrEmpty(rptCurrCode3))
            {
                ttAPInvDtlDEASch.Rpt3DspAmortAmt = LibRoundAmountEF.ConvertAmtRoundDecimals(ttAPInvDtlDEASch.DocDspAmortAmt, ttAPInvDtlDEASch.CurrencyCode, rptCurrCode3, ttChainRows, true, APInvDtlDEASch.GetTableName(), APInvDtlDEASch.ColumnNames.Rpt3AmortAmt);
            }
        }

        /// <summary>
        /// Occurs when DEA Schedule Line Fiscal Period changed
        /// </summary>
        public void OnChangeDEAScheduleLineFiscalPeriod(int vendorNum, string invoiceNum, int invoiceLine, int amortSeq, string srcField, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            findChangedTTAPInvDtl(vendorNum, invoiceNum, invoiceLine);
            findChangedTTAPInvDtlDEASch(vendorNum, invoiceNum, invoiceLine, amortSeq);

            var fiscalPeriods = LibCreateAmort.BuildFiscalPeriods(ttAPInvDtl.DEACode, ttAPInvDtl.DEAStartDate, ttAPInvDtl.DEAEndDate);
            var amortDate = validateAmortScheduleFiscalPeriod(ttAPInvDtlDEASch, fiscalPeriods, false, srcField.Compare(APInvDtlDEASch.ColumnNames.FiscalPeriod) == 0);
            if (amortDate != null)
            {
                ttAPInvDtlDEASch.AmortDate = amortDate;
            }
        }

        private string getDEACodeDesc(string ipDEACode)
        {
            if (String.IsNullOrEmpty(ipDEACode))
            {
                return string.Empty;
            }
            var raSchedCd = FindFirstRASchedCd(Session.CompanyID, ipDEACode, scope1: "AP", scope2: "GA", active: true);
            return (raSchedCd != null) ? raSchedCd.RADesc : string.Empty;
        }

        private void findChangedTTAPInvDtl(int vendorNum, string invoiceNum, int invoiceLine)
        {
            ttAPInvDtl = (
                from ttAPInvDtl_Row in CurrentFullTableset.APInvDtl
                where ttAPInvDtl_Row.Company.Compare(Session.CompanyID) == 0 && ttAPInvDtl_Row.VendorNum == vendorNum &&
                      ttAPInvDtl_Row.InvoiceNum.Compare(invoiceNum) == 0 && ttAPInvDtl_Row.InvoiceLine == invoiceLine &&
                      ttAPInvDtl_Row.RowMod.Compare(IceRow.ROWSTATE_UNCHANGED) != 0
                select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.TtApInvDtlNotFound, "ttAPInvDtl");
            }
        }

        private void findChangedTTAPInvDtlDEASch(int vendorNum, string invoiceNum, int invoiceLine, int amortSeq)
        {
            ttAPInvDtlDEASch = (
                from ttAPInvDtlDEASch_Row in CurrentFullTableset.APInvDtlDEASch
                where ttAPInvDtlDEASch_Row.Company.Compare(Session.CompanyID) == 0 && ttAPInvDtlDEASch_Row.VendorNum == vendorNum &&
                      ttAPInvDtlDEASch_Row.InvoiceNum.Compare(invoiceNum) == 0 && ttAPInvDtlDEASch_Row.InvoiceLine == invoiceLine &&
                      ttAPInvDtlDEASch_Row.AmortSeq == amortSeq &&
                      ttAPInvDtlDEASch_Row.RowMod.Compare(IceRow.ROWSTATE_UNCHANGED) != 0
                select ttAPInvDtlDEASch_Row).FirstOrDefault();
            if (ttAPInvDtlDEASch == null)
            {
                throw new BLException(Strings.RecordNotFound, "ttAPInvDtlDEASch");
            }
        }

        /// <summary>
        /// Applies Remaining Amount to the last Schedule Line
        /// </summary>
        public void AutocompleteAmortizationSchedule(int vendorNum, string invoiceNum, int invoiceLine, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            findChangedTTAPInvDtl(vendorNum, invoiceNum, invoiceLine);
            calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, true);
            using (TransactionScope txScope = ErpContext.CreateDefaultTransactionScope())
            {
                bool continueProcedure;
                do
                {
                    ttAPInvDtlDEASch = CurrentFullTableset.APInvDtlDEASch.
                        Where(row => row.RowMod.Compare(IceRow.ROWSTATE_UNCHANGED) != 0 && row.RowMod.Compare(IceRow.ROWSTATE_DELETED) != 0).
                        OrderBy(row => row.AmortSeq).LastOrDefault();
                    if (ttAPInvDtlDEASch == null)
                    {
                        throw new BLException(Strings.ThereIsNoScheduleLineToAddTheRemainingAmount, "ttAPInvDtlDEASch");
                    }

                    decimal testAmortAmt = ttAPInvDtlDEASch.DspAmortAmt + ttAPInvDtl.Remaining;
                    decimal testDocAmortAmt = ttAPInvDtlDEASch.DocDspAmortAmt + ttAPInvDtl.DocRemaining;
                    if (testAmortAmt <= 0m || testDocAmortAmt <= 0m)
                    {
                        if (ttAPInvDtlDEASch.RowMod.Compare(IceRow.ROWSTATE_ADDED) == 0)
                        {
                            CurrentFullTableset.APInvDtlDEASch.Remove(ttAPInvDtlDEASch);
                        }
                        else if (ttAPInvDtlDEASch.RowMod.Compare(IceRow.ROWSTATE_UPDATED) == 0)
                        {
                            APInvDtlDEASch = FindFirstAPInvDtlDEASchWithUpdLock(ttAPInvDtlDEASch.Company, ttAPInvDtlDEASch.VendorNum, ttAPInvDtlDEASch.InvoiceNum, ttAPInvDtlDEASch.InvoiceLine, ttAPInvDtlDEASch.AmortSeq);
                            if (APInvDtlDEASch == null)
                            {
                                throw new BLException(Strings.ThereIsNoScheduleLineToAddTheRemainingAmount, "APInvDtlDEASch");
                            }
                            Db.APInvDtlDEASch.Delete(APInvDtlDEASch);
                            Db.Validate();
                            ttAPInvDtlDEASch.RowMod = IceRow.ROWSTATE_DELETED;
                        }
                        continueProcedure = true;
                    }
                    else
                    {
                        ttAPInvDtlDEASch.DspAmortAmt = testAmortAmt;
                        ttAPInvDtlDEASch.DocDspAmortAmt = testDocAmortAmt;
                        ttAPInvDtlDEASch.Rpt1DspAmortAmt = ttAPInvDtlDEASch.Rpt1DspAmortAmt + ttAPInvDtl.Rpt1Remaining;
                        ttAPInvDtlDEASch.Rpt2DspAmortAmt = ttAPInvDtlDEASch.Rpt2DspAmortAmt + ttAPInvDtl.Rpt2Remaining;
                        ttAPInvDtlDEASch.Rpt3DspAmortAmt = ttAPInvDtlDEASch.Rpt3DspAmortAmt + ttAPInvDtl.Rpt3Remaining;
                        decimal percent = CurrentFullTableset.APInvDtlDEASch
                                          .Where(row => row.RowMod.Compare(IceRow.ROWSTATE_UNCHANGED) != 0
                                                        && row.RowMod.Compare(IceRow.ROWSTATE_DELETED) != 0
                                                        && row.AmortSeq != ttAPInvDtlDEASch.AmortSeq)
                                          .Sum(x => x.AmortPercent);
                        ttAPInvDtlDEASch.AmortPercent = 100m - percent;

                        continueProcedure = false;
                    }

                    calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, true);
                }
                while (continueProcedure);

                txScope.Complete();
            }
        }

        /// <summary>
        /// Calculates Deferred Expense Amortization Total Amounts
        /// </summary>
        public void CalculateAmortizationTotals(int vendorNum, string invoiceNum, int invoiceLine, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            findChangedTTAPInvDtl(vendorNum, invoiceNum, invoiceLine);
            calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, true);
        }

        /// <summary>
        /// Creates records with empty accounts according to Active Revision in GL Transaction Type Maintenance
        /// </summary>
        /// <param name="vendorNum">Vendor number</param>
        /// <param name="invoiceNum">Invoice number</param>
        /// <param name="invoiceLine">Invoice line number</param>
        /// <param name="ds">A/P invoice data set.</param>    
        private void CreateAPInvDtlTGLC(int vendorNum, string invoiceNum, int invoiceLine, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;
            ttAPInvDtl = CurrentFullTableset.APInvDtl.Where(r => r.RowMod != IceRow.ROWSTATE_UNCHANGED).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                var APInvDtl = FindFirstAPInvDtl(Session.CompanyID, vendorNum, invoiceNum, invoiceLine);
                if (APInvDtl == null)
                    throw new BLException(Strings.InvoiceLineNotFound);
                ttAPInvDtl = new APInvDtlRow();
                BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
            }

            LibAPInvDtlTranGLCBO.RefreshListTranGLC(CurrentFullTableset.APInvDtlTGLC, ttAPInvDtl, "AP Invoice",
                Compatibility.Convert.ToString(ttAPInvDtl.VendorNum), ttAPInvDtl.InvoiceNum, Compatibility.Convert.ToString(ttAPInvDtl.InvoiceLine),
                "", "", "", true);

            foreach (var row in CurrentFullTableset.APInvDtlTGLC)
            {
                ttAPInvDtlTGLC = row;
                ttAPInvDtlTGLC.APInvoiceNum = invoiceNum;
                ttAPInvDtlTGLC.GroupID = ttAPInvDtl.GroupID;
                APInvDtlTGLC_Foreign_Link();

                if (ttAPInvDtlTGLC.RowMod != IceRow.ROWSTATE_UNCHANGED)
                    ttAPInvDtlTGLC.UserCanModify = false;
            }
        }

        /// <summary>
        /// Gets Default Deferred Expense Amortization Accounts
        /// </summary>
        public void GetDefaultAmortizationAccounts(int vendorNum, string invoiceNum, int invoiceLine, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            var APInvDtl = FindFirstAPInvDtl(Session.CompanyID, vendorNum, invoiceNum, invoiceLine);
            if (APInvDtl != null)
            {
                ttAPInvDtl = new APInvDtlRow();
                CurrentFullTableset.APInvDtl.Add(ttAPInvDtl);
                BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
                using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
                {
                    APInvDtlTGLCRunPE(true);
                    trans.Complete();
                }
                CurrentFullTableset.APInvDtl.Remove(ttAPInvDtl);
            }
            ds = CurrentFullTableset;
        }

        private void APInvDtlTGLCRunPE(bool update = false)
        {
            List<TranGLC> ttAPInvDtlTGLCPERows = new List<TranGLC>();
            CurrentFullTableset.APInvDtlTGLC.Clear();

            if (ttAPInvDtl == null)
                return;

            foreach (var tglc_Iterator in SelectTranGLC(Session.CompanyID, APInvDtl.GetTableName(), Compatibility.Convert.ToString(ttAPInvDtl.VendorNum), ttAPInvDtl.InvoiceNum, Compatibility.Convert.ToString(ttAPInvDtl.InvoiceLine), "", "", "Deferred Expense"))
            {
                LibAPInvDtlTranGLCBO.PrepareRowToDeleteFromDB(tglc_Iterator, CurrentFullTableset.APInvDtlTGLC);
            }

            if (ttAPInvDtl.DeferredExp)
            {
                using (var prepost = new AP_InvoicePre_Post(Db))
                {
                    prepost.AP_Invoice_GLControl(ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum, ttAPInvDtl.InvoiceLine, -1, ttAPInvDtlTGLCPERows);
                }

                int nextValue = 1;
                foreach (var ttAPInvDtlTGLCPE in ttAPInvDtlTGLCPERows.Where(r => r.RelatedToFile.Equals(APInvDtl.GetTableName(), StringComparison.Ordinal) && r.GLAcctContext.Equals("Deferred Expense", StringComparison.OrdinalIgnoreCase)))
                {
                    ttAPInvDtlTGLC = new Erp.Tablesets.APInvDtlTGLCRow();
                    CurrentFullTableset.APInvDtlTGLC.Add(ttAPInvDtlTGLC);
                    BufferCopy.Copy(ttAPInvDtlTGLCPE, ref ttAPInvDtlTGLC);
                    ttAPInvDtlTGLC.VendorNum = ttAPInvDtl.VendorNum;
                    ttAPInvDtlTGLC.InvoiceNum = ttAPInvDtl.InvoiceNum;
                    ttAPInvDtlTGLC.InvoiceLine = ttAPInvDtl.InvoiceLine;
                    ttAPInvDtlTGLC.APInvoiceNum = ttAPInvDtl.InvoiceNum;
                    ttAPInvDtlTGLC.GroupID = ttAPInvDtl.GroupID;
                    ttAPInvDtlTGLC.SysGLControlCode = "";
                    ttAPInvDtlTGLC.RowMod = IceRow.ROWSTATE_ADDED;
                    LibAPInvDtlTranGLCBO.BeforeCreate(ttAPInvDtlTGLC);
                    ttAPInvDtlTGLC.TGLCTranNum = nextValue++;
                    APInvDtlTGLC_Foreign_Link();
                    APInvDtlTGLCAfterGetRows();
                }
            }

            if (update)
            {
                APInvoiceTableset ds = CurrentFullTableset;
                Update(ref ds);
            }
        }

        partial void APInvDtlTGLCAfterGetRows()
        {
            LibAPInvDtlTranGLCBO.AfterGetRows(ttAPInvDtlTGLC);
            ttAPInvDtlTGLC.APInvoiceNum = ttAPInvDtlTGLC.InvoiceNum;
            APInvHed = FindFirstAPInvHed(ttAPInvDtlTGLC.Company, ttAPInvDtlTGLC.VendorNum, ttAPInvDtlTGLC.InvoiceNum);
            if (APInvHed != null)
            {
                ttAPInvDtlTGLC.GroupID = APInvHed.GroupID;
            }
        }

        partial void APInvDtlTGLCBeforeCreate()
        {
            LibAPInvDtlTranGLCBO.BeforeCreate(ttAPInvDtlTGLC);
        }

        partial void APInvDtlTGLCBeforeUpdate()
        {
            LibAPInvDtlTranGLCBO.BeforeUpdate(ttAPInvDtlTGLC);
            if (!ttAPInvDtlTGLC.UserCanModify && String.IsNullOrEmpty(ttAPInvDtlTGLC.GLAccount))
                return;

            if ((BIttAPInvDtlTGLC == null && String.IsNullOrEmpty(ttAPInvDtlTGLC.GLAccount)) ||
                (BIttAPInvDtlTGLC != null && BIttAPInvDtlTGLC.GLAccount.Equals(ttAPInvDtlTGLC.GLAccount, StringComparison.Ordinal)))
                return;

            var vparams = LibAPInvDtlTranGLCBO.GetDefaultValidateParams(ttAPInvDtlTGLC);
            vparams.RestrictID = APInvoiceRestrictionString;
            vparams.MessageDoc = Strings.InvalidAccountAmortizationDoc(vparams.DocumentKeys.Key2, vparams.DocumentKeys.Key3, vparams.GLAccount, ttAPInvDtlTGLC.BookID);
            vparams.MessageTab = Strings.ReviewAmortizationTab;
            LibAPInvDtlTranGLCBO.ValidateGLAccount(vparams);

            //It validates inside if it exists a GLAcctDisp. If not, it creates a new record for it.
            GLCreateGLAcctDisp.CheckDispAccountGeneral(ttAPInvDtlTGLC.Company, ttAPInvDtlTGLC.COACode, ttAPInvDtlTGLC.GLAccount);

            //Look for GLAcctDisp that corresponds to the GL Account. If not found create it.
            GLAcctDisp glAcctDisp = FindFirstGLAcctDispByGLAccount(ttAPInvDtlTGLC.Company, ttAPInvDtlTGLC.COACode, ttAPInvDtlTGLC.GLAccount);

            //If GLAcctDisp was created or already existed, set the proper information.
            if (glAcctDisp != null)
            {
                ttAPInvDtlTGLC.GLAccountAccountDesc = glAcctDisp.AccountDesc;
            }
        }

        /// <summary>
        /// Deletes Amortization Schedules for all Invoice Lines of the Group
        /// </summary>
        public void DeleteAmortizationSchedulesOfGroup(string groupID, int vendorNum, string invoiceNum, int invoiceLine, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            using (var txScope = ErpContext.CreateDefaultTransactionScope())
            {
                foreach (var APInvDtl_iterator in SelectAPInvDtl(Session.CompanyID, groupID, posted: false, deferredExp: true, cancellationDtl: false))
                {
                    if (PELock.IsDocumentLock(Session.CompanyID, APInvHed.GetTableName(), Compatibility.Convert.ToString(APInvDtl_iterator.VendorNum), Compatibility.Convert.ToString(APInvDtl_iterator.InvoiceNum)))
                    {
                        continue;
                    }
                    foreach (var APInvDtlDEASch_iterator in SelectAPInvDtlDEASchWithUpdLock(Session.CompanyID, APInvDtl_iterator.VendorNum, APInvDtl_iterator.InvoiceNum, APInvDtl_iterator.InvoiceLine))
                    {
                        Db.APInvDtlDEASch.Delete(APInvDtlDEASch_iterator);
                    }
                    Db.Validate();

                    CurrentFullTableset.APInvDtlDEASch.RemoveAll(ttAPInvDtlDEASch_Row => ttAPInvDtlDEASch_Row.RowMod.Compare(IceRow.ROWSTATE_ADDED) == 0 &&
                        ttAPInvDtlDEASch_Row.VendorNum == APInvDtl_iterator.VendorNum && ttAPInvDtlDEASch_Row.InvoiceNum.Compare(APInvDtl_iterator.InvoiceNum) == 0 && ttAPInvDtlDEASch_Row.InvoiceLine == APInvDtl_iterator.InvoiceLine);
                    foreach (var ttAPInvDtlDEASch_iterator in CurrentFullTableset.APInvDtlDEASch)
                    {
                        if (ttAPInvDtlDEASch_iterator.VendorNum == APInvDtl_iterator.VendorNum && ttAPInvDtlDEASch_iterator.InvoiceNum.Compare(APInvDtl_iterator.InvoiceNum) == 0 && ttAPInvDtlDEASch_iterator.InvoiceLine == APInvDtl_iterator.InvoiceLine)
                        {
                            ttAPInvDtlDEASch_iterator.RowMod = IceRow.ROWSTATE_DELETED;
                        }
                    }

                    bool currentInvoice = (APInvDtl_iterator.VendorNum == vendorNum) && (APInvDtl_iterator.InvoiceNum.Compare(invoiceNum) == 0);
                    if (currentInvoice)
                    {
                        findChangedTTAPInvDtl(APInvDtl_iterator.VendorNum, APInvDtl_iterator.InvoiceNum, APInvDtl_iterator.InvoiceLine);
                        ttAPInvDtl.DEAScheduled = false;
                        calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, false);
                    }
                }
                txScope.Complete();
            }
        }

        /// <summary>
        /// Generates Amortization Schedules for all Invoice Lines of the Group
        /// </summary>
        public void GenerateAmortizationSchedulesForGroup(string groupID, int vendorNum, string invoiceNum, int invoiceLine, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            using (var txScope = ErpContext.CreateDefaultTransactionScope())
            {
                foreach (var APInvDtl_iterator in SelectAPInvDtlWithUpdLock(Session.CompanyID, groupID, posted: false, deferredExp: true, cancellationDtl: false))
                {
                    if (PELock.IsDocumentLock(Session.CompanyID, APInvHed.GetTableName(), Compatibility.Convert.ToString(APInvDtl_iterator.VendorNum), Compatibility.Convert.ToString(APInvDtl_iterator.InvoiceNum)))
                    {
                        continue;
                    }
                    if (!ExistsAPInvDtlDEASch(APInvDtl_iterator.Company, APInvDtl_iterator.VendorNum, APInvDtl_iterator.InvoiceNum, APInvDtl_iterator.InvoiceLine, posted: false))
                    {
                        DateTime? endDate = APInvDtl_iterator.DEAEndDate;
                        //Generate amortization schedule considering non recoverable taxes
                        findChangedTTAPInvDtl(APInvDtl_iterator.VendorNum, APInvDtl_iterator.InvoiceNum, APInvDtl_iterator.InvoiceLine);
                        APInvHedPartial APInvHedPartial = FindFirstAPInvHedPartial(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
                        if (APInvHedPartial != null)
                        {
                            var APNonDeductTaxSum = APCalculateGLAnalysisVariance.GetAPNonDeducTaxSum(APInvHedPartial.DebitMemo, APInvDtl_iterator, APInvHedPartial.MatchedFromLI, APInvHedPartial.AllowOverrideLI);
                            decimal[] nonDeductTaxTotals = new decimal[]
                            {
                                APNonDeductTaxSum?.NonDeducAmt     ?? 0,
                                APNonDeductTaxSum?.DocNonDeducAmt  ?? 0,
                                APNonDeductTaxSum?.Rpt1NonDeducAmt ?? 0,
                                APNonDeductTaxSum?.Rpt2NonDeducAmt ?? 0,
                                APNonDeductTaxSum?.Rpt3NonDeducAmt ?? 0
                            };
                            LibCreateAmort.CreateAPAmortizationScheduleWithNonDeductTax(APInvDtl_iterator, nonDeductTaxTotals);
                        }
                        if (APInvDtl_iterator.DEAEndDate == null)
                        {
                            APInvDtl_iterator.DEAEndDate = endDate;
                            Db.Validate(APInvDtl_iterator);
                        }

                        bool currentInvoice = (APInvDtl_iterator.VendorNum == vendorNum) && (APInvDtl_iterator.InvoiceNum.Compare(invoiceNum) == 0);
                        if (currentInvoice)
                        {
                            findChangedTTAPInvDtl(APInvDtl_iterator.VendorNum, APInvDtl_iterator.InvoiceNum, APInvDtl_iterator.InvoiceLine);

                            foreach (var APInvDtlDEASch_iterator in SelectAPInvDtlDEASch(APInvDtl_iterator.Company, APInvDtl_iterator.VendorNum, APInvDtl_iterator.InvoiceNum, APInvDtl_iterator.InvoiceLine))
                            {
                                ttAPInvDtlDEASch = new Erp.Tablesets.APInvDtlDEASchRow();
                                BufferCopy.Copy(APInvDtlDEASch_iterator, ref ttAPInvDtlDEASch);
                                ds.APInvDtlDEASch.Add(ttAPInvDtlDEASch);
                                APInvDtlDEASchAfterGetRows();
                            }

                            ttAPInvDtl.DEAEndDate = APInvDtl_iterator.DEAEndDate;
                            ttAPInvDtl.DEAScheduled = true;
                            calculateAmortizationTotals(ttAPInvDtl, ttAPInvDtl.DeferredExp, false);
                        }
                    }
                }
                txScope.Complete();
            }
        }

        /// <summary>
        /// Restores default Amortization Schedules for all Invoice Lines of the Group
        /// </summary>
        public void RestoreAmortizationSchedulesOfGroup(string groupID, int vendorNum, string invoiceNum, int invoiceLine, ref APInvoiceTableset ds)
        {
            DeleteAmortizationSchedulesOfGroup(groupID, vendorNum, invoiceNum, invoiceLine, ref ds);
            GenerateAmortizationSchedulesForGroup(groupID, vendorNum, invoiceNum, invoiceLine, ref ds);
        }

        /// <summary>
        /// Validates that all Deferred Expense Lines are scheduled. If no than throws Exception
        /// </summary>
        public void ValidateAllDeferredLinesAreScheduled(string groupID)
        {
            foreach (var APInvDtl_iterator in SelectAPInvDtl(Session.CompanyID, groupID, posted: false, deferredExp: true, cancellationDtl: false))
            {
                var amortScheduleLines = SelectAPInvDtlDEASch(Session.CompanyID, APInvDtl_iterator.VendorNum, APInvDtl_iterator.InvoiceNum, APInvDtl_iterator.InvoiceLine);
                if (!amortScheduleLines.Any())
                {
                    throw new BLException(Strings.SomeLinesWithDeferredExpensesDontHaveAmortSchedule);
                }
                else
                {

                    APInvDtl tempAPInvDtl = null;
                    BufferCopy.Copy(APInvDtl_iterator, ref tempAPInvDtl);
                    APInvHedPartial APInvHedPartial = FindFirstAPInvHedPartial(Session.CompanyID, tempAPInvDtl.VendorNum, tempAPInvDtl.InvoiceNum);
                    if (APInvHedPartial != null)
                    {
                        var apNonDeductTaxSum = APCalculateGLAnalysisVariance.GetAPNonDeducTaxSum(APInvHedPartial.DebitMemo, tempAPInvDtl, APInvHedPartial.MatchedFromLI, APInvHedPartial.AllowOverrideLI);

                        bool debitMemo = APInvHedPartial.DebitMemo;
                        decimal amtRemaining = debitMemo ? APInvDtl_iterator.ExtCost - apNonDeductTaxSum?.NonDeducAmt ?? 0 : APInvDtl_iterator.ExtCost + apNonDeductTaxSum?.NonDeducAmt ?? 0,
                                docAmtRemaining = debitMemo ? APInvDtl_iterator.DocExtCost - apNonDeductTaxSum?.DocNonDeducAmt ?? 0 : APInvDtl_iterator.DocExtCost + apNonDeductTaxSum?.DocNonDeducAmt ?? 0,
                                rpt1AmtRemaining = debitMemo ? APInvDtl_iterator.Rpt1ExtCost - apNonDeductTaxSum?.Rpt1NonDeducAmt ?? 0 : APInvDtl_iterator.Rpt1ExtCost + apNonDeductTaxSum?.Rpt1NonDeducAmt ?? 0,
                                rpt2AmtRemaining = debitMemo ? APInvDtl_iterator.Rpt2ExtCost - apNonDeductTaxSum?.Rpt2NonDeducAmt ?? 0 : APInvDtl_iterator.Rpt2ExtCost + apNonDeductTaxSum?.Rpt2NonDeducAmt ?? 0,
                                rpt3AmtRemaining = debitMemo ? APInvDtl_iterator.Rpt3ExtCost - apNonDeductTaxSum?.Rpt3NonDeducAmt ?? 0 : APInvDtl_iterator.Rpt3ExtCost + apNonDeductTaxSum?.Rpt3NonDeducAmt ?? 0;

                        foreach (var amortScheduleLine in amortScheduleLines)
                        {
                            amtRemaining -= amortScheduleLine.AmortAmt;
                            docAmtRemaining -= amortScheduleLine.DocAmortAmount;
                            rpt1AmtRemaining -= amortScheduleLine.Rpt1AmortAmt;
                            rpt2AmtRemaining -= amortScheduleLine.Rpt2AmortAmt;
                            rpt3AmtRemaining -= amortScheduleLine.Rpt3AmortAmt;
                        }
                        if (amtRemaining != 0m || docAmtRemaining != 0m || rpt1AmtRemaining != 0m || rpt2AmtRemaining != 0m || rpt3AmtRemaining != 0m)
                        {
                            throw new BLException(Strings.RemainingMustBeZero);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Validates that all Deferred Expense Lines have GLAccount selected. If no then throws Exception
        /// </summary>
        public void ValidateAllDeferredLinesHaveGLAccount(string groupID)
        {

            var glaccountRows = selectGLAccountFromTranGLC(Session.CompanyID, groupID);
            var glaccountOnly = glaccountRows.Select(row => new { InvoiceDate = row.InvoiceDate, GLAccount = row.GLAccount, COACode = row.COACode, ExtCompanyID = row.ExtCompanyID }).Distinct().ToList();
            foreach (var gl in glaccountOnly)
            {

                var gls = glaccountRows.Where(r => r.COACode.KeyEquals(gl.COACode) && r.GLAccount.KeyEquals(gl.GLAccount) && r.InvoiceDate == gl.InvoiceDate && r.ExtCompanyID.KeyEquals(gl.ExtCompanyID)).FirstOrDefault();
                if (gls != null)
                {


                    var vp = new TranGLCBO.ValidateParams
                    {
                        ValidateBlank = true,
                        ValidateDynamicSegment = true,
                        EffectiveDate = gls.InvoiceDate,
                        Company = gls.Company,
                        COACode = gls.COACode,
                        GLAccount = gls.GLAccount,
                        ExtCompanyID = gls.ExtCompanyID,
                        RestrictID = APInvoiceRestrictionString
                    };

                    if (gls.InvoiceLine.Equals("0", StringComparison.CurrentCultureIgnoreCase))
                    {
                        vp.MessageDoc = Strings.InvalidHeaderAccountDoc(gls.InvoiceNum, gls.GLAccount, gls.BookID);
                        vp.MessageTab = Strings.ReviewHeaderGLAnalysisTab;

                    }
                    else
                    {
                        vp.MessageDoc = gls.RelatedToFile.Equals("APInvDtl", StringComparison.CurrentCultureIgnoreCase) ? Strings.InvalidAccountAmortizationDoc(gls.InvoiceNum, gls.InvoiceLine, gls.GLAccount, gls.BookID) : Strings.InvalidAccountDoc(gls.InvoiceNum, gls.InvoiceLine, gls.GLAccount, gls.BookID);
                        vp.MessageTab = gls.RelatedToFile.Equals("APInvDtl", StringComparison.CurrentCultureIgnoreCase) ? Strings.ReviewAmortizationTab : Strings.ReviewGLAnalysisTab;
                    }
                    LibAPInvExpTranGLCBO.ValidateGLAccount(vp);
                }
                else
                    throw new BLException(Strings.GLAccountCantbeValidated(gl.GLAccount));
            }
        }

        private DateTime? getTaxRateDate(APInvHed apInvHed)
        {
            DateTime? result = null;

            if (apInvHed.TaxRateDate != null)
                result = apInvHed.TaxRateDate;
            else if (apInvHed.TaxPoint != null)
                result = apInvHed.TaxPoint;
            else if (this.vUseDate == 1)
                result = apInvHed.InvoiceDate;
            else
                result = apInvHed.ApplyDate;

            return result;
        }

        /// <param name="ds"></param>
        /// <param name="VendorNum">The APInvHed Vendor Number</param>
        /// <param name="PurPoint">The PackSlip of the current receipt</param>
        /// <param name="PackSlip">The PackSlip of the current receipt.</param>
        /// <param name="isFirstReceipt">Used to calculate the BaseAmount when is not the fist row</param>
        /// <param name="InvoiceNum">The current InvoiceNum.</param>
        /// <param name="InPONum">The PO Number to retrieve uninvoiced receipts for.  May be blank.</param>
        public void GetAPUninvoicedReceiptLines(ref APInvReceiptBillingTableset ds, int VendorNum, string PurPoint, string PackSlip, bool isFirstReceipt, string InvoiceNum, int InPONum)
        {
            decimal mtlUnitCost = decimal.Zero;
            int pStep = 0;
            string partBaseUM = string.Empty;
            decimal partBaseQty = decimal.Zero;
            decimal calcVendorUnitCost = decimal.Zero;
            decimal calcInVendorUnitCost = decimal.Zero;
            decimal calcDocVendorUnitCost = decimal.Zero;
            decimal calcDocInVendorUnitCost = decimal.Zero;
            decimal pExRate = decimal.Zero;
            string vInspection = string.Empty;
            bool okToGet = true;

            if (InPONum != 0)
            {
                ttAPUninvoicedReceipts = ds.APUninvoicedReceipts.Where(x => x.Company.KeyEquals(Session.CompanyID) && x.VendorNum == VendorNum && x.PurPoint.KeyEquals(PurPoint) && x.PackSlip.KeyEquals(PackSlip) && x.PONum == InPONum && x.DropShip == false).FirstOrDefault();
            }
            else
            {
                ttAPUninvoicedReceipts = ds.APUninvoicedReceipts.Where(x => x.Company.KeyEquals(Session.CompanyID) && x.VendorNum == VendorNum && x.PurPoint.KeyEquals(PurPoint) && x.PackSlip.KeyEquals(PackSlip) && x.DropShip == false).FirstOrDefault();
            }

            if (ttAPUninvoicedReceipts == null)
                throw new BLException(Strings.InvalidUninvoicedReceipt);

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, VendorNum, InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvalidAPInvoice, "APInvHed");
            }/* if not available APInvHed */



            Erp.Tablesets.APReceiptTotalsRow ttAPReceiptTotalsReceipts = ds.APReceiptTotals.Where(x => x.VendorNum == VendorNum && x.Company.KeyEquals(Session.CompanyID) && x.InvoiceNum.KeyEquals(InvoiceNum) && x.RowMod != IceRow.ROWSTATE_UNCHANGED).FirstOrDefault();
            if (ttAPReceiptTotalsReceipts == null)
                throw new BLException(Strings.ReceiptNotFound);
            ttAPReceiptTotalsReceipts.AvailableTotal = decimal.Zero;
            ttAPReceiptTotalsReceipts.DocAvailableTotal = decimal.Zero;
            ttAPReceiptTotalsReceipts.Rpt1AvailableTotal = decimal.Zero;
            ttAPReceiptTotalsReceipts.Rpt2AvailableTotal = decimal.Zero;
            ttAPReceiptTotalsReceipts.Rpt3AvailableTotal = decimal.Zero;

            Erp.Tablesets.APUninvoicedRcptLinesRow ttAPUninvoiceReceipLines;

            var RcvDtlQuery5 = DBExpressionCompiler.Compile(RcvDtlExpression5);
            //RcvDtl_LOOP:
            foreach (var RcvDtl_iterator in (RcvDtlQuery5(Db, ttAPUninvoicedReceipts.Company, ttAPUninvoicedReceipts.VendorNum, ttAPUninvoicedReceipts.PurPoint, ttAPUninvoicedReceipts.PackSlip, "Std", "SMI", true, false, true)))
            {
                RcvDtl = RcvDtl_iterator;

                okToGet = (APInvHed.InPrice == ExistsRcvHead(Session.CompanyID, RcvDtl.VendorNum, RcvDtl.PurPoint, RcvDtl.PackSlip, true));

                if (RcvDtl.PONum != 0)
                    POHeader = FindFirstPOHeader(ttAPUninvoicedReceipts.Company, RcvDtl.PONum);

                if (POHeader != null && ttAPUninvoicedReceipts.PONum != 0 && RcvDtl.PONum != ttAPUninvoicedReceipts.PONum && InPONum != 0)
                    continue;

                if (okToGet)
                {
                    if (!(((from ttAPUninvoicedRcptLines_Row in ds.APUninvoicedRcptLines
                            where ttAPUninvoicedRcptLines_Row.SysRowID == RcvDtl.SysRowID
                            && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.RowMod, Ice.IceRow.ROWSTATE_UNCHANGED) != 0
                            select ttAPUninvoicedRcptLines_Row).Any())) &&
                    !(((from ttAPSelectedRcptLines_Row in ds.APSelectedRcptLines
                        where ttAPSelectedRcptLines_Row.SysRowID == RcvDtl.SysRowID
                        && StringExtensions.Compare(ttAPSelectedRcptLines_Row.RowMod, Ice.IceRow.ROWSTATE_UNCHANGED) != 0
                        select ttAPSelectedRcptLines_Row).Any())) &&
                        this.existsRcvDtlNotInvoiced2(Session.CompanyID, RcvDtl.PackSlip, RcvDtl.VendorNum, RcvDtl.PackLine, InvoiceNum))
                    {
                        var baseCurrencyCode = SelectBaseCurrencyCode(Session.CompanyID, true);
                        if (POHeader == null || StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) == 0)
                        {
                            calcDocVendorUnitCost = RcvDtl.DocVendorUnitCost;
                            calcDocInVendorUnitCost = RcvDtl.DocInVendorUnitCost;
                        }
                        else
                        {
                            if (tmpChainRows != null)
                            {
                                tmpChainRows.Clear();
                            }

                            if (vUseDate == 1)
                            {
                                vExDate = APInvHed.InvoiceDate;
                            }
                            else
                            {
                                vExDate = APInvHed.ApplyDate;
                            }

                            this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, POHeader.CurrencyCode, APInvHed.CurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", APInvHed.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                            calcDocVendorUnitCost = this.LibConvertAmtEF.ConvertAmt(RcvDtl.DocVendorUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                            calcDocVendorUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcDocVendorUnitCost, APInvHed.CurrencyCode, "RcvDtl", "DocVendorUnitCost");
                            calcDocInVendorUnitCost = this.LibConvertAmtEF.ConvertAmt(RcvDtl.DocInVendorUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                            calcDocInVendorUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcDocInVendorUnitCost, APInvHed.CurrencyCode, "RcvDtl", "DocVendorUnitCost");

                        }

                        if (APInvHed.CurrencyCode.Equals(baseCurrencyCode, StringComparison.OrdinalIgnoreCase))
                        {
                            calcVendorUnitCost = calcDocVendorUnitCost;
                            calcInVendorUnitCost = calcDocInVendorUnitCost;
                        }
                        else
                        {
                            this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, APInvHed.CurrencyCode, baseCurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", baseCurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                            calcVendorUnitCost = this.LibConvertAmtEF.ConvertAmt(calcDocVendorUnitCost, APInvHed.CurrencyCode, baseCurrencyCode, tmpChainRows, true);
                            calcVendorUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcVendorUnitCost, baseCurrencyCode, "RcvDtl", "DocVendorUnitCost");
                            calcInVendorUnitCost = this.LibConvertAmtEF.ConvertAmt(calcDocInVendorUnitCost, APInvHed.CurrencyCode, baseCurrencyCode, tmpChainRows, true);
                            calcInVendorUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcInVendorUnitCost, baseCurrencyCode, "RcvDtl", "DocVendorUnitCost");
                        }

                        ttAPUninvoicedRcptLines = new Erp.Tablesets.APUninvoicedRcptLinesRow();

                        ds.APUninvoicedRcptLines.Add(ttAPUninvoicedRcptLines);
                        vInspection = (((RcvDtl.InspectionReq == true && RcvDtl.InspectionPending == true)) ? (Strings.Pending) : (((RcvDtl.InspectionPending == false && RcvDtl.FailedQty > 0)) ? (Strings.Failed) : (((RcvDtl.InspectionPending == false && RcvDtl.PassedQty > 0 && RcvDtl.FailedQty == 0)) ? (Strings.Passed) : (Strings.None))));
                        BufferCopy.Copy(RcvDtl, ttAPUninvoicedRcptLines);
                        ttAPUninvoicedRcptLines.DummyKey = ttAPUninvoicedReceipts.SysRowID.ToString();
                        ttAPUninvoicedRcptLines.GridVenPartNum = ((RcvDtl.VenPartNum.Length > 0) ? RcvDtl.VenPartNum : RcvDtl.PartNum);
                        ttAPUninvoicedRcptLines.VendorUnitCost = calcVendorUnitCost;
                        ttAPUninvoicedRcptLines.InVendorUnitCost = calcInVendorUnitCost;
                        ttAPUninvoicedRcptLines.DocVendorUnitCost = calcDocVendorUnitCost;
                        ttAPUninvoicedRcptLines.DocInVendorUnitCost = calcDocInVendorUnitCost;
                        ttAPUninvoicedRcptLines.PassedQty = RcvDtl.PassedQty * RcvDtl.DimConvFactor;
                        ttAPUninvoicedRcptLines.FailedQty = RcvDtl.FailedQty * RcvDtl.DimConvFactor;
                        ttAPUninvoicedRcptLines.Inspection = vInspection;
                        ttAPUninvoicedRcptLines.InvoiceNum = ttAPUninvoicedReceipts.InvoiceNum;
                        ttAPUninvoicedRcptLines.CurrencyCode = APInvHed.CurrencyCode;
                        if (Erp.Internal.Lib.ErpCallContext.ContainsKey("GetReceipts"))
                        {
                            ttAPUninvoicedRcptLines.SelectLine = true;
                            ttAPUninvoicedRcptLines.RowMod = IceRow.ROWSTATE_UPDATED;

                        }

                        Part = Part.FindFirstByPrimaryKey(Db, RcvDtl.Company, RcvDtl.PartNum);
                        ttAPUninvoicedRcptLines.TrackInventoryAttributes = ((Part != null) ? Part.TrackInventoryAttributes : false);
                        partBaseUM = ((Part != null) ? Part.IUM : RcvDtl.IUM);
                        partBaseQty = RcvDtl.OurQty;
                        if (StringExtensions.Compare(partBaseUM, RcvDtl.IUM) != 0)
                        {
                            LibAppService.UOMConv(RcvDtl.PartNum, RcvDtl.OurQty, RcvDtl.IUM, partBaseUM, out partBaseQty, false);
                        }

                        /*NOTE: The mtlUnitCost is calculated this way to match the calculation that will be done for PartTran. It may seem odd
                                to divide by partBaseQty and then later multiply by it BUT DO NOT CHANGE IT, it is necessary to meet the same calculation
                                that will be done for the PartTran.ExtCost, if not doing so will result in decimal mismatches between the AP Invoice and the
                                PUR-STK Part Transaction.
                                When using OurUnitCost and OurQty to find the cost, we don't need to divide it by the Cost Factor. We only need
                                to apply the Cost Factor (per Each, per/100, etc) if we're using Vendor UnitCost and VendorQty.*/

                        if (RcvDtl.PONum != 0)
                        {
                            if (StringExtensions.Compare(RcvDtl.PUM, RcvDtl.IUM) != 0)
                            {

                                if (!APInvHed.InPrice || calcDocVendorUnitCost == 0)
                                {
                                    mtlUnitCost = (calcDocVendorUnitCost * RcvDtl.VendorQty);
                                }
                                else
                                {
                                    mtlUnitCost = (calcDocInVendorUnitCost * RcvDtl.VendorQty);

                                }
                                ttAPUninvoicedRcptLines.DocLineAmount = LibRoundAmountEF.RoundDecimalsTT((mtlUnitCost / costFactor(RcvDtl.CostPerCode)), ttAPUninvoicedRcptLines, "DocLineAmount");
                            }
                            else
                            {
                                if (!APInvHed.InPrice || calcDocVendorUnitCost == 0)
                                {
                                    mtlUnitCost = (calcDocVendorUnitCost * RcvDtl.VendorQty) / partBaseQty;
                                }
                                else
                                {
                                    mtlUnitCost = (calcDocInVendorUnitCost * RcvDtl.VendorQty) / partBaseQty;

                                }
                                ttAPUninvoicedRcptLines.DocLineAmount = LibRoundAmountEF.RoundDecimalsTT((mtlUnitCost * partBaseQty / costFactor(RcvDtl.CostPerCode)), ttAPUninvoicedRcptLines, "DocLineAmount");
                            }

                            var outLineAmount2 = ttAPUninvoicedRcptLines.LineAmount;
                            var outRpt1LineAmount2 = ttAPUninvoicedRcptLines.Rpt1LineAmount;
                            var outRpt2LineAmount2 = ttAPUninvoicedRcptLines.Rpt2LineAmount;
                            var outRpt3LineAmount2 = ttAPUninvoicedRcptLines.Rpt3LineAmount;
                            CalcBaseAmt(ttAPUninvoicedRcptLines.DocLineAmount, APInvHed.VendorNum, APInvHed.InvoiceNum, ttAPUninvoicedRcptLines, "LineAmount", out outLineAmount2, out outRpt1LineAmount2, out outRpt2LineAmount2, out outRpt3LineAmount2);
                            ttAPUninvoicedRcptLines.LineAmount = outLineAmount2;
                            ttAPUninvoicedRcptLines.Rpt1LineAmount = outRpt1LineAmount2;
                            ttAPUninvoicedRcptLines.Rpt2LineAmount = outRpt2LineAmount2;
                            ttAPUninvoicedRcptLines.Rpt3LineAmount = outRpt3LineAmount2;
                        }
                        else
                        {
                            if (!APInvHed.InPrice || RcvDtl.InOurCost == 0)
                            {
                                mtlUnitCost = (RcvDtl.OurUnitCost * RcvDtl.OurQty) / partBaseQty;
                            }
                            else
                            {
                                mtlUnitCost = (RcvDtl.InOurCost * RcvDtl.OurQty) / partBaseQty;
                            }

                            ttAPUninvoicedRcptLines.LineAmount = LibRoundAmountEF.RoundDecimalsTT((mtlUnitCost * partBaseQty), ttAPUninvoicedRcptLines, "LineAmount");
                            var outLineAmount3 = ttAPUninvoicedRcptLines.LineAmount;
                            var outDocLineAmount = ttAPUninvoicedRcptLines.DocLineAmount;
                            var outRpt1LineAmount3 = ttAPUninvoicedRcptLines.Rpt1LineAmount;
                            var outRpt2LineAmount3 = ttAPUninvoicedRcptLines.Rpt2LineAmount;
                            var outRpt3LineAmount3 = ttAPUninvoicedRcptLines.Rpt3LineAmount;
                            CalcDocAmt(ref outLineAmount3, APInvHed.VendorNum, APInvHed.InvoiceNum, ttAPUninvoicedRcptLines, "DocLineAmount", "LineAmount", out outDocLineAmount, out outRpt1LineAmount3, out outRpt2LineAmount3, out outRpt3LineAmount3);
                            ttAPUninvoicedRcptLines.LineAmount = outLineAmount3;
                            ttAPUninvoicedRcptLines.DocLineAmount = outDocLineAmount;
                            ttAPUninvoicedRcptLines.Rpt1LineAmount = outRpt1LineAmount3;
                            ttAPUninvoicedRcptLines.Rpt2LineAmount = outRpt2LineAmount3;
                            ttAPUninvoicedRcptLines.Rpt3LineAmount = outRpt3LineAmount3;
                        }

                        ttAPReceiptTotalsReceipts.DocAvailableTotal += ttAPUninvoicedRcptLines.DocLineAmount;
                    }/* if not(can-find(ttAPUninvoicedRcptLines  */
                    else
                    {
                        ttAPUninvoiceReceipLines = ds.APUninvoicedRcptLines.Where(x => x.SysRowID == RcvDtl.SysRowID && x.RowMod == Ice.IceRow.ROWSTATE_UPDATED).FirstOrDefault();
                        if (ttAPUninvoiceReceipLines != null)
                            ttAPReceiptTotalsReceipts.DocAvailableTotal += ttAPUninvoiceReceipLines.DocLineAmount;
                    }
                }  // AP Invoice and related PO have the same Tax Liability type
            }/* RcvDtl_LOOP */

            var outAvailableTotal = ttAPReceiptTotalsReceipts.AvailableTotal;
            var outRpt1AvailableTotal = ttAPReceiptTotalsReceipts.Rpt1AvailableTotal;
            var outRpt2AvailableTotal = ttAPReceiptTotalsReceipts.Rpt2AvailableTotal;
            var outRpt3AvailableTotal = ttAPReceiptTotalsReceipts.Rpt3AvailableTotal;
            CalcBaseAmt(ttAPReceiptTotalsReceipts.DocAvailableTotal, APInvHed.VendorNum, APInvHed.InvoiceNum, ttAPUninvoicedReceipts, "AvailableTotal", out outAvailableTotal, out outRpt1AvailableTotal, out outRpt2AvailableTotal, out outRpt3AvailableTotal);
            ttAPReceiptTotalsReceipts.AvailableTotal = outAvailableTotal;
            ttAPReceiptTotalsReceipts.Rpt1AvailableTotal = outRpt1AvailableTotal;
            ttAPReceiptTotalsReceipts.Rpt2AvailableTotal = outRpt2AvailableTotal;
            ttAPReceiptTotalsReceipts.Rpt3AvailableTotal = outRpt3AvailableTotal;
        }
        /// <summary>
        /// Retrieves lines for a DropShipment
        /// </summary>
        /// <param name="VendorNum">Current VendorNum</param>
        /// <param name="PurPoint">Current PurPoint</param>
        /// <param name="PackSlip">Current PackSlip</param>
        /// <param name="InvoiceNum">Current InvoiceNum</param>
        /// <param name="ds">Current ds</param>
        public void GetAPUninvoicedDropShipmentLines(int VendorNum, string PurPoint, string PackSlip, string InvoiceNum, ref APInvReceiptBillingTableset ds)
        {
            int pStep = 0;
            decimal calcDocUnitCost = decimal.Zero;
            decimal calcDocInUnitCost = decimal.Zero;
            decimal calcUnitCost = decimal.Zero;
            decimal calcInUnitCost = decimal.Zero;
            decimal pExRate = decimal.Zero;
            bool poInPrice = false;


            ttAPUninvoicedReceipts = ds.APUninvoicedReceipts.Where(x => x.Company.KeyEquals(Session.CompanyID) && x.VendorNum == VendorNum && x.PurPoint.KeyEquals(PurPoint) && x.PackSlip.KeyEquals(PackSlip) && x.DropShip == true).FirstOrDefault();

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, VendorNum, InvoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvalidAPInvoice, "APInvHed");
            }/* if not available APInvHed */

            POHeader = FindFirstPOHeader(ttAPUninvoicedReceipts.Company, ttAPUninvoicedReceipts.PONum);
            if (POHeader != null && POHeader.InPrice)
            {
                poInPrice = true;
            }

            if ((POHeader != null && POHeader.InPrice == APInvHed.InPrice) || (POHeader == null && !APInvHed.InPrice))
            {

                Erp.Tablesets.APReceiptTotalsRow ttAPReceiptTotalsReceipts = ds.APReceiptTotals.Where(x => x.VendorNum == VendorNum && x.Company.KeyEquals(Session.CompanyID) && x.InvoiceNum.KeyEquals(InvoiceNum) && x.RowMod != IceRow.ROWSTATE_UNCHANGED).FirstOrDefault();
                ttAPReceiptTotalsReceipts.AvailableTotal = decimal.Zero;
                ttAPReceiptTotalsReceipts.DocAvailableTotal = decimal.Zero;
                ttAPReceiptTotalsReceipts.Rpt1AvailableTotal = decimal.Zero;
                ttAPReceiptTotalsReceipts.Rpt2AvailableTotal = decimal.Zero;
                ttAPReceiptTotalsReceipts.Rpt3AvailableTotal = decimal.Zero;

                Erp.Tablesets.APUninvoicedRcptLinesRow ttAPUninvoiceReceipLines;

                var DropShipDtlQuery3 = DBExpressionCompiler.Compile(DropShipDtlExpression3);
                //DropShipDtl_LOOP:
                foreach (var DropShipDtl_iterator in (DropShipDtlQuery3(Db, ttAPUninvoicedReceipts.Company, ttAPUninvoicedReceipts.VendorNum, ttAPUninvoicedReceipts.PurPoint, ttAPUninvoicedReceipts.PackSlip, false)))
                {
                    DropShipDtl = DropShipDtl_iterator;
                    if (!(((from ttAPUninvoicedRcptLines_Row in ds.APUninvoicedRcptLines
                            where ttAPUninvoicedRcptLines_Row.SysRowID == DropShipDtl.SysRowID
                            && StringExtensions.Compare(ttAPUninvoicedRcptLines_Row.RowMod, Ice.IceRow.ROWSTATE_UNCHANGED) != 0
                            select ttAPUninvoicedRcptLines_Row).Any())) &&
                    !(((from ttAPSelectedRcptLines_Row in ds.APSelectedRcptLines
                        where ttAPSelectedRcptLines_Row.SysRowID == DropShipDtl.SysRowID
                        && StringExtensions.Compare(ttAPSelectedRcptLines_Row.RowMod, Ice.IceRow.ROWSTATE_UNCHANGED) != 0
                        select ttAPSelectedRcptLines_Row).Any())))
                    {
                        if (POHeader == null || StringExtensions.Compare(POHeader.CurrencyCode, APInvHed.CurrencyCode) == 0)
                        {
                            calcDocUnitCost = DropShipDtl.DocUnitCost;
                            if (poInPrice)
                            {
                                PODetail = this.FindFirstPODetail(Session.CompanyID, DropShipDtl.PONum, DropShipDtl.POLine);
                                if (PODetail != null)
                                {
                                    calcDocInUnitCost = PODetail.DocInUnitCost;
                                }

                            }

                        }
                        else
                        {
                            if (tmpChainRows != null)
                            {
                                tmpChainRows.Clear();
                            }

                            if (vUseDate == 1)
                            {
                                vExDate = APInvHed.InvoiceDate;
                            }
                            else
                            {
                                vExDate = APInvHed.ApplyDate;
                            }

                            this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, POHeader.CurrencyCode, APInvHed.CurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", APInvHed.CurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                            calcDocUnitCost = this.LibConvertAmtEF.ConvertAmt(DropShipDtl.DocUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                            calcDocUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcDocUnitCost, APInvHed.CurrencyCode, "DropShipDtl", "DocUnitCost");
                            if (poInPrice)
                            {
                                PODetail = this.FindFirstPODetail(Session.CompanyID, DropShipDtl.PONum, DropShipDtl.POLine);
                                if (PODetail != null)
                                {
                                    calcDocInUnitCost = this.LibConvertAmtEF.ConvertAmt(PODetail.DocInUnitCost, POHeader.CurrencyCode, APInvHed.CurrencyCode, tmpChainRows, true);
                                    calcDocInUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcDocInUnitCost, APInvHed.CurrencyCode, "DropShipDtl", "DocUnitCost");
                                }

                            }

                        }

                        var baseCurrencyCode = SelectBaseCurrencyCode(Session.CompanyID, true);
                        if (APInvHed.CurrencyCode.Equals(baseCurrencyCode, StringComparison.OrdinalIgnoreCase))
                        {
                            calcUnitCost = calcDocUnitCost;
                            calcInUnitCost = calcDocInUnitCost;
                        }
                        else
                        {
                            this.LibGetCurrencyRatesEF.buildChain(APInvHed.RateGrpCode, APInvHed.CurrencyCode, baseCurrencyCode, vExDate, false, 0, "", "", "", "", "", "", "", "", "", baseCurrencyCode, ref pStep, ref tmpChainRows, out pExRate);
                            calcUnitCost = this.LibConvertAmtEF.ConvertAmt(calcDocUnitCost, APInvHed.CurrencyCode, baseCurrencyCode, tmpChainRows, true);
                            calcUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcUnitCost, baseCurrencyCode, "DropShipDtl", "DocUnitCost");
                            calcInUnitCost = this.LibConvertAmtEF.ConvertAmt(calcDocInUnitCost, APInvHed.CurrencyCode, baseCurrencyCode, tmpChainRows, true);
                            calcInUnitCost = LibRoundAmountEF.RoundDecimalsApply(calcInUnitCost, baseCurrencyCode, "DropShipDtl", "DocUnitCost");
                        }

                        ttAPUninvoicedRcptLines = new Erp.Tablesets.APUninvoicedRcptLinesRow();
                        ds.APUninvoicedRcptLines.Add(ttAPUninvoicedRcptLines);
                        ttAPUninvoicedRcptLines.Company = DropShipDtl.Company;
                        ttAPUninvoicedRcptLines.VendorNum = DropShipDtl.VendorNum;
                        ttAPUninvoicedRcptLines.PurPoint = DropShipDtl.PurPoint;
                        ttAPUninvoicedRcptLines.DropShipPackSlip = DropShipDtl.PackSlip;
                        ttAPUninvoicedRcptLines.PackSlip = DropShipDtl.PackSlip;
                        ttAPUninvoicedRcptLines.DummyKey = ttAPUninvoicedReceipts.SysRowID.ToString();
                        ttAPUninvoicedRcptLines.DropShip = true;
                        ttAPUninvoicedRcptLines.PackLine = DropShipDtl.PackLine;
                        ttAPUninvoicedRcptLines.PartNum = DropShipDtl.PartNum;
                        ttAPUninvoicedRcptLines.GridVenPartNum = ((DropShipDtl.VenPartNum.Length > 0) ? DropShipDtl.VenPartNum : DropShipDtl.PartNum);
                        ttAPUninvoicedRcptLines.OurQty = DropShipDtl.OurQty;
                        ttAPUninvoicedRcptLines.CurrencyCode = ttAPUninvoicedReceipts.CurrencyCode;
                        ttAPUninvoicedRcptLines.PONum = DropShipDtl.PONum;
                        ttAPUninvoicedRcptLines.POLine = DropShipDtl.POLine;
                        ttAPUninvoicedRcptLines.PORelNum = DropShipDtl.PORelNum;
                        ttAPUninvoicedRcptLines.TranReference = DropShipDtl.TranReference;
                        ttAPUninvoicedRcptLines.PartDescription = DropShipDtl.LineDesc;
                        ttAPUninvoicedRcptLines.VendorQty = DropShipDtl.VendorQty;
                        ttAPUninvoicedRcptLines.PUM = DropShipDtl.PUM;
                        ttAPUninvoicedRcptLines.Inspection = (Strings.None);
                        ttAPUninvoicedRcptLines.InvoiceNum = InvoiceNum;
                        ttAPUninvoicedRcptLines.SysRowID = DropShipDtl.SysRowID;
                        if (Erp.Internal.Lib.ErpCallContext.ContainsKey("GetReceipts"))
                        {
                            ttAPUninvoicedRcptLines.SelectLine = true;
                            ttAPUninvoicedRcptLines.RowMod = IceRow.ROWSTATE_UPDATED;

                        }


                        if (!poInPrice)
                        {
                            ttAPUninvoicedRcptLines.OurUnitCost = DropShipDtl.OurUnitCost;
                            ttAPUninvoicedRcptLines.VendorUnitCost = calcUnitCost;
                            ttAPUninvoicedRcptLines.DocVendorUnitCost = calcDocUnitCost;
                            ttAPUninvoicedRcptLines.InVendorUnitCost = calcInUnitCost;
                            ttAPUninvoicedRcptLines.DocInVendorUnitCost = calcDocInUnitCost;
                            ttAPUninvoicedRcptLines.DocLineAmount = LibRoundAmountEF.RoundDecimalsApply((DropShipDtl.VendorQty / costFactor(DropShipDtl.CostPerCode)) * calcDocUnitCost, ttAPUninvoicedRcptLines.CurrencyCode, "APInvDtl", "ScrDocExtCost");
                        }
                        else
                        {
                            ttAPUninvoicedRcptLines.OurUnitCost = calcInUnitCost;
                            ttAPUninvoicedRcptLines.VendorUnitCost = calcUnitCost;
                            ttAPUninvoicedRcptLines.DocVendorUnitCost = calcDocUnitCost;
                            ttAPUninvoicedRcptLines.InVendorUnitCost = calcInUnitCost;
                            ttAPUninvoicedRcptLines.DocInVendorUnitCost = calcDocInUnitCost;
                            ttAPUninvoicedRcptLines.DocLineAmount = LibRoundAmountEF.RoundDecimalsApply((DropShipDtl.VendorQty / costFactor(DropShipDtl.CostPerCode)) * calcInUnitCost, ttAPUninvoicedRcptLines.CurrencyCode, "APInvDtl", "ScrDocExtCost");
                        }

                        var outLineAmount = ttAPUninvoicedRcptLines.LineAmount;
                        var outRpt1LineAmount = ttAPUninvoicedRcptLines.Rpt1LineAmount;
                        var outRpt2LineAmount = ttAPUninvoicedRcptLines.Rpt2LineAmount;
                        var outRpt3LineAmount = ttAPUninvoicedRcptLines.Rpt3LineAmount;

                        CalcBaseAmt(ttAPUninvoicedRcptLines.DocLineAmount, APInvHed.VendorNum, APInvHed.InvoiceNum, ttAPUninvoicedRcptLines, "LineAmount", out outLineAmount, out outRpt1LineAmount, out outRpt2LineAmount, out outRpt3LineAmount);

                        ttAPUninvoicedRcptLines.LineAmount = outLineAmount;
                        ttAPUninvoicedRcptLines.Rpt1LineAmount = outRpt1LineAmount;
                        ttAPUninvoicedRcptLines.Rpt2LineAmount = outRpt2LineAmount;
                        ttAPUninvoicedRcptLines.Rpt3LineAmount = outRpt3LineAmount;

                        ttAPReceiptTotalsReceipts.DocAvailableTotal += ttAPUninvoicedRcptLines.DocLineAmount;
                    }/* if not(can-find(ttAPUninvoicedRcptLines  */
                    else
                    {
                        ttAPUninvoiceReceipLines = ds.APUninvoicedRcptLines.Where(x => x.SysRowID == DropShipDtl.SysRowID && x.RowMod == Ice.IceRow.ROWSTATE_UPDATED).FirstOrDefault();
                        if (ttAPUninvoiceReceipLines != null)
                            ttAPReceiptTotalsReceipts.DocAvailableTotal += ttAPUninvoiceReceipLines.DocLineAmount;
                    }
                }/* DropShipDtl_LOOP */

                var outAvailableTotal = ttAPReceiptTotalsReceipts.AvailableTotal;
                var outRpt1AvailableTotal = ttAPReceiptTotalsReceipts.Rpt1AvailableTotal;
                var outRpt2AvailableTotal = ttAPReceiptTotalsReceipts.Rpt2AvailableTotal;
                var outRpt3AvailableTotal = ttAPReceiptTotalsReceipts.Rpt3AvailableTotal;
                CalcBaseAmt(ttAPReceiptTotalsReceipts.DocAvailableTotal, APInvHed.VendorNum, APInvHed.InvoiceNum, ttAPUninvoicedReceipts, "AvailableTotal", out outAvailableTotal, out outRpt1AvailableTotal, out outRpt2AvailableTotal, out outRpt3AvailableTotal);
                ttAPReceiptTotalsReceipts.AvailableTotal = outAvailableTotal;
                ttAPReceiptTotalsReceipts.Rpt1AvailableTotal = outRpt1AvailableTotal;
                ttAPReceiptTotalsReceipts.Rpt2AvailableTotal = outRpt2AvailableTotal;
                ttAPReceiptTotalsReceipts.Rpt3AvailableTotal = outRpt3AvailableTotal;
            }
        }
        /// <summary>
        /// This method should be called when the Tax Region on the invoice detail record is changed.
        /// </summary> 
        /// <param name="iTaxRegionCode">Proposed tax category.</param>
        /// <param name="ds">A/R invoice data set.</param>   
        public void OnChangeofLineTaxRgn(string iTaxRegionCode, ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPInvDtl = (
                from ttAPInvDtl_Row in ds.APInvDtl
                where !String.IsNullOrEmpty(ttAPInvDtl_Row.RowMod)
                select ttAPInvDtl_Row).FirstOrDefault();
            if (ttAPInvDtl == null)
            {
                throw new BLException(Strings.TtApInvDtlNotFound, "ttAPInvDt", "RowMod");
            }

            if (!String.IsNullOrEmpty(iTaxRegionCode))
            {
                if (!this.ExistsTaxRgn(Session.CompanyID, iTaxRegionCode, true))
                {
                    throw new BLException(Strings.TaxLiabilityNotValid);
                }
            }

            ttAPInvDtl.TaxRegionCode = iTaxRegionCode;

            ttAPInvHed = (from ttAPInvHed_Row in ds.APInvHed
                          where !String.IsNullOrEmpty(ttAPInvHed_Row.RowMod)
                          select ttAPInvHed_Row).FirstOrDefault();
            if (ttAPInvHed != null)
            {
                ttAPInvDtl.EnableIntrastat = getEnableIntrastat();
            }
        }
        /// <summary>
        /// This methos return APsyst.AllowMultInvcReceipt value.
        /// </summary>
        /// <param name="flag"></param>
        public void GetAllowMultInvcReceiptsValue(out bool flag)
        {
            flag = apSystPartial.AllowMultInvcReceipts;
        }

        private void UpdateFinalInvoiceFlag()
        {
            decimal PackSlipInvoicedQty = decimal.Zero;
            string groupID = string.Empty;
            decimal currentSupplierUnInvcReceiptQty = decimal.Zero;
            bool isCorrectionInvoiceLine = APInvHed != null && APInvHed.CorrectionInv && !ttAPInvDtl.CorrectionDtl;

            if (ttAPInvDtl.FinalInvoice && !String.IsNullOrEmpty(ttAPInvDtl.PackSlip))
            {
                groupID = existsUnpostedInvoiceLine(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.PONum, ttAPInvDtl.PackSlip, ttAPInvDtl.PackLine, ttAPInvDtl.InvoiceNum);
                if (!String.IsNullOrEmpty(groupID))
                    throw new BLException(Strings.PendingInvoiceToBePosted(groupID));
            }
            else
            {
                if (String.Compare(ttAPInvDtl.LineType, "R", StringComparison.CurrentCultureIgnoreCase) == 0)
                {
                    RcvDtl = this.FindFirstRcvDtl(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.PurPoint, ttAPInvDtl.PackSlip, ttAPInvDtl.PackLine);
                    if (RcvDtl != null)
                    {
                        PackSlipInvoicedQty = this.getPackSlipInvoicedQty(Session.CompanyID, RcvDtl.VendorNum, RcvDtl.PurPoint, RcvDtl.PackSlip, RcvDtl.PackLine, ttAPInvDtl.InvoiceNum);
                        currentSupplierUnInvcReceiptQty = (RcvDtl.VendorQty - PackSlipInvoicedQty - ttAPInvDtl.ScrVendorQty);

                        if (isCorrectionInvoiceLine)
                        {
                            decimal originalVendorQty = FindFirstAPInvDtlVendorQty(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, APInvHed.InvoiceRef, ttAPInvDtl.InvoiceLineRef);
                            decimal correctionQty = originalVendorQty - ttAPInvDtl.VendorQty;

                            currentSupplierUnInvcReceiptQty = (RcvDtl.VendorQty - (PackSlipInvoicedQty - correctionQty));
                        }

                        if (currentSupplierUnInvcReceiptQty <= decimal.Zero)
                            throw new BLException(Strings.PartialInvoicingRequiresPartialQty(Convert.ToInt32(RcvDtl.VendorQty - PackSlipInvoicedQty)));
                    }
                }
            }
        }


        private void UpdateVendorQtyRelatedFields(bool isCancellationInvoice)
        {
            decimal PackSlipInvoicedQty = decimal.Zero;
            decimal vendorQty = ttAPInvDtl.VendorQty;
            bool isCorrectionInvoiceLine = APInvHed != null && APInvHed.CorrectionInv && !ttAPInvDtl.CorrectionDtl;

            using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
            {
                RcvDtl = this.FindFirstRcvDtlWithUpdLock(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.PurPoint, ttAPInvDtl.PackSlip, ttAPInvDtl.PackLine);
                PORel = this.FindFirstPORelWithUpdLock(ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine, ttAPInvDtl.PORelNum);

                decimal originalVendorQty = FindFirstAPInvDtlVendorQty(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, APInvHed.InvoiceRef, ttAPInvDtl.InvoiceLineRef);
                decimal correctionQty = originalVendorQty - ttAPInvDtl.VendorQty;

                if (RcvDtl != null)
                {
                    PackSlipInvoicedQty = this.getPackSlipInvoicedQty(Session.CompanyID, RcvDtl.VendorNum, RcvDtl.PurPoint, RcvDtl.PackSlip, RcvDtl.PackLine, ttAPInvDtl.InvoiceNum);

                    if (Db.IsLocked(RcvDtl))
                        throw new BLException(GlobalStrings.RecordIsLocked("RcvDtl"));

                    if (isCorrectionInvoiceLine)
                    {
                        if (correctionQty != decimal.Zero)
                            RcvDtl.SupplierUnInvcReceiptQty = !ttAPInvDtl.FinalInvoice ? (RcvDtl.VendorQty - (PackSlipInvoicedQty - correctionQty)) : 0;
                    }
                    else
                    {
                        RcvDtl.SupplierUnInvcReceiptQty = !ttAPInvDtl.FinalInvoice || isCancellationInvoice ? (RcvDtl.VendorQty - PackSlipInvoicedQty - vendorQty) : 0;
                    }

                    RcvDtl.Invoiced = isCancellationInvoice && RcvDtl.SupplierUnInvcReceiptQty == RcvDtl.VendorQty ? false : RcvDtl.Invoiced;
                }
                if (PORel != null)
                {
                    if (RcvDtl == null && isCancellationInvoice)
                    {
                        PackSlipInvoicedQty = this.getPackSlipInvoicedQty(Session.CompanyID, ttAPInvDtl.VendorNum, ttAPInvDtl.PurPoint, ttAPInvDtl.PackSlip, ttAPInvDtl.PackLine, ttAPInvDtl.InvoiceNum);
                    }

                    if (Db.IsLocked(PORel))
                        throw new BLException(GlobalStrings.RecordIsLocked("PORel"));

                    if (isCorrectionInvoiceLine)
                    {
                        if (correctionQty != decimal.Zero)
                            PORel.InvoicedQty = !ttAPInvDtl.FinalInvoice ? PackSlipInvoicedQty - correctionQty : PORel.ReceivedQty;
                    }
                    else
                    {
                        PORel.InvoicedQty = !ttAPInvDtl.FinalInvoice || isCancellationInvoice ? PackSlipInvoicedQty + vendorQty : PORel.ReceivedQty;
                    }
                }

                Db.Validate(RcvDtl);
                Db.Validate(PORel);
                Db.Validate();
                trans.Complete();
            }
        }

        #region GRNI Mass Creation

        ///<summary>
        ///  Purpose:Called during the code to generate GRNI 
        ///  Parameters:  none
        ///  Notes:       
        ///</summary>
        private void genSysLegalNumGRNIClearing()
        {
            string tempLegalNumberMsg = string.Empty;
            string foreignKeyString = string.Empty;
            string cOCRNumber = string.Empty;

            CurrentFullTableset.LegalNumGenOpts.Clear();

            APInvHedRow tmpAPInvHedRow = new APInvHedRow();
            BufferCopy.Copy(APInvHed, tmpAPInvHedRow);

            GetLegalNumberDfltsCommon(tmpAPInvHedRow);

            ttLegalNumGenOpts = (from ttLegalNumGenOpts_Row in CurrentFullTableset.LegalNumGenOpts
                                 where !String.IsNullOrEmpty(ttLegalNumGenOpts_Row.RowMod)
                                 select ttLegalNumGenOpts_Row).FirstOrDefault();

            if (ttLegalNumGenOpts != null && ttLegalNumGenOpts.GenerationType.Equals("System", StringComparison.OrdinalIgnoreCase)
                && ttLegalNumGenOpts.GenerationOption.Equals("save", StringComparison.OrdinalIgnoreCase))
            {
                foreignKeyString = Compatibility.Convert.ToString(APInvHed.VendorNum).Trim() + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(APInvHed.InvoiceNum).Trim();
                var outLegalNumber2 = APInvHed.LegalNumber;
                LibLegalNumberGenerate.GenerateLegalNumber(CurrentFullTableset.LegalNumGenOpts, "APInvHed", foreignKeyString, out outLegalNumber2, out cOCRNumber, out tempLegalNumberMsg);

                APInvHed.LegalNumber = outLegalNumber2;
            }

            CurrentFullTableset.LegalNumGenOpts.Clear();
        }

        /// <summary>
        /// Method to create Not Invoiced Receipts 
        /// </summary>
        /// <param name = "ds"></param>
        /// <param name="selectionMode"></param>
        /// <param name="ipVendorList"></param>
        /// <param name="ipNewGroupID"></param>
        /// <param name="invoiceNum"></param>
        /// <param name="invoiceDate"></param>
        /// <param name="docTypeID"></param>
        /// <param name="opNewInvoiceNum"></param>
        /// <param name="opErrMsg"></param>
        public void CreateNotInvRcptInvoice(ref APInvGetNotInvRecSourceTableset ds, string selectionMode, string ipVendorList, string ipNewGroupID, string invoiceNum, DateTime? invoiceDate, string docTypeID, out string opNewInvoiceNum, out string opErrMsg)
        {
            opErrMsg = string.Empty;
            opNewInvoiceNum = string.Empty;
            int numInvoices = 0;
            Erp.Tables.APInvHed bAPInvHed = null;
            string invoiceNumSeq = string.Empty;
            decimal outSumUninvLineAmt = 0;
            decimal outDifferenceAmt = 0;
            double outDifferenceDays = 0;

            APInvGrp = FindFirstAPInvGrp(Session.CompanyID, ipNewGroupID);
            if (APInvGrp == null)
            {
                throw new BLException(Strings.APInvGrpNotFound, "APInvGrp", "GroupID");
            }

            if (PELock.IsDocumentLock(Session.CompanyID, "APInvGrp", ipNewGroupID, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty))
            {
                ExceptionManager.AddBLException(PELock.LockMessage);
                ExceptionManager.AssertNoBLExceptions();
            }

            apSystPartial = FindPartialAPSyst(Session.CompanyID);
            XbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            if (XbSyst != null)
            {
                vRateGrpCode = XbSyst.PORateGrp;
            }

            Currency = FindFirstBaseCurrency(Session.CompanyID, true);

            using (TransactionScope createNotInvRcpts = ErpContext.CreateDefaultTransactionScope())
            {
                if (selectionMode.Equals("True", StringComparison.OrdinalIgnoreCase))
                {
                    foreach (var ttAPNotInvRcptLines_iterator in (from ttAPNotInvRcptLines_Row in ds.APInvGetNotInvRecSource
                                                                  where ttAPNotInvRcptLines_Row.SelectedForAction == true
                                                                  select ttAPNotInvRcptLines_Row).ToList())
                    {
                        int VendorList = ttAPNotInvRcptLines_iterator.VendorNum;
                        int SelectedPO = ttAPNotInvRcptLines_iterator.PONum;
                        int SelectedPOLine = ttAPNotInvRcptLines_iterator.POLine;
                        string SelectedPackSlip = ttAPNotInvRcptLines_iterator.PackSlip;

                        foreach (var RcvDtl_iterator in (this.SelectRcvDtl(Session.CompanyID, VendorList, SelectedPO, SelectedPOLine, SelectedPackSlip)))
                        {
                            RcvDtl = RcvDtl_iterator;
                            if (RcvDtl != null)
                            {
                                if (invoiceNumSeq.Equals(string.Empty))
                                {
                                    invoiceNumSeq = APGRNICLearingSequence.NextGRNINum();
                                }

                                //Evaluate if an Invoiced Receipt has a posted invoice, if not, continues with the next receipt
                                if (RcvDtl.Invoiced && !this.ExistsAPInvHedPosted(Session.CompanyID, RcvDtl.VendorNum, RcvDtl.PONum, RcvDtl.PackSlip, RcvDtl.PackLine, RcvDtl.PartNum))
                                {
                                    continue;
                                }
                                //Obtain the total amount invoiced from posted record
                                else if (RcvDtl.Invoiced && this.ExistsAPInvHedPosted(Session.CompanyID, RcvDtl.VendorNum, RcvDtl.PONum, RcvDtl.PackSlip, RcvDtl.PackLine, RcvDtl.PartNum))
                                {
                                    calcGRNIvalues(invoiceDate, RcvDtl.ReceiptDate, RcvDtl.SupplierUnInvcReceiptQty, RcvDtl.VendorUnitCost, RcvDtl.VendorNum, RcvDtl.PONum, RcvDtl.PartNum, RcvDtl.VendorQty, RcvDtl.Invoiced, out outDifferenceAmt, out outSumUninvLineAmt, out outDifferenceDays);
                                }
                                //Assing the 100% of the amount pending to be invoiced if an uninvoiced receipt wants to be cleared
                                else if (!RcvDtl.Invoiced)
                                {
                                    calcGRNIvalues(invoiceDate, RcvDtl.ReceiptDate, RcvDtl.SupplierUnInvcReceiptQty, RcvDtl.VendorUnitCost, RcvDtl.VendorNum, RcvDtl.PONum, RcvDtl.PartNum, RcvDtl.VendorQty, RcvDtl.Invoiced, out outDifferenceAmt, out outSumUninvLineAmt, out outDifferenceDays);
                                }

                                if (outDifferenceAmt <= apSystPartial.PercentageTolerance && outSumUninvLineAmt <= apSystPartial.ToleranceAmt && outDifferenceDays >= apSystPartial.DaysOutstanding)
                                {
                                    if (!this.ExistsAPInvHed(Session.CompanyID, RcvDtl.VendorNum, invoiceNumSeq, true))
                                    {
                                        bAPInvHed = this.FindFirstAPInvHed23(Session.CompanyID, RcvDtl.VendorNum, invoiceNumSeq, false, true);
                                        if (bAPInvHed == null)
                                        {
                                            APInvHed = new Erp.Tables.APInvHed();
                                            Db.APInvHed.Insert(APInvHed);
                                            APInvHed.Company = APInvGrp.Company;
                                            APInvHed.VendorNum = RcvDtl.VendorNum;
                                            APInvHed.InvoiceNum = invoiceNumSeq;
                                            APInvHed.InvoiceDate = invoiceDate;
                                            APInvHed.DueDate = invoiceDate;
                                            APInvHed.GroupID = ipNewGroupID;
                                            APInvHed.Posted = false;
                                            APInvHed.FiscalYear = APInvGrp.FiscalYear;
                                            APInvHed.FiscalPeriod = APInvGrp.FiscalPeriod;
                                            APInvHed.InvoiceRef = invoiceNumSeq;
                                            APInvHed.DocInvoiceVendorAmt = 0;
                                            APInvHed.Description = string.Empty;
                                            APInvHed.CurrencyCode = ((Currency != null) ? Currency.CurrencyCode : "");
                                            APInvHed.REFPONum = 0;
                                            APInvHed.TaxRegionCode = string.Empty;
                                            APInvHed.RateGrpCode = vRateGrpCode;
                                            APInvHed.ApplyDate = APInvGrp.ApplyDate;
                                            APInvHed.FiscalYearSuffix = APInvGrp.FiscalYearSuffix;
                                            APInvHed.FiscalCalendarID = APInvGrp.FiscalCalendarID;
                                            APInvHed.TaxPoint = APInvHed.ApplyDate;
                                            APInvHed.TaxRateDate = APInvHed.ApplyDate;
                                            APInvHed.ReadyToCalc = apSystPartial.InvcReadyToCalcDflt;
                                            APInvHed.APTaxRoundOption = apSystPartial.APTaxRoundOption;
                                            APInvHed.EntryPerson = Session.UserID;
                                            APInvHed.TaxRateGrpCode = ((XbSyst != null && XbSyst.UseTaxRate) ? XbSyst.TaxRateGrp : "");
                                            APInvHed.TranDocTypeID = docTypeID;
                                            APInvHed.AGAvTaxCreditFlag = true;
                                            APInvHed.GRNIClearing = true;
                                            if (isPolandLocalization)
                                                APInvHed.PLInvoiceReference = APInvHed.InvoiceNum;

                                            LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                                            foreach (var ttChainRow in ttChainRows)
                                            {
                                                CurrExChain = new Erp.Tables.CurrExChain();
                                                Db.CurrExChain.Insert(CurrExChain);
                                                BufferCopy.CopyExceptFor(ttChainRow, CurrExChain, new string[] { CurrExChain.ColumnNames.Key1, CurrExChain.ColumnNames.Key2, CurrExChain.ColumnNames.TableName, CurrExChain.ColumnNames.SysRowID, CurrExChain.ColumnNames.SysRevID });
                                                CurrExChain.TableName = "APInvHed";
                                                CurrExChain.Key1 = Compatibility.Convert.ToString(APInvHed.VendorNum);
                                                CurrExChain.Key2 = APInvHed.InvoiceNum;
                                                Db.Validate(CurrExChain);
                                            }
                                            numInvoices = numInvoices + 1;
                                        }
                                        genSysLegalNumGRNIClearing();
                                        Db.Validate(APInvHed);



                                        APInvDtl = new Erp.Tables.APInvDtl();
                                        Db.APInvDtl.Insert(APInvDtl);
                                        APInvDtl.Company = APInvGrp.Company;
                                        APInvDtl.VendorNum = RcvDtl.VendorNum;
                                        APInvDtl.InvoiceNum = invoiceNumSeq;
                                        APInvDtl.LineType = "R";
                                        APInvDtl.PartNum = RcvDtl.PartNum;
                                        APInvDtl.PONum = RcvDtl.PONum;
                                        APInvDtl.POLine = RcvDtl.POLine;
                                        APInvDtl.PORelNum = RcvDtl.PORelNum;
                                        APInvDtl.Description = RcvDtl.PartDescription;
                                        APInvDtl.PurPoint = RcvDtl.PurPoint;
                                        APInvDtl.PackSlip = RcvDtl.PackSlip;
                                        APInvDtl.PackLine = RcvDtl.PackLine;
                                        APInvDtl.VendorQty = RcvDtl.OurUnInvcReceiptQty;
                                        APInvDtl.PUM = RcvDtl.PUM;
                                        APInvDtl.IUM = RcvDtl.IUM;
                                        APInvDtl.CostPerCode = RcvDtl.CostPerCode;
                                        APInvDtl.OurQty = RcvDtl.OurUnInvcReceiptQty;
                                        APInvDtl.ExtCost = 0;
                                        APInvDtl.DocExtCost = 0;
                                        APInvDtl.Rpt1ExtCost = 0;
                                        APInvDtl.Rpt2ExtCost = 0;
                                        APInvDtl.Rpt3ExtCost = 0;
                                        APInvDtl.FinalInvoice = true;

                                        APInvDtl.InvoiceLine = GetNextInvoiceLine(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum);

                                        if (isIndiaLocalization)
                                        {
                                            INShared.INCodesResult inCodes = LibINShared.GetINCodesByHierarchy(INShared.ScopeType.Purchase, APInvDtl.Company, APInvDtl.PONum, APInvDtl.POLine, APInvDtl.PartNum);
                                            APInvDtl.CommodityCode = inCodes.CommodityCode;
                                            APInvDtl.TaxCatID = inCodes.TaxCatID;
                                        }

                                        Db.Validate(APInvDtl);


                                        //Create APInvExp Record
                                        APInvExp = new Erp.Tables.APInvExp();
                                        Db.APInvExp.Insert(APInvExp);
                                        APInvExp.Company = APInvDtl.Company;
                                        APInvExp.VendorNum = APInvDtl.VendorNum;
                                        APInvExp.InvoiceNum = APInvDtl.InvoiceNum;
                                        APInvExp.InvoiceLine = APInvDtl.InvoiceLine;
                                        APInvExp.ExpAmt = APInvDtl.ExtCost;
                                        APInvExp.DocExpAmt = APInvDtl.DocExtCost;
                                        APInvExp.Rpt1ExpAmt = APInvDtl.Rpt1ExtCost;
                                        APInvExp.Rpt2ExpAmt = APInvDtl.Rpt2ExtCost;
                                        APInvExp.Rpt3ExpAmt = APInvDtl.Rpt3ExtCost;
                                        APInvExp.InvExpSeq = 1;
                                        Db.Validate(APInvExp);

                                        if (!Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt"))
                                        {
                                            APCreateTranGLCForAPInvExp.RunCreateTranGLCForAPInvExp(APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine, 1);
                                        }
                                    }

                                    RcvDtl.SupplierUnInvcReceiptQty = 0;
                                    RcvDtl.InvoiceNum = invoiceNumSeq;
                                    RcvDtl.InvoiceLine = APInvDtl.InvoiceLine;
                                    RcvDtl.Invoiced = true;
                                    Db.Validate(RcvDtl);

                                }
                            }
                        }
                    }
                }
                else
                {
                    foreach (var RcvDtl_iterator in (this.SelectRcvDtl(Session.CompanyID, ipVendorList)))
                    {
                        RcvDtl = RcvDtl_iterator;
                        if (RcvDtl != null)
                        {
                            if (invoiceNumSeq.Equals(string.Empty))
                            {
                                invoiceNumSeq = APGRNICLearingSequence.NextGRNINum();
                            }

                            //Evaluate if an Invoiced Receipt has a posted invoice, if not, continues with the next receipt
                            if (RcvDtl.Invoiced && !this.ExistsAPInvHedPosted(Session.CompanyID, RcvDtl.VendorNum, RcvDtl.PONum, RcvDtl.PackSlip, RcvDtl.PackLine, RcvDtl.PartNum))
                            {
                                continue;
                            }
                            //Obtain the total amount invoiced from posted record
                            else if (RcvDtl.Invoiced && this.ExistsAPInvHedPosted(Session.CompanyID, RcvDtl.VendorNum, RcvDtl.PONum, RcvDtl.PackSlip, RcvDtl.PackLine, RcvDtl.PartNum))
                            {
                                calcGRNIvalues(invoiceDate, RcvDtl.ReceiptDate, RcvDtl.SupplierUnInvcReceiptQty, RcvDtl.VendorUnitCost, RcvDtl.VendorNum, RcvDtl.PONum, RcvDtl.PartNum, RcvDtl.VendorQty, RcvDtl.Invoiced, out outDifferenceAmt, out outSumUninvLineAmt, out outDifferenceDays);
                            }
                            //Assing the 100% of the amount pending to be invoiced if an uninvoiced receipt wants to be cleared
                            else if (!RcvDtl.Invoiced)
                            {
                                calcGRNIvalues(invoiceDate, RcvDtl.ReceiptDate, RcvDtl.SupplierUnInvcReceiptQty, RcvDtl.VendorUnitCost, RcvDtl.VendorNum, RcvDtl.PONum, RcvDtl.PartNum, RcvDtl.VendorQty, RcvDtl.Invoiced, out outDifferenceAmt, out outSumUninvLineAmt, out outDifferenceDays);
                            }

                            if (outDifferenceAmt <= apSystPartial.PercentageTolerance && outSumUninvLineAmt <= apSystPartial.ToleranceAmt && outDifferenceDays >= apSystPartial.DaysOutstanding)
                            {
                                if (!this.ExistsAPInvHed(Session.CompanyID, RcvDtl.VendorNum, invoiceNumSeq, true))
                                {
                                    bAPInvHed = this.FindFirstAPInvHed23(Session.CompanyID, RcvDtl.VendorNum, invoiceNumSeq, false, true);
                                    if (bAPInvHed == null)
                                    {
                                        APInvHed = new Erp.Tables.APInvHed();
                                        Db.APInvHed.Insert(APInvHed);
                                        APInvHed.Company = APInvGrp.Company;
                                        APInvHed.VendorNum = RcvDtl.VendorNum;
                                        APInvHed.InvoiceNum = invoiceNumSeq;
                                        APInvHed.InvoiceDate = invoiceDate;
                                        APInvHed.DueDate = invoiceDate;
                                        APInvHed.GroupID = ipNewGroupID;
                                        APInvHed.Posted = false;
                                        APInvHed.FiscalYear = APInvGrp.FiscalYear;
                                        APInvHed.FiscalPeriod = APInvGrp.FiscalPeriod;
                                        APInvHed.InvoiceRef = invoiceNumSeq;
                                        APInvHed.DocInvoiceVendorAmt = 0;
                                        APInvHed.Description = string.Empty;
                                        APInvHed.CurrencyCode = ((Currency != null) ? Currency.CurrencyCode : "");
                                        APInvHed.REFPONum = 0;
                                        APInvHed.TaxRegionCode = string.Empty;
                                        APInvHed.RateGrpCode = vRateGrpCode;
                                        APInvHed.ApplyDate = APInvGrp.ApplyDate;
                                        APInvHed.FiscalYearSuffix = APInvGrp.FiscalYearSuffix;
                                        APInvHed.FiscalCalendarID = APInvGrp.FiscalCalendarID;
                                        APInvHed.TaxPoint = APInvHed.ApplyDate;
                                        APInvHed.TaxRateDate = APInvHed.ApplyDate;
                                        APInvHed.ReadyToCalc = apSystPartial.InvcReadyToCalcDflt;
                                        APInvHed.APTaxRoundOption = apSystPartial.APTaxRoundOption;
                                        APInvHed.EntryPerson = Session.UserID;
                                        APInvHed.TaxRateGrpCode = ((XbSyst != null && XbSyst.UseTaxRate) ? XbSyst.TaxRateGrp : "");
                                        APInvHed.TranDocTypeID = docTypeID;
                                        APInvHed.AGAvTaxCreditFlag = true;
                                        APInvHed.GRNIClearing = true;
                                        if (isPolandLocalization)
                                            APInvHed.PLInvoiceReference = APInvHed.InvoiceNum;

                                        LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                                        foreach (var ttChainRow in ttChainRows)
                                        {
                                            CurrExChain = new Erp.Tables.CurrExChain();
                                            Db.CurrExChain.Insert(CurrExChain);
                                            BufferCopy.CopyExceptFor(ttChainRow, CurrExChain, new string[] { CurrExChain.ColumnNames.Key1, CurrExChain.ColumnNames.Key2, CurrExChain.ColumnNames.TableName, CurrExChain.ColumnNames.SysRowID, CurrExChain.ColumnNames.SysRevID });
                                            CurrExChain.TableName = "APInvHed";
                                            CurrExChain.Key1 = Compatibility.Convert.ToString(APInvHed.VendorNum);
                                            CurrExChain.Key2 = APInvHed.InvoiceNum;
                                            Db.Validate(CurrExChain);
                                        }
                                        numInvoices = numInvoices + 1;
                                    }
                                    genSysLegalNumGRNIClearing();
                                    Db.Validate(APInvHed);



                                    APInvDtl = new Erp.Tables.APInvDtl();
                                    Db.APInvDtl.Insert(APInvDtl);
                                    APInvDtl.Company = APInvGrp.Company;
                                    APInvDtl.VendorNum = RcvDtl.VendorNum;
                                    APInvDtl.InvoiceNum = invoiceNumSeq;
                                    APInvDtl.LineType = "R";
                                    APInvDtl.PartNum = RcvDtl.PartNum;
                                    APInvDtl.PONum = RcvDtl.PONum;
                                    APInvDtl.POLine = RcvDtl.POLine;
                                    APInvDtl.PORelNum = RcvDtl.PORelNum;
                                    APInvDtl.Description = RcvDtl.PartDescription;
                                    APInvDtl.PackSlip = RcvDtl.PackSlip;
                                    APInvDtl.PackLine = RcvDtl.PackLine;
                                    APInvDtl.VendorQty = RcvDtl.OurUnInvcReceiptQty;
                                    APInvDtl.PUM = RcvDtl.PUM;
                                    APInvDtl.IUM = RcvDtl.IUM;
                                    APInvDtl.CostPerCode = RcvDtl.CostPerCode;
                                    APInvDtl.OurQty = RcvDtl.OurUnInvcReceiptQty;
                                    APInvDtl.ExtCost = 0;
                                    APInvDtl.DocExtCost = 0;
                                    APInvDtl.Rpt1ExtCost = 0;
                                    APInvDtl.Rpt2ExtCost = 0;
                                    APInvDtl.Rpt3ExtCost = 0;
                                    APInvDtl.FinalInvoice = true;

                                    APInvDtl.InvoiceLine = GetNextInvoiceLine(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum);

                                    if (isIndiaLocalization)
                                    {
                                        INShared.INCodesResult inCodes = LibINShared.GetINCodesByHierarchy(INShared.ScopeType.Purchase, APInvDtl.Company, APInvDtl.PONum, APInvDtl.POLine, APInvDtl.PartNum);
                                        APInvDtl.CommodityCode = inCodes.CommodityCode;
                                        APInvDtl.TaxCatID = inCodes.TaxCatID;
                                    }

                                    Db.Validate(APInvDtl);

                                    //Create APInvExp Record
                                    APInvExp = new Erp.Tables.APInvExp();
                                    Db.APInvExp.Insert(APInvExp);
                                    APInvExp.Company = APInvDtl.Company;
                                    APInvExp.VendorNum = APInvDtl.VendorNum;
                                    APInvExp.InvoiceNum = APInvDtl.InvoiceNum;
                                    APInvExp.InvoiceLine = APInvDtl.InvoiceLine;
                                    APInvExp.ExpAmt = APInvDtl.ExtCost;
                                    APInvExp.DocExpAmt = APInvDtl.DocExtCost;
                                    APInvExp.Rpt1ExpAmt = APInvDtl.Rpt2ExtCost;
                                    APInvExp.Rpt2ExpAmt = APInvDtl.Rpt2ExtCost;
                                    APInvExp.Rpt3ExpAmt = APInvDtl.Rpt3ExtCost;
                                    APInvExp.InvExpSeq = 1;
                                    Db.Validate(APInvExp);

                                    if (!Erp.Internal.Lib.ErpCallContext.ContainsKey("UpdateExt"))
                                    {
                                        APCreateTranGLCForAPInvExp.RunCreateTranGLCForAPInvExp(APInvDtl.VendorNum, APInvDtl.InvoiceNum, APInvDtl.InvoiceLine, 1);
                                    }
                                }

                                RcvDtl.SupplierUnInvcReceiptQty = 0;
                                RcvDtl.InvoiceNum = invoiceNumSeq;
                                RcvDtl.InvoiceLine = APInvDtl.InvoiceLine;
                                RcvDtl.Invoiced = true;
                                Db.Validate(RcvDtl);
                            }
                        }
                    }
                }
                opNewInvoiceNum = Compatibility.Convert.ToString(numInvoices) + ' ' + Strings.RecInvoicesCreated;
                createNotInvRcpts.Complete();
            } //End of transaction scope
        }

        /// <summary>
        /// Method to obtain GRNI Clearing values
        /// </summary>
        /// <param name="invoiceDate"></param>
        /// <param name="ReceiptDate"></param>
        /// <param name="SupplierUnInvcReceiptQty"></param>
        /// <param name="VendorUnitCost"></param>
        /// <param name="VendorNum"></param>
        /// <param name="PONum"></param>
        /// <param name="PartNum"></param>
        /// <param name="VendorQty"></param>
        /// <param name="invoiced"></param>
        /// <param name="differenceAmt"></param>
        /// <param name="sumUninvLineAmt"></param>
        /// <param name="differenceDays"></param>
        private void calcGRNIvalues(DateTime? invoiceDate, DateTime? ReceiptDate, decimal SupplierUnInvcReceiptQty, decimal VendorUnitCost, int VendorNum, int PONum, string PartNum, decimal VendorQty, bool invoiced, out decimal differenceAmt, out decimal sumUninvLineAmt, out double differenceDays)
        {
            differenceAmt = 0;
            sumUninvLineAmt = 0;
            decimal totalExtCost = 0;

            TimeSpan days = invoiceDate.Value.Date - ReceiptDate.Value.Date;
            differenceDays = days.TotalDays;
            sumUninvLineAmt = SupplierUnInvcReceiptQty * VendorUnitCost;

            if (invoiced)
            {
                var selectTotalExtCost = DBExpressionCompiler.Compile(SelectTotalInvoicedAmt);
                totalExtCost = selectTotalExtCost(Db, Session.CompanyID, VendorNum, PONum, PartNum);

                differenceAmt = 100 - (totalExtCost.SafeDivision(VendorQty * VendorUnitCost) * 100);
            }
            else
            {
                differenceAmt = (sumUninvLineAmt > 0) ? 100 : 0;
            }
        }


        /// <summary>
        /// Create COS and WIP:ADJ-PUR transactions and performs variance calculation.
        /// </summary>
        /// <param name="Result"></param>
        /// <param name="GroupID"></param>
        /// <param name="InvoiceNum"></param>
        /// <param name="VendorNum"></param>
        /// <param name="tranDocType"></param>
        /// <param name="ds"></param>
        public void PostGRNIClearingInvoices(out string Result, string GroupID, string InvoiceNum, int VendorNum, string tranDocType, ref APInvoiceTableset ds)
        {
            Result = string.Empty;

            using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
            {
                foreach (APInvoiceHedAndDtl APInvHedAndDtl_Iterator in this.SelectAPClearingInvHedDtls(Session.CompanyID, GroupID, false, true))
                {
                    APInvHed TempHed = APInvHedAndDtl_Iterator.GRNIAPInvHed;


                    APInvHedRow tmpAPInvHedRow = new APInvHedRow();
                    BufferCopy.Copy(TempHed, tmpAPInvHedRow);
                    tmpAPInvHedRow.TranDocTypeID = tranDocType;
                    CurrentFullTableset = ds;
                    GetLegalNumberDfltsCommon(tmpAPInvHedRow);
                    assignLegalNumber(TempHed, ds);

                    if (APInvHedAndDtl_Iterator.GRNIAPInvDtl.LineType.Compare("R") == 0 && String.IsNullOrEmpty(APInvHedAndDtl_Iterator.GRNIAPInvDtl.DropShipPackSlip))
                    {
                        RcvDtl = this.FindFirstRcvDtlWithUpdLock(APInvHedAndDtl_Iterator.GRNIAPInvDtl.Company, APInvHedAndDtl_Iterator.GRNIAPInvDtl.VendorNum, APInvHedAndDtl_Iterator.GRNIAPInvDtl.PurPoint,
                            APInvHedAndDtl_Iterator.GRNIAPInvDtl.PackSlip, APInvHedAndDtl_Iterator.GRNIAPInvDtl.PackLine);

                        Part = this.FindFirstPart(RcvDtl.Company, RcvDtl.PartNum);
                        string partBaseUM = ((Part != null) ? Part.IUM : RcvDtl.IUM);
                        decimal partBaseQty = RcvDtl.OurQty;
                        decimal LineNet = APInvHedAndDtl_Iterator.GRNIAPInvDtl.ExtCost + APInvHedAndDtl_Iterator.GRNIAPInvDtl.TotalMiscChrg;

                        if (partBaseUM.Compare(RcvDtl.IUM) != 0)
                            LibAppService.UOMConv(RcvDtl.PartNum, RcvDtl.OurQty, RcvDtl.IUM, partBaseUM, out partBaseQty, false);

                        /* SCR #80171 - We have to round the Receipt Line Total to match the Invoice Line Amount's decimal places *
                         * in order to avoid unnecessarily creating ADJ-PUR for a penny.                                          */
                        decimal vPartBaseCost = RcvDtl.OurUnitCost * RcvDtl.OurQty / partBaseQty;
                        decimal RcptTot = LibRoundAmountEF.RoundDecimalsApply(partBaseQty * vPartBaseCost, TempHed.CurrencyCode, "ApInvDtl", "ExtCost");

                        RcptTot += RcvDtl.ExtNonRecoverableCost;

                        if (RcvDtl.PackSlip.Compare(RcvDtl.GlbPackSlip) != 0)
                        {
                            bool AllWentWellFlag = false;
                            string Error = string.Empty;
                            LibPstVar.RunPstVar(RcptTot, LineNet, -RcvDtl.ExtNonRecoverableCost, RcvDtl, TempHed, APInvHedAndDtl_Iterator.GRNIAPInvDtl, null, RcvMisc, null, null, AllWentWellFlag, true, ref Error);
                            if (!string.IsNullOrEmpty(Error))
                            {
                                Result = Error;
                                break;
                            }
                            else
                            {
                                TempHed.Posted = true;
                                TempHed.OpenPayable = false;
                            }
                        }
                    }
                    Db.Validate(TempHed);
                    Db.Release(ref TempHed);
                }
                if (string.IsNullOrEmpty(Result))
                {
                    APInvGrp = this.FindFirstAPInvGrpWithUpdLock(Session.CompanyID, GroupID);
                    if (APInvGrp != null)
                    {
                        Db.APInvGrp.Delete(APInvGrp);
                    }
                }
                else
                    throw new BLException(Result);

                Db.Validate(APInvGrp);
                trans.Complete();
            }
        }


        void assignLegalNumber(APInvHed apInvHed, APInvoiceTableset ds)
        {
            if (!string.IsNullOrEmpty(apInvHed.TranDocTypeID) && string.IsNullOrEmpty(apInvHed.LegalNumber))
            {
                ttLegalNumGenOpts = (from ttLegalNumGenOpts_Row in ds.LegalNumGenOpts
                                     where StringExtensions.Compare(ttLegalNumGenOpts_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                                     select ttLegalNumGenOpts_Row).FirstOrDefault();

                /* If a record is available, generate the number.  Otherwise, a
                   number isn't needed. */

                if (ttLegalNumGenOpts != null)
                {
                    if (ttLegalNumGenOpts.GenerationOption.Equals("post", StringComparison.OrdinalIgnoreCase))
                    {
                        bool bGenerateOCRNumber = false;

                        var LegalNumDocTypeQuery = DBExpressionCompiler.Compile(LegalNumDocTypeExpression);
                        if (LegalNumDocTypeQuery(Db, Session.CompanyID, ttLegalNumGenOpts.LegalNumberID))
                        {
                            string foreignKeyString = Compatibility.Convert.ToString(apInvHed.VendorNum).Trim() + Ice.Constants.LIST_DELIM + Compatibility.Convert.ToString(apInvHed.InvoiceNum).Trim();
                            string outLegalNumber = string.Empty;
                            string outLegalNumberMessage = string.Empty;
                            string cOCRNumber = string.Empty;

                            if (isSEOrFILocalization || isNorwayLocalization)
                            {
                                var BVendorQuery = DBExpressionCompiler.Compile(BVendorExpression);
                                var bVendor = BVendorQuery(Db, Session.CompanyID, apInvHed.VendorNum);
                                if (bVendor != null)
                                    bGenerateOCRNumber = !bVendor.NoBankingReference;
                            }
                            LibLegalNumberGenerate.GenerateLegalNumber(CurrentFullTableset.LegalNumGenOpts, "APInvHed", foreignKeyString, out outLegalNumber, out cOCRNumber, out outLegalNumberMessage, bGenerateOCRNumber);
                            apInvHed.LegalNumber = outLegalNumber;
                            ttLegalNumGenOpts.RowMod = IceRow.ROWSTATE_DELETED;
                            Db.Validate(apInvHed);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Method to validate if exists an invoiced receipt with unposted invoice
        /// </summary>
        /// <param name="ipVendorList"></param>
        /// <returns></returns>
        public bool ValidateNotPostedInvoices(string ipVendorList)
        {
            bool unpostedInvoice = false;

            unpostedInvoice = this.ValidateRcvDtl(Session.CompanyID, ipVendorList, true);

            return unpostedInvoice;
        }
        #endregion GRNI Mass Creation
        /// <summary>
        /// This method populates the APInvHedTransferList table on the loaded group.
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="GroupID"></param>
        public void GetAPInvHedTransferList(ref APInvHedListTableset ds, string GroupID)
        {
            APInvHedListTableset tempDs = ds;
            APInvHedTransferListRow tempTransferListItem = null;

            ds.APInvHedTransferList.Clear();
            foreach (APInvHedListRow APInvHedListIterator in ds.APInvHedList)
            {
                tempTransferListItem = new APInvHedTransferListRow();
                tempDs.APInvHedTransferList.Add(tempTransferListItem);
                BufferCopy.Copy(APInvHedListIterator, tempTransferListItem);
                tempTransferListItem.EntryPerson = this.FindAPInvHedEntryPersonQuery(Session.CompanyID, APInvHedListIterator.VendorNum, APInvHedListIterator.InvoiceNum);
            }
            ds = tempDs;
        }

        /// <summary>
        /// Determines if a group id exists in the database.
        /// </summary>
        /// <param name="sGroupID"></param>
        /// <returns></returns>
        public bool ValidateGroupID(string sGroupID)
        {
            APInvGrp tempGrp = FindFirstAPInvGrp(Session.CompanyID, sGroupID);

            return tempGrp == null ? false : true;
        }

        /// <summary>
        /// Creates a new APInvGrp to transfer Invoices to. 
        /// </summary>
        /// <param name="sFromGroupID">string Original GroupID</param>
        /// <param name="sToGrouID">string new GroupID value</param>
        public void CreateAPInvGrp(string sFromGroupID, string sToGrouID)
        {

            APInvGrp tempGrp = new APInvGrp();
            APInvGrp = FindFirstAPInvGrp(Session.CompanyID, sFromGroupID);
            using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
            {
                BufferCopy.CopyExceptFor(this.APInvGrp, tempGrp, "SysRowID", "GroupID");
                tempGrp.GroupID = sToGrouID;
                Db.AddObject(tempGrp);
                Db.Validate(tempGrp);
                trans.Complete();
            }
        }

        /// <summary>
        /// GetDfltDocumentType
        /// </summary>
        /// <param name="inSystemTranID">System Transaction ID</param>
        /// <param name="outTranDocTypeID">Transaction Document Type ID</param>
        public void GetDfltDocumentType(string inSystemTranID, out string outTranDocTypeID)
        {
            outTranDocTypeID = string.Empty;
            LibLegalNumDocLib.GetDfltDocTypeLN(inSystemTranID, out outTranDocTypeID);
        }

        /// <summary>
        /// Sets default values when the TranDocTypeID changes
        /// </summary>
        /// <param name="ipTranDocTypeID">TranDocTypeID supplied</param>
        /// <param name="ipSystemTranID">System TranDocTypeID supplied</param>
        public void OnChangeCorrTranDocTypeID(string ipTranDocTypeID, string ipSystemTranID)
        {
            var validDocTranType = DBExpressionCompiler.Compile(ExistsCorrTranDocType);
            if (!validDocTranType(Db, Session.CompanyID, ipTranDocTypeID, ipSystemTranID))
            {
                throw new BLException(Strings.InvalidTransactionDocumentType, "TranDocType");
            }
        }


        #region UpdateTaxAdjustment
        /// <summary>
        /// Commits the DataSet changes to the data store.
        /// </summary>
        /// <param name="ds">APInvoice Data Set</param>
        [Obsolete("This method is obsolete.")]
        public void UpdateTaxAdjustment(ref APInvoiceTableset ds)
        {
            this.Update(ref ds);
        }
        #endregion UpdateTaxAdjustment

        #region Common Legal number methods
        private bool GetLegalNumberDfltsCommon(APInvHedRow APInvHedRow)
        {
            string cLegalNumberType = string.Empty;
            bool requiresUserInput = false;
            if (isTaiwanLocalization && TWAPLegNumSource.KeyEquals("I"))
            {
                return false;
            }

            if (APInvHedRow.DebitMemo == false)
            {
                if (APInvHedRow.GRNIClearing)
                {
                    cLegalNumberType = "ManualGRNI";
                }
                else if (APInvHedRow.InvoiceType.KeyEquals("BOE"))
                {
                    cLegalNumberType = "APBillExch";
                }
                else
                {
                    cLegalNumberType = "APInvoice";
                }
            }
            else
            {
                cLegalNumberType = "DebitMemo";
            }

            /*SCR 120544 Use Apply or Invoice date for legal number assignment */
            if (vLNBasedOnDate == 1)
            {
                vLNDate = APInvHedRow.ApplyDate;
            }
            else
            {
                vLNDate = APInvHedRow.InvoiceDate;
            }

            LibValidateTranDocType.RunValidateTranDocType(APInvHedRow.TranDocTypeID, cLegalNumberType);
            LibLegalNumberGetDflts.GetDefaults(cLegalNumberType, APInvHedRow.TranDocTypeID, vLNDate, CurrentFullTableset.LegalNumGenOpts);

            ttLegalNumGenOpts = (from ttLegalNumGenOpts_Row in CurrentFullTableset.LegalNumGenOpts
                                 where StringExtensions.Compare(ttLegalNumGenOpts_Row.RowMod, IceRow.ROWSTATE_ADDED) == 0
                                 select ttLegalNumGenOpts_Row).FirstOrDefault();

            if (ttLegalNumGenOpts != null)
            {
                if (StringExtensions.Compare(ttLegalNumGenOpts.GenerationType, "manual") == 0 && ttLegalNumGenOpts.GenerationOption.Equals("Save", StringComparison.OrdinalIgnoreCase))
                    requiresUserInput = true;
                if (APInvHedRow.InvoiceDate == null)
                {
                    throw new BLException(Strings.InvoiceDateIsRequiBeforeLegalNumberCanBeGener, "APInvHed");
                }
            }
            return requiresUserInput;
        }

        /// <summary>
        /// This method will validate if a Invoice requires user Input for Legal Numbers
        /// </summary>
        /// <param name="ds"> Dataset</param>
        /// <param name="requiresUserInput">Indicates if the legal number requires user input</param>
        public void PreUpdate(ref APInvoiceTableset ds, out bool requiresUserInput)
        {
            CurrentFullTableset = ds;
            APInvHedRow APInvHedRow;
            requiresUserInput = false;

            APInvHedRow = (from ttCheckHed_Row in ds.APInvHed
                           where ttCheckHed_Row.RowMod.Compare(IceRow.ROWSTATE_UNCHANGED) != 0
                           select ttCheckHed_Row).FirstOrDefault();
            if (APInvHedRow != null)
            {

                try
                {
                    ValidateAPInvHedRequiredFields(APInvHedRow, null);
                }
                catch (Exception)
                {
                    return;
                }

                if (string.IsNullOrEmpty(APInvHedRow.LegalNumber) && !string.IsNullOrEmpty(APInvHedRow.TranDocTypeID))
                    requiresUserInput = GetLegalNumberDfltsCommon(APInvHedRow);
            }
            ds = CurrentFullTableset;
        }

        #endregion
        class HeaderTaxInfo
        {
            public string Company { get; set; }
            public int VendorNum { get; set; }
            public string InvoiceNum { get; set; }
            public string TaxCode { get; set; }
            public string RateCode { get; set; }
            public decimal DocNonDedTaxAmt { get; set; }
            public decimal NonDedTaxAmt { get; set; }
            public decimal Rpt1NonDedTaxAmt { get; set; }
            public decimal Rpt2NonDedTaxAmt { get; set; }
            public decimal Rpt3NonDedTaxAmt { get; set; }
        }
        class APInvDtlExtAmounts
        {
            public decimal DocExtAmount { get; set; }
            public decimal ExtAmount { get; set; }
            public decimal Rpt1ExtAmount { get; set; }
            public decimal Rpt2ExtAmount { get; set; }
            public decimal Rpt3ExtAmount { get; set; }

        }

        private void generateNonDeducExpenses(int VendorNum, string InvoiceNum, int InvoiceLine)
        {
            if (ExistsAPInvDtl3(Session.CompanyID, VendorNum, InvoiceNum))
            {
                APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, VendorNum, InvoiceNum);
                if (ExistsXbSystLineTax(Session.CompanyID, false) || (ExistsXbSystLineTax(Session.CompanyID, true) && APInvHed.MatchedFromLI && !APInvHed.AllowOverrideLI))
                {
                    using (Erp.Internal.AP.SyncAPInvExp APSyncAPInvExp = new Internal.AP.SyncAPInvExp(Db))
                    {
                        foreach (Guid InvTax in GetNonDedTaxForInvoice(Session.CompanyID, VendorNum, InvoiceNum))
                        {

                            APSyncAPInvExp.RunSyncAPInvExp(string.Empty, Guid.Empty, Guid.Empty, Guid.Empty, InvTax, false, string.Empty, decimal.Zero, "Tax", "APInvTax", out lAPInvExpUpdated);
                        }
                    }
                }
                else
                {
                    APInvDtl = APInvDtl.FindFirstByPrimaryKey(Db, Session.CompanyID, VendorNum, InvoiceNum, InvoiceLine);
                    GenerateNonDedExpForDtls(APInvDtl.SysRowID, VendorNum, InvoiceNum, InvoiceLine);
                }

            }
        }

        private void GenerateNonDedExpForDtls(Guid APInvDtlSysRowID, int VendorNum, string InvoiceNum, int InvoiceLine)
        {
            using (Erp.Internal.AP.SyncAPInvExp APSyncAPInvExp = new Internal.AP.SyncAPInvExp(Db))
            {
                foreach (Guid invTaxLn in GetNonDedTaxesForInvLn(Session.CompanyID, VendorNum, InvoiceNum, InvoiceLine))
                {
                    APSyncAPInvExp.RunSyncAPInvExp("APInvDtl", APInvDtlSysRowID, Guid.Empty, Guid.Empty, invTaxLn, false, "", decimal.Zero, "Tax", "APLnTax", out lAPInvExpUpdated);
                }

                foreach (Guid invLnMscTax in GetNonDedTaxesForInvLnMsc(Session.CompanyID, VendorNum, InvoiceNum, InvoiceLine))
                {
                    APSyncAPInvExp.RunSyncAPInvExp("APInvDtl", APInvDtlSysRowID, Guid.Empty, Guid.Empty, invLnMscTax, false, "", decimal.Zero, "Tax", "APInvLnMscTax", out lAPInvExpUpdated);
                }

                foreach (Guid invMscTax in GetNonDedTaxesForInvHedMsc(Session.CompanyID, VendorNum, InvoiceNum))
                {
                    APSyncAPInvExp.RunSyncAPInvExp("HedMsc", Guid.Empty, Guid.Empty, invMscTax, Guid.Empty, false, string.Empty, decimal.Zero, "Tax", "APInvHedMscTax", out lAPInvExpUpdated);
                }
            }
        }


        private void generateExpensesAfterCalTaxes(string ipGroupID, string ipInvoiceNum, int ipVendorNum, bool ipCalcAll)
        {
            IEnumerable<APInvHed> APInvHedRows;
            if (!String.IsNullOrEmpty(ipGroupID))
            {
                APInvHedRows = FindAPInvHed1(Session.CompanyID, ipGroupID, ipCalcAll);
            }
            else
            {
                APInvHedRows = FindAPInvHed2(Session.CompanyID, ipInvoiceNum, ipVendorNum);
            }

            foreach (var row_iterator in APInvHedRows)
            {
                if (ExistsXbSystLineTax(Session.CompanyID, false) || !ExistsAPInvDtl3(Session.CompanyID, row_iterator.VendorNum, row_iterator.InvoiceNum))
                    generateNonDeducExpenses(row_iterator.VendorNum, row_iterator.InvoiceNum, 0);
                else
                {
                    foreach (var apInvDtl in SelectAPInvDtl(Session.CompanyID, row_iterator.VendorNum, row_iterator.InvoiceNum))
                    {
                        GenerateNonDedExpForDtls(apInvDtl.SysRowID, apInvDtl.VendorNum, apInvDtl.InvoiceNum, apInvDtl.InvoiceLine);
                    }
                }
            }

        }

        private void DeleteOldExpenses(int vendorNum, string invoiceNum)
        {
            if (testAPInvLnMscTaxRows != null)
            {
                var currentAPInvLnMscTax = this.SelectAPInvLnMscTaxRefresh(Session.CompanyID, vendorNum, invoiceNum).Select(x => x.SysRowID);
                foreach (var apInvLnMscTax in testAPInvLnMscTaxRows.Where(x => !currentAPInvLnMscTax.Contains(x.SysRowID)))
                {
                    foreach (var realatedExp in SelectAPInvExpTaxWithLock(Session.CompanyID, apInvLnMscTax.VendorNum, apInvLnMscTax.InvoiceNum, "APInvLnMscTax", apInvLnMscTax.SysRowID))
                    {
                        if (testAPInvExpRows == null)
                        {
                            testAPInvExpRows = new List<APInvExpRow>();
                        }
                        testAPInvExp = new APInvExpRow();
                        testAPInvExpRows.Add(testAPInvExp);
                        BufferCopy.Copy(realatedExp, ref testAPInvExp);
                        testAPInvExp.SysRowID = realatedExp.SysRowID;
                        testAPInvExp.RowMod = IceRow.ROWSTATE_DELETED;

                        this.Db.APInvExp.Delete(realatedExp);
                    }
                }
            }

            if (testAPInvHedMscTaxRows != null)
            {
                var currentAPInvHedMscTax = this.SelectAPInvHedMscTaxRefresh(Session.CompanyID, vendorNum, invoiceNum).Select(x => x.SysRowID);
                foreach (var apInvHedMscTax in testAPInvHedMscTaxRows.Where(x => !currentAPInvHedMscTax.Contains(x.SysRowID)))
                {
                    foreach (var realatedExp in SelectAPInvExpTaxWithLock(Session.CompanyID, apInvHedMscTax.VendorNum, apInvHedMscTax.InvoiceNum, "APInvHedMscTax", apInvHedMscTax.SysRowID))
                    {
                        if (testAPInvExpRows == null)
                        {
                            testAPInvExpRows = new List<APInvExpRow>();
                        }
                        testAPInvExp = new APInvExpRow();
                        testAPInvExpRows.Add(testAPInvExp);
                        BufferCopy.Copy(realatedExp, ref testAPInvExp);
                        testAPInvExp.SysRowID = realatedExp.SysRowID;
                        testAPInvExp.RowMod = IceRow.ROWSTATE_DELETED;

                        this.Db.APInvExp.Delete(realatedExp);
                    }
                }
            }
            if (testAPLnTaxRows != null)
            {
                var currentAPLnTax = this.SelectAPLnTax(Session.CompanyID, vendorNum, invoiceNum).Select(x => x.SysRowID);
                foreach (var apLnTax in testAPLnTaxRows.Where(x => !currentAPLnTax.Contains(x.SysRowID)))
                {
                    foreach (var realatedExp in SelectAPInvExpTaxWithLock(Session.CompanyID, apLnTax.VendorNum, apLnTax.InvoiceNum, "APLnTax", apLnTax.SysRowID))
                    {
                        if (testAPInvExpRows == null)
                        {
                            testAPInvExpRows = new List<APInvExpRow>();
                        }
                        testAPInvExp = new APInvExpRow();
                        testAPInvExpRows.Add(testAPInvExp);
                        BufferCopy.Copy(realatedExp, ref testAPInvExp);
                        testAPInvExp.SysRowID = realatedExp.SysRowID;
                        testAPInvExp.RowMod = IceRow.ROWSTATE_DELETED;

                        this.Db.APInvExp.Delete(realatedExp);
                    }
                }
            }
        }

        #region CSF Poland
        /// <summary>
        /// CSF Poland. Validate unique of PLInvoiceReference for selected supplier
        /// </summary>
        /// <param name="intVendorNum"></param>
        /// <param name="txtInvoiceNum"></param>
        /// <param name="txtPLInvoiceReference"></param>
        /// <param name="isLogAPInvFound">Approved Logged invoice with the same Invoice Reference is found. And txtInvoiceNum == string.Empty</param>
        /// <param name="logAPInvNum">Legged AP Invoice Number</param>
        public void ValidatePLInvoiceReference(int intVendorNum, string txtInvoiceNum, string txtPLInvoiceReference, out bool isLogAPInvFound, out string logAPInvNum)
        {
            using (var poland = new Internal.CSF.Poland(this.Db))
            {
                poland.ValidatePLInvoiceReference(intVendorNum, txtInvoiceNum, txtPLInvoiceReference, out isLogAPInvFound, out logAPInvNum);
            }
        }

        private bool IsVendorPLAutomaticInvoiceNumber(int vendorNum)
        {
            using (var poland = new Internal.CSF.Poland(this.Db))
            {
                return poland.IsVendorPLAutomaticInvoiceNumber(vendorNum);
            }
        }
        #endregion

        /// <summary>
        /// Set TranDate to TRANGLC line , when it is calculated without PE (copy-paste case or manual create in grid from UI)
        /// </summary>
        /// <param name="ttTranGLC"></param>
        void SetTranDate(IceRow ttTranGLC)
        {
            if (ttTranGLC != null)
            {
                var invched = FindFirstAPInvHed(ttTranGLC["Company"].ToString(), Convert.ToInt32(ttTranGLC["VendorNum"]), ttTranGLC["InvoiceNum"].ToString());
                if (invched != null)
                    ttTranGLC["TranDate"] = invched.ApplyDate;
                else
                    ttTranGLC["TranDate"] = CompanyTime.Today();
            }

        }

        /// <summary>
        /// Updates DocDiscountAmt and its base and reporting values for the record APInvHed send as parameter
        /// </summary>
        /// <param name="APInvHed">Record of APinvHed to update</param>
        private void UpdateHeaderDiscounts(ref APInvHed APInvHed)
        {
            if (!APInvHed.FixedAmt)
            {
                PurTermDPartial purTermDPartial = FindFirstPurTermDPartial(APInvHed.Company, APInvHed.TermsCode);

                if (purTermDPartial != null)
                {
                    decimal tmp_amount = decimal.Zero;
                    decimal tmp_Docamount = decimal.Zero;
                    APInvMiscTot invMiscTotals = GetAPInvMiscTot(APInvHed.Company, APInvHed.VendorNum, APInvHed.InvoiceNum);

                    if (invMiscTotals != null)
                    {
                        tmp_amount += invMiscTotals.MiscAmt;
                        tmp_Docamount += invMiscTotals.DocMiscAmt;
                    }

                    APInvTaxTotal invTaxTotals = GetAPInvTaxTotals(Session.CompanyID, APInvHed.VendorNum, APInvHed.InvoiceNum, 0);
                    if (invTaxTotals != null)
                    {
                        tmp_amount += invTaxTotals.TaxAmt;
                        tmp_Docamount += invTaxTotals.DocTaxAmt;
                    }

                    APInvHed.DiscountAmt = Math.Max((APInvHed.InvoiceAmt - tmp_amount), 0) * (purTermDPartial.DiscountPercent / 100);
                    APInvHed.DocDiscountAmt = Math.Max((APInvHed.DocInvoiceAmt - tmp_Docamount), 0) * (purTermDPartial.DiscountPercent / 100);
                    if (vUseDate == 1)
                    {
                        vExDate = APInvHed.InvoiceDate;
                    }
                    else
                    {
                        vExDate = APInvHed.ApplyDate;
                    }

                    LibGetCurrencyRatesEF.BuildCurrencyRates(vExDate, "ApInvHed", Compatibility.Convert.ToString(APInvHed.VendorNum), APInvHed.InvoiceNum, "", "", "", "", "", "", APInvHed.CurrencyCode, APInvHed.RateGrpCode, APInvHed.LockRate, out ttChainRows, out pCurrList, out pRateList);
                    LibRptfieldscalc.ConvertAmtRoundDecimalsUsingLinqRow(APInvHed, false, "DiscountAmt", pCurrList, "APInvHed", APInvHed.CurrencyCode, ttChainRows);
                    Db.Validate(APInvHed);
                }
            }
        }
        private void CreateGroup(string ipGroupID)
        {
            if (ipGroupID == string.Empty)
                ipGroupID = String.Format("B{0:D7}", (new Random()).Next(1, 9999999));

            APInvGrp = FindFirstAPInvGrp(Session.CompanyID, ipGroupID);
            if (APInvGrp == null)
            {

                using (var apInvGrpBO = Ice.Assemblies.ServiceRenderer.GetService<Erp.Contracts.APInvGrpSvcContract>(Db))
                {

                    APInvGrpTableset apInvGrpDS = new Tablesets.APInvGrpTableset();
                    apInvGrpBO.GetNewAPInvGrp(ref apInvGrpDS);
                    if (apInvGrpDS.APInvGrp.Count == 1)
                    {
                        Erp.Tablesets.APInvGrpRow ttAPInvGrp = (from ttAPInvGrp_Row in apInvGrpDS.APInvGrp
                                                                where ttAPInvGrp_Row.RowMod == IceRow.ROWSTATE_ADDED
                                                                select ttAPInvGrp_Row).FirstOrDefault();

                        ttAPInvGrp.Company = Session.CompanyID;
                        ttAPInvGrp.GroupID = ipGroupID;

                        apInvGrpBO.Update(ref apInvGrpDS);
                    }
                    else
                    {
                        throw new BLException(Strings.InvalidAPInvoiceGroup, "APInvGrp");
                    }
                }

            }

        }

        private string GetGLAccountFromDisp(string glAcctDisp)
        {
            string glAccount = string.Empty;

            string coaCode = FindFirstCOACode(Session.CompanyID, true);

            var GLAcctDispRow = FindFirstGLAcctDesc(Session.CompanyID, coaCode, glAcctDisp);
            if (GLAcctDispRow != null)
            {
                glAccount = GLAcctDispRow.GLAccount;
            }
            return glAccount;
        }
        private string GetGlbGLAccountFromDisp(string extCompanyID, string coaCode, string glAcctDisp)
        {
            string glAccount = string.Empty;

            if (string.IsNullOrEmpty(coaCode))
            {
                coaCode = FindFirstGLBCOACode(Session.CompanyID, extCompanyID);
            }

            string SeparatorChar = GetSeparatorChar(Session.CompanyID, coaCode);

            if (SeparatorChar != null && SeparatorChar.Length == 1)
            {
                glAccount = this.FindFirstGLBGLAccount(Session.CompanyID, extCompanyID, coaCode, glAcctDisp.Replace(Convert.ToChar(SeparatorChar), '|'));
            }

            return glAccount;
        }

        #region PreInvoice
        /// <summary>
        /// Pre-check for UpdateExt to validate and return invoice data
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="continueProcessingOnError"></param>
        /// <param name="rollbackParentOnChildError"></param>
        /// <param name="recalculateByExtCost"></param>
        /// <param name="errorsOccurred"></param>
        /// <returns></returns>
        [MethodGenerationOptions(SparseCopy = true)]
        public Ice.BOUpdErrorTableset PreInvoice(ref Erp.Tablesets.UpdExtAPInvoiceTableset ds, bool continueProcessingOnError, bool recalculateByExtCost, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            BOUpdErrorTableset updExtErrors = new BOUpdErrorTableset();
            errorsOccurred = false;
            bool updateFlag = false;
            UpdExtAPInvoiceTableset updatedDtls = new UpdExtAPInvoiceTableset();
            APInvHedRow updatedHed = new APInvHedRow();

            try
            {
                using (Internal.Lib.ErpCallContext.SetDisposableKey("PreInvoice"))
                using (TransactionScope txScope = ErpContext.CreateDefaultTransactionScope())
                {
                    List<APInvDtlRow> OldAPInvDtl = ds.APInvDtl.ToList();
                    APInvHedRow ttAPInvHed = ds.APInvHed.ToList().FirstOrDefault();

                    using (var boAPInvoice = Ice.Assemblies.ServiceRenderer.GetService<Erp.Contracts.APInvoiceSvcContract>(Db))
                    {
                        updExtErrors = boAPInvoice.UpdateExt(ref ds, continueProcessingOnError, rollbackParentOnChildError, out errorsOccurred);

                        if (!errorsOccurred)
                        {
                            UpdateAPInvHedForLineTypeR(ref ds);
                            UpdateGLForLineTypeR(ref ds);
                            UpdateAPIHAPInvMscForLineTypeR(ref ds);

                            if (recalculateByExtCost)
                            {
                                var APDtlsWithVariance = (from NewAPInvDtl_row in ds.APInvDtl
                                                          join OldAPInvDtl_row in OldAPInvDtl
                                                          on new { NewAPInvDtl_row.Company, NewAPInvDtl_row.VendorNum, NewAPInvDtl_row.InvoiceNum, NewAPInvDtl_row.InvoiceLine } equals new { OldAPInvDtl_row.Company, OldAPInvDtl_row.VendorNum, OldAPInvDtl_row.InvoiceNum, OldAPInvDtl_row.InvoiceLine }
                                                          where NewAPInvDtl_row.Company.KeyEquals(Session.CompanyID) &&
                                                             (StringExtensions.Compare(NewAPInvDtl_row.LineType, "R") == 0 || StringExtensions.Compare(NewAPInvDtl_row.LineType, "M") == 0) &&
                                                             OldAPInvDtl_row.ScrDocExtCost != NewAPInvDtl_row.ScrDocExtCost && OldAPInvDtl_row.ScrDocExtCost != 0
                                                          select new APDtlsWithVariance { OldAPInvDtl = OldAPInvDtl_row, NewAPInvDtl = NewAPInvDtl_row });

                                foreach (var APDtls_OldAndNew in APDtlsWithVariance)
                                {

                                    if (ttAPInvHed != null && ttAPInvHed.ReadyToCalc == true)
                                    {
                                        ds.APInvTax.Clear();
                                        ds.APLnTax.Clear();
                                        ds.APIHAPLnTax.Clear();
                                    }

                                    if (APDtls_OldAndNew.OldAPInvDtl.ScrDocExtCost != 0)
                                        APDtls_OldAndNew.NewAPInvDtl.ScrDocExtCost = APDtls_OldAndNew.OldAPInvDtl.ScrDocExtCost;

                                    if (APDtls_OldAndNew.OldAPInvDtl.ExtCost != 0)
                                        APDtls_OldAndNew.NewAPInvDtl.ExtCost = APDtls_OldAndNew.OldAPInvDtl.ExtCost;

                                    if (APDtls_OldAndNew.OldAPInvDtl.ScrExtCost != 0)
                                        APDtls_OldAndNew.NewAPInvDtl.ScrExtCost = APDtls_OldAndNew.OldAPInvDtl.ScrExtCost;

                                    if (APDtls_OldAndNew.OldAPInvDtl.DocExtCost != 0)
                                        APDtls_OldAndNew.NewAPInvDtl.DocExtCost = APDtls_OldAndNew.OldAPInvDtl.DocExtCost;

                                    APDtls_OldAndNew.NewAPInvDtl.RowMod = "U";
                                    updateFlag = true;
                                    APInvDtlRow tempDtlRow = new APInvDtlRow();
                                    ds.APInvSched.Clear();
                                    if (StringExtensions.Compare(APDtls_OldAndNew.NewAPInvDtl.LineType, "R") == 0)
                                        APDtls_OldAndNew.NewAPInvDtl.UpdateExtOverrideRcpts = false;

                                    if (APDtls_OldAndNew.NewAPInvDtl.UpdateExtCreateLineGL == true)
                                        ds.APInvExp.Clear();

                                    BufferCopy.CopyExceptFor(APDtls_OldAndNew.NewAPInvDtl, tempDtlRow, APInvDtl.ColumnNames.SysRevID);
                                    updatedDtls.APInvDtl.Add(tempDtlRow);
                                }

                                if (updateFlag)
                                {
                                    BufferCopy.Copy(ds.APInvHed.FirstOrDefault(), updatedHed);
                                    updatedDtls.APInvHed.Add(updatedHed);

                                    updExtErrors = boAPInvoice.UpdateExt(ref updatedDtls, continueProcessingOnError, rollbackParentOnChildError, out errorsOccurred);
                                    if (!errorsOccurred)
                                    {
                                        ds = updatedDtls;
                                        UpdateAPInvHedForLineTypeR(ref ds);
                                        UpdateGLForLineTypeR(ref ds);
                                        UpdateAPIHAPInvMscForLineTypeR(ref ds);
                                    }
                                }
                            }
                            //It is intended NOT to commit transaction
                            //Do NOT uncomment the transaction commit code.
                            //Db.Validate();
                            //txScope.Complete();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                errorsOccurred = true;
                var error = new BOUpdErrorRow
                {
                    ErrorLevel = "ERROR",
                    ErrorText = ex.Message,
                    ErrorType = "Exception",
                };
                updExtErrors.BOUpdError.Add(error);
            }

            return updExtErrors;
        }



        /// <summary>
        /// It wraps the UpdateExt to refresh and return up-to-date invoice data
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="continueProcessingOnError"></param>
        /// <param name="rollbackParentOnChildError"></param>
        /// <param name="recalculateByExtCost"></param>
        /// <param name="errorsOccurred"></param>
        /// <returns></returns>
        [MethodGenerationOptions(SparseCopy = true)]
        public Ice.BOUpdErrorTableset UpdateMasterExt(ref Erp.Tablesets.UpdExtAPInvoiceTableset ds, bool continueProcessingOnError, bool recalculateByExtCost, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            BOUpdErrorTableset updExtErrors = new BOUpdErrorTableset();
            errorsOccurred = false;
            bool updateFlag = false;
            UpdExtAPInvoiceTableset updatedDtls = new UpdExtAPInvoiceTableset();
            APInvHedRow updatedHed = new APInvHedRow();

            try
            {
                List<APInvDtlRow> OldAPInvDtl = ds.APInvDtl.ToList();
                APInvHedRow ttAPInvHed = ds.APInvHed.ToList().FirstOrDefault();

                updExtErrors = UpdateExt(ref ds, continueProcessingOnError, rollbackParentOnChildError, out errorsOccurred);

                if (!errorsOccurred)
                {
                    UpdateAPInvHedForLineTypeR(ref ds);
                    UpdateGLForLineTypeR(ref ds);
                    UpdateAPIHAPInvMscForLineTypeR(ref ds);

                    if (recalculateByExtCost)
                    {
                        var APDtlsWithVariance = (from NewAPInvDtl_row in ds.APInvDtl
                                                  join OldAPInvDtl_row in OldAPInvDtl
                                                  on new { NewAPInvDtl_row.Company, NewAPInvDtl_row.VendorNum, NewAPInvDtl_row.InvoiceNum, NewAPInvDtl_row.InvoiceLine } equals new { OldAPInvDtl_row.Company, OldAPInvDtl_row.VendorNum, OldAPInvDtl_row.InvoiceNum, OldAPInvDtl_row.InvoiceLine }
                                                  where NewAPInvDtl_row.Company.KeyEquals(Session.CompanyID) &&
                                                     (StringExtensions.Compare(NewAPInvDtl_row.LineType, "R") == 0 || StringExtensions.Compare(NewAPInvDtl_row.LineType, "M") == 0) &&
                                                     OldAPInvDtl_row.ScrDocExtCost != NewAPInvDtl_row.ScrDocExtCost && OldAPInvDtl_row.ScrDocExtCost != 0
                                                  select new APDtlsWithVariance { OldAPInvDtl = OldAPInvDtl_row, NewAPInvDtl = NewAPInvDtl_row });

                        foreach (var APDtls_OldAndNew in APDtlsWithVariance)
                        {
                            if (ttAPInvHed != null && ttAPInvHed.ReadyToCalc == true)
                            {
                                ds.APInvTax.Clear();
                                ds.APLnTax.Clear();
                                ds.APIHAPLnTax.Clear();
                            }

                            if (APDtls_OldAndNew.OldAPInvDtl.ScrDocExtCost != 0)
                                APDtls_OldAndNew.NewAPInvDtl.ScrDocExtCost = APDtls_OldAndNew.OldAPInvDtl.ScrDocExtCost;

                            if (APDtls_OldAndNew.OldAPInvDtl.ExtCost != 0)
                                APDtls_OldAndNew.NewAPInvDtl.ExtCost = APDtls_OldAndNew.OldAPInvDtl.ExtCost;

                            if (APDtls_OldAndNew.OldAPInvDtl.ScrExtCost != 0)
                                APDtls_OldAndNew.NewAPInvDtl.ScrExtCost = APDtls_OldAndNew.OldAPInvDtl.ScrExtCost;

                            if (APDtls_OldAndNew.OldAPInvDtl.DocExtCost != 0)
                                APDtls_OldAndNew.NewAPInvDtl.DocExtCost = APDtls_OldAndNew.OldAPInvDtl.DocExtCost;

                            APDtls_OldAndNew.NewAPInvDtl.RowMod = "U";
                            updateFlag = true;
                            APInvDtlRow tempDtlRow = new APInvDtlRow();
                            ds.APInvSched.Clear();
                            if (StringExtensions.Compare(APDtls_OldAndNew.NewAPInvDtl.LineType, "R") == 0)
                                APDtls_OldAndNew.NewAPInvDtl.UpdateExtOverrideRcpts = false;

                            if (APDtls_OldAndNew.NewAPInvDtl.UpdateExtCreateLineGL == true)
                                ds.APInvExp.Clear();

                            BufferCopy.CopyExceptFor(APDtls_OldAndNew.NewAPInvDtl, tempDtlRow, APInvDtl.ColumnNames.SysRevID);
                            updatedDtls.APInvDtl.Add(tempDtlRow);
                        }

                        if (updateFlag)
                        {
                            BufferCopy.Copy(ds.APInvHed.FirstOrDefault(), updatedHed);
                            updatedDtls.APInvHed.Add(updatedHed);

                            updExtErrors = UpdateExt(ref updatedDtls, continueProcessingOnError, rollbackParentOnChildError, out errorsOccurred);
                            if (!errorsOccurred)
                            {
                                ds = updatedDtls;
                                UpdateAPInvHedForLineTypeR(ref ds);
                                UpdateGLForLineTypeR(ref ds);
                                UpdateAPIHAPInvMscForLineTypeR(ref ds);
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                errorsOccurred = true;
                var error = new BOUpdErrorRow
                {
                    ErrorLevel = "ERROR",
                    ErrorText = ex.Message,
                    ErrorType = "Exception",
                };
                updExtErrors.BOUpdError.Add(error);
            }

            return updExtErrors;
        }


        private void UpdateAPInvHedForLineTypeR(ref UpdExtAPInvoiceTableset ds)
        {
            var APInvDtl = (from source_Row in ds.APInvDtl
                            where source_Row.Company.KeyEquals(Session.CompanyID) &&
                            StringExtensions.Compare(source_Row.LineType, "R") == 0
                            select source_Row).FirstOrDefault();
            if (APInvDtl != null)
            {
                ttAPInvHed = (from sourceHed_Row in ds.APInvHed
                              where sourceHed_Row.Company.KeyEquals(Session.CompanyID) &&
                              sourceHed_Row.VendorNum == APInvDtl.VendorNum &&
                              sourceHed_Row.InvoiceNum.KeyEquals(APInvDtl.InvoiceNum)
                              select sourceHed_Row).FirstOrDefault();
                if (ttAPInvHed != null)
                {
                    APInvHed = FindFirstAPInvHed(Session.CompanyID, ttAPInvHed.VendorNum, ttAPInvHed.InvoiceNum);
                    if (APInvHed != null)
                    {
                        BufferCopy.Copy(APInvHed, ref ttAPInvHed);
                        APInvHedAfterGetRows();
                        APInvHed_Foreign_Link();

                    }
                }

                foreach (var APInvTax in (SelectAPInvTax4(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum)))
                {
                    ttAPInvTax = (from ttAPInvTax_Row in ds.APInvTax
                                  where ttAPInvTax_Row.Company.KeyEquals(APInvTax.Company) &&
                                 ttAPInvTax_Row.VendorNum == APInvTax.VendorNum &&
                                 ttAPInvTax_Row.InvoiceNum.KeyEquals(APInvTax.InvoiceNum) &&
                                 ttAPInvTax_Row.TaxCode.KeyEquals(APInvTax.TaxCode) &&
                                 ttAPInvTax_Row.RateCode.KeyEquals(APInvTax.RateCode) &&
                                 ttAPInvTax_Row.ECAcquisitionSeq == APInvTax.ECAcquisitionSeq
                                  select ttAPInvTax_Row).FirstOrDefault();

                    if (ttAPInvTax == null)
                    {
                        ttAPInvTax = new Erp.Tablesets.APInvTaxRow();
                        ds.APInvTax.Add(ttAPInvTax);
                    }
                    BufferCopy.Copy(APInvTax, ref ttAPInvTax);
                    APInvTaxAfterGetRows();
                    APInvTax_Foreign_Link();
                }

                foreach (var APLnTax in (SelectAllInvoiceLineTaxes(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum)))
                {
                    ttAPLnTax = (from ttAPLnTax_Row in ds.APLnTax
                                 where ttAPLnTax_Row.Company.KeyEquals(APLnTax.Company) &&
                                 ttAPLnTax_Row.VendorNum == APLnTax.VendorNum &&
                                 ttAPLnTax_Row.InvoiceNum.KeyEquals(APLnTax.InvoiceNum) &&
                                 ttAPLnTax_Row.InvoiceLine == APLnTax.InvoiceLine &&
                                 ttAPLnTax_Row.TaxCode.KeyEquals(APLnTax.TaxCode) &&
                                 ttAPLnTax_Row.RateCode.KeyEquals(APLnTax.RateCode) &&
                                 ttAPLnTax_Row.ECAcquisitionSeq == APLnTax.ECAcquisitionSeq
                                 select ttAPLnTax_Row).FirstOrDefault();

                    if (ttAPLnTax == null)
                    {
                        ttAPLnTax = new Erp.Tablesets.APLnTaxRow();
                        ds.APLnTax.Add(ttAPLnTax);
                    }
                    BufferCopy.Copy(APLnTax, ref ttAPLnTax);
                    APLnTaxAfterGetRows();
                    APLnTax_Foreign_Link();
                }

            }

        }

        private void UpdateAPIHAPInvMscForLineTypeR(ref UpdExtAPInvoiceTableset ds)
        {
            var APInvDtl = (from source_Row in ds.APInvDtl
                            where source_Row.Company.KeyEquals(Session.CompanyID) &&
                            StringExtensions.Compare(source_Row.LineType, "R") == 0
                            select source_Row).FirstOrDefault();
            if (APInvDtl != null)
            {
                foreach (var APInvMsc in (SelectAPInvMsc(APInvDtl.Company, APInvDtl.VendorNum, APInvDtl.InvoiceNum, 0)))
                {
                    ttAPIHAPInvMsc = (from ttAPIHAPInvMsc_Row in ds.APIHAPInvMsc
                                      where ttAPIHAPInvMsc_Row.Company.KeyEquals(APInvMsc.Company) &&
                                      ttAPIHAPInvMsc_Row.VendorNum == APInvMsc.VendorNum &&
                                      ttAPIHAPInvMsc_Row.InvoiceNum.KeyEquals(APInvMsc.InvoiceNum) &&
                                      ttAPIHAPInvMsc_Row.InvoiceLine == APInvMsc.InvoiceLine &&
                                      ttAPIHAPInvMsc_Row.MscNum == APInvMsc.MscNum
                                      select ttAPIHAPInvMsc_Row).FirstOrDefault();

                    if (ttAPIHAPInvMsc != null)
                    {
                        BufferCopy.Copy(APInvMsc, ref ttAPIHAPInvMsc);
                        APIHAPInvMscAfterGetRows();
                        APIHAPInvMsc_Foreign_Link();
                    }

                }
            }
        }

        private void UpdateGLForLineTypeR(ref UpdExtAPInvoiceTableset ds)
        {
            foreach (var APInvDtlRow in (from source_Row in ds.APInvDtl
                                         where source_Row.Company.KeyEquals(Session.CompanyID) &&
                                         StringExtensions.Compare(source_Row.LineType, "R") == 0
                                         select source_Row))
            {

                ttAPInvDtl = (from sourceDtl_Row in ds.APInvDtl
                              where sourceDtl_Row.Company.KeyEquals(Session.CompanyID) &&
                              sourceDtl_Row.VendorNum == APInvDtlRow.VendorNum &&
                              sourceDtl_Row.InvoiceNum.KeyEquals(APInvDtlRow.InvoiceNum) &&
                               sourceDtl_Row.InvoiceLine == APInvDtlRow.InvoiceLine
                              select sourceDtl_Row).FirstOrDefault();

                APInvDtl = FindFirstAPInvDtl(APInvDtlRow.Company, APInvDtlRow.VendorNum, APInvDtlRow.InvoiceNum, APInvDtlRow.InvoiceLine);
                if (APInvDtl != null)
                {
                    BufferCopy.Copy(APInvDtl, ref ttAPInvDtl);
                    APInvDtlAfterGetRows();
                    APInvDtl_Foreign_Link();
                }


                foreach (var APInvExp in (SelectAPInvExp(APInvDtlRow.Company, APInvDtlRow.VendorNum, APInvDtlRow.InvoiceNum, APInvDtlRow.InvoiceLine)))
                {
                    ttAPInvExp = (from ttAPInvExp_Row in ds.APInvExp
                                  where ttAPInvExp_Row.Company.KeyEquals(APInvExp.Company) &&
                                 ttAPInvExp_Row.VendorNum == APInvExp.VendorNum &&
                                 ttAPInvExp_Row.InvoiceNum.KeyEquals(APInvExp.InvoiceNum) &&
                                 ttAPInvExp_Row.InvoiceLine == APInvExp.InvoiceLine &&
                                 ttAPInvExp_Row.InvExpSeq == APInvExp.InvExpSeq
                                  select ttAPInvExp_Row).FirstOrDefault();

                    if (ttAPInvExp == null)
                    {
                        ttAPInvExp = new Erp.Tablesets.APInvExpRow();
                        ds.APInvExp.Add(ttAPInvExp);
                        BufferCopy.Copy(APInvExp, ref ttAPInvExp);
                        APInvExpAfterGetRows();
                        APInvExp_Foreign_Link();


                        var BAPInvExpTGLCQuery = DBExpressionCompiler.Compile(BAPInvExpTGLCExpression);
                        foreach (var bAPInvExpTGLC in (BAPInvExpTGLCQuery(Db, APInvExp.Company, "APInvExp", Compatibility.Convert.ToString(APInvExp.VendorNum),
                                                                Compatibility.Convert.ToString(APInvExp.InvoiceNum), Compatibility.Convert.ToString(APInvExp.InvoiceLine),
                                                                Compatibility.Convert.ToString(APInvExp.InvExpSeq))))
                        {



                            ttAPInvExpTGLC = (from ttAPInvExpTGLC_Row in ds.APInvExpTGLC
                                              where ttAPInvExpTGLC_Row.Company.KeyEquals(APInvExp.Company) &&
                                              ttAPInvExpTGLC_Row.RelatedToFile.KeyEquals("APInvExp") &&
                                              ttAPInvExpTGLC_Row.Key1.KeyEquals(Compatibility.Convert.ToString(APInvExp.VendorNum)) &&
                                              ttAPInvExpTGLC_Row.Key2.KeyEquals(Compatibility.Convert.ToString(APInvExp.InvoiceNum)) &&
                                              ttAPInvExpTGLC_Row.Key3.KeyEquals(Compatibility.Convert.ToString(APInvExp.InvoiceLine)) &&
                                              ttAPInvExpTGLC_Row.Key4.KeyEquals(Compatibility.Convert.ToString(APInvExp.InvExpSeq))
                                              select ttAPInvExpTGLC_Row).FirstOrDefault();

                            if (ttAPInvExpTGLC == null)
                            {
                                ttAPInvExpTGLC = new Erp.Tablesets.APInvExpTGLCRow();
                                ds.APInvExpTGLC.Add(ttAPInvExpTGLC);
                                BufferCopy.Copy(bAPInvExpTGLC, ref ttAPInvExpTGLC);
                                APInvExpTGLCAfterGetRows();
                                APInvExpTGLC_Foreign_Link();
                            }
                        }
                    }
                }
            }
        }

        #endregion

        private string FormatNameAddress(APInvHedRow apInvHedRow)
        {
            StringBuilder vendorAddress = new StringBuilder();
            vendorAddress.AppendLine(apInvHedRow.VendorNumName);

            if (!string.IsNullOrEmpty(apInvHedRow.VendorNumAddress1))
            {
                vendorAddress.AppendLine(apInvHedRow.VendorNumAddress1);
            }

            if (!string.IsNullOrEmpty(apInvHedRow.VendorNumAddress2))
            {
                vendorAddress.AppendLine(apInvHedRow.VendorNumAddress2);
            }

            if (!string.IsNullOrEmpty(apInvHedRow.VendorNumAddress3))
            {
                vendorAddress.AppendLine(apInvHedRow.VendorNumAddress3);
            }

            if (!string.IsNullOrEmpty(apInvHedRow.VendorNumCity))
            {
                vendorAddress.Append(apInvHedRow.VendorNumCity);
                vendorAddress.Append(' ');
            }

            if (!string.IsNullOrEmpty(apInvHedRow.VendorNumState))
            {
                vendorAddress.Append(apInvHedRow.VendorNumState);
                vendorAddress.Append(' ');
            }

            if (!string.IsNullOrEmpty(apInvHedRow.VendorNumZIP))
            {
                vendorAddress.Append(apInvHedRow.VendorNumZIP);
                vendorAddress.Append(' ');
            }

            if (!string.IsNullOrEmpty(apInvHedRow.VendorNumCountry))
            {
                vendorAddress.AppendLine();
                vendorAddress.Append(apInvHedRow.VendorNumCountry);
            }

            return vendorAddress.ToString().Trim();
        }
        /// <summary>
        /// Supplier Tax Id check
        /// </summary>
        /// <param name="vendorID"></param>
        /// <param name="errMessage"></param>
        public void CheckVendorTaxID(string vendorID, out string errMessage)
        {
            errMessage = string.Empty;
            using (var vatCheck = new VATCheck(Db))
            {
                vatCheck.CheckVendorTaxID(vendorID, out errMessage);
                //if (!string.IsNullOrEmpty(errMessage))
                //{
                //    errMessage += Environment.NewLine + Strings.ContinueProcessing;
                //}

            }
        }
        /// <summary>
        /// Check for Vendor TaxId in Payments Group
        /// </summary>
        /// <param name="groupID"></param>
        /// <param name="errMessage"></param>
        public void CheckGroupTaxID(string groupID, out string errMessage)
        {
            errMessage = string.Empty;
            bool isError = false;
            XbSyst xbSyst = XbSyst.FindFirstByPrimaryKey(Db, Session.CompanyID);
            if (xbSyst == null || !xbSyst.TaxValidationAllow && !xbSyst.HMRCTaxValidationAllow)
            {
                return;
            }
            using (VATCheck vatCheck = new VATCheck(Db))
            {
                foreach (var vendorID in SelectAPInvHedVendorIDVatCheck(Session.CompanyID, groupID, false))
                {
                    try
                    {
                        vatCheck.CheckVendorTaxID(vendorID, out string opMessage);
                        if (!string.IsNullOrEmpty(opMessage))
                        {
                            errMessage += opMessage + Environment.NewLine;
                        }
                    }
                    catch (BLException ex)
                    {
                        errMessage += ex.Message + Environment.NewLine;
                        isError = true;
                    }
                }
            }
            if (isError)
            {
                throw new BLException(errMessage);
            }

        }

        private void RemoveTableSetDuplicates(IceTableset APInvoiceTableSet)
        {
            foreach (var ttTable in APInvoiceTableSet.Tables.Where(r => r.Count > 0))
            {
                Dictionary<Guid, List<IceRow>> APInvDtlDuplicates;
                APInvDtlDuplicates = new Dictionary<Guid, List<IceRow>>();

                List<IceRow> duplicateItems;

                foreach (IceRow ttRow in ttTable)
                {
                    if (!String.IsNullOrEmpty(ttRow.RowMod)) continue;

                    if (!APInvDtlDuplicates.ContainsKey(ttRow.SysRowID))
                    {
                        APInvDtlDuplicates.Add(ttRow.SysRowID, new List<IceRow>());
                    }

                    if (APInvDtlDuplicates.TryGetValue(ttRow.SysRowID, out duplicateItems))
                        duplicateItems.Add(ttRow);
                }

                foreach (var duplicateItem in APInvDtlDuplicates)
                {
                    if (duplicateItem.Value.Count > 1)
                    {
                        for (int i = 0; i < duplicateItem.Value.Count - 1; i++)
                        {
                            ttTable.Remove(duplicateItem.Value[i]);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Method to get plastic packaging tax cost lines.
        /// </summary>
        /// <param name="ds">The LateCostLines data set</param>
        /// <param name="plasticPackTaxReportID">The plastic packaging tax report ID</param>
        /// <param name="invVendorNum">The AP Invoice VendorNum</param>
        /// <param name="invNum">The AP Invoice Number</param>
        /// <param name="invMscNum">The AP Invoice MiscNum</param>
        public void GetPlasticPackTaxCostLines(ref LateCostLinesTableset ds, string plasticPackTaxReportID, int invVendorNum, string invNum, int invMscNum)
        {
            ds.LateCostLines.Clear();
            using (var libPlasticPackagingTaxTrnSelect = new PlasticPackagingTaxTrnSelect(Db))
            {
                var plasticPackagingTaxTrnRows = libPlasticPackagingTaxTrnSelect.GetPlasticPackTaxTrn(plasticPackTaxReportID);
                foreach (var plasticPackagingTaxTranRow in plasticPackagingTaxTrnRows.Where(t => t.PackagingType == 20 && t.PackagingExemptPercent != 100m)
                                                                                     .GroupBy(p => new { p.VendorNum, PurPoint = p.PurPoint.ToUpperInvariant(), PackSlip = p.PackSlip.ToUpperInvariant(), p.PackLine }))
                {
                    var rcvDtlWithLinks = FindFirstRcvDtlPlasticPackTax(Session.CompanyID, plasticPackagingTaxTranRow.Key.VendorNum, plasticPackagingTaxTranRow.Key.PurPoint, plasticPackagingTaxTranRow.Key.PackSlip, plasticPackagingTaxTranRow.Key.PackLine);
                    if (rcvDtlWithLinks != null)
                    {
                        var lateCostLine = new LateCostLinesRow();
                        BufferCopy.Copy(rcvDtlWithLinks.RcvDtl, lateCostLine, true);
                        lateCostLine.VendorNumName = rcvDtlWithLinks.VendorName;

                        lateCostLine.APInvVendorNum = invVendorNum;
                        lateCostLine.InvoiceNum = invNum;
                        lateCostLine.InvoiceLine = 0;
                        lateCostLine.MscNum = invMscNum;
                        ds.LateCostLines.Add(lateCostLine);
                    }
                }
            }
        }

        /// <summary>
        /// Method to call to get Late Costs from PO Receipts or Containers.
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="vendorNum">The APInvHed Vendor Number</param>
        /// <param name="invoiceNum">The APInvHed Invoice Number</param>
        /// <param name="InPONum">The PO Number to retrieve Late Costs for.  May be blank.</param>
        /// <param name="InContainerID">The ContainerID to retrieve Late Costs for.  May be blank.</param>
        public void GetAPLateCosts(ref APLateCostsTableset ds, int vendorNum, string invoiceNum, int InPONum, int InContainerID)
        {
            bool isFirstAPLateCost = true;
            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, vendorNum, invoiceNum);
            if (APInvHed == null)
                throw new BLException(Strings.InvalidAPInvoice, "APInvHed");

            if (APInvHed.Posted == true)
                throw new BLException(Strings.MaintNotAllowedForPostedInvoi, "APInvHed");

            if (APInvHed.DebitMemo == true)
                throw new BLException(Strings.AddingUninvReceiToADebitMemoIsNotAllowed, "APInvHed");

            ds.APLateCostLines.Clear();
            ds.APLateCosts.Clear();

            Erp.Tablesets.APLateCostTotalsRow ttAPLateCostTotalsRow = new Erp.Tablesets.APLateCostTotalsRow();
            if (ds.APLateCostTotals.Count == 0)
            {
                ds.APLateCostTotals.Add(ttAPLateCostTotalsRow);
                ttAPLateCostTotalsRow.CurrencyCode = APInvHed.CurrencyCode;
                ttAPLateCostTotalsRow.VendorNum = vendorNum;
                ttAPLateCostTotalsRow.Company = Session.CompanyID;
                ttAPLateCostTotalsRow.InvoiceNum = invoiceNum;
                ttAPLateCostTotalsRow.RowMod = Ice.IceRow.ROWSTATE_UPDATED;
            }

            if (InContainerID == 0)
            {
                foreach (var RcvHead_iterator in SelectAllLateCostsRcvHead(APInvHed.Company, APInvHed.VendorNum))
                {
                    ContainerHeader rcvHContainer = null;
                    RcvHead = RcvHead_iterator;
                    if (InPONum != 0)
                    {
                        if (RcvHead.PONum != InPONum)
                        {
                            // If InPONum was supplied, check all RcvDtl to see if there's at least one line that contains the InPONum
                            // If no row was found skip this RcvHead
                            if (!ExistsLateCostRcvDtl(APInvHed.Company, APInvHed.VendorNum, RcvHead.PackSlip, RcvHead.PurPoint, InPONum))
                                continue;
                        }
                    }

                    // At this point, either no InPONum was supplied or a RcvDetail with same PONum as InPONum for current RcvHead was found
                    // Next, if RcvHead ContainerID > 0 (Container was received) check if theres any container misc row
                    // Else, check if there is any RcvMisc row
                    // If no row was found skip this RcvHead
                    if (RcvHead.ContainerID > 0)
                    {
                        if (!ExistsLateCostContainerMisc(APInvHed.Company, RcvHead.ContainerID, APInvHed.VendorNum))
                            continue;
                    }
                    else
                    {
                        if (!ExistsLateCostRcvMisc(APInvHed.Company, APInvHed.VendorNum, RcvHead.PurPoint, RcvHead.PackSlip))
                            continue;
                    }

                    ttAPLateCosts = new APLateCostsRow();
                    ds.APLateCosts.Add(ttAPLateCosts);
                    if (RcvHead.ContainerID > 0)
                    {
                        rcvHContainer = this.selectContainerHeader(RcvHead.Company, RcvHead.ContainerID);
                        if (rcvHContainer == null)
                            throw new BLException(Strings.RcvHeadContainerNotFound);
                        ttAPLateCosts.ShipStatus = rcvHContainer.ShipStatus;
                        ttAPLateCosts.LegalNumber = rcvHContainer.LegalNumber;
                        ttAPLateCosts.SysRowID = rcvHContainer.SysRowID;
                        ttAPLateCosts.DummyKey = rcvHContainer.SysRowID.ToString();
                    }
                    else
                    {
                        ttAPLateCosts.LegalNumber = RcvHead.LegalNumber;
                        ttAPLateCosts.DummyKey = RcvHead.SysRowID.ToString();
                        ttAPLateCosts.SysRowID = RcvHead.SysRowID;
                    }
                    ttAPLateCosts.Company = RcvHead.Company;
                    ttAPLateCosts.VendorNum = RcvHead.VendorNum;
                    ttAPLateCosts.PurPoint = RcvHead.PurPoint;
                    ttAPLateCosts.PackSlip = RcvHead.PackSlip;
                    ttAPLateCosts.ContainerID = RcvHead.ContainerID;
                    ttAPLateCosts.PONum = RcvHead.PONum;
                    ttAPLateCosts.CurrencyCode = APInvHed.CurrencyCode;
                    var outCurrSymbol = ttAPLateCosts.CurrSymbol;
                    var outCurrencySwitch = ttAPLateCosts.CurrencySwitch;
                    var outCurrencyID = ttAPLateCosts.CurrencyID;
                    getCurrencyInfo(APInvHed.CurrencyCode, out outCurrSymbol, out outCurrencySwitch, out outCurrencyID);
                    ttAPLateCosts.CurrSymbol = outCurrSymbol;
                    ttAPLateCosts.CurrencySwitch = outCurrencySwitch;
                    ttAPLateCosts.CurrencyID = outCurrencyID;
                    ttAPLateCosts.ReceiptDate = RcvHead.ReceiptDate;
                    ttAPLateCosts.InvoiceNum = APInvHed.InvoiceNum;
                    ttAPLateCosts.RowMod = Ice.IceRow.ROWSTATE_UPDATED;

                    if (isFirstAPLateCost)
                    {
                        GetAPLateCostLines(ref ds, ttAPLateCosts.VendorNum, ttAPLateCosts.PurPoint, ttAPLateCosts.PackSlip, ttAPLateCosts.ContainerID, invoiceNum);
                        isFirstAPLateCost = false;
                    }
                }
            }

            foreach (var containerHeader_iterator in SelectAllLateCostsContainerHeaderWithContainerID(APInvHed.Company, InContainerID))
            {
                var contHead = containerHeader_iterator;

                // Check if container is already on APLateCosts
                var tempAPLateCost = ds.APLateCosts.Where(x => x.ContainerID == contHead.ContainerID && x.Company.Equals(APInvHed.Company, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
                if (tempAPLateCost != null)
                    continue;

                if (InPONum != 0)
                {
                    // If PONum was supplied, check all ContainerDetail to see if there is at least one line that contains the inPONum.
                    // if no row is found, skip this containerHeader
                    if (!ExistsLateCostContainerDetail(APInvHed.Company, contHead.ContainerID, InPONum))
                        continue;
                }

                // At this point, either no InPONum was supplied or a ContainerDetail line with same PONum as InPONum for current ContainerHead was found
                // Next, check if there's at least one ContainerMisc where InvoiceNum = '' (empty)
                // if no row is found, skip this containerHeader
                if (!ExistsLateCostContainerMisc(APInvHed.Company, contHead.ContainerID, APInvHed.VendorNum))
                    continue;

                ttAPLateCosts = new APLateCostsRow();
                ds.APLateCosts.Add(ttAPLateCosts);
                ttAPLateCosts.Company = contHead.Company;
                ttAPLateCosts.VendorNum = APInvHed.VendorNum;
                ttAPLateCosts.PurPoint = contHead.PurPoint;
                ttAPLateCosts.ContainerID = contHead.ContainerID;
                ttAPLateCosts.PONum = InPONum;
                ttAPLateCosts.CurrencyCode = APInvHed.CurrencyCode;
                var outCurrSymbol = ttAPLateCosts.CurrSymbol;
                var outCurrencySwitch = ttAPLateCosts.CurrencySwitch;
                var outCurrencyID = ttAPLateCosts.CurrencyID;
                getCurrencyInfo(APInvHed.CurrencyCode, out outCurrSymbol, out outCurrencySwitch, out outCurrencyID);
                ttAPLateCosts.CurrSymbol = outCurrSymbol;
                ttAPLateCosts.CurrencySwitch = outCurrencySwitch;
                ttAPLateCosts.CurrencyID = outCurrencyID;
                ttAPLateCosts.InvoiceNum = APInvHed.InvoiceNum;
                ttAPLateCosts.ShipStatus = contHead.ShipStatus;
                ttAPLateCosts.LegalNumber = contHead.LegalNumber;
                ttAPLateCosts.DummyKey = contHead.SysRowID.ToString();
                ttAPLateCosts.RowMod = Ice.IceRow.ROWSTATE_UPDATED;
                ttAPLateCosts.SysRowID = contHead.SysRowID;

                if (isFirstAPLateCost)
                {
                    GetAPLateCostLines(ref ds, ttAPLateCosts.VendorNum, ttAPLateCosts.PurPoint, ttAPLateCosts.PackSlip, ttAPLateCosts.ContainerID, invoiceNum);
                    isFirstAPLateCost = false;
                }
            }
        }

        /// <summary>
        /// Method to call to get Late Costs Lines for selected PO Receipt or container
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="vendorNum">The APInvHed Vendor Number</param>
        /// <param name="purPoint">The PurPoint of the current late cost</param>
        /// <param name="packSlip">The PackSlip of the current late cost.</param>
        /// <param name="containerID">The ContainerID of the current late cost.</param>
        /// <param name="invoiceNum">The current InvoiceNum.</param>
        public void GetAPLateCostLines(ref APLateCostsTableset ds, int vendorNum, string purPoint, string packSlip, int containerID, string invoiceNum)
        {
            ds.APLateCostLines.Clear();

            ttAPLateCosts = ds.APLateCosts.Where(x => x.Company.KeyEquals(Session.CompanyID) &&
                x.VendorNum == vendorNum &&
                x.PurPoint.KeyEquals(purPoint) &&
                x.PackSlip.KeyEquals(packSlip) &&
                x.ContainerID == containerID).FirstOrDefault();

            if (ttAPLateCosts == null)
                throw new BLException(Strings.InvalidAPLateCost);

            APInvHed = APInvHed.FindFirstByPrimaryKey(Db, Session.CompanyID, vendorNum, invoiceNum);
            if (APInvHed == null)
            {
                throw new BLException(Strings.InvalidAPInvoice, "APInvHed");
            }/* if not available APInvHed */


            ttAPLateCostTotals = ds.APLateCostTotals.Where(x => x.VendorNum == vendorNum && x.Company.KeyEquals(Session.CompanyID) && x.InvoiceNum.KeyEquals(invoiceNum) && x.RowMod != IceRow.ROWSTATE_UNCHANGED).FirstOrDefault();
            if (ttAPLateCostTotals == null)
                throw new BLException(Strings.LateCostTotalsNotFound);
            ttAPLateCostTotals.AvailableTotal = decimal.Zero;
            ttAPLateCostTotals.DocAvailableTotal = decimal.Zero;
            ttAPLateCostTotals.Rpt1AvailableTotal = decimal.Zero;
            ttAPLateCostTotals.Rpt2AvailableTotal = decimal.Zero;
            ttAPLateCostTotals.Rpt3AvailableTotal = decimal.Zero;

            if (ttAPLateCosts.ContainerID > 0)
            {
                foreach (var containerMisc_iterator in SelectAllContainerMisc(Session.CompanyID, ttAPLateCosts.ContainerID, ttAPLateCosts.VendorNum))
                {
                    var contMisc = containerMisc_iterator;
                    var miscCharge = SelectMiscContainerMiscCharge(Session.CompanyID, contMisc.MiscCode);
                    var alreadySelected = (from ttAPSelectedLateCostLines_Row in ds.APSelectedLateCostLines
                                           where ttAPSelectedLateCostLines_Row.SysRowID == contMisc.SysRowID
                                           select ttAPSelectedLateCostLines_Row).Any();
                    // Only add the line if its not already on the selected lines ds
                    if (!alreadySelected)
                    {
                        ttAPLateCostLines = new APLateCostLinesRow();
                        ds.APLateCostLines.Add(ttAPLateCostLines);
                        ttAPLateCostLines.Company = contMisc.Company;
                        ttAPLateCostLines.VendorNum = contMisc.VendorNum;
                        ttAPLateCostLines.PurPoint = purPoint;
                        ttAPLateCostLines.PackSlip = packSlip;
                        ttAPLateCostLines.ContainerID = contMisc.ContainerID;
                        ttAPLateCostLines.PONum = ttAPLateCosts.PONum;
                        ttAPLateCostLines.CurrencyCode = APInvHed.CurrencyCode;
                        ttAPLateCostLines.MiscCode = contMisc.MiscCode;
                        ttAPLateCostLines.LCDisburseMethod = contMisc.LCDisburseMethod;
                        ttAPLateCostLines.Type = contMisc.Type;
                        ttAPLateCostLines.Percentage = contMisc.Percentage;
                        ttAPLateCostLines.DocMiscAmt = contMisc.DocEstimateAmt;
                        var outMiscAmt = ttAPLateCostLines.MiscAmt;
                        var outRpt1MiscAmt = ttAPLateCostLines.Rpt1MiscAmt;
                        var outRpt2MiscAmt = ttAPLateCostLines.Rpt2MiscAmt;
                        var outRpt3MiscAmt = ttAPLateCostLines.Rpt3MiscAmt;
                        CalcBaseAmt(ttAPLateCostLines.DocMiscAmt, APInvHed.VendorNum, APInvHed.InvoiceNum, ttAPLateCostLines, "MiscAmt", out outMiscAmt, out outRpt1MiscAmt, out outRpt2MiscAmt, out outRpt3MiscAmt);
                        ttAPLateCostLines.MiscAmt = outMiscAmt;
                        ttAPLateCostLines.Rpt1MiscAmt = outRpt1MiscAmt;
                        ttAPLateCostLines.Rpt2MiscAmt = outRpt2MiscAmt;
                        ttAPLateCostLines.Rpt3MiscAmt = outRpt3MiscAmt;
                        ttAPLateCostLines.MiscSeq = contMisc.MiscSeq;
                        ttAPLateCostLines.Description = miscCharge.Description;
                        ttAPLateCostLines.InvoiceNum = contMisc.InvoiceNum;
                        ttAPLateCostLines.DummyKey = ttAPLateCosts.SysRowID.ToString();
                        ttAPLateCostTotals.DocAvailableTotal += ttAPLateCostLines.DocMiscAmt;
                        ttAPLateCostLines.SysRowID = contMisc.SysRowID;
                        ttAPLateCostLines.RowMod = Ice.IceRow.ROWSTATE_ADDED;
                    }
                }
            }

            if (ttAPLateCosts.ContainerID == 0)
            {
                foreach (var rcvMisc_iterator in selectAllRcvMisc(Session.CompanyID, ttAPLateCosts.VendorNum, ttAPLateCosts.PurPoint, ttAPLateCosts.PackSlip))
                {
                    var rcvMisc = rcvMisc_iterator;
                    var miscCharge = SelectMiscContainerMiscCharge(Session.CompanyID, rcvMisc.MiscCode);
                    var alreadySelected = (from ttAPSelectedLateCostLines_Row in ds.APSelectedLateCostLines
                                           where ttAPSelectedLateCostLines_Row.SysRowID == rcvMisc.SysRowID
                                           select ttAPSelectedLateCostLines_Row).Any();
                    // Only add the line if its not already on the selected lines ds
                    if (!alreadySelected)
                    {
                        ttAPLateCostLines = new APLateCostLinesRow();
                        ds.APLateCostLines.Add(ttAPLateCostLines);
                        ttAPLateCostLines.Company = rcvMisc.Company;
                        ttAPLateCostLines.VendorNum = rcvMisc.VendorNum;
                        ttAPLateCostLines.PurPoint = rcvMisc.PurPoint;
                        ttAPLateCostLines.PackSlip = rcvMisc.PackSlip;
                        ttAPLateCostLines.PONum = ttAPLateCosts.PONum;
                        ttAPLateCostLines.CurrencyCode = APInvHed.CurrencyCode;
                        ttAPLateCostLines.MiscCode = rcvMisc.MiscCode;
                        ttAPLateCostLines.LCDisburseMethod = rcvMisc.LCDisburseMethod;
                        ttAPLateCostLines.Type = rcvMisc.Type;
                        ttAPLateCostLines.Percentage = rcvMisc.Percentage;
                        ttAPLateCostLines.DocMiscAmt = rcvMisc.DocActualAmt;
                        var outMiscAmt = ttAPLateCostLines.MiscAmt;
                        var outRpt1MiscAmt = ttAPLateCostLines.Rpt1MiscAmt;
                        var outRpt2MiscAmt = ttAPLateCostLines.Rpt2MiscAmt;
                        var outRpt3MiscAmt = ttAPLateCostLines.Rpt3MiscAmt;
                        CalcBaseAmt(ttAPLateCostLines.DocMiscAmt, APInvHed.VendorNum, APInvHed.InvoiceNum, ttAPLateCostLines, "MiscAmt", out outMiscAmt, out outRpt1MiscAmt, out outRpt2MiscAmt, out outRpt3MiscAmt);
                        ttAPLateCostLines.MiscAmt = outMiscAmt;
                        ttAPLateCostLines.Rpt1MiscAmt = outRpt1MiscAmt;
                        ttAPLateCostLines.Rpt2MiscAmt = outRpt2MiscAmt;
                        ttAPLateCostLines.Rpt3MiscAmt = outRpt3MiscAmt;
                        ttAPLateCostLines.MiscSeq = rcvMisc.MiscSeq;
                        ttAPLateCostLines.Description = miscCharge.Description;
                        ttAPLateCostLines.InvoiceNum = rcvMisc.InvoiceNum;
                        ttAPLateCostLines.DummyKey = ttAPLateCosts.SysRowID.ToString();
                        ttAPLateCostTotals.DocAvailableTotal += ttAPLateCostLines.DocMiscAmt;
                        ttAPLateCostLines.SysRowID = rcvMisc.SysRowID;
                        ttAPLateCostLines.RowMod = Ice.IceRow.ROWSTATE_ADDED;

                    }
                }
            }

            var outAvailableTotal = ttAPLateCostTotals.AvailableTotal;
            var outRpt1AvailableTotal = ttAPLateCostTotals.Rpt1AvailableTotal;
            var outRpt2AvailableTotal = ttAPLateCostTotals.Rpt2AvailableTotal;
            var outRpt3AvailableTotal = ttAPLateCostTotals.Rpt3AvailableTotal;
            CalcBaseAmt(ttAPLateCostTotals.DocAvailableTotal, APInvHed.VendorNum, APInvHed.InvoiceNum, ttAPLateCosts, "AvailableTotal", out outAvailableTotal, out outRpt1AvailableTotal, out outRpt2AvailableTotal, out outRpt3AvailableTotal);
            ttAPLateCostTotals.AvailableTotal = outAvailableTotal;
            ttAPLateCostTotals.Rpt1AvailableTotal = outRpt1AvailableTotal;
            ttAPLateCostTotals.Rpt2AvailableTotal = outRpt2AvailableTotal;
            ttAPLateCostTotals.Rpt3AvailableTotal = outRpt3AvailableTotal;
        }

        /// <summary>
        /// Method to call to select Late Costs Lines
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="vendorNum">The APInvHed Vendor Number</param>
        /// <param name="purPoint">The PurPoint of the current late cost</param>
        /// <param name="packSlip">The PackSlip of the current late cost.</param>
        /// <param name="containerID">The ContainerID of the current late cost.</param>
        /// <param name="invoiceNum">The current InvoiceNum.</param>
        public void SelectUninvoicedLateCosts(ref APLateCostsTableset ds, int vendorNum, string purPoint, string packSlip, int containerID, string invoiceNum)
        {
            ttAPLateCostTotals = ds.APLateCostTotals.Where(x => x.VendorNum == vendorNum && x.Company.KeyEquals(Session.CompanyID) && x.InvoiceNum.KeyEquals(invoiceNum) && x.RowMod != IceRow.ROWSTATE_UNCHANGED).FirstOrDefault();
            if (ttAPLateCostTotals == null)
                throw new BLException(Strings.LateCostTotalsNotFound);
            ttAPLateCosts = (from ttAPLateCosts_Row in ds.APLateCosts
                             where ttAPLateCosts_Row.Company.KeyEquals(Session.CompanyID) &&
                             StringExtensions.Compare(ttAPLateCosts_Row.PurPoint, purPoint) == 0 &&
                                    ttAPLateCosts_Row.ContainerID == containerID &&
                                    StringExtensions.Compare(ttAPLateCosts_Row.PackSlip, packSlip) == 0
                             select ttAPLateCosts_Row).FirstOrDefault();

            if (ttAPLateCosts == null)
            {
                throw new BLException(Strings.InvalidAPLateCost, "APLateCosts");
            }/* if not available ttAPLateCosts */

            foreach (var ttAPLateCostLines_iterator in (from ttAPLateCostLines_Row in ds.APLateCostLines
                                                        where StringExtensions.Compare(ttAPLateCostLines_Row.Company, ttAPLateCosts.Company) == 0
                                                        && ttAPLateCostLines_Row.VendorNum == ttAPLateCosts.VendorNum
                                                        && StringExtensions.Compare(ttAPLateCostLines_Row.PurPoint, ttAPLateCosts.PurPoint) == 0
                                                        && StringExtensions.Compare(ttAPLateCostLines_Row.PackSlip, ttAPLateCosts.PackSlip) == 0
                                                        && ttAPLateCostLines_Row.ContainerID == ttAPLateCosts.ContainerID
                                                        && ttAPLateCostLines_Row.SelectLine == true
                                                        && StringExtensions.Compare(ttAPLateCostLines_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                                                        select ttAPLateCostLines_Row).ToList())
            {
                ttAPLateCostLines = ttAPLateCostLines_iterator;

                if (!(from ttAPSelectedLateCostLines_Row in ds.APSelectedLateCostLines
                      where ttAPSelectedLateCostLines_Row.SysRowID == ttAPLateCostLines.SysRowID
                      select ttAPSelectedLateCostLines_Row).Any())
                {

                    ttAPSelectedLateCostLines = new Erp.Tablesets.APSelectedLateCostLinesRow();
                    ds.APSelectedLateCostLines.Add(ttAPSelectedLateCostLines);
                    BufferCopy.Copy(ttAPLateCostLines, ref ttAPSelectedLateCostLines);
                    ttAPSelectedLateCostLines.InvoiceNum = ttAPLateCosts.InvoiceNum;

                    ttAPLateCostTotals.DocSelectedTotal += ttAPLateCostLines.DocMiscAmt;
                    ttAPLateCostLines.RowMod = "D";
                }
            }

            /* Recalculate totals for the APLateCostsTotals record */
            ttAPLateCostTotals.AvailableTotal = decimal.Zero;
            ttAPLateCostTotals.DocAvailableTotal = decimal.Zero;
            ttAPLateCostTotals.Rpt1AvailableTotal = decimal.Zero;
            ttAPLateCostTotals.Rpt2AvailableTotal = decimal.Zero;
            ttAPLateCostTotals.Rpt3AvailableTotal = decimal.Zero;

            foreach (var ttAPLateCostLines_iterator in (from ttAPLateCostLines_Row in ds.APLateCostLines
                                                        where StringExtensions.Compare(ttAPLateCostLines_Row.Company, ttAPLateCosts.Company) == 0
                                                        && ttAPLateCostLines_Row.VendorNum == ttAPLateCosts.VendorNum
                                                        && StringExtensions.Compare(ttAPLateCostLines_Row.PurPoint, ttAPLateCosts.PurPoint) == 0
                                                        && StringExtensions.Compare(ttAPLateCostLines_Row.PackSlip, ttAPLateCosts.PackSlip) == 0
                                                        && ttAPLateCostLines_Row.ContainerID == ttAPLateCosts.ContainerID
                                                        && (StringExtensions.Compare(ttAPLateCostLines_Row.RowMod, Ice.IceRow.ROWSTATE_UNCHANGED) != 0
                                                        && StringExtensions.Compare(ttAPLateCostLines_Row.RowMod, Ice.IceRow.ROWSTATE_DELETED) != 0)
                                                        select ttAPLateCostLines_Row))
            {
                ttAPLateCostLines = ttAPLateCostLines_iterator;
                ttAPLateCostTotals.DocAvailableTotal += ttAPLateCostLines.DocMiscAmt;
            }

            var outAvailableTotal = ttAPLateCostTotals.AvailableTotal;
            var outRpt1AvailableTotal = ttAPLateCostTotals.Rpt1AvailableTotal;
            var outRpt2AvailableTotal = ttAPLateCostTotals.Rpt2AvailableTotal;
            var outRpt3AvailableTotal = ttAPLateCostTotals.Rpt3AvailableTotal;
            CalcBaseAmt(ttAPLateCostTotals.DocAvailableTotal, ttAPLateCosts.VendorNum, ttAPLateCosts.InvoiceNum, ttAPLateCosts, "AvailableTotal", out outAvailableTotal, out outRpt1AvailableTotal, out outRpt2AvailableTotal, out outRpt3AvailableTotal);
            ttAPLateCostTotals.AvailableTotal = outAvailableTotal;
            ttAPLateCostTotals.Rpt1AvailableTotal = outRpt1AvailableTotal;
            ttAPLateCostTotals.Rpt2AvailableTotal = outRpt2AvailableTotal;
            ttAPLateCostTotals.Rpt3AvailableTotal = outRpt3AvailableTotal;

            var outSelectedTotal = ttAPLateCostTotals.SelectedTotal;
            var outRpt1SelectedTotal = ttAPLateCostTotals.Rpt1SelectedTotal;
            var outRpt2SelectedTotal = ttAPLateCostTotals.Rpt2SelectedTotal;
            var outRpt3SelectedTotal = ttAPLateCostTotals.Rpt3SelectedTotal;
            CalcBaseAmt(ttAPLateCostTotals.DocSelectedTotal, ttAPLateCosts.VendorNum, ttAPLateCosts.InvoiceNum, ttAPLateCosts, "SelectedTotal", out outSelectedTotal, out outRpt1SelectedTotal, out outRpt2SelectedTotal, out outRpt3SelectedTotal);
            ttAPLateCostTotals.SelectedTotal = outSelectedTotal;
            ttAPLateCostTotals.Rpt1SelectedTotal = outRpt1SelectedTotal;
            ttAPLateCostTotals.Rpt2SelectedTotal = outRpt2SelectedTotal;
            ttAPLateCostTotals.Rpt3SelectedTotal = outRpt3SelectedTotal;
        }

        /// <summary>
        /// Method to call to deselect selected Late Cost Lines
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="vendorNum">The APInvHed Vendor Number</param>
        /// <param name="purPoint">The PurPoint of the current late cost</param>
        /// <param name="packSlip">The PackSlip of the current late cost.</param>
        /// <param name="containerID">The ContainerID of the current late cost.</param>
        /// <param name="invoiceNum">The current InvoiceNum.</param>
        public void DeselectSelectedLateCosts(ref APLateCostsTableset ds, int vendorNum, string purPoint, string packSlip, int containerID, string invoiceNum)
        {
            APLateCostsTableset ttAPLateCostsTablesetDS = new APLateCostsTableset();
            ttAPLateCostsTablesetDS = ds;
            Guid SelectedRowIdent = Guid.Empty;

            ttAPLateCostTotals = ds.APLateCostTotals.Where(x => x.VendorNum == vendorNum && x.Company.KeyEquals(Session.CompanyID) && x.InvoiceNum.KeyEquals(invoiceNum) && x.RowMod != IceRow.ROWSTATE_UNCHANGED).FirstOrDefault();
            if (ttAPLateCostTotals == null)
                throw new BLException(Strings.LateCostTotalsNotFound);
            foreach (var ttAPSelectedLateCostLines_iterator in (from ttAPSelectedLateCostLines_Row in ds.APSelectedLateCostLines
                                                                where ttAPSelectedLateCostLines_Row.DeselectLine == true
                                                                && StringExtensions.Compare(ttAPSelectedLateCostLines_Row.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0
                                                                select ttAPSelectedLateCostLines_Row).ToList())
            {
                ttAPSelectedLateCostLines = ttAPSelectedLateCostLines_iterator;
                ttAPLateCostTotals.DocSelectedTotal -= ttAPSelectedLateCostLines.DocMiscAmt;

                ttAPLateCosts = (from ttAPLateCost in ds.APLateCosts
                                 where ttAPLateCost.PONum == ttAPSelectedLateCostLines.PONum &&
                                 ttAPLateCost.ContainerID == ttAPSelectedLateCostLines.ContainerID &&
                                 StringExtensions.Compare(ttAPLateCost.Company, ttAPSelectedLateCostLines.Company) == 0 &&
                                 StringExtensions.Compare(ttAPLateCost.PurPoint, ttAPSelectedLateCostLines.PurPoint) == 0 &&
                                 StringExtensions.Compare(ttAPLateCost.RowMod, IceRow.ROWSTATE_UNCHANGED) != 0 &&
                                 StringExtensions.Compare(ttAPLateCost.PackSlip, ttAPSelectedLateCostLines.PackSlip) == 0
                                 select ttAPLateCost).FirstOrDefault();


                if (ttAPLateCosts != null)
                {
                    if (!(((from ttAPUninvoicedLateCostLines_Row in ds.APLateCostLines
                            where ttAPUninvoicedLateCostLines_Row.SysRowID == ttAPSelectedLateCostLines.SysRowID
                            select ttAPUninvoicedLateCostLines_Row).Any()))
                            && ttAPSelectedLateCostLines.VendorNum == vendorNum
                            && StringExtensions.Compare(ttAPSelectedLateCostLines.PurPoint, purPoint) == 0
                            && StringExtensions.Compare(ttAPSelectedLateCostLines.PackSlip, packSlip) == 0
                            && ttAPSelectedLateCostLines.ContainerID == containerID)
                    {
                        ttAPLateCostLines = new Erp.Tablesets.APLateCostLinesRow();
                        ds.APLateCostLines.Add(ttAPLateCostLines);
                        BufferCopy.Copy(ttAPSelectedLateCostLines, ref ttAPLateCostLines);
                    }
                }/* if available ttAPLateCosts */

                ttAPSelectedLateCostLines.RowMod = "D";

            }

            if ((from ttAPLateCostLines_Row in ds.APLateCostLines
                 where StringExtensions.Compare(ttAPLateCostLines_Row.Company, Session.CompanyID) == 0
                 && ttAPLateCostLines_Row.VendorNum == vendorNum
                 && StringExtensions.Compare(ttAPLateCostLines_Row.PurPoint, purPoint) == 0
                 && StringExtensions.Compare(ttAPLateCostLines_Row.PackSlip, packSlip) == 0
                 && ttAPLateCostLines_Row.ContainerID == containerID
                 select ttAPLateCostLines_Row).FirstOrDefault() != null)
            {
                ttAPLateCostTotals.AvailableTotal = decimal.Zero;
                ttAPLateCostTotals.DocAvailableTotal = decimal.Zero;
                ttAPLateCostTotals.Rpt1AvailableTotal = decimal.Zero;
                ttAPLateCostTotals.Rpt2AvailableTotal = decimal.Zero;
                ttAPLateCostTotals.Rpt3AvailableTotal = decimal.Zero;
            }
            foreach (var ttAPLateCostLines_iterator in (from ttAPLateCostLines_Row in ds.APLateCostLines
                                                        where StringExtensions.Compare(ttAPLateCostLines_Row.Company, Session.CompanyID) == 0
                                                        && ttAPLateCostLines_Row.VendorNum == vendorNum
                                                        && StringExtensions.Compare(ttAPLateCostLines_Row.PurPoint, purPoint) == 0
                                                        && StringExtensions.Compare(ttAPLateCostLines_Row.PackSlip, packSlip) == 0
                                                        && ttAPLateCostLines_Row.ContainerID == containerID
                                                        && StringExtensions.Compare(ttAPLateCostLines_Row.RowMod, Ice.IceRow.ROWSTATE_UNCHANGED) != 0
                                                        select ttAPLateCostLines_Row).ToList())
            {
                ttAPLateCostLines = ttAPLateCostLines_iterator;
                ttAPLateCostTotals.DocAvailableTotal += ttAPLateCostLines.DocMiscAmt;
                ttAPLateCostTotals.CurrencyCode = ttAPLateCostLines.CurrencyCode;
            }

            if (ttAPLateCosts != null)
            {
                var outAvailableTotal = ttAPLateCostTotals.AvailableTotal;
                var outRpt1AvailableTotal = ttAPLateCostTotals.Rpt1AvailableTotal;
                var outRpt2AvailableTotal = ttAPLateCostTotals.Rpt2AvailableTotal;
                var outRpt3AvailableTotal = ttAPLateCostTotals.Rpt3AvailableTotal;
                CalcBaseAmt(ttAPLateCostTotals.DocAvailableTotal, vendorNum, invoiceNum, ttAPLateCosts, "AvailableTotal", out outAvailableTotal, out outRpt1AvailableTotal, out outRpt2AvailableTotal, out outRpt3AvailableTotal);
                ttAPLateCostTotals.AvailableTotal = outAvailableTotal;
                ttAPLateCostTotals.Rpt1AvailableTotal = outRpt1AvailableTotal;
                ttAPLateCostTotals.Rpt2AvailableTotal = outRpt2AvailableTotal;
                ttAPLateCostTotals.Rpt3AvailableTotal = outRpt3AvailableTotal;

                var outSelectedTotal = ttAPLateCostTotals.SelectedTotal;
                var outRpt1SelectedTotal = ttAPLateCostTotals.Rpt1SelectedTotal;
                var outRpt2SelectedTotal = ttAPLateCostTotals.Rpt2SelectedTotal;
                var outRpt3SelectedTotal = ttAPLateCostTotals.Rpt3SelectedTotal;
                CalcBaseAmt(ttAPLateCostTotals.DocSelectedTotal, vendorNum, invoiceNum, ttAPLateCosts, "SelectedTotal", out outSelectedTotal, out outRpt1SelectedTotal, out outRpt2SelectedTotal, out outRpt3SelectedTotal);
                ttAPLateCostTotals.SelectedTotal = outSelectedTotal;
                ttAPLateCostTotals.Rpt1SelectedTotal = outRpt1SelectedTotal;
                ttAPLateCostTotals.Rpt2SelectedTotal = outRpt2SelectedTotal;
                ttAPLateCostTotals.Rpt3SelectedTotal = outRpt3SelectedTotal;
            }
        }

        /// <summary>
        /// Method to call to invoice selected Late Cost Lines
        /// </summary>
        public void InvoiceSelectedLateCosts(ref APLateCostsTableset ds)
        {
            APCreateAPLateCosts.RunCreateAPLateCosts(ds.APSelectedLateCostLines);
            ds.APLateCostLines.Clear();
            ds.APSelectedLateCostLines.Clear();
            ds.APLateCostTotals.Clear();
            ds.APLateCosts.Clear();
        }

        /// <summary> 
        /// This Method will check if the sum of DocActualAmt values of records in RcvMisc table for an specific packslip and packline won't be negative after deleting the current late cost
        /// </summary>
        /// <param name="vendorNum"> Vendor number of the Invoice which late cost is intented to be deleted</param>
        /// <param name ="invoiceNum"> Invoice number of the Invoice which late cost is intented to be deleted</param>
        /// <param name ="mscNum"> Misc. charge number of the Invoice which late cost is intented to be deleted</param>
        /// <param name ="warningMessage">Warning message that will be displayed in case a problem. It will be empty if there are no problems. </param>
        public bool ValidateRcvMiscSumBeforeDeleteLateCost(int vendorNum, string invoiceNum, int mscNum, out string warningMessage)
        {
            warningMessage = string.Empty;
            bool result = true;
            StringBuilder currentMessage = new StringBuilder();
            foreach (var rcvMisc_iterator in SelectRcvMiscPartial(Session.CompanyID, vendorNum, invoiceNum, 0, mscNum))
            {
                decimal proposedMiscAmount = rcvMisc_iterator.DocActualAmt * -1; //sign is inverted due to we are deleting the value.
                if (!IsLateCostValid(proposedMiscAmount, rcvMisc_iterator.VendorNum, rcvMisc_iterator.PurPoint, rcvMisc_iterator.PackSlip, rcvMisc_iterator.PackLine, false))
                {
                    result = false;
                    currentMessage.AppendLine(Strings.CannotDeleteLateCost(rcvMisc_iterator.PackSlip, rcvMisc_iterator.PackLine));
                }
            }
            if (currentMessage.Length > 0)
                currentMessage.AppendLine(Strings.WantToContinue);
            warningMessage = currentMessage.ToString();
            return result;
        }

        /// <summary> 
        /// This Method will check if the sum of DocActualAmt values of records in RcvMisc table for an specific packslip and packline won't be negative after deleting the current late cost
        /// </summary>
        /// <param name="vendorNum"> Vendor number of the Invoice which late cost is intented to be deleted</param>
        /// <param name ="invoiceNum"> Invoice number of the Invoice which late cost is intented to be deleted</param>
        /// <param name ="mscNum"> Misc. charge number of the Invoice which late cost is intented to be deleted</param>
        /// <param name ="miscSeq"> Misc. charge sequence of the charge which late cost is intented to be deleted</param>
        /// <param name ="warningMessage">Warning message that will be displayed in case a problem. It will be empty if there are no problems. </param>
        public bool ValidateRcvMiscBeforeDeleteLateCost(int vendorNum, string invoiceNum, int mscNum, int miscSeq, out string warningMessage)
        {
            warningMessage = string.Empty;
            bool result = true;
            StringBuilder currentMessage = new StringBuilder();

            RcvMscPartial partialRcvMsc = FindFirstRcvMscPartial(Session.CompanyID, vendorNum, invoiceNum, 0, mscNum, miscSeq);

            if (partialRcvMsc != null)
            {
                decimal proposedMiscAmount = partialRcvMsc.DocActualAmt * -1;

                if (!IsLateCostValid(proposedMiscAmount, partialRcvMsc.VendorNum, partialRcvMsc.PurPoint, partialRcvMsc.PackSlip, partialRcvMsc.PackLine, false))
                {
                    result = false;
                    currentMessage.AppendLine(Strings.CannotDeleteLateCost(partialRcvMsc.PackSlip, partialRcvMsc.PackLine));
                }
            }


            if (currentMessage.Length > 0)
                currentMessage.AppendLine(Strings.WantToContinue);

            warningMessage = currentMessage.ToString();
            return result;
        }

        /// <summary> 
        /// This Method will check if the current late cost selected will not create a negative RcvMisc and send a warning message.
        /// </summary>
        /// <param name="ds">Tableset with the selected late costs</param>
        /// <param name ="warningMessage">Warning message that will be displayed in case a problem. It will be empty if there are no problems. </param>
        public bool ValidateLateCostBeforeAllocate(ref LateCostLinesTableset ds, out string warningMessage)
        {
            int numSelectedCostLines = (from ttLateCostLines_Row in ds.LateCostLines
                                        where ttLateCostLines_Row.Selected == true &&
                                        StringExtensions.Compare(ttLateCostLines_Row.RowMod, IceRow.ROWSTATE_UPDATED) == 0
                                        select ttLateCostLines_Row).Count();
            warningMessage = string.Empty;

            ttLateCostLines = (from ttLateCostLines_Row in ds.LateCostLines
                               where StringExtensions.Lookup(modList, ttLateCostLines_Row.RowMod) != -1
                               select ttLateCostLines_Row).FirstOrDefault();

            if (ttLateCostLines == null)
                return true;

            APInvMiscPartial bufAPInvMisc = FindFirstAPInvMiscPartial(Session.CompanyID, ttLateCostLines.APInvVendorNum, ttLateCostLines.InvoiceNum, ttLateCostLines.InvoiceLine, ttLateCostLines.MscNum);

            if (bufAPInvMisc == null)
                return true;

            bool validLateCost = true;
            decimal proposedDocActualAmt = bufAPInvMisc.DocMiscAmt.SafeDivision(numSelectedCostLines);
            foreach (var ttLateCostLines_iterator in (from ttLateCostLines_Row in ds.LateCostLines
                                                      where ttLateCostLines_Row.Selected == true &&
                                                      StringExtensions.Compare(ttLateCostLines_Row.RowMod, IceRow.ROWSTATE_UPDATED) == 0
                                                      select ttLateCostLines_Row))
            {
                if (!IsLateCostValid(proposedDocActualAmt, ttLateCostLines.VendorNum, ttLateCostLines.PurPoint, ttLateCostLines.PackSlip, ttLateCostLines.PackLine, true))
                {
                    validLateCost = false;
                    break;
                }
            }

            if (!validLateCost)
            {
                StringBuilder result = new StringBuilder();
                result.AppendLine(Strings.NegativeLateCost);
                result.AppendLine(Strings.WantToContinue);

                warningMessage = result.ToString();
            }



            return validLateCost;
        }

        /// <summary> Remove trailing spaces from last GL Account segments. e.g. 1000|00|00|||
        /// </summary>/// <param name="glAccount"></param>
        private string TrimGLAccount(string glAccount)
        {
            glAccount = glAccount.TrimEnd(' ').Trim('|');
            return glAccount;
        }

        bool IsLateCostValid(decimal proposedLateCost, int vendorNum, string purPoint, string packSlip, int packLine, bool validateOnlyNegativeAmounts)
        {
            decimal currentDocTotalActualAmt = GetSumRcvMisc(Session.CompanyID, vendorNum, purPoint, packSlip, packLine);

            if ((validateOnlyNegativeAmounts && proposedLateCost < 0) && (currentDocTotalActualAmt + proposedLateCost < 0))
                return false;

            if (!validateOnlyNegativeAmounts && (currentDocTotalActualAmt + proposedLateCost < 0))
                return false;

            return true;
        }

        /// <summary>
        /// This method will change the invoice number on the invoice specified by the vendorNum and oldInvoiceNum values.
        /// </summary>
        /// <param name="vendorNum">The supplier number</param>
        /// <param name="originalInvoiceNum">The original invoice number</param>
        /// <param name="newInvoiceNum">The new invoice number</param>
        /// <returns></returns>
        public APInvoiceTableset ChangeInvoiceNumber(int vendorNum, string originalInvoiceNum, string newInvoiceNum)
        {
            APInvoiceTableset ds = new APInvoiceTableset();

            if (!ExistsVendor(Session.CompanyID, vendorNum))
            {
                throw new BLException(Strings.AValidSupplierIdIsRequired);
            }

            var apInvHedRowOriginal = FindFirstAPInvHed(Session.CompanyID, vendorNum, originalInvoiceNum);

            if (apInvHedRowOriginal == null)
            {
                throw new BLException(Strings.InvoiceNotFound);
            }

            if (String.IsNullOrEmpty(newInvoiceNum))
            {
                throw new BLException(Strings.NewInvoiceNumMayNotBeBlank);
            }

            if (ExistsAPInvHed(Session.CompanyID, vendorNum, newInvoiceNum))
            {
                throw new BLException(Strings.InvoiceAlreadyExistsNewInvoiceNum(newInvoiceNum));
            }

            string errorMessage = String.Empty;

            this.LibCopyAPInvoice.RunCopyAPInvoice(
                false,
                apInvHedRowOriginal.GroupID,
                vendorNum,
                originalInvoiceNum,
                newInvoiceNum,
                string.Empty,
                apInvHedRowOriginal.InvoiceDate,
                apInvHedRowOriginal.InvoiceDate,
                apInvHedRowOriginal.HoldInvoice,
                out errorMessage);

            if (String.IsNullOrEmpty(errorMessage))
            {
                using (TransactionScope trans = ErpContext.CreateDefaultTransactionScope())
                {
                    var apInvHedRowNew = FindFirstAPInvHedWithUpdLock(Session.CompanyID, vendorNum, newInvoiceNum);

                    if (apInvHedRowNew == null)
                    {
                        throw new BLException(Strings.InvoiceNotFoundWithNewNumber(newInvoiceNum));
                    }

                    apInvHedRowNew.InvoiceRef = apInvHedRowOriginal.InvoiceRef;

                    if (!String.IsNullOrEmpty(apInvHedRowOriginal.LegalNumber))
                    {
                        changeInvoiceNumLNHandling(ref apInvHedRowOriginal, ref apInvHedRowNew);
                    }

                    apInvHedRowOriginal = FindFirstAPInvHedWithUpdLock(Session.CompanyID, vendorNum, originalInvoiceNum);

                    if (apInvHedRowOriginal != null)
                    {
                        apInvHedRowOriginal.LegalNumber = String.Empty;
                        Db.APInvHed.Delete(apInvHedRowOriginal);
                        Db.Validate(apInvHedRowOriginal);
                    }

                    Db.Validate();
                    trans.Complete();
                }

                using (var apInvoiceService = Ice.Assemblies.ServiceRenderer.GetService<Erp.Contracts.APInvoiceSvcContract>(Db))
                {
                    ds = apInvoiceService.GetByID(vendorNum, newInvoiceNum);
                }
            }
            else
            {
                throw new BLException(errorMessage);
            }

            return ds;
        }

        private void changeInvoiceNumLNHandling(ref APInvHed apInvHedRowOriginal, ref APInvHed apInvHedRowNew)
        {
            string lnGenerationType = GetLegalNumGenerationType(apInvHedRowOriginal.Company, apInvHedRowOriginal.TranDocTypeID);

            if (lnGenerationType.Equals("system", StringComparison.OrdinalIgnoreCase))
            {
                var legalNumHistoryRow = FindFirstLegalNumHistoryWithUpdLock(Session.CompanyID, apInvHedRowOriginal.LegalNumber);
                if (legalNumHistoryRow != null)
                {
                    legalNumHistoryRow.Voided = true;
                    legalNumHistoryRow.VoidedByUser = Session.UserID;
                    legalNumHistoryRow.VoidedDate = CompanyTime.Today();
                    legalNumHistoryRow.VoidedReason = Strings.LegalNumberVoidReason(apInvHedRowOriginal.InvoiceNum, apInvHedRowNew.InvoiceNum);
                    Db.Validate(legalNumHistoryRow);
                }
            }
            else
            {
                string newForeignKey = apInvHedRowNew.VendorNum.ToString() + Constants.LIST_DELIM + apInvHedRowNew.InvoiceNum;
                var legalNumHistoryRow = FindFirstLegalNumHistoryWithUpdLock(Session.CompanyID, apInvHedRowOriginal.LegalNumber);
                if (legalNumHistoryRow != null)
                {
                    legalNumHistoryRow.ForeignKey = newForeignKey;
                    Db.Validate(legalNumHistoryRow);
                }

                apInvHedRowNew.LegalNumber = apInvHedRowOriginal.LegalNumber;
            }
        }
    }
}
