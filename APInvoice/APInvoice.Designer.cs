//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Epicor.Data;
using Epicor.Hosting;
using Erp.Contracts;
using Erp.Tablesets;
using Ice;
using Ice.ExtendedData;

namespace Erp.Services.BO
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1063:ImplementIDisposableCorrectly", Justification = "False positive. IDisposable is implemented in the base class. See http://stackoverflow.com/questions/8925925/code-analysis-ca1063-fires-when-deriving-from-idisposable-and-providing-implemen for details.")]
    public partial class APInvoiceSvc : TablesetBound<Erp.ErpContext, APInvoiceTableset, APInvHedListTableset>, APInvoiceSvcContract
    {
        #region Declarations

        // Database rows
        private Erp.Tables.APInvHed APInvHed;
        private Ice.Tables.XFileAttch APInvHedAttch;
        private Erp.Tables.APInvExp APIHAPInvExp;
        private Erp.Tables.TranGLC APIHAPInvExpTGLC;
        private Erp.Tables.APInvMsc APIHAPInvMsc;
        private Erp.Tables.RcvMisc RcvMisc;
        private Erp.Tables.APLnTax APIHAPLnTax;
        private Erp.Tables.APInvDtl APInvDtl;
        private Ice.Tables.XFileAttch APInvDtlAttch;
        private Erp.Tables.APInvDtlDEASch APInvDtlDEASch;
        private Erp.Tables.APInvExp APInvExp;
        private Erp.Tables.TranGLC APInvExpTGLC;
        private Erp.Tables.TranGLC GlbAPIETGLC;
        private Erp.Tables.APInvJob APInvJob;
        private Erp.Tables.APInvMsc APInvMsc;
        private Erp.Tables.APInvLnMscTax APInvLnMscTax;
        private Erp.Tables.APInvPB APInvPB;
        private Erp.Tables.APLnTax APLnTax;
        private Erp.Tables.TranGLC APInvDtlTGLC;
        private Erp.Tables.APInvHedMscTax APInvHedMscTax;
        private Erp.Tables.APInvSched APInvSched;
        private Erp.Tables.APInvTax APInvTax;
        private Erp.Tables.PESUNATDtl PESUNATDtl;
        private Erp.Tables.EntityGLC EntityGLC;
        private Erp.Tables.PEAPInvTax PEAPInvTax;

        // Temp-table rows
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvGetDMRDMFilterRow ttAPInvGetDMRDMFilter;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvGetDMRDMSourceRow ttAPInvGetDMRDMSource;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvGetNotInvRecFilterRow ttAPInvGetNotInvRecFilter;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvGetNotInvRecSourceRow ttAPInvGetNotInvRecSource;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvGetRecInvSourceRow ttAPInvGetRecInvSource;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvHedListRow ttAPInvHedList;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvHedTransferListRow ttAPInvHedTransferList;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvHedRow ttAPInvHed;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvHedAttchRow ttAPInvHedAttch;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APIHAPInvExpRow ttAPIHAPInvExp;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APIHAPInvExpTGLCRow ttAPIHAPInvExpTGLC;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APIHAPInvMscRow ttAPIHAPInvMsc;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected RcvMiscRow ttRcvMisc;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APIHAPLnTaxRow ttAPIHAPLnTax;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvDtlRow ttAPInvDtl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvDtlAttchRow ttAPInvDtlAttch;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvDtlDEASchRow ttAPInvDtlDEASch;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvExpRow ttAPInvExp;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvExpTGLCRow ttAPInvExpTGLC;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected GlbAPIETGLCRow ttGlbAPIETGLC;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvJobRow ttAPInvJob;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvMscRow ttAPInvMsc;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvLnMscTaxRow ttAPInvLnMscTax;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvPBRow ttAPInvPB;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APLnTaxRow ttAPLnTax;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvDtlTGLCRow ttAPInvDtlTGLC;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvHedMscTaxRow ttAPInvHedMscTax;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvSchedRow ttAPInvSched;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvTaxRow ttAPInvTax;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PESUNATDtlRow ttPESUNATDtl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected EntityGLCRow ttEntityGLC;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PEAPInvTaxRow ttPEAPInvTax;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected AdditionalForms_ParametersViewRow ttAdditionalForms_ParametersView;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LegalNumGenOptsRow ttLegalNumGenOpts;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected SupplierXRefRow ttSupplierXRef;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected TaxConnectStatusRow ttTaxConnectStatus;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvPaySchedRow ttAPInvPaySched;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvPOMiscRow ttAPInvPOMisc;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APUninvoicedReceiptsRow ttAPUninvoicedReceipts;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APUninvoicedRcptLinesRow ttAPUninvoicedRcptLines;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APReceiptTotalsRow ttAPReceiptTotals;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APSelectedRcptLinesRow ttAPSelectedRcptLines;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APLateCostsRow ttAPLateCosts;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APLateCostLinesRow ttAPLateCostLines;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APLateCostTotalsRow ttAPLateCostTotals;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APSelectedLateCostLinesRow ttAPSelectedLateCostLines;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected APInvcRecurrRow ttAPInvcRecurr;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected GetLogAPInvRow ttGetLogAPInv;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LateCostLinesRow ttLateCostLines;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected RebateInvRow ttRebateInv;

        // Before-image rows
        private APInvHedRow BIttAPInvHed;
        private APInvHedAttchRow BIttAPInvHedAttch;
        private APIHAPInvExpRow BIttAPIHAPInvExp;
        private APIHAPInvExpTGLCRow BIttAPIHAPInvExpTGLC;
        private APIHAPInvMscRow BIttAPIHAPInvMsc;
        private RcvMiscRow BIttRcvMisc;
        private APIHAPLnTaxRow BIttAPIHAPLnTax;
        private APInvDtlRow BIttAPInvDtl;
        private APInvDtlAttchRow BIttAPInvDtlAttch;
        private APInvDtlDEASchRow BIttAPInvDtlDEASch;
        private APInvExpRow BIttAPInvExp;
        private APInvExpTGLCRow BIttAPInvExpTGLC;
        private GlbAPIETGLCRow BIttGlbAPIETGLC;
        private APInvJobRow BIttAPInvJob;
        private APInvMscRow BIttAPInvMsc;
        private APInvLnMscTaxRow BIttAPInvLnMscTax;
        private APInvPBRow BIttAPInvPB;
        private APLnTaxRow BIttAPLnTax;
        private APInvDtlTGLCRow BIttAPInvDtlTGLC;
        private APInvHedMscTaxRow BIttAPInvHedMscTax;
        private APInvSchedRow BIttAPInvSched;
        private APInvTaxRow BIttAPInvTax;
        private PESUNATDtlRow BIttPESUNATDtl;
        private EntityGLCRow BIttEntityGLC;
        private PEAPInvTaxRow BIttPEAPInvTax;

        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected APInvGetDMRDMSourceTableset ttAPInvGetDMRDMSourceTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected APInvGetNotInvRecSourceTableset ttAPInvGetNotInvRecSourceTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected APInvGetRecInvSourceTableset ttAPInvGetRecInvSourceTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected APInvPaymentScheduleTableset ttAPInvPaymentScheduleTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected APInvPOMiscTableset ttAPInvPOMiscTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected APInvReceiptBillingTableset ttAPInvReceiptBillingTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected APLateCostsTableset ttAPLateCostsTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected APRecurringInvTableset ttAPRecurringInvTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected GetLogAPInvTableset ttGetLogAPInvTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected LateCostLinesTableset ttLateCostLinesTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected RebateInvTableset ttRebateInvTablesetDS;

        /// <summary>
        /// The well known Name of this Service
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override string Name
        {
            get
            {
                return "APInvoice";
            }
        }

        #endregion Declarations

        #region Constructor

        /// <summary>
        /// Service Constructor
        /// </summary>
        /// <param name="ctx">Context</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public APInvoiceSvc(ErpContext ctx)
            : base(ctx)
        {
            this.HasColumnCompanyID = true;
            this.UseCurrentCompany = true;
            this.UseCurrentTenant = false;
        }

        #endregion Constructor

        #region Licensing

        private static readonly Guid[] requiredLicenseModules = { new Guid("00000003-57A3-4A49-81F5-1D2E33C385A2") };
        private static readonly IReadOnlyDictionary<Guid, Ice.Licensing.AccessLevel> licenseTypeAccess = new Dictionary<Guid, Ice.Licensing.AccessLevel>
        {
        };

        /// <summary>
        /// Get licensing information for this service.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override (Guid[], IReadOnlyDictionary<Guid, Ice.Licensing.AccessLevel>, Ice.Licensing.AccessLevel) GetLicenseInformation()
        {
            return (requiredLicenseModules, licenseTypeAccess, Ice.Licensing.AccessLevel.Full);
        }

        #endregion

        /// <summary>
        /// Determines whether a table should be read by the framework.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override bool CanRead(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return true;
                case 1:
                    return true;
                case 2:
                    return true;
                case 3:
                    return true;
                case 4:
                    return true;
                case 5:
                    return true;
                case 6:
                    return true;
                case 7:
                    return true;
                case 8:
                    return true;
                case 9:
                    return true;
                case 10:
                    return true;
                case 11:
                    return true;
                case 12:
                    return true;
                case 13:
                    return true;
                case 14:
                    return true;
                case 15:
                    return true;
                case 16:
                    return true;
                case 17:
                    return true;
                case 18:
                    return true;
                case 19:
                    return true;
                case 20:
                    return true;
                case 21:
                    return true;
                case 22:
                    return true;
                case 23:
                    return true;
                case 24:
                    return true;
                case 25:
                    return false;
                case 26:
                    return false;
                case 27:
                    return false;
                case 28:
                    return false;
                default:
                    throw new ArgumentException();
            }
        }

        /// <summary>
        /// Determines whether a table should be updated by the framework.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override bool CanWrite(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return true;
                case 1:
                    return true;
                case 2:
                    return true;
                case 3:
                    return true;
                case 4:
                    return true;
                case 5:
                    return true;
                case 6:
                    return true;
                case 7:
                    return true;
                case 8:
                    return true;
                case 9:
                    return true;
                case 10:
                    return true;
                case 11:
                    return true;
                case 12:
                    return true;
                case 13:
                    return true;
                case 14:
                    return true;
                case 15:
                    return true;
                case 16:
                    return true;
                case 17:
                    return true;
                case 18:
                    return true;
                case 19:
                    return true;
                case 20:
                    return true;
                case 21:
                    return true;
                case 22:
                    return true;
                case 23:
                    return true;
                case 24:
                    return true;
                case 25:
                    return false;
                case 26:
                    return false;
                case 27:
                    return false;
                case 28:
                    return false;
                default:
                    throw new ArgumentException();
            }
        }

        /// <summary>
        /// Create a new typed database row (LinqRow)
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override LinqRow CreateDBRow(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return new Erp.Tables.APInvHed();
                case 1:
                    return new Ice.Tables.XFileAttch();
                case 2:
                    return new Erp.Tables.APInvExp();
                case 3:
                    return new Erp.Tables.TranGLC();
                case 4:
                    return new Erp.Tables.APInvMsc();
                case 5:
                    return new Erp.Tables.RcvMisc();
                case 6:
                    return new Erp.Tables.APLnTax();
                case 7:
                    return new Erp.Tables.APInvDtl();
                case 8:
                    return new Ice.Tables.XFileAttch();
                case 9:
                    return new Erp.Tables.APInvDtlDEASch();
                case 10:
                    return new Erp.Tables.APInvExp();
                case 11:
                    return new Erp.Tables.TranGLC();
                case 12:
                    return new Erp.Tables.TranGLC();
                case 13:
                    return new Erp.Tables.APInvJob();
                case 14:
                    return new Erp.Tables.APInvMsc();
                case 15:
                    return new Erp.Tables.APInvLnMscTax();
                case 16:
                    return new Erp.Tables.APInvPB();
                case 17:
                    return new Erp.Tables.APLnTax();
                case 18:
                    return new Erp.Tables.TranGLC();
                case 19:
                    return new Erp.Tables.APInvHedMscTax();
                case 20:
                    return new Erp.Tables.APInvSched();
                case 21:
                    return new Erp.Tables.APInvTax();
                case 22:
                    return new Erp.Tables.PESUNATDtl();
                case 23:
                    return new Erp.Tables.EntityGLC();
                case 24:
                    return new Erp.Tables.PEAPInvTax();
                default:
                    throw new ArgumentException();
            }
        }

        #region FindFirstByZKey

        private static Func<ErpContext, string, int, string, Erp.Tables.APInvHed> findFirstAPInvHedByZKeyQuery;
        private Erp.Tables.APInvHed FindFirstAPInvHedByZKey(string company, int vendorNum, string invoiceNum)
        {
            if (findFirstAPInvHedByZKeyQuery == null)
            {
                Expression<Func<ErpContext, string, int, string, Erp.Tables.APInvHed>> expression =
                    (context, company_ex, vendorNum_ex, invoiceNum_ex) =>
                    (from row in context.APInvHed
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.InvoiceNum == invoiceNum_ex
                     select row)
                    .FirstOrDefault();
                findFirstAPInvHedByZKeyQuery = DBExpressionCompiler.Compile(expression);
            }

            return findFirstAPInvHedByZKeyQuery(this.Db, company, vendorNum, invoiceNum);
        }

        #endregion

        /// <summary>
        /// Get a database row by row ID
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override LinqRow GetDBRowWithUpdLock(int tableNumber, Guid rowID)
        {
            switch (tableNumber)
            {
                case 0:
                    return Erp.Tables.APInvHed.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 1:
                    return Ice.Tables.XFileAttch.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 2:
                    return Erp.Tables.APInvExp.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 3:
                    return Erp.Tables.TranGLC.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 4:
                    return Erp.Tables.APInvMsc.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 5:
                    return Erp.Tables.RcvMisc.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 6:
                    return Erp.Tables.APLnTax.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 7:
                    return Erp.Tables.APInvDtl.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 8:
                    return Ice.Tables.XFileAttch.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 9:
                    return Erp.Tables.APInvDtlDEASch.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 10:
                    return Erp.Tables.APInvExp.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 11:
                    return Erp.Tables.TranGLC.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 12:
                    return Erp.Tables.TranGLC.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 13:
                    return Erp.Tables.APInvJob.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 14:
                    return Erp.Tables.APInvMsc.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 15:
                    return Erp.Tables.APInvLnMscTax.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 16:
                    return Erp.Tables.APInvPB.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 17:
                    return Erp.Tables.APLnTax.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 18:
                    return Erp.Tables.TranGLC.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 19:
                    return Erp.Tables.APInvHedMscTax.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 20:
                    return Erp.Tables.APInvSched.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 21:
                    return Erp.Tables.APInvTax.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 22:
                    return Erp.Tables.PESUNATDtl.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 23:
                    return Erp.Tables.EntityGLC.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 24:
                    return Erp.Tables.PEAPInvTax.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                default:
                    throw new ArgumentException();
            }
        }

        #region Dispatchers

        /// <summary>
        /// Dispatch service events to the appropriate partial method.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void OnTablesetEvent(DatasetEventType type)
        {
            switch (type)
            {
                case DatasetEventType.AfterGetList:
                    AfterGetList();
                    break;
                case DatasetEventType.AfterGetRows:
                    AfterGetRows();
                    break;
                case DatasetEventType.AfterUpdate:
                    AfterUpdate();
                    break;
                case DatasetEventType.AfterUpdatePostTrans:
                    AfterUpdatePostTrans();
                    break;
                case DatasetEventType.BeforeUpdate:
                    BeforeUpdate();
                    break;
            }
        }

        /// <summary>
        /// Dispatch row events to the appropriate partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void OnRowEvent(DataTableEventType type, string tableName, IceRow row)
        {
            switch (type)
            {
                case DataTableEventType.AfterCreate:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHedAfterCreate();
                            break;

                        case "APInvHedAttch":
                            APInvHedAttchAfterCreate();
                            break;

                        case "APIHAPInvExp":
                            APIHAPInvExpAfterCreate();
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLCAfterCreate();
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMscAfterCreate();
                            break;

                        case "RcvMisc":
                            RcvMiscAfterCreate();
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTaxAfterCreate();
                            break;

                        case "APInvDtl":
                            APInvDtlAfterCreate();
                            break;

                        case "APInvDtlAttch":
                            APInvDtlAttchAfterCreate();
                            break;

                        case "APInvDtlDEASch":
                            APInvDtlDEASchAfterCreate();
                            break;

                        case "APInvExp":
                            APInvExpAfterCreate();
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLCAfterCreate();
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLCAfterCreate();
                            break;

                        case "APInvJob":
                            APInvJobAfterCreate();
                            break;

                        case "APInvMsc":
                            APInvMscAfterCreate();
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTaxAfterCreate();
                            break;

                        case "APInvPB":
                            APInvPBAfterCreate();
                            break;

                        case "APLnTax":
                            APLnTaxAfterCreate();
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLCAfterCreate();
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTaxAfterCreate();
                            break;

                        case "APInvSched":
                            APInvSchedAfterCreate();
                            break;

                        case "APInvTax":
                            APInvTaxAfterCreate();
                            break;

                        case "PESUNATDtl":
                            PESUNATDtlAfterCreate();
                            break;

                        case "EntityGLC":
                            EntityGLCAfterCreate();
                            break;

                        case "PEAPInvTax":
                            PEAPInvTaxAfterCreate();
                            break;

                    }
                    break;

                case DataTableEventType.AfterDelete:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHedAfterDelete();
                            break;

                        case "APInvHedAttch":
                            APInvHedAttchAfterDelete();
                            break;

                        case "APIHAPInvExp":
                            APIHAPInvExpAfterDelete();
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLCAfterDelete();
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMscAfterDelete();
                            break;

                        case "RcvMisc":
                            RcvMiscAfterDelete();
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTaxAfterDelete();
                            break;

                        case "APInvDtl":
                            APInvDtlAfterDelete();
                            break;

                        case "APInvDtlAttch":
                            APInvDtlAttchAfterDelete();
                            break;

                        case "APInvDtlDEASch":
                            APInvDtlDEASchAfterDelete();
                            break;

                        case "APInvExp":
                            APInvExpAfterDelete();
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLCAfterDelete();
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLCAfterDelete();
                            break;

                        case "APInvJob":
                            APInvJobAfterDelete();
                            break;

                        case "APInvMsc":
                            APInvMscAfterDelete();
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTaxAfterDelete();
                            break;

                        case "APInvPB":
                            APInvPBAfterDelete();
                            break;

                        case "APLnTax":
                            APLnTaxAfterDelete();
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLCAfterDelete();
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTaxAfterDelete();
                            break;

                        case "APInvSched":
                            APInvSchedAfterDelete();
                            break;

                        case "APInvTax":
                            APInvTaxAfterDelete();
                            break;

                        case "PESUNATDtl":
                            PESUNATDtlAfterDelete();
                            break;

                        case "EntityGLC":
                            EntityGLCAfterDelete();
                            break;

                        case "PEAPInvTax":
                            PEAPInvTaxAfterDelete();
                            break;

                    }
                    break;

                case DataTableEventType.AfterGetNew:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHedAfterGetNew();
                            break;

                        case "APInvHedAttch":
                            APInvHedAttchAfterGetNew();
                            break;

                        case "APIHAPInvExp":
                            APIHAPInvExpAfterGetNew();
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLCAfterGetNew();
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMscAfterGetNew();
                            break;

                        case "RcvMisc":
                            RcvMiscAfterGetNew();
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTaxAfterGetNew();
                            break;

                        case "APInvDtl":
                            APInvDtlAfterGetNew();
                            break;

                        case "APInvDtlAttch":
                            APInvDtlAttchAfterGetNew();
                            break;

                        case "APInvDtlDEASch":
                            APInvDtlDEASchAfterGetNew();
                            break;

                        case "APInvExp":
                            APInvExpAfterGetNew();
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLCAfterGetNew();
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLCAfterGetNew();
                            break;

                        case "APInvJob":
                            APInvJobAfterGetNew();
                            break;

                        case "APInvMsc":
                            APInvMscAfterGetNew();
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTaxAfterGetNew();
                            break;

                        case "APInvPB":
                            APInvPBAfterGetNew();
                            break;

                        case "APLnTax":
                            APLnTaxAfterGetNew();
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLCAfterGetNew();
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTaxAfterGetNew();
                            break;

                        case "APInvSched":
                            APInvSchedAfterGetNew();
                            break;

                        case "APInvTax":
                            APInvTaxAfterGetNew();
                            break;

                        case "PESUNATDtl":
                            PESUNATDtlAfterGetNew();
                            break;

                        case "EntityGLC":
                            EntityGLCAfterGetNew();
                            break;

                        case "PEAPInvTax":
                            PEAPInvTaxAfterGetNew();
                            break;

                    }
                    break;

                case DataTableEventType.AfterGetRows:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHedAfterGetRows();
                            break;

                        case "APInvHedAttch":
                            APInvHedAttchAfterGetRows();
                            break;

                        case "APIHAPInvExp":
                            APIHAPInvExpAfterGetRows();
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLCAfterGetRows();
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMscAfterGetRows();
                            break;

                        case "RcvMisc":
                            RcvMiscAfterGetRows();
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTaxAfterGetRows();
                            break;

                        case "APInvDtl":
                            APInvDtlAfterGetRows();
                            break;

                        case "APInvDtlAttch":
                            APInvDtlAttchAfterGetRows();
                            break;

                        case "APInvDtlDEASch":
                            APInvDtlDEASchAfterGetRows();
                            break;

                        case "APInvExp":
                            APInvExpAfterGetRows();
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLCAfterGetRows();
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLCAfterGetRows();
                            break;

                        case "APInvJob":
                            APInvJobAfterGetRows();
                            break;

                        case "APInvMsc":
                            APInvMscAfterGetRows();
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTaxAfterGetRows();
                            break;

                        case "APInvPB":
                            APInvPBAfterGetRows();
                            break;

                        case "APLnTax":
                            APLnTaxAfterGetRows();
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLCAfterGetRows();
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTaxAfterGetRows();
                            break;

                        case "APInvSched":
                            APInvSchedAfterGetRows();
                            break;

                        case "APInvTax":
                            APInvTaxAfterGetRows();
                            break;

                        case "PESUNATDtl":
                            PESUNATDtlAfterGetRows();
                            break;

                        case "EntityGLC":
                            EntityGLCAfterGetRows();
                            break;

                        case "PEAPInvTax":
                            PEAPInvTaxAfterGetRows();
                            break;

                    }
                    break;

                case DataTableEventType.AfterUpdate:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHedAfterUpdate();
                            break;

                        case "APInvHedAttch":
                            APInvHedAttchAfterUpdate();
                            break;

                        case "APIHAPInvExp":
                            APIHAPInvExpAfterUpdate();
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLCAfterUpdate();
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMscAfterUpdate();
                            break;

                        case "RcvMisc":
                            RcvMiscAfterUpdate();
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTaxAfterUpdate();
                            break;

                        case "APInvDtl":
                            APInvDtlAfterUpdate();
                            break;

                        case "APInvDtlAttch":
                            APInvDtlAttchAfterUpdate();
                            break;

                        case "APInvDtlDEASch":
                            APInvDtlDEASchAfterUpdate();
                            break;

                        case "APInvExp":
                            APInvExpAfterUpdate();
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLCAfterUpdate();
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLCAfterUpdate();
                            break;

                        case "APInvJob":
                            APInvJobAfterUpdate();
                            break;

                        case "APInvMsc":
                            APInvMscAfterUpdate();
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTaxAfterUpdate();
                            break;

                        case "APInvPB":
                            APInvPBAfterUpdate();
                            break;

                        case "APLnTax":
                            APLnTaxAfterUpdate();
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLCAfterUpdate();
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTaxAfterUpdate();
                            break;

                        case "APInvSched":
                            APInvSchedAfterUpdate();
                            break;

                        case "APInvTax":
                            APInvTaxAfterUpdate();
                            break;

                        case "PESUNATDtl":
                            PESUNATDtlAfterUpdate();
                            break;

                        case "EntityGLC":
                            EntityGLCAfterUpdate();
                            break;

                        case "PEAPInvTax":
                            PEAPInvTaxAfterUpdate();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeBI:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHedBeforeBI();
                            break;

                        case "APInvHedAttch":
                            APInvHedAttchBeforeBI();
                            break;

                        case "APIHAPInvExp":
                            APIHAPInvExpBeforeBI();
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLCBeforeBI();
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMscBeforeBI();
                            break;

                        case "RcvMisc":
                            RcvMiscBeforeBI();
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTaxBeforeBI();
                            break;

                        case "APInvDtl":
                            APInvDtlBeforeBI();
                            break;

                        case "APInvDtlAttch":
                            APInvDtlAttchBeforeBI();
                            break;

                        case "APInvDtlDEASch":
                            APInvDtlDEASchBeforeBI();
                            break;

                        case "APInvExp":
                            APInvExpBeforeBI();
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLCBeforeBI();
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLCBeforeBI();
                            break;

                        case "APInvJob":
                            APInvJobBeforeBI();
                            break;

                        case "APInvMsc":
                            APInvMscBeforeBI();
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTaxBeforeBI();
                            break;

                        case "APInvPB":
                            APInvPBBeforeBI();
                            break;

                        case "APLnTax":
                            APLnTaxBeforeBI();
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLCBeforeBI();
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTaxBeforeBI();
                            break;

                        case "APInvSched":
                            APInvSchedBeforeBI();
                            break;

                        case "APInvTax":
                            APInvTaxBeforeBI();
                            break;

                        case "PESUNATDtl":
                            PESUNATDtlBeforeBI();
                            break;

                        case "EntityGLC":
                            EntityGLCBeforeBI();
                            break;

                        case "PEAPInvTax":
                            PEAPInvTaxBeforeBI();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeCreate:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHedBeforeCreate();
                            break;

                        case "APInvHedAttch":
                            APInvHedAttchBeforeCreate();
                            break;

                        case "APIHAPInvExp":
                            APIHAPInvExpBeforeCreate();
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLCBeforeCreate();
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMscBeforeCreate();
                            break;

                        case "RcvMisc":
                            RcvMiscBeforeCreate();
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTaxBeforeCreate();
                            break;

                        case "APInvDtl":
                            APInvDtlBeforeCreate();
                            break;

                        case "APInvDtlAttch":
                            APInvDtlAttchBeforeCreate();
                            break;

                        case "APInvDtlDEASch":
                            APInvDtlDEASchBeforeCreate();
                            break;

                        case "APInvExp":
                            APInvExpBeforeCreate();
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLCBeforeCreate();
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLCBeforeCreate();
                            break;

                        case "APInvJob":
                            APInvJobBeforeCreate();
                            break;

                        case "APInvMsc":
                            APInvMscBeforeCreate();
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTaxBeforeCreate();
                            break;

                        case "APInvPB":
                            APInvPBBeforeCreate();
                            break;

                        case "APLnTax":
                            APLnTaxBeforeCreate();
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLCBeforeCreate();
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTaxBeforeCreate();
                            break;

                        case "APInvSched":
                            APInvSchedBeforeCreate();
                            break;

                        case "APInvTax":
                            APInvTaxBeforeCreate();
                            break;

                        case "PESUNATDtl":
                            PESUNATDtlBeforeCreate();
                            break;

                        case "EntityGLC":
                            EntityGLCBeforeCreate();
                            break;

                        case "PEAPInvTax":
                            PEAPInvTaxBeforeCreate();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeDelete:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHedBeforeDelete();
                            break;

                        case "APInvHedAttch":
                            APInvHedAttchBeforeDelete();
                            break;

                        case "APIHAPInvExp":
                            APIHAPInvExpBeforeDelete();
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLCBeforeDelete();
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMscBeforeDelete();
                            break;

                        case "RcvMisc":
                            RcvMiscBeforeDelete();
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTaxBeforeDelete();
                            break;

                        case "APInvDtl":
                            APInvDtlBeforeDelete();
                            break;

                        case "APInvDtlAttch":
                            APInvDtlAttchBeforeDelete();
                            break;

                        case "APInvDtlDEASch":
                            APInvDtlDEASchBeforeDelete();
                            break;

                        case "APInvExp":
                            APInvExpBeforeDelete();
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLCBeforeDelete();
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLCBeforeDelete();
                            break;

                        case "APInvJob":
                            APInvJobBeforeDelete();
                            break;

                        case "APInvMsc":
                            APInvMscBeforeDelete();
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTaxBeforeDelete();
                            break;

                        case "APInvPB":
                            APInvPBBeforeDelete();
                            break;

                        case "APLnTax":
                            APLnTaxBeforeDelete();
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLCBeforeDelete();
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTaxBeforeDelete();
                            break;

                        case "APInvSched":
                            APInvSchedBeforeDelete();
                            break;

                        case "APInvTax":
                            APInvTaxBeforeDelete();
                            break;

                        case "PESUNATDtl":
                            PESUNATDtlBeforeDelete();
                            break;

                        case "EntityGLC":
                            EntityGLCBeforeDelete();
                            break;

                        case "PEAPInvTax":
                            PEAPInvTaxBeforeDelete();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeGetNew:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHedBeforeGetNew();
                            break;

                        case "APInvHedAttch":
                            APInvHedAttchBeforeGetNew();
                            break;

                        case "APIHAPInvExp":
                            APIHAPInvExpBeforeGetNew();
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLCBeforeGetNew();
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMscBeforeGetNew();
                            break;

                        case "RcvMisc":
                            RcvMiscBeforeGetNew();
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTaxBeforeGetNew();
                            break;

                        case "APInvDtl":
                            APInvDtlBeforeGetNew();
                            break;

                        case "APInvDtlAttch":
                            APInvDtlAttchBeforeGetNew();
                            break;

                        case "APInvDtlDEASch":
                            APInvDtlDEASchBeforeGetNew();
                            break;

                        case "APInvExp":
                            APInvExpBeforeGetNew();
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLCBeforeGetNew();
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLCBeforeGetNew();
                            break;

                        case "APInvJob":
                            APInvJobBeforeGetNew();
                            break;

                        case "APInvMsc":
                            APInvMscBeforeGetNew();
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTaxBeforeGetNew();
                            break;

                        case "APInvPB":
                            APInvPBBeforeGetNew();
                            break;

                        case "APLnTax":
                            APLnTaxBeforeGetNew();
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLCBeforeGetNew();
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTaxBeforeGetNew();
                            break;

                        case "APInvSched":
                            APInvSchedBeforeGetNew();
                            break;

                        case "APInvTax":
                            APInvTaxBeforeGetNew();
                            break;

                        case "PESUNATDtl":
                            PESUNATDtlBeforeGetNew();
                            break;

                        case "EntityGLC":
                            EntityGLCBeforeGetNew();
                            break;

                        case "PEAPInvTax":
                            PEAPInvTaxBeforeGetNew();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeUpdate:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHedBeforeUpdate();
                            break;

                        case "APInvHedAttch":
                            APInvHedAttchBeforeUpdate();
                            break;

                        case "APIHAPInvExp":
                            APIHAPInvExpBeforeUpdate();
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLCBeforeUpdate();
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMscBeforeUpdate();
                            break;

                        case "RcvMisc":
                            RcvMiscBeforeUpdate();
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTaxBeforeUpdate();
                            break;

                        case "APInvDtl":
                            APInvDtlBeforeUpdate();
                            break;

                        case "APInvDtlAttch":
                            APInvDtlAttchBeforeUpdate();
                            break;

                        case "APInvDtlDEASch":
                            APInvDtlDEASchBeforeUpdate();
                            break;

                        case "APInvExp":
                            APInvExpBeforeUpdate();
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLCBeforeUpdate();
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLCBeforeUpdate();
                            break;

                        case "APInvJob":
                            APInvJobBeforeUpdate();
                            break;

                        case "APInvMsc":
                            APInvMscBeforeUpdate();
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTaxBeforeUpdate();
                            break;

                        case "APInvPB":
                            APInvPBBeforeUpdate();
                            break;

                        case "APLnTax":
                            APLnTaxBeforeUpdate();
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLCBeforeUpdate();
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTaxBeforeUpdate();
                            break;

                        case "APInvSched":
                            APInvSchedBeforeUpdate();
                            break;

                        case "APInvTax":
                            APInvTaxBeforeUpdate();
                            break;

                        case "PESUNATDtl":
                            PESUNATDtlBeforeUpdate();
                            break;

                        case "EntityGLC":
                            EntityGLCBeforeUpdate();
                            break;

                        case "PEAPInvTax":
                            PEAPInvTaxBeforeUpdate();
                            break;

                    }
                    break;

                case DataTableEventType.SetDefaults:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHedSetDefaults((APInvHedRow)row);
                            break;

                        case "APInvHedAttch":
                            APInvHedAttchSetDefaults((APInvHedAttchRow)row);
                            break;

                        case "APIHAPInvExp":
                            APIHAPInvExpSetDefaults((APIHAPInvExpRow)row);
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLCSetDefaults((APIHAPInvExpTGLCRow)row);
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMscSetDefaults((APIHAPInvMscRow)row);
                            break;

                        case "RcvMisc":
                            RcvMiscSetDefaults((RcvMiscRow)row);
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTaxSetDefaults((APIHAPLnTaxRow)row);
                            break;

                        case "APInvDtl":
                            APInvDtlSetDefaults((APInvDtlRow)row);
                            break;

                        case "APInvDtlAttch":
                            APInvDtlAttchSetDefaults((APInvDtlAttchRow)row);
                            break;

                        case "APInvDtlDEASch":
                            APInvDtlDEASchSetDefaults((APInvDtlDEASchRow)row);
                            break;

                        case "APInvExp":
                            APInvExpSetDefaults((APInvExpRow)row);
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLCSetDefaults((APInvExpTGLCRow)row);
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLCSetDefaults((GlbAPIETGLCRow)row);
                            break;

                        case "APInvJob":
                            APInvJobSetDefaults((APInvJobRow)row);
                            break;

                        case "APInvMsc":
                            APInvMscSetDefaults((APInvMscRow)row);
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTaxSetDefaults((APInvLnMscTaxRow)row);
                            break;

                        case "APInvPB":
                            APInvPBSetDefaults((APInvPBRow)row);
                            break;

                        case "APLnTax":
                            APLnTaxSetDefaults((APLnTaxRow)row);
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLCSetDefaults((APInvDtlTGLCRow)row);
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTaxSetDefaults((APInvHedMscTaxRow)row);
                            break;

                        case "APInvSched":
                            APInvSchedSetDefaults((APInvSchedRow)row);
                            break;

                        case "APInvTax":
                            APInvTaxSetDefaults((APInvTaxRow)row);
                            break;

                        case "PESUNATDtl":
                            PESUNATDtlSetDefaults((PESUNATDtlRow)row);
                            break;

                        case "EntityGLC":
                            EntityGLCSetDefaults((EntityGLCRow)row);
                            break;

                        case "PEAPInvTax":
                            PEAPInvTaxSetDefaults((PEAPInvTaxRow)row);
                            break;

                    }
                    break;

                case DataTableEventType.GetListRowLoaded:
                    GetListRowLoaded();
                    break;

                case DataTableEventType.ForeignLink:
                    switch (tableName)
                    {
                        case "APInvHed":
                            APInvHed_Foreign_Link();
                            break;

                        case "APInvHedAttch":
                            break;

                        case "APIHAPInvExpTGLC":
                            APIHAPInvExpTGLC_Foreign_Link();
                            break;

                        case "APIHAPInvMsc":
                            APIHAPInvMsc_Foreign_Link();
                            break;

                        case "RcvMisc":
                            RcvMisc_Foreign_Link();
                            break;

                        case "APIHAPLnTax":
                            APIHAPLnTax_Foreign_Link();
                            break;

                        case "APInvDtl":
                            APInvDtl_Foreign_Link();
                            break;

                        case "APInvDtlAttch":
                            break;

                        case "APInvExp":
                            APInvExp_Foreign_Link();
                            break;

                        case "APInvExpTGLC":
                            APInvExpTGLC_Foreign_Link();
                            break;

                        case "GlbAPIETGLC":
                            GlbAPIETGLC_Foreign_Link();
                            break;

                        case "APInvJob":
                            APInvJob_Foreign_Link();
                            break;

                        case "APInvMsc":
                            APInvMsc_Foreign_Link();
                            break;

                        case "APInvLnMscTax":
                            APInvLnMscTax_Foreign_Link();
                            break;

                        case "APInvPB":
                            APInvPB_Foreign_Link();
                            break;

                        case "APLnTax":
                            APLnTax_Foreign_Link();
                            break;

                        case "APInvDtlTGLC":
                            APInvDtlTGLC_Foreign_Link();
                            break;

                        case "APInvHedMscTax":
                            APInvHedMscTax_Foreign_Link();
                            break;

                        case "APInvTax":
                            APInvTax_Foreign_Link();
                            break;

                        case "EntityGLC":
                            EntityGLC_Foreign_Link();
                            break;

                    }
                    break;

            }
        }

        /// <summary>
        /// Sets current row being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="row">The current row</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void PrepareForRowEvent(string tableName, IceRow row)
        {
            switch (tableName)
            {
                case "APInvHed":
                    ttAPInvHed = (APInvHedRow)row;
                    break;
                case "APInvHedAttch":
                    ttAPInvHedAttch = (APInvHedAttchRow)row;
                    break;
                case "APIHAPInvExp":
                    ttAPIHAPInvExp = (APIHAPInvExpRow)row;
                    break;
                case "APIHAPInvExpTGLC":
                    ttAPIHAPInvExpTGLC = (APIHAPInvExpTGLCRow)row;
                    break;
                case "APIHAPInvMsc":
                    ttAPIHAPInvMsc = (APIHAPInvMscRow)row;
                    break;
                case "RcvMisc":
                    ttRcvMisc = (RcvMiscRow)row;
                    break;
                case "APIHAPLnTax":
                    ttAPIHAPLnTax = (APIHAPLnTaxRow)row;
                    break;
                case "APInvDtl":
                    ttAPInvDtl = (APInvDtlRow)row;
                    break;
                case "APInvDtlAttch":
                    ttAPInvDtlAttch = (APInvDtlAttchRow)row;
                    break;
                case "APInvDtlDEASch":
                    ttAPInvDtlDEASch = (APInvDtlDEASchRow)row;
                    break;
                case "APInvExp":
                    ttAPInvExp = (APInvExpRow)row;
                    break;
                case "APInvExpTGLC":
                    ttAPInvExpTGLC = (APInvExpTGLCRow)row;
                    break;
                case "GlbAPIETGLC":
                    ttGlbAPIETGLC = (GlbAPIETGLCRow)row;
                    break;
                case "APInvJob":
                    ttAPInvJob = (APInvJobRow)row;
                    break;
                case "APInvMsc":
                    ttAPInvMsc = (APInvMscRow)row;
                    break;
                case "APInvLnMscTax":
                    ttAPInvLnMscTax = (APInvLnMscTaxRow)row;
                    break;
                case "APInvPB":
                    ttAPInvPB = (APInvPBRow)row;
                    break;
                case "APLnTax":
                    ttAPLnTax = (APLnTaxRow)row;
                    break;
                case "APInvDtlTGLC":
                    ttAPInvDtlTGLC = (APInvDtlTGLCRow)row;
                    break;
                case "APInvHedMscTax":
                    ttAPInvHedMscTax = (APInvHedMscTaxRow)row;
                    break;
                case "APInvSched":
                    ttAPInvSched = (APInvSchedRow)row;
                    break;
                case "APInvTax":
                    ttAPInvTax = (APInvTaxRow)row;
                    break;
                case "PESUNATDtl":
                    ttPESUNATDtl = (PESUNATDtlRow)row;
                    break;
                case "EntityGLC":
                    ttEntityGLC = (EntityGLCRow)row;
                    break;
                case "PEAPInvTax":
                    ttPEAPInvTax = (PEAPInvTaxRow)row;
                    break;
                case "AdditionalForms_ParametersView":
                    ttAdditionalForms_ParametersView = (AdditionalForms_ParametersViewRow)row;
                    break;
                case "LegalNumGenOpts":
                    ttLegalNumGenOpts = (LegalNumGenOptsRow)row;
                    break;
                case "SupplierXRef":
                    ttSupplierXRef = (SupplierXRefRow)row;
                    break;
                case "TaxConnectStatus":
                    ttTaxConnectStatus = (TaxConnectStatusRow)row;
                    break;
                case "APInvHedList":
                    ttAPInvHedList = (APInvHedListRow)row;
                    break;
            }
        }

        /// <summary>
        /// Sets current dbrow being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="dbRow">The current dbRow</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void PrepareForRowEvent(string tableName, LinqRow dbRow)
        {
            switch (tableName)
            {
                case "APInvHed":
                    APInvHed = (Erp.Tables.APInvHed)dbRow;
                    break;
                case "APInvHedAttch":
                    APInvHedAttch = (Ice.Tables.XFileAttch)dbRow;
                    break;
                case "APIHAPInvExp":
                    APIHAPInvExp = (Erp.Tables.APInvExp)dbRow;
                    break;
                case "APIHAPInvExpTGLC":
                    APIHAPInvExpTGLC = (Erp.Tables.TranGLC)dbRow;
                    break;
                case "APIHAPInvMsc":
                    APIHAPInvMsc = (Erp.Tables.APInvMsc)dbRow;
                    break;
                case "RcvMisc":
                    RcvMisc = (Erp.Tables.RcvMisc)dbRow;
                    break;
                case "APIHAPLnTax":
                    APIHAPLnTax = (Erp.Tables.APLnTax)dbRow;
                    break;
                case "APInvDtl":
                    APInvDtl = (Erp.Tables.APInvDtl)dbRow;
                    break;
                case "APInvDtlAttch":
                    APInvDtlAttch = (Ice.Tables.XFileAttch)dbRow;
                    break;
                case "APInvDtlDEASch":
                    APInvDtlDEASch = (Erp.Tables.APInvDtlDEASch)dbRow;
                    break;
                case "APInvExp":
                    APInvExp = (Erp.Tables.APInvExp)dbRow;
                    break;
                case "APInvExpTGLC":
                    APInvExpTGLC = (Erp.Tables.TranGLC)dbRow;
                    break;
                case "GlbAPIETGLC":
                    GlbAPIETGLC = (Erp.Tables.TranGLC)dbRow;
                    break;
                case "APInvJob":
                    APInvJob = (Erp.Tables.APInvJob)dbRow;
                    break;
                case "APInvMsc":
                    APInvMsc = (Erp.Tables.APInvMsc)dbRow;
                    break;
                case "APInvLnMscTax":
                    APInvLnMscTax = (Erp.Tables.APInvLnMscTax)dbRow;
                    break;
                case "APInvPB":
                    APInvPB = (Erp.Tables.APInvPB)dbRow;
                    break;
                case "APLnTax":
                    APLnTax = (Erp.Tables.APLnTax)dbRow;
                    break;
                case "APInvDtlTGLC":
                    APInvDtlTGLC = (Erp.Tables.TranGLC)dbRow;
                    break;
                case "APInvHedMscTax":
                    APInvHedMscTax = (Erp.Tables.APInvHedMscTax)dbRow;
                    break;
                case "APInvSched":
                    APInvSched = (Erp.Tables.APInvSched)dbRow;
                    break;
                case "APInvTax":
                    APInvTax = (Erp.Tables.APInvTax)dbRow;
                    break;
                case "PESUNATDtl":
                    PESUNATDtl = (Erp.Tables.PESUNATDtl)dbRow;
                    break;
                case "EntityGLC":
                    EntityGLC = (Erp.Tables.EntityGLC)dbRow;
                    break;
                case "PEAPInvTax":
                    PEAPInvTax = (Erp.Tables.PEAPInvTax)dbRow;
                    break;
            }
        }

        /// <summary>
        /// Sets current rows being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="row">The current row</param>
        /// <param name="bittRow">The current bittRow</param>
        /// <param name="dbRow">The current dbRow</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void PrepareForRowEvent(string tableName, IceRow row, IceRow bittRow, LinqRow dbRow)
        {
            switch (tableName)
            {
                case "APInvHed":
                    this.ttAPInvHed = (APInvHedRow)row;
                    this.BIttAPInvHed = (APInvHedRow)bittRow;
                    this.APInvHed = (Erp.Tables.APInvHed)dbRow;
                    break;
                case "APInvHedAttch":
                    this.ttAPInvHedAttch = (APInvHedAttchRow)row;
                    this.BIttAPInvHedAttch = (APInvHedAttchRow)bittRow;
                    this.APInvHedAttch = (Ice.Tables.XFileAttch)dbRow;
                    break;
                case "APIHAPInvExp":
                    this.ttAPIHAPInvExp = (APIHAPInvExpRow)row;
                    this.BIttAPIHAPInvExp = (APIHAPInvExpRow)bittRow;
                    this.APIHAPInvExp = (Erp.Tables.APInvExp)dbRow;
                    break;
                case "APIHAPInvExpTGLC":
                    this.ttAPIHAPInvExpTGLC = (APIHAPInvExpTGLCRow)row;
                    this.BIttAPIHAPInvExpTGLC = (APIHAPInvExpTGLCRow)bittRow;
                    this.APIHAPInvExpTGLC = (Erp.Tables.TranGLC)dbRow;
                    break;
                case "APIHAPInvMsc":
                    this.ttAPIHAPInvMsc = (APIHAPInvMscRow)row;
                    this.BIttAPIHAPInvMsc = (APIHAPInvMscRow)bittRow;
                    this.APIHAPInvMsc = (Erp.Tables.APInvMsc)dbRow;
                    break;
                case "RcvMisc":
                    this.ttRcvMisc = (RcvMiscRow)row;
                    this.BIttRcvMisc = (RcvMiscRow)bittRow;
                    this.RcvMisc = (Erp.Tables.RcvMisc)dbRow;
                    break;
                case "APIHAPLnTax":
                    this.ttAPIHAPLnTax = (APIHAPLnTaxRow)row;
                    this.BIttAPIHAPLnTax = (APIHAPLnTaxRow)bittRow;
                    this.APIHAPLnTax = (Erp.Tables.APLnTax)dbRow;
                    break;
                case "APInvDtl":
                    this.ttAPInvDtl = (APInvDtlRow)row;
                    this.BIttAPInvDtl = (APInvDtlRow)bittRow;
                    this.APInvDtl = (Erp.Tables.APInvDtl)dbRow;
                    break;
                case "APInvDtlAttch":
                    this.ttAPInvDtlAttch = (APInvDtlAttchRow)row;
                    this.BIttAPInvDtlAttch = (APInvDtlAttchRow)bittRow;
                    this.APInvDtlAttch = (Ice.Tables.XFileAttch)dbRow;
                    break;
                case "APInvDtlDEASch":
                    this.ttAPInvDtlDEASch = (APInvDtlDEASchRow)row;
                    this.BIttAPInvDtlDEASch = (APInvDtlDEASchRow)bittRow;
                    this.APInvDtlDEASch = (Erp.Tables.APInvDtlDEASch)dbRow;
                    break;
                case "APInvExp":
                    this.ttAPInvExp = (APInvExpRow)row;
                    this.BIttAPInvExp = (APInvExpRow)bittRow;
                    this.APInvExp = (Erp.Tables.APInvExp)dbRow;
                    break;
                case "APInvExpTGLC":
                    this.ttAPInvExpTGLC = (APInvExpTGLCRow)row;
                    this.BIttAPInvExpTGLC = (APInvExpTGLCRow)bittRow;
                    this.APInvExpTGLC = (Erp.Tables.TranGLC)dbRow;
                    break;
                case "GlbAPIETGLC":
                    this.ttGlbAPIETGLC = (GlbAPIETGLCRow)row;
                    this.BIttGlbAPIETGLC = (GlbAPIETGLCRow)bittRow;
                    this.GlbAPIETGLC = (Erp.Tables.TranGLC)dbRow;
                    break;
                case "APInvJob":
                    this.ttAPInvJob = (APInvJobRow)row;
                    this.BIttAPInvJob = (APInvJobRow)bittRow;
                    this.APInvJob = (Erp.Tables.APInvJob)dbRow;
                    break;
                case "APInvMsc":
                    this.ttAPInvMsc = (APInvMscRow)row;
                    this.BIttAPInvMsc = (APInvMscRow)bittRow;
                    this.APInvMsc = (Erp.Tables.APInvMsc)dbRow;
                    break;
                case "APInvLnMscTax":
                    this.ttAPInvLnMscTax = (APInvLnMscTaxRow)row;
                    this.BIttAPInvLnMscTax = (APInvLnMscTaxRow)bittRow;
                    this.APInvLnMscTax = (Erp.Tables.APInvLnMscTax)dbRow;
                    break;
                case "APInvPB":
                    this.ttAPInvPB = (APInvPBRow)row;
                    this.BIttAPInvPB = (APInvPBRow)bittRow;
                    this.APInvPB = (Erp.Tables.APInvPB)dbRow;
                    break;
                case "APLnTax":
                    this.ttAPLnTax = (APLnTaxRow)row;
                    this.BIttAPLnTax = (APLnTaxRow)bittRow;
                    this.APLnTax = (Erp.Tables.APLnTax)dbRow;
                    break;
                case "APInvDtlTGLC":
                    this.ttAPInvDtlTGLC = (APInvDtlTGLCRow)row;
                    this.BIttAPInvDtlTGLC = (APInvDtlTGLCRow)bittRow;
                    this.APInvDtlTGLC = (Erp.Tables.TranGLC)dbRow;
                    break;
                case "APInvHedMscTax":
                    this.ttAPInvHedMscTax = (APInvHedMscTaxRow)row;
                    this.BIttAPInvHedMscTax = (APInvHedMscTaxRow)bittRow;
                    this.APInvHedMscTax = (Erp.Tables.APInvHedMscTax)dbRow;
                    break;
                case "APInvSched":
                    this.ttAPInvSched = (APInvSchedRow)row;
                    this.BIttAPInvSched = (APInvSchedRow)bittRow;
                    this.APInvSched = (Erp.Tables.APInvSched)dbRow;
                    break;
                case "APInvTax":
                    this.ttAPInvTax = (APInvTaxRow)row;
                    this.BIttAPInvTax = (APInvTaxRow)bittRow;
                    this.APInvTax = (Erp.Tables.APInvTax)dbRow;
                    break;
                case "PESUNATDtl":
                    this.ttPESUNATDtl = (PESUNATDtlRow)row;
                    this.BIttPESUNATDtl = (PESUNATDtlRow)bittRow;
                    this.PESUNATDtl = (Erp.Tables.PESUNATDtl)dbRow;
                    break;
                case "EntityGLC":
                    this.ttEntityGLC = (EntityGLCRow)row;
                    this.BIttEntityGLC = (EntityGLCRow)bittRow;
                    this.EntityGLC = (Erp.Tables.EntityGLC)dbRow;
                    break;
                case "PEAPInvTax":
                    this.ttPEAPInvTax = (PEAPInvTaxRow)row;
                    this.BIttPEAPInvTax = (PEAPInvTaxRow)bittRow;
                    this.PEAPInvTax = (Erp.Tables.PEAPInvTax)dbRow;
                    break;
            }
        }

        /// <summary>
        /// Call the BeforeGetRows() partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void OnBeforeGetRows(Dictionary<IIceTable, QueryModifier> queryModifiers)
        {
            BeforeGetRows(queryModifiers);
        }

        /// <summary>
        /// Call the BeforeGetList() partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void OnBeforeGetList(QueryModifier queryModifier)
        {
            BeforeGetList(queryModifier);
        }

        #region DataSetEvents
        partial void AfterGetList();
        partial void AfterGetRows();
        partial void AfterUpdate();
        partial void AfterUpdatePostTrans();
        partial void BeforeBOGetByID(int vendorNum, string invoiceNum);
        partial void BeforeGetList(QueryModifier queryModifier);
        partial void BeforeGetRows(Dictionary<IIceTable, QueryModifier> queryModifiers);
        partial void BeforeUpdate();
        partial void GetListRowLoaded();
        #endregion DataSetEvents
        #endregion Dispatchers

        #region Table Specific Methods

        #region Table APInvHed
        #region GetNewAPInvHed
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvHed(ref APInvoiceTableset ds, int vendorNum)
        {
            CurrentFullTableset = ds;

            ttAPInvHed = (APInvHedRow)InnerGetNew(
                ds.APInvHed,
                (APInvHedRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvHed

        #region Events
        partial void APInvHedAfterCreate();
        partial void APInvHedAfterDelete();
        partial void APInvHedAfterGetNew();
        partial void APInvHedAfterGetRows();
        partial void APInvHedAfterUpdate();
        partial void APInvHedBeforeBI();
        partial void APInvHedBeforeCreate();
        partial void APInvHedBeforeDelete();
        partial void APInvHedBeforeGetNew();
        partial void APInvHedBeforeUpdate();
        partial void APInvHedSetDefaults(APInvHedRow row);
        #endregion Events

        #region APInvHed_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APInvHedForeignQueryResult
        {
            public string AGCustomsDescription { get; set; }
            public string AGDestinationDescription { get; set; }
            public bool APInvRecurringCycleInactive { get; set; }
            public string APInvRecurringCycleDescription { get; set; }
            public string APLOCIDDescription { get; set; }
            public string CurrencyCodeCurrName { get; set; }
            public string CurrencyCodeCurrSymbol { get; set; }
            public string CurrencyCodeCurrencyID { get; set; }
            public string CurrencyCodeCurrDesc { get; set; }
            public string CurrencyCodeDocumentDesc { get; set; }
            public string GLCntrlDescription { get; set; }
            public string GLCntrlTypeDescription { get; set; }
            public string JournalCodeJrnlDescription { get; set; }
            public int PayMethodType { get; set; }
            public bool PayMethodSummarizePerCustomer { get; set; }
            public string PayMethodName { get; set; }
            public string RateGrpCodeDescription { get; set; }
            public string SourcePlantName { get; set; }
            public string TaxRateGrpDescription { get; set; }
            public string TaxRegionCodeDescription { get; set; }
            public string TermsCodeDescription { get; set; }
            public string TermsCodeTermsType { get; set; }
            public string THRefVendorNumName { get; set; }
            public string THRefVendorNumVendorID { get; set; }
            public int VendBankPMUID { get; set; }
            public string VendBankCardCode { get; set; }
            public string VendBankBankAcctNumber { get; set; }
            public string VendBankIBANCode { get; set; }
            public string VendBankBankGiroAcctNbr { get; set; }
            public string VendBankSwiftNum { get; set; }
            public string VendBankLocalBIC { get; set; }
            public string VendBankBankName { get; set; }
            public string VendorNumCurrencyCode { get; set; }
            public string VendorNumZIP { get; set; }
            public string VendorNumAddress2 { get; set; }
            public string VendorNumAddress3 { get; set; }
            public string VendorNumCity { get; set; }
            public string VendorNumAddress1 { get; set; }
            public string VendorNumCountry { get; set; }
            public string VendorNumVendorID { get; set; }
            public string VendorNumTermsCode { get; set; }
            public string VendorNumDefaultFOB { get; set; }
            public string VendorNumState { get; set; }
            public string VendorNumName { get; set; }
            public bool XbSystAPTaxLnLevel { get; set; }
            public bool XbSystIsDiscountforDebitM { get; set; }
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_AGCustoms_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_AGCustoms_Foreign(string company, string agCustomsCode)
        {
            if (APInvHed_AGCustoms_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, agCustomsCode_ex) =>
                    (from row in dataContext.AGCustoms
                     where row.Company == company_ex
                     && row.CustomsCode == agCustomsCode_ex
                     select new APInvHedForeignQueryResult()
                     {
                         AGCustomsDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHed_AGCustoms_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_AGCustoms_Foreign_Query(this.Db, company, agCustomsCode);
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_AGDestination_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_AGDestination_Foreign(string company, string agDestinationCode)
        {
            if (APInvHed_AGDestination_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, agDestinationCode_ex) =>
                    (from row in dataContext.AGDestination
                     where row.Company == company_ex
                     && row.DestinationCode == agDestinationCode_ex
                     select new APInvHedForeignQueryResult()
                     {
                         AGDestinationDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHed_AGDestination_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_AGDestination_Foreign_Query(this.Db, company, agDestinationCode);
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_APInvRecurringCycle_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_APInvRecurringCycle_Foreign(string company, string cycleCode)
        {
            if (APInvHed_APInvRecurringCycle_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, cycleCode_ex) =>
                    (from row in dataContext.RecurringCycle
                     where row.Company == company_ex
                     && row.CycleCode == cycleCode_ex
                     select new APInvHedForeignQueryResult()
                     {
                         APInvRecurringCycleInactive = row.Inactive,
                         APInvRecurringCycleDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHed_APInvRecurringCycle_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_APInvRecurringCycle_Foreign_Query(this.Db, company, cycleCode);
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_APLOCID_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_APLOCID_Foreign(string company, string apLOCID)
        {
            if (APInvHed_APLOCID_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, apLOCID_ex) =>
                    (from row in dataContext.APLOC
                     where row.Company == company_ex
                     && row.LCID == apLOCID_ex
                     select new APInvHedForeignQueryResult()
                     {
                         APLOCIDDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHed_APLOCID_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_APLOCID_Foreign_Query(this.Db, company, apLOCID);
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_CurrencyCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_CurrencyCode_Foreign(string company, string currencyCode)
        {
            if (APInvHed_CurrencyCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, currencyCode_ex) =>
                    (from row in dataContext.Currency
                     where row.Company == company_ex
                     && row.CurrencyCode == currencyCode_ex
                     select new APInvHedForeignQueryResult()
                     {
                         CurrencyCodeCurrName = row.CurrName,
                         CurrencyCodeCurrSymbol = row.CurrSymbol,
                         CurrencyCodeCurrencyID = row.CurrencyID,
                         CurrencyCodeCurrDesc = row.CurrDesc,
                         CurrencyCodeDocumentDesc = row.DocumentDesc
                     }
                    ).FirstOrDefault();

                APInvHed_CurrencyCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_CurrencyCode_Foreign_Query(this.Db, company, currencyCode);
        }

        private static Func<ErpContext, string, string, string, APInvHedForeignQueryResult> APInvHed_GLCntrl_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_GLCntrl_Foreign(string company, string glControlType, string glControlCode)
        {
            if (APInvHed_GLCntrl_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, glControlType_ex, glControlCode_ex) =>
                    (from row in dataContext.GLCntrl
                     where row.Company == company_ex
                     && row.GLControlType == glControlType_ex
                     && row.GLControlCode == glControlCode_ex
                     select new APInvHedForeignQueryResult()
                     {
                         GLCntrlDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHed_GLCntrl_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_GLCntrl_Foreign_Query(this.Db, company, glControlType, glControlCode);
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_GLCntrlType_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_GLCntrlType_Foreign(string company, string glControlType)
        {
            if (APInvHed_GLCntrlType_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, glControlType_ex) =>
                    (from row in dataContext.GLCntrlType
                     where row.Company == company_ex
                     && row.GLControlType == glControlType_ex
                     select new APInvHedForeignQueryResult()
                     {
                         GLCntrlTypeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHed_GLCntrlType_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_GLCntrlType_Foreign_Query(this.Db, company, glControlType);
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_JournalCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_JournalCode_Foreign(string company, string journalCode)
        {
            if (APInvHed_JournalCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, journalCode_ex) =>
                    (from row in dataContext.JrnlCode
                     where row.Company == company_ex
                     && row.JournalCode == journalCode_ex
                     select new APInvHedForeignQueryResult()
                     {
                         JournalCodeJrnlDescription = row.JrnlDescription
                     }
                    ).FirstOrDefault();

                APInvHed_JournalCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_JournalCode_Foreign_Query(this.Db, company, journalCode);
        }

        private static Func<ErpContext, string, int, APInvHedForeignQueryResult> APInvHed_PayMethod_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_PayMethod_Foreign(string company, int pmUID)
        {
            if (APInvHed_PayMethod_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, pmUID_ex) =>
                    (from row in dataContext.PayMethod
                     where row.Company == company_ex
                     && row.PMUID == pmUID_ex
                     select new APInvHedForeignQueryResult()
                     {
                         PayMethodType = row.Type,
                         PayMethodSummarizePerCustomer = row.SummarizePerCustomer,
                         PayMethodName = row.Name
                     }
                    ).FirstOrDefault();

                APInvHed_PayMethod_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_PayMethod_Foreign_Query(this.Db, company, pmUID);
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_RateGrpCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_RateGrpCode_Foreign(string company, string rateGrpCode)
        {
            if (APInvHed_RateGrpCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, rateGrpCode_ex) =>
                    (from row in dataContext.CurrRateGrp
                     where row.Company == company_ex
                     && row.RateGrpCode == rateGrpCode_ex
                     select new APInvHedForeignQueryResult()
                     {
                         RateGrpCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHed_RateGrpCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_RateGrpCode_Foreign_Query(this.Db, company, rateGrpCode);
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_SourcePlant_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_SourcePlant_Foreign(string company, string sourcePlant)
        {
            if (APInvHed_SourcePlant_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, sourcePlant_ex) =>
                    (from row in dataContext.Plant
                     where row.Company == company_ex
                     && row.Plant1 == sourcePlant_ex
                     select new APInvHedForeignQueryResult()
                     {
                         SourcePlantName = row.Name
                     }
                    ).FirstOrDefault();

                APInvHed_SourcePlant_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_SourcePlant_Foreign_Query(this.Db, company, sourcePlant);
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_TaxRateGrp_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_TaxRateGrp_Foreign(string company, string taxRateGrpCode)
        {
            if (APInvHed_TaxRateGrp_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, taxRateGrpCode_ex) =>
                    (from row in dataContext.CurrRateGrp
                     where row.Company == company_ex
                     && row.RateGrpCode == taxRateGrpCode_ex
                     select new APInvHedForeignQueryResult()
                     {
                         TaxRateGrpDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHed_TaxRateGrp_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_TaxRateGrp_Foreign_Query(this.Db, company, taxRateGrpCode);
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_TaxRegionCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_TaxRegionCode_Foreign(string company, string taxRegionCode)
        {
            if (APInvHed_TaxRegionCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, taxRegionCode_ex) =>
                    (from row in dataContext.TaxRgn
                     where row.Company == company_ex
                     && row.TaxRegionCode == taxRegionCode_ex
                     select new APInvHedForeignQueryResult()
                     {
                         TaxRegionCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHed_TaxRegionCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_TaxRegionCode_Foreign_Query(this.Db, company, taxRegionCode);
        }

        private static Func<ErpContext, string, string, APInvHedForeignQueryResult> APInvHed_TermsCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_TermsCode_Foreign(string company, string termsCode)
        {
            if (APInvHed_TermsCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, termsCode_ex) =>
                    (from row in dataContext.PurTerms
                     where row.Company == company_ex
                     && row.TermsCode == termsCode_ex
                     select new APInvHedForeignQueryResult()
                     {
                         TermsCodeDescription = row.Description,
                         TermsCodeTermsType = row.TermsType
                     }
                    ).FirstOrDefault();

                APInvHed_TermsCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_TermsCode_Foreign_Query(this.Db, company, termsCode);
        }

        private static Func<ErpContext, string, int, APInvHedForeignQueryResult> APInvHed_THRefVendorNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_THRefVendorNum_Foreign(string company, int thRefVendorNum)
        {
            if (APInvHed_THRefVendorNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, thRefVendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == thRefVendorNum_ex
                     select new APInvHedForeignQueryResult()
                     {
                         THRefVendorNumName = row.Name,
                         THRefVendorNumVendorID = row.VendorID
                     }
                    ).FirstOrDefault();

                APInvHed_THRefVendorNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_THRefVendorNum_Foreign_Query(this.Db, company, thRefVendorNum);
        }

        private static Func<ErpContext, string, int, string, APInvHedForeignQueryResult> APInvHed_VendBank_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_VendBank_Foreign(string company, int vendorNum, string bankID)
        {
            if (APInvHed_VendBank_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, bankID_ex) =>
                    (from row in dataContext.VendBank
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.BankID == bankID_ex
                     select new APInvHedForeignQueryResult()
                     {
                         VendBankPMUID = row.PMUID,
                         VendBankCardCode = row.CardCode,
                         VendBankBankAcctNumber = row.BankAcctNumber,
                         VendBankIBANCode = row.IBANCode,
                         VendBankBankGiroAcctNbr = row.BankGiroAcctNbr,
                         VendBankSwiftNum = row.SwiftNum,
                         VendBankLocalBIC = row.LocalBIC,
                         VendBankBankName = row.BankName
                     }
                    ).FirstOrDefault();

                APInvHed_VendBank_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_VendBank_Foreign_Query(this.Db, company, vendorNum, bankID);
        }

        private static Func<ErpContext, string, int, APInvHedForeignQueryResult> APInvHed_VendorNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_VendorNum_Foreign(string company, int vendorNum)
        {
            if (APInvHed_VendorNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     select new APInvHedForeignQueryResult()
                     {
                         VendorNumCurrencyCode = row.CurrencyCode,
                         VendorNumZIP = row.ZIP,
                         VendorNumAddress2 = row.Address2,
                         VendorNumAddress3 = row.Address3,
                         VendorNumCity = row.City,
                         VendorNumAddress1 = row.Address1,
                         VendorNumCountry = row.Country,
                         VendorNumVendorID = row.VendorID,
                         VendorNumTermsCode = row.TermsCode,
                         VendorNumDefaultFOB = row.DefaultFOB,
                         VendorNumState = row.State,
                         VendorNumName = row.Name
                     }
                    ).FirstOrDefault();

                APInvHed_VendorNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_VendorNum_Foreign_Query(this.Db, company, vendorNum);
        }

        private static Func<ErpContext, string, APInvHedForeignQueryResult> APInvHed_XbSyst_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedForeignQueryResult FindFirst_APInvHed_XbSyst_Foreign(string company)
        {
            if (APInvHed_XbSyst_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, APInvHedForeignQueryResult>> expression =
                    (dataContext, company_ex) =>
                    (from row in dataContext.XbSyst
                     where row.Company == company_ex
                     select new APInvHedForeignQueryResult()
                     {
                         XbSystAPTaxLnLevel = row.APTaxLnLevel,
                         XbSystIsDiscountforDebitM = row.IsDiscountforDebitM
                     }
                    ).FirstOrDefault();

                APInvHed_XbSyst_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHed_XbSyst_Foreign_Query(this.Db, company);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APInvHed_Foreign_Link()
        {
            APInvHedForeignQueryResult APInvHed_AGCustoms_Foreign_LinkResults;
            APInvHed_AGCustoms_Foreign_LinkResults = FindFirst_APInvHed_AGCustoms_Foreign(ttAPInvHed.Company, ttAPInvHed.AGCustomsCode);
            if (APInvHed_AGCustoms_Foreign_LinkResults != null)
            {
                ttAPInvHed.AGCustomsDescription = APInvHed_AGCustoms_Foreign_LinkResults.AGCustomsDescription;
            }
            else
            {
                ttAPInvHed.AGCustomsDescription = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_AGDestination_Foreign_LinkResults;
            APInvHed_AGDestination_Foreign_LinkResults = FindFirst_APInvHed_AGDestination_Foreign(ttAPInvHed.Company, ttAPInvHed.AGDestinationCode);
            if (APInvHed_AGDestination_Foreign_LinkResults != null)
            {
                ttAPInvHed.AGDestinationDescription = APInvHed_AGDestination_Foreign_LinkResults.AGDestinationDescription;
            }
            else
            {
                ttAPInvHed.AGDestinationDescription = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_APInvRecurringCycle_Foreign_LinkResults;
            APInvHed_APInvRecurringCycle_Foreign_LinkResults = FindFirst_APInvHed_APInvRecurringCycle_Foreign(ttAPInvHed.Company, ttAPInvHed.CycleCode);
            if (APInvHed_APInvRecurringCycle_Foreign_LinkResults != null)
            {
                ttAPInvHed.APInvRecurringCycleInactive = APInvHed_APInvRecurringCycle_Foreign_LinkResults.APInvRecurringCycleInactive;
                ttAPInvHed.APInvRecurringCycleDescription = APInvHed_APInvRecurringCycle_Foreign_LinkResults.APInvRecurringCycleDescription;
            }
            else
            {
                ttAPInvHed.APInvRecurringCycleInactive = false;
                ttAPInvHed.APInvRecurringCycleDescription = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_APLOCID_Foreign_LinkResults;
            APInvHed_APLOCID_Foreign_LinkResults = FindFirst_APInvHed_APLOCID_Foreign(ttAPInvHed.Company, ttAPInvHed.APLOCID);
            if (APInvHed_APLOCID_Foreign_LinkResults != null)
            {
                ttAPInvHed.APLOCIDDescription = APInvHed_APLOCID_Foreign_LinkResults.APLOCIDDescription;
            }
            else
            {
                ttAPInvHed.APLOCIDDescription = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_CurrencyCode_Foreign_LinkResults;
            APInvHed_CurrencyCode_Foreign_LinkResults = FindFirst_APInvHed_CurrencyCode_Foreign(ttAPInvHed.Company, ttAPInvHed.CurrencyCode);
            if (APInvHed_CurrencyCode_Foreign_LinkResults != null)
            {
                ttAPInvHed.CurrencyCodeCurrName = APInvHed_CurrencyCode_Foreign_LinkResults.CurrencyCodeCurrName;
                ttAPInvHed.CurrencyCodeCurrSymbol = APInvHed_CurrencyCode_Foreign_LinkResults.CurrencyCodeCurrSymbol;
                ttAPInvHed.CurrencyCodeCurrencyID = APInvHed_CurrencyCode_Foreign_LinkResults.CurrencyCodeCurrencyID;
                ttAPInvHed.CurrencyCodeCurrDesc = APInvHed_CurrencyCode_Foreign_LinkResults.CurrencyCodeCurrDesc;
                ttAPInvHed.CurrencyCodeDocumentDesc = APInvHed_CurrencyCode_Foreign_LinkResults.CurrencyCodeDocumentDesc;
            }
            else
            {
                ttAPInvHed.CurrencyCodeCurrName = string.Empty;
                ttAPInvHed.CurrencyCodeCurrSymbol = string.Empty;
                ttAPInvHed.CurrencyCodeCurrencyID = string.Empty;
                ttAPInvHed.CurrencyCodeCurrDesc = string.Empty;
                ttAPInvHed.CurrencyCodeDocumentDesc = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_GLCntrl_Foreign_LinkResults;
            APInvHed_GLCntrl_Foreign_LinkResults = FindFirst_APInvHed_GLCntrl_Foreign(ttAPInvHed.Company, ttAPInvHed.GLControlType, ttAPInvHed.GLControlCode);
            if (APInvHed_GLCntrl_Foreign_LinkResults != null)
            {
                ttAPInvHed.GLCntrlDescription = APInvHed_GLCntrl_Foreign_LinkResults.GLCntrlDescription;
            }
            else
            {
                ttAPInvHed.GLCntrlDescription = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_GLCntrlType_Foreign_LinkResults;
            APInvHed_GLCntrlType_Foreign_LinkResults = FindFirst_APInvHed_GLCntrlType_Foreign(ttAPInvHed.Company, ttAPInvHed.GLControlType);
            if (APInvHed_GLCntrlType_Foreign_LinkResults != null)
            {
                ttAPInvHed.GLCntrlTypeDescription = APInvHed_GLCntrlType_Foreign_LinkResults.GLCntrlTypeDescription;
            }
            else
            {
                ttAPInvHed.GLCntrlTypeDescription = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_JournalCode_Foreign_LinkResults;
            APInvHed_JournalCode_Foreign_LinkResults = FindFirst_APInvHed_JournalCode_Foreign(ttAPInvHed.Company, ttAPInvHed.JournalCode);
            if (APInvHed_JournalCode_Foreign_LinkResults != null)
            {
                ttAPInvHed.JournalCodeJrnlDescription = APInvHed_JournalCode_Foreign_LinkResults.JournalCodeJrnlDescription;
            }
            else
            {
                ttAPInvHed.JournalCodeJrnlDescription = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_PayMethod_Foreign_LinkResults;
            APInvHed_PayMethod_Foreign_LinkResults = FindFirst_APInvHed_PayMethod_Foreign(ttAPInvHed.Company, ttAPInvHed.PMUID);
            if (APInvHed_PayMethod_Foreign_LinkResults != null)
            {
                ttAPInvHed.PayMethodType = APInvHed_PayMethod_Foreign_LinkResults.PayMethodType;
                ttAPInvHed.PayMethodSummarizePerCustomer = APInvHed_PayMethod_Foreign_LinkResults.PayMethodSummarizePerCustomer;
                ttAPInvHed.PayMethodName = APInvHed_PayMethod_Foreign_LinkResults.PayMethodName;
            }
            else
            {
                ttAPInvHed.PayMethodType = 0;
                ttAPInvHed.PayMethodSummarizePerCustomer = false;
                ttAPInvHed.PayMethodName = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_RateGrpCode_Foreign_LinkResults;
            APInvHed_RateGrpCode_Foreign_LinkResults = FindFirst_APInvHed_RateGrpCode_Foreign(ttAPInvHed.Company, ttAPInvHed.RateGrpCode);
            if (APInvHed_RateGrpCode_Foreign_LinkResults != null)
            {
                ttAPInvHed.RateGrpCodeDescription = APInvHed_RateGrpCode_Foreign_LinkResults.RateGrpCodeDescription;
            }
            else
            {
                ttAPInvHed.RateGrpCodeDescription = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_SourcePlant_Foreign_LinkResults;
            APInvHed_SourcePlant_Foreign_LinkResults = FindFirst_APInvHed_SourcePlant_Foreign(ttAPInvHed.Company, ttAPInvHed.SourcePlant);
            if (APInvHed_SourcePlant_Foreign_LinkResults != null)
            {
                ttAPInvHed.SourcePlantName = APInvHed_SourcePlant_Foreign_LinkResults.SourcePlantName;
            }
            else
            {
                ttAPInvHed.SourcePlantName = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_TaxRateGrp_Foreign_LinkResults;
            APInvHed_TaxRateGrp_Foreign_LinkResults = FindFirst_APInvHed_TaxRateGrp_Foreign(ttAPInvHed.Company, ttAPInvHed.TaxRateGrpCode);
            if (APInvHed_TaxRateGrp_Foreign_LinkResults != null)
            {
                ttAPInvHed.TaxRateGrpDescription = APInvHed_TaxRateGrp_Foreign_LinkResults.TaxRateGrpDescription;
            }
            else
            {
                ttAPInvHed.TaxRateGrpDescription = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_TaxRegionCode_Foreign_LinkResults;
            APInvHed_TaxRegionCode_Foreign_LinkResults = FindFirst_APInvHed_TaxRegionCode_Foreign(ttAPInvHed.Company, ttAPInvHed.TaxRegionCode);
            if (APInvHed_TaxRegionCode_Foreign_LinkResults != null)
            {
                ttAPInvHed.TaxRegionCodeDescription = APInvHed_TaxRegionCode_Foreign_LinkResults.TaxRegionCodeDescription;
            }
            else
            {
                ttAPInvHed.TaxRegionCodeDescription = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_TermsCode_Foreign_LinkResults;
            APInvHed_TermsCode_Foreign_LinkResults = FindFirst_APInvHed_TermsCode_Foreign(ttAPInvHed.Company, ttAPInvHed.TermsCode);
            if (APInvHed_TermsCode_Foreign_LinkResults != null)
            {
                ttAPInvHed.TermsCodeDescription = APInvHed_TermsCode_Foreign_LinkResults.TermsCodeDescription;
                ttAPInvHed.TermsCodeTermsType = APInvHed_TermsCode_Foreign_LinkResults.TermsCodeTermsType;
            }
            else
            {
                ttAPInvHed.TermsCodeDescription = string.Empty;
                ttAPInvHed.TermsCodeTermsType = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_THRefVendorNum_Foreign_LinkResults;
            APInvHed_THRefVendorNum_Foreign_LinkResults = FindFirst_APInvHed_THRefVendorNum_Foreign(ttAPInvHed.Company, ttAPInvHed.THRefVendorNum);
            if (APInvHed_THRefVendorNum_Foreign_LinkResults != null)
            {
                ttAPInvHed.THRefVendorNumName = APInvHed_THRefVendorNum_Foreign_LinkResults.THRefVendorNumName;
                ttAPInvHed.THRefVendorNumVendorID = APInvHed_THRefVendorNum_Foreign_LinkResults.THRefVendorNumVendorID;
            }
            else
            {
                ttAPInvHed.THRefVendorNumName = string.Empty;
                ttAPInvHed.THRefVendorNumVendorID = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_VendBank_Foreign_LinkResults;
            APInvHed_VendBank_Foreign_LinkResults = FindFirst_APInvHed_VendBank_Foreign(ttAPInvHed.Company, ttAPInvHed.VendorNum, ttAPInvHed.BankID);
            if (APInvHed_VendBank_Foreign_LinkResults != null)
            {
                ttAPInvHed.VendBankPMUID = APInvHed_VendBank_Foreign_LinkResults.VendBankPMUID;
                ttAPInvHed.VendBankCardCode = APInvHed_VendBank_Foreign_LinkResults.VendBankCardCode;
                ttAPInvHed.VendBankBankAcctNumber = APInvHed_VendBank_Foreign_LinkResults.VendBankBankAcctNumber;
                ttAPInvHed.VendBankIBANCode = APInvHed_VendBank_Foreign_LinkResults.VendBankIBANCode;
                ttAPInvHed.VendBankBankGiroAcctNbr = APInvHed_VendBank_Foreign_LinkResults.VendBankBankGiroAcctNbr;
                ttAPInvHed.VendBankSwiftNum = APInvHed_VendBank_Foreign_LinkResults.VendBankSwiftNum;
                ttAPInvHed.VendBankLocalBIC = APInvHed_VendBank_Foreign_LinkResults.VendBankLocalBIC;
                ttAPInvHed.VendBankBankName = APInvHed_VendBank_Foreign_LinkResults.VendBankBankName;
            }
            else
            {
                ttAPInvHed.VendBankPMUID = 0;
                ttAPInvHed.VendBankCardCode = string.Empty;
                ttAPInvHed.VendBankBankAcctNumber = string.Empty;
                ttAPInvHed.VendBankIBANCode = string.Empty;
                ttAPInvHed.VendBankBankGiroAcctNbr = string.Empty;
                ttAPInvHed.VendBankSwiftNum = string.Empty;
                ttAPInvHed.VendBankLocalBIC = string.Empty;
                ttAPInvHed.VendBankBankName = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_VendorNum_Foreign_LinkResults;
            APInvHed_VendorNum_Foreign_LinkResults = FindFirst_APInvHed_VendorNum_Foreign(ttAPInvHed.Company, ttAPInvHed.VendorNum);
            if (APInvHed_VendorNum_Foreign_LinkResults != null)
            {
                ttAPInvHed.VendorNumCurrencyCode = APInvHed_VendorNum_Foreign_LinkResults.VendorNumCurrencyCode;
                ttAPInvHed.VendorNumZIP = APInvHed_VendorNum_Foreign_LinkResults.VendorNumZIP;
                ttAPInvHed.VendorNumAddress2 = APInvHed_VendorNum_Foreign_LinkResults.VendorNumAddress2;
                ttAPInvHed.VendorNumAddress3 = APInvHed_VendorNum_Foreign_LinkResults.VendorNumAddress3;
                ttAPInvHed.VendorNumCity = APInvHed_VendorNum_Foreign_LinkResults.VendorNumCity;
                ttAPInvHed.VendorNumAddress1 = APInvHed_VendorNum_Foreign_LinkResults.VendorNumAddress1;
                ttAPInvHed.VendorNumCountry = APInvHed_VendorNum_Foreign_LinkResults.VendorNumCountry;
                ttAPInvHed.VendorNumVendorID = APInvHed_VendorNum_Foreign_LinkResults.VendorNumVendorID;
                ttAPInvHed.VendorNumTermsCode = APInvHed_VendorNum_Foreign_LinkResults.VendorNumTermsCode;
                ttAPInvHed.VendorNumDefaultFOB = APInvHed_VendorNum_Foreign_LinkResults.VendorNumDefaultFOB;
                ttAPInvHed.VendorNumState = APInvHed_VendorNum_Foreign_LinkResults.VendorNumState;
                ttAPInvHed.VendorNumName = APInvHed_VendorNum_Foreign_LinkResults.VendorNumName;
            }
            else
            {
                ttAPInvHed.VendorNumCurrencyCode = string.Empty;
                ttAPInvHed.VendorNumZIP = string.Empty;
                ttAPInvHed.VendorNumAddress2 = string.Empty;
                ttAPInvHed.VendorNumAddress3 = string.Empty;
                ttAPInvHed.VendorNumCity = string.Empty;
                ttAPInvHed.VendorNumAddress1 = string.Empty;
                ttAPInvHed.VendorNumCountry = string.Empty;
                ttAPInvHed.VendorNumVendorID = string.Empty;
                ttAPInvHed.VendorNumTermsCode = string.Empty;
                ttAPInvHed.VendorNumDefaultFOB = string.Empty;
                ttAPInvHed.VendorNumState = string.Empty;
                ttAPInvHed.VendorNumName = string.Empty;
            }

            APInvHedForeignQueryResult APInvHed_XbSyst_Foreign_LinkResults;
            APInvHed_XbSyst_Foreign_LinkResults = FindFirst_APInvHed_XbSyst_Foreign(ttAPInvHed.Company);
            if (APInvHed_XbSyst_Foreign_LinkResults != null)
            {
                ttAPInvHed.XbSystAPTaxLnLevel = APInvHed_XbSyst_Foreign_LinkResults.XbSystAPTaxLnLevel;
                ttAPInvHed.XbSystIsDiscountforDebitM = APInvHed_XbSyst_Foreign_LinkResults.XbSystIsDiscountforDebitM;
            }
            else
            {
                ttAPInvHed.XbSystAPTaxLnLevel = false;
                ttAPInvHed.XbSystIsDiscountforDebitM = false;
            }
        }
        #endregion APInvHed_Foreign_Link
        #endregion Table APInvHed

        #region Table APInvHedAttch
        #region GetNewAPInvHedAttch
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvHedAttch(ref APInvoiceTableset ds, int vendorNum, string invoiceNum)
        {
            CurrentFullTableset = ds;

            ttAPInvHedAttch = (APInvHedAttchRow)InnerGetNew(
                ds.APInvHedAttch,
                (APInvHedAttchRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvHedAttch

        #region Events
        partial void APInvHedAttchAfterCreate();
        partial void APInvHedAttchAfterDelete();
        partial void APInvHedAttchAfterGetNew();
        partial void APInvHedAttchAfterGetRows();
        partial void APInvHedAttchAfterUpdate();
        partial void APInvHedAttchBeforeBI();
        partial void APInvHedAttchBeforeCreate();
        partial void APInvHedAttchBeforeDelete();
        partial void APInvHedAttchBeforeGetNew();
        partial void APInvHedAttchBeforeUpdate();
        partial void APInvHedAttchSetDefaults(APInvHedAttchRow row);
        #endregion Events

        #endregion Table APInvHedAttch

        #region Table APIHAPInvExp
        #region GetNewAPIHAPInvExp
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPIHAPInvExp(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            CurrentFullTableset = ds;

            ttAPIHAPInvExp = (APIHAPInvExpRow)InnerGetNew(
                ds.APIHAPInvExp,
                (APIHAPInvExpRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPIHAPInvExp

        #region Events
        partial void APIHAPInvExpAfterCreate();
        partial void APIHAPInvExpAfterDelete();
        partial void APIHAPInvExpAfterGetNew();
        partial void APIHAPInvExpAfterGetRows();
        partial void APIHAPInvExpAfterUpdate();
        partial void APIHAPInvExpBeforeBI();
        partial void APIHAPInvExpBeforeCreate();
        partial void APIHAPInvExpBeforeDelete();
        partial void APIHAPInvExpBeforeGetNew();
        partial void APIHAPInvExpBeforeUpdate();
        partial void APIHAPInvExpSetDefaults(APIHAPInvExpRow row);
        #endregion Events

        #endregion Table APIHAPInvExp

        #region Table APIHAPInvExpTGLC
        #region GetNewAPIHAPInvExpTGLC
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPIHAPInvExpTGLC(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, int invExpSeq)
        {
            CurrentFullTableset = ds;

            ttAPIHAPInvExpTGLC = (APIHAPInvExpTGLCRow)InnerGetNew(
                ds.APIHAPInvExpTGLC,
                (APIHAPInvExpTGLCRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;
                    row.InvExpSeq = invExpSeq;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPIHAPInvExpTGLC

        #region Events
        partial void APIHAPInvExpTGLCAfterCreate();
        partial void APIHAPInvExpTGLCAfterDelete();
        partial void APIHAPInvExpTGLCAfterGetNew();
        partial void APIHAPInvExpTGLCAfterGetRows();
        partial void APIHAPInvExpTGLCAfterUpdate();
        partial void APIHAPInvExpTGLCBeforeBI();
        partial void APIHAPInvExpTGLCBeforeCreate();
        partial void APIHAPInvExpTGLCBeforeDelete();
        partial void APIHAPInvExpTGLCBeforeGetNew();
        partial void APIHAPInvExpTGLCBeforeUpdate();
        partial void APIHAPInvExpTGLCSetDefaults(APIHAPInvExpTGLCRow row);
        #endregion Events

        #region APIHAPInvExpTGLC_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APIHAPInvExpTGLCForeignQueryResult
        {
            public string COADescription { get; set; }
            public string GLAccountAccountDesc { get; set; }
            public string GLAccountGLAcctDisp { get; set; }
            public string GLAccountGLShortAcct { get; set; }
            public string GLBookDescription { get; set; }
            public string GLBookCurrencyCode { get; set; }
        }

        private static Func<ErpContext, string, string, APIHAPInvExpTGLCForeignQueryResult> APIHAPInvExpTGLC_COA_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APIHAPInvExpTGLCForeignQueryResult FindFirst_APIHAPInvExpTGLC_COA_Foreign(string company, string coACode)
        {
            if (APIHAPInvExpTGLC_COA_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APIHAPInvExpTGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, coACode_ex) =>
                    (from row in dataContext.COA
                     where row.Company == company_ex
                     && row.COACode == coACode_ex
                     select new APIHAPInvExpTGLCForeignQueryResult()
                     {
                         COADescription = row.Description
                     }
                    ).FirstOrDefault();

                APIHAPInvExpTGLC_COA_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APIHAPInvExpTGLC_COA_Foreign_Query(this.Db, company, coACode);
        }

        private static Func<ErpContext, string, string, string, APIHAPInvExpTGLCForeignQueryResult> APIHAPInvExpTGLC_GLAccount_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APIHAPInvExpTGLCForeignQueryResult FindFirst_APIHAPInvExpTGLC_GLAccount_Foreign(string company, string coACode, string glAccount)
        {
            if (APIHAPInvExpTGLC_GLAccount_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, APIHAPInvExpTGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, coACode_ex, glAccount_ex) =>
                    (from row in dataContext.GLAcctDisp
                     where row.Company == company_ex
                     && row.COACode == coACode_ex
                     && row.GLAccount == glAccount_ex
                     select new APIHAPInvExpTGLCForeignQueryResult()
                     {
                         GLAccountAccountDesc = row.AccountDesc,
                         GLAccountGLAcctDisp = row.GLAcctDisp1,
                         GLAccountGLShortAcct = row.GLShortAcct
                     }
                    ).FirstOrDefault();

                APIHAPInvExpTGLC_GLAccount_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APIHAPInvExpTGLC_GLAccount_Foreign_Query(this.Db, company, coACode, glAccount);
        }

        private static Func<ErpContext, string, string, APIHAPInvExpTGLCForeignQueryResult> APIHAPInvExpTGLC_GLBook_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APIHAPInvExpTGLCForeignQueryResult FindFirst_APIHAPInvExpTGLC_GLBook_Foreign(string company, string bookID)
        {
            if (APIHAPInvExpTGLC_GLBook_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APIHAPInvExpTGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, bookID_ex) =>
                    (from row in dataContext.GLBook
                     where row.Company == company_ex
                     && row.BookID == bookID_ex
                     select new APIHAPInvExpTGLCForeignQueryResult()
                     {
                         GLBookDescription = row.Description,
                         GLBookCurrencyCode = row.CurrencyCode
                     }
                    ).FirstOrDefault();

                APIHAPInvExpTGLC_GLBook_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APIHAPInvExpTGLC_GLBook_Foreign_Query(this.Db, company, bookID);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APIHAPInvExpTGLC_Foreign_Link()
        {
            APIHAPInvExpTGLCForeignQueryResult APIHAPInvExpTGLC_COA_Foreign_LinkResults;
            APIHAPInvExpTGLC_COA_Foreign_LinkResults = FindFirst_APIHAPInvExpTGLC_COA_Foreign(ttAPIHAPInvExpTGLC.Company, ttAPIHAPInvExpTGLC.COACode);
            if (APIHAPInvExpTGLC_COA_Foreign_LinkResults != null)
            {
                ttAPIHAPInvExpTGLC.COADescription = APIHAPInvExpTGLC_COA_Foreign_LinkResults.COADescription;
            }
            else
            {
                ttAPIHAPInvExpTGLC.COADescription = string.Empty;
            }

            APIHAPInvExpTGLCForeignQueryResult APIHAPInvExpTGLC_GLAccount_Foreign_LinkResults;
            APIHAPInvExpTGLC_GLAccount_Foreign_LinkResults = FindFirst_APIHAPInvExpTGLC_GLAccount_Foreign(ttAPIHAPInvExpTGLC.Company, ttAPIHAPInvExpTGLC.COACode, ttAPIHAPInvExpTGLC.GLAccount);
            if (APIHAPInvExpTGLC_GLAccount_Foreign_LinkResults != null)
            {
                ttAPIHAPInvExpTGLC.GLAccountAccountDesc = APIHAPInvExpTGLC_GLAccount_Foreign_LinkResults.GLAccountAccountDesc;
                ttAPIHAPInvExpTGLC.GLAccountGLAcctDisp = APIHAPInvExpTGLC_GLAccount_Foreign_LinkResults.GLAccountGLAcctDisp;
                ttAPIHAPInvExpTGLC.GLAccountGLShortAcct = APIHAPInvExpTGLC_GLAccount_Foreign_LinkResults.GLAccountGLShortAcct;
            }
            else
            {
                ttAPIHAPInvExpTGLC.GLAccountAccountDesc = string.Empty;
                ttAPIHAPInvExpTGLC.GLAccountGLAcctDisp = string.Empty;
                ttAPIHAPInvExpTGLC.GLAccountGLShortAcct = string.Empty;
            }

            APIHAPInvExpTGLCForeignQueryResult APIHAPInvExpTGLC_GLBook_Foreign_LinkResults;
            APIHAPInvExpTGLC_GLBook_Foreign_LinkResults = FindFirst_APIHAPInvExpTGLC_GLBook_Foreign(ttAPIHAPInvExpTGLC.Company, ttAPIHAPInvExpTGLC.BookID);
            if (APIHAPInvExpTGLC_GLBook_Foreign_LinkResults != null)
            {
                ttAPIHAPInvExpTGLC.GLBookDescription = APIHAPInvExpTGLC_GLBook_Foreign_LinkResults.GLBookDescription;
                ttAPIHAPInvExpTGLC.GLBookCurrencyCode = APIHAPInvExpTGLC_GLBook_Foreign_LinkResults.GLBookCurrencyCode;
            }
            else
            {
                ttAPIHAPInvExpTGLC.GLBookDescription = string.Empty;
                ttAPIHAPInvExpTGLC.GLBookCurrencyCode = string.Empty;
            }
        }
        #endregion APIHAPInvExpTGLC_Foreign_Link
        #endregion Table APIHAPInvExpTGLC

        #region Table APIHAPInvMsc
        #region GetNewAPIHAPInvMsc
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPIHAPInvMsc(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            CurrentFullTableset = ds;

            ttAPIHAPInvMsc = (APIHAPInvMscRow)InnerGetNew(
                ds.APIHAPInvMsc,
                (APIHAPInvMscRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPIHAPInvMsc

        #region Events
        partial void APIHAPInvMscAfterCreate();
        partial void APIHAPInvMscAfterDelete();
        partial void APIHAPInvMscAfterGetNew();
        partial void APIHAPInvMscAfterGetRows();
        partial void APIHAPInvMscAfterUpdate();
        partial void APIHAPInvMscBeforeBI();
        partial void APIHAPInvMscBeforeCreate();
        partial void APIHAPInvMscBeforeDelete();
        partial void APIHAPInvMscBeforeGetNew();
        partial void APIHAPInvMscBeforeUpdate();
        partial void APIHAPInvMscSetDefaults(APIHAPInvMscRow row);
        #endregion Events

        #region APIHAPInvMsc_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APIHAPInvMscForeignQueryResult
        {
            public string Code1099Description { get; set; }
            public string FormTypeDescription { get; set; }
            public string MiscCodeDescription { get; set; }
            public string MiscCodeLCDisburseMethod { get; set; }
            public decimal MiscCodeLCAmount { get; set; }
            public string MiscCodeLCCurrencyCode { get; set; }
        }

        private static Func<ErpContext, string, string, string, APIHAPInvMscForeignQueryResult> APIHAPInvMsc_Code1099_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APIHAPInvMscForeignQueryResult FindFirst_APIHAPInvMsc_Code1099_Foreign(string company, string formTypeID, string code1099ID)
        {
            if (APIHAPInvMsc_Code1099_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, APIHAPInvMscForeignQueryResult>> expression =
                    (dataContext, company_ex, formTypeID_ex, code1099ID_ex) =>
                    (from row in dataContext.Code1099
                     where row.Company == company_ex
                     && row.FormTypeID == formTypeID_ex
                     && row.Code1099ID == code1099ID_ex
                     select new APIHAPInvMscForeignQueryResult()
                     {
                         Code1099Description = row.Description
                     }
                    ).FirstOrDefault();

                APIHAPInvMsc_Code1099_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APIHAPInvMsc_Code1099_Foreign_Query(this.Db, company, formTypeID, code1099ID);
        }

        private static Func<ErpContext, string, string, APIHAPInvMscForeignQueryResult> APIHAPInvMsc_FormType_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APIHAPInvMscForeignQueryResult FindFirst_APIHAPInvMsc_FormType_Foreign(string company, string formTypeID)
        {
            if (APIHAPInvMsc_FormType_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APIHAPInvMscForeignQueryResult>> expression =
                    (dataContext, company_ex, formTypeID_ex) =>
                    (from row in dataContext.FormType
                     where row.Company == company_ex
                     && row.FormTypeID == formTypeID_ex
                     select new APIHAPInvMscForeignQueryResult()
                     {
                         FormTypeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APIHAPInvMsc_FormType_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APIHAPInvMsc_FormType_Foreign_Query(this.Db, company, formTypeID);
        }

        private static Func<ErpContext, string, string, APIHAPInvMscForeignQueryResult> APIHAPInvMsc_MiscCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APIHAPInvMscForeignQueryResult FindFirst_APIHAPInvMsc_MiscCode_Foreign(string company, string miscCode)
        {
            if (APIHAPInvMsc_MiscCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APIHAPInvMscForeignQueryResult>> expression =
                    (dataContext, company_ex, miscCode_ex) =>
                    (from row in dataContext.PurMisc
                     where row.Company == company_ex
                     && row.MiscCode == miscCode_ex
                     select new APIHAPInvMscForeignQueryResult()
                     {
                         MiscCodeDescription = row.Description,
                         MiscCodeLCDisburseMethod = row.LCDisburseMethod,
                         MiscCodeLCAmount = row.LCAmount,
                         MiscCodeLCCurrencyCode = row.LCCurrencyCode
                     }
                    ).FirstOrDefault();

                APIHAPInvMsc_MiscCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APIHAPInvMsc_MiscCode_Foreign_Query(this.Db, company, miscCode);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APIHAPInvMsc_Foreign_Link()
        {
            APIHAPInvMscForeignQueryResult APIHAPInvMsc_Code1099_Foreign_LinkResults;
            APIHAPInvMsc_Code1099_Foreign_LinkResults = FindFirst_APIHAPInvMsc_Code1099_Foreign(ttAPIHAPInvMsc.Company, ttAPIHAPInvMsc.FormTypeID, ttAPIHAPInvMsc.Code1099ID);
            if (APIHAPInvMsc_Code1099_Foreign_LinkResults != null)
            {
                ttAPIHAPInvMsc.Code1099Description = APIHAPInvMsc_Code1099_Foreign_LinkResults.Code1099Description;
            }
            else
            {
                ttAPIHAPInvMsc.Code1099Description = string.Empty;
            }

            APIHAPInvMscForeignQueryResult APIHAPInvMsc_FormType_Foreign_LinkResults;
            APIHAPInvMsc_FormType_Foreign_LinkResults = FindFirst_APIHAPInvMsc_FormType_Foreign(ttAPIHAPInvMsc.Company, ttAPIHAPInvMsc.FormTypeID);
            if (APIHAPInvMsc_FormType_Foreign_LinkResults != null)
            {
                ttAPIHAPInvMsc.FormTypeDescription = APIHAPInvMsc_FormType_Foreign_LinkResults.FormTypeDescription;
            }
            else
            {
                ttAPIHAPInvMsc.FormTypeDescription = string.Empty;
            }

            APIHAPInvMscForeignQueryResult APIHAPInvMsc_MiscCode_Foreign_LinkResults;
            APIHAPInvMsc_MiscCode_Foreign_LinkResults = FindFirst_APIHAPInvMsc_MiscCode_Foreign(ttAPIHAPInvMsc.Company, ttAPIHAPInvMsc.MiscCode);
            if (APIHAPInvMsc_MiscCode_Foreign_LinkResults != null)
            {
                ttAPIHAPInvMsc.MiscCodeDescription = APIHAPInvMsc_MiscCode_Foreign_LinkResults.MiscCodeDescription;
                ttAPIHAPInvMsc.MiscCodeLCDisburseMethod = APIHAPInvMsc_MiscCode_Foreign_LinkResults.MiscCodeLCDisburseMethod;
                ttAPIHAPInvMsc.MiscCodeLCAmount = APIHAPInvMsc_MiscCode_Foreign_LinkResults.MiscCodeLCAmount;
                ttAPIHAPInvMsc.MiscCodeLCCurrencyCode = APIHAPInvMsc_MiscCode_Foreign_LinkResults.MiscCodeLCCurrencyCode;
            }
            else
            {
                ttAPIHAPInvMsc.MiscCodeDescription = string.Empty;
                ttAPIHAPInvMsc.MiscCodeLCDisburseMethod = string.Empty;
                ttAPIHAPInvMsc.MiscCodeLCAmount = 0m;
                ttAPIHAPInvMsc.MiscCodeLCCurrencyCode = string.Empty;
            }
        }
        #endregion APIHAPInvMsc_Foreign_Link
        #endregion Table APIHAPInvMsc

        #region Table RcvMisc
        #region GetNewRcvMisc
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewRcvMisc(ref APInvoiceTableset ds, int vendorNum, string purPoint, string packSlip)
        {
            CurrentFullTableset = ds;

            ttRcvMisc = (RcvMiscRow)InnerGetNew(
                ds.RcvMisc,
                (RcvMiscRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.PurPoint = purPoint;
                    row.PackSlip = packSlip;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewRcvMisc

        #region Events
        partial void RcvMiscAfterCreate();
        partial void RcvMiscAfterDelete();
        partial void RcvMiscAfterGetNew();
        partial void RcvMiscAfterGetRows();
        partial void RcvMiscAfterUpdate();
        partial void RcvMiscBeforeBI();
        partial void RcvMiscBeforeCreate();
        partial void RcvMiscBeforeDelete();
        partial void RcvMiscBeforeGetNew();
        partial void RcvMiscBeforeUpdate();
        partial void RcvMiscSetDefaults(RcvMiscRow row);
        #endregion Events

        #region RcvMisc_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class RcvMiscForeignQueryResult
        {
            public string APInvVendorName { get; set; }
            public string APInvVendorVendorID { get; set; }
            public string CurrencyCurrSymbol { get; set; }
            public string CurrencyCurrencyID { get; set; }
            public string CurrencyDocumentDesc { get; set; }
            public string CurrencyCurrDesc { get; set; }
            public string CurrencyCurrName { get; set; }
            public string PurMiscLCDisburseMethod { get; set; }
            public string PurMiscLCCurrencyCode { get; set; }
            public string PurMiscDescription { get; set; }
            public decimal PurMiscLCAmount { get; set; }
            public string RateGrpDescription { get; set; }
            public DateTime? RcvHeadReceiptDate { get; set; }
            public bool RcvHeadInPrice { get; set; }
            public string TaxCatIDDescription { get; set; }
            public string VendorName { get; set; }
            public string VendorVendorID { get; set; }
        }

        private static Func<ErpContext, string, int, RcvMiscForeignQueryResult> RcvMisc_APInvVendor_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private RcvMiscForeignQueryResult FindFirst_RcvMisc_APInvVendor_Foreign(string company, int apInvVendorNum)
        {
            if (RcvMisc_APInvVendor_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, RcvMiscForeignQueryResult>> expression =
                    (dataContext, company_ex, apInvVendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == apInvVendorNum_ex
                     select new RcvMiscForeignQueryResult()
                     {
                         APInvVendorName = row.Name,
                         APInvVendorVendorID = row.VendorID
                     }
                    ).FirstOrDefault();

                RcvMisc_APInvVendor_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return RcvMisc_APInvVendor_Foreign_Query(this.Db, company, apInvVendorNum);
        }

        private static Func<ErpContext, string, string, RcvMiscForeignQueryResult> RcvMisc_Currency_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private RcvMiscForeignQueryResult FindFirst_RcvMisc_Currency_Foreign(string company, string currencyCode)
        {
            if (RcvMisc_Currency_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, RcvMiscForeignQueryResult>> expression =
                    (dataContext, company_ex, currencyCode_ex) =>
                    (from row in dataContext.Currency
                     where row.Company == company_ex
                     && row.CurrencyCode == currencyCode_ex
                     select new RcvMiscForeignQueryResult()
                     {
                         CurrencyCurrSymbol = row.CurrSymbol,
                         CurrencyCurrencyID = row.CurrencyID,
                         CurrencyDocumentDesc = row.DocumentDesc,
                         CurrencyCurrDesc = row.CurrDesc,
                         CurrencyCurrName = row.CurrName
                     }
                    ).FirstOrDefault();

                RcvMisc_Currency_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return RcvMisc_Currency_Foreign_Query(this.Db, company, currencyCode);
        }

        private static Func<ErpContext, string, string, RcvMiscForeignQueryResult> RcvMisc_PurMisc_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private RcvMiscForeignQueryResult FindFirst_RcvMisc_PurMisc_Foreign(string company, string miscCode)
        {
            if (RcvMisc_PurMisc_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, RcvMiscForeignQueryResult>> expression =
                    (dataContext, company_ex, miscCode_ex) =>
                    (from row in dataContext.PurMisc
                     where row.Company == company_ex
                     && row.MiscCode == miscCode_ex
                     select new RcvMiscForeignQueryResult()
                     {
                         PurMiscLCDisburseMethod = row.LCDisburseMethod,
                         PurMiscLCCurrencyCode = row.LCCurrencyCode,
                         PurMiscDescription = row.Description,
                         PurMiscLCAmount = row.LCAmount
                     }
                    ).FirstOrDefault();

                RcvMisc_PurMisc_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return RcvMisc_PurMisc_Foreign_Query(this.Db, company, miscCode);
        }

        private static Func<ErpContext, string, string, RcvMiscForeignQueryResult> RcvMisc_RateGrp_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private RcvMiscForeignQueryResult FindFirst_RcvMisc_RateGrp_Foreign(string company, string rateGrpCode)
        {
            if (RcvMisc_RateGrp_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, RcvMiscForeignQueryResult>> expression =
                    (dataContext, company_ex, rateGrpCode_ex) =>
                    (from row in dataContext.CurrRateGrp
                     where row.Company == company_ex
                     && row.RateGrpCode == rateGrpCode_ex
                     select new RcvMiscForeignQueryResult()
                     {
                         RateGrpDescription = row.Description
                     }
                    ).FirstOrDefault();

                RcvMisc_RateGrp_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return RcvMisc_RateGrp_Foreign_Query(this.Db, company, rateGrpCode);
        }

        private static Func<ErpContext, string, int, string, string, RcvMiscForeignQueryResult> RcvMisc_RcvHead_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private RcvMiscForeignQueryResult FindFirst_RcvMisc_RcvHead_Foreign(string company, int vendorNum, string purPoint, string packSlip)
        {
            if (RcvMisc_RcvHead_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, string, RcvMiscForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, purPoint_ex, packSlip_ex) =>
                    (from row in dataContext.RcvHead
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.PurPoint == purPoint_ex
                     && row.PackSlip == packSlip_ex
                     select new RcvMiscForeignQueryResult()
                     {
                         RcvHeadReceiptDate = row.ReceiptDate,
                         RcvHeadInPrice = row.InPrice
                     }
                    ).FirstOrDefault();

                RcvMisc_RcvHead_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return RcvMisc_RcvHead_Foreign_Query(this.Db, company, vendorNum, purPoint, packSlip);
        }

        private static Func<ErpContext, string, string, RcvMiscForeignQueryResult> RcvMisc_TaxCatID_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private RcvMiscForeignQueryResult FindFirst_RcvMisc_TaxCatID_Foreign(string company, string taxCatID)
        {
            if (RcvMisc_TaxCatID_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, RcvMiscForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCatID_ex) =>
                    (from row in dataContext.TaxCat
                     where row.Company == company_ex
                     && row.TaxCatID == taxCatID_ex
                     select new RcvMiscForeignQueryResult()
                     {
                         TaxCatIDDescription = row.Description
                     }
                    ).FirstOrDefault();

                RcvMisc_TaxCatID_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return RcvMisc_TaxCatID_Foreign_Query(this.Db, company, taxCatID);
        }

        private static Func<ErpContext, string, int, RcvMiscForeignQueryResult> RcvMisc_Vendor_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private RcvMiscForeignQueryResult FindFirst_RcvMisc_Vendor_Foreign(string company, int vendorNum)
        {
            if (RcvMisc_Vendor_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, RcvMiscForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     select new RcvMiscForeignQueryResult()
                     {
                         VendorName = row.Name,
                         VendorVendorID = row.VendorID
                     }
                    ).FirstOrDefault();

                RcvMisc_Vendor_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return RcvMisc_Vendor_Foreign_Query(this.Db, company, vendorNum);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void RcvMisc_Foreign_Link()
        {
            RcvMiscForeignQueryResult RcvMisc_APInvVendor_Foreign_LinkResults;
            RcvMisc_APInvVendor_Foreign_LinkResults = FindFirst_RcvMisc_APInvVendor_Foreign(ttRcvMisc.Company, ttRcvMisc.APInvVendorNum);
            if (RcvMisc_APInvVendor_Foreign_LinkResults != null)
            {
                ttRcvMisc.APInvVendorName = RcvMisc_APInvVendor_Foreign_LinkResults.APInvVendorName;
                ttRcvMisc.APInvVendorVendorID = RcvMisc_APInvVendor_Foreign_LinkResults.APInvVendorVendorID;
            }
            else
            {
                ttRcvMisc.APInvVendorName = string.Empty;
                ttRcvMisc.APInvVendorVendorID = string.Empty;
            }

            RcvMiscForeignQueryResult RcvMisc_Currency_Foreign_LinkResults;
            RcvMisc_Currency_Foreign_LinkResults = FindFirst_RcvMisc_Currency_Foreign(ttRcvMisc.Company, ttRcvMisc.CurrencyCode);
            if (RcvMisc_Currency_Foreign_LinkResults != null)
            {
                ttRcvMisc.CurrencyCurrSymbol = RcvMisc_Currency_Foreign_LinkResults.CurrencyCurrSymbol;
                ttRcvMisc.CurrencyCurrencyID = RcvMisc_Currency_Foreign_LinkResults.CurrencyCurrencyID;
                ttRcvMisc.CurrencyDocumentDesc = RcvMisc_Currency_Foreign_LinkResults.CurrencyDocumentDesc;
                ttRcvMisc.CurrencyCurrDesc = RcvMisc_Currency_Foreign_LinkResults.CurrencyCurrDesc;
                ttRcvMisc.CurrencyCurrName = RcvMisc_Currency_Foreign_LinkResults.CurrencyCurrName;
            }
            else
            {
                ttRcvMisc.CurrencyCurrSymbol = string.Empty;
                ttRcvMisc.CurrencyCurrencyID = string.Empty;
                ttRcvMisc.CurrencyDocumentDesc = string.Empty;
                ttRcvMisc.CurrencyCurrDesc = string.Empty;
                ttRcvMisc.CurrencyCurrName = string.Empty;
            }

            RcvMiscForeignQueryResult RcvMisc_PurMisc_Foreign_LinkResults;
            RcvMisc_PurMisc_Foreign_LinkResults = FindFirst_RcvMisc_PurMisc_Foreign(ttRcvMisc.Company, ttRcvMisc.MiscCode);
            if (RcvMisc_PurMisc_Foreign_LinkResults != null)
            {
                ttRcvMisc.PurMiscLCDisburseMethod = RcvMisc_PurMisc_Foreign_LinkResults.PurMiscLCDisburseMethod;
                ttRcvMisc.PurMiscLCCurrencyCode = RcvMisc_PurMisc_Foreign_LinkResults.PurMiscLCCurrencyCode;
                ttRcvMisc.PurMiscDescription = RcvMisc_PurMisc_Foreign_LinkResults.PurMiscDescription;
                ttRcvMisc.PurMiscLCAmount = RcvMisc_PurMisc_Foreign_LinkResults.PurMiscLCAmount;
            }
            else
            {
                ttRcvMisc.PurMiscLCDisburseMethod = string.Empty;
                ttRcvMisc.PurMiscLCCurrencyCode = string.Empty;
                ttRcvMisc.PurMiscDescription = string.Empty;
                ttRcvMisc.PurMiscLCAmount = 0m;
            }

            RcvMiscForeignQueryResult RcvMisc_RateGrp_Foreign_LinkResults;
            RcvMisc_RateGrp_Foreign_LinkResults = FindFirst_RcvMisc_RateGrp_Foreign(ttRcvMisc.Company, ttRcvMisc.RateGrpCode);
            if (RcvMisc_RateGrp_Foreign_LinkResults != null)
            {
                ttRcvMisc.RateGrpDescription = RcvMisc_RateGrp_Foreign_LinkResults.RateGrpDescription;
            }
            else
            {
                ttRcvMisc.RateGrpDescription = string.Empty;
            }

            RcvMiscForeignQueryResult RcvMisc_RcvHead_Foreign_LinkResults;
            RcvMisc_RcvHead_Foreign_LinkResults = FindFirst_RcvMisc_RcvHead_Foreign(ttRcvMisc.Company, ttRcvMisc.VendorNum, ttRcvMisc.PurPoint, ttRcvMisc.PackSlip);
            if (RcvMisc_RcvHead_Foreign_LinkResults != null)
            {
                ttRcvMisc.RcvHeadReceiptDate = RcvMisc_RcvHead_Foreign_LinkResults.RcvHeadReceiptDate;
                ttRcvMisc.RcvHeadInPrice = RcvMisc_RcvHead_Foreign_LinkResults.RcvHeadInPrice;
            }
            else
            {
                ttRcvMisc.RcvHeadReceiptDate = null;
                ttRcvMisc.RcvHeadInPrice = false;
            }

            RcvMiscForeignQueryResult RcvMisc_TaxCatID_Foreign_LinkResults;
            RcvMisc_TaxCatID_Foreign_LinkResults = FindFirst_RcvMisc_TaxCatID_Foreign(ttRcvMisc.Company, ttRcvMisc.TaxCatID);
            if (RcvMisc_TaxCatID_Foreign_LinkResults != null)
            {
                ttRcvMisc.TaxCatIDDescription = RcvMisc_TaxCatID_Foreign_LinkResults.TaxCatIDDescription;
            }
            else
            {
                ttRcvMisc.TaxCatIDDescription = string.Empty;
            }

            RcvMiscForeignQueryResult RcvMisc_Vendor_Foreign_LinkResults;
            RcvMisc_Vendor_Foreign_LinkResults = FindFirst_RcvMisc_Vendor_Foreign(ttRcvMisc.Company, ttRcvMisc.VendorNum);
            if (RcvMisc_Vendor_Foreign_LinkResults != null)
            {
                ttRcvMisc.VendorName = RcvMisc_Vendor_Foreign_LinkResults.VendorName;
                ttRcvMisc.VendorVendorID = RcvMisc_Vendor_Foreign_LinkResults.VendorVendorID;
            }
            else
            {
                ttRcvMisc.VendorName = string.Empty;
                ttRcvMisc.VendorVendorID = string.Empty;
            }
        }
        #endregion RcvMisc_Foreign_Link
        #endregion Table RcvMisc

        #region Table APIHAPLnTax
        #region GetNewAPIHAPLnTax
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPIHAPLnTax(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, string taxCode, string rateCode)
        {
            CurrentFullTableset = ds;

            ttAPIHAPLnTax = (APIHAPLnTaxRow)InnerGetNew(
                ds.APIHAPLnTax,
                (APIHAPLnTaxRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;
                    row.TaxCode = taxCode;
                    row.RateCode = rateCode;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPIHAPLnTax

        #region Events
        partial void APIHAPLnTaxAfterCreate();
        partial void APIHAPLnTaxAfterDelete();
        partial void APIHAPLnTaxAfterGetNew();
        partial void APIHAPLnTaxAfterGetRows();
        partial void APIHAPLnTaxAfterUpdate();
        partial void APIHAPLnTaxBeforeBI();
        partial void APIHAPLnTaxBeforeCreate();
        partial void APIHAPLnTaxBeforeDelete();
        partial void APIHAPLnTaxBeforeGetNew();
        partial void APIHAPLnTaxBeforeUpdate();
        partial void APIHAPLnTaxSetDefaults(APIHAPLnTaxRow row);
        #endregion Events

        #region APIHAPLnTax_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APIHAPLnTaxForeignQueryResult
        {
            public string InvoiceNumDescription { get; set; }
            public string RateCodeDescription { get; set; }
            public string TaxCodeDescription { get; set; }
            public string VendorNumAddress1 { get; set; }
            public string VendorNumTermsCode { get; set; }
            public string VendorNumAddress2 { get; set; }
            public string VendorNumVendorID { get; set; }
            public string VendorNumZIP { get; set; }
            public string VendorNumAddress3 { get; set; }
            public string VendorNumCity { get; set; }
            public string VendorNumCountry { get; set; }
            public string VendorNumCurrencyCode { get; set; }
            public string VendorNumDefaultFOB { get; set; }
            public string VendorNumName { get; set; }
            public string VendorNumState { get; set; }
        }

        private static Func<ErpContext, string, int, string, APIHAPLnTaxForeignQueryResult> APIHAPLnTax_InvoiceNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APIHAPLnTaxForeignQueryResult FindFirst_APIHAPLnTax_InvoiceNum_Foreign(string company, int vendorNum, string invoiceNum)
        {
            if (APIHAPLnTax_InvoiceNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, APIHAPLnTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, invoiceNum_ex) =>
                    (from row in dataContext.APInvHed
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.InvoiceNum == invoiceNum_ex
                     select new APIHAPLnTaxForeignQueryResult()
                     {
                         InvoiceNumDescription = row.Description
                     }
                    ).FirstOrDefault();

                APIHAPLnTax_InvoiceNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APIHAPLnTax_InvoiceNum_Foreign_Query(this.Db, company, vendorNum, invoiceNum);
        }

        private static Func<ErpContext, string, string, string, APIHAPLnTaxForeignQueryResult> APIHAPLnTax_RateCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APIHAPLnTaxForeignQueryResult FindFirst_APIHAPLnTax_RateCode_Foreign(string company, string taxCode, string rateCode)
        {
            if (APIHAPLnTax_RateCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, APIHAPLnTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCode_ex, rateCode_ex) =>
                    (from row in dataContext.SalesTRC
                     where row.Company == company_ex
                     && row.TaxCode == taxCode_ex
                     && row.RateCode == rateCode_ex
                     select new APIHAPLnTaxForeignQueryResult()
                     {
                         RateCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APIHAPLnTax_RateCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APIHAPLnTax_RateCode_Foreign_Query(this.Db, company, taxCode, rateCode);
        }

        private static Func<ErpContext, string, string, APIHAPLnTaxForeignQueryResult> APIHAPLnTax_TaxCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APIHAPLnTaxForeignQueryResult FindFirst_APIHAPLnTax_TaxCode_Foreign(string company, string taxCode)
        {
            if (APIHAPLnTax_TaxCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APIHAPLnTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCode_ex) =>
                    (from row in dataContext.SalesTax
                     where row.Company == company_ex
                     && row.TaxCode == taxCode_ex
                     select new APIHAPLnTaxForeignQueryResult()
                     {
                         TaxCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APIHAPLnTax_TaxCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APIHAPLnTax_TaxCode_Foreign_Query(this.Db, company, taxCode);
        }

        private static Func<ErpContext, string, int, APIHAPLnTaxForeignQueryResult> APIHAPLnTax_VendorNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APIHAPLnTaxForeignQueryResult FindFirst_APIHAPLnTax_VendorNum_Foreign(string company, int vendorNum)
        {
            if (APIHAPLnTax_VendorNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APIHAPLnTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     select new APIHAPLnTaxForeignQueryResult()
                     {
                         VendorNumAddress1 = row.Address1,
                         VendorNumTermsCode = row.TermsCode,
                         VendorNumAddress2 = row.Address2,
                         VendorNumVendorID = row.VendorID,
                         VendorNumZIP = row.ZIP,
                         VendorNumAddress3 = row.Address3,
                         VendorNumCity = row.City,
                         VendorNumCountry = row.Country,
                         VendorNumCurrencyCode = row.CurrencyCode,
                         VendorNumDefaultFOB = row.DefaultFOB,
                         VendorNumName = row.Name,
                         VendorNumState = row.State
                     }
                    ).FirstOrDefault();

                APIHAPLnTax_VendorNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APIHAPLnTax_VendorNum_Foreign_Query(this.Db, company, vendorNum);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APIHAPLnTax_Foreign_Link()
        {
            APIHAPLnTaxForeignQueryResult APIHAPLnTax_InvoiceNum_Foreign_LinkResults;
            APIHAPLnTax_InvoiceNum_Foreign_LinkResults = FindFirst_APIHAPLnTax_InvoiceNum_Foreign(ttAPIHAPLnTax.Company, ttAPIHAPLnTax.VendorNum, ttAPIHAPLnTax.InvoiceNum);
            if (APIHAPLnTax_InvoiceNum_Foreign_LinkResults != null)
            {
                ttAPIHAPLnTax.InvoiceNumDescription = APIHAPLnTax_InvoiceNum_Foreign_LinkResults.InvoiceNumDescription;
            }
            else
            {
                ttAPIHAPLnTax.InvoiceNumDescription = string.Empty;
            }

            APIHAPLnTaxForeignQueryResult APIHAPLnTax_RateCode_Foreign_LinkResults;
            APIHAPLnTax_RateCode_Foreign_LinkResults = FindFirst_APIHAPLnTax_RateCode_Foreign(ttAPIHAPLnTax.Company, ttAPIHAPLnTax.TaxCode, ttAPIHAPLnTax.RateCode);
            if (APIHAPLnTax_RateCode_Foreign_LinkResults != null)
            {
                ttAPIHAPLnTax.RateCodeDescription = APIHAPLnTax_RateCode_Foreign_LinkResults.RateCodeDescription;
            }
            else
            {
                ttAPIHAPLnTax.RateCodeDescription = string.Empty;
            }

            APIHAPLnTaxForeignQueryResult APIHAPLnTax_TaxCode_Foreign_LinkResults;
            APIHAPLnTax_TaxCode_Foreign_LinkResults = FindFirst_APIHAPLnTax_TaxCode_Foreign(ttAPIHAPLnTax.Company, ttAPIHAPLnTax.TaxCode);
            if (APIHAPLnTax_TaxCode_Foreign_LinkResults != null)
            {
                ttAPIHAPLnTax.TaxCodeDescription = APIHAPLnTax_TaxCode_Foreign_LinkResults.TaxCodeDescription;
            }
            else
            {
                ttAPIHAPLnTax.TaxCodeDescription = string.Empty;
            }

            APIHAPLnTaxForeignQueryResult APIHAPLnTax_VendorNum_Foreign_LinkResults;
            APIHAPLnTax_VendorNum_Foreign_LinkResults = FindFirst_APIHAPLnTax_VendorNum_Foreign(ttAPIHAPLnTax.Company, ttAPIHAPLnTax.VendorNum);
            if (APIHAPLnTax_VendorNum_Foreign_LinkResults != null)
            {
                ttAPIHAPLnTax.VendorNumAddress1 = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumAddress1;
                ttAPIHAPLnTax.VendorNumTermsCode = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumTermsCode;
                ttAPIHAPLnTax.VendorNumAddress2 = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumAddress2;
                ttAPIHAPLnTax.VendorNumVendorID = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumVendorID;
                ttAPIHAPLnTax.VendorNumZIP = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumZIP;
                ttAPIHAPLnTax.VendorNumAddress3 = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumAddress3;
                ttAPIHAPLnTax.VendorNumCity = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumCity;
                ttAPIHAPLnTax.VendorNumCountry = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumCountry;
                ttAPIHAPLnTax.VendorNumCurrencyCode = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumCurrencyCode;
                ttAPIHAPLnTax.VendorNumDefaultFOB = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumDefaultFOB;
                ttAPIHAPLnTax.VendorNumName = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumName;
                ttAPIHAPLnTax.VendorNumState = APIHAPLnTax_VendorNum_Foreign_LinkResults.VendorNumState;
            }
            else
            {
                ttAPIHAPLnTax.VendorNumAddress1 = string.Empty;
                ttAPIHAPLnTax.VendorNumTermsCode = string.Empty;
                ttAPIHAPLnTax.VendorNumAddress2 = string.Empty;
                ttAPIHAPLnTax.VendorNumVendorID = string.Empty;
                ttAPIHAPLnTax.VendorNumZIP = string.Empty;
                ttAPIHAPLnTax.VendorNumAddress3 = string.Empty;
                ttAPIHAPLnTax.VendorNumCity = string.Empty;
                ttAPIHAPLnTax.VendorNumCountry = string.Empty;
                ttAPIHAPLnTax.VendorNumCurrencyCode = string.Empty;
                ttAPIHAPLnTax.VendorNumDefaultFOB = string.Empty;
                ttAPIHAPLnTax.VendorNumName = string.Empty;
                ttAPIHAPLnTax.VendorNumState = string.Empty;
            }
        }
        #endregion APIHAPLnTax_Foreign_Link
        #endregion Table APIHAPLnTax

        #region Table APInvDtl
        #region GetNewAPInvDtl
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvDtl(ref APInvoiceTableset ds, int vendorNum, string invoiceNum)
        {
            CurrentFullTableset = ds;

            ttAPInvDtl = (APInvDtlRow)InnerGetNew(
                ds.APInvDtl,
                (APInvDtlRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvDtl

        #region Events
        partial void APInvDtlAfterCreate();
        partial void APInvDtlAfterDelete();
        partial void APInvDtlAfterGetNew();
        partial void APInvDtlAfterGetRows();
        partial void APInvDtlAfterUpdate();
        partial void APInvDtlBeforeBI();
        partial void APInvDtlBeforeCreate();
        partial void APInvDtlBeforeDelete();
        partial void APInvDtlBeforeGetNew();
        partial void APInvDtlBeforeUpdate();
        partial void APInvDtlSetDefaults(APInvDtlRow row);
        #endregion Events

        #region APInvDtl_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APInvDtlForeignQueryResult
        {
            public string AssemblySeqDescription { get; set; }
            public string AssetNumAssetDescription { get; set; }
            public string Code1099Description { get; set; }
            public string CommodityCodeDescription { get; set; }
            public string ContainerIDContainerDescription { get; set; }
            public string FormTypeDescription { get; set; }
            public string GLPurchPurchDesc { get; set; }
            public bool InvoiceNumDebitMemo { get; set; }
            public bool InvoiceNumPosted { get; set; }
            public string InvoiceNumDescription { get; set; }
            public string InvoiceNumCurrencyCode { get; set; }
            public string JobNumPartDescription { get; set; }
            public bool PartNumTrackInventoryAttributes { get; set; }
            public bool PartNumTrackSerialNum { get; set; }
            public bool PartNumTrackLots { get; set; }
            public string PartNumPricePerCode { get; set; }
            public string PartNumIUM { get; set; }
            public decimal PartNumSellingFactor { get; set; }
            public bool PartNumTrackDimension { get; set; }
            public string PartNumPartDescription { get; set; }
            public string PartNumSalesUM { get; set; }
            public string PartNumAttrClassID { get; set; }
            public string POLineLineDesc { get; set; }
            public string POLineVenPartNum { get; set; }
            public string POLinePartNum { get; set; }
            public string TaxCatIDDescription { get; set; }
            public string VendorNumName { get; set; }
            public string VendorNumAddress2 { get; set; }
            public string VendorNumCountry { get; set; }
            public string VendorNumCity { get; set; }
            public string VendorNumDefaultFOB { get; set; }
            public string VendorNumCurrencyCode { get; set; }
            public string VendorNumState { get; set; }
            public string VendorNumTermsCode { get; set; }
            public string VendorNumVendorID { get; set; }
            public string VendorNumAddress3 { get; set; }
            public string VendorNumZIP { get; set; }
            public string VendorNumAddress1 { get; set; }
            public string VendorPPName { get; set; }
            public string vrPONumShipToConName { get; set; }
            public string vrPONumShipName { get; set; }
        }

        private static Func<ErpContext, string, string, int, APInvDtlForeignQueryResult> APInvDtl_AssemblySeq_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_AssemblySeq_Foreign(string company, string jobNum, int assemblySeq)
        {
            if (APInvDtl_AssemblySeq_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, int, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, jobNum_ex, assemblySeq_ex) =>
                    (from row in dataContext.JobAsmbl
                     where row.Company == company_ex
                     && row.JobNum == jobNum_ex
                     && row.AssemblySeq == assemblySeq_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         AssemblySeqDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvDtl_AssemblySeq_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_AssemblySeq_Foreign_Query(this.Db, company, jobNum, assemblySeq);
        }

        private static Func<ErpContext, string, string, APInvDtlForeignQueryResult> APInvDtl_AssetNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_AssetNum_Foreign(string company, string assetNum)
        {
            if (APInvDtl_AssetNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, assetNum_ex) =>
                    (from row in dataContext.FAsset
                     where row.Company == company_ex
                     && row.AssetNum == assetNum_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         AssetNumAssetDescription = row.AssetDescription
                     }
                    ).FirstOrDefault();

                APInvDtl_AssetNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_AssetNum_Foreign_Query(this.Db, company, assetNum);
        }

        private static Func<ErpContext, string, string, string, APInvDtlForeignQueryResult> APInvDtl_Code1099_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_Code1099_Foreign(string company, string formTypeID, string code1099ID)
        {
            if (APInvDtl_Code1099_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, formTypeID_ex, code1099ID_ex) =>
                    (from row in dataContext.Code1099
                     where row.Company == company_ex
                     && row.FormTypeID == formTypeID_ex
                     && row.Code1099ID == code1099ID_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         Code1099Description = row.Description
                     }
                    ).FirstOrDefault();

                APInvDtl_Code1099_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_Code1099_Foreign_Query(this.Db, company, formTypeID, code1099ID);
        }

        private static Func<ErpContext, string, string, APInvDtlForeignQueryResult> APInvDtl_CommodityCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_CommodityCode_Foreign(string company, string commodityCode)
        {
            if (APInvDtl_CommodityCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, commodityCode_ex) =>
                    (from row in dataContext.ICommCode
                     where row.Company == company_ex
                     && row.CommodityCode == commodityCode_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         CommodityCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvDtl_CommodityCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_CommodityCode_Foreign_Query(this.Db, company, commodityCode);
        }

        private static Func<ErpContext, string, int, APInvDtlForeignQueryResult> APInvDtl_ContainerID_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_ContainerID_Foreign(string company, int containerID)
        {
            if (APInvDtl_ContainerID_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, containerID_ex) =>
                    (from row in dataContext.ContainerHeader
                     where row.Company == company_ex
                     && row.ContainerID == containerID_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         ContainerIDContainerDescription = row.ContainerDescription
                     }
                    ).FirstOrDefault();

                APInvDtl_ContainerID_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_ContainerID_Foreign_Query(this.Db, company, containerID);
        }

        private static Func<ErpContext, string, string, APInvDtlForeignQueryResult> APInvDtl_FormType_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_FormType_Foreign(string company, string formTypeID)
        {
            if (APInvDtl_FormType_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, formTypeID_ex) =>
                    (from row in dataContext.FormType
                     where row.Company == company_ex
                     && row.FormTypeID == formTypeID_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         FormTypeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvDtl_FormType_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_FormType_Foreign_Query(this.Db, company, formTypeID);
        }

        private static Func<ErpContext, string, string, APInvDtlForeignQueryResult> APInvDtl_GLPurch_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_GLPurch_Foreign(string company, string purchCode)
        {
            if (APInvDtl_GLPurch_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, purchCode_ex) =>
                    (from row in dataContext.GLPurch
                     where row.Company == company_ex
                     && row.PurchCode == purchCode_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         GLPurchPurchDesc = row.PurchDesc
                     }
                    ).FirstOrDefault();

                APInvDtl_GLPurch_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_GLPurch_Foreign_Query(this.Db, company, purchCode);
        }

        private static Func<ErpContext, string, int, string, APInvDtlForeignQueryResult> APInvDtl_InvoiceNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_InvoiceNum_Foreign(string company, int vendorNum, string invoiceNum)
        {
            if (APInvDtl_InvoiceNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, invoiceNum_ex) =>
                    (from row in dataContext.APInvHed
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.InvoiceNum == invoiceNum_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         InvoiceNumDebitMemo = row.DebitMemo,
                         InvoiceNumPosted = row.Posted,
                         InvoiceNumDescription = row.Description,
                         InvoiceNumCurrencyCode = row.CurrencyCode
                     }
                    ).FirstOrDefault();

                APInvDtl_InvoiceNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_InvoiceNum_Foreign_Query(this.Db, company, vendorNum, invoiceNum);
        }

        private static Func<ErpContext, string, string, APInvDtlForeignQueryResult> APInvDtl_JobNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_JobNum_Foreign(string company, string jobNum)
        {
            if (APInvDtl_JobNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, jobNum_ex) =>
                    (from row in dataContext.JobHead
                     where row.Company == company_ex
                     && row.JobNum == jobNum_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         JobNumPartDescription = row.PartDescription
                     }
                    ).FirstOrDefault();

                APInvDtl_JobNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_JobNum_Foreign_Query(this.Db, company, jobNum);
        }

        private static Func<ErpContext, string, string, APInvDtlForeignQueryResult> APInvDtl_PartNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_PartNum_Foreign(string company, string partNum)
        {
            if (APInvDtl_PartNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, partNum_ex) =>
                    (from row in dataContext.Part
                     where row.Company == company_ex
                     && row.PartNum == partNum_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         PartNumTrackInventoryAttributes = row.TrackInventoryAttributes,
                         PartNumTrackSerialNum = row.TrackSerialNum,
                         PartNumTrackLots = row.TrackLots,
                         PartNumPricePerCode = row.PricePerCode,
                         PartNumIUM = row.IUM,
                         PartNumSellingFactor = row.SellingFactor,
                         PartNumTrackDimension = row.TrackDimension,
                         PartNumPartDescription = row.PartDescription,
                         PartNumSalesUM = row.SalesUM,
                         PartNumAttrClassID = row.AttrClassID
                     }
                    ).FirstOrDefault();

                APInvDtl_PartNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_PartNum_Foreign_Query(this.Db, company, partNum);
        }

        private static Func<ErpContext, string, int, int, APInvDtlForeignQueryResult> APInvDtl_POLine_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_POLine_Foreign(string company, int poNum, int poLine)
        {
            if (APInvDtl_POLine_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, int, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, poNum_ex, poLine_ex) =>
                    (from row in dataContext.PODetail
                     where row.Company == company_ex
                     && row.PONUM == poNum_ex
                     && row.POLine == poLine_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         POLineLineDesc = row.LineDesc,
                         POLineVenPartNum = row.VenPartNum,
                         POLinePartNum = row.PartNum
                     }
                    ).FirstOrDefault();

                APInvDtl_POLine_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_POLine_Foreign_Query(this.Db, company, poNum, poLine);
        }

        private static Func<ErpContext, string, string, APInvDtlForeignQueryResult> APInvDtl_TaxCatID_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_TaxCatID_Foreign(string company, string taxCatID)
        {
            if (APInvDtl_TaxCatID_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCatID_ex) =>
                    (from row in dataContext.TaxCat
                     where row.Company == company_ex
                     && row.TaxCatID == taxCatID_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         TaxCatIDDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvDtl_TaxCatID_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_TaxCatID_Foreign_Query(this.Db, company, taxCatID);
        }

        private static Func<ErpContext, string, int, APInvDtlForeignQueryResult> APInvDtl_VendorNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_VendorNum_Foreign(string company, int vendorNum)
        {
            if (APInvDtl_VendorNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         VendorNumName = row.Name,
                         VendorNumAddress2 = row.Address2,
                         VendorNumCountry = row.Country,
                         VendorNumCity = row.City,
                         VendorNumDefaultFOB = row.DefaultFOB,
                         VendorNumCurrencyCode = row.CurrencyCode,
                         VendorNumState = row.State,
                         VendorNumTermsCode = row.TermsCode,
                         VendorNumVendorID = row.VendorID,
                         VendorNumAddress3 = row.Address3,
                         VendorNumZIP = row.ZIP,
                         VendorNumAddress1 = row.Address1
                     }
                    ).FirstOrDefault();

                APInvDtl_VendorNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_VendorNum_Foreign_Query(this.Db, company, vendorNum);
        }

        private static Func<ErpContext, string, int, string, APInvDtlForeignQueryResult> APInvDtl_VendorPP_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_VendorPP_Foreign(string company, int vendorNum, string purPoint)
        {
            if (APInvDtl_VendorPP_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, purPoint_ex) =>
                    (from row in dataContext.VendorPP
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.PurPoint == purPoint_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         VendorPPName = row.Name
                     }
                    ).FirstOrDefault();

                APInvDtl_VendorPP_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_VendorPP_Foreign_Query(this.Db, company, vendorNum, purPoint);
        }

        private static Func<ErpContext, string, int, APInvDtlForeignQueryResult> APInvDtl_vrPONum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlForeignQueryResult FindFirst_APInvDtl_vrPONum_Foreign(string company, int poNum)
        {
            if (APInvDtl_vrPONum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, poNum_ex) =>
                    (from row in dataContext.POHeader
                     where row.Company == company_ex
                     && row.PONum == poNum_ex
                     select new APInvDtlForeignQueryResult()
                     {
                         vrPONumShipToConName = row.ShipToConName,
                         vrPONumShipName = row.ShipName
                     }
                    ).FirstOrDefault();

                APInvDtl_vrPONum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtl_vrPONum_Foreign_Query(this.Db, company, poNum);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APInvDtl_Foreign_Link()
        {
            APInvDtlForeignQueryResult APInvDtl_AssemblySeq_Foreign_LinkResults;
            APInvDtl_AssemblySeq_Foreign_LinkResults = FindFirst_APInvDtl_AssemblySeq_Foreign(ttAPInvDtl.Company, ttAPInvDtl.JobNum, ttAPInvDtl.AssemblySeq);
            if (APInvDtl_AssemblySeq_Foreign_LinkResults != null)
            {
                ttAPInvDtl.AssemblySeqDescription = APInvDtl_AssemblySeq_Foreign_LinkResults.AssemblySeqDescription;
            }
            else
            {
                ttAPInvDtl.AssemblySeqDescription = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_AssetNum_Foreign_LinkResults;
            APInvDtl_AssetNum_Foreign_LinkResults = FindFirst_APInvDtl_AssetNum_Foreign(ttAPInvDtl.Company, ttAPInvDtl.AssetNum);
            if (APInvDtl_AssetNum_Foreign_LinkResults != null)
            {
                ttAPInvDtl.AssetNumAssetDescription = APInvDtl_AssetNum_Foreign_LinkResults.AssetNumAssetDescription;
            }
            else
            {
                ttAPInvDtl.AssetNumAssetDescription = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_Code1099_Foreign_LinkResults;
            APInvDtl_Code1099_Foreign_LinkResults = FindFirst_APInvDtl_Code1099_Foreign(ttAPInvDtl.Company, ttAPInvDtl.FormTypeID, ttAPInvDtl.Code1099ID);
            if (APInvDtl_Code1099_Foreign_LinkResults != null)
            {
                ttAPInvDtl.Code1099Description = APInvDtl_Code1099_Foreign_LinkResults.Code1099Description;
            }
            else
            {
                ttAPInvDtl.Code1099Description = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_CommodityCode_Foreign_LinkResults;
            APInvDtl_CommodityCode_Foreign_LinkResults = FindFirst_APInvDtl_CommodityCode_Foreign(ttAPInvDtl.Company, ttAPInvDtl.CommodityCode);
            if (APInvDtl_CommodityCode_Foreign_LinkResults != null)
            {
                ttAPInvDtl.CommodityCodeDescription = APInvDtl_CommodityCode_Foreign_LinkResults.CommodityCodeDescription;
            }
            else
            {
                ttAPInvDtl.CommodityCodeDescription = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_ContainerID_Foreign_LinkResults;
            APInvDtl_ContainerID_Foreign_LinkResults = FindFirst_APInvDtl_ContainerID_Foreign(ttAPInvDtl.Company, ttAPInvDtl.ContainerID);
            if (APInvDtl_ContainerID_Foreign_LinkResults != null)
            {
                ttAPInvDtl.ContainerIDContainerDescription = APInvDtl_ContainerID_Foreign_LinkResults.ContainerIDContainerDescription;
            }
            else
            {
                ttAPInvDtl.ContainerIDContainerDescription = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_FormType_Foreign_LinkResults;
            APInvDtl_FormType_Foreign_LinkResults = FindFirst_APInvDtl_FormType_Foreign(ttAPInvDtl.Company, ttAPInvDtl.FormTypeID);
            if (APInvDtl_FormType_Foreign_LinkResults != null)
            {
                ttAPInvDtl.FormTypeDescription = APInvDtl_FormType_Foreign_LinkResults.FormTypeDescription;
            }
            else
            {
                ttAPInvDtl.FormTypeDescription = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_GLPurch_Foreign_LinkResults;
            APInvDtl_GLPurch_Foreign_LinkResults = FindFirst_APInvDtl_GLPurch_Foreign(ttAPInvDtl.Company, ttAPInvDtl.PurchCode);
            if (APInvDtl_GLPurch_Foreign_LinkResults != null)
            {
                ttAPInvDtl.GLPurchPurchDesc = APInvDtl_GLPurch_Foreign_LinkResults.GLPurchPurchDesc;
            }
            else
            {
                ttAPInvDtl.GLPurchPurchDesc = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_InvoiceNum_Foreign_LinkResults;
            APInvDtl_InvoiceNum_Foreign_LinkResults = FindFirst_APInvDtl_InvoiceNum_Foreign(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.InvoiceNum);
            if (APInvDtl_InvoiceNum_Foreign_LinkResults != null)
            {
                ttAPInvDtl.InvoiceNumDebitMemo = APInvDtl_InvoiceNum_Foreign_LinkResults.InvoiceNumDebitMemo;
                ttAPInvDtl.InvoiceNumPosted = APInvDtl_InvoiceNum_Foreign_LinkResults.InvoiceNumPosted;
                ttAPInvDtl.InvoiceNumDescription = APInvDtl_InvoiceNum_Foreign_LinkResults.InvoiceNumDescription;
                ttAPInvDtl.InvoiceNumCurrencyCode = APInvDtl_InvoiceNum_Foreign_LinkResults.InvoiceNumCurrencyCode;
            }
            else
            {
                ttAPInvDtl.InvoiceNumDebitMemo = false;
                ttAPInvDtl.InvoiceNumPosted = false;
                ttAPInvDtl.InvoiceNumDescription = string.Empty;
                ttAPInvDtl.InvoiceNumCurrencyCode = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_JobNum_Foreign_LinkResults;
            APInvDtl_JobNum_Foreign_LinkResults = FindFirst_APInvDtl_JobNum_Foreign(ttAPInvDtl.Company, ttAPInvDtl.JobNum);
            if (APInvDtl_JobNum_Foreign_LinkResults != null)
            {
                ttAPInvDtl.JobNumPartDescription = APInvDtl_JobNum_Foreign_LinkResults.JobNumPartDescription;
            }
            else
            {
                ttAPInvDtl.JobNumPartDescription = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_PartNum_Foreign_LinkResults;
            APInvDtl_PartNum_Foreign_LinkResults = FindFirst_APInvDtl_PartNum_Foreign(ttAPInvDtl.Company, ttAPInvDtl.PartNum);
            if (APInvDtl_PartNum_Foreign_LinkResults != null)
            {
                ttAPInvDtl.PartNumTrackInventoryAttributes = APInvDtl_PartNum_Foreign_LinkResults.PartNumTrackInventoryAttributes;
                ttAPInvDtl.PartNumTrackSerialNum = APInvDtl_PartNum_Foreign_LinkResults.PartNumTrackSerialNum;
                ttAPInvDtl.PartNumTrackLots = APInvDtl_PartNum_Foreign_LinkResults.PartNumTrackLots;
                ttAPInvDtl.PartNumPricePerCode = APInvDtl_PartNum_Foreign_LinkResults.PartNumPricePerCode;
                ttAPInvDtl.PartNumIUM = APInvDtl_PartNum_Foreign_LinkResults.PartNumIUM;
                ttAPInvDtl.PartNumSellingFactor = APInvDtl_PartNum_Foreign_LinkResults.PartNumSellingFactor;
                ttAPInvDtl.PartNumTrackDimension = APInvDtl_PartNum_Foreign_LinkResults.PartNumTrackDimension;
                ttAPInvDtl.PartNumPartDescription = APInvDtl_PartNum_Foreign_LinkResults.PartNumPartDescription;
                ttAPInvDtl.PartNumSalesUM = APInvDtl_PartNum_Foreign_LinkResults.PartNumSalesUM;
                ttAPInvDtl.PartNumAttrClassID = APInvDtl_PartNum_Foreign_LinkResults.PartNumAttrClassID;
            }
            else
            {
                ttAPInvDtl.PartNumTrackInventoryAttributes = false;
                ttAPInvDtl.PartNumTrackSerialNum = false;
                ttAPInvDtl.PartNumTrackLots = false;
                ttAPInvDtl.PartNumPricePerCode = string.Empty;
                ttAPInvDtl.PartNumIUM = string.Empty;
                ttAPInvDtl.PartNumSellingFactor = 0m;
                ttAPInvDtl.PartNumTrackDimension = false;
                ttAPInvDtl.PartNumPartDescription = string.Empty;
                ttAPInvDtl.PartNumSalesUM = string.Empty;
                ttAPInvDtl.PartNumAttrClassID = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_POLine_Foreign_LinkResults;
            APInvDtl_POLine_Foreign_LinkResults = FindFirst_APInvDtl_POLine_Foreign(ttAPInvDtl.Company, ttAPInvDtl.PONum, ttAPInvDtl.POLine);
            if (APInvDtl_POLine_Foreign_LinkResults != null)
            {
                ttAPInvDtl.POLineLineDesc = APInvDtl_POLine_Foreign_LinkResults.POLineLineDesc;
                ttAPInvDtl.POLineVenPartNum = APInvDtl_POLine_Foreign_LinkResults.POLineVenPartNum;
                ttAPInvDtl.POLinePartNum = APInvDtl_POLine_Foreign_LinkResults.POLinePartNum;
            }
            else
            {
                ttAPInvDtl.POLineLineDesc = string.Empty;
                ttAPInvDtl.POLineVenPartNum = string.Empty;
                ttAPInvDtl.POLinePartNum = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_TaxCatID_Foreign_LinkResults;
            APInvDtl_TaxCatID_Foreign_LinkResults = FindFirst_APInvDtl_TaxCatID_Foreign(ttAPInvDtl.Company, ttAPInvDtl.TaxCatID);
            if (APInvDtl_TaxCatID_Foreign_LinkResults != null)
            {
                ttAPInvDtl.TaxCatIDDescription = APInvDtl_TaxCatID_Foreign_LinkResults.TaxCatIDDescription;
            }
            else
            {
                ttAPInvDtl.TaxCatIDDescription = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_VendorNum_Foreign_LinkResults;
            APInvDtl_VendorNum_Foreign_LinkResults = FindFirst_APInvDtl_VendorNum_Foreign(ttAPInvDtl.Company, ttAPInvDtl.VendorNum);
            if (APInvDtl_VendorNum_Foreign_LinkResults != null)
            {
                ttAPInvDtl.VendorNumName = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumName;
                ttAPInvDtl.VendorNumAddress2 = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumAddress2;
                ttAPInvDtl.VendorNumCountry = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumCountry;
                ttAPInvDtl.VendorNumCity = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumCity;
                ttAPInvDtl.VendorNumDefaultFOB = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumDefaultFOB;
                ttAPInvDtl.VendorNumCurrencyCode = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumCurrencyCode;
                ttAPInvDtl.VendorNumState = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumState;
                ttAPInvDtl.VendorNumTermsCode = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumTermsCode;
                ttAPInvDtl.VendorNumVendorID = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumVendorID;
                ttAPInvDtl.VendorNumAddress3 = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumAddress3;
                ttAPInvDtl.VendorNumZIP = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumZIP;
                ttAPInvDtl.VendorNumAddress1 = APInvDtl_VendorNum_Foreign_LinkResults.VendorNumAddress1;
            }
            else
            {
                ttAPInvDtl.VendorNumName = string.Empty;
                ttAPInvDtl.VendorNumAddress2 = string.Empty;
                ttAPInvDtl.VendorNumCountry = string.Empty;
                ttAPInvDtl.VendorNumCity = string.Empty;
                ttAPInvDtl.VendorNumDefaultFOB = string.Empty;
                ttAPInvDtl.VendorNumCurrencyCode = string.Empty;
                ttAPInvDtl.VendorNumState = string.Empty;
                ttAPInvDtl.VendorNumTermsCode = string.Empty;
                ttAPInvDtl.VendorNumVendorID = string.Empty;
                ttAPInvDtl.VendorNumAddress3 = string.Empty;
                ttAPInvDtl.VendorNumZIP = string.Empty;
                ttAPInvDtl.VendorNumAddress1 = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_VendorPP_Foreign_LinkResults;
            APInvDtl_VendorPP_Foreign_LinkResults = FindFirst_APInvDtl_VendorPP_Foreign(ttAPInvDtl.Company, ttAPInvDtl.VendorNum, ttAPInvDtl.PurPoint);
            if (APInvDtl_VendorPP_Foreign_LinkResults != null)
            {
                ttAPInvDtl.VendorPPName = APInvDtl_VendorPP_Foreign_LinkResults.VendorPPName;
            }
            else
            {
                ttAPInvDtl.VendorPPName = string.Empty;
            }

            APInvDtlForeignQueryResult APInvDtl_vrPONum_Foreign_LinkResults;
            APInvDtl_vrPONum_Foreign_LinkResults = FindFirst_APInvDtl_vrPONum_Foreign(ttAPInvDtl.Company, ttAPInvDtl.PONum);
            if (APInvDtl_vrPONum_Foreign_LinkResults != null)
            {
                ttAPInvDtl.vrPONumShipToConName = APInvDtl_vrPONum_Foreign_LinkResults.vrPONumShipToConName;
                ttAPInvDtl.vrPONumShipName = APInvDtl_vrPONum_Foreign_LinkResults.vrPONumShipName;
            }
            else
            {
                ttAPInvDtl.vrPONumShipToConName = string.Empty;
                ttAPInvDtl.vrPONumShipName = string.Empty;
            }
        }
        #endregion APInvDtl_Foreign_Link
        #endregion Table APInvDtl

        #region Table APInvDtlAttch
        #region GetNewAPInvDtlAttch
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvDtlAttch(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            CurrentFullTableset = ds;

            ttAPInvDtlAttch = (APInvDtlAttchRow)InnerGetNew(
                ds.APInvDtlAttch,
                (APInvDtlAttchRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvDtlAttch

        #region Events
        partial void APInvDtlAttchAfterCreate();
        partial void APInvDtlAttchAfterDelete();
        partial void APInvDtlAttchAfterGetNew();
        partial void APInvDtlAttchAfterGetRows();
        partial void APInvDtlAttchAfterUpdate();
        partial void APInvDtlAttchBeforeBI();
        partial void APInvDtlAttchBeforeCreate();
        partial void APInvDtlAttchBeforeDelete();
        partial void APInvDtlAttchBeforeGetNew();
        partial void APInvDtlAttchBeforeUpdate();
        partial void APInvDtlAttchSetDefaults(APInvDtlAttchRow row);
        #endregion Events

        #endregion Table APInvDtlAttch

        #region Table APInvDtlDEASch
        #region GetNewAPInvDtlDEASch
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvDtlDEASch(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            CurrentFullTableset = ds;

            ttAPInvDtlDEASch = (APInvDtlDEASchRow)InnerGetNew(
                ds.APInvDtlDEASch,
                (APInvDtlDEASchRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvDtlDEASch

        #region Events
        partial void APInvDtlDEASchAfterCreate();
        partial void APInvDtlDEASchAfterDelete();
        partial void APInvDtlDEASchAfterGetNew();
        partial void APInvDtlDEASchAfterGetRows();
        partial void APInvDtlDEASchAfterUpdate();
        partial void APInvDtlDEASchBeforeBI();
        partial void APInvDtlDEASchBeforeCreate();
        partial void APInvDtlDEASchBeforeDelete();
        partial void APInvDtlDEASchBeforeGetNew();
        partial void APInvDtlDEASchBeforeUpdate();
        partial void APInvDtlDEASchSetDefaults(APInvDtlDEASchRow row);
        #endregion Events

        #endregion Table APInvDtlDEASch

        #region Table APInvExp
        #region GetNewAPInvExp
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvExp(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            CurrentFullTableset = ds;

            ttAPInvExp = (APInvExpRow)InnerGetNew(
                ds.APInvExp,
                (APInvExpRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvExp

        #region Events
        partial void APInvExpAfterCreate();
        partial void APInvExpAfterDelete();
        partial void APInvExpAfterGetNew();
        partial void APInvExpAfterGetRows();
        partial void APInvExpAfterUpdate();
        partial void APInvExpBeforeBI();
        partial void APInvExpBeforeCreate();
        partial void APInvExpBeforeDelete();
        partial void APInvExpBeforeGetNew();
        partial void APInvExpBeforeUpdate();
        partial void APInvExpSetDefaults(APInvExpRow row);
        #endregion Events

        #region APInvExp_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APInvExpForeignQueryResult
        {
            public string ExtRefCodeRefCodeDesc { get; set; }
            public string InvoiceNumDescription { get; set; }
            public string VendorNumAddress3 { get; set; }
            public string VendorNumTermsCode { get; set; }
            public string VendorNumAddress1 { get; set; }
            public string VendorNumState { get; set; }
            public string VendorNumVendorID { get; set; }
            public string VendorNumAddress2 { get; set; }
            public string VendorNumCurrencyCode { get; set; }
            public string VendorNumName { get; set; }
            public string VendorNumCountry { get; set; }
            public string VendorNumDefaultFOB { get; set; }
            public string VendorNumCity { get; set; }
            public string VendorNumZIP { get; set; }
        }

        private static Func<ErpContext, string, string, string, string, APInvExpForeignQueryResult> APInvExp_ExtRefCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvExpForeignQueryResult FindFirst_APInvExp_ExtRefCode_Foreign(string company, string extCompanyID, string extRefType, string extRefCode)
        {
            if (APInvExp_ExtRefCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, string, APInvExpForeignQueryResult>> expression =
                    (dataContext, company_ex, extCompanyID_ex, extRefType_ex, extRefCode_ex) =>
                    (from row in dataContext.GlbGLRefCod
                     where row.Company == company_ex
                     && row.ExtCompanyID == extCompanyID_ex
                     && row.RefType == extRefType_ex
                     && row.RefCode == extRefCode_ex
                     select new APInvExpForeignQueryResult()
                     {
                         ExtRefCodeRefCodeDesc = row.RefCodeDesc
                     }
                    ).FirstOrDefault();

                APInvExp_ExtRefCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvExp_ExtRefCode_Foreign_Query(this.Db, company, extCompanyID, extRefType, extRefCode);
        }

        private static Func<ErpContext, string, int, string, APInvExpForeignQueryResult> APInvExp_InvoiceNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvExpForeignQueryResult FindFirst_APInvExp_InvoiceNum_Foreign(string company, int vendorNum, string invoiceNum)
        {
            if (APInvExp_InvoiceNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, APInvExpForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, invoiceNum_ex) =>
                    (from row in dataContext.APInvHed
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.InvoiceNum == invoiceNum_ex
                     select new APInvExpForeignQueryResult()
                     {
                         InvoiceNumDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvExp_InvoiceNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvExp_InvoiceNum_Foreign_Query(this.Db, company, vendorNum, invoiceNum);
        }

        private static Func<ErpContext, string, int, APInvExpForeignQueryResult> APInvExp_VendorNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvExpForeignQueryResult FindFirst_APInvExp_VendorNum_Foreign(string company, int vendorNum)
        {
            if (APInvExp_VendorNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvExpForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     select new APInvExpForeignQueryResult()
                     {
                         VendorNumAddress3 = row.Address3,
                         VendorNumTermsCode = row.TermsCode,
                         VendorNumAddress1 = row.Address1,
                         VendorNumState = row.State,
                         VendorNumVendorID = row.VendorID,
                         VendorNumAddress2 = row.Address2,
                         VendorNumCurrencyCode = row.CurrencyCode,
                         VendorNumName = row.Name,
                         VendorNumCountry = row.Country,
                         VendorNumDefaultFOB = row.DefaultFOB,
                         VendorNumCity = row.City,
                         VendorNumZIP = row.ZIP
                     }
                    ).FirstOrDefault();

                APInvExp_VendorNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvExp_VendorNum_Foreign_Query(this.Db, company, vendorNum);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APInvExp_Foreign_Link()
        {
            APInvExpForeignQueryResult APInvExp_ExtRefCode_Foreign_LinkResults;
            APInvExp_ExtRefCode_Foreign_LinkResults = FindFirst_APInvExp_ExtRefCode_Foreign(ttAPInvExp.Company, ttAPInvExp.ExtCompanyID, ttAPInvExp.ExtRefType, ttAPInvExp.ExtRefCode);
            if (APInvExp_ExtRefCode_Foreign_LinkResults != null)
            {
                ttAPInvExp.ExtRefCodeRefCodeDesc = APInvExp_ExtRefCode_Foreign_LinkResults.ExtRefCodeRefCodeDesc;
            }
            else
            {
                ttAPInvExp.ExtRefCodeRefCodeDesc = string.Empty;
            }

            APInvExpForeignQueryResult APInvExp_InvoiceNum_Foreign_LinkResults;
            APInvExp_InvoiceNum_Foreign_LinkResults = FindFirst_APInvExp_InvoiceNum_Foreign(ttAPInvExp.Company, ttAPInvExp.VendorNum, ttAPInvExp.InvoiceNum);
            if (APInvExp_InvoiceNum_Foreign_LinkResults != null)
            {
                ttAPInvExp.InvoiceNumDescription = APInvExp_InvoiceNum_Foreign_LinkResults.InvoiceNumDescription;
            }
            else
            {
                ttAPInvExp.InvoiceNumDescription = string.Empty;
            }

            APInvExpForeignQueryResult APInvExp_VendorNum_Foreign_LinkResults;
            APInvExp_VendorNum_Foreign_LinkResults = FindFirst_APInvExp_VendorNum_Foreign(ttAPInvExp.Company, ttAPInvExp.VendorNum);
            if (APInvExp_VendorNum_Foreign_LinkResults != null)
            {
                ttAPInvExp.VendorNumAddress3 = APInvExp_VendorNum_Foreign_LinkResults.VendorNumAddress3;
                ttAPInvExp.VendorNumTermsCode = APInvExp_VendorNum_Foreign_LinkResults.VendorNumTermsCode;
                ttAPInvExp.VendorNumAddress1 = APInvExp_VendorNum_Foreign_LinkResults.VendorNumAddress1;
                ttAPInvExp.VendorNumState = APInvExp_VendorNum_Foreign_LinkResults.VendorNumState;
                ttAPInvExp.VendorNumVendorID = APInvExp_VendorNum_Foreign_LinkResults.VendorNumVendorID;
                ttAPInvExp.VendorNumAddress2 = APInvExp_VendorNum_Foreign_LinkResults.VendorNumAddress2;
                ttAPInvExp.VendorNumCurrencyCode = APInvExp_VendorNum_Foreign_LinkResults.VendorNumCurrencyCode;
                ttAPInvExp.VendorNumName = APInvExp_VendorNum_Foreign_LinkResults.VendorNumName;
                ttAPInvExp.VendorNumCountry = APInvExp_VendorNum_Foreign_LinkResults.VendorNumCountry;
                ttAPInvExp.VendorNumDefaultFOB = APInvExp_VendorNum_Foreign_LinkResults.VendorNumDefaultFOB;
                ttAPInvExp.VendorNumCity = APInvExp_VendorNum_Foreign_LinkResults.VendorNumCity;
                ttAPInvExp.VendorNumZIP = APInvExp_VendorNum_Foreign_LinkResults.VendorNumZIP;
            }
            else
            {
                ttAPInvExp.VendorNumAddress3 = string.Empty;
                ttAPInvExp.VendorNumTermsCode = string.Empty;
                ttAPInvExp.VendorNumAddress1 = string.Empty;
                ttAPInvExp.VendorNumState = string.Empty;
                ttAPInvExp.VendorNumVendorID = string.Empty;
                ttAPInvExp.VendorNumAddress2 = string.Empty;
                ttAPInvExp.VendorNumCurrencyCode = string.Empty;
                ttAPInvExp.VendorNumName = string.Empty;
                ttAPInvExp.VendorNumCountry = string.Empty;
                ttAPInvExp.VendorNumDefaultFOB = string.Empty;
                ttAPInvExp.VendorNumCity = string.Empty;
                ttAPInvExp.VendorNumZIP = string.Empty;
            }
        }
        #endregion APInvExp_Foreign_Link
        #endregion Table APInvExp

        #region Table APInvExpTGLC
        #region GetNewAPInvExpTGLC
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvExpTGLC(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, int invExpSeq)
        {
            CurrentFullTableset = ds;

            ttAPInvExpTGLC = (APInvExpTGLCRow)InnerGetNew(
                ds.APInvExpTGLC,
                (APInvExpTGLCRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;
                    row.InvExpSeq = invExpSeq;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvExpTGLC

        #region Events
        partial void APInvExpTGLCAfterCreate();
        partial void APInvExpTGLCAfterDelete();
        partial void APInvExpTGLCAfterGetNew();
        partial void APInvExpTGLCAfterGetRows();
        partial void APInvExpTGLCAfterUpdate();
        partial void APInvExpTGLCBeforeBI();
        partial void APInvExpTGLCBeforeCreate();
        partial void APInvExpTGLCBeforeDelete();
        partial void APInvExpTGLCBeforeGetNew();
        partial void APInvExpTGLCBeforeUpdate();
        partial void APInvExpTGLCSetDefaults(APInvExpTGLCRow row);
        #endregion Events

        #region APInvExpTGLC_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APInvExpTGLCForeignQueryResult
        {
            public string COADescription { get; set; }
            public string GLAccountGLShortAcct { get; set; }
            public string GLAccountAccountDesc { get; set; }
            public string GLAccountGLAcctDisp { get; set; }
            public string GLBookCurrencyCode { get; set; }
            public string GLBookDescription { get; set; }
        }

        private static Func<ErpContext, string, string, APInvExpTGLCForeignQueryResult> APInvExpTGLC_COA_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvExpTGLCForeignQueryResult FindFirst_APInvExpTGLC_COA_Foreign(string company, string coACode)
        {
            if (APInvExpTGLC_COA_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvExpTGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, coACode_ex) =>
                    (from row in dataContext.COA
                     where row.Company == company_ex
                     && row.COACode == coACode_ex
                     select new APInvExpTGLCForeignQueryResult()
                     {
                         COADescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvExpTGLC_COA_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvExpTGLC_COA_Foreign_Query(this.Db, company, coACode);
        }

        private static Func<ErpContext, string, string, string, APInvExpTGLCForeignQueryResult> APInvExpTGLC_GLAccount_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvExpTGLCForeignQueryResult FindFirst_APInvExpTGLC_GLAccount_Foreign(string company, string coACode, string glAccount)
        {
            if (APInvExpTGLC_GLAccount_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, APInvExpTGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, coACode_ex, glAccount_ex) =>
                    (from row in dataContext.GLAcctDisp
                     where row.Company == company_ex
                     && row.COACode == coACode_ex
                     && row.GLAccount == glAccount_ex
                     select new APInvExpTGLCForeignQueryResult()
                     {
                         GLAccountGLShortAcct = row.GLShortAcct,
                         GLAccountAccountDesc = row.AccountDesc,
                         GLAccountGLAcctDisp = row.GLAcctDisp1
                     }
                    ).FirstOrDefault();

                APInvExpTGLC_GLAccount_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvExpTGLC_GLAccount_Foreign_Query(this.Db, company, coACode, glAccount);
        }

        private static Func<ErpContext, string, string, APInvExpTGLCForeignQueryResult> APInvExpTGLC_GLBook_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvExpTGLCForeignQueryResult FindFirst_APInvExpTGLC_GLBook_Foreign(string company, string bookID)
        {
            if (APInvExpTGLC_GLBook_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvExpTGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, bookID_ex) =>
                    (from row in dataContext.GLBook
                     where row.Company == company_ex
                     && row.BookID == bookID_ex
                     select new APInvExpTGLCForeignQueryResult()
                     {
                         GLBookCurrencyCode = row.CurrencyCode,
                         GLBookDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvExpTGLC_GLBook_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvExpTGLC_GLBook_Foreign_Query(this.Db, company, bookID);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APInvExpTGLC_Foreign_Link()
        {
            APInvExpTGLCForeignQueryResult APInvExpTGLC_COA_Foreign_LinkResults;
            APInvExpTGLC_COA_Foreign_LinkResults = FindFirst_APInvExpTGLC_COA_Foreign(ttAPInvExpTGLC.Company, ttAPInvExpTGLC.COACode);
            if (APInvExpTGLC_COA_Foreign_LinkResults != null)
            {
                ttAPInvExpTGLC.COADescription = APInvExpTGLC_COA_Foreign_LinkResults.COADescription;
            }
            else
            {
                ttAPInvExpTGLC.COADescription = string.Empty;
            }

            APInvExpTGLCForeignQueryResult APInvExpTGLC_GLAccount_Foreign_LinkResults;
            APInvExpTGLC_GLAccount_Foreign_LinkResults = FindFirst_APInvExpTGLC_GLAccount_Foreign(ttAPInvExpTGLC.Company, ttAPInvExpTGLC.COACode, ttAPInvExpTGLC.GLAccount);
            if (APInvExpTGLC_GLAccount_Foreign_LinkResults != null)
            {
                ttAPInvExpTGLC.GLAccountGLShortAcct = APInvExpTGLC_GLAccount_Foreign_LinkResults.GLAccountGLShortAcct;
                ttAPInvExpTGLC.GLAccountAccountDesc = APInvExpTGLC_GLAccount_Foreign_LinkResults.GLAccountAccountDesc;
                ttAPInvExpTGLC.GLAccountGLAcctDisp = APInvExpTGLC_GLAccount_Foreign_LinkResults.GLAccountGLAcctDisp;
            }
            else
            {
                ttAPInvExpTGLC.GLAccountGLShortAcct = string.Empty;
                ttAPInvExpTGLC.GLAccountAccountDesc = string.Empty;
                ttAPInvExpTGLC.GLAccountGLAcctDisp = string.Empty;
            }

            APInvExpTGLCForeignQueryResult APInvExpTGLC_GLBook_Foreign_LinkResults;
            APInvExpTGLC_GLBook_Foreign_LinkResults = FindFirst_APInvExpTGLC_GLBook_Foreign(ttAPInvExpTGLC.Company, ttAPInvExpTGLC.BookID);
            if (APInvExpTGLC_GLBook_Foreign_LinkResults != null)
            {
                ttAPInvExpTGLC.GLBookCurrencyCode = APInvExpTGLC_GLBook_Foreign_LinkResults.GLBookCurrencyCode;
                ttAPInvExpTGLC.GLBookDescription = APInvExpTGLC_GLBook_Foreign_LinkResults.GLBookDescription;
            }
            else
            {
                ttAPInvExpTGLC.GLBookCurrencyCode = string.Empty;
                ttAPInvExpTGLC.GLBookDescription = string.Empty;
            }
        }
        #endregion APInvExpTGLC_Foreign_Link
        #endregion Table APInvExpTGLC

        #region Table GlbAPIETGLC
        #region GetNewGlbAPIETGLC
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewGlbAPIETGLC(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, int invExpSeq)
        {
            CurrentFullTableset = ds;

            ttGlbAPIETGLC = (GlbAPIETGLCRow)InnerGetNew(
                ds.GlbAPIETGLC,
                (GlbAPIETGLCRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;
                    row.InvExpSeq = invExpSeq;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewGlbAPIETGLC

        #region Events
        partial void GlbAPIETGLCAfterCreate();
        partial void GlbAPIETGLCAfterDelete();
        partial void GlbAPIETGLCAfterGetNew();
        partial void GlbAPIETGLCAfterGetRows();
        partial void GlbAPIETGLCAfterUpdate();
        partial void GlbAPIETGLCBeforeBI();
        partial void GlbAPIETGLCBeforeCreate();
        partial void GlbAPIETGLCBeforeDelete();
        partial void GlbAPIETGLCBeforeGetNew();
        partial void GlbAPIETGLCBeforeUpdate();
        partial void GlbAPIETGLCSetDefaults(GlbAPIETGLCRow row);
        #endregion Events

        #region GlbAPIETGLC_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class GlbAPIETGLCForeignQueryResult
        {
            public string COADescription { get; set; }
            public string GLAccountGLShortAcct { get; set; }
            public string GLAccountGLAcctDisp { get; set; }
            public string GLAccountAccountDesc { get; set; }
            public string GLBookDescription { get; set; }
        }

        private static Func<ErpContext, string, string, string, GlbAPIETGLCForeignQueryResult> GlbAPIETGLC_COA_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private GlbAPIETGLCForeignQueryResult FindFirst_GlbAPIETGLC_COA_Foreign(string company, string extCompanyID, string coACode)
        {
            if (GlbAPIETGLC_COA_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, GlbAPIETGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, extCompanyID_ex, coACode_ex) =>
                    (from row in dataContext.GLBCOA
                     where row.Company == company_ex
                     && row.ExtCompanyID == extCompanyID_ex
                     && row.COACode == coACode_ex
                     select new GlbAPIETGLCForeignQueryResult()
                     {
                         COADescription = row.Description
                     }
                    ).FirstOrDefault();

                GlbAPIETGLC_COA_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return GlbAPIETGLC_COA_Foreign_Query(this.Db, company, extCompanyID, coACode);
        }

        private static Func<ErpContext, string, string, string, string, GlbAPIETGLCForeignQueryResult> GlbAPIETGLC_GLAccount_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private GlbAPIETGLCForeignQueryResult FindFirst_GlbAPIETGLC_GLAccount_Foreign(string company, string extCompanyID, string coACode, string glAccount)
        {
            if (GlbAPIETGLC_GLAccount_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, string, GlbAPIETGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, extCompanyID_ex, coACode_ex, glAccount_ex) =>
                    (from row in dataContext.GLBGLAcctDisp
                     where row.Company == company_ex
                     && row.ExtCompanyID == extCompanyID_ex
                     && row.COACode == coACode_ex
                     && row.GLAccount == glAccount_ex
                     select new GlbAPIETGLCForeignQueryResult()
                     {
                         GLAccountGLShortAcct = row.GLShortAcct,
                         GLAccountGLAcctDisp = row.GLAcctDisp,
                         GLAccountAccountDesc = row.AccountDesc
                     }
                    ).FirstOrDefault();

                GlbAPIETGLC_GLAccount_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return GlbAPIETGLC_GLAccount_Foreign_Query(this.Db, company, extCompanyID, coACode, glAccount);
        }

        private static Func<ErpContext, string, string, string, GlbAPIETGLCForeignQueryResult> GlbAPIETGLC_GLBook_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private GlbAPIETGLCForeignQueryResult FindFirst_GlbAPIETGLC_GLBook_Foreign(string company, string extCompanyID, string bookID)
        {
            if (GlbAPIETGLC_GLBook_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, GlbAPIETGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, extCompanyID_ex, bookID_ex) =>
                    (from row in dataContext.GLBGLBook
                     where row.Company == company_ex
                     && row.ExtCompanyID == extCompanyID_ex
                     && row.BookID == bookID_ex
                     select new GlbAPIETGLCForeignQueryResult()
                     {
                         GLBookDescription = row.Description
                     }
                    ).FirstOrDefault();

                GlbAPIETGLC_GLBook_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return GlbAPIETGLC_GLBook_Foreign_Query(this.Db, company, extCompanyID, bookID);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void GlbAPIETGLC_Foreign_Link()
        {
            GlbAPIETGLCForeignQueryResult GlbAPIETGLC_COA_Foreign_LinkResults;
            GlbAPIETGLC_COA_Foreign_LinkResults = FindFirst_GlbAPIETGLC_COA_Foreign(ttGlbAPIETGLC.Company, ttGlbAPIETGLC.ExtCompanyID, ttGlbAPIETGLC.COACode);
            if (GlbAPIETGLC_COA_Foreign_LinkResults != null)
            {
                ttGlbAPIETGLC.COADescription = GlbAPIETGLC_COA_Foreign_LinkResults.COADescription;
            }
            else
            {
                ttGlbAPIETGLC.COADescription = string.Empty;
            }

            GlbAPIETGLCForeignQueryResult GlbAPIETGLC_GLAccount_Foreign_LinkResults;
            GlbAPIETGLC_GLAccount_Foreign_LinkResults = FindFirst_GlbAPIETGLC_GLAccount_Foreign(ttGlbAPIETGLC.Company, ttGlbAPIETGLC.ExtCompanyID, ttGlbAPIETGLC.COACode, ttGlbAPIETGLC.GLAccount);
            if (GlbAPIETGLC_GLAccount_Foreign_LinkResults != null)
            {
                ttGlbAPIETGLC.GLAccountGLShortAcct = GlbAPIETGLC_GLAccount_Foreign_LinkResults.GLAccountGLShortAcct;
                ttGlbAPIETGLC.GLAccountGLAcctDisp = GlbAPIETGLC_GLAccount_Foreign_LinkResults.GLAccountGLAcctDisp;
                ttGlbAPIETGLC.GLAccountAccountDesc = GlbAPIETGLC_GLAccount_Foreign_LinkResults.GLAccountAccountDesc;
            }
            else
            {
                ttGlbAPIETGLC.GLAccountGLShortAcct = string.Empty;
                ttGlbAPIETGLC.GLAccountGLAcctDisp = string.Empty;
                ttGlbAPIETGLC.GLAccountAccountDesc = string.Empty;
            }

            GlbAPIETGLCForeignQueryResult GlbAPIETGLC_GLBook_Foreign_LinkResults;
            GlbAPIETGLC_GLBook_Foreign_LinkResults = FindFirst_GlbAPIETGLC_GLBook_Foreign(ttGlbAPIETGLC.Company, ttGlbAPIETGLC.ExtCompanyID, ttGlbAPIETGLC.BookID);
            if (GlbAPIETGLC_GLBook_Foreign_LinkResults != null)
            {
                ttGlbAPIETGLC.GLBookDescription = GlbAPIETGLC_GLBook_Foreign_LinkResults.GLBookDescription;
            }
            else
            {
                ttGlbAPIETGLC.GLBookDescription = string.Empty;
            }
        }
        #endregion GlbAPIETGLC_Foreign_Link
        #endregion Table GlbAPIETGLC

        #region Table APInvJob
        #region GetNewAPInvJob
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvJob(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, string jobNum, int assemblySeq, int mtlSeq)
        {
            CurrentFullTableset = ds;

            ttAPInvJob = (APInvJobRow)InnerGetNew(
                ds.APInvJob,
                (APInvJobRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;
                    row.JobNum = jobNum;
                    row.AssemblySeq = assemblySeq;
                    row.MtlSeq = mtlSeq;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvJob

        #region Events
        partial void APInvJobAfterCreate();
        partial void APInvJobAfterDelete();
        partial void APInvJobAfterGetNew();
        partial void APInvJobAfterGetRows();
        partial void APInvJobAfterUpdate();
        partial void APInvJobBeforeBI();
        partial void APInvJobBeforeCreate();
        partial void APInvJobBeforeDelete();
        partial void APInvJobBeforeGetNew();
        partial void APInvJobBeforeUpdate();
        partial void APInvJobSetDefaults(APInvJobRow row);
        #endregion Events

        #region APInvJob_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APInvJobForeignQueryResult
        {
            public string InvoiceNumDescription { get; set; }
            public string JobNumPartDescription { get; set; }
            public string VendorNumName { get; set; }
            public string VendorNumAddress1 { get; set; }
            public string VendorNumVendorID { get; set; }
            public string VendorNumAddress2 { get; set; }
            public string VendorNumZIP { get; set; }
            public string VendorNumTermsCode { get; set; }
            public string VendorNumCurrencyCode { get; set; }
            public string VendorNumCity { get; set; }
            public string VendorNumAddress3 { get; set; }
            public string VendorNumDefaultFOB { get; set; }
            public string VendorNumCountry { get; set; }
            public string VendorNumState { get; set; }
        }

        private static Func<ErpContext, string, int, string, APInvJobForeignQueryResult> APInvJob_InvoiceNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvJobForeignQueryResult FindFirst_APInvJob_InvoiceNum_Foreign(string company, int vendorNum, string invoiceNum)
        {
            if (APInvJob_InvoiceNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, APInvJobForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, invoiceNum_ex) =>
                    (from row in dataContext.APInvHed
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.InvoiceNum == invoiceNum_ex
                     select new APInvJobForeignQueryResult()
                     {
                         InvoiceNumDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvJob_InvoiceNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvJob_InvoiceNum_Foreign_Query(this.Db, company, vendorNum, invoiceNum);
        }

        private static Func<ErpContext, string, string, APInvJobForeignQueryResult> APInvJob_JobNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvJobForeignQueryResult FindFirst_APInvJob_JobNum_Foreign(string company, string jobNum)
        {
            if (APInvJob_JobNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvJobForeignQueryResult>> expression =
                    (dataContext, company_ex, jobNum_ex) =>
                    (from row in dataContext.JobHead
                     where row.Company == company_ex
                     && row.JobNum == jobNum_ex
                     select new APInvJobForeignQueryResult()
                     {
                         JobNumPartDescription = row.PartDescription
                     }
                    ).FirstOrDefault();

                APInvJob_JobNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvJob_JobNum_Foreign_Query(this.Db, company, jobNum);
        }

        private static Func<ErpContext, string, int, APInvJobForeignQueryResult> APInvJob_VendorNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvJobForeignQueryResult FindFirst_APInvJob_VendorNum_Foreign(string company, int vendorNum)
        {
            if (APInvJob_VendorNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvJobForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     select new APInvJobForeignQueryResult()
                     {
                         VendorNumName = row.Name,
                         VendorNumAddress1 = row.Address1,
                         VendorNumVendorID = row.VendorID,
                         VendorNumAddress2 = row.Address2,
                         VendorNumZIP = row.ZIP,
                         VendorNumTermsCode = row.TermsCode,
                         VendorNumCurrencyCode = row.CurrencyCode,
                         VendorNumCity = row.City,
                         VendorNumAddress3 = row.Address3,
                         VendorNumDefaultFOB = row.DefaultFOB,
                         VendorNumCountry = row.Country,
                         VendorNumState = row.State
                     }
                    ).FirstOrDefault();

                APInvJob_VendorNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvJob_VendorNum_Foreign_Query(this.Db, company, vendorNum);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APInvJob_Foreign_Link()
        {
            APInvJobForeignQueryResult APInvJob_InvoiceNum_Foreign_LinkResults;
            APInvJob_InvoiceNum_Foreign_LinkResults = FindFirst_APInvJob_InvoiceNum_Foreign(ttAPInvJob.Company, ttAPInvJob.VendorNum, ttAPInvJob.InvoiceNum);
            if (APInvJob_InvoiceNum_Foreign_LinkResults != null)
            {
                ttAPInvJob.InvoiceNumDescription = APInvJob_InvoiceNum_Foreign_LinkResults.InvoiceNumDescription;
            }
            else
            {
                ttAPInvJob.InvoiceNumDescription = string.Empty;
            }

            APInvJobForeignQueryResult APInvJob_JobNum_Foreign_LinkResults;
            APInvJob_JobNum_Foreign_LinkResults = FindFirst_APInvJob_JobNum_Foreign(ttAPInvJob.Company, ttAPInvJob.JobNum);
            if (APInvJob_JobNum_Foreign_LinkResults != null)
            {
                ttAPInvJob.JobNumPartDescription = APInvJob_JobNum_Foreign_LinkResults.JobNumPartDescription;
            }
            else
            {
                ttAPInvJob.JobNumPartDescription = string.Empty;
            }

            APInvJobForeignQueryResult APInvJob_VendorNum_Foreign_LinkResults;
            APInvJob_VendorNum_Foreign_LinkResults = FindFirst_APInvJob_VendorNum_Foreign(ttAPInvJob.Company, ttAPInvJob.VendorNum);
            if (APInvJob_VendorNum_Foreign_LinkResults != null)
            {
                ttAPInvJob.VendorNumName = APInvJob_VendorNum_Foreign_LinkResults.VendorNumName;
                ttAPInvJob.VendorNumAddress1 = APInvJob_VendorNum_Foreign_LinkResults.VendorNumAddress1;
                ttAPInvJob.VendorNumVendorID = APInvJob_VendorNum_Foreign_LinkResults.VendorNumVendorID;
                ttAPInvJob.VendorNumAddress2 = APInvJob_VendorNum_Foreign_LinkResults.VendorNumAddress2;
                ttAPInvJob.VendorNumZIP = APInvJob_VendorNum_Foreign_LinkResults.VendorNumZIP;
                ttAPInvJob.VendorNumTermsCode = APInvJob_VendorNum_Foreign_LinkResults.VendorNumTermsCode;
                ttAPInvJob.VendorNumCurrencyCode = APInvJob_VendorNum_Foreign_LinkResults.VendorNumCurrencyCode;
                ttAPInvJob.VendorNumCity = APInvJob_VendorNum_Foreign_LinkResults.VendorNumCity;
                ttAPInvJob.VendorNumAddress3 = APInvJob_VendorNum_Foreign_LinkResults.VendorNumAddress3;
                ttAPInvJob.VendorNumDefaultFOB = APInvJob_VendorNum_Foreign_LinkResults.VendorNumDefaultFOB;
                ttAPInvJob.VendorNumCountry = APInvJob_VendorNum_Foreign_LinkResults.VendorNumCountry;
                ttAPInvJob.VendorNumState = APInvJob_VendorNum_Foreign_LinkResults.VendorNumState;
            }
            else
            {
                ttAPInvJob.VendorNumName = string.Empty;
                ttAPInvJob.VendorNumAddress1 = string.Empty;
                ttAPInvJob.VendorNumVendorID = string.Empty;
                ttAPInvJob.VendorNumAddress2 = string.Empty;
                ttAPInvJob.VendorNumZIP = string.Empty;
                ttAPInvJob.VendorNumTermsCode = string.Empty;
                ttAPInvJob.VendorNumCurrencyCode = string.Empty;
                ttAPInvJob.VendorNumCity = string.Empty;
                ttAPInvJob.VendorNumAddress3 = string.Empty;
                ttAPInvJob.VendorNumDefaultFOB = string.Empty;
                ttAPInvJob.VendorNumCountry = string.Empty;
                ttAPInvJob.VendorNumState = string.Empty;
            }
        }
        #endregion APInvJob_Foreign_Link
        #endregion Table APInvJob

        #region Table APInvMsc
        #region GetNewAPInvMsc
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvMsc(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            CurrentFullTableset = ds;

            ttAPInvMsc = (APInvMscRow)InnerGetNew(
                ds.APInvMsc,
                (APInvMscRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvMsc

        #region Events
        partial void APInvMscAfterCreate();
        partial void APInvMscAfterDelete();
        partial void APInvMscAfterGetNew();
        partial void APInvMscAfterGetRows();
        partial void APInvMscAfterUpdate();
        partial void APInvMscBeforeBI();
        partial void APInvMscBeforeCreate();
        partial void APInvMscBeforeDelete();
        partial void APInvMscBeforeGetNew();
        partial void APInvMscBeforeUpdate();
        partial void APInvMscSetDefaults(APInvMscRow row);
        #endregion Events

        #region APInvMsc_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APInvMscForeignQueryResult
        {
            public string InvoiceNumDescription { get; set; }
            public string MiscCodeLCCurrencyCode { get; set; }
            public string MiscCodeLCDisburseMethod { get; set; }
            public string MiscCodeDescription { get; set; }
            public decimal MiscCodeLCAmount { get; set; }
            public string POLineVenPartNum { get; set; }
            public string POLineLineDesc { get; set; }
            public string POLinePartNum { get; set; }
            public string TaxCatIDDescription { get; set; }
            public string VendorNumAddress3 { get; set; }
            public string VendorNumState { get; set; }
            public string VendorNumZIP { get; set; }
            public string VendorNumDefaultFOB { get; set; }
            public string VendorNumCurrencyCode { get; set; }
            public string VendorNumTermsCode { get; set; }
            public string VendorNumAddress2 { get; set; }
            public string VendorNumAddress1 { get; set; }
            public string VendorNumCity { get; set; }
            public string VendorNumName { get; set; }
            public string VendorNumVendorID { get; set; }
            public string VendorNumCountry { get; set; }
        }

        private static Func<ErpContext, string, int, string, APInvMscForeignQueryResult> APInvMsc_InvoiceNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvMscForeignQueryResult FindFirst_APInvMsc_InvoiceNum_Foreign(string company, int vendorNum, string invoiceNum)
        {
            if (APInvMsc_InvoiceNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, APInvMscForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, invoiceNum_ex) =>
                    (from row in dataContext.APInvHed
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.InvoiceNum == invoiceNum_ex
                     select new APInvMscForeignQueryResult()
                     {
                         InvoiceNumDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvMsc_InvoiceNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvMsc_InvoiceNum_Foreign_Query(this.Db, company, vendorNum, invoiceNum);
        }

        private static Func<ErpContext, string, string, APInvMscForeignQueryResult> APInvMsc_MiscCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvMscForeignQueryResult FindFirst_APInvMsc_MiscCode_Foreign(string company, string miscCode)
        {
            if (APInvMsc_MiscCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvMscForeignQueryResult>> expression =
                    (dataContext, company_ex, miscCode_ex) =>
                    (from row in dataContext.PurMisc
                     where row.Company == company_ex
                     && row.MiscCode == miscCode_ex
                     select new APInvMscForeignQueryResult()
                     {
                         MiscCodeLCCurrencyCode = row.LCCurrencyCode,
                         MiscCodeLCDisburseMethod = row.LCDisburseMethod,
                         MiscCodeDescription = row.Description,
                         MiscCodeLCAmount = row.LCAmount
                     }
                    ).FirstOrDefault();

                APInvMsc_MiscCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvMsc_MiscCode_Foreign_Query(this.Db, company, miscCode);
        }

        private static Func<ErpContext, string, int, int, APInvMscForeignQueryResult> APInvMsc_POLine_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvMscForeignQueryResult FindFirst_APInvMsc_POLine_Foreign(string company, int poNum, int poLine)
        {
            if (APInvMsc_POLine_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, int, APInvMscForeignQueryResult>> expression =
                    (dataContext, company_ex, poNum_ex, poLine_ex) =>
                    (from row in dataContext.PODetail
                     where row.Company == company_ex
                     && row.PONUM == poNum_ex
                     && row.POLine == poLine_ex
                     select new APInvMscForeignQueryResult()
                     {
                         POLineVenPartNum = row.VenPartNum,
                         POLineLineDesc = row.LineDesc,
                         POLinePartNum = row.PartNum
                     }
                    ).FirstOrDefault();

                APInvMsc_POLine_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvMsc_POLine_Foreign_Query(this.Db, company, poNum, poLine);
        }

        private static Func<ErpContext, string, string, APInvMscForeignQueryResult> APInvMsc_TaxCatID_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvMscForeignQueryResult FindFirst_APInvMsc_TaxCatID_Foreign(string company, string taxCatID)
        {
            if (APInvMsc_TaxCatID_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvMscForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCatID_ex) =>
                    (from row in dataContext.TaxCat
                     where row.Company == company_ex
                     && row.TaxCatID == taxCatID_ex
                     select new APInvMscForeignQueryResult()
                     {
                         TaxCatIDDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvMsc_TaxCatID_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvMsc_TaxCatID_Foreign_Query(this.Db, company, taxCatID);
        }

        private static Func<ErpContext, string, int, APInvMscForeignQueryResult> APInvMsc_VendorNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvMscForeignQueryResult FindFirst_APInvMsc_VendorNum_Foreign(string company, int vendorNum)
        {
            if (APInvMsc_VendorNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvMscForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     select new APInvMscForeignQueryResult()
                     {
                         VendorNumAddress3 = row.Address3,
                         VendorNumState = row.State,
                         VendorNumZIP = row.ZIP,
                         VendorNumDefaultFOB = row.DefaultFOB,
                         VendorNumCurrencyCode = row.CurrencyCode,
                         VendorNumTermsCode = row.TermsCode,
                         VendorNumAddress2 = row.Address2,
                         VendorNumAddress1 = row.Address1,
                         VendorNumCity = row.City,
                         VendorNumName = row.Name,
                         VendorNumVendorID = row.VendorID,
                         VendorNumCountry = row.Country
                     }
                    ).FirstOrDefault();

                APInvMsc_VendorNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvMsc_VendorNum_Foreign_Query(this.Db, company, vendorNum);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APInvMsc_Foreign_Link()
        {
            APInvMscForeignQueryResult APInvMsc_InvoiceNum_Foreign_LinkResults;
            APInvMsc_InvoiceNum_Foreign_LinkResults = FindFirst_APInvMsc_InvoiceNum_Foreign(ttAPInvMsc.Company, ttAPInvMsc.VendorNum, ttAPInvMsc.InvoiceNum);
            if (APInvMsc_InvoiceNum_Foreign_LinkResults != null)
            {
                ttAPInvMsc.InvoiceNumDescription = APInvMsc_InvoiceNum_Foreign_LinkResults.InvoiceNumDescription;
            }
            else
            {
                ttAPInvMsc.InvoiceNumDescription = string.Empty;
            }

            APInvMscForeignQueryResult APInvMsc_MiscCode_Foreign_LinkResults;
            APInvMsc_MiscCode_Foreign_LinkResults = FindFirst_APInvMsc_MiscCode_Foreign(ttAPInvMsc.Company, ttAPInvMsc.MiscCode);
            if (APInvMsc_MiscCode_Foreign_LinkResults != null)
            {
                ttAPInvMsc.MiscCodeLCCurrencyCode = APInvMsc_MiscCode_Foreign_LinkResults.MiscCodeLCCurrencyCode;
                ttAPInvMsc.MiscCodeLCDisburseMethod = APInvMsc_MiscCode_Foreign_LinkResults.MiscCodeLCDisburseMethod;
                ttAPInvMsc.MiscCodeDescription = APInvMsc_MiscCode_Foreign_LinkResults.MiscCodeDescription;
                ttAPInvMsc.MiscCodeLCAmount = APInvMsc_MiscCode_Foreign_LinkResults.MiscCodeLCAmount;
            }
            else
            {
                ttAPInvMsc.MiscCodeLCCurrencyCode = string.Empty;
                ttAPInvMsc.MiscCodeLCDisburseMethod = string.Empty;
                ttAPInvMsc.MiscCodeDescription = string.Empty;
                ttAPInvMsc.MiscCodeLCAmount = 0m;
            }

            APInvMscForeignQueryResult APInvMsc_POLine_Foreign_LinkResults;
            APInvMsc_POLine_Foreign_LinkResults = FindFirst_APInvMsc_POLine_Foreign(ttAPInvMsc.Company, ttAPInvMsc.PONum, ttAPInvMsc.POLine);
            if (APInvMsc_POLine_Foreign_LinkResults != null)
            {
                ttAPInvMsc.POLineVenPartNum = APInvMsc_POLine_Foreign_LinkResults.POLineVenPartNum;
                ttAPInvMsc.POLineLineDesc = APInvMsc_POLine_Foreign_LinkResults.POLineLineDesc;
                ttAPInvMsc.POLinePartNum = APInvMsc_POLine_Foreign_LinkResults.POLinePartNum;
            }
            else
            {
                ttAPInvMsc.POLineVenPartNum = string.Empty;
                ttAPInvMsc.POLineLineDesc = string.Empty;
                ttAPInvMsc.POLinePartNum = string.Empty;
            }

            APInvMscForeignQueryResult APInvMsc_TaxCatID_Foreign_LinkResults;
            APInvMsc_TaxCatID_Foreign_LinkResults = FindFirst_APInvMsc_TaxCatID_Foreign(ttAPInvMsc.Company, ttAPInvMsc.TaxCatID);
            if (APInvMsc_TaxCatID_Foreign_LinkResults != null)
            {
                ttAPInvMsc.TaxCatIDDescription = APInvMsc_TaxCatID_Foreign_LinkResults.TaxCatIDDescription;
            }
            else
            {
                ttAPInvMsc.TaxCatIDDescription = string.Empty;
            }

            APInvMscForeignQueryResult APInvMsc_VendorNum_Foreign_LinkResults;
            APInvMsc_VendorNum_Foreign_LinkResults = FindFirst_APInvMsc_VendorNum_Foreign(ttAPInvMsc.Company, ttAPInvMsc.VendorNum);
            if (APInvMsc_VendorNum_Foreign_LinkResults != null)
            {
                ttAPInvMsc.VendorNumAddress3 = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumAddress3;
                ttAPInvMsc.VendorNumState = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumState;
                ttAPInvMsc.VendorNumZIP = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumZIP;
                ttAPInvMsc.VendorNumDefaultFOB = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumDefaultFOB;
                ttAPInvMsc.VendorNumCurrencyCode = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumCurrencyCode;
                ttAPInvMsc.VendorNumTermsCode = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumTermsCode;
                ttAPInvMsc.VendorNumAddress2 = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumAddress2;
                ttAPInvMsc.VendorNumAddress1 = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumAddress1;
                ttAPInvMsc.VendorNumCity = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumCity;
                ttAPInvMsc.VendorNumName = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumName;
                ttAPInvMsc.VendorNumVendorID = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumVendorID;
                ttAPInvMsc.VendorNumCountry = APInvMsc_VendorNum_Foreign_LinkResults.VendorNumCountry;
            }
            else
            {
                ttAPInvMsc.VendorNumAddress3 = string.Empty;
                ttAPInvMsc.VendorNumState = string.Empty;
                ttAPInvMsc.VendorNumZIP = string.Empty;
                ttAPInvMsc.VendorNumDefaultFOB = string.Empty;
                ttAPInvMsc.VendorNumCurrencyCode = string.Empty;
                ttAPInvMsc.VendorNumTermsCode = string.Empty;
                ttAPInvMsc.VendorNumAddress2 = string.Empty;
                ttAPInvMsc.VendorNumAddress1 = string.Empty;
                ttAPInvMsc.VendorNumCity = string.Empty;
                ttAPInvMsc.VendorNumName = string.Empty;
                ttAPInvMsc.VendorNumVendorID = string.Empty;
                ttAPInvMsc.VendorNumCountry = string.Empty;
            }
        }
        #endregion APInvMsc_Foreign_Link
        #endregion Table APInvMsc

        #region Table APInvLnMscTax
        #region GetNewAPInvLnMscTax
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvLnMscTax(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, int mscNum, Guid apInvMscSysRowID, string taxCode, string rateCode)
        {
            CurrentFullTableset = ds;

            ttAPInvLnMscTax = (APInvLnMscTaxRow)InnerGetNew(
                ds.APInvLnMscTax,
                (APInvLnMscTaxRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;
                    row.MscNum = mscNum;
                    row.APInvMscSysRowID = apInvMscSysRowID;
                    row.TaxCode = taxCode;
                    row.RateCode = rateCode;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvLnMscTax

        #region Events
        partial void APInvLnMscTaxAfterCreate();
        partial void APInvLnMscTaxAfterDelete();
        partial void APInvLnMscTaxAfterGetNew();
        partial void APInvLnMscTaxAfterGetRows();
        partial void APInvLnMscTaxAfterUpdate();
        partial void APInvLnMscTaxBeforeBI();
        partial void APInvLnMscTaxBeforeCreate();
        partial void APInvLnMscTaxBeforeDelete();
        partial void APInvLnMscTaxBeforeGetNew();
        partial void APInvLnMscTaxBeforeUpdate();
        partial void APInvLnMscTaxSetDefaults(APInvLnMscTaxRow row);
        #endregion Events

        #region APInvLnMscTax_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APInvLnMscTaxForeignQueryResult
        {
            public string InvoiceNumDescription { get; set; }
            public string RateCodeDescription { get; set; }
            public string TaxCodeDescription { get; set; }
            public string VendorNumAddress2 { get; set; }
            public string VendorNumCurrencyCode { get; set; }
            public string VendorNumZIP { get; set; }
            public string VendorNumAddress3 { get; set; }
            public string VendorNumVendorID { get; set; }
            public string VendorNumCountry { get; set; }
            public string VendorNumState { get; set; }
            public string VendorNumName { get; set; }
            public string VendorNumCity { get; set; }
            public string VendorNumTermsCode { get; set; }
            public string VendorNumAddress1 { get; set; }
            public string VendorNumDefaultFOB { get; set; }
        }

        private static Func<ErpContext, string, int, string, APInvLnMscTaxForeignQueryResult> APInvLnMscTax_InvoiceNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvLnMscTaxForeignQueryResult FindFirst_APInvLnMscTax_InvoiceNum_Foreign(string company, int vendorNum, string invoiceNum)
        {
            if (APInvLnMscTax_InvoiceNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, APInvLnMscTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, invoiceNum_ex) =>
                    (from row in dataContext.APInvHed
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.InvoiceNum == invoiceNum_ex
                     select new APInvLnMscTaxForeignQueryResult()
                     {
                         InvoiceNumDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvLnMscTax_InvoiceNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvLnMscTax_InvoiceNum_Foreign_Query(this.Db, company, vendorNum, invoiceNum);
        }

        private static Func<ErpContext, string, string, string, APInvLnMscTaxForeignQueryResult> APInvLnMscTax_RateCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvLnMscTaxForeignQueryResult FindFirst_APInvLnMscTax_RateCode_Foreign(string company, string taxCode, string rateCode)
        {
            if (APInvLnMscTax_RateCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, APInvLnMscTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCode_ex, rateCode_ex) =>
                    (from row in dataContext.SalesTRC
                     where row.Company == company_ex
                     && row.TaxCode == taxCode_ex
                     && row.RateCode == rateCode_ex
                     select new APInvLnMscTaxForeignQueryResult()
                     {
                         RateCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvLnMscTax_RateCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvLnMscTax_RateCode_Foreign_Query(this.Db, company, taxCode, rateCode);
        }

        private static Func<ErpContext, string, string, APInvLnMscTaxForeignQueryResult> APInvLnMscTax_TaxCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvLnMscTaxForeignQueryResult FindFirst_APInvLnMscTax_TaxCode_Foreign(string company, string taxCode)
        {
            if (APInvLnMscTax_TaxCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvLnMscTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCode_ex) =>
                    (from row in dataContext.SalesTax
                     where row.Company == company_ex
                     && row.TaxCode == taxCode_ex
                     select new APInvLnMscTaxForeignQueryResult()
                     {
                         TaxCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvLnMscTax_TaxCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvLnMscTax_TaxCode_Foreign_Query(this.Db, company, taxCode);
        }

        private static Func<ErpContext, string, int, APInvLnMscTaxForeignQueryResult> APInvLnMscTax_VendorNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvLnMscTaxForeignQueryResult FindFirst_APInvLnMscTax_VendorNum_Foreign(string company, int vendorNum)
        {
            if (APInvLnMscTax_VendorNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvLnMscTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     select new APInvLnMscTaxForeignQueryResult()
                     {
                         VendorNumAddress2 = row.Address2,
                         VendorNumCurrencyCode = row.CurrencyCode,
                         VendorNumZIP = row.ZIP,
                         VendorNumAddress3 = row.Address3,
                         VendorNumVendorID = row.VendorID,
                         VendorNumCountry = row.Country,
                         VendorNumState = row.State,
                         VendorNumName = row.Name,
                         VendorNumCity = row.City,
                         VendorNumTermsCode = row.TermsCode,
                         VendorNumAddress1 = row.Address1,
                         VendorNumDefaultFOB = row.DefaultFOB
                     }
                    ).FirstOrDefault();

                APInvLnMscTax_VendorNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvLnMscTax_VendorNum_Foreign_Query(this.Db, company, vendorNum);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APInvLnMscTax_Foreign_Link()
        {
            APInvLnMscTaxForeignQueryResult APInvLnMscTax_InvoiceNum_Foreign_LinkResults;
            APInvLnMscTax_InvoiceNum_Foreign_LinkResults = FindFirst_APInvLnMscTax_InvoiceNum_Foreign(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum, ttAPInvLnMscTax.InvoiceNum);
            if (APInvLnMscTax_InvoiceNum_Foreign_LinkResults != null)
            {
                ttAPInvLnMscTax.InvoiceNumDescription = APInvLnMscTax_InvoiceNum_Foreign_LinkResults.InvoiceNumDescription;
            }
            else
            {
                ttAPInvLnMscTax.InvoiceNumDescription = string.Empty;
            }

            APInvLnMscTaxForeignQueryResult APInvLnMscTax_RateCode_Foreign_LinkResults;
            APInvLnMscTax_RateCode_Foreign_LinkResults = FindFirst_APInvLnMscTax_RateCode_Foreign(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.TaxCode, ttAPInvLnMscTax.RateCode);
            if (APInvLnMscTax_RateCode_Foreign_LinkResults != null)
            {
                ttAPInvLnMscTax.RateCodeDescription = APInvLnMscTax_RateCode_Foreign_LinkResults.RateCodeDescription;
            }
            else
            {
                ttAPInvLnMscTax.RateCodeDescription = string.Empty;
            }

            APInvLnMscTaxForeignQueryResult APInvLnMscTax_TaxCode_Foreign_LinkResults;
            APInvLnMscTax_TaxCode_Foreign_LinkResults = FindFirst_APInvLnMscTax_TaxCode_Foreign(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.TaxCode);
            if (APInvLnMscTax_TaxCode_Foreign_LinkResults != null)
            {
                ttAPInvLnMscTax.TaxCodeDescription = APInvLnMscTax_TaxCode_Foreign_LinkResults.TaxCodeDescription;
            }
            else
            {
                ttAPInvLnMscTax.TaxCodeDescription = string.Empty;
            }

            APInvLnMscTaxForeignQueryResult APInvLnMscTax_VendorNum_Foreign_LinkResults;
            APInvLnMscTax_VendorNum_Foreign_LinkResults = FindFirst_APInvLnMscTax_VendorNum_Foreign(ttAPInvLnMscTax.Company, ttAPInvLnMscTax.VendorNum);
            if (APInvLnMscTax_VendorNum_Foreign_LinkResults != null)
            {
                ttAPInvLnMscTax.VendorNumAddress2 = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumAddress2;
                ttAPInvLnMscTax.VendorNumCurrencyCode = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumCurrencyCode;
                ttAPInvLnMscTax.VendorNumZIP = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumZIP;
                ttAPInvLnMscTax.VendorNumAddress3 = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumAddress3;
                ttAPInvLnMscTax.VendorNumVendorID = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumVendorID;
                ttAPInvLnMscTax.VendorNumCountry = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumCountry;
                ttAPInvLnMscTax.VendorNumState = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumState;
                ttAPInvLnMscTax.VendorNumName = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumName;
                ttAPInvLnMscTax.VendorNumCity = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumCity;
                ttAPInvLnMscTax.VendorNumTermsCode = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumTermsCode;
                ttAPInvLnMscTax.VendorNumAddress1 = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumAddress1;
                ttAPInvLnMscTax.VendorNumDefaultFOB = APInvLnMscTax_VendorNum_Foreign_LinkResults.VendorNumDefaultFOB;
            }
            else
            {
                ttAPInvLnMscTax.VendorNumAddress2 = string.Empty;
                ttAPInvLnMscTax.VendorNumCurrencyCode = string.Empty;
                ttAPInvLnMscTax.VendorNumZIP = string.Empty;
                ttAPInvLnMscTax.VendorNumAddress3 = string.Empty;
                ttAPInvLnMscTax.VendorNumVendorID = string.Empty;
                ttAPInvLnMscTax.VendorNumCountry = string.Empty;
                ttAPInvLnMscTax.VendorNumState = string.Empty;
                ttAPInvLnMscTax.VendorNumName = string.Empty;
                ttAPInvLnMscTax.VendorNumCity = string.Empty;
                ttAPInvLnMscTax.VendorNumTermsCode = string.Empty;
                ttAPInvLnMscTax.VendorNumAddress1 = string.Empty;
                ttAPInvLnMscTax.VendorNumDefaultFOB = string.Empty;
            }
        }
        #endregion APInvLnMscTax_Foreign_Link
        #endregion Table APInvLnMscTax

        #region Table APInvPB
        #region GetNewAPInvPB
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvPB(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            CurrentFullTableset = ds;

            ttAPInvPB = (APInvPBRow)InnerGetNew(
                ds.APInvPB,
                (APInvPBRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvPB

        #region Events
        partial void APInvPBAfterCreate();
        partial void APInvPBAfterDelete();
        partial void APInvPBAfterGetNew();
        partial void APInvPBAfterGetRows();
        partial void APInvPBAfterUpdate();
        partial void APInvPBBeforeBI();
        partial void APInvPBBeforeCreate();
        partial void APInvPBBeforeDelete();
        partial void APInvPBBeforeGetNew();
        partial void APInvPBBeforeUpdate();
        partial void APInvPBSetDefaults(APInvPBRow row);
        #endregion Events

        #region APInvPB_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APInvPBForeignQueryResult
        {
            public string RoleCdRoleDescription { get; set; }
        }

        private static Func<ErpContext, string, string, APInvPBForeignQueryResult> APInvPB_RoleCd_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvPBForeignQueryResult FindFirst_APInvPB_RoleCd_Foreign(string company, string roleCd)
        {
            if (APInvPB_RoleCd_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvPBForeignQueryResult>> expression =
                    (dataContext, company_ex, roleCd_ex) =>
                    (from row in dataContext.RoleCd
                     where row.Company == company_ex
                     && row.RoleCode == roleCd_ex
                     select new APInvPBForeignQueryResult()
                     {
                         RoleCdRoleDescription = row.RoleDescription
                     }
                    ).FirstOrDefault();

                APInvPB_RoleCd_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvPB_RoleCd_Foreign_Query(this.Db, company, roleCd);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APInvPB_Foreign_Link()
        {
            APInvPBForeignQueryResult APInvPB_RoleCd_Foreign_LinkResults;
            APInvPB_RoleCd_Foreign_LinkResults = FindFirst_APInvPB_RoleCd_Foreign(ttAPInvPB.Company, ttAPInvPB.RoleCd);
            if (APInvPB_RoleCd_Foreign_LinkResults != null)
            {
                ttAPInvPB.RoleCdRoleDescription = APInvPB_RoleCd_Foreign_LinkResults.RoleCdRoleDescription;
            }
            else
            {
                ttAPInvPB.RoleCdRoleDescription = string.Empty;
            }
        }
        #endregion APInvPB_Foreign_Link
        #endregion Table APInvPB

        #region Table APLnTax
        #region GetNewAPLnTax
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPLnTax(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, string taxCode, string rateCode)
        {
            CurrentFullTableset = ds;

            ttAPLnTax = (APLnTaxRow)InnerGetNew(
                ds.APLnTax,
                (APLnTaxRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.InvoiceLine = invoiceLine;
                    row.TaxCode = taxCode;
                    row.RateCode = rateCode;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPLnTax

        #region Events
        partial void APLnTaxAfterCreate();
        partial void APLnTaxAfterDelete();
        partial void APLnTaxAfterGetNew();
        partial void APLnTaxAfterGetRows();
        partial void APLnTaxAfterUpdate();
        partial void APLnTaxBeforeBI();
        partial void APLnTaxBeforeCreate();
        partial void APLnTaxBeforeDelete();
        partial void APLnTaxBeforeGetNew();
        partial void APLnTaxBeforeUpdate();
        partial void APLnTaxSetDefaults(APLnTaxRow row);
        #endregion Events

        #region APLnTax_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APLnTaxForeignQueryResult
        {
            public string InvoiceNumDescription { get; set; }
            public string RateCodeDescription { get; set; }
            public string TaxCodeDescription { get; set; }
            public string VendorNumDefaultFOB { get; set; }
            public string VendorNumName { get; set; }
            public string VendorNumState { get; set; }
            public string VendorNumTermsCode { get; set; }
            public string VendorNumVendorID { get; set; }
            public string VendorNumZIP { get; set; }
            public string VendorNumAddress1 { get; set; }
            public string VendorNumAddress2 { get; set; }
            public string VendorNumAddress3 { get; set; }
            public string VendorNumCity { get; set; }
            public string VendorNumCountry { get; set; }
            public string VendorNumCurrencyCode { get; set; }
        }

        private static Func<ErpContext, string, int, string, APLnTaxForeignQueryResult> APLnTax_InvoiceNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APLnTaxForeignQueryResult FindFirst_APLnTax_InvoiceNum_Foreign(string company, int vendorNum, string invoiceNum)
        {
            if (APLnTax_InvoiceNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, APLnTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, invoiceNum_ex) =>
                    (from row in dataContext.APInvHed
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.InvoiceNum == invoiceNum_ex
                     select new APLnTaxForeignQueryResult()
                     {
                         InvoiceNumDescription = row.Description
                     }
                    ).FirstOrDefault();

                APLnTax_InvoiceNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APLnTax_InvoiceNum_Foreign_Query(this.Db, company, vendorNum, invoiceNum);
        }

        private static Func<ErpContext, string, string, string, APLnTaxForeignQueryResult> APLnTax_RateCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APLnTaxForeignQueryResult FindFirst_APLnTax_RateCode_Foreign(string company, string taxCode, string rateCode)
        {
            if (APLnTax_RateCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, APLnTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCode_ex, rateCode_ex) =>
                    (from row in dataContext.SalesTRC
                     where row.Company == company_ex
                     && row.TaxCode == taxCode_ex
                     && row.RateCode == rateCode_ex
                     select new APLnTaxForeignQueryResult()
                     {
                         RateCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APLnTax_RateCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APLnTax_RateCode_Foreign_Query(this.Db, company, taxCode, rateCode);
        }

        private static Func<ErpContext, string, string, APLnTaxForeignQueryResult> APLnTax_TaxCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APLnTaxForeignQueryResult FindFirst_APLnTax_TaxCode_Foreign(string company, string taxCode)
        {
            if (APLnTax_TaxCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APLnTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCode_ex) =>
                    (from row in dataContext.SalesTax
                     where row.Company == company_ex
                     && row.TaxCode == taxCode_ex
                     select new APLnTaxForeignQueryResult()
                     {
                         TaxCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APLnTax_TaxCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APLnTax_TaxCode_Foreign_Query(this.Db, company, taxCode);
        }

        private static Func<ErpContext, string, int, APLnTaxForeignQueryResult> APLnTax_VendorNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APLnTaxForeignQueryResult FindFirst_APLnTax_VendorNum_Foreign(string company, int vendorNum)
        {
            if (APLnTax_VendorNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APLnTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     select new APLnTaxForeignQueryResult()
                     {
                         VendorNumDefaultFOB = row.DefaultFOB,
                         VendorNumName = row.Name,
                         VendorNumState = row.State,
                         VendorNumTermsCode = row.TermsCode,
                         VendorNumVendorID = row.VendorID,
                         VendorNumZIP = row.ZIP,
                         VendorNumAddress1 = row.Address1,
                         VendorNumAddress2 = row.Address2,
                         VendorNumAddress3 = row.Address3,
                         VendorNumCity = row.City,
                         VendorNumCountry = row.Country,
                         VendorNumCurrencyCode = row.CurrencyCode
                     }
                    ).FirstOrDefault();

                APLnTax_VendorNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APLnTax_VendorNum_Foreign_Query(this.Db, company, vendorNum);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APLnTax_Foreign_Link()
        {
            APLnTaxForeignQueryResult APLnTax_InvoiceNum_Foreign_LinkResults;
            APLnTax_InvoiceNum_Foreign_LinkResults = FindFirst_APLnTax_InvoiceNum_Foreign(ttAPLnTax.Company, ttAPLnTax.VendorNum, ttAPLnTax.InvoiceNum);
            if (APLnTax_InvoiceNum_Foreign_LinkResults != null)
            {
                ttAPLnTax.InvoiceNumDescription = APLnTax_InvoiceNum_Foreign_LinkResults.InvoiceNumDescription;
            }
            else
            {
                ttAPLnTax.InvoiceNumDescription = string.Empty;
            }

            APLnTaxForeignQueryResult APLnTax_RateCode_Foreign_LinkResults;
            APLnTax_RateCode_Foreign_LinkResults = FindFirst_APLnTax_RateCode_Foreign(ttAPLnTax.Company, ttAPLnTax.TaxCode, ttAPLnTax.RateCode);
            if (APLnTax_RateCode_Foreign_LinkResults != null)
            {
                ttAPLnTax.RateCodeDescription = APLnTax_RateCode_Foreign_LinkResults.RateCodeDescription;
            }
            else
            {
                ttAPLnTax.RateCodeDescription = string.Empty;
            }

            APLnTaxForeignQueryResult APLnTax_TaxCode_Foreign_LinkResults;
            APLnTax_TaxCode_Foreign_LinkResults = FindFirst_APLnTax_TaxCode_Foreign(ttAPLnTax.Company, ttAPLnTax.TaxCode);
            if (APLnTax_TaxCode_Foreign_LinkResults != null)
            {
                ttAPLnTax.TaxCodeDescription = APLnTax_TaxCode_Foreign_LinkResults.TaxCodeDescription;
            }
            else
            {
                ttAPLnTax.TaxCodeDescription = string.Empty;
            }

            APLnTaxForeignQueryResult APLnTax_VendorNum_Foreign_LinkResults;
            APLnTax_VendorNum_Foreign_LinkResults = FindFirst_APLnTax_VendorNum_Foreign(ttAPLnTax.Company, ttAPLnTax.VendorNum);
            if (APLnTax_VendorNum_Foreign_LinkResults != null)
            {
                ttAPLnTax.VendorNumDefaultFOB = APLnTax_VendorNum_Foreign_LinkResults.VendorNumDefaultFOB;
                ttAPLnTax.VendorNumName = APLnTax_VendorNum_Foreign_LinkResults.VendorNumName;
                ttAPLnTax.VendorNumState = APLnTax_VendorNum_Foreign_LinkResults.VendorNumState;
                ttAPLnTax.VendorNumTermsCode = APLnTax_VendorNum_Foreign_LinkResults.VendorNumTermsCode;
                ttAPLnTax.VendorNumVendorID = APLnTax_VendorNum_Foreign_LinkResults.VendorNumVendorID;
                ttAPLnTax.VendorNumZIP = APLnTax_VendorNum_Foreign_LinkResults.VendorNumZIP;
                ttAPLnTax.VendorNumAddress1 = APLnTax_VendorNum_Foreign_LinkResults.VendorNumAddress1;
                ttAPLnTax.VendorNumAddress2 = APLnTax_VendorNum_Foreign_LinkResults.VendorNumAddress2;
                ttAPLnTax.VendorNumAddress3 = APLnTax_VendorNum_Foreign_LinkResults.VendorNumAddress3;
                ttAPLnTax.VendorNumCity = APLnTax_VendorNum_Foreign_LinkResults.VendorNumCity;
                ttAPLnTax.VendorNumCountry = APLnTax_VendorNum_Foreign_LinkResults.VendorNumCountry;
                ttAPLnTax.VendorNumCurrencyCode = APLnTax_VendorNum_Foreign_LinkResults.VendorNumCurrencyCode;
            }
            else
            {
                ttAPLnTax.VendorNumDefaultFOB = string.Empty;
                ttAPLnTax.VendorNumName = string.Empty;
                ttAPLnTax.VendorNumState = string.Empty;
                ttAPLnTax.VendorNumTermsCode = string.Empty;
                ttAPLnTax.VendorNumVendorID = string.Empty;
                ttAPLnTax.VendorNumZIP = string.Empty;
                ttAPLnTax.VendorNumAddress1 = string.Empty;
                ttAPLnTax.VendorNumAddress2 = string.Empty;
                ttAPLnTax.VendorNumAddress3 = string.Empty;
                ttAPLnTax.VendorNumCity = string.Empty;
                ttAPLnTax.VendorNumCountry = string.Empty;
                ttAPLnTax.VendorNumCurrencyCode = string.Empty;
            }
        }
        #endregion APLnTax_Foreign_Link
        #endregion Table APLnTax

        #region Table APInvDtlTGLC
        #region GetNewAPInvDtlTGLC
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvDtlTGLC(ref APInvoiceTableset ds)
        {
            CurrentFullTableset = ds;

            ttAPInvDtlTGLC = (APInvDtlTGLCRow)InnerGetNew(
                ds.APInvDtlTGLC,
                (APInvDtlTGLCRow row) =>
                {

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvDtlTGLC

        #region Events
        partial void APInvDtlTGLCAfterCreate();
        partial void APInvDtlTGLCAfterDelete();
        partial void APInvDtlTGLCAfterGetNew();
        partial void APInvDtlTGLCAfterGetRows();
        partial void APInvDtlTGLCAfterUpdate();
        partial void APInvDtlTGLCBeforeBI();
        partial void APInvDtlTGLCBeforeCreate();
        partial void APInvDtlTGLCBeforeDelete();
        partial void APInvDtlTGLCBeforeGetNew();
        partial void APInvDtlTGLCBeforeUpdate();
        partial void APInvDtlTGLCSetDefaults(APInvDtlTGLCRow row);
        #endregion Events

        #region APInvDtlTGLC_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APInvDtlTGLCForeignQueryResult
        {
            public string COADescription { get; set; }
            public string GLAccountAccountDesc { get; set; }
            public string GLBookCurrencyCode { get; set; }
            public string GLBookDescription { get; set; }
        }

        private static Func<ErpContext, string, string, APInvDtlTGLCForeignQueryResult> APInvDtlTGLC_COA_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlTGLCForeignQueryResult FindFirst_APInvDtlTGLC_COA_Foreign(string company, string coACode)
        {
            if (APInvDtlTGLC_COA_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvDtlTGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, coACode_ex) =>
                    (from row in dataContext.COA
                     where row.Company == company_ex
                     && row.COACode == coACode_ex
                     select new APInvDtlTGLCForeignQueryResult()
                     {
                         COADescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvDtlTGLC_COA_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtlTGLC_COA_Foreign_Query(this.Db, company, coACode);
        }

        private static Func<ErpContext, string, string, string, APInvDtlTGLCForeignQueryResult> APInvDtlTGLC_GLAccount_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlTGLCForeignQueryResult FindFirst_APInvDtlTGLC_GLAccount_Foreign(string company, string coACode, string glAccount)
        {
            if (APInvDtlTGLC_GLAccount_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, APInvDtlTGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, coACode_ex, glAccount_ex) =>
                    (from row in dataContext.GLAcctDisp
                     where row.Company == company_ex
                     && row.COACode == coACode_ex
                     && row.GLAccount == glAccount_ex
                     select new APInvDtlTGLCForeignQueryResult()
                     {
                         GLAccountAccountDesc = row.AccountDesc
                     }
                    ).FirstOrDefault();

                APInvDtlTGLC_GLAccount_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtlTGLC_GLAccount_Foreign_Query(this.Db, company, coACode, glAccount);
        }

        private static Func<ErpContext, string, string, APInvDtlTGLCForeignQueryResult> APInvDtlTGLC_GLBook_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvDtlTGLCForeignQueryResult FindFirst_APInvDtlTGLC_GLBook_Foreign(string company, string bookID)
        {
            if (APInvDtlTGLC_GLBook_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvDtlTGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, bookID_ex) =>
                    (from row in dataContext.GLBook
                     where row.Company == company_ex
                     && row.BookID == bookID_ex
                     select new APInvDtlTGLCForeignQueryResult()
                     {
                         GLBookCurrencyCode = row.CurrencyCode,
                         GLBookDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvDtlTGLC_GLBook_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvDtlTGLC_GLBook_Foreign_Query(this.Db, company, bookID);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APInvDtlTGLC_Foreign_Link()
        {
            APInvDtlTGLCForeignQueryResult APInvDtlTGLC_COA_Foreign_LinkResults;
            APInvDtlTGLC_COA_Foreign_LinkResults = FindFirst_APInvDtlTGLC_COA_Foreign(ttAPInvDtlTGLC.Company, ttAPInvDtlTGLC.COACode);
            if (APInvDtlTGLC_COA_Foreign_LinkResults != null)
            {
                ttAPInvDtlTGLC.COADescription = APInvDtlTGLC_COA_Foreign_LinkResults.COADescription;
            }
            else
            {
                ttAPInvDtlTGLC.COADescription = string.Empty;
            }

            APInvDtlTGLCForeignQueryResult APInvDtlTGLC_GLAccount_Foreign_LinkResults;
            APInvDtlTGLC_GLAccount_Foreign_LinkResults = FindFirst_APInvDtlTGLC_GLAccount_Foreign(ttAPInvDtlTGLC.Company, ttAPInvDtlTGLC.COACode, ttAPInvDtlTGLC.GLAccount);
            if (APInvDtlTGLC_GLAccount_Foreign_LinkResults != null)
            {
                ttAPInvDtlTGLC.GLAccountAccountDesc = APInvDtlTGLC_GLAccount_Foreign_LinkResults.GLAccountAccountDesc;
            }
            else
            {
                ttAPInvDtlTGLC.GLAccountAccountDesc = string.Empty;
            }

            APInvDtlTGLCForeignQueryResult APInvDtlTGLC_GLBook_Foreign_LinkResults;
            APInvDtlTGLC_GLBook_Foreign_LinkResults = FindFirst_APInvDtlTGLC_GLBook_Foreign(ttAPInvDtlTGLC.Company, ttAPInvDtlTGLC.BookID);
            if (APInvDtlTGLC_GLBook_Foreign_LinkResults != null)
            {
                ttAPInvDtlTGLC.GLBookCurrencyCode = APInvDtlTGLC_GLBook_Foreign_LinkResults.GLBookCurrencyCode;
                ttAPInvDtlTGLC.GLBookDescription = APInvDtlTGLC_GLBook_Foreign_LinkResults.GLBookDescription;
            }
            else
            {
                ttAPInvDtlTGLC.GLBookCurrencyCode = string.Empty;
                ttAPInvDtlTGLC.GLBookDescription = string.Empty;
            }
        }
        #endregion APInvDtlTGLC_Foreign_Link
        #endregion Table APInvDtlTGLC

        #region Table APInvHedMscTax
        #region GetNewAPInvHedMscTax
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvHedMscTax(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, int mscNum, Guid apInvMscSysRowID, string taxCode, string rateCode)
        {
            CurrentFullTableset = ds;

            ttAPInvHedMscTax = (APInvHedMscTaxRow)InnerGetNew(
                ds.APInvHedMscTax,
                (APInvHedMscTaxRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.MscNum = mscNum;
                    row.APInvMscSysRowID = apInvMscSysRowID;
                    row.TaxCode = taxCode;
                    row.RateCode = rateCode;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvHedMscTax

        #region Events
        partial void APInvHedMscTaxAfterCreate();
        partial void APInvHedMscTaxAfterDelete();
        partial void APInvHedMscTaxAfterGetNew();
        partial void APInvHedMscTaxAfterGetRows();
        partial void APInvHedMscTaxAfterUpdate();
        partial void APInvHedMscTaxBeforeBI();
        partial void APInvHedMscTaxBeforeCreate();
        partial void APInvHedMscTaxBeforeDelete();
        partial void APInvHedMscTaxBeforeGetNew();
        partial void APInvHedMscTaxBeforeUpdate();
        partial void APInvHedMscTaxSetDefaults(APInvHedMscTaxRow row);
        #endregion Events

        #region APInvHedMscTax_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APInvHedMscTaxForeignQueryResult
        {
            public string InvoiceNumDescription { get; set; }
            public string RateCodeDescription { get; set; }
            public string TaxCodeDescription { get; set; }
            public string VendorNumAddress1 { get; set; }
            public string VendorNumName { get; set; }
            public string VendorNumTermsCode { get; set; }
            public string VendorNumVendorID { get; set; }
            public string VendorNumAddress2 { get; set; }
            public string VendorNumDefaultFOB { get; set; }
            public string VendorNumCity { get; set; }
            public string VendorNumCurrencyCode { get; set; }
            public string VendorNumState { get; set; }
            public string VendorNumAddress3 { get; set; }
            public string VendorNumCountry { get; set; }
            public string VendorNumZIP { get; set; }
        }

        private static Func<ErpContext, string, int, string, APInvHedMscTaxForeignQueryResult> APInvHedMscTax_InvoiceNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedMscTaxForeignQueryResult FindFirst_APInvHedMscTax_InvoiceNum_Foreign(string company, int vendorNum, string invoiceNum)
        {
            if (APInvHedMscTax_InvoiceNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, APInvHedMscTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, invoiceNum_ex) =>
                    (from row in dataContext.APInvHed
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.InvoiceNum == invoiceNum_ex
                     select new APInvHedMscTaxForeignQueryResult()
                     {
                         InvoiceNumDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHedMscTax_InvoiceNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHedMscTax_InvoiceNum_Foreign_Query(this.Db, company, vendorNum, invoiceNum);
        }

        private static Func<ErpContext, string, string, string, APInvHedMscTaxForeignQueryResult> APInvHedMscTax_RateCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedMscTaxForeignQueryResult FindFirst_APInvHedMscTax_RateCode_Foreign(string company, string taxCode, string rateCode)
        {
            if (APInvHedMscTax_RateCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, APInvHedMscTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCode_ex, rateCode_ex) =>
                    (from row in dataContext.SalesTRC
                     where row.Company == company_ex
                     && row.TaxCode == taxCode_ex
                     && row.RateCode == rateCode_ex
                     select new APInvHedMscTaxForeignQueryResult()
                     {
                         RateCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHedMscTax_RateCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHedMscTax_RateCode_Foreign_Query(this.Db, company, taxCode, rateCode);
        }

        private static Func<ErpContext, string, string, APInvHedMscTaxForeignQueryResult> APInvHedMscTax_TaxCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedMscTaxForeignQueryResult FindFirst_APInvHedMscTax_TaxCode_Foreign(string company, string taxCode)
        {
            if (APInvHedMscTax_TaxCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvHedMscTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCode_ex) =>
                    (from row in dataContext.SalesTax
                     where row.Company == company_ex
                     && row.TaxCode == taxCode_ex
                     select new APInvHedMscTaxForeignQueryResult()
                     {
                         TaxCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvHedMscTax_TaxCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHedMscTax_TaxCode_Foreign_Query(this.Db, company, taxCode);
        }

        private static Func<ErpContext, string, int, APInvHedMscTaxForeignQueryResult> APInvHedMscTax_VendorNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvHedMscTaxForeignQueryResult FindFirst_APInvHedMscTax_VendorNum_Foreign(string company, int vendorNum)
        {
            if (APInvHedMscTax_VendorNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvHedMscTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     select new APInvHedMscTaxForeignQueryResult()
                     {
                         VendorNumAddress1 = row.Address1,
                         VendorNumName = row.Name,
                         VendorNumTermsCode = row.TermsCode,
                         VendorNumVendorID = row.VendorID,
                         VendorNumAddress2 = row.Address2,
                         VendorNumDefaultFOB = row.DefaultFOB,
                         VendorNumCity = row.City,
                         VendorNumCurrencyCode = row.CurrencyCode,
                         VendorNumState = row.State,
                         VendorNumAddress3 = row.Address3,
                         VendorNumCountry = row.Country,
                         VendorNumZIP = row.ZIP
                     }
                    ).FirstOrDefault();

                APInvHedMscTax_VendorNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvHedMscTax_VendorNum_Foreign_Query(this.Db, company, vendorNum);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APInvHedMscTax_Foreign_Link()
        {
            APInvHedMscTaxForeignQueryResult APInvHedMscTax_InvoiceNum_Foreign_LinkResults;
            APInvHedMscTax_InvoiceNum_Foreign_LinkResults = FindFirst_APInvHedMscTax_InvoiceNum_Foreign(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum, ttAPInvHedMscTax.InvoiceNum);
            if (APInvHedMscTax_InvoiceNum_Foreign_LinkResults != null)
            {
                ttAPInvHedMscTax.InvoiceNumDescription = APInvHedMscTax_InvoiceNum_Foreign_LinkResults.InvoiceNumDescription;
            }
            else
            {
                ttAPInvHedMscTax.InvoiceNumDescription = string.Empty;
            }

            APInvHedMscTaxForeignQueryResult APInvHedMscTax_RateCode_Foreign_LinkResults;
            APInvHedMscTax_RateCode_Foreign_LinkResults = FindFirst_APInvHedMscTax_RateCode_Foreign(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.TaxCode, ttAPInvHedMscTax.RateCode);
            if (APInvHedMscTax_RateCode_Foreign_LinkResults != null)
            {
                ttAPInvHedMscTax.RateCodeDescription = APInvHedMscTax_RateCode_Foreign_LinkResults.RateCodeDescription;
            }
            else
            {
                ttAPInvHedMscTax.RateCodeDescription = string.Empty;
            }

            APInvHedMscTaxForeignQueryResult APInvHedMscTax_TaxCode_Foreign_LinkResults;
            APInvHedMscTax_TaxCode_Foreign_LinkResults = FindFirst_APInvHedMscTax_TaxCode_Foreign(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.TaxCode);
            if (APInvHedMscTax_TaxCode_Foreign_LinkResults != null)
            {
                ttAPInvHedMscTax.TaxCodeDescription = APInvHedMscTax_TaxCode_Foreign_LinkResults.TaxCodeDescription;
            }
            else
            {
                ttAPInvHedMscTax.TaxCodeDescription = string.Empty;
            }

            APInvHedMscTaxForeignQueryResult APInvHedMscTax_VendorNum_Foreign_LinkResults;
            APInvHedMscTax_VendorNum_Foreign_LinkResults = FindFirst_APInvHedMscTax_VendorNum_Foreign(ttAPInvHedMscTax.Company, ttAPInvHedMscTax.VendorNum);
            if (APInvHedMscTax_VendorNum_Foreign_LinkResults != null)
            {
                ttAPInvHedMscTax.VendorNumAddress1 = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumAddress1;
                ttAPInvHedMscTax.VendorNumName = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumName;
                ttAPInvHedMscTax.VendorNumTermsCode = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumTermsCode;
                ttAPInvHedMscTax.VendorNumVendorID = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumVendorID;
                ttAPInvHedMscTax.VendorNumAddress2 = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumAddress2;
                ttAPInvHedMscTax.VendorNumDefaultFOB = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumDefaultFOB;
                ttAPInvHedMscTax.VendorNumCity = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumCity;
                ttAPInvHedMscTax.VendorNumCurrencyCode = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumCurrencyCode;
                ttAPInvHedMscTax.VendorNumState = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumState;
                ttAPInvHedMscTax.VendorNumAddress3 = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumAddress3;
                ttAPInvHedMscTax.VendorNumCountry = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumCountry;
                ttAPInvHedMscTax.VendorNumZIP = APInvHedMscTax_VendorNum_Foreign_LinkResults.VendorNumZIP;
            }
            else
            {
                ttAPInvHedMscTax.VendorNumAddress1 = string.Empty;
                ttAPInvHedMscTax.VendorNumName = string.Empty;
                ttAPInvHedMscTax.VendorNumTermsCode = string.Empty;
                ttAPInvHedMscTax.VendorNumVendorID = string.Empty;
                ttAPInvHedMscTax.VendorNumAddress2 = string.Empty;
                ttAPInvHedMscTax.VendorNumDefaultFOB = string.Empty;
                ttAPInvHedMscTax.VendorNumCity = string.Empty;
                ttAPInvHedMscTax.VendorNumCurrencyCode = string.Empty;
                ttAPInvHedMscTax.VendorNumState = string.Empty;
                ttAPInvHedMscTax.VendorNumAddress3 = string.Empty;
                ttAPInvHedMscTax.VendorNumCountry = string.Empty;
                ttAPInvHedMscTax.VendorNumZIP = string.Empty;
            }
        }
        #endregion APInvHedMscTax_Foreign_Link
        #endregion Table APInvHedMscTax

        #region Table APInvSched
        #region GetNewAPInvSched
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvSched(ref APInvoiceTableset ds, int vendorNum, string invoiceNum)
        {
            CurrentFullTableset = ds;

            ttAPInvSched = (APInvSchedRow)InnerGetNew(
                ds.APInvSched,
                (APInvSchedRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvSched

        #region Events
        partial void APInvSchedAfterCreate();
        partial void APInvSchedAfterDelete();
        partial void APInvSchedAfterGetNew();
        partial void APInvSchedAfterGetRows();
        partial void APInvSchedAfterUpdate();
        partial void APInvSchedBeforeBI();
        partial void APInvSchedBeforeCreate();
        partial void APInvSchedBeforeDelete();
        partial void APInvSchedBeforeGetNew();
        partial void APInvSchedBeforeUpdate();
        partial void APInvSchedSetDefaults(APInvSchedRow row);
        #endregion Events

        #endregion Table APInvSched

        #region Table APInvTax
        #region GetNewAPInvTax
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewAPInvTax(ref APInvoiceTableset ds, int vendorNum, string invoiceNum, string taxCode, string rateCode)
        {
            CurrentFullTableset = ds;

            ttAPInvTax = (APInvTaxRow)InnerGetNew(
                ds.APInvTax,
                (APInvTaxRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;
                    row.TaxCode = taxCode;
                    row.RateCode = rateCode;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewAPInvTax

        #region Events
        partial void APInvTaxAfterCreate();
        partial void APInvTaxAfterDelete();
        partial void APInvTaxAfterGetNew();
        partial void APInvTaxAfterGetRows();
        partial void APInvTaxAfterUpdate();
        partial void APInvTaxBeforeBI();
        partial void APInvTaxBeforeCreate();
        partial void APInvTaxBeforeDelete();
        partial void APInvTaxBeforeGetNew();
        partial void APInvTaxBeforeUpdate();
        partial void APInvTaxSetDefaults(APInvTaxRow row);
        #endregion Events

        #region APInvTax_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class APInvTaxForeignQueryResult
        {
            public string InvoiceNumDescription { get; set; }
            public string RateCodeDescription { get; set; }
            public string TaxCodeDescription { get; set; }
            public string VendorNumZIP { get; set; }
            public string VendorNumName { get; set; }
            public string VendorNumAddress1 { get; set; }
            public string VendorNumState { get; set; }
            public string VendorNumTermsCode { get; set; }
            public string VendorNumCurrencyCode { get; set; }
            public string VendorNumDefaultFOB { get; set; }
            public string VendorNumAddress3 { get; set; }
            public string VendorNumVendorID { get; set; }
            public string VendorNumCountry { get; set; }
            public string VendorNumCity { get; set; }
            public string VendorNumAddress2 { get; set; }
        }

        private static Func<ErpContext, string, int, string, APInvTaxForeignQueryResult> APInvTax_InvoiceNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvTaxForeignQueryResult FindFirst_APInvTax_InvoiceNum_Foreign(string company, int vendorNum, string invoiceNum)
        {
            if (APInvTax_InvoiceNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, string, APInvTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex, invoiceNum_ex) =>
                    (from row in dataContext.APInvHed
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     && row.InvoiceNum == invoiceNum_ex
                     select new APInvTaxForeignQueryResult()
                     {
                         InvoiceNumDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvTax_InvoiceNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvTax_InvoiceNum_Foreign_Query(this.Db, company, vendorNum, invoiceNum);
        }

        private static Func<ErpContext, string, string, string, APInvTaxForeignQueryResult> APInvTax_RateCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvTaxForeignQueryResult FindFirst_APInvTax_RateCode_Foreign(string company, string taxCode, string rateCode)
        {
            if (APInvTax_RateCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, APInvTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCode_ex, rateCode_ex) =>
                    (from row in dataContext.SalesTRC
                     where row.Company == company_ex
                     && row.TaxCode == taxCode_ex
                     && row.RateCode == rateCode_ex
                     select new APInvTaxForeignQueryResult()
                     {
                         RateCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvTax_RateCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvTax_RateCode_Foreign_Query(this.Db, company, taxCode, rateCode);
        }

        private static Func<ErpContext, string, string, APInvTaxForeignQueryResult> APInvTax_TaxCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvTaxForeignQueryResult FindFirst_APInvTax_TaxCode_Foreign(string company, string taxCode)
        {
            if (APInvTax_TaxCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, APInvTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, taxCode_ex) =>
                    (from row in dataContext.SalesTax
                     where row.Company == company_ex
                     && row.TaxCode == taxCode_ex
                     select new APInvTaxForeignQueryResult()
                     {
                         TaxCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                APInvTax_TaxCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvTax_TaxCode_Foreign_Query(this.Db, company, taxCode);
        }

        private static Func<ErpContext, string, int, APInvTaxForeignQueryResult> APInvTax_VendorNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private APInvTaxForeignQueryResult FindFirst_APInvTax_VendorNum_Foreign(string company, int vendorNum)
        {
            if (APInvTax_VendorNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, APInvTaxForeignQueryResult>> expression =
                    (dataContext, company_ex, vendorNum_ex) =>
                    (from row in dataContext.Vendor
                     where row.Company == company_ex
                     && row.VendorNum == vendorNum_ex
                     select new APInvTaxForeignQueryResult()
                     {
                         VendorNumZIP = row.ZIP,
                         VendorNumName = row.Name,
                         VendorNumAddress1 = row.Address1,
                         VendorNumState = row.State,
                         VendorNumTermsCode = row.TermsCode,
                         VendorNumCurrencyCode = row.CurrencyCode,
                         VendorNumDefaultFOB = row.DefaultFOB,
                         VendorNumAddress3 = row.Address3,
                         VendorNumVendorID = row.VendorID,
                         VendorNumCountry = row.Country,
                         VendorNumCity = row.City,
                         VendorNumAddress2 = row.Address2
                     }
                    ).FirstOrDefault();

                APInvTax_VendorNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return APInvTax_VendorNum_Foreign_Query(this.Db, company, vendorNum);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void APInvTax_Foreign_Link()
        {
            APInvTaxForeignQueryResult APInvTax_InvoiceNum_Foreign_LinkResults;
            APInvTax_InvoiceNum_Foreign_LinkResults = FindFirst_APInvTax_InvoiceNum_Foreign(ttAPInvTax.Company, ttAPInvTax.VendorNum, ttAPInvTax.InvoiceNum);
            if (APInvTax_InvoiceNum_Foreign_LinkResults != null)
            {
                ttAPInvTax.InvoiceNumDescription = APInvTax_InvoiceNum_Foreign_LinkResults.InvoiceNumDescription;
            }
            else
            {
                ttAPInvTax.InvoiceNumDescription = string.Empty;
            }

            APInvTaxForeignQueryResult APInvTax_RateCode_Foreign_LinkResults;
            APInvTax_RateCode_Foreign_LinkResults = FindFirst_APInvTax_RateCode_Foreign(ttAPInvTax.Company, ttAPInvTax.TaxCode, ttAPInvTax.RateCode);
            if (APInvTax_RateCode_Foreign_LinkResults != null)
            {
                ttAPInvTax.RateCodeDescription = APInvTax_RateCode_Foreign_LinkResults.RateCodeDescription;
            }
            else
            {
                ttAPInvTax.RateCodeDescription = string.Empty;
            }

            APInvTaxForeignQueryResult APInvTax_TaxCode_Foreign_LinkResults;
            APInvTax_TaxCode_Foreign_LinkResults = FindFirst_APInvTax_TaxCode_Foreign(ttAPInvTax.Company, ttAPInvTax.TaxCode);
            if (APInvTax_TaxCode_Foreign_LinkResults != null)
            {
                ttAPInvTax.TaxCodeDescription = APInvTax_TaxCode_Foreign_LinkResults.TaxCodeDescription;
            }
            else
            {
                ttAPInvTax.TaxCodeDescription = string.Empty;
            }

            APInvTaxForeignQueryResult APInvTax_VendorNum_Foreign_LinkResults;
            APInvTax_VendorNum_Foreign_LinkResults = FindFirst_APInvTax_VendorNum_Foreign(ttAPInvTax.Company, ttAPInvTax.VendorNum);
            if (APInvTax_VendorNum_Foreign_LinkResults != null)
            {
                ttAPInvTax.VendorNumZIP = APInvTax_VendorNum_Foreign_LinkResults.VendorNumZIP;
                ttAPInvTax.VendorNumName = APInvTax_VendorNum_Foreign_LinkResults.VendorNumName;
                ttAPInvTax.VendorNumAddress1 = APInvTax_VendorNum_Foreign_LinkResults.VendorNumAddress1;
                ttAPInvTax.VendorNumState = APInvTax_VendorNum_Foreign_LinkResults.VendorNumState;
                ttAPInvTax.VendorNumTermsCode = APInvTax_VendorNum_Foreign_LinkResults.VendorNumTermsCode;
                ttAPInvTax.VendorNumCurrencyCode = APInvTax_VendorNum_Foreign_LinkResults.VendorNumCurrencyCode;
                ttAPInvTax.VendorNumDefaultFOB = APInvTax_VendorNum_Foreign_LinkResults.VendorNumDefaultFOB;
                ttAPInvTax.VendorNumAddress3 = APInvTax_VendorNum_Foreign_LinkResults.VendorNumAddress3;
                ttAPInvTax.VendorNumVendorID = APInvTax_VendorNum_Foreign_LinkResults.VendorNumVendorID;
                ttAPInvTax.VendorNumCountry = APInvTax_VendorNum_Foreign_LinkResults.VendorNumCountry;
                ttAPInvTax.VendorNumCity = APInvTax_VendorNum_Foreign_LinkResults.VendorNumCity;
                ttAPInvTax.VendorNumAddress2 = APInvTax_VendorNum_Foreign_LinkResults.VendorNumAddress2;
            }
            else
            {
                ttAPInvTax.VendorNumZIP = string.Empty;
                ttAPInvTax.VendorNumName = string.Empty;
                ttAPInvTax.VendorNumAddress1 = string.Empty;
                ttAPInvTax.VendorNumState = string.Empty;
                ttAPInvTax.VendorNumTermsCode = string.Empty;
                ttAPInvTax.VendorNumCurrencyCode = string.Empty;
                ttAPInvTax.VendorNumDefaultFOB = string.Empty;
                ttAPInvTax.VendorNumAddress3 = string.Empty;
                ttAPInvTax.VendorNumVendorID = string.Empty;
                ttAPInvTax.VendorNumCountry = string.Empty;
                ttAPInvTax.VendorNumCity = string.Empty;
                ttAPInvTax.VendorNumAddress2 = string.Empty;
            }
        }
        #endregion APInvTax_Foreign_Link
        #endregion Table APInvTax

        #region Table PESUNATDtl
        #region GetNewPESUNATDtl
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewPESUNATDtl(ref APInvoiceTableset ds, int vendorNum, string invoiceNum)
        {
            CurrentFullTableset = ds;

            ttPESUNATDtl = (PESUNATDtlRow)InnerGetNew(
                ds.PESUNATDtl,
                (PESUNATDtlRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewPESUNATDtl

        #region Events
        partial void PESUNATDtlAfterCreate();
        partial void PESUNATDtlAfterDelete();
        partial void PESUNATDtlAfterGetNew();
        partial void PESUNATDtlAfterGetRows();
        partial void PESUNATDtlAfterUpdate();
        partial void PESUNATDtlBeforeBI();
        partial void PESUNATDtlBeforeCreate();
        partial void PESUNATDtlBeforeDelete();
        partial void PESUNATDtlBeforeGetNew();
        partial void PESUNATDtlBeforeUpdate();
        partial void PESUNATDtlSetDefaults(PESUNATDtlRow row);
        #endregion Events

        #endregion Table PESUNATDtl

        #region Table EntityGLC
        #region GetNewEntityGLC
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewEntityGLC(ref APInvoiceTableset ds, string relatedToFile, string key1, string key2, string key3, string key4, string key5, string key6)
        {
            CurrentFullTableset = ds;

            ttEntityGLC = (EntityGLCRow)InnerGetNew(
                ds.EntityGLC,
                (EntityGLCRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.RelatedToFile = relatedToFile;
                    row.Key1 = key1;
                    row.Key2 = key2;
                    row.Key3 = key3;
                    row.Key4 = key4;
                    row.Key5 = key5;
                    row.Key6 = key6;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewEntityGLC

        #region Events
        partial void EntityGLCAfterCreate();
        partial void EntityGLCAfterDelete();
        partial void EntityGLCAfterGetNew();
        partial void EntityGLCAfterGetRows();
        partial void EntityGLCAfterUpdate();
        partial void EntityGLCBeforeBI();
        partial void EntityGLCBeforeCreate();
        partial void EntityGLCBeforeDelete();
        partial void EntityGLCBeforeGetNew();
        partial void EntityGLCBeforeUpdate();
        partial void EntityGLCSetDefaults(EntityGLCRow row);
        #endregion Events

        #region EntityGLC_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class EntityGLCForeignQueryResult
        {
            public string GLCntrlDescription { get; set; }
            public string GLCntrlTypeDescription { get; set; }
        }

        private static Func<ErpContext, string, string, string, EntityGLCForeignQueryResult> EntityGLC_GLCntrl_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private EntityGLCForeignQueryResult FindFirst_EntityGLC_GLCntrl_Foreign(string company, string glControlType, string glControlCode)
        {
            if (EntityGLC_GLCntrl_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, EntityGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, glControlType_ex, glControlCode_ex) =>
                    (from row in dataContext.GLCntrl
                     where row.Company == company_ex
                     && row.GLControlType == glControlType_ex
                     && row.GLControlCode == glControlCode_ex
                     select new EntityGLCForeignQueryResult()
                     {
                         GLCntrlDescription = row.Description
                     }
                    ).FirstOrDefault();

                EntityGLC_GLCntrl_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return EntityGLC_GLCntrl_Foreign_Query(this.Db, company, glControlType, glControlCode);
        }

        private static Func<ErpContext, string, string, EntityGLCForeignQueryResult> EntityGLC_GLCntrlType_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private EntityGLCForeignQueryResult FindFirst_EntityGLC_GLCntrlType_Foreign(string company, string glControlType)
        {
            if (EntityGLC_GLCntrlType_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, EntityGLCForeignQueryResult>> expression =
                    (dataContext, company_ex, glControlType_ex) =>
                    (from row in dataContext.GLCntrlType
                     where row.Company == company_ex
                     && row.GLControlType == glControlType_ex
                     select new EntityGLCForeignQueryResult()
                     {
                         GLCntrlTypeDescription = row.Description
                     }
                    ).FirstOrDefault();

                EntityGLC_GLCntrlType_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return EntityGLC_GLCntrlType_Foreign_Query(this.Db, company, glControlType);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void EntityGLC_Foreign_Link()
        {
            EntityGLCForeignQueryResult EntityGLC_GLCntrl_Foreign_LinkResults;
            EntityGLC_GLCntrl_Foreign_LinkResults = FindFirst_EntityGLC_GLCntrl_Foreign(ttEntityGLC.Company, ttEntityGLC.GLControlType, ttEntityGLC.GLControlCode);
            if (EntityGLC_GLCntrl_Foreign_LinkResults != null)
            {
                ttEntityGLC.GLCntrlDescription = EntityGLC_GLCntrl_Foreign_LinkResults.GLCntrlDescription;
            }
            else
            {
                ttEntityGLC.GLCntrlDescription = string.Empty;
            }

            EntityGLCForeignQueryResult EntityGLC_GLCntrlType_Foreign_LinkResults;
            EntityGLC_GLCntrlType_Foreign_LinkResults = FindFirst_EntityGLC_GLCntrlType_Foreign(ttEntityGLC.Company, ttEntityGLC.GLControlType);
            if (EntityGLC_GLCntrlType_Foreign_LinkResults != null)
            {
                ttEntityGLC.GLCntrlTypeDescription = EntityGLC_GLCntrlType_Foreign_LinkResults.GLCntrlTypeDescription;
            }
            else
            {
                ttEntityGLC.GLCntrlTypeDescription = string.Empty;
            }
        }
        #endregion EntityGLC_Foreign_Link
        #endregion Table EntityGLC

        #region Table PEAPInvTax
        #region GetNewPEAPInvTax
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewPEAPInvTax(ref APInvoiceTableset ds, int vendorNum, string invoiceNum)
        {
            CurrentFullTableset = ds;

            ttPEAPInvTax = (PEAPInvTaxRow)InnerGetNew(
                ds.PEAPInvTax,
                (PEAPInvTaxRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.VendorNum = vendorNum;
                    row.InvoiceNum = invoiceNum;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewPEAPInvTax

        #region Events
        partial void PEAPInvTaxAfterCreate();
        partial void PEAPInvTaxAfterDelete();
        partial void PEAPInvTaxAfterGetNew();
        partial void PEAPInvTaxAfterGetRows();
        partial void PEAPInvTaxAfterUpdate();
        partial void PEAPInvTaxBeforeBI();
        partial void PEAPInvTaxBeforeCreate();
        partial void PEAPInvTaxBeforeDelete();
        partial void PEAPInvTaxBeforeGetNew();
        partial void PEAPInvTaxBeforeUpdate();
        partial void PEAPInvTaxSetDefaults(PEAPInvTaxRow row);
        #endregion Events

        #endregion Table PEAPInvTax
        #endregion Table Specific Methods

        #region DataSet Methods
        #region DeleteByID
        /// <summary>
        /// Deletes a row given its ID.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void DeleteByID(int vendorNum, string invoiceNum)
        {
            var dbRow = FindFirstAPInvHedByZKey(Session.CompanyID, vendorNum, invoiceNum);

            OnDeleteByID("APInvHed", dbRow);
        }
        #endregion DeleteByID

        #region GetByID
        /// <summary>
        /// Returns a DataSet given the primary key.
        /// </summary>
        /// <returns>The DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        [Ice.Hosting.Http.HttpGet]
        public APInvoiceTableset GetByID(int vendorNum, string invoiceNum)
        {
            CurrentFullTableset = new APInvoiceTableset();
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Company", CallContext.Session.CompanyID);
            parameters.Add("VendorNum", vendorNum);
            parameters.Add("InvoiceNum", invoiceNum);

            InnerGetByID(Db, 0, 0, out bool morePages, CurrentFullTableset, parameters);
            return CurrentFullTableset;
        }
        #endregion GetByID

        #region OnBeforeGetByID
        /// <summary>
        /// Invokes the BeforeBOGetByID method with appropriate parameters.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void OnBeforeGetByID(APInvoiceTableset ds, IEnumerable<KeyValuePair<string, object>> queryParameters)
        {
            BeforeBOGetByID(
                (int)queryParameters.ElementAt(1).Value, //vendorNum
                (string)queryParameters.ElementAt(2).Value //invoiceNum
            );
        }
        #endregion OnBeforeGetByID

        #region GetList
        /// <summary>
        /// Returns a list of rows that satisfy the where clause.
        /// </summary>
        /// <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
        /// <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
        /// <param name="absolutePage">Page of rows to return.</param>
        /// <param name="morePages">Whether there are more pages of rows available.</param>
        /// <returns>The list DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        [Ice.Hosting.Http.HttpGet]
        public APInvHedListTableset GetList(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            CurrentListTableset = new APInvHedListTableset();
            InnerGetList(Db, whereClause, pageSize, absolutePage, CurrentListTableset, out morePages);
            return CurrentListTableset;
        }
        #endregion GetList

        #region GetRows
        /// <summary>
        /// Returns a dataset containing all rows that satisfy the where clauses.
        /// </summary>
        /// <returns>The full DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        [Ice.Hosting.Http.HttpGet]
        public APInvoiceTableset GetRows(string whereClauseAPInvHed, string whereClauseAPInvHedAttch, string whereClauseAPIHAPInvExp, string whereClauseAPIHAPInvExpTGLC, string whereClauseAPIHAPInvMsc, string whereClauseRcvMisc, string whereClauseAPIHAPLnTax, string whereClauseAPInvDtl, string whereClauseAPInvDtlAttch, string whereClauseAPInvDtlDEASch, string whereClauseAPInvExp, string whereClauseAPInvExpTGLC, string whereClauseGlbAPIETGLC, string whereClauseAPInvJob, string whereClauseAPInvMsc, string whereClauseAPInvLnMscTax, string whereClauseAPInvPB, string whereClauseAPLnTax, string whereClauseAPInvDtlTGLC, string whereClauseAPInvHedMscTax, string whereClauseAPInvSched, string whereClauseAPInvTax, string whereClausePESUNATDtl, string whereClauseEntityGLC, string whereClausePEAPInvTax, string whereClauseAdditionalForms_ParametersView, string whereClauseLegalNumGenOpts, string whereClauseSupplierXRef, string whereClauseTaxConnectStatus, int pageSize, int absolutePage, out bool morePages)
        {
            CurrentFullTableset = new APInvoiceTableset();
            Dictionary<IIceTable, string> tableWhereClauses = new Dictionary<IIceTable, string>();
            tableWhereClauses.Add(CurrentFullTableset.APInvHed, whereClauseAPInvHed);
            tableWhereClauses.Add(CurrentFullTableset.APInvHedAttch, whereClauseAPInvHedAttch);
            tableWhereClauses.Add(CurrentFullTableset.APIHAPInvExp, whereClauseAPIHAPInvExp);
            tableWhereClauses.Add(CurrentFullTableset.APIHAPInvExpTGLC, whereClauseAPIHAPInvExpTGLC);
            tableWhereClauses.Add(CurrentFullTableset.APIHAPInvMsc, whereClauseAPIHAPInvMsc);
            tableWhereClauses.Add(CurrentFullTableset.RcvMisc, whereClauseRcvMisc);
            tableWhereClauses.Add(CurrentFullTableset.APIHAPLnTax, whereClauseAPIHAPLnTax);
            tableWhereClauses.Add(CurrentFullTableset.APInvDtl, whereClauseAPInvDtl);
            tableWhereClauses.Add(CurrentFullTableset.APInvDtlAttch, whereClauseAPInvDtlAttch);
            tableWhereClauses.Add(CurrentFullTableset.APInvDtlDEASch, whereClauseAPInvDtlDEASch);
            tableWhereClauses.Add(CurrentFullTableset.APInvExp, whereClauseAPInvExp);
            tableWhereClauses.Add(CurrentFullTableset.APInvExpTGLC, whereClauseAPInvExpTGLC);
            tableWhereClauses.Add(CurrentFullTableset.GlbAPIETGLC, whereClauseGlbAPIETGLC);
            tableWhereClauses.Add(CurrentFullTableset.APInvJob, whereClauseAPInvJob);
            tableWhereClauses.Add(CurrentFullTableset.APInvMsc, whereClauseAPInvMsc);
            tableWhereClauses.Add(CurrentFullTableset.APInvLnMscTax, whereClauseAPInvLnMscTax);
            tableWhereClauses.Add(CurrentFullTableset.APInvPB, whereClauseAPInvPB);
            tableWhereClauses.Add(CurrentFullTableset.APLnTax, whereClauseAPLnTax);
            tableWhereClauses.Add(CurrentFullTableset.APInvDtlTGLC, whereClauseAPInvDtlTGLC);
            tableWhereClauses.Add(CurrentFullTableset.APInvHedMscTax, whereClauseAPInvHedMscTax);
            tableWhereClauses.Add(CurrentFullTableset.APInvSched, whereClauseAPInvSched);
            tableWhereClauses.Add(CurrentFullTableset.APInvTax, whereClauseAPInvTax);
            tableWhereClauses.Add(CurrentFullTableset.PESUNATDtl, whereClausePESUNATDtl);
            tableWhereClauses.Add(CurrentFullTableset.EntityGLC, whereClauseEntityGLC);
            tableWhereClauses.Add(CurrentFullTableset.PEAPInvTax, whereClausePEAPInvTax);
            tableWhereClauses.Add(CurrentFullTableset.AdditionalForms_ParametersView, whereClauseAdditionalForms_ParametersView);
            tableWhereClauses.Add(CurrentFullTableset.LegalNumGenOpts, whereClauseLegalNumGenOpts);
            tableWhereClauses.Add(CurrentFullTableset.SupplierXRef, whereClauseSupplierXRef);
            tableWhereClauses.Add(CurrentFullTableset.TaxConnectStatus, whereClauseTaxConnectStatus);

            InnerGetRows(Db, pageSize, absolutePage, out morePages, CurrentFullTableset, tableWhereClauses);
            return CurrentFullTableset;
        }
        #endregion GetRows

        #region SysRowID methods

        /// <summary>
        /// </summary>
        [Ice.Hosting.Http.HttpGet]
        public APInvoiceTableset GetBySysRowID(Guid id)
        {
            var whereClause = string.Format("SysRowID = '{0}'", id);

            bool morePages;
            var ds = GetRows(whereClause, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 0, 0, out morePages);

            if (ds.Tables[0].Count <= 0)
            {
                throw new Ice.Common.RecordNotFoundException("Record not found.", ds.Tables[0].TableName, null);
            }

            return ds;
        }

        /// <summary>
        /// </summary>
        [Ice.Hosting.Http.HttpGet]
        public APInvoiceTableset GetBySysRowIDs(System.Collections.Generic.List<Guid> ids)
        {
            if (ids.Count == 0)
                throw new ArgumentException("No IDs sent.");

            var whereClause = new System.Text.StringBuilder("SysRowID in (");
            bool first = true;
            foreach (var id in ids)
            {
                if (first)
                    first = false;
                else
                    whereClause.Append(", ");

                whereClause.AppendFormat("'{0}'", id);
            }

            whereClause.Append(")");

            bool morePages;
            return GetRows(whereClause.ToString(), "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 0, 0, out morePages);
        }

        #endregion

        #region Update
        /// <summary>
        /// Commits the DataSet changes to the data store.
        /// </summary>
        /// <param name="ds">The full DataSet.</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void Update(ref APInvoiceTableset ds)
        {
            this.InnerUpdate<IAPInvoiceUpdater>(Db, ds);

            ds = MainTableSet;
        }
        #endregion Update

        #region UpdateExt
        /// <summary>
        /// Apply input data to service by calling GetByID/GetNew/Update methods.
        /// </summary>
        /// <returns>The dataset with list of errors occurred during update process.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        [Ice.Services.MethodGenerationOptions(SparseCopy = true)]
        public BOUpdErrorTableset UpdateExt(ref UpdExtAPInvoiceTableset ds, bool continueProcessingOnError, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            errorsOccurred = false;
            var errors = new BOUpdErrorTableset();

            if (!OnUpdateExtMultipleHeadersAllowed(ds))
            {
                if (ds.APInvHed.Where(n => n.VendorNum == 0).Count() > 1)
                {
                    errorsOccurred = true;
                    CreateValidationErrorForUpdateExt(errors, UpdateExtValidationErrorType.BusinessObjectDoesNotSupportMultipleNew, ds.APInvHed.TableName);
                    return errors;
                }
            }
            var returnDs = new UpdExtAPInvoiceTableset();
            var initializedTableset = new UpdExtAPInvoiceTableset();

            ds = (UpdExtAPInvoiceTableset)InnerUpdateExt(ds, returnDs, initializedTableset, continueProcessingOnError, rollbackParentOnChildError, errors, out errorsOccurred);
            return errors;
        }

        /// <inheritdoc />
        protected override IDisposable GetServiceForUpdateExt()
        {
            return Ice.Assemblies.ServiceRenderer.GetService<APInvoiceSvcContract>(this.Db);
        }

        /// <inheritdoc />
        protected override APInvoiceTableset GetByIdForUpdateExt(object serviceObject, IceRow originalParentRecord)
        {
            var service = (APInvoiceSvcContract)serviceObject;
            return service?.GetByID((int)originalParentRecord["VendorNum"], (string)originalParentRecord["InvoiceNum"]);
        }

        /// <inheritdoc />
        protected override void GetNewForUpdateExt(object serviceObject, string tableName, ref APInvoiceTableset workingTs, IceRow currentRecord, IceRow updatedParentRecord)
        {
            var service = (APInvoiceSvcContract)serviceObject;
            switch (tableName)
            {
                case "APInvHed":
                    service?.GetNewAPInvHed(ref workingTs
                     , (int)currentRecord["VendorNum"]
                    );
                    break;
                case "APInvHedAttch":
                    service?.GetNewAPInvHedAttch(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"]
                    );
                    break;
                case "APIHAPInvExp":
                    service?.GetNewAPIHAPInvExp(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)currentRecord["InvoiceLine"]
                    );
                    break;
                case "APIHAPInvExpTGLC":
                    service?.GetNewAPIHAPInvExpTGLC(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)updatedParentRecord["InvoiceLine"], (int)updatedParentRecord["InvExpSeq"]
                    );
                    break;
                case "APIHAPInvMsc":
                    service?.GetNewAPIHAPInvMsc(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)currentRecord["InvoiceLine"]
                    );
                    break;
                case "RcvMisc":
                    service?.GetNewRcvMisc(ref workingTs
                     , (int)currentRecord["VendorNum"], (string)currentRecord["PurPoint"], (string)currentRecord["PackSlip"]
                    );
                    break;
                case "APIHAPLnTax":
                    service?.GetNewAPIHAPLnTax(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)currentRecord["InvoiceLine"], (string)currentRecord["TaxCode"], (string)currentRecord["RateCode"]
                    );
                    break;
                case "APInvDtl":
                    service?.GetNewAPInvDtl(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"]
                    );
                    break;
                case "APInvDtlAttch":
                    service?.GetNewAPInvDtlAttch(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)updatedParentRecord["InvoiceLine"]
                    );
                    break;
                case "APInvDtlDEASch":
                    service?.GetNewAPInvDtlDEASch(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)updatedParentRecord["InvoiceLine"]
                    );
                    break;
                case "APInvExp":
                    service?.GetNewAPInvExp(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)updatedParentRecord["InvoiceLine"]
                    );
                    break;
                case "APInvExpTGLC":
                    service?.GetNewAPInvExpTGLC(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)updatedParentRecord["InvoiceLine"], (int)updatedParentRecord["InvExpSeq"]
                    );
                    break;
                case "GlbAPIETGLC":
                    service?.GetNewGlbAPIETGLC(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)updatedParentRecord["InvoiceLine"], (int)updatedParentRecord["InvExpSeq"]
                    );
                    break;
                case "APInvJob":
                    service?.GetNewAPInvJob(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)updatedParentRecord["InvoiceLine"], (string)currentRecord["JobNum"], (int)currentRecord["AssemblySeq"], (int)currentRecord["MtlSeq"]
                    );
                    break;
                case "APInvMsc":
                    service?.GetNewAPInvMsc(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)updatedParentRecord["InvoiceLine"]
                    );
                    break;
                case "APInvLnMscTax":
                    service?.GetNewAPInvLnMscTax(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)updatedParentRecord["InvoiceLine"], (int)updatedParentRecord["MscNum"], (Guid)currentRecord["APInvMscSysRowID"], (string)currentRecord["TaxCode"], (string)currentRecord["RateCode"]
                    );
                    break;
                case "APInvPB":
                    service?.GetNewAPInvPB(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)updatedParentRecord["InvoiceLine"]
                    );
                    break;
                case "APLnTax":
                    service?.GetNewAPLnTax(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)updatedParentRecord["InvoiceLine"], (string)currentRecord["TaxCode"], (string)currentRecord["RateCode"]
                    );
                    break;
                case "APInvDtlTGLC":
                    service?.GetNewAPInvDtlTGLC(ref workingTs
                    );
                    break;
                case "APInvHedMscTax":
                    service?.GetNewAPInvHedMscTax(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (int)currentRecord["MscNum"], (Guid)currentRecord["APInvMscSysRowID"], (string)currentRecord["TaxCode"], (string)currentRecord["RateCode"]
                    );
                    break;
                case "APInvSched":
                    service?.GetNewAPInvSched(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"]
                    );
                    break;
                case "APInvTax":
                    service?.GetNewAPInvTax(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"], (string)currentRecord["TaxCode"], (string)currentRecord["RateCode"]
                    );
                    break;
                case "PESUNATDtl":
                    service?.GetNewPESUNATDtl(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"]
                    );
                    break;
                case "EntityGLC":
                    service?.GetNewEntityGLC(ref workingTs
                     , (string)currentRecord["RelatedToFile"], (string)currentRecord["Key1"], (string)currentRecord["Key2"], (string)currentRecord["Key3"], (string)currentRecord["Key4"], (string)currentRecord["Key5"], (string)currentRecord["Key6"]
                    );
                    break;
                case "PEAPInvTax":
                    service?.GetNewPEAPInvTax(ref workingTs
                     , (int)updatedParentRecord["VendorNum"], (string)updatedParentRecord["InvoiceNum"]
                    );
                    break;
            }
        }

        /// <inheritdoc />
        protected override void UpdateForUpdateExt(object serviceObject, ref APInvoiceTableset workingTs)
        {
            var service = (APInvoiceSvcContract)serviceObject;
            service?.Update(ref workingTs);
        }

        /// <inheritdoc />
        protected override List<IceRow> GetChildRowsForUpdateExt(string tableName, IceRow originalParentRecord, Ice.Tableset.TableRelation parentToChildRelation)
        {
            var rows = new List<IceRow>();
            switch (tableName)
            {
                case "APInvHed":
                    rows = GetChildRowsForUpdateExt<APInvHedRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvHedAttch":
                    rows = GetChildRowsForUpdateExt<APInvHedAttchRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APIHAPInvExp":
                    rows = GetChildRowsForUpdateExt<APIHAPInvExpRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APIHAPInvExpTGLC":
                    rows = GetChildRowsForUpdateExt<APIHAPInvExpTGLCRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APIHAPInvMsc":
                    rows = GetChildRowsForUpdateExt<APIHAPInvMscRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "RcvMisc":
                    rows = GetChildRowsForUpdateExt<RcvMiscRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APIHAPLnTax":
                    rows = GetChildRowsForUpdateExt<APIHAPLnTaxRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvDtl":
                    rows = GetChildRowsForUpdateExt<APInvDtlRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvDtlAttch":
                    rows = GetChildRowsForUpdateExt<APInvDtlAttchRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvDtlDEASch":
                    rows = GetChildRowsForUpdateExt<APInvDtlDEASchRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvExp":
                    rows = GetChildRowsForUpdateExt<APInvExpRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvExpTGLC":
                    rows = GetChildRowsForUpdateExt<APInvExpTGLCRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "GlbAPIETGLC":
                    rows = GetChildRowsForUpdateExt<GlbAPIETGLCRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvJob":
                    rows = GetChildRowsForUpdateExt<APInvJobRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvMsc":
                    rows = GetChildRowsForUpdateExt<APInvMscRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvLnMscTax":
                    rows = GetChildRowsForUpdateExt<APInvLnMscTaxRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvPB":
                    rows = GetChildRowsForUpdateExt<APInvPBRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APLnTax":
                    rows = GetChildRowsForUpdateExt<APLnTaxRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvDtlTGLC":
                    rows = GetChildRowsForUpdateExt<APInvDtlTGLCRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvHedMscTax":
                    rows = GetChildRowsForUpdateExt<APInvHedMscTaxRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvSched":
                    rows = GetChildRowsForUpdateExt<APInvSchedRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "APInvTax":
                    rows = GetChildRowsForUpdateExt<APInvTaxRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PESUNATDtl":
                    rows = GetChildRowsForUpdateExt<PESUNATDtlRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "EntityGLC":
                    rows = GetChildRowsForUpdateExt<EntityGLCRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PEAPInvTax":
                    rows = GetChildRowsForUpdateExt<PEAPInvTaxRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "AdditionalForms_ParametersView":
                    rows = GetChildRowsForUpdateExt<AdditionalForms_ParametersViewRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "LegalNumGenOpts":
                    rows = GetChildRowsForUpdateExt<LegalNumGenOptsRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "SupplierXRef":
                    rows = GetChildRowsForUpdateExt<SupplierXRefRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "TaxConnectStatus":
                    rows = GetChildRowsForUpdateExt<TaxConnectStatusRow>(parentToChildRelation, originalParentRecord);
                    break;
            }
            return rows;
        }

        #endregion UpdateExt
        #endregion DataSet Methods

        #region Attachments

        partial void APInvHedAttchBeforeGetNew()
        {
            Ice.Services.Attachment.AssertIsLicensed();
        }

        partial void APInvHedAttchBeforeUpdate()
        {
            var parent = (from r in Db.APInvHed where r.Company == ttAPInvHedAttch.Company && r.VendorNum == ttAPInvHedAttch.VendorNum && r.InvoiceNum == ttAPInvHedAttch.InvoiceNum select r).FirstOrDefault();

            Ice.Services.Attachment.BeforeUpdate(Db, APInvHedAttch, parent, ttAPInvHedAttch, ttAPInvHedAttch.Company, ttAPInvHedAttch.VendorNum.ToString(), ttAPInvHedAttch.InvoiceNum, "", "", "", "");
        }

        partial void APInvDtlAttchBeforeGetNew()
        {
            Ice.Services.Attachment.AssertIsLicensed();
        }

        partial void APInvDtlAttchBeforeUpdate()
        {
            var parent = (from r in Db.APInvDtl where r.Company == ttAPInvDtlAttch.Company && r.VendorNum == ttAPInvDtlAttch.VendorNum && r.InvoiceNum == ttAPInvDtlAttch.InvoiceNum && r.InvoiceLine == ttAPInvDtlAttch.InvoiceLine select r).FirstOrDefault();

            Ice.Services.Attachment.BeforeUpdate(Db, APInvDtlAttch, parent, ttAPInvDtlAttch, ttAPInvDtlAttch.Company, ttAPInvDtlAttch.VendorNum.ToString(), ttAPInvDtlAttch.InvoiceNum, ttAPInvDtlAttch.InvoiceLine.ToString(), "", "", "");
        }

        #endregion
    }
}
