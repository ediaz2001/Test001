#pragma warning disable 1591    // Disable XML comment warnings for this file.

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;

using Epicor.Data;
using Epicor.Hosting;

using Ice;

#region Service related namespaces

using Erp.Contracts;
using Erp.Tablesets;

#endregion // Service related namespaces

namespace Erp.Services.BO
{
    [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
    public sealed class APInvoiceSvcFacade : Epicor.Customization.Bpm.SvcFacadeBase<ErpContext, APInvoiceSvcContract, APInvoiceSvc>, APInvoiceSvcContract
    {
        #region Data members

        #endregion // Data members

        public APInvoiceSvcFacade()
            : base("Erp:BO:APInvoice")
        {
        }

        public APInvoiceSvcFacade(ErpContext ctx)
            : base("Erp:BO:APInvoice", ctx)
        {
        }

        #region APInvoiceSvcContract Members

        public void InvokeLocateGroupID(string ipLocGrpInvoiceNum, string ipLocGrpVendorID, out string outLocGrpVendorID, out string GroupID)
        {
            try
            {
                using (var adapter = this.GetImplementation("InvokeLocateGroupID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipLocGrpInvoiceNum", ipLocGrpInvoiceNum);
                        extension___parameters.Add("ipLocGrpVendorID", ipLocGrpVendorID);
                        extension___implementation.BeforeMethod("InvokeLocateGroupID", extension___parameters);
                    }

                    adapter.Impl.InvokeLocateGroupID(ipLocGrpInvoiceNum, ipLocGrpVendorID, out outLocGrpVendorID, out GroupID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipLocGrpInvoiceNum", ipLocGrpInvoiceNum);
                        extension___parameters.Add("ipLocGrpVendorID", ipLocGrpVendorID);
                        extension___parameters.Add("outLocGrpVendorID", outLocGrpVendorID);
                        extension___parameters.Add("GroupID", GroupID);
                        extension___implementation.AfterMethod("InvokeLocateGroupID", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void TransferAPInvoices(string TransferGroupID, string currentGroupID, ref Erp.Tablesets.APInvHedListTableset ds, out string grpNotFound)
        {
            try
            {
                using (var adapter = this.GetImplementation("TransferAPInvoices"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("TransferGroupID", TransferGroupID);
                        extension___parameters.Add("currentGroupID", currentGroupID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("TransferAPInvoices", extension___parameters);
                    }

                    adapter.Impl.TransferAPInvoices(TransferGroupID, currentGroupID, ref ds, out grpNotFound);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("TransferGroupID", TransferGroupID);
                        extension___parameters.Add("currentGroupID", currentGroupID);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("grpNotFound", grpNotFound);
                        extension___implementation.AfterMethod("TransferAPInvoices", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateOriginalInvoice(string ipInvoiceNum, out int opVendorNum, out bool opMultipleInvcsFound)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateOriginalInvoice"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___implementation.BeforeMethod("ValidateOriginalInvoice", extension___parameters);
                    }

                    adapter.Impl.ValidateOriginalInvoice(ipInvoiceNum, out opVendorNum, out opMultipleInvcsFound);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("opVendorNum", opVendorNum);
                        extension___parameters.Add("opMultipleInvcsFound", opMultipleInvcsFound);
                        extension___implementation.AfterMethod("ValidateOriginalInvoice", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SelectUninvoicedRcptLines_AdditionalActions(ref Erp.Tablesets.APInvReceiptBillingTableset ds, int InVendorNum, string InPurPoint, int InPONum, string InPackSlip, bool InDropShip, string InvoiceNum, bool InGRNIClearing)
        {
            try
            {
                using (var adapter = this.GetImplementation("SelectUninvoicedRcptLines_AdditionalActions"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("InVendorNum", InVendorNum);
                        extension___parameters.Add("InPurPoint", InPurPoint);
                        extension___parameters.Add("InPONum", InPONum);
                        extension___parameters.Add("InPackSlip", InPackSlip);
                        extension___parameters.Add("InDropShip", InDropShip);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("InGRNIClearing", InGRNIClearing);
                        extension___implementation.BeforeMethod("SelectUninvoicedRcptLines_AdditionalActions", extension___parameters);
                    }

                    adapter.Impl.SelectUninvoicedRcptLines_AdditionalActions(ref ds, InVendorNum, InPurPoint, InPONum, InPackSlip, InDropShip, InvoiceNum, InGRNIClearing);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("InVendorNum", InVendorNum);
                        extension___parameters.Add("InPurPoint", InPurPoint);
                        extension___parameters.Add("InPONum", InPONum);
                        extension___parameters.Add("InPackSlip", InPackSlip);
                        extension___parameters.Add("InDropShip", InDropShip);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("InGRNIClearing", InGRNIClearing);
                        extension___implementation.AfterMethod("SelectUninvoicedRcptLines_AdditionalActions", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeselectSelectedRcptLines_AdditionalActions(ref Erp.Tablesets.APInvReceiptBillingTableset ds, int VendorNum, string PurPoint, string PackSlip, bool isDropShip, string InvoiceNum, int iPONum)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeselectSelectedRcptLines_AdditionalActions"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("PurPoint", PurPoint);
                        extension___parameters.Add("PackSlip", PackSlip);
                        extension___parameters.Add("isDropShip", isDropShip);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("iPONum", iPONum);
                        extension___implementation.BeforeMethod("DeselectSelectedRcptLines_AdditionalActions", extension___parameters);
                    }

                    adapter.Impl.DeselectSelectedRcptLines_AdditionalActions(ref ds, VendorNum, PurPoint, PackSlip, isDropShip, InvoiceNum, iPONum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("PurPoint", PurPoint);
                        extension___parameters.Add("PackSlip", PackSlip);
                        extension___parameters.Add("isDropShip", isDropShip);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("iPONum", iPONum);
                        extension___implementation.AfterMethod("DeselectSelectedRcptLines_AdditionalActions", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void InvokeInvoiceSelectedLines(ref Erp.Tablesets.APInvReceiptBillingTableset ds, out string opLOCMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("InvokeInvoiceSelectedLines"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("InvokeInvoiceSelectedLines", extension___parameters);
                    }

                    adapter.Impl.InvokeInvoiceSelectedLines(ref ds, out opLOCMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("opLOCMsg", opLOCMsg);
                        extension___implementation.AfterMethod("InvokeInvoiceSelectedLines", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AddPOMiscChrgToInvoiceHead(int invHedVendorNum, string invHedInvoiceNum, string poMiscMiscCode, int poMiscPONum, int poMiscSeqNum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("AddPOMiscChrgToInvoiceHead"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("invHedVendorNum", invHedVendorNum);
                        extension___parameters.Add("invHedInvoiceNum", invHedInvoiceNum);
                        extension___parameters.Add("poMiscMiscCode", poMiscMiscCode);
                        extension___parameters.Add("poMiscPONum", poMiscPONum);
                        extension___parameters.Add("poMiscSeqNum", poMiscSeqNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("AddPOMiscChrgToInvoiceHead", extension___parameters);
                    }

                    adapter.Impl.AddPOMiscChrgToInvoiceHead(invHedVendorNum, invHedInvoiceNum, poMiscMiscCode, poMiscPONum, poMiscSeqNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("invHedVendorNum", invHedVendorNum);
                        extension___parameters.Add("invHedInvoiceNum", invHedInvoiceNum);
                        extension___parameters.Add("poMiscMiscCode", poMiscMiscCode);
                        extension___parameters.Add("poMiscPONum", poMiscPONum);
                        extension___parameters.Add("poMiscSeqNum", poMiscSeqNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("AddPOMiscChrgToInvoiceHead", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AddPOMiscChrgToInvoiceLine(int InvDtlVendorNum, string InvDtlInvoiceNum, int InvDtlInvoiceLine, int POMiscPOLine, int POMiscSeqNum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("AddPOMiscChrgToInvoiceLine"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("InvDtlVendorNum", InvDtlVendorNum);
                        extension___parameters.Add("InvDtlInvoiceNum", InvDtlInvoiceNum);
                        extension___parameters.Add("InvDtlInvoiceLine", InvDtlInvoiceLine);
                        extension___parameters.Add("POMiscPOLine", POMiscPOLine);
                        extension___parameters.Add("POMiscSeqNum", POMiscSeqNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("AddPOMiscChrgToInvoiceLine", extension___parameters);
                    }

                    adapter.Impl.AddPOMiscChrgToInvoiceLine(InvDtlVendorNum, InvDtlInvoiceNum, InvDtlInvoiceLine, POMiscPOLine, POMiscSeqNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("InvDtlVendorNum", InvDtlVendorNum);
                        extension___parameters.Add("InvDtlInvoiceNum", InvDtlInvoiceNum);
                        extension___parameters.Add("InvDtlInvoiceLine", InvDtlInvoiceLine);
                        extension___parameters.Add("POMiscPOLine", POMiscPOLine);
                        extension___parameters.Add("POMiscSeqNum", POMiscSeqNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("AddPOMiscChrgToInvoiceLine", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AllocateLateCost(ref Erp.Tablesets.LateCostLinesTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("AllocateLateCost"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("AllocateLateCost", extension___parameters);
                    }

                    adapter.Impl.AllocateLateCost(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("AllocateLateCost", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvoiceTableset GetRowsForTracker(int vendnum, bool all, bool open, int fromDays, bool inRange)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRowsForTracker"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendnum", vendnum);
                        extension___parameters.Add("all", all);
                        extension___parameters.Add("open", open);
                        extension___parameters.Add("fromDays", fromDays);
                        extension___parameters.Add("inRange", inRange);
                        extension___implementation.BeforeMethod("GetRowsForTracker", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRowsForTracker(vendnum, all, open, fromDays, inRange);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendnum", vendnum);
                        extension___parameters.Add("all", all);
                        extension___parameters.Add("open", open);
                        extension___parameters.Add("fromDays", fromDays);
                        extension___parameters.Add("inRange", inRange);
                        extension___implementation.AfterMethod("GetRowsForTracker", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvoiceTableset GetRowsForTrackerSite(int vendnum, bool all, bool open, int fromDays, bool inRange, string plant)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRowsForTrackerSite"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendnum", vendnum);
                        extension___parameters.Add("all", all);
                        extension___parameters.Add("open", open);
                        extension___parameters.Add("fromDays", fromDays);
                        extension___parameters.Add("inRange", inRange);
                        extension___parameters.Add("plant", plant);
                        extension___implementation.BeforeMethod("GetRowsForTrackerSite", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRowsForTrackerSite(vendnum, all, open, fromDays, inRange, plant);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendnum", vendnum);
                        extension___parameters.Add("all", all);
                        extension___parameters.Add("open", open);
                        extension___parameters.Add("fromDays", fromDays);
                        extension___parameters.Add("inRange", inRange);
                        extension___parameters.Add("plant", plant);
                        extension___implementation.AfterMethod("GetRowsForTrackerSite", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool GetSiteIsLegalEntity()
        {
            try
            {
                using (var adapter = this.GetImplementation("GetSiteIsLegalEntity"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetSiteIsLegalEntity", extension___parameters);
                    }

                    var _return = adapter.Impl.GetSiteIsLegalEntity();

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.AfterMethod("GetSiteIsLegalEntity", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AssignLegalNumber(string inGroupID, int inVendor, string inInvNum, out string opLegalNumMsg, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("AssignLegalNumber"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inGroupID", inGroupID);
                        extension___parameters.Add("inVendor", inVendor);
                        extension___parameters.Add("inInvNum", inInvNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("AssignLegalNumber", extension___parameters);
                    }

                    adapter.Impl.AssignLegalNumber(inGroupID, inVendor, inInvNum, out opLegalNumMsg, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inGroupID", inGroupID);
                        extension___parameters.Add("inVendor", inVendor);
                        extension___parameters.Add("inInvNum", inInvNum);
                        extension___parameters.Add("opLegalNumMsg", opLegalNumMsg);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("AssignLegalNumber", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CalculateCOIFRS_PV(int vendorNum, string invoiceNum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("CalculateCOIFRS_PV"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CalculateCOIFRS_PV", extension___parameters);
                    }

                    adapter.Impl.CalculateCOIFRS_PV(vendorNum, invoiceNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("CalculateCOIFRS_PV", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void Update_ttAPInvHed(int vendorNum, string invoiceNum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("Update_ttAPInvHed"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("Update_ttAPInvHed", extension___parameters);
                    }

                    adapter.Impl.Update_ttAPInvHed(vendorNum, invoiceNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("Update_ttAPInvHed", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeAPInvSchedPercent(int PaySeqEdited, ref Erp.Tablesets.APInvoiceTableset ts)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeAPInvSchedPercent"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PaySeqEdited", PaySeqEdited);
                        extension___parameters.Add("ts", ts);
                        extension___implementation.BeforeMethod("ChangeAPInvSchedPercent", extension___parameters);
                    }

                    adapter.Impl.ChangeAPInvSchedPercent(PaySeqEdited, ref ts);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PaySeqEdited", PaySeqEdited);
                        extension___parameters.Add("ts", ts);
                        extension___implementation.AfterMethod("ChangeAPInvSchedPercent", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ts);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeAPInvSchedAmount(int PaySeqEdited, ref Erp.Tablesets.APInvoiceTableset ts)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeAPInvSchedAmount"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PaySeqEdited", PaySeqEdited);
                        extension___parameters.Add("ts", ts);
                        extension___implementation.BeforeMethod("ChangeAPInvSchedAmount", extension___parameters);
                    }

                    adapter.Impl.ChangeAPInvSchedAmount(PaySeqEdited, ref ts);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PaySeqEdited", PaySeqEdited);
                        extension___parameters.Add("ts", ts);
                        extension___implementation.AfterMethod("ChangeAPInvSchedAmount", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ts);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeAPInvSchedDays(int PaySeqEdited, ref Erp.Tablesets.APInvoiceTableset ts)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeAPInvSchedDays"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PaySeqEdited", PaySeqEdited);
                        extension___parameters.Add("ts", ts);
                        extension___implementation.BeforeMethod("ChangeAPInvSchedDays", extension___parameters);
                    }

                    adapter.Impl.ChangeAPInvSchedDays(PaySeqEdited, ref ts);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PaySeqEdited", PaySeqEdited);
                        extension___parameters.Add("ts", ts);
                        extension___implementation.AfterMethod("ChangeAPInvSchedDays", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ts);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeAPInvSchedDueDate(int PaySeqEdited, ref Erp.Tablesets.APInvoiceTableset ts)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeAPInvSchedDueDate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PaySeqEdited", PaySeqEdited);
                        extension___parameters.Add("ts", ts);
                        extension___implementation.BeforeMethod("ChangeAPInvSchedDueDate", extension___parameters);
                    }

                    adapter.Impl.ChangeAPInvSchedDueDate(PaySeqEdited, ref ts);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PaySeqEdited", PaySeqEdited);
                        extension___parameters.Add("ts", ts);
                        extension___implementation.AfterMethod("ChangeAPInvSchedDueDate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ts);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeAdjustmentValue(decimal proposedValue, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeAdjustmentValue"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedValue", proposedValue);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeAdjustmentValue", extension___parameters);
                    }

                    adapter.Impl.ChangeAdjustmentValue(proposedValue, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedValue", proposedValue);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeAdjustmentValue", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeAdvancePayAmt(decimal ProposedAdvancePayAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeAdvancePayAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedAdvancePayAmt", ProposedAdvancePayAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeAdvancePayAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeAdvancePayAmt(ProposedAdvancePayAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedAdvancePayAmt", ProposedAdvancePayAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeAdvancePayAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeAssemblySeq(int ProposedAssemblySeq, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeAssemblySeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedAssemblySeq", ProposedAssemblySeq);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeAssemblySeq", extension___parameters);
                    }

                    adapter.Impl.ChangeAssemblySeq(ProposedAssemblySeq, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedAssemblySeq", ProposedAssemblySeq);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeAssemblySeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeCostPerCode(string ProposedCostPerCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeCostPerCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedCostPerCode", ProposedCostPerCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeCostPerCode", extension___parameters);
                    }

                    adapter.Impl.ChangeCostPerCode(ProposedCostPerCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedCostPerCode", ProposedCostPerCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeCostPerCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeCurrency(string ProposedCurrencyCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeCurrency"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedCurrencyCode", ProposedCurrencyCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeCurrency", extension___parameters);
                    }

                    adapter.Impl.ChangeCurrency(ProposedCurrencyCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedCurrencyCode", ProposedCurrencyCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeCurrency", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeCurrencyMaster(string ProposedCurrencyCode, string vRateGrpCode, out decimal vExchangeRate, out string vXRateLabel, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeCurrencyMaster"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedCurrencyCode", ProposedCurrencyCode);
                        extension___parameters.Add("vRateGrpCode", vRateGrpCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeCurrencyMaster", extension___parameters);
                    }

                    adapter.Impl.ChangeCurrencyMaster(ProposedCurrencyCode, vRateGrpCode, out vExchangeRate, out vXRateLabel, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedCurrencyCode", ProposedCurrencyCode);
                        extension___parameters.Add("vRateGrpCode", vRateGrpCode);
                        extension___parameters.Add("vExchangeRate", vExchangeRate);
                        extension___parameters.Add("vXRateLabel", vXRateLabel);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeCurrencyMaster", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeExpHeaderAmt(decimal ProposedAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeExpHeaderAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedAmt", ProposedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeExpHeaderAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeExpHeaderAmt(ProposedAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedAmt", ProposedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeExpHeaderAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeExpLineAmt(decimal ProposedAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeExpLineAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedAmt", ProposedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeExpLineAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeExpLineAmt(ProposedAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedAmt", ProposedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeExpLineAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string GetAPInvoiceRelationshipMap(int vendorNum, string invoiceNum, int maxNumOfCards)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAPInvoiceRelationshipMap"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("maxNumOfCards", maxNumOfCards);
                        extension___implementation.BeforeMethod("GetAPInvoiceRelationshipMap", extension___parameters);
                    }

                    var _return = adapter.Impl.GetAPInvoiceRelationshipMap(vendorNum, invoiceNum, maxNumOfCards);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("maxNumOfCards", maxNumOfCards);
                        extension___implementation.AfterMethod("GetAPInvoiceRelationshipMap", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string GetGLAccountDesc(string Company, string COACode, string GLAcctDisp)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetGLAccountDesc"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("Company", Company);
                        extension___parameters.Add("COACode", COACode);
                        extension___parameters.Add("GLAcctDisp", GLAcctDisp);
                        extension___implementation.BeforeMethod("GetGLAccountDesc", extension___parameters);
                    }

                    var _return = adapter.Impl.GetGLAccountDesc(Company, COACode, GLAcctDisp);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("Company", Company);
                        extension___parameters.Add("COACode", COACode);
                        extension___parameters.Add("GLAcctDisp", GLAcctDisp);
                        extension___implementation.AfterMethod("GetGLAccountDesc", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string GetGBLGLAccountDesc(string ipCompany, string ipExtCompany, string ipCOACode, string ipGLAccount)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetGBLGLAccountDesc"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipCompany", ipCompany);
                        extension___parameters.Add("ipExtCompany", ipExtCompany);
                        extension___parameters.Add("ipCOACode", ipCOACode);
                        extension___parameters.Add("ipGLAccount", ipGLAccount);
                        extension___implementation.BeforeMethod("GetGBLGLAccountDesc", extension___parameters);
                    }

                    var _return = adapter.Impl.GetGBLGLAccountDesc(ipCompany, ipExtCompany, ipCOACode, ipGLAccount);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipCompany", ipCompany);
                        extension___parameters.Add("ipExtCompany", ipExtCompany);
                        extension___parameters.Add("ipCOACode", ipCOACode);
                        extension___parameters.Add("ipGLAccount", ipGLAccount);
                        extension___implementation.AfterMethod("GetGBLGLAccountDesc", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeExtCompanyID(string ProposedExtCompID, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeExtCompanyID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedExtCompID", ProposedExtCompID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeExtCompanyID", extension___parameters);
                    }

                    adapter.Impl.ChangeExtCompanyID(ProposedExtCompID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedExtCompID", ProposedExtCompID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeExtCompanyID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeExtCost(decimal ProposedExtCost, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeExtCost"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedExtCost", ProposedExtCost);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeExtCost", extension___parameters);
                    }

                    adapter.Impl.ChangeExtCost(ProposedExtCost, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedExtCost", ProposedExtCost);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeExtCost", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeFixedAmount(decimal ProposedFixedAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeFixedAmount"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedFixedAmt", ProposedFixedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeFixedAmount", extension___parameters);
                    }

                    adapter.Impl.ChangeFixedAmount(ProposedFixedAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedFixedAmt", ProposedFixedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeFixedAmount", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeFixedHedMscAmount(decimal ProposedFixedAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeFixedHedMscAmount"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedFixedAmt", ProposedFixedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeFixedHedMscAmount", extension___parameters);
                    }

                    adapter.Impl.ChangeFixedHedMscAmount(ProposedFixedAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedFixedAmt", ProposedFixedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeFixedHedMscAmount", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeFixedLineAmount(decimal ProposedFixedAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeFixedLineAmount"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedFixedAmt", ProposedFixedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeFixedLineAmount", extension___parameters);
                    }

                    adapter.Impl.ChangeFixedLineAmount(ProposedFixedAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedFixedAmt", ProposedFixedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeFixedLineAmount", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeFixedLnMscAmount(decimal ProposedFixedAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeFixedLnMscAmount"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedFixedAmt", ProposedFixedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeFixedLnMscAmount", extension___parameters);
                    }

                    adapter.Impl.ChangeFixedLnMscAmount(ProposedFixedAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedFixedAmt", ProposedFixedAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeFixedLnMscAmount", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeGUITaxBasisAmt(decimal proposedGUITaxBasisAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeGUITaxBasisAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedGUITaxBasisAmt", proposedGUITaxBasisAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeGUITaxBasisAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeGUITaxBasisAmt(proposedGUITaxBasisAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedGUITaxBasisAmt", proposedGUITaxBasisAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeGUITaxBasisAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeInvoiceDate(System.DateTime? ProposedInvoiceDate, string recalcAmts, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeInvoiceDate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedInvoiceDate", ProposedInvoiceDate);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeInvoiceDate", extension___parameters);
                    }

                    adapter.Impl.ChangeInvoiceDate(ProposedInvoiceDate, recalcAmts, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedInvoiceDate", ProposedInvoiceDate);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeInvoiceDate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeInvoiceDateEx(System.DateTime? ProposedInvoiceDate, string recalcAmts, out string cMessageText, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeInvoiceDateEx"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedInvoiceDate", ProposedInvoiceDate);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeInvoiceDateEx", extension___parameters);
                    }

                    adapter.Impl.ChangeInvoiceDateEx(ProposedInvoiceDate, recalcAmts, out cMessageText, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedInvoiceDate", ProposedInvoiceDate);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("cMessageText", cMessageText);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeInvoiceDateEx", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeInvoiceDateWithDateCheck(System.DateTime? ProposedInvoiceDate, string recalcAmts, out string cMessageText, out string DateMessage, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeInvoiceDateWithDateCheck"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedInvoiceDate", ProposedInvoiceDate);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeInvoiceDateWithDateCheck", extension___parameters);
                    }

                    adapter.Impl.ChangeInvoiceDateWithDateCheck(ProposedInvoiceDate, recalcAmts, out cMessageText, out DateMessage, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedInvoiceDate", ProposedInvoiceDate);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("cMessageText", cMessageText);
                        extension___parameters.Add("DateMessage", DateMessage);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeInvoiceDateWithDateCheck", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeDueDate(System.DateTime? ProposedDueDate, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeDueDate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedDueDate", ProposedDueDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeDueDate", extension___parameters);
                    }

                    adapter.Impl.ChangeDueDate(ProposedDueDate, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedDueDate", ProposedDueDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeDueDate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeInvoicePurPoint(string purPoint, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeInvoicePurPoint"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeInvoicePurPoint", extension___parameters);
                    }

                    adapter.Impl.ChangeInvoicePurPoint(purPoint, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeInvoicePurPoint", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeInvoiceRef(string ProposedInvoiceRef, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeInvoiceRef"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedInvoiceRef", ProposedInvoiceRef);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeInvoiceRef", extension___parameters);
                    }

                    adapter.Impl.ChangeInvoiceRef(ProposedInvoiceRef, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedInvoiceRef", ProposedInvoiceRef);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeInvoiceRef", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeInvoiceVendorAmt(decimal ProposedInvoiceVendorAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeInvoiceVendorAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedInvoiceVendorAmt", ProposedInvoiceVendorAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeInvoiceVendorAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeInvoiceVendorAmt(ProposedInvoiceVendorAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedInvoiceVendorAmt", ProposedInvoiceVendorAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeInvoiceVendorAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeJobMiscCode(string ProposedJobMisc, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeJobMiscCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedJobMisc", ProposedJobMisc);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeJobMiscCode", extension___parameters);
                    }

                    adapter.Impl.ChangeJobMiscCode(ProposedJobMisc, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedJobMisc", ProposedJobMisc);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeJobMiscCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeJobMiscProject(string propProject, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeJobMiscProject"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("propProject", propProject);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeJobMiscProject", extension___parameters);
                    }

                    adapter.Impl.ChangeJobMiscProject(propProject, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("propProject", propProject);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeJobMiscProject", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeJobNum(string ProposedJobNum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeJobNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedJobNum", ProposedJobNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeJobNum", extension___parameters);
                    }

                    adapter.Impl.ChangeJobNum(ProposedJobNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedJobNum", ProposedJobNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeJobNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeLineDiscAmt(decimal ProposedLineDiscAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeLineDiscAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedLineDiscAmt", ProposedLineDiscAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeLineDiscAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeLineDiscAmt(ProposedLineDiscAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedLineDiscAmt", ProposedLineDiscAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeLineDiscAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeLOCID(string ProposedLOCID, out string outMsg, out string outTermsDiff, out string outLocTerms, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeLOCID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedLOCID", ProposedLOCID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeLOCID", extension___parameters);
                    }

                    adapter.Impl.ChangeLOCID(ProposedLOCID, out outMsg, out outTermsDiff, out outLocTerms, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedLOCID", ProposedLOCID);
                        extension___parameters.Add("outMsg", outMsg);
                        extension___parameters.Add("outTermsDiff", outTermsDiff);
                        extension___parameters.Add("outLocTerms", outLocTerms);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeLOCID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeLOCIDInvPosted(string ProposedLOCID, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeLOCIDInvPosted"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedLOCID", ProposedLOCID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeLOCIDInvPosted", extension___parameters);
                    }

                    adapter.Impl.ChangeLOCIDInvPosted(ProposedLOCID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedLOCID", ProposedLOCID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeLOCIDInvPosted", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeLockRate(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeLockRate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeLockRate", extension___parameters);
                    }

                    adapter.Impl.ChangeLockRate(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeLockRate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeManualTaxCalculation(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeManualTaxCalculation"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeManualTaxCalculation", extension___parameters);
                    }

                    adapter.Impl.ChangeManualTaxCalculation(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeManualTaxCalculation", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeManualTaxHedMscCalculation(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeManualTaxHedMscCalculation"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeManualTaxHedMscCalculation", extension___parameters);
                    }

                    adapter.Impl.ChangeManualTaxHedMscCalculation(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeManualTaxHedMscCalculation", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeManualTaxLineCalculation(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeManualTaxLineCalculation"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeManualTaxLineCalculation", extension___parameters);
                    }

                    adapter.Impl.ChangeManualTaxLineCalculation(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeManualTaxLineCalculation", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeManualTaxLnMscCalculation(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeManualTaxLnMscCalculation"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeManualTaxLnMscCalculation", extension___parameters);
                    }

                    adapter.Impl.ChangeManualTaxLnMscCalculation(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeManualTaxLnMscCalculation", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeMiscAmt(decimal ProposedMiscAmt, string TableName, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeMiscAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedMiscAmt", ProposedMiscAmt);
                        extension___parameters.Add("TableName", TableName);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeMiscAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeMiscAmt(ProposedMiscAmt, TableName, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedMiscAmt", ProposedMiscAmt);
                        extension___parameters.Add("TableName", TableName);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeMiscAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeMiscCode(string ProposedMiscCode, string TableName, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeMiscCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedMiscCode", ProposedMiscCode);
                        extension___parameters.Add("TableName", TableName);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeMiscCode", extension___parameters);
                    }

                    adapter.Impl.ChangeMiscCode(ProposedMiscCode, TableName, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedMiscCode", ProposedMiscCode);
                        extension___parameters.Add("TableName", TableName);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeMiscCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeMiscLCFlag(bool ipLCFlag, string TableName, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeMiscLCFlag"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipLCFlag", ipLCFlag);
                        extension___parameters.Add("TableName", TableName);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeMiscLCFlag", extension___parameters);
                    }

                    adapter.Impl.ChangeMiscLCFlag(ipLCFlag, TableName, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipLCFlag", ipLCFlag);
                        extension___parameters.Add("TableName", TableName);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeMiscLCFlag", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void Change1099Code(string formTypeID, string proposedCode1099ID, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("Change1099Code"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("formTypeID", formTypeID);
                        extension___parameters.Add("proposedCode1099ID", proposedCode1099ID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("Change1099Code", extension___parameters);
                    }

                    adapter.Impl.Change1099Code(formTypeID, proposedCode1099ID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("formTypeID", formTypeID);
                        extension___parameters.Add("proposedCode1099ID", proposedCode1099ID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("Change1099Code", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeAPIHAPInvMsc1099Code(string formTypeID, string proposedCode1099ID, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeAPIHAPInvMsc1099Code"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("formTypeID", formTypeID);
                        extension___parameters.Add("proposedCode1099ID", proposedCode1099ID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeAPIHAPInvMsc1099Code", extension___parameters);
                    }

                    adapter.Impl.ChangeAPIHAPInvMsc1099Code(formTypeID, proposedCode1099ID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("formTypeID", formTypeID);
                        extension___parameters.Add("proposedCode1099ID", proposedCode1099ID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeAPIHAPInvMsc1099Code", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeFormType(string formType, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeFormType"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("formType", formType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeFormType", extension___parameters);
                    }

                    adapter.Impl.ChangeFormType(formType, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("formType", formType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeFormType", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeAPIHAPInvMscFormType(string formType, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeAPIHAPInvMscFormType"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("formType", formType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeAPIHAPInvMscFormType", extension___parameters);
                    }

                    adapter.Impl.ChangeAPIHAPInvMscFormType(formType, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("formType", formType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeAPIHAPInvMscFormType", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeMiscPercent(decimal proposedPrcnt, string tableName, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeMiscPercent"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedPrcnt", proposedPrcnt);
                        extension___parameters.Add("tableName", tableName);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeMiscPercent", extension___parameters);
                    }

                    adapter.Impl.ChangeMiscPercent(proposedPrcnt, tableName, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedPrcnt", proposedPrcnt);
                        extension___parameters.Add("tableName", tableName);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeMiscPercent", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeMtlSeq(int ProposedMtlSeq, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeMtlSeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedMtlSeq", ProposedMtlSeq);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeMtlSeq", extension___parameters);
                    }

                    adapter.Impl.ChangeMtlSeq(ProposedMtlSeq, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedMtlSeq", ProposedMtlSeq);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeMtlSeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeMultiCompany(bool ProposedMulti, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeMultiCompany"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedMulti", ProposedMulti);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeMultiCompany", extension___parameters);
                    }

                    adapter.Impl.ChangeMultiCompany(ProposedMulti, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedMulti", ProposedMulti);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeMultiCompany", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeOverrideRevCharge(bool ProposedOverrideRC, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeOverrideRevCharge"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedOverrideRC", ProposedOverrideRC);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeOverrideRevCharge", extension___parameters);
                    }

                    adapter.Impl.ChangeOverrideRevCharge(ProposedOverrideRC, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedOverrideRC", ProposedOverrideRC);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeOverrideRevCharge", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangePartNum(string ProposedPartNum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangePartNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedPartNum", ProposedPartNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangePartNum", extension___parameters);
                    }

                    adapter.Impl.ChangePartNum(ProposedPartNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedPartNum", ProposedPartNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangePartNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangePBDtlValue(decimal proposedInvDtlValue, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangePBDtlValue"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedInvDtlValue", proposedInvDtlValue);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangePBDtlValue", extension___parameters);
                    }

                    adapter.Impl.ChangePBDtlValue(proposedInvDtlValue, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedInvDtlValue", proposedInvDtlValue);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangePBDtlValue", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangePBMtlCharge(decimal proposedMtlChrg, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangePBMtlCharge"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedMtlChrg", proposedMtlChrg);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangePBMtlCharge", extension___parameters);
                    }

                    adapter.Impl.ChangePBMtlCharge(proposedMtlChrg, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedMtlChrg", proposedMtlChrg);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangePBMtlCharge", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangePhaseID(string PropPhase, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangePhaseID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PropPhase", PropPhase);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangePhaseID", extension___parameters);
                    }

                    adapter.Impl.ChangePhaseID(PropPhase, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PropPhase", PropPhase);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangePhaseID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangePMUID(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangePMUID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangePMUID", extension___parameters);
                    }

                    adapter.Impl.ChangePMUID(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangePMUID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangePMUIDMaster(int ipPaymentMethod, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangePMUIDMaster"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipPaymentMethod", ipPaymentMethod);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangePMUIDMaster", extension___parameters);
                    }

                    adapter.Impl.ChangePMUIDMaster(ipPaymentMethod, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipPaymentMethod", ipPaymentMethod);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangePMUIDMaster", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateCreateCancellationInvoice(int VendorNum, string InvoiceNum, out string OpError)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateCreateCancellationInvoice"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___implementation.BeforeMethod("ValidateCreateCancellationInvoice", extension___parameters);
                    }

                    adapter.Impl.ValidateCreateCancellationInvoice(VendorNum, InvoiceNum, out OpError);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("OpError", OpError);
                        extension___implementation.AfterMethod("ValidateCreateCancellationInvoice", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateWBSPhase(string PropPhase, ref Erp.Tablesets.APInvoiceTableset ds, out string OpMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateWBSPhase"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PropPhase", PropPhase);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ValidateWBSPhase", extension___parameters);
                    }

                    adapter.Impl.ValidateWBSPhase(PropPhase, ref ds, out OpMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("PropPhase", PropPhase);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("OpMessage", OpMessage);
                        extension___implementation.AfterMethod("ValidateWBSPhase", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateUnreceivedLineForPOBeforeChangePOLine(int ProposedPOLine, ref Erp.Tablesets.APInvoiceTableset ds, out string OpMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateUnreceivedLineForPOBeforeChangePOLine"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedPOLine", ProposedPOLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ValidateUnreceivedLineForPOBeforeChangePOLine", extension___parameters);
                    }

                    adapter.Impl.ValidateUnreceivedLineForPOBeforeChangePOLine(ProposedPOLine, ref ds, out OpMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedPOLine", ProposedPOLine);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("OpMessage", OpMessage);
                        extension___implementation.AfterMethod("ValidateUnreceivedLineForPOBeforeChangePOLine", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangePOLine(int ProposedPOLine, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangePOLine"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedPOLine", ProposedPOLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangePOLine", extension___parameters);
                    }

                    adapter.Impl.ChangePOLine(ProposedPOLine, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedPOLine", ProposedPOLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangePOLine", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangePONum(int ProposedPONum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangePONum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedPONum", ProposedPONum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangePONum", extension___parameters);
                    }

                    adapter.Impl.ChangePONum(ProposedPONum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedPONum", ProposedPONum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangePONum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangePORelNum(int ProposedPORelNum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangePORelNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedPORelNum", ProposedPORelNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangePORelNum", extension___parameters);
                    }

                    adapter.Impl.ChangePORelNum(ProposedPORelNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedPORelNum", ProposedPORelNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangePORelNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangePrePayment(string prepaymentNum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangePrePayment"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("prepaymentNum", prepaymentNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangePrePayment", extension___parameters);
                    }

                    adapter.Impl.ChangePrePayment(prepaymentNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("prepaymentNum", prepaymentNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangePrePayment", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangePrePaymentAmt(decimal prepaymentAmount, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangePrePaymentAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("prepaymentAmount", prepaymentAmount);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangePrePaymentAmt", extension___parameters);
                    }

                    adapter.Impl.ChangePrePaymentAmt(prepaymentAmount, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("prepaymentAmount", prepaymentAmount);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangePrePaymentAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeRateCode(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeRateCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeRateCode", extension___parameters);
                    }

                    adapter.Impl.ChangeRateCode(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeRateCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeRateCodeMaster(string proposedRateCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeRateCodeMaster"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedRateCode", proposedRateCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeRateCodeMaster", extension___parameters);
                    }

                    adapter.Impl.ChangeRateCodeMaster(proposedRateCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedRateCode", proposedRateCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeRateCodeMaster", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeRateHedMscCode(string proposedRateCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeRateHedMscCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedRateCode", proposedRateCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeRateHedMscCode", extension___parameters);
                    }

                    adapter.Impl.ChangeRateHedMscCode(proposedRateCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedRateCode", proposedRateCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeRateHedMscCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeRateLineCode(string proposedRateCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeRateLineCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedRateCode", proposedRateCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeRateLineCode", extension___parameters);
                    }

                    adapter.Impl.ChangeRateLineCode(proposedRateCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedRateCode", proposedRateCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeRateLineCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeRateLnMscCode(string proposedRateCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeRateLnMscCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedRateCode", proposedRateCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeRateLnMscCode", extension___parameters);
                    }

                    adapter.Impl.ChangeRateLnMscCode(proposedRateCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedRateCode", proposedRateCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeRateLnMscCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeRefPONum(int ProposedRefPONum, bool confirmCheck, out string confirmMsg, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeRefPONum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedRefPONum", ProposedRefPONum);
                        extension___parameters.Add("confirmCheck", confirmCheck);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeRefPONum", extension___parameters);
                    }

                    adapter.Impl.ChangeRefPONum(ProposedRefPONum, confirmCheck, out confirmMsg, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedRefPONum", ProposedRefPONum);
                        extension___parameters.Add("confirmCheck", confirmCheck);
                        extension___parameters.Add("confirmMsg", confirmMsg);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeRefPONum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeReportableAmt(decimal ProposedReportableAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeReportableAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedReportableAmt", ProposedReportableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeReportableAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeReportableAmt(ProposedReportableAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedReportableAmt", ProposedReportableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeReportableAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeReportableHedMscAmt(decimal ProposedReportableAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeReportableHedMscAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedReportableAmt", ProposedReportableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeReportableHedMscAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeReportableHedMscAmt(ProposedReportableAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedReportableAmt", ProposedReportableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeReportableHedMscAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeReportableLineAmt(decimal ProposedReportableAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeReportableLineAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedReportableAmt", ProposedReportableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeReportableLineAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeReportableLineAmt(ProposedReportableAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedReportableAmt", ProposedReportableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeReportableLineAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeReportableLnMscAmt(decimal ProposedReportableAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeReportableLnMscAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedReportableAmt", ProposedReportableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeReportableLnMscAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeReportableLnMscAmt(ProposedReportableAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedReportableAmt", ProposedReportableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeReportableLnMscAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeRevChargeMethod(string ProposedRevChrgMethod, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeRevChargeMethod"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedRevChrgMethod", ProposedRevChrgMethod);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeRevChargeMethod", extension___parameters);
                    }

                    adapter.Impl.ChangeRevChargeMethod(ProposedRevChrgMethod, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedRevChrgMethod", ProposedRevChrgMethod);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeRevChargeMethod", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxableAmt(decimal ProposedTaxableAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxableAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxableAmt", ProposedTaxableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxableAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxableAmt(ProposedTaxableAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxableAmt", ProposedTaxableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxableAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxableHedMscAmt(decimal ProposedTaxableAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxableHedMscAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxableAmt", ProposedTaxableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxableHedMscAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxableHedMscAmt(ProposedTaxableAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxableAmt", ProposedTaxableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxableHedMscAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxableLineAmt(decimal ProposedTaxableAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxableLineAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxableAmt", ProposedTaxableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxableLineAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxableLineAmt(ProposedTaxableAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxableAmt", ProposedTaxableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxableLineAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxableLnMscAmt(decimal ProposedTaxableAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxableLnMscAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxableAmt", ProposedTaxableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxableLnMscAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxableLnMscAmt(ProposedTaxableAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxableAmt", ProposedTaxableAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxableLnMscAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxAmt(decimal ProposedTaxAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxAmt", ProposedTaxAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxAmt(ProposedTaxAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxAmt", ProposedTaxAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxHedMscAmt(decimal ProposedTaxAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxHedMscAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxAmt", ProposedTaxAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxHedMscAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxHedMscAmt(ProposedTaxAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxAmt", ProposedTaxAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxHedMscAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxLineAmt(decimal ProposedTaxAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxLineAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxAmt", ProposedTaxAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxLineAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxLineAmt(ProposedTaxAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxAmt", ProposedTaxAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxLineAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxLnMscAmt(decimal ProposedTaxAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxLnMscAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxAmt", ProposedTaxAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxLnMscAmt", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxLnMscAmt(ProposedTaxAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxAmt", ProposedTaxAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxLnMscAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxCatID(string ipTaxCatID, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxCatID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTaxCatID", ipTaxCatID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxCatID", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxCatID(ipTaxCatID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTaxCatID", ipTaxCatID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxCatID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxCode(string ProposedTaxCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxCode", ProposedTaxCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxCode", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxCode(ProposedTaxCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxCode", ProposedTaxCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxHedMscCode(string ProposedTaxCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxHedMscCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxCode", ProposedTaxCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxHedMscCode", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxHedMscCode(ProposedTaxCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxCode", ProposedTaxCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxHedMscCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxLineCode(string ProposedTaxCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxLineCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxCode", ProposedTaxCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxLineCode", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxLineCode(ProposedTaxCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxCode", ProposedTaxCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxLineCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxLnMscCode(string ProposedTaxCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxLnMscCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxCode", ProposedTaxCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxLnMscCode", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxLnMscCode(ProposedTaxCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxCode", ProposedTaxCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxLnMscCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxDeductable(decimal proposedTaxDeductable, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxDeductable"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedTaxDeductable", proposedTaxDeductable);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxDeductable", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxDeductable(proposedTaxDeductable, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedTaxDeductable", proposedTaxDeductable);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxDeductable", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxHedMscDeductible(decimal proposedTaxDeductable, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxHedMscDeductible"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedTaxDeductable", proposedTaxDeductable);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxHedMscDeductible", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxHedMscDeductible(proposedTaxDeductable, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedTaxDeductable", proposedTaxDeductable);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxHedMscDeductible", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxLineDeductible(decimal proposedTaxDeductable, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxLineDeductible"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedTaxDeductable", proposedTaxDeductable);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxLineDeductible", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxLineDeductible(proposedTaxDeductable, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedTaxDeductable", proposedTaxDeductable);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxLineDeductible", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxLnMscDeductible(decimal proposedTaxDeductable, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxLnMscDeductible"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedTaxDeductable", proposedTaxDeductable);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxLnMscDeductible", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxLnMscDeductible(proposedTaxDeductable, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedTaxDeductable", proposedTaxDeductable);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxLnMscDeductible", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxLock(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxLock"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxLock", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxLock(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxLock", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxPercent(decimal ProposedTaxPercent, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxPercent"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxPercent", ProposedTaxPercent);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxPercent", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxPercent(ProposedTaxPercent, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxPercent", ProposedTaxPercent);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxPercent", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxHedMscPercent(decimal ProposedTaxPercent, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxHedMscPercent"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxPercent", ProposedTaxPercent);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxHedMscPercent", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxHedMscPercent(ProposedTaxPercent, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxPercent", ProposedTaxPercent);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxHedMscPercent", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxLinePercent(decimal ProposedTaxPercent, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxLinePercent"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxPercent", ProposedTaxPercent);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxLinePercent", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxLinePercent(ProposedTaxPercent, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxPercent", ProposedTaxPercent);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxLinePercent", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTaxLnMscPercent(decimal ProposedTaxPercent, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTaxLnMscPercent"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxPercent", ProposedTaxPercent);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTaxLnMscPercent", extension___parameters);
                    }

                    adapter.Impl.ChangeTaxLnMscPercent(ProposedTaxPercent, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTaxPercent", ProposedTaxPercent);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTaxLnMscPercent", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTermsCode(string ProposedTermsCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTermsCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTermsCode", ProposedTermsCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeTermsCode", extension___parameters);
                    }

                    adapter.Impl.ChangeTermsCode(ProposedTermsCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedTermsCode", ProposedTermsCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeTermsCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeFixedDiscount(decimal ProposedDiscountAmt, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeFixedDiscount"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedDiscountAmt", ProposedDiscountAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeFixedDiscount", extension___parameters);
                    }

                    adapter.Impl.ChangeFixedDiscount(ProposedDiscountAmt, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedDiscountAmt", ProposedDiscountAmt);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeFixedDiscount", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeUnitCost(decimal ProposedUnitCost, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeUnitCost"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedUnitCost", ProposedUnitCost);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeUnitCost", extension___parameters);
                    }

                    adapter.Impl.ChangeUnitCost(ProposedUnitCost, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedUnitCost", ProposedUnitCost);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeUnitCost", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeVendorID(string ProposedVendorID, bool confirmCheck, out string confirmMsg, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeVendorID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedVendorID", ProposedVendorID);
                        extension___parameters.Add("confirmCheck", confirmCheck);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeVendorID", extension___parameters);
                    }

                    adapter.Impl.ChangeVendorID(ProposedVendorID, confirmCheck, out confirmMsg, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedVendorID", ProposedVendorID);
                        extension___parameters.Add("confirmCheck", confirmCheck);
                        extension___parameters.Add("confirmMsg", confirmMsg);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeVendorID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeVendorQty(decimal ProposedVendorQty, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeVendorQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedVendorQty", ProposedVendorQty);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeVendorQty", extension___parameters);
                    }

                    adapter.Impl.ChangeVendorQty(ProposedVendorQty, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ProposedVendorQty", ProposedVendorQty);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeVendorQty", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckBankRef(ref Erp.Tablesets.APInvoiceTableset ds, out string OpMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckBankRef"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CheckBankRef", extension___parameters);
                    }

                    adapter.Impl.CheckBankRef(ref ds, out OpMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("OpMessage", OpMessage);
                        extension___implementation.AfterMethod("CheckBankRef", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool CheckBankReference(int ipVendorNum, string ipInvoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckBankReference"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___implementation.BeforeMethod("CheckBankReference", extension___parameters);
                    }

                    var _return = adapter.Impl.CheckBankReference(ipVendorNum, ipInvoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___implementation.AfterMethod("CheckBankReference", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckCPayBeforeUpdate(ref Erp.Tablesets.APInvoiceTableset ds, out string OpMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckCPayBeforeUpdate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CheckCPayBeforeUpdate", extension___parameters);
                    }

                    adapter.Impl.CheckCPayBeforeUpdate(ref ds, out OpMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("OpMessage", OpMessage);
                        extension___implementation.AfterMethod("CheckCPayBeforeUpdate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckDocumentIsLocked(string keyValue, string keyValue2)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckDocumentIsLocked"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("keyValue", keyValue);
                        extension___parameters.Add("keyValue2", keyValue2);
                        extension___implementation.BeforeMethod("CheckDocumentIsLocked", extension___parameters);
                    }

                    adapter.Impl.CheckDocumentIsLocked(keyValue, keyValue2);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("keyValue", keyValue);
                        extension___parameters.Add("keyValue2", keyValue2);
                        extension___implementation.AfterMethod("CheckDocumentIsLocked", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckLegalNumsDisplay(string cGroupID, out bool lEnabled)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckLegalNumsDisplay"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___implementation.BeforeMethod("CheckLegalNumsDisplay", extension___parameters);
                    }

                    adapter.Impl.CheckLegalNumsDisplay(cGroupID, out lEnabled);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___parameters.Add("lEnabled", lEnabled);
                        extension___implementation.AfterMethod("CheckLegalNumsDisplay", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckLinePurPoint(string purPoint, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckLinePurPoint"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CheckLinePurPoint", extension___parameters);
                    }

                    adapter.Impl.CheckLinePurPoint(purPoint, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("CheckLinePurPoint", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckLineSubTotal(int ipVendNum, string ipInvNum, int ipInvLine, string ipRoleCd, decimal ipProposedValue)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckLineSubTotal"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendNum", ipVendNum);
                        extension___parameters.Add("ipInvNum", ipInvNum);
                        extension___parameters.Add("ipInvLine", ipInvLine);
                        extension___parameters.Add("ipRoleCd", ipRoleCd);
                        extension___parameters.Add("ipProposedValue", ipProposedValue);
                        extension___implementation.BeforeMethod("CheckLineSubTotal", extension___parameters);
                    }

                    adapter.Impl.CheckLineSubTotal(ipVendNum, ipInvNum, ipInvLine, ipRoleCd, ipProposedValue);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendNum", ipVendNum);
                        extension___parameters.Add("ipInvNum", ipInvNum);
                        extension___parameters.Add("ipInvLine", ipInvLine);
                        extension___parameters.Add("ipRoleCd", ipRoleCd);
                        extension___parameters.Add("ipProposedValue", ipProposedValue);
                        extension___implementation.AfterMethod("CheckLineSubTotal", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckPaymentMethod(int ipPaymentMethod, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckPaymentMethod"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipPaymentMethod", ipPaymentMethod);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CheckPaymentMethod", extension___parameters);
                    }

                    adapter.Impl.CheckPaymentMethod(ipPaymentMethod, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipPaymentMethod", ipPaymentMethod);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("CheckPaymentMethod", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckRateGrpCode(string ipRateGrpCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckRateGrpCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipRateGrpCode", ipRateGrpCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CheckRateGrpCode", extension___parameters);
                    }

                    adapter.Impl.CheckRateGrpCode(ipRateGrpCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipRateGrpCode", ipRateGrpCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("CheckRateGrpCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckRevChrgBeforeUpdate(ref Erp.Tablesets.APInvoiceTableset ds, out string OpMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckRevChrgBeforeUpdate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CheckRevChrgBeforeUpdate", extension___parameters);
                    }

                    adapter.Impl.CheckRevChrgBeforeUpdate(ref ds, out OpMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("OpMessage", OpMessage);
                        extension___implementation.AfterMethod("CheckRevChrgBeforeUpdate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckTaxRateGrpCode(string ipRateGrpCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckTaxRateGrpCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipRateGrpCode", ipRateGrpCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CheckTaxRateGrpCode", extension___parameters);
                    }

                    adapter.Impl.CheckTaxRateGrpCode(ipRateGrpCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipRateGrpCode", ipRateGrpCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("CheckTaxRateGrpCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckTaxRgn(string ipTaxRgnCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckTaxRgn"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTaxRgnCode", ipTaxRgnCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CheckTaxRgn", extension___parameters);
                    }

                    adapter.Impl.CheckTaxRgn(ipTaxRgnCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTaxRgnCode", ipTaxRgnCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("CheckTaxRgn", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvGetRecInvSourceTableset GetRecurInvoiceSourceSearch(string ipSuppList, string ipCycleCodesList, System.DateTime ipGrpDate)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRecurInvoiceSourceSearch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipSuppList", ipSuppList);
                        extension___parameters.Add("ipCycleCodesList", ipCycleCodesList);
                        extension___parameters.Add("ipGrpDate", ipGrpDate);
                        extension___implementation.BeforeMethod("GetRecurInvoiceSourceSearch", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRecurInvoiceSourceSearch(ipSuppList, ipCycleCodesList, ipGrpDate);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipSuppList", ipSuppList);
                        extension___parameters.Add("ipCycleCodesList", ipCycleCodesList);
                        extension___parameters.Add("ipGrpDate", ipGrpDate);
                        extension___implementation.AfterMethod("GetRecurInvoiceSourceSearch", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvGetDMRDMSourceTableset GetDMRDMSourceSearch(string ipSuppList)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetDMRDMSourceSearch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipSuppList", ipSuppList);
                        extension___implementation.BeforeMethod("GetDMRDMSourceSearch", extension___parameters);
                    }

                    var _return = adapter.Impl.GetDMRDMSourceSearch(ipSuppList);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipSuppList", ipSuppList);
                        extension___implementation.AfterMethod("GetDMRDMSourceSearch", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvGetNotInvRecSourceTableset GetNotInvRecSourceSearch(string ipSuppList, System.DateTime invoiceDate, out bool alternateMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNotInvRecSourceSearch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipSuppList", ipSuppList);
                        extension___parameters.Add("invoiceDate", invoiceDate);
                        extension___implementation.BeforeMethod("GetNotInvRecSourceSearch", extension___parameters);
                    }

                    var _return = adapter.Impl.GetNotInvRecSourceSearch(ipSuppList, invoiceDate, out alternateMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipSuppList", ipSuppList);
                        extension___parameters.Add("invoiceDate", invoiceDate);
                        extension___parameters.Add("alternateMessage", alternateMessage);
                        extension___implementation.AfterMethod("GetNotInvRecSourceSearch", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvGetNotInvRecSourceTableset GetNotInvRecFilterSearch()
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNotInvRecFilterSearch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetNotInvRecFilterSearch", extension___parameters);
                    }

                    var _return = adapter.Impl.GetNotInvRecFilterSearch();

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.AfterMethod("GetNotInvRecFilterSearch", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateGNRIClearingCreation(string groupID)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateGNRIClearingCreation"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___implementation.BeforeMethod("ValidateGNRIClearingCreation", extension___parameters);
                    }

                    adapter.Impl.ValidateGNRIClearingCreation(groupID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___implementation.AfterMethod("ValidateGNRIClearingCreation", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvGetDMRDMSourceTableset GetDMRDMFilterSearch()
        {
            try
            {
                using (var adapter = this.GetImplementation("GetDMRDMFilterSearch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetDMRDMFilterSearch", extension___parameters);
                    }

                    var _return = adapter.Impl.GetDMRDMFilterSearch();

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.AfterMethod("GetDMRDMFilterSearch", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CreateCorrectionInvoice(string groupID, string sourceInvoiceNum, int sourceVendorNum, string newInvoiceNum, System.DateTime? newInvoiceDate, string newDocType, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum, Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("CreateCorrectionInvoice"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("sourceInvoiceNum", sourceInvoiceNum);
                        extension___parameters.Add("sourceVendorNum", sourceVendorNum);
                        extension___parameters.Add("newInvoiceNum", newInvoiceNum);
                        extension___parameters.Add("newInvoiceDate", newInvoiceDate);
                        extension___parameters.Add("newDocType", newDocType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CreateCorrectionInvoice", extension___parameters);
                    }

                    adapter.Impl.CreateCorrectionInvoice(groupID, sourceInvoiceNum, sourceVendorNum, newInvoiceNum, newInvoiceDate, newDocType, out grpTotalInvAmt, out lEnableGenLegalNum, ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("sourceInvoiceNum", sourceInvoiceNum);
                        extension___parameters.Add("sourceVendorNum", sourceVendorNum);
                        extension___parameters.Add("newInvoiceNum", newInvoiceNum);
                        extension___parameters.Add("newInvoiceDate", newInvoiceDate);
                        extension___parameters.Add("newDocType", newDocType);
                        extension___parameters.Add("grpTotalInvAmt", grpTotalInvAmt);
                        extension___parameters.Add("lEnableGenLegalNum", lEnableGenLegalNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("CreateCorrectionInvoice", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CreateCancellationInvoice(string groupID, string sourceInvoiceNum, int sourceVendorNum, string newInvoiceNum, System.DateTime? newInvoiceDate, string newDocType, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum, Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("CreateCancellationInvoice"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("sourceInvoiceNum", sourceInvoiceNum);
                        extension___parameters.Add("sourceVendorNum", sourceVendorNum);
                        extension___parameters.Add("newInvoiceNum", newInvoiceNum);
                        extension___parameters.Add("newInvoiceDate", newInvoiceDate);
                        extension___parameters.Add("newDocType", newDocType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CreateCancellationInvoice", extension___parameters);
                    }

                    adapter.Impl.CreateCancellationInvoice(groupID, sourceInvoiceNum, sourceVendorNum, newInvoiceNum, newInvoiceDate, newDocType, out grpTotalInvAmt, out lEnableGenLegalNum, ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("sourceInvoiceNum", sourceInvoiceNum);
                        extension___parameters.Add("sourceVendorNum", sourceVendorNum);
                        extension___parameters.Add("newInvoiceNum", newInvoiceNum);
                        extension___parameters.Add("newInvoiceDate", newInvoiceDate);
                        extension___parameters.Add("newDocType", newDocType);
                        extension___parameters.Add("grpTotalInvAmt", grpTotalInvAmt);
                        extension___parameters.Add("lEnableGenLegalNum", lEnableGenLegalNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("CreateCancellationInvoice", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CreateJobMtl(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("CreateJobMtl"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CreateJobMtl", extension___parameters);
                    }

                    adapter.Impl.CreateJobMtl(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("CreateJobMtl", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeleteMaster(ref Erp.Tablesets.APInvoiceTableset ds, string cGroupID, string keyValue, string keyValue2, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeleteMaster"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___parameters.Add("keyValue", keyValue);
                        extension___parameters.Add("keyValue2", keyValue2);
                        extension___implementation.BeforeMethod("DeleteMaster", extension___parameters);
                    }

                    adapter.Impl.DeleteMaster(ref ds, cGroupID, keyValue, keyValue2, out grpTotalInvAmt, out lEnableGenLegalNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___parameters.Add("keyValue", keyValue);
                        extension___parameters.Add("keyValue2", keyValue2);
                        extension___parameters.Add("grpTotalInvAmt", grpTotalInvAmt);
                        extension___parameters.Add("lEnableGenLegalNum", lEnableGenLegalNum);
                        extension___implementation.AfterMethod("DeleteMaster", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeselectSelectedRcptLines(ref Erp.Tablesets.APInvReceiptBillingTableset ds, int VendorNum, string PurPoint, string PackSlip, bool isDropShip, string InvoiceNum, int iPONum)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeselectSelectedRcptLines"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("PurPoint", PurPoint);
                        extension___parameters.Add("PackSlip", PackSlip);
                        extension___parameters.Add("isDropShip", isDropShip);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("iPONum", iPONum);
                        extension___implementation.BeforeMethod("DeselectSelectedRcptLines", extension___parameters);
                    }

                    adapter.Impl.DeselectSelectedRcptLines(ref ds, VendorNum, PurPoint, PackSlip, isDropShip, InvoiceNum, iPONum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("PurPoint", PurPoint);
                        extension___parameters.Add("PackSlip", PackSlip);
                        extension___parameters.Add("isDropShip", isDropShip);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("iPONum", iPONum);
                        extension___implementation.AfterMethod("DeselectSelectedRcptLines", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DecodeISRCodeLine(string ipISRCodeLine, out string opSlipType, out string opSlipCode, out decimal opAmount, out string opCurrencyCode, out string opCurrencyID, out string opISRRefNum, out int opVendorNum, out string opVendorID, out string opVendorName)
        {
            try
            {
                using (var adapter = this.GetImplementation("DecodeISRCodeLine"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipISRCodeLine", ipISRCodeLine);
                        extension___implementation.BeforeMethod("DecodeISRCodeLine", extension___parameters);
                    }

                    adapter.Impl.DecodeISRCodeLine(ipISRCodeLine, out opSlipType, out opSlipCode, out opAmount, out opCurrencyCode, out opCurrencyID, out opISRRefNum, out opVendorNum, out opVendorID, out opVendorName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipISRCodeLine", ipISRCodeLine);
                        extension___parameters.Add("opSlipType", opSlipType);
                        extension___parameters.Add("opSlipCode", opSlipCode);
                        extension___parameters.Add("opAmount", opAmount);
                        extension___parameters.Add("opCurrencyCode", opCurrencyCode);
                        extension___parameters.Add("opCurrencyID", opCurrencyID);
                        extension___parameters.Add("opISRRefNum", opISRRefNum);
                        extension___parameters.Add("opVendorNum", opVendorNum);
                        extension___parameters.Add("opVendorID", opVendorID);
                        extension___parameters.Add("opVendorName", opVendorName);
                        extension___implementation.AfterMethod("DecodeISRCodeLine", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void EnableAPDates(out bool EnApplyDate, out bool EnTaxPDate, out bool EnTaxRDate)
        {
            try
            {
                using (var adapter = this.GetImplementation("EnableAPDates"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("EnableAPDates", extension___parameters);
                    }

                    adapter.Impl.EnableAPDates(out EnApplyDate, out EnTaxPDate, out EnTaxRDate);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("EnApplyDate", EnApplyDate);
                        extension___parameters.Add("EnTaxPDate", EnTaxPDate);
                        extension___parameters.Add("EnTaxRDate", EnTaxRDate);
                        extension___implementation.AfterMethod("EnableAPDates", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GenerateRebateInv(string invoiceType, string groupID, out string opMsg, Erp.Tablesets.RebateInvTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GenerateRebateInv"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("invoiceType", invoiceType);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GenerateRebateInv", extension___parameters);
                    }

                    adapter.Impl.GenerateRebateInv(invoiceType, groupID, out opMsg, ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("invoiceType", invoiceType);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("opMsg", opMsg);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GenerateRebateInv", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.RebateInvTableset GetRebateInvList(string invoiceType)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRebateInvList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("invoiceType", invoiceType);
                        extension___implementation.BeforeMethod("GetRebateInvList", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRebateInvList(invoiceType);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("invoiceType", invoiceType);
                        extension___implementation.AfterMethod("GetRebateInvList", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvPOMiscTableset GetAPInvPOMisc(int InVendorNum, string InInvoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAPInvPOMisc"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("InVendorNum", InVendorNum);
                        extension___parameters.Add("InInvoiceNum", InInvoiceNum);
                        extension___implementation.BeforeMethod("GetAPInvPOMisc", extension___parameters);
                    }

                    var _return = adapter.Impl.GetAPInvPOMisc(InVendorNum, InInvoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("InVendorNum", InVendorNum);
                        extension___parameters.Add("InInvoiceNum", InInvoiceNum);
                        extension___implementation.AfterMethod("GetAPInvPOMisc", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetAPUninvoicedReceipts(ref Erp.Tablesets.APInvReceiptBillingTableset ds, int InVendorNum, string InInvoiceNum, int InPONum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAPUninvoicedReceipts"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("InVendorNum", InVendorNum);
                        extension___parameters.Add("InInvoiceNum", InInvoiceNum);
                        extension___parameters.Add("InPONum", InPONum);
                        extension___implementation.BeforeMethod("GetAPUninvoicedReceipts", extension___parameters);
                    }

                    adapter.Impl.GetAPUninvoicedReceipts(ref ds, InVendorNum, InInvoiceNum, InPONum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("InVendorNum", InVendorNum);
                        extension___parameters.Add("InInvoiceNum", InInvoiceNum);
                        extension___parameters.Add("InPONum", InPONum);
                        extension___implementation.AfterMethod("GetAPUninvoicedReceipts", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvReceiptBillingTableset GetAPUninvoicedReceiptsSelectAll(int InVendorNum, string InInvoiceNum, string InPONumList)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAPUninvoicedReceiptsSelectAll"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("InVendorNum", InVendorNum);
                        extension___parameters.Add("InInvoiceNum", InInvoiceNum);
                        extension___parameters.Add("InPONumList", InPONumList);
                        extension___implementation.BeforeMethod("GetAPUninvoicedReceiptsSelectAll", extension___parameters);
                    }

                    var _return = adapter.Impl.GetAPUninvoicedReceiptsSelectAll(InVendorNum, InInvoiceNum, InPONumList);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("InVendorNum", InVendorNum);
                        extension___parameters.Add("InInvoiceNum", InInvoiceNum);
                        extension___parameters.Add("InPONumList", InPONumList);
                        extension___implementation.AfterMethod("GetAPUninvoicedReceiptsSelectAll", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetAvailTranDocTypes(out string AvailTypes)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAvailTranDocTypes"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetAvailTranDocTypes", extension___parameters);
                    }

                    adapter.Impl.GetAvailTranDocTypes(out AvailTypes);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("AvailTypes", AvailTypes);
                        extension___implementation.AfterMethod("GetAvailTranDocTypes", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string GetCodeDescList(string tableName, string fieldName)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetCodeDescList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("tableName", tableName);
                        extension___parameters.Add("fieldName", fieldName);
                        extension___implementation.BeforeMethod("GetCodeDescList", extension___parameters);
                    }

                    var _return = adapter.Impl.GetCodeDescList(tableName, fieldName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("tableName", tableName);
                        extension___parameters.Add("fieldName", fieldName);
                        extension___implementation.AfterMethod("GetCodeDescList", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetDMRCorrInvRequests(string AddToGroupID, out string ReturnMsg, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetDMRCorrInvRequests"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("AddToGroupID", AddToGroupID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetDMRCorrInvRequests", extension___parameters);
                    }

                    adapter.Impl.GetDMRCorrInvRequests(AddToGroupID, out ReturnMsg, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("AddToGroupID", AddToGroupID);
                        extension___parameters.Add("ReturnMsg", ReturnMsg);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetDMRCorrInvRequests", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetDMRDebitMemos(string sysRowIDList, string suppList, string AddToGroupID, out string ReturnMsg, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetDMRDebitMemos"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("sysRowIDList", sysRowIDList);
                        extension___parameters.Add("suppList", suppList);
                        extension___parameters.Add("AddToGroupID", AddToGroupID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetDMRDebitMemos", extension___parameters);
                    }

                    adapter.Impl.GetDMRDebitMemos(sysRowIDList, suppList, AddToGroupID, out ReturnMsg, out grpTotalInvAmt, out lEnableGenLegalNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("sysRowIDList", sysRowIDList);
                        extension___parameters.Add("suppList", suppList);
                        extension___parameters.Add("AddToGroupID", AddToGroupID);
                        extension___parameters.Add("ReturnMsg", ReturnMsg);
                        extension___parameters.Add("grpTotalInvAmt", grpTotalInvAmt);
                        extension___parameters.Add("lEnableGenLegalNum", lEnableGenLegalNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetDMRDebitMemos", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetvalidEAD(string inTransType, string inDateLabel, ref System.DateTime? proposedDate, out string cMessageText)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetvalidEAD"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inTransType", inTransType);
                        extension___parameters.Add("inDateLabel", inDateLabel);
                        extension___parameters.Add("proposedDate", proposedDate);
                        extension___implementation.BeforeMethod("GetvalidEAD", extension___parameters);
                    }

                    adapter.Impl.GetvalidEAD(inTransType, inDateLabel, ref proposedDate, out cMessageText);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inTransType", inTransType);
                        extension___parameters.Add("inDateLabel", inDateLabel);
                        extension___parameters.Add("proposedDate", proposedDate);
                        extension___parameters.Add("cMessageText", cMessageText);
                        extension___implementation.AfterMethod("GetvalidEAD", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool GetLegalNumberOpts(string inGroupID, int inVendor, string inInvNum, ref Erp.Tablesets.APInvoiceTableset ds, out bool requiresUserInput)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetLegalNumberOpts"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inGroupID", inGroupID);
                        extension___parameters.Add("inVendor", inVendor);
                        extension___parameters.Add("inInvNum", inInvNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetLegalNumberOpts", extension___parameters);
                    }

                    var _return = adapter.Impl.GetLegalNumberOpts(inGroupID, inVendor, inInvNum, ref ds, out requiresUserInput);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inGroupID", inGroupID);
                        extension___parameters.Add("inVendor", inVendor);
                        extension___parameters.Add("inInvNum", inInvNum);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("requiresUserInput", requiresUserInput);
                        extension___implementation.AfterMethod("GetLegalNumberOpts", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetLegalNumforDebitMemo(string cGroupID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetLegalNumforDebitMemo"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___implementation.BeforeMethod("GetLegalNumforDebitMemo", extension___parameters);
                    }

                    adapter.Impl.GetLegalNumforDebitMemo(cGroupID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___implementation.AfterMethod("GetLegalNumforDebitMemo", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvoiceTableset VoidLegalNumber(string ipInvoiceNum, string ipVoidedReason, int ipVendorNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("VoidLegalNumber"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipVoidedReason", ipVoidedReason);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___implementation.BeforeMethod("VoidLegalNumber", extension___parameters);
                    }

                    var _return = adapter.Impl.VoidLegalNumber(ipInvoiceNum, ipVoidedReason, ipVendorNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipVoidedReason", ipVoidedReason);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___implementation.AfterMethod("VoidLegalNumber", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvHedListTableset GetListForAssetAdd(string WhereClause, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetListForAssetAdd"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("WhereClause", WhereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetListForAssetAdd", extension___parameters);
                    }

                    var _return = adapter.Impl.GetListForAssetAdd(WhereClause, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("WhereClause", WhereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetListForAssetAdd", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvHedListTableset GetApInvHeadListLoaded(string groupId, int vendorId)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetApInvHeadListLoaded"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupId", groupId);
                        extension___parameters.Add("vendorId", vendorId);
                        extension___implementation.BeforeMethod("GetApInvHeadListLoaded", extension___parameters);
                    }

                    var _return = adapter.Impl.GetApInvHeadListLoaded(groupId, vendorId);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupId", groupId);
                        extension___parameters.Add("vendorId", vendorId);
                        extension___implementation.AfterMethod("GetApInvHeadListLoaded", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.APInvHedListTableset GetListForLandingPage(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetListForLandingPage"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetListForLandingPage", extension___parameters);
                    }

                    var _return = adapter.Impl.GetListForLandingPage(whereClause, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetListForLandingPage", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvDtlAdvance(ref Erp.Tablesets.APInvoiceTableset ds, int iVendorNum, string cInvoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvDtlAdvance"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___implementation.BeforeMethod("GetNewAPInvDtlAdvance", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvDtlAdvance(ref ds, iVendorNum, cInvoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___implementation.AfterMethod("GetNewAPInvDtlAdvance", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvDtlAsset(ref Erp.Tablesets.APInvoiceTableset ds, int iVendorNum, string cInvoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvDtlAsset"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___implementation.BeforeMethod("GetNewAPInvDtlAsset", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvDtlAsset(ref ds, iVendorNum, cInvoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___implementation.AfterMethod("GetNewAPInvDtlAsset", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvDtlDMRCredit(ref Erp.Tablesets.APInvoiceTableset ds, int iVendorNum, string cInvoiceNum, int iDMRNum, int iDMRActionNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvDtlDMRCredit"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___parameters.Add("iDMRNum", iDMRNum);
                        extension___parameters.Add("iDMRActionNum", iDMRActionNum);
                        extension___implementation.BeforeMethod("GetNewAPInvDtlDMRCredit", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvDtlDMRCredit(ref ds, iVendorNum, cInvoiceNum, iDMRNum, iDMRActionNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___parameters.Add("iDMRNum", iDMRNum);
                        extension___parameters.Add("iDMRActionNum", iDMRActionNum);
                        extension___implementation.AfterMethod("GetNewAPInvDtlDMRCredit", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvDtlJobMiscellaneous(ref Erp.Tablesets.APInvoiceTableset ds, int iVendorNum, string cInvoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvDtlJobMiscellaneous"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___implementation.BeforeMethod("GetNewAPInvDtlJobMiscellaneous", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvDtlJobMiscellaneous(ref ds, iVendorNum, cInvoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___implementation.AfterMethod("GetNewAPInvDtlJobMiscellaneous", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvDtlMiscellaneous(ref Erp.Tablesets.APInvoiceTableset ds, int iVendorNum, string cInvoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvDtlMiscellaneous"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___implementation.BeforeMethod("GetNewAPInvDtlMiscellaneous", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvDtlMiscellaneous(ref ds, iVendorNum, cInvoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___implementation.AfterMethod("GetNewAPInvDtlMiscellaneous", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvDtlUnreceived(ref Erp.Tablesets.APInvoiceTableset ds, int iVendorNum, string cInvoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvDtlUnreceived"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___implementation.BeforeMethod("GetNewAPInvDtlUnreceived", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvDtlUnreceived(ref ds, iVendorNum, cInvoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___implementation.AfterMethod("GetNewAPInvDtlUnreceived", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvHedBOE(string groupID, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvHedBOE"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewAPInvHedBOE", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvHedBOE(groupID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewAPInvHedBOE", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvHedInvoice(ref Erp.Tablesets.APInvoiceTableset ds, string cGroupID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvHedInvoice"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___implementation.BeforeMethod("GetNewAPInvHedInvoice", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvHedInvoice(ref ds, cGroupID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___implementation.AfterMethod("GetNewAPInvHedInvoice", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvHedDebitMemo(ref Erp.Tablesets.APInvoiceTableset ds, string cGroupID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvHedDebitMemo"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___implementation.BeforeMethod("GetNewAPInvHedDebitMemo", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvHedDebitMemo(ref ds, cGroupID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___implementation.AfterMethod("GetNewAPInvHedDebitMemo", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewManualGRNIClearing(ref Erp.Tablesets.APInvoiceTableset ds, string cGroupID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewManualGRNIClearing"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___implementation.BeforeMethod("GetNewManualGRNIClearing", extension___parameters);
                    }

                    adapter.Impl.GetNewManualGRNIClearing(ref ds, cGroupID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___implementation.AfterMethod("GetNewManualGRNIClearing", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewHdrCharge(ref Erp.Tablesets.APInvoiceTableset ds, int iVendorNum, string cInvoiceNum, bool lcFlag)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewHdrCharge"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___parameters.Add("lcFlag", lcFlag);
                        extension___implementation.BeforeMethod("GetNewHdrCharge", extension___parameters);
                    }

                    adapter.Impl.GetNewHdrCharge(ref ds, iVendorNum, cInvoiceNum, lcFlag);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("iVendorNum", iVendorNum);
                        extension___parameters.Add("cInvoiceNum", cInvoiceNum);
                        extension___parameters.Add("lcFlag", lcFlag);
                        extension___implementation.AfterMethod("GetNewHdrCharge", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPIHAPInvMscPlasticPackTaxCost(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, string plasticPackTaxReportID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPIHAPInvMscPlasticPackTaxCost"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("plasticPackTaxReportID", plasticPackTaxReportID);
                        extension___implementation.BeforeMethod("GetNewAPIHAPInvMscPlasticPackTaxCost", extension___parameters);
                    }

                    adapter.Impl.GetNewAPIHAPInvMscPlasticPackTaxCost(ref ds, vendorNum, invoiceNum, plasticPackTaxReportID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("plasticPackTaxReportID", plasticPackTaxReportID);
                        extension___implementation.AfterMethod("GetNewAPIHAPInvMscPlasticPackTaxCost", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvDtlDEASchPopulated(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvDtlDEASchPopulated"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.BeforeMethod("GetNewAPInvDtlDEASchPopulated", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvDtlDEASchPopulated(ref ds, vendorNum, invoiceNum, invoiceLine);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.AfterMethod("GetNewAPInvDtlDEASchPopulated", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetPercentFixedAmt(System.DateTime? ipInvDate)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetPercentFixedAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipInvDate", ipInvDate);
                        extension___implementation.BeforeMethod("GetPercentFixedAmt", extension___parameters);
                    }

                    adapter.Impl.GetPercentFixedAmt(ipInvDate);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipInvDate", ipInvDate);
                        extension___implementation.AfterMethod("GetPercentFixedAmt", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvHedListTableset GetRefInvoicesForBOE(string whereClause)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRefInvoicesForBOE"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___implementation.BeforeMethod("GetRefInvoicesForBOE", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRefInvoicesForBOE(whereClause);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___implementation.AfterMethod("GetRefInvoicesForBOE", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetLinePurPointFilterString(int ipVendorNum, string ipInvoiceNum, out string opFilterString)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetLinePurPointFilterString"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___implementation.BeforeMethod("GetLinePurPointFilterString", extension___parameters);
                    }

                    adapter.Impl.GetLinePurPointFilterString(ipVendorNum, ipInvoiceNum, out opFilterString);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("opFilterString", opFilterString);
                        extension___implementation.AfterMethod("GetLinePurPointFilterString", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvHedListTableset GetListBOEReferences(string APInvHedWhereClause, int PageSize, int AbsolutePage, out bool MorePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetListBOEReferences"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("APInvHedWhereClause", APInvHedWhereClause);
                        extension___parameters.Add("PageSize", PageSize);
                        extension___parameters.Add("AbsolutePage", AbsolutePage);
                        extension___implementation.BeforeMethod("GetListBOEReferences", extension___parameters);
                    }

                    var _return = adapter.Impl.GetListBOEReferences(APInvHedWhereClause, PageSize, AbsolutePage, out MorePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("APInvHedWhereClause", APInvHedWhereClause);
                        extension___parameters.Add("PageSize", PageSize);
                        extension___parameters.Add("AbsolutePage", AbsolutePage);
                        extension___parameters.Add("MorePages", MorePages);
                        extension___implementation.AfterMethod("GetListBOEReferences", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetPOFilterString(int ipVendorNum, string ipInvoiceNum, out string opFilterString)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetPOFilterString"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___implementation.BeforeMethod("GetPOFilterString", extension___parameters);
                    }

                    adapter.Impl.GetPOFilterString(ipVendorNum, ipInvoiceNum, out opFilterString);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("opFilterString", opFilterString);
                        extension___implementation.AfterMethod("GetPOFilterString", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetValueExchageRate(string vCurrencyCode, string vRateGrpCode, out decimal vExchangeRate, out string vXRateLabel, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetValueExchageRate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vCurrencyCode", vCurrencyCode);
                        extension___parameters.Add("vRateGrpCode", vRateGrpCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetValueExchageRate", extension___parameters);
                    }

                    adapter.Impl.GetValueExchageRate(vCurrencyCode, vRateGrpCode, out vExchangeRate, out vXRateLabel, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vCurrencyCode", vCurrencyCode);
                        extension___parameters.Add("vRateGrpCode", vRateGrpCode);
                        extension___parameters.Add("vExchangeRate", vExchangeRate);
                        extension___parameters.Add("vXRateLabel", vXRateLabel);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetValueExchageRate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GLAllocation(bool vCurrSwitch, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GLAllocation"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vCurrSwitch", vCurrSwitch);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GLAllocation", extension___parameters);
                    }

                    adapter.Impl.GLAllocation(vCurrSwitch, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vCurrSwitch", vCurrSwitch);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GLAllocation", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void InvoiceSelectedLines(ref Erp.Tablesets.APInvReceiptBillingTableset ds, out string opLOCMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("InvoiceSelectedLines"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("InvoiceSelectedLines", extension___parameters);
                    }

                    adapter.Impl.InvoiceSelectedLines(ref ds, out opLOCMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("opLOCMsg", opLOCMsg);
                        extension___implementation.AfterMethod("InvoiceSelectedLines", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void IsCorrectionInvoice(string cpInvoiceNum, out bool opIsCorrectionInvoice)
        {
            try
            {
                using (var adapter = this.GetImplementation("IsCorrectionInvoice"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("cpInvoiceNum", cpInvoiceNum);
                        extension___implementation.BeforeMethod("IsCorrectionInvoice", extension___parameters);
                    }

                    adapter.Impl.IsCorrectionInvoice(cpInvoiceNum, out opIsCorrectionInvoice);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("cpInvoiceNum", cpInvoiceNum);
                        extension___parameters.Add("opIsCorrectionInvoice", opIsCorrectionInvoice);
                        extension___implementation.AfterMethod("IsCorrectionInvoice", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvoiceTableset MassGenerateBOEapInvDtl(int ipVendorNum, string ipInvoiceNum, ref Erp.Tablesets.APInvHedListTableset ds, out string massGenErrorMsg, out string opWarning)
        {
            try
            {
                using (var adapter = this.GetImplementation("MassGenerateBOEapInvDtl"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("MassGenerateBOEapInvDtl", extension___parameters);
                    }

                    var _return = adapter.Impl.MassGenerateBOEapInvDtl(ipVendorNum, ipInvoiceNum, ref ds, out massGenErrorMsg, out opWarning);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("massGenErrorMsg", massGenErrorMsg);
                        extension___parameters.Add("opWarning", opWarning);
                        extension___implementation.AfterMethod("MassGenerateBOEapInvDtl", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void MatchLoggedInvoice(ref Erp.Tablesets.GetLogAPInvTableset ds, string cGroupID, bool confirmCheck, out string confirmMsg, bool skipInactiveVendors, ref Erp.Tablesets.APInvoiceTableset ds1)
        {
            try
            {
                using (var adapter = this.GetImplementation("MatchLoggedInvoice"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___parameters.Add("confirmCheck", confirmCheck);
                        extension___parameters.Add("skipInactiveVendors", skipInactiveVendors);
                        extension___parameters.Add("ds1", ds1);
                        extension___implementation.BeforeMethod("MatchLoggedInvoice", extension___parameters);
                    }

                    adapter.Impl.MatchLoggedInvoice(ref ds, cGroupID, confirmCheck, out confirmMsg, skipInactiveVendors, ref ds1);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___parameters.Add("confirmCheck", confirmCheck);
                        extension___parameters.Add("confirmMsg", confirmMsg);
                        extension___parameters.Add("skipInactiveVendors", skipInactiveVendors);
                        extension___parameters.Add("ds1", ds1);
                        extension___implementation.AfterMethod("MatchLoggedInvoice", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                        Ice.Manager.Security.CensorColumns(ds1);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeLineInvoiceRef(string NewInvoiceRef, out string opWarning, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeLineInvoiceRef"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("NewInvoiceRef", NewInvoiceRef);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeLineInvoiceRef", extension___parameters);
                    }

                    adapter.Impl.OnChangeLineInvoiceRef(NewInvoiceRef, out opWarning, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("NewInvoiceRef", NewInvoiceRef);
                        extension___parameters.Add("opWarning", opWarning);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeLineInvoiceRef", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeofApplyDate(int VendorNum, string InvoiceNum, string recalcAmts, System.DateTime? NewApplyDate, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeofApplyDate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("NewApplyDate", NewApplyDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeofApplyDate", extension___parameters);
                    }

                    adapter.Impl.OnChangeofApplyDate(VendorNum, InvoiceNum, recalcAmts, NewApplyDate, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("NewApplyDate", NewApplyDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeofApplyDate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeofApplyDateEx(int VendorNum, string InvoiceNum, string recalcAmts, System.DateTime? NewApplyDate, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeofApplyDateEx"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("NewApplyDate", NewApplyDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeofApplyDateEx", extension___parameters);
                    }

                    adapter.Impl.OnChangeofApplyDateEx(VendorNum, InvoiceNum, recalcAmts, NewApplyDate, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("NewApplyDate", NewApplyDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeofApplyDateEx", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeofApplyDateWithDateCheck(int VendorNum, string InvoiceNum, string recalcAmts, System.DateTime? NewApplyDate, out string DateMessage, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeofApplyDateWithDateCheck"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("NewApplyDate", NewApplyDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeofApplyDateWithDateCheck", extension___parameters);
                    }

                    adapter.Impl.OnChangeofApplyDateWithDateCheck(VendorNum, InvoiceNum, recalcAmts, NewApplyDate, out DateMessage, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("recalcAmts", recalcAmts);
                        extension___parameters.Add("NewApplyDate", NewApplyDate);
                        extension___parameters.Add("DateMessage", DateMessage);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeofApplyDateWithDateCheck", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeofTaxPoint(int VendorNum, string InvoiceNum, System.DateTime? newTaxPoint, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeofTaxPoint"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("newTaxPoint", newTaxPoint);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeofTaxPoint", extension___parameters);
                    }

                    adapter.Impl.OnChangeofTaxPoint(VendorNum, InvoiceNum, newTaxPoint, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("newTaxPoint", newTaxPoint);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeofTaxPoint", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeofTaxRateDate(int VendorNum, string InvoiceNum, System.DateTime? newTaxDate, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeofTaxRateDate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("newTaxDate", newTaxDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeofTaxRateDate", extension___parameters);
                    }

                    adapter.Impl.OnChangeofTaxRateDate(VendorNum, InvoiceNum, newTaxDate, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("newTaxDate", newTaxDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeofTaxRateDate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeofTransApplyDate(int VendorNum, string InvoiceNum, System.DateTime? NewTransApplyDate, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeofTransApplyDate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("NewTransApplyDate", NewTransApplyDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeofTransApplyDate", extension___parameters);
                    }

                    adapter.Impl.OnChangeofTransApplyDate(VendorNum, InvoiceNum, NewTransApplyDate, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("NewTransApplyDate", NewTransApplyDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeofTransApplyDate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeTranDocTypeID(string ipTranDocTypeID, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeTranDocTypeID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTranDocTypeID", ipTranDocTypeID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeTranDocTypeID", extension___parameters);
                    }

                    adapter.Impl.OnChangeTranDocTypeID(ipTranDocTypeID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTranDocTypeID", ipTranDocTypeID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeTranDocTypeID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeVendBankID(string pcVendBankID, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeVendBankID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcVendBankID", pcVendBankID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeVendBankID", extension___parameters);
                    }

                    adapter.Impl.OnChangeVendBankID(pcVendBankID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcVendBankID", pcVendBankID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeVendBankID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnLCFlagOfLineMiscChargeChange(string ipMiscCode, bool ipLCFlag)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnLCFlagOfLineMiscChargeChange"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipMiscCode", ipMiscCode);
                        extension___parameters.Add("ipLCFlag", ipLCFlag);
                        extension___implementation.BeforeMethod("OnLCFlagOfLineMiscChargeChange", extension___parameters);
                    }

                    adapter.Impl.OnLCFlagOfLineMiscChargeChange(ipMiscCode, ipLCFlag);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipMiscCode", ipMiscCode);
                        extension___parameters.Add("ipLCFlag", ipLCFlag);
                        extension___implementation.AfterMethod("OnLCFlagOfLineMiscChargeChange", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnShipmentIDChange(int ipShipmentID, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnShipmentIDChange"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipShipmentID", ipShipmentID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnShipmentIDChange", extension___parameters);
                    }

                    adapter.Impl.OnShipmentIDChange(ipShipmentID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipShipmentID", ipShipmentID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnShipmentIDChange", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnTHRefVendorIDChange(string vendorID, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnTHRefVendorIDChange"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorID", vendorID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnTHRefVendorIDChange", extension___parameters);
                    }

                    adapter.Impl.OnTHRefVendorIDChange(vendorID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorID", vendorID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnTHRefVendorIDChange", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnTHRefInvoiceNumChange(string apInvoiceNum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnTHRefInvoiceNumChange"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("apInvoiceNum", apInvoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnTHRefInvoiceNumChange", extension___parameters);
                    }

                    adapter.Impl.OnTHRefInvoiceNumChange(apInvoiceNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("apInvoiceNum", apInvoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnTHRefInvoiceNumChange", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnTHRefInvoiceNumChangeWithUnknownSupplier(string apInvoiceNum, out string opMessage, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnTHRefInvoiceNumChangeWithUnknownSupplier"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("apInvoiceNum", apInvoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnTHRefInvoiceNumChangeWithUnknownSupplier", extension___parameters);
                    }

                    adapter.Impl.OnTHRefInvoiceNumChangeWithUnknownSupplier(apInvoiceNum, out opMessage, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("apInvoiceNum", apInvoiceNum);
                        extension___parameters.Add("opMessage", opMessage);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnTHRefInvoiceNumChangeWithUnknownSupplier", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void PreSetAllocationAmt(bool nCurrSwitch, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("PreSetAllocationAmt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("nCurrSwitch", nCurrSwitch);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("PreSetAllocationAmt", extension___parameters);
                    }

                    adapter.Impl.PreSetAllocationAmt(nCurrSwitch, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("nCurrSwitch", nCurrSwitch);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("PreSetAllocationAmt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SelectUninvoicedRcptLines(ref Erp.Tablesets.APInvReceiptBillingTableset ds, int InVendorNum, string InPurPoint, int InPONum, string InPackSlip, bool InDropShip, string InvoiceNum, bool InGRNIClearing)
        {
            try
            {
                using (var adapter = this.GetImplementation("SelectUninvoicedRcptLines"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("InVendorNum", InVendorNum);
                        extension___parameters.Add("InPurPoint", InPurPoint);
                        extension___parameters.Add("InPONum", InPONum);
                        extension___parameters.Add("InPackSlip", InPackSlip);
                        extension___parameters.Add("InDropShip", InDropShip);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("InGRNIClearing", InGRNIClearing);
                        extension___implementation.BeforeMethod("SelectUninvoicedRcptLines", extension___parameters);
                    }

                    adapter.Impl.SelectUninvoicedRcptLines(ref ds, InVendorNum, InPurPoint, InPONum, InPackSlip, InDropShip, InvoiceNum, InGRNIClearing);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("InVendorNum", InVendorNum);
                        extension___parameters.Add("InPurPoint", InPurPoint);
                        extension___parameters.Add("InPONum", InPONum);
                        extension___parameters.Add("InPackSlip", InPackSlip);
                        extension___parameters.Add("InDropShip", InDropShip);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("InGRNIClearing", InGRNIClearing);
                        extension___implementation.AfterMethod("SelectUninvoicedRcptLines", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CompletePrecalcWHTax(string ipGroupID)
        {
            try
            {
                using (var adapter = this.GetImplementation("CompletePrecalcWHTax"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipGroupID", ipGroupID);
                        extension___implementation.BeforeMethod("CompletePrecalcWHTax", extension___parameters);
                    }

                    adapter.Impl.CompletePrecalcWHTax(ipGroupID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipGroupID", ipGroupID);
                        extension___implementation.AfterMethod("CompletePrecalcWHTax", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SetReadyToCalc(string ipGroupID, string ipInvoiceNum, int ipVendorNum, bool ipCalcAll, bool ipCalledFromUI, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("SetReadyToCalc"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipGroupID", ipGroupID);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipCalcAll", ipCalcAll);
                        extension___parameters.Add("ipCalledFromUI", ipCalledFromUI);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("SetReadyToCalc", extension___parameters);
                    }

                    adapter.Impl.SetReadyToCalc(ipGroupID, ipInvoiceNum, ipVendorNum, ipCalcAll, ipCalledFromUI, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipGroupID", ipGroupID);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipCalcAll", ipCalcAll);
                        extension___parameters.Add("ipCalledFromUI", ipCalledFromUI);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("SetReadyToCalc", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SubCDataBtnClicked(int ipVendorNum, string ipInvoiceNum, int ipInvoiceLine, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("SubCDataBtnClicked"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipInvoiceLine", ipInvoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("SubCDataBtnClicked", extension___parameters);
                    }

                    adapter.Impl.SubCDataBtnClicked(ipVendorNum, ipInvoiceNum, ipInvoiceLine, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipInvoiceLine", ipInvoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("SubCDataBtnClicked", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void TransferInvoiceToGroup(string TransferToGroupID, int XferInvVendorNum, string XferInvInvoiceNum, System.DateTime XferApplyDate, string cGroupID, out decimal grpTotalInvAmt, out bool lEnableGenLegalNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("TransferInvoiceToGroup"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("TransferToGroupID", TransferToGroupID);
                        extension___parameters.Add("XferInvVendorNum", XferInvVendorNum);
                        extension___parameters.Add("XferInvInvoiceNum", XferInvInvoiceNum);
                        extension___parameters.Add("XferApplyDate", XferApplyDate);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___implementation.BeforeMethod("TransferInvoiceToGroup", extension___parameters);
                    }

                    adapter.Impl.TransferInvoiceToGroup(TransferToGroupID, XferInvVendorNum, XferInvInvoiceNum, XferApplyDate, cGroupID, out grpTotalInvAmt, out lEnableGenLegalNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("TransferToGroupID", TransferToGroupID);
                        extension___parameters.Add("XferInvVendorNum", XferInvVendorNum);
                        extension___parameters.Add("XferInvInvoiceNum", XferInvInvoiceNum);
                        extension___parameters.Add("XferApplyDate", XferApplyDate);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___parameters.Add("grpTotalInvAmt", grpTotalInvAmt);
                        extension___parameters.Add("lEnableGenLegalNum", lEnableGenLegalNum);
                        extension___implementation.AfterMethod("TransferInvoiceToGroup", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void UpdAPInvoiceMatched(string txtGroup, int intVendorNum, string txtInvoiceNum, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("UpdAPInvoiceMatched"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("txtGroup", txtGroup);
                        extension___parameters.Add("intVendorNum", intVendorNum);
                        extension___parameters.Add("txtInvoiceNum", txtInvoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("UpdAPInvoiceMatched", extension___parameters);
                    }

                    adapter.Impl.UpdAPInvoiceMatched(txtGroup, intVendorNum, txtInvoiceNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("txtGroup", txtGroup);
                        extension___parameters.Add("intVendorNum", intVendorNum);
                        extension___parameters.Add("txtInvoiceNum", txtInvoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("UpdAPInvoiceMatched", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void UpdateMaster(ref Erp.Tablesets.APInvoiceTableset ds, string cGroupID, string cTableName, bool runChkCPay, bool runChkBankRef, bool runChkRevChrg, bool suppressUserPrompts, out decimal grpTotalInvAmt, out bool requiresUserInput, out string opMessage, out string opMsgChkBankRef, out string opChkRevMsg, out bool lEnableGenLegalNum, out bool lUpdateRan, out string opDUAMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("UpdateMaster"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___parameters.Add("cTableName", cTableName);
                        extension___parameters.Add("runChkCPay", runChkCPay);
                        extension___parameters.Add("runChkBankRef", runChkBankRef);
                        extension___parameters.Add("runChkRevChrg", runChkRevChrg);
                        extension___parameters.Add("suppressUserPrompts", suppressUserPrompts);
                        extension___implementation.BeforeMethod("UpdateMaster", extension___parameters);
                    }

                    adapter.Impl.UpdateMaster(ref ds, cGroupID, cTableName, runChkCPay, runChkBankRef, runChkRevChrg, suppressUserPrompts, out grpTotalInvAmt, out requiresUserInput, out opMessage, out opMsgChkBankRef, out opChkRevMsg, out lEnableGenLegalNum, out lUpdateRan, out opDUAMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cGroupID", cGroupID);
                        extension___parameters.Add("cTableName", cTableName);
                        extension___parameters.Add("runChkCPay", runChkCPay);
                        extension___parameters.Add("runChkBankRef", runChkBankRef);
                        extension___parameters.Add("runChkRevChrg", runChkRevChrg);
                        extension___parameters.Add("suppressUserPrompts", suppressUserPrompts);
                        extension___parameters.Add("grpTotalInvAmt", grpTotalInvAmt);
                        extension___parameters.Add("requiresUserInput", requiresUserInput);
                        extension___parameters.Add("opMessage", opMessage);
                        extension___parameters.Add("opMsgChkBankRef", opMsgChkBankRef);
                        extension___parameters.Add("opChkRevMsg", opChkRevMsg);
                        extension___parameters.Add("lEnableGenLegalNum", lEnableGenLegalNum);
                        extension___parameters.Add("lUpdateRan", lUpdateRan);
                        extension___parameters.Add("opDUAMsg", opDUAMsg);
                        extension___implementation.AfterMethod("UpdateMaster", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void UpdGetLogAPInv(ref Erp.Tablesets.GetLogAPInvTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("UpdGetLogAPInv"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("UpdGetLogAPInv", extension___parameters);
                    }

                    adapter.Impl.UpdGetLogAPInv(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("UpdGetLogAPInv", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void UsePurchaseCode(out bool UsePurchaseCode)
        {
            try
            {
                using (var adapter = this.GetImplementation("UsePurchaseCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("UsePurchaseCode", extension___parameters);
                    }

                    adapter.Impl.UsePurchaseCode(out UsePurchaseCode);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("UsePurchaseCode", UsePurchaseCode);
                        extension___implementation.AfterMethod("UsePurchaseCode", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool ValidateBankRefs(string ipGroupID, out string cErrorMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateBankRefs"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipGroupID", ipGroupID);
                        extension___implementation.BeforeMethod("ValidateBankRefs", extension___parameters);
                    }

                    var _return = adapter.Impl.ValidateBankRefs(ipGroupID, out cErrorMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipGroupID", ipGroupID);
                        extension___parameters.Add("cErrorMsg", cErrorMsg);
                        extension___implementation.AfterMethod("ValidateBankRefs", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateInvoiceID(string txtVendorID, string txtInvoiceNum, out int intVendorNum, out bool logAPInvFound)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateInvoiceID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("txtVendorID", txtVendorID);
                        extension___parameters.Add("txtInvoiceNum", txtInvoiceNum);
                        extension___implementation.BeforeMethod("ValidateInvoiceID", extension___parameters);
                    }

                    adapter.Impl.ValidateInvoiceID(txtVendorID, txtInvoiceNum, out intVendorNum, out logAPInvFound);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("txtVendorID", txtVendorID);
                        extension___parameters.Add("txtInvoiceNum", txtInvoiceNum);
                        extension___parameters.Add("intVendorNum", intVendorNum);
                        extension___parameters.Add("logAPInvFound", logAPInvFound);
                        extension___implementation.AfterMethod("ValidateInvoiceID", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateTaxRateCodes(string proposedRateCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateTaxRateCodes"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedRateCode", proposedRateCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ValidateTaxRateCodes", extension___parameters);
                    }

                    adapter.Impl.ValidateTaxRateCodes(proposedRateCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("proposedRateCode", proposedRateCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ValidateTaxRateCodes", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeCycleCode(int ipVendorNum, string ipInvoiceNum, string ipCycleCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeCycleCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipCycleCode", ipCycleCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeCycleCode", extension___parameters);
                    }

                    adapter.Impl.OnChangeCycleCode(ipVendorNum, ipInvoiceNum, ipCycleCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipCycleCode", ipCycleCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeCycleCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeRecurring(int ipVendorNum, string ipInvoiceNum, bool ipRecurring, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeRecurring"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipRecurring", ipRecurring);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeRecurring", extension___parameters);
                    }

                    adapter.Impl.OnChangeRecurring(ipVendorNum, ipInvoiceNum, ipRecurring, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipRecurring", ipRecurring);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeRecurring", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CreateRecurInvoice(string ipVendorList, string ipCycleCodesList, string ipSelectedVendorNum, string ipSelectedInvoiceNum, string ipNewGroupID, int ipFirstDayOfWeek, out string opNewInvoiceNum, out string opErrMsg, out string inactiveVendorMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("CreateRecurInvoice"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorList", ipVendorList);
                        extension___parameters.Add("ipCycleCodesList", ipCycleCodesList);
                        extension___parameters.Add("ipSelectedVendorNum", ipSelectedVendorNum);
                        extension___parameters.Add("ipSelectedInvoiceNum", ipSelectedInvoiceNum);
                        extension___parameters.Add("ipNewGroupID", ipNewGroupID);
                        extension___parameters.Add("ipFirstDayOfWeek", ipFirstDayOfWeek);
                        extension___implementation.BeforeMethod("CreateRecurInvoice", extension___parameters);
                    }

                    adapter.Impl.CreateRecurInvoice(ipVendorList, ipCycleCodesList, ipSelectedVendorNum, ipSelectedInvoiceNum, ipNewGroupID, ipFirstDayOfWeek, out opNewInvoiceNum, out opErrMsg, out inactiveVendorMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorList", ipVendorList);
                        extension___parameters.Add("ipCycleCodesList", ipCycleCodesList);
                        extension___parameters.Add("ipSelectedVendorNum", ipSelectedVendorNum);
                        extension___parameters.Add("ipSelectedInvoiceNum", ipSelectedInvoiceNum);
                        extension___parameters.Add("ipNewGroupID", ipNewGroupID);
                        extension___parameters.Add("ipFirstDayOfWeek", ipFirstDayOfWeek);
                        extension___parameters.Add("opNewInvoiceNum", opNewInvoiceNum);
                        extension___parameters.Add("opErrMsg", opErrMsg);
                        extension___parameters.Add("inactiveVendorMsg", inactiveVendorMsg);
                        extension___implementation.AfterMethod("CreateRecurInvoice", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetAPInvcRecurr(int vendorNum, string invoiceNum, ref Erp.Tablesets.APRecurringInvTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAPInvcRecurr"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetAPInvcRecurr", extension___parameters);
                    }

                    adapter.Impl.GetAPInvcRecurr(vendorNum, invoiceNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetAPInvcRecurr", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetAPInvRecurInfo(int ipVendorNum, string ipInvoiceNum, int ipFirstDayOfWeek, out System.DateTime? outNexInvDate)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAPInvRecurInfo"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipFirstDayOfWeek", ipFirstDayOfWeek);
                        extension___implementation.BeforeMethod("GetAPInvRecurInfo", extension___parameters);
                    }

                    adapter.Impl.GetAPInvRecurInfo(ipVendorNum, ipInvoiceNum, ipFirstDayOfWeek, out outNexInvDate);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorNum", ipVendorNum);
                        extension___parameters.Add("ipInvoiceNum", ipInvoiceNum);
                        extension___parameters.Add("ipFirstDayOfWeek", ipFirstDayOfWeek);
                        extension___parameters.Add("outNexInvDate", outNexInvDate);
                        extension___implementation.AfterMethod("GetAPInvRecurInfo", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeLineDefferedExp(int vendorNum, string invoiceNum, int invoiceLine, bool ipDefExp, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeLineDefferedExp"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ipDefExp", ipDefExp);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeLineDefferedExp", extension___parameters);
                    }

                    adapter.Impl.OnChangeLineDefferedExp(vendorNum, invoiceNum, invoiceLine, ipDefExp, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ipDefExp", ipDefExp);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeLineDefferedExp", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeLineCommodityCode(string newCommodityCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeLineCommodityCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("newCommodityCode", newCommodityCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeLineCommodityCode", extension___parameters);
                    }

                    adapter.Impl.OnChangeLineCommodityCode(newCommodityCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("newCommodityCode", newCommodityCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeLineCommodityCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeLineDEACode(int vendorNum, string invoiceNum, int invoiceLine, string deaCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeLineDEACode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("deaCode", deaCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeLineDEACode", extension___parameters);
                    }

                    adapter.Impl.OnChangeLineDEACode(vendorNum, invoiceNum, invoiceLine, deaCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("deaCode", deaCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeLineDEACode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeLineDEAStartDate(int vendorNum, string invoiceNum, int invoiceLine, System.DateTime? startDate, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeLineDEAStartDate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("startDate", startDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeLineDEAStartDate", extension___parameters);
                    }

                    adapter.Impl.OnChangeLineDEAStartDate(vendorNum, invoiceNum, invoiceLine, startDate, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("startDate", startDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeLineDEAStartDate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GenerateAmortizationSchedule(int vendorNum, string invoiceNum, int invoiceLine, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GenerateAmortizationSchedule"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GenerateAmortizationSchedule", extension___parameters);
                    }

                    adapter.Impl.GenerateAmortizationSchedule(vendorNum, invoiceNum, invoiceLine, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GenerateAmortizationSchedule", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeleteAmortizationSchedule(int vendorNum, string invoiceNum, int invoiceLine, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeleteAmortizationSchedule"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("DeleteAmortizationSchedule", extension___parameters);
                    }

                    adapter.Impl.DeleteAmortizationSchedule(vendorNum, invoiceNum, invoiceLine, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("DeleteAmortizationSchedule", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeDEAScheduleLineAmount(int vendorNum, string invoiceNum, int invoiceLine, int amortSeq, string srcField, decimal propValue, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeDEAScheduleLineAmount"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("amortSeq", amortSeq);
                        extension___parameters.Add("srcField", srcField);
                        extension___parameters.Add("propValue", propValue);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeDEAScheduleLineAmount", extension___parameters);
                    }

                    adapter.Impl.OnChangeDEAScheduleLineAmount(vendorNum, invoiceNum, invoiceLine, amortSeq, srcField, propValue, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("amortSeq", amortSeq);
                        extension___parameters.Add("srcField", srcField);
                        extension___parameters.Add("propValue", propValue);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeDEAScheduleLineAmount", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeDEAScheduleLineFiscalPeriod(int vendorNum, string invoiceNum, int invoiceLine, int amortSeq, string srcField, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeDEAScheduleLineFiscalPeriod"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("amortSeq", amortSeq);
                        extension___parameters.Add("srcField", srcField);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeDEAScheduleLineFiscalPeriod", extension___parameters);
                    }

                    adapter.Impl.OnChangeDEAScheduleLineFiscalPeriod(vendorNum, invoiceNum, invoiceLine, amortSeq, srcField, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("amortSeq", amortSeq);
                        extension___parameters.Add("srcField", srcField);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeDEAScheduleLineFiscalPeriod", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AutocompleteAmortizationSchedule(int vendorNum, string invoiceNum, int invoiceLine, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("AutocompleteAmortizationSchedule"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("AutocompleteAmortizationSchedule", extension___parameters);
                    }

                    adapter.Impl.AutocompleteAmortizationSchedule(vendorNum, invoiceNum, invoiceLine, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("AutocompleteAmortizationSchedule", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CalculateAmortizationTotals(int vendorNum, string invoiceNum, int invoiceLine, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("CalculateAmortizationTotals"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CalculateAmortizationTotals", extension___parameters);
                    }

                    adapter.Impl.CalculateAmortizationTotals(vendorNum, invoiceNum, invoiceLine, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("CalculateAmortizationTotals", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetDefaultAmortizationAccounts(int vendorNum, string invoiceNum, int invoiceLine, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetDefaultAmortizationAccounts"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetDefaultAmortizationAccounts", extension___parameters);
                    }

                    adapter.Impl.GetDefaultAmortizationAccounts(vendorNum, invoiceNum, invoiceLine, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetDefaultAmortizationAccounts", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeleteAmortizationSchedulesOfGroup(string groupID, int vendorNum, string invoiceNum, int invoiceLine, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeleteAmortizationSchedulesOfGroup"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("DeleteAmortizationSchedulesOfGroup", extension___parameters);
                    }

                    adapter.Impl.DeleteAmortizationSchedulesOfGroup(groupID, vendorNum, invoiceNum, invoiceLine, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("DeleteAmortizationSchedulesOfGroup", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GenerateAmortizationSchedulesForGroup(string groupID, int vendorNum, string invoiceNum, int invoiceLine, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GenerateAmortizationSchedulesForGroup"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GenerateAmortizationSchedulesForGroup", extension___parameters);
                    }

                    adapter.Impl.GenerateAmortizationSchedulesForGroup(groupID, vendorNum, invoiceNum, invoiceLine, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GenerateAmortizationSchedulesForGroup", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void RestoreAmortizationSchedulesOfGroup(string groupID, int vendorNum, string invoiceNum, int invoiceLine, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("RestoreAmortizationSchedulesOfGroup"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("RestoreAmortizationSchedulesOfGroup", extension___parameters);
                    }

                    adapter.Impl.RestoreAmortizationSchedulesOfGroup(groupID, vendorNum, invoiceNum, invoiceLine, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("RestoreAmortizationSchedulesOfGroup", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateAllDeferredLinesAreScheduled(string groupID)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateAllDeferredLinesAreScheduled"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___implementation.BeforeMethod("ValidateAllDeferredLinesAreScheduled", extension___parameters);
                    }

                    adapter.Impl.ValidateAllDeferredLinesAreScheduled(groupID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___implementation.AfterMethod("ValidateAllDeferredLinesAreScheduled", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateAllDeferredLinesHaveGLAccount(string groupID)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateAllDeferredLinesHaveGLAccount"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___implementation.BeforeMethod("ValidateAllDeferredLinesHaveGLAccount", extension___parameters);
                    }

                    adapter.Impl.ValidateAllDeferredLinesHaveGLAccount(groupID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___implementation.AfterMethod("ValidateAllDeferredLinesHaveGLAccount", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetAPUninvoicedReceiptLines(ref Erp.Tablesets.APInvReceiptBillingTableset ds, int VendorNum, string PurPoint, string PackSlip, bool isFirstReceipt, string InvoiceNum, int InPONum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAPUninvoicedReceiptLines"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("PurPoint", PurPoint);
                        extension___parameters.Add("PackSlip", PackSlip);
                        extension___parameters.Add("isFirstReceipt", isFirstReceipt);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("InPONum", InPONum);
                        extension___implementation.BeforeMethod("GetAPUninvoicedReceiptLines", extension___parameters);
                    }

                    adapter.Impl.GetAPUninvoicedReceiptLines(ref ds, VendorNum, PurPoint, PackSlip, isFirstReceipt, InvoiceNum, InPONum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("PurPoint", PurPoint);
                        extension___parameters.Add("PackSlip", PackSlip);
                        extension___parameters.Add("isFirstReceipt", isFirstReceipt);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("InPONum", InPONum);
                        extension___implementation.AfterMethod("GetAPUninvoicedReceiptLines", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetAPUninvoicedDropShipmentLines(int VendorNum, string PurPoint, string PackSlip, string InvoiceNum, ref Erp.Tablesets.APInvReceiptBillingTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAPUninvoicedDropShipmentLines"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("PurPoint", PurPoint);
                        extension___parameters.Add("PackSlip", PackSlip);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetAPUninvoicedDropShipmentLines", extension___parameters);
                    }

                    adapter.Impl.GetAPUninvoicedDropShipmentLines(VendorNum, PurPoint, PackSlip, InvoiceNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("PurPoint", PurPoint);
                        extension___parameters.Add("PackSlip", PackSlip);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetAPUninvoicedDropShipmentLines", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeofLineTaxRgn(string iTaxRegionCode, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeofLineTaxRgn"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("iTaxRegionCode", iTaxRegionCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeofLineTaxRgn", extension___parameters);
                    }

                    adapter.Impl.OnChangeofLineTaxRgn(iTaxRegionCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("iTaxRegionCode", iTaxRegionCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeofLineTaxRgn", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetAllowMultInvcReceiptsValue(out bool flag)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAllowMultInvcReceiptsValue"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetAllowMultInvcReceiptsValue", extension___parameters);
                    }

                    adapter.Impl.GetAllowMultInvcReceiptsValue(out flag);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("flag", flag);
                        extension___implementation.AfterMethod("GetAllowMultInvcReceiptsValue", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CreateNotInvRcptInvoice(ref Erp.Tablesets.APInvGetNotInvRecSourceTableset ds, string selectionMode, string ipVendorList, string ipNewGroupID, string invoiceNum, System.DateTime? invoiceDate, string docTypeID, out string opNewInvoiceNum, out string opErrMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("CreateNotInvRcptInvoice"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("selectionMode", selectionMode);
                        extension___parameters.Add("ipVendorList", ipVendorList);
                        extension___parameters.Add("ipNewGroupID", ipNewGroupID);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceDate", invoiceDate);
                        extension___parameters.Add("docTypeID", docTypeID);
                        extension___implementation.BeforeMethod("CreateNotInvRcptInvoice", extension___parameters);
                    }

                    adapter.Impl.CreateNotInvRcptInvoice(ref ds, selectionMode, ipVendorList, ipNewGroupID, invoiceNum, invoiceDate, docTypeID, out opNewInvoiceNum, out opErrMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("selectionMode", selectionMode);
                        extension___parameters.Add("ipVendorList", ipVendorList);
                        extension___parameters.Add("ipNewGroupID", ipNewGroupID);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceDate", invoiceDate);
                        extension___parameters.Add("docTypeID", docTypeID);
                        extension___parameters.Add("opNewInvoiceNum", opNewInvoiceNum);
                        extension___parameters.Add("opErrMsg", opErrMsg);
                        extension___implementation.AfterMethod("CreateNotInvRcptInvoice", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void PostGRNIClearingInvoices(out string Result, string GroupID, string InvoiceNum, int VendorNum, string tranDocType, ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("PostGRNIClearingInvoices"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("GroupID", GroupID);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("tranDocType", tranDocType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("PostGRNIClearingInvoices", extension___parameters);
                    }

                    adapter.Impl.PostGRNIClearingInvoices(out Result, GroupID, InvoiceNum, VendorNum, tranDocType, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("Result", Result);
                        extension___parameters.Add("GroupID", GroupID);
                        extension___parameters.Add("InvoiceNum", InvoiceNum);
                        extension___parameters.Add("VendorNum", VendorNum);
                        extension___parameters.Add("tranDocType", tranDocType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("PostGRNIClearingInvoices", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool ValidateNotPostedInvoices(string ipVendorList)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateNotPostedInvoices"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorList", ipVendorList);
                        extension___implementation.BeforeMethod("ValidateNotPostedInvoices", extension___parameters);
                    }

                    var _return = adapter.Impl.ValidateNotPostedInvoices(ipVendorList);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipVendorList", ipVendorList);
                        extension___implementation.AfterMethod("ValidateNotPostedInvoices", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetAPInvHedTransferList(ref Erp.Tablesets.APInvHedListTableset ds, string GroupID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAPInvHedTransferList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("GroupID", GroupID);
                        extension___implementation.BeforeMethod("GetAPInvHedTransferList", extension___parameters);
                    }

                    adapter.Impl.GetAPInvHedTransferList(ref ds, GroupID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("GroupID", GroupID);
                        extension___implementation.AfterMethod("GetAPInvHedTransferList", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool ValidateGroupID(string sGroupID)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateGroupID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("sGroupID", sGroupID);
                        extension___implementation.BeforeMethod("ValidateGroupID", extension___parameters);
                    }

                    var _return = adapter.Impl.ValidateGroupID(sGroupID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("sGroupID", sGroupID);
                        extension___implementation.AfterMethod("ValidateGroupID", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CreateAPInvGrp(string sFromGroupID, string sToGrouID)
        {
            try
            {
                using (var adapter = this.GetImplementation("CreateAPInvGrp"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("sFromGroupID", sFromGroupID);
                        extension___parameters.Add("sToGrouID", sToGrouID);
                        extension___implementation.BeforeMethod("CreateAPInvGrp", extension___parameters);
                    }

                    adapter.Impl.CreateAPInvGrp(sFromGroupID, sToGrouID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("sFromGroupID", sFromGroupID);
                        extension___parameters.Add("sToGrouID", sToGrouID);
                        extension___implementation.AfterMethod("CreateAPInvGrp", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetDfltDocumentType(string inSystemTranID, out string outTranDocTypeID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetDfltDocumentType"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inSystemTranID", inSystemTranID);
                        extension___implementation.BeforeMethod("GetDfltDocumentType", extension___parameters);
                    }

                    adapter.Impl.GetDfltDocumentType(inSystemTranID, out outTranDocTypeID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inSystemTranID", inSystemTranID);
                        extension___parameters.Add("outTranDocTypeID", outTranDocTypeID);
                        extension___implementation.AfterMethod("GetDfltDocumentType", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeCorrTranDocTypeID(string ipTranDocTypeID, string ipSystemTranID)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeCorrTranDocTypeID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTranDocTypeID", ipTranDocTypeID);
                        extension___parameters.Add("ipSystemTranID", ipSystemTranID);
                        extension___implementation.BeforeMethod("OnChangeCorrTranDocTypeID", extension___parameters);
                    }

                    adapter.Impl.OnChangeCorrTranDocTypeID(ipTranDocTypeID, ipSystemTranID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTranDocTypeID", ipTranDocTypeID);
                        extension___parameters.Add("ipSystemTranID", ipSystemTranID);
                        extension___implementation.AfterMethod("OnChangeCorrTranDocTypeID", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [System.ObsoleteAttribute("This method is obsolete.")]
        public void UpdateTaxAdjustment(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("UpdateTaxAdjustment"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("UpdateTaxAdjustment", extension___parameters);
                    }

                    adapter.Impl.UpdateTaxAdjustment(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("UpdateTaxAdjustment", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void PreUpdate(ref Erp.Tablesets.APInvoiceTableset ds, out bool requiresUserInput)
        {
            try
            {
                using (var adapter = this.GetImplementation("PreUpdate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("PreUpdate", extension___parameters);
                    }

                    adapter.Impl.PreUpdate(ref ds, out requiresUserInput);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("requiresUserInput", requiresUserInput);
                        extension___implementation.AfterMethod("PreUpdate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidatePLInvoiceReference(int intVendorNum, string txtInvoiceNum, string txtPLInvoiceReference, out bool isLogAPInvFound, out string logAPInvNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidatePLInvoiceReference"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("intVendorNum", intVendorNum);
                        extension___parameters.Add("txtInvoiceNum", txtInvoiceNum);
                        extension___parameters.Add("txtPLInvoiceReference", txtPLInvoiceReference);
                        extension___implementation.BeforeMethod("ValidatePLInvoiceReference", extension___parameters);
                    }

                    adapter.Impl.ValidatePLInvoiceReference(intVendorNum, txtInvoiceNum, txtPLInvoiceReference, out isLogAPInvFound, out logAPInvNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("intVendorNum", intVendorNum);
                        extension___parameters.Add("txtInvoiceNum", txtInvoiceNum);
                        extension___parameters.Add("txtPLInvoiceReference", txtPLInvoiceReference);
                        extension___parameters.Add("isLogAPInvFound", isLogAPInvFound);
                        extension___parameters.Add("logAPInvNum", logAPInvNum);
                        extension___implementation.AfterMethod("ValidatePLInvoiceReference", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Ice.BOUpdErrorTableset PreInvoice(ref Erp.Tablesets.UpdExtAPInvoiceTableset ds, bool continueProcessingOnError, bool recalculateByExtCost, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            try
            {
                using (var adapter = this.GetImplementation("PreInvoice"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("recalculateByExtCost", recalculateByExtCost);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___implementation.BeforeMethod("PreInvoice", extension___parameters);
                    }

                    var _return = adapter.Impl.PreInvoice(ref ds, continueProcessingOnError, recalculateByExtCost, rollbackParentOnChildError, out errorsOccurred);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("recalculateByExtCost", recalculateByExtCost);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___parameters.Add("errorsOccurred", errorsOccurred);
                        extension___implementation.AfterMethod("PreInvoice", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Ice.BOUpdErrorTableset UpdateMasterExt(ref Erp.Tablesets.UpdExtAPInvoiceTableset ds, bool continueProcessingOnError, bool recalculateByExtCost, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            try
            {
                using (var adapter = this.GetImplementation("UpdateMasterExt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("recalculateByExtCost", recalculateByExtCost);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___implementation.BeforeMethod("UpdateMasterExt", extension___parameters);
                    }

                    var _return = adapter.Impl.UpdateMasterExt(ref ds, continueProcessingOnError, recalculateByExtCost, rollbackParentOnChildError, out errorsOccurred);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("recalculateByExtCost", recalculateByExtCost);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___parameters.Add("errorsOccurred", errorsOccurred);
                        extension___implementation.AfterMethod("UpdateMasterExt", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckVendorTaxID(string vendorID, out string errMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckVendorTaxID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorID", vendorID);
                        extension___implementation.BeforeMethod("CheckVendorTaxID", extension___parameters);
                    }

                    adapter.Impl.CheckVendorTaxID(vendorID, out errMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorID", vendorID);
                        extension___parameters.Add("errMessage", errMessage);
                        extension___implementation.AfterMethod("CheckVendorTaxID", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckGroupTaxID(string groupID, out string errMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckGroupTaxID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___implementation.BeforeMethod("CheckGroupTaxID", extension___parameters);
                    }

                    adapter.Impl.CheckGroupTaxID(groupID, out errMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupID", groupID);
                        extension___parameters.Add("errMessage", errMessage);
                        extension___implementation.AfterMethod("CheckGroupTaxID", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetPlasticPackTaxCostLines(ref Erp.Tablesets.LateCostLinesTableset ds, string plasticPackTaxReportID, int invVendorNum, string invNum, int invMscNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetPlasticPackTaxCostLines"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("plasticPackTaxReportID", plasticPackTaxReportID);
                        extension___parameters.Add("invVendorNum", invVendorNum);
                        extension___parameters.Add("invNum", invNum);
                        extension___parameters.Add("invMscNum", invMscNum);
                        extension___implementation.BeforeMethod("GetPlasticPackTaxCostLines", extension___parameters);
                    }

                    adapter.Impl.GetPlasticPackTaxCostLines(ref ds, plasticPackTaxReportID, invVendorNum, invNum, invMscNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("plasticPackTaxReportID", plasticPackTaxReportID);
                        extension___parameters.Add("invVendorNum", invVendorNum);
                        extension___parameters.Add("invNum", invNum);
                        extension___parameters.Add("invMscNum", invMscNum);
                        extension___implementation.AfterMethod("GetPlasticPackTaxCostLines", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetAPLateCosts(ref Erp.Tablesets.APLateCostsTableset ds, int vendorNum, string invoiceNum, int InPONum, int InContainerID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAPLateCosts"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("InPONum", InPONum);
                        extension___parameters.Add("InContainerID", InContainerID);
                        extension___implementation.BeforeMethod("GetAPLateCosts", extension___parameters);
                    }

                    adapter.Impl.GetAPLateCosts(ref ds, vendorNum, invoiceNum, InPONum, InContainerID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("InPONum", InPONum);
                        extension___parameters.Add("InContainerID", InContainerID);
                        extension___implementation.AfterMethod("GetAPLateCosts", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetAPLateCostLines(ref Erp.Tablesets.APLateCostsTableset ds, int vendorNum, string purPoint, string packSlip, int containerID, string invoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAPLateCostLines"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("packSlip", packSlip);
                        extension___parameters.Add("containerID", containerID);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.BeforeMethod("GetAPLateCostLines", extension___parameters);
                    }

                    adapter.Impl.GetAPLateCostLines(ref ds, vendorNum, purPoint, packSlip, containerID, invoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("packSlip", packSlip);
                        extension___parameters.Add("containerID", containerID);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.AfterMethod("GetAPLateCostLines", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SelectUninvoicedLateCosts(ref Erp.Tablesets.APLateCostsTableset ds, int vendorNum, string purPoint, string packSlip, int containerID, string invoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("SelectUninvoicedLateCosts"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("packSlip", packSlip);
                        extension___parameters.Add("containerID", containerID);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.BeforeMethod("SelectUninvoicedLateCosts", extension___parameters);
                    }

                    adapter.Impl.SelectUninvoicedLateCosts(ref ds, vendorNum, purPoint, packSlip, containerID, invoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("packSlip", packSlip);
                        extension___parameters.Add("containerID", containerID);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.AfterMethod("SelectUninvoicedLateCosts", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeselectSelectedLateCosts(ref Erp.Tablesets.APLateCostsTableset ds, int vendorNum, string purPoint, string packSlip, int containerID, string invoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeselectSelectedLateCosts"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("packSlip", packSlip);
                        extension___parameters.Add("containerID", containerID);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.BeforeMethod("DeselectSelectedLateCosts", extension___parameters);
                    }

                    adapter.Impl.DeselectSelectedLateCosts(ref ds, vendorNum, purPoint, packSlip, containerID, invoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("packSlip", packSlip);
                        extension___parameters.Add("containerID", containerID);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.AfterMethod("DeselectSelectedLateCosts", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void InvoiceSelectedLateCosts(ref Erp.Tablesets.APLateCostsTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("InvoiceSelectedLateCosts"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("InvoiceSelectedLateCosts", extension___parameters);
                    }

                    adapter.Impl.InvoiceSelectedLateCosts(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("InvoiceSelectedLateCosts", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool ValidateRcvMiscSumBeforeDeleteLateCost(int vendorNum, string invoiceNum, int mscNum, out string warningMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateRcvMiscSumBeforeDeleteLateCost"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("mscNum", mscNum);
                        extension___implementation.BeforeMethod("ValidateRcvMiscSumBeforeDeleteLateCost", extension___parameters);
                    }

                    var _return = adapter.Impl.ValidateRcvMiscSumBeforeDeleteLateCost(vendorNum, invoiceNum, mscNum, out warningMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("mscNum", mscNum);
                        extension___parameters.Add("warningMessage", warningMessage);
                        extension___implementation.AfterMethod("ValidateRcvMiscSumBeforeDeleteLateCost", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool ValidateRcvMiscBeforeDeleteLateCost(int vendorNum, string invoiceNum, int mscNum, int miscSeq, out string warningMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateRcvMiscBeforeDeleteLateCost"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("mscNum", mscNum);
                        extension___parameters.Add("miscSeq", miscSeq);
                        extension___implementation.BeforeMethod("ValidateRcvMiscBeforeDeleteLateCost", extension___parameters);
                    }

                    var _return = adapter.Impl.ValidateRcvMiscBeforeDeleteLateCost(vendorNum, invoiceNum, mscNum, miscSeq, out warningMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("mscNum", mscNum);
                        extension___parameters.Add("miscSeq", miscSeq);
                        extension___parameters.Add("warningMessage", warningMessage);
                        extension___implementation.AfterMethod("ValidateRcvMiscBeforeDeleteLateCost", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool ValidateLateCostBeforeAllocate(ref Erp.Tablesets.LateCostLinesTableset ds, out string warningMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateLateCostBeforeAllocate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ValidateLateCostBeforeAllocate", extension___parameters);
                    }

                    var _return = adapter.Impl.ValidateLateCostBeforeAllocate(ref ds, out warningMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("warningMessage", warningMessage);
                        extension___implementation.AfterMethod("ValidateLateCostBeforeAllocate", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.APInvoiceTableset ChangeInvoiceNumber(int vendorNum, string originalInvoiceNum, string newInvoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeInvoiceNumber"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("originalInvoiceNum", originalInvoiceNum);
                        extension___parameters.Add("newInvoiceNum", newInvoiceNum);
                        extension___implementation.BeforeMethod("ChangeInvoiceNumber", extension___parameters);
                    }

                    var _return = adapter.Impl.ChangeInvoiceNumber(vendorNum, originalInvoiceNum, newInvoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("originalInvoiceNum", originalInvoiceNum);
                        extension___parameters.Add("newInvoiceNum", newInvoiceNum);
                        extension___implementation.AfterMethod("ChangeInvoiceNumber", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvHed(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvHed"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___implementation.BeforeMethod("GetNewAPInvHed", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvHed(ref ds, vendorNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___implementation.AfterMethod("GetNewAPInvHed", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvHedAttch(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvHedAttch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.BeforeMethod("GetNewAPInvHedAttch", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvHedAttch(ref ds, vendorNum, invoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.AfterMethod("GetNewAPInvHedAttch", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPIHAPInvExp(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPIHAPInvExp"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.BeforeMethod("GetNewAPIHAPInvExp", extension___parameters);
                    }

                    adapter.Impl.GetNewAPIHAPInvExp(ref ds, vendorNum, invoiceNum, invoiceLine);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.AfterMethod("GetNewAPIHAPInvExp", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPIHAPInvExpTGLC(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, int invExpSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPIHAPInvExpTGLC"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("invExpSeq", invExpSeq);
                        extension___implementation.BeforeMethod("GetNewAPIHAPInvExpTGLC", extension___parameters);
                    }

                    adapter.Impl.GetNewAPIHAPInvExpTGLC(ref ds, vendorNum, invoiceNum, invoiceLine, invExpSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("invExpSeq", invExpSeq);
                        extension___implementation.AfterMethod("GetNewAPIHAPInvExpTGLC", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPIHAPInvMsc(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPIHAPInvMsc"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.BeforeMethod("GetNewAPIHAPInvMsc", extension___parameters);
                    }

                    adapter.Impl.GetNewAPIHAPInvMsc(ref ds, vendorNum, invoiceNum, invoiceLine);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.AfterMethod("GetNewAPIHAPInvMsc", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewRcvMisc(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string purPoint, string packSlip)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewRcvMisc"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("packSlip", packSlip);
                        extension___implementation.BeforeMethod("GetNewRcvMisc", extension___parameters);
                    }

                    adapter.Impl.GetNewRcvMisc(ref ds, vendorNum, purPoint, packSlip);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("purPoint", purPoint);
                        extension___parameters.Add("packSlip", packSlip);
                        extension___implementation.AfterMethod("GetNewRcvMisc", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPIHAPLnTax(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, string taxCode, string rateCode)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPIHAPLnTax"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("taxCode", taxCode);
                        extension___parameters.Add("rateCode", rateCode);
                        extension___implementation.BeforeMethod("GetNewAPIHAPLnTax", extension___parameters);
                    }

                    adapter.Impl.GetNewAPIHAPLnTax(ref ds, vendorNum, invoiceNum, invoiceLine, taxCode, rateCode);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("taxCode", taxCode);
                        extension___parameters.Add("rateCode", rateCode);
                        extension___implementation.AfterMethod("GetNewAPIHAPLnTax", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvDtl(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvDtl"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.BeforeMethod("GetNewAPInvDtl", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvDtl(ref ds, vendorNum, invoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.AfterMethod("GetNewAPInvDtl", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvDtlAttch(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvDtlAttch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.BeforeMethod("GetNewAPInvDtlAttch", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvDtlAttch(ref ds, vendorNum, invoiceNum, invoiceLine);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.AfterMethod("GetNewAPInvDtlAttch", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvDtlDEASch(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvDtlDEASch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.BeforeMethod("GetNewAPInvDtlDEASch", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvDtlDEASch(ref ds, vendorNum, invoiceNum, invoiceLine);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.AfterMethod("GetNewAPInvDtlDEASch", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvExp(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvExp"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.BeforeMethod("GetNewAPInvExp", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvExp(ref ds, vendorNum, invoiceNum, invoiceLine);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.AfterMethod("GetNewAPInvExp", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvExpTGLC(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, int invExpSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvExpTGLC"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("invExpSeq", invExpSeq);
                        extension___implementation.BeforeMethod("GetNewAPInvExpTGLC", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvExpTGLC(ref ds, vendorNum, invoiceNum, invoiceLine, invExpSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("invExpSeq", invExpSeq);
                        extension___implementation.AfterMethod("GetNewAPInvExpTGLC", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewGlbAPIETGLC(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, int invExpSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewGlbAPIETGLC"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("invExpSeq", invExpSeq);
                        extension___implementation.BeforeMethod("GetNewGlbAPIETGLC", extension___parameters);
                    }

                    adapter.Impl.GetNewGlbAPIETGLC(ref ds, vendorNum, invoiceNum, invoiceLine, invExpSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("invExpSeq", invExpSeq);
                        extension___implementation.AfterMethod("GetNewGlbAPIETGLC", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvJob(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, string jobNum, int assemblySeq, int mtlSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvJob"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___parameters.Add("assemblySeq", assemblySeq);
                        extension___parameters.Add("mtlSeq", mtlSeq);
                        extension___implementation.BeforeMethod("GetNewAPInvJob", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvJob(ref ds, vendorNum, invoiceNum, invoiceLine, jobNum, assemblySeq, mtlSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___parameters.Add("assemblySeq", assemblySeq);
                        extension___parameters.Add("mtlSeq", mtlSeq);
                        extension___implementation.AfterMethod("GetNewAPInvJob", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvMsc(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvMsc"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.BeforeMethod("GetNewAPInvMsc", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvMsc(ref ds, vendorNum, invoiceNum, invoiceLine);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.AfterMethod("GetNewAPInvMsc", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvLnMscTax(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, int mscNum, System.Guid apInvMscSysRowID, string taxCode, string rateCode)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvLnMscTax"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("mscNum", mscNum);
                        extension___parameters.Add("apInvMscSysRowID", apInvMscSysRowID);
                        extension___parameters.Add("taxCode", taxCode);
                        extension___parameters.Add("rateCode", rateCode);
                        extension___implementation.BeforeMethod("GetNewAPInvLnMscTax", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvLnMscTax(ref ds, vendorNum, invoiceNum, invoiceLine, mscNum, apInvMscSysRowID, taxCode, rateCode);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("mscNum", mscNum);
                        extension___parameters.Add("apInvMscSysRowID", apInvMscSysRowID);
                        extension___parameters.Add("taxCode", taxCode);
                        extension___parameters.Add("rateCode", rateCode);
                        extension___implementation.AfterMethod("GetNewAPInvLnMscTax", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvPB(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvPB"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.BeforeMethod("GetNewAPInvPB", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvPB(ref ds, vendorNum, invoiceNum, invoiceLine);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___implementation.AfterMethod("GetNewAPInvPB", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPLnTax(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int invoiceLine, string taxCode, string rateCode)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPLnTax"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("taxCode", taxCode);
                        extension___parameters.Add("rateCode", rateCode);
                        extension___implementation.BeforeMethod("GetNewAPLnTax", extension___parameters);
                    }

                    adapter.Impl.GetNewAPLnTax(ref ds, vendorNum, invoiceNum, invoiceLine, taxCode, rateCode);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("invoiceLine", invoiceLine);
                        extension___parameters.Add("taxCode", taxCode);
                        extension___parameters.Add("rateCode", rateCode);
                        extension___implementation.AfterMethod("GetNewAPLnTax", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvDtlTGLC(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvDtlTGLC"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewAPInvDtlTGLC", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvDtlTGLC(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewAPInvDtlTGLC", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvHedMscTax(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, int mscNum, System.Guid apInvMscSysRowID, string taxCode, string rateCode)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvHedMscTax"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("mscNum", mscNum);
                        extension___parameters.Add("apInvMscSysRowID", apInvMscSysRowID);
                        extension___parameters.Add("taxCode", taxCode);
                        extension___parameters.Add("rateCode", rateCode);
                        extension___implementation.BeforeMethod("GetNewAPInvHedMscTax", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvHedMscTax(ref ds, vendorNum, invoiceNum, mscNum, apInvMscSysRowID, taxCode, rateCode);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("mscNum", mscNum);
                        extension___parameters.Add("apInvMscSysRowID", apInvMscSysRowID);
                        extension___parameters.Add("taxCode", taxCode);
                        extension___parameters.Add("rateCode", rateCode);
                        extension___implementation.AfterMethod("GetNewAPInvHedMscTax", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvSched(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvSched"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.BeforeMethod("GetNewAPInvSched", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvSched(ref ds, vendorNum, invoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.AfterMethod("GetNewAPInvSched", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewAPInvTax(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum, string taxCode, string rateCode)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewAPInvTax"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("taxCode", taxCode);
                        extension___parameters.Add("rateCode", rateCode);
                        extension___implementation.BeforeMethod("GetNewAPInvTax", extension___parameters);
                    }

                    adapter.Impl.GetNewAPInvTax(ref ds, vendorNum, invoiceNum, taxCode, rateCode);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___parameters.Add("taxCode", taxCode);
                        extension___parameters.Add("rateCode", rateCode);
                        extension___implementation.AfterMethod("GetNewAPInvTax", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPESUNATDtl(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPESUNATDtl"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.BeforeMethod("GetNewPESUNATDtl", extension___parameters);
                    }

                    adapter.Impl.GetNewPESUNATDtl(ref ds, vendorNum, invoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.AfterMethod("GetNewPESUNATDtl", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewEntityGLC(ref Erp.Tablesets.APInvoiceTableset ds, string relatedToFile, string key1, string key2, string key3, string key4, string key5, string key6)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewEntityGLC"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("relatedToFile", relatedToFile);
                        extension___parameters.Add("key1", key1);
                        extension___parameters.Add("key2", key2);
                        extension___parameters.Add("key3", key3);
                        extension___parameters.Add("key4", key4);
                        extension___parameters.Add("key5", key5);
                        extension___parameters.Add("key6", key6);
                        extension___implementation.BeforeMethod("GetNewEntityGLC", extension___parameters);
                    }

                    adapter.Impl.GetNewEntityGLC(ref ds, relatedToFile, key1, key2, key3, key4, key5, key6);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("relatedToFile", relatedToFile);
                        extension___parameters.Add("key1", key1);
                        extension___parameters.Add("key2", key2);
                        extension___parameters.Add("key3", key3);
                        extension___parameters.Add("key4", key4);
                        extension___parameters.Add("key5", key5);
                        extension___parameters.Add("key6", key6);
                        extension___implementation.AfterMethod("GetNewEntityGLC", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPEAPInvTax(ref Erp.Tablesets.APInvoiceTableset ds, int vendorNum, string invoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPEAPInvTax"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.BeforeMethod("GetNewPEAPInvTax", extension___parameters);
                    }

                    adapter.Impl.GetNewPEAPInvTax(ref ds, vendorNum, invoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.AfterMethod("GetNewPEAPInvTax", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeleteByID(int vendorNum, string invoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeleteByID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.BeforeMethod("DeleteByID", extension___parameters);
                    }

                    adapter.Impl.DeleteByID(vendorNum, invoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.AfterMethod("DeleteByID", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.APInvoiceTableset GetByID(int vendorNum, string invoiceNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetByID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.BeforeMethod("GetByID", extension___parameters);
                    }

                    var _return = adapter.Impl.GetByID(vendorNum, invoiceNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("vendorNum", vendorNum);
                        extension___parameters.Add("invoiceNum", invoiceNum);
                        extension___implementation.AfterMethod("GetByID", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.APInvHedListTableset GetList(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetList", extension___parameters);
                    }

                    var _return = adapter.Impl.GetList(whereClause, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetList", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.APInvoiceTableset GetRows(string whereClauseAPInvHed, string whereClauseAPInvHedAttch, string whereClauseAPIHAPInvExp, string whereClauseAPIHAPInvExpTGLC, string whereClauseAPIHAPInvMsc, string whereClauseRcvMisc, string whereClauseAPIHAPLnTax, string whereClauseAPInvDtl, string whereClauseAPInvDtlAttch, string whereClauseAPInvDtlDEASch, string whereClauseAPInvExp, string whereClauseAPInvExpTGLC, string whereClauseGlbAPIETGLC, string whereClauseAPInvJob, string whereClauseAPInvMsc, string whereClauseAPInvLnMscTax, string whereClauseAPInvPB, string whereClauseAPLnTax, string whereClauseAPInvDtlTGLC, string whereClauseAPInvHedMscTax, string whereClauseAPInvSched, string whereClauseAPInvTax, string whereClausePESUNATDtl, string whereClauseEntityGLC, string whereClausePEAPInvTax, string whereClauseAdditionalForms_ParametersView, string whereClauseLegalNumGenOpts, string whereClauseSupplierXRef, string whereClauseTaxConnectStatus, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRows"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseAPInvHed", whereClauseAPInvHed);
                        extension___parameters.Add("whereClauseAPInvHedAttch", whereClauseAPInvHedAttch);
                        extension___parameters.Add("whereClauseAPIHAPInvExp", whereClauseAPIHAPInvExp);
                        extension___parameters.Add("whereClauseAPIHAPInvExpTGLC", whereClauseAPIHAPInvExpTGLC);
                        extension___parameters.Add("whereClauseAPIHAPInvMsc", whereClauseAPIHAPInvMsc);
                        extension___parameters.Add("whereClauseRcvMisc", whereClauseRcvMisc);
                        extension___parameters.Add("whereClauseAPIHAPLnTax", whereClauseAPIHAPLnTax);
                        extension___parameters.Add("whereClauseAPInvDtl", whereClauseAPInvDtl);
                        extension___parameters.Add("whereClauseAPInvDtlAttch", whereClauseAPInvDtlAttch);
                        extension___parameters.Add("whereClauseAPInvDtlDEASch", whereClauseAPInvDtlDEASch);
                        extension___parameters.Add("whereClauseAPInvExp", whereClauseAPInvExp);
                        extension___parameters.Add("whereClauseAPInvExpTGLC", whereClauseAPInvExpTGLC);
                        extension___parameters.Add("whereClauseGlbAPIETGLC", whereClauseGlbAPIETGLC);
                        extension___parameters.Add("whereClauseAPInvJob", whereClauseAPInvJob);
                        extension___parameters.Add("whereClauseAPInvMsc", whereClauseAPInvMsc);
                        extension___parameters.Add("whereClauseAPInvLnMscTax", whereClauseAPInvLnMscTax);
                        extension___parameters.Add("whereClauseAPInvPB", whereClauseAPInvPB);
                        extension___parameters.Add("whereClauseAPLnTax", whereClauseAPLnTax);
                        extension___parameters.Add("whereClauseAPInvDtlTGLC", whereClauseAPInvDtlTGLC);
                        extension___parameters.Add("whereClauseAPInvHedMscTax", whereClauseAPInvHedMscTax);
                        extension___parameters.Add("whereClauseAPInvSched", whereClauseAPInvSched);
                        extension___parameters.Add("whereClauseAPInvTax", whereClauseAPInvTax);
                        extension___parameters.Add("whereClausePESUNATDtl", whereClausePESUNATDtl);
                        extension___parameters.Add("whereClauseEntityGLC", whereClauseEntityGLC);
                        extension___parameters.Add("whereClausePEAPInvTax", whereClausePEAPInvTax);
                        extension___parameters.Add("whereClauseAdditionalForms_ParametersView", whereClauseAdditionalForms_ParametersView);
                        extension___parameters.Add("whereClauseLegalNumGenOpts", whereClauseLegalNumGenOpts);
                        extension___parameters.Add("whereClauseSupplierXRef", whereClauseSupplierXRef);
                        extension___parameters.Add("whereClauseTaxConnectStatus", whereClauseTaxConnectStatus);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetRows", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRows(whereClauseAPInvHed, whereClauseAPInvHedAttch, whereClauseAPIHAPInvExp, whereClauseAPIHAPInvExpTGLC, whereClauseAPIHAPInvMsc, whereClauseRcvMisc, whereClauseAPIHAPLnTax, whereClauseAPInvDtl, whereClauseAPInvDtlAttch, whereClauseAPInvDtlDEASch, whereClauseAPInvExp, whereClauseAPInvExpTGLC, whereClauseGlbAPIETGLC, whereClauseAPInvJob, whereClauseAPInvMsc, whereClauseAPInvLnMscTax, whereClauseAPInvPB, whereClauseAPLnTax, whereClauseAPInvDtlTGLC, whereClauseAPInvHedMscTax, whereClauseAPInvSched, whereClauseAPInvTax, whereClausePESUNATDtl, whereClauseEntityGLC, whereClausePEAPInvTax, whereClauseAdditionalForms_ParametersView, whereClauseLegalNumGenOpts, whereClauseSupplierXRef, whereClauseTaxConnectStatus, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseAPInvHed", whereClauseAPInvHed);
                        extension___parameters.Add("whereClauseAPInvHedAttch", whereClauseAPInvHedAttch);
                        extension___parameters.Add("whereClauseAPIHAPInvExp", whereClauseAPIHAPInvExp);
                        extension___parameters.Add("whereClauseAPIHAPInvExpTGLC", whereClauseAPIHAPInvExpTGLC);
                        extension___parameters.Add("whereClauseAPIHAPInvMsc", whereClauseAPIHAPInvMsc);
                        extension___parameters.Add("whereClauseRcvMisc", whereClauseRcvMisc);
                        extension___parameters.Add("whereClauseAPIHAPLnTax", whereClauseAPIHAPLnTax);
                        extension___parameters.Add("whereClauseAPInvDtl", whereClauseAPInvDtl);
                        extension___parameters.Add("whereClauseAPInvDtlAttch", whereClauseAPInvDtlAttch);
                        extension___parameters.Add("whereClauseAPInvDtlDEASch", whereClauseAPInvDtlDEASch);
                        extension___parameters.Add("whereClauseAPInvExp", whereClauseAPInvExp);
                        extension___parameters.Add("whereClauseAPInvExpTGLC", whereClauseAPInvExpTGLC);
                        extension___parameters.Add("whereClauseGlbAPIETGLC", whereClauseGlbAPIETGLC);
                        extension___parameters.Add("whereClauseAPInvJob", whereClauseAPInvJob);
                        extension___parameters.Add("whereClauseAPInvMsc", whereClauseAPInvMsc);
                        extension___parameters.Add("whereClauseAPInvLnMscTax", whereClauseAPInvLnMscTax);
                        extension___parameters.Add("whereClauseAPInvPB", whereClauseAPInvPB);
                        extension___parameters.Add("whereClauseAPLnTax", whereClauseAPLnTax);
                        extension___parameters.Add("whereClauseAPInvDtlTGLC", whereClauseAPInvDtlTGLC);
                        extension___parameters.Add("whereClauseAPInvHedMscTax", whereClauseAPInvHedMscTax);
                        extension___parameters.Add("whereClauseAPInvSched", whereClauseAPInvSched);
                        extension___parameters.Add("whereClauseAPInvTax", whereClauseAPInvTax);
                        extension___parameters.Add("whereClausePESUNATDtl", whereClausePESUNATDtl);
                        extension___parameters.Add("whereClauseEntityGLC", whereClauseEntityGLC);
                        extension___parameters.Add("whereClausePEAPInvTax", whereClausePEAPInvTax);
                        extension___parameters.Add("whereClauseAdditionalForms_ParametersView", whereClauseAdditionalForms_ParametersView);
                        extension___parameters.Add("whereClauseLegalNumGenOpts", whereClauseLegalNumGenOpts);
                        extension___parameters.Add("whereClauseSupplierXRef", whereClauseSupplierXRef);
                        extension___parameters.Add("whereClauseTaxConnectStatus", whereClauseTaxConnectStatus);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetRows", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.APInvoiceTableset GetBySysRowID(System.Guid id)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetBySysRowID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("id", id);
                        extension___implementation.BeforeMethod("GetBySysRowID", extension___parameters);
                    }

                    var _return = adapter.Impl.GetBySysRowID(id);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("id", id);
                        extension___implementation.AfterMethod("GetBySysRowID", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.APInvoiceTableset GetBySysRowIDs(System.Collections.Generic.List<System.Guid> ids)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetBySysRowIDs"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ids", ids);
                        extension___implementation.BeforeMethod("GetBySysRowIDs", extension___parameters);
                    }

                    var _return = adapter.Impl.GetBySysRowIDs(ids);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ids", ids);
                        extension___implementation.AfterMethod("GetBySysRowIDs", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void Update(ref Erp.Tablesets.APInvoiceTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("Update"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("Update", extension___parameters);
                    }

                    adapter.Impl.Update(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("Update", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Ice.BOUpdErrorTableset UpdateExt(ref Erp.Tablesets.UpdExtAPInvoiceTableset ds, bool continueProcessingOnError, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            try
            {
                using (var adapter = this.GetImplementation("UpdateExt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IAPInvoiceExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___implementation.BeforeMethod("UpdateExt", extension___parameters);
                    }

                    var _return = adapter.Impl.UpdateExt(ref ds, continueProcessingOnError, rollbackParentOnChildError, out errorsOccurred);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___parameters.Add("errorsOccurred", errorsOccurred);
                        extension___implementation.AfterMethod("UpdateExt", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        #endregion // APInvoiceSvcContract Members
    }

    #region Extensions

    [Epicor.Extensions.ExtensionExport]
    public interface IAPInvoiceExtender : Ice.Extensions.IServiceExtender
    {
    }

    [Epicor.Extensions.ExtensionExport]
    public interface IAPInvoiceUpdater : Ice.Extensions.IUpdater
    {
    }

    #endregion
}
