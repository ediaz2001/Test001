//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Epicor.Data;
using Epicor.Hosting;
using Erp.Contracts;
using Erp.Tablesets;
using Ice;
using Ice.ExtendedData;

namespace Erp.Services.BO
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1063:ImplementIDisposableCorrectly", Justification = "False positive. IDisposable is implemented in the base class. See http://stackoverflow.com/questions/8925925/code-analysis-ca1063-fires-when-deriving-from-idisposable-and-providing-implemen for details.")]
    public partial class LaborSvc : TablesetBound<Erp.ErpContext, LaborTableset, LaborHedListTableset>, LaborSvcContract
    {
        #region Declarations

        // Database rows
        private Erp.Tables.LaborHed LaborHed;
        private Erp.Tables.LaborDtl LaborDtl;
        private Ice.Tables.XFileAttch LaborDtlAttch;
        private Erp.Tables.LaborDtlAction LaborDtlAction;
        private Erp.Tables.LaborDtlComment LaborDtlComment;
        private Erp.Tables.LaborEquip LaborEquip;
        private Erp.Tables.LaborPart LaborPart;
        private Erp.Tables.LaborDtlGroup LaborDtlGroup;

        // Temp-table rows
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected HCMLaborDtlRow ttHCMLaborDtl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected HCMLaborDtlSyncRow ttHCMLaborDtlSync;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LaborHedRow ttLaborHed;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LaborDtlRow ttLaborDtl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LaborDtlAttchRow ttLaborDtlAttch;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LaborDtlActionRow ttLaborDtlAction;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LaborDtlCommentRow ttLaborDtlComment;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LaborEquipRow ttLaborEquip;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LaborPartRow ttLaborPart;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LbrScrapSerialNumbersRow ttLbrScrapSerialNumbers;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LaborDtlGroupRow ttLaborDtlGroup;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected SelectedSerialNumbersRow ttSelectedSerialNumbers;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected SNFormatRow ttSNFormat;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected TimeWeeklyViewRow ttTimeWeeklyView;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected TimeWorkHoursRow ttTimeWorkHours;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LaborHedListRow ttLaborHedList;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected SelectSerialNumbersParamsRow ttSelectSerialNumbersParams;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected WorkQueueRow ttWorkQueue;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LaborOperActionRow ttLaborOperAction;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PartWipOpRow ttPartWipOp;

        // Before-image rows
        private LaborHedRow BIttLaborHed;
        private LaborDtlRow BIttLaborDtl;
        private LaborDtlAttchRow BIttLaborDtlAttch;
        private LaborDtlActionRow BIttLaborDtlAction;
        private LaborDtlCommentRow BIttLaborDtlComment;
        private LaborEquipRow BIttLaborEquip;
        private LaborPartRow BIttLaborPart;
        private LaborDtlGroupRow BIttLaborDtlGroup;

        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected HCMLaborDtlTableset ttHCMLaborDtlTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected SelectSerialNumbersParamsTableset ttSelectSerialNumbersParamsTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected WorkQueueTableset ttWorkQueueTablesetDS;

        /// <summary>
        /// The well known Name of this Service
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override string Name
        {
            get
            {
                return "Labor";
            }
        }

        #endregion Declarations

        #region Constructor

        /// <summary>
        /// Service Constructor
        /// </summary>
        /// <param name="ctx">Context</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public LaborSvc(ErpContext ctx)
            : base(ctx)
        {
            this.HasColumnCompanyID = true;
            this.UseCurrentCompany = true;
            this.UseCurrentTenant = false;
        }

        #endregion Constructor

        /// <summary>
        /// Determines whether a table should be read by the framework.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override bool CanRead(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return true;
                case 1:
                    return true;
                case 2:
                    return true;
                case 3:
                    return true;
                case 4:
                    return true;
                case 5:
                    return true;
                case 6:
                    return true;
                case 7:
                    return false;
                case 8:
                    return true;
                case 9:
                    return false;
                case 10:
                    return false;
                case 11:
                    return false;
                case 12:
                    return false;
                default:
                    throw new ArgumentException();
            }
        }

        /// <summary>
        /// Determines whether a table should be updated by the framework.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override bool CanWrite(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return true;
                case 1:
                    return true;
                case 2:
                    return true;
                case 3:
                    return true;
                case 4:
                    return true;
                case 5:
                    return true;
                case 6:
                    return true;
                case 7:
                    return false;
                case 8:
                    return true;
                case 9:
                    return false;
                case 10:
                    return false;
                case 11:
                    return false;
                case 12:
                    return false;
                default:
                    throw new ArgumentException();
            }
        }

        /// <summary>
        /// Create a new typed database row (LinqRow)
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override LinqRow CreateDBRow(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return new Erp.Tables.LaborHed();
                case 1:
                    return new Erp.Tables.LaborDtl();
                case 2:
                    return new Ice.Tables.XFileAttch();
                case 3:
                    return new Erp.Tables.LaborDtlAction();
                case 4:
                    return new Erp.Tables.LaborDtlComment();
                case 5:
                    return new Erp.Tables.LaborEquip();
                case 6:
                    return new Erp.Tables.LaborPart();
                case 8:
                    return new Erp.Tables.LaborDtlGroup();
                case 10:
                    return new Erp.Tables.PartPlant();
                default:
                    throw new ArgumentException();
            }
        }

        #region FindFirstByZKey

        private static Func<ErpContext, string, int, Erp.Tables.LaborHed> findFirstLaborHedByZKeyQuery;
        private Erp.Tables.LaborHed FindFirstLaborHedByZKey(string company, int laborHedSeq)
        {
            if (findFirstLaborHedByZKeyQuery == null)
            {
                Expression<Func<ErpContext, string, int, Erp.Tables.LaborHed>> expression =
                    (context, company_ex, laborHedSeq_ex) =>
                    (from row in context.LaborHed
                     where row.Company == company_ex
                     && row.LaborHedSeq == laborHedSeq_ex
                     select row)
                    .FirstOrDefault();
                findFirstLaborHedByZKeyQuery = DBExpressionCompiler.Compile(expression);
            }

            return findFirstLaborHedByZKeyQuery(this.Db, company, laborHedSeq);
        }

        #endregion

        /// <summary>
        /// Get a database row by row ID
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override LinqRow GetDBRowWithUpdLock(int tableNumber, Guid rowID)
        {
            switch (tableNumber)
            {
                case 0:
                    return Erp.Tables.LaborHed.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 1:
                    return Erp.Tables.LaborDtl.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 2:
                    return Ice.Tables.XFileAttch.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 3:
                    return Erp.Tables.LaborDtlAction.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 4:
                    return Erp.Tables.LaborDtlComment.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 5:
                    return Erp.Tables.LaborEquip.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 6:
                    return Erp.Tables.LaborPart.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 8:
                    return Erp.Tables.LaborDtlGroup.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 10:
                    return Erp.Tables.PartPlant.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                default:
                    throw new ArgumentException();
            }
        }

        #region Dispatchers

        /// <summary>
        /// Dispatch service events to the appropriate partial method.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void OnTablesetEvent(DatasetEventType type)
        {
            switch (type)
            {
                case DatasetEventType.AfterGetList:
                    AfterGetList();
                    break;
                case DatasetEventType.AfterGetRows:
                    AfterGetRows();
                    break;
                case DatasetEventType.AfterUpdate:
                    AfterUpdate();
                    break;
                case DatasetEventType.AfterUpdatePostTrans:
                    AfterUpdatePostTrans();
                    break;
                case DatasetEventType.BeforeUpdate:
                    BeforeUpdate();
                    break;
            }
        }

        /// <summary>
        /// Dispatch row events to the appropriate partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void OnRowEvent(DataTableEventType type, string tableName, IceRow row)
        {
            switch (type)
            {
                case DataTableEventType.AfterCreate:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHedAfterCreate();
                            break;

                        case "LaborDtl":
                            LaborDtlAfterCreate();
                            break;

                        case "LaborDtlAttch":
                            LaborDtlAttchAfterCreate();
                            break;

                        case "LaborDtlAction":
                            LaborDtlActionAfterCreate();
                            break;

                        case "LaborDtlComment":
                            LaborDtlCommentAfterCreate();
                            break;

                        case "LaborEquip":
                            LaborEquipAfterCreate();
                            break;

                        case "LaborPart":
                            LaborPartAfterCreate();
                            break;

                        case "LaborDtlGroup":
                            LaborDtlGroupAfterCreate();
                            break;

                    }
                    break;

                case DataTableEventType.AfterDelete:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHedAfterDelete();
                            break;

                        case "LaborDtl":
                            LaborDtlAfterDelete();
                            break;

                        case "LaborDtlAttch":
                            LaborDtlAttchAfterDelete();
                            break;

                        case "LaborDtlAction":
                            LaborDtlActionAfterDelete();
                            break;

                        case "LaborDtlComment":
                            LaborDtlCommentAfterDelete();
                            break;

                        case "LaborEquip":
                            LaborEquipAfterDelete();
                            break;

                        case "LaborPart":
                            LaborPartAfterDelete();
                            break;

                        case "LaborDtlGroup":
                            LaborDtlGroupAfterDelete();
                            break;

                    }
                    break;

                case DataTableEventType.AfterGetNew:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHedAfterGetNew();
                            break;

                        case "LaborDtl":
                            LaborDtlAfterGetNew();
                            break;

                        case "LaborDtlAttch":
                            LaborDtlAttchAfterGetNew();
                            break;

                        case "LaborDtlAction":
                            LaborDtlActionAfterGetNew();
                            break;

                        case "LaborDtlComment":
                            LaborDtlCommentAfterGetNew();
                            break;

                        case "LaborEquip":
                            LaborEquipAfterGetNew();
                            break;

                        case "LaborPart":
                            LaborPartAfterGetNew();
                            break;

                        case "LaborDtlGroup":
                            LaborDtlGroupAfterGetNew();
                            break;

                    }
                    break;

                case DataTableEventType.AfterGetRows:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHedAfterGetRows();
                            break;

                        case "LaborDtl":
                            LaborDtlAfterGetRows();
                            break;

                        case "LaborDtlAttch":
                            LaborDtlAttchAfterGetRows();
                            break;

                        case "LaborDtlAction":
                            LaborDtlActionAfterGetRows();
                            break;

                        case "LaborDtlComment":
                            LaborDtlCommentAfterGetRows();
                            break;

                        case "LaborEquip":
                            LaborEquipAfterGetRows();
                            break;

                        case "LaborPart":
                            LaborPartAfterGetRows();
                            break;

                        case "LaborDtlGroup":
                            LaborDtlGroupAfterGetRows();
                            break;

                    }
                    break;

                case DataTableEventType.AfterUpdate:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHedAfterUpdate();
                            break;

                        case "LaborDtl":
                            LaborDtlAfterUpdate();
                            break;

                        case "LaborDtlAttch":
                            LaborDtlAttchAfterUpdate();
                            break;

                        case "LaborDtlAction":
                            LaborDtlActionAfterUpdate();
                            break;

                        case "LaborDtlComment":
                            LaborDtlCommentAfterUpdate();
                            break;

                        case "LaborEquip":
                            LaborEquipAfterUpdate();
                            break;

                        case "LaborPart":
                            LaborPartAfterUpdate();
                            break;

                        case "LaborDtlGroup":
                            LaborDtlGroupAfterUpdate();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeBI:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHedBeforeBI();
                            break;

                        case "LaborDtl":
                            LaborDtlBeforeBI();
                            break;

                        case "LaborDtlAttch":
                            LaborDtlAttchBeforeBI();
                            break;

                        case "LaborDtlAction":
                            LaborDtlActionBeforeBI();
                            break;

                        case "LaborDtlComment":
                            LaborDtlCommentBeforeBI();
                            break;

                        case "LaborEquip":
                            LaborEquipBeforeBI();
                            break;

                        case "LaborPart":
                            LaborPartBeforeBI();
                            break;

                        case "LaborDtlGroup":
                            LaborDtlGroupBeforeBI();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeCreate:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHedBeforeCreate();
                            break;

                        case "LaborDtl":
                            LaborDtlBeforeCreate();
                            break;

                        case "LaborDtlAttch":
                            LaborDtlAttchBeforeCreate();
                            break;

                        case "LaborDtlAction":
                            LaborDtlActionBeforeCreate();
                            break;

                        case "LaborDtlComment":
                            LaborDtlCommentBeforeCreate();
                            break;

                        case "LaborEquip":
                            LaborEquipBeforeCreate();
                            break;

                        case "LaborPart":
                            LaborPartBeforeCreate();
                            break;

                        case "LaborDtlGroup":
                            LaborDtlGroupBeforeCreate();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeDelete:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHedBeforeDelete();
                            break;

                        case "LaborDtl":
                            LaborDtlBeforeDelete();
                            break;

                        case "LaborDtlAttch":
                            LaborDtlAttchBeforeDelete();
                            break;

                        case "LaborDtlAction":
                            LaborDtlActionBeforeDelete();
                            break;

                        case "LaborDtlComment":
                            LaborDtlCommentBeforeDelete();
                            break;

                        case "LaborEquip":
                            LaborEquipBeforeDelete();
                            break;

                        case "LaborPart":
                            LaborPartBeforeDelete();
                            break;

                        case "LaborDtlGroup":
                            LaborDtlGroupBeforeDelete();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeGetNew:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHedBeforeGetNew();
                            break;

                        case "LaborDtl":
                            LaborDtlBeforeGetNew();
                            break;

                        case "LaborDtlAttch":
                            LaborDtlAttchBeforeGetNew();
                            break;

                        case "LaborDtlAction":
                            LaborDtlActionBeforeGetNew();
                            break;

                        case "LaborDtlComment":
                            LaborDtlCommentBeforeGetNew();
                            break;

                        case "LaborEquip":
                            LaborEquipBeforeGetNew();
                            break;

                        case "LaborPart":
                            LaborPartBeforeGetNew();
                            break;

                        case "LaborDtlGroup":
                            LaborDtlGroupBeforeGetNew();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeUpdate:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHedBeforeUpdate();
                            break;

                        case "LaborDtl":
                            LaborDtlBeforeUpdate();
                            break;

                        case "LaborDtlAttch":
                            LaborDtlAttchBeforeUpdate();
                            break;

                        case "LaborDtlAction":
                            LaborDtlActionBeforeUpdate();
                            break;

                        case "LaborDtlComment":
                            LaborDtlCommentBeforeUpdate();
                            break;

                        case "LaborEquip":
                            LaborEquipBeforeUpdate();
                            break;

                        case "LaborPart":
                            LaborPartBeforeUpdate();
                            break;

                        case "LaborDtlGroup":
                            LaborDtlGroupBeforeUpdate();
                            break;

                    }
                    break;

                case DataTableEventType.SetDefaults:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHedSetDefaults((LaborHedRow)row);
                            break;

                        case "LaborDtl":
                            LaborDtlSetDefaults((LaborDtlRow)row);
                            break;

                        case "LaborDtlAttch":
                            LaborDtlAttchSetDefaults((LaborDtlAttchRow)row);
                            break;

                        case "LaborDtlAction":
                            LaborDtlActionSetDefaults((LaborDtlActionRow)row);
                            break;

                        case "LaborDtlComment":
                            LaborDtlCommentSetDefaults((LaborDtlCommentRow)row);
                            break;

                        case "LaborEquip":
                            LaborEquipSetDefaults((LaborEquipRow)row);
                            break;

                        case "LaborPart":
                            LaborPartSetDefaults((LaborPartRow)row);
                            break;

                        case "LaborDtlGroup":
                            LaborDtlGroupSetDefaults((LaborDtlGroupRow)row);
                            break;

                    }
                    break;

                case DataTableEventType.GetListRowLoaded:
                    GetListRowLoaded();
                    break;

                case DataTableEventType.ForeignLink:
                    switch (tableName)
                    {
                        case "LaborHed":
                            LaborHed_Foreign_Link();
                            break;

                        case "LaborDtl":
                            LaborDtl_Foreign_Link();
                            break;

                        case "LaborDtlAttch":
                            break;

                        case "LaborDtlAction":
                            LaborDtlAction_Foreign_Link();
                            break;

                        case "LaborEquip":
                            LaborEquip_Foreign_Link();
                            break;

                        case "LaborPart":
                            LaborPart_Foreign_Link();
                            break;

                    }
                    break;

            }
        }

        /// <summary>
        /// Sets current row being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="row">The current row</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void PrepareForRowEvent(string tableName, IceRow row)
        {
            switch (tableName)
            {
                case "LaborHed":
                    ttLaborHed = (LaborHedRow)row;
                    break;
                case "LaborDtl":
                    ttLaborDtl = (LaborDtlRow)row;
                    break;
                case "LaborDtlAttch":
                    ttLaborDtlAttch = (LaborDtlAttchRow)row;
                    break;
                case "LaborDtlAction":
                    ttLaborDtlAction = (LaborDtlActionRow)row;
                    break;
                case "LaborDtlComment":
                    ttLaborDtlComment = (LaborDtlCommentRow)row;
                    break;
                case "LaborEquip":
                    ttLaborEquip = (LaborEquipRow)row;
                    break;
                case "LaborPart":
                    ttLaborPart = (LaborPartRow)row;
                    break;
                case "LbrScrapSerialNumbers":
                    ttLbrScrapSerialNumbers = (LbrScrapSerialNumbersRow)row;
                    break;
                case "LaborDtlGroup":
                    ttLaborDtlGroup = (LaborDtlGroupRow)row;
                    break;
                case "SelectedSerialNumbers":
                    ttSelectedSerialNumbers = (SelectedSerialNumbersRow)row;
                    break;
                case "SNFormat":
                    ttSNFormat = (SNFormatRow)row;
                    break;
                case "TimeWeeklyView":
                    ttTimeWeeklyView = (TimeWeeklyViewRow)row;
                    break;
                case "TimeWorkHours":
                    ttTimeWorkHours = (TimeWorkHoursRow)row;
                    break;
                case "LaborHedList":
                    ttLaborHedList = (LaborHedListRow)row;
                    break;
            }
        }

        /// <summary>
        /// Sets current dbrow being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="dbRow">The current dbRow</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void PrepareForRowEvent(string tableName, LinqRow dbRow)
        {
            switch (tableName)
            {
                case "LaborHed":
                    LaborHed = (Erp.Tables.LaborHed)dbRow;
                    break;
                case "LaborDtl":
                    LaborDtl = (Erp.Tables.LaborDtl)dbRow;
                    break;
                case "LaborDtlAttch":
                    LaborDtlAttch = (Ice.Tables.XFileAttch)dbRow;
                    break;
                case "LaborDtlAction":
                    LaborDtlAction = (Erp.Tables.LaborDtlAction)dbRow;
                    break;
                case "LaborDtlComment":
                    LaborDtlComment = (Erp.Tables.LaborDtlComment)dbRow;
                    break;
                case "LaborEquip":
                    LaborEquip = (Erp.Tables.LaborEquip)dbRow;
                    break;
                case "LaborPart":
                    LaborPart = (Erp.Tables.LaborPart)dbRow;
                    break;
                case "LaborDtlGroup":
                    LaborDtlGroup = (Erp.Tables.LaborDtlGroup)dbRow;
                    break;
            }
        }

        /// <summary>
        /// Sets current rows being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="row">The current row</param>
        /// <param name="bittRow">The current bittRow</param>
        /// <param name="dbRow">The current dbRow</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void PrepareForRowEvent(string tableName, IceRow row, IceRow bittRow, LinqRow dbRow)
        {
            switch (tableName)
            {
                case "LaborHed":
                    this.ttLaborHed = (LaborHedRow)row;
                    this.BIttLaborHed = (LaborHedRow)bittRow;
                    this.LaborHed = (Erp.Tables.LaborHed)dbRow;
                    break;
                case "LaborDtl":
                    this.ttLaborDtl = (LaborDtlRow)row;
                    this.BIttLaborDtl = (LaborDtlRow)bittRow;
                    this.LaborDtl = (Erp.Tables.LaborDtl)dbRow;
                    break;
                case "LaborDtlAttch":
                    this.ttLaborDtlAttch = (LaborDtlAttchRow)row;
                    this.BIttLaborDtlAttch = (LaborDtlAttchRow)bittRow;
                    this.LaborDtlAttch = (Ice.Tables.XFileAttch)dbRow;
                    break;
                case "LaborDtlAction":
                    this.ttLaborDtlAction = (LaborDtlActionRow)row;
                    this.BIttLaborDtlAction = (LaborDtlActionRow)bittRow;
                    this.LaborDtlAction = (Erp.Tables.LaborDtlAction)dbRow;
                    break;
                case "LaborDtlComment":
                    this.ttLaborDtlComment = (LaborDtlCommentRow)row;
                    this.BIttLaborDtlComment = (LaborDtlCommentRow)bittRow;
                    this.LaborDtlComment = (Erp.Tables.LaborDtlComment)dbRow;
                    break;
                case "LaborEquip":
                    this.ttLaborEquip = (LaborEquipRow)row;
                    this.BIttLaborEquip = (LaborEquipRow)bittRow;
                    this.LaborEquip = (Erp.Tables.LaborEquip)dbRow;
                    break;
                case "LaborPart":
                    this.ttLaborPart = (LaborPartRow)row;
                    this.BIttLaborPart = (LaborPartRow)bittRow;
                    this.LaborPart = (Erp.Tables.LaborPart)dbRow;
                    break;
                case "LaborDtlGroup":
                    this.ttLaborDtlGroup = (LaborDtlGroupRow)row;
                    this.BIttLaborDtlGroup = (LaborDtlGroupRow)bittRow;
                    this.LaborDtlGroup = (Erp.Tables.LaborDtlGroup)dbRow;
                    break;
            }
        }

        /// <summary>
        /// Call the BeforeGetRows() partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void OnBeforeGetRows(Dictionary<IIceTable, QueryModifier> queryModifiers)
        {
            BeforeGetRows(queryModifiers);
        }

        /// <summary>
        /// Call the BeforeGetList() partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void OnBeforeGetList(QueryModifier queryModifier)
        {
            BeforeGetList(queryModifier);
        }

        #region DataSetEvents
        partial void AfterGetList();
        partial void AfterGetRows();
        partial void AfterUpdate();
        partial void AfterUpdatePostTrans();
        partial void BeforeBOGetByID(int laborHedSeq);
        partial void BeforeGetList(QueryModifier queryModifier);
        partial void BeforeGetRows(Dictionary<IIceTable, QueryModifier> queryModifiers);
        partial void BeforeUpdate();
        partial void GetListRowLoaded();
        #endregion DataSetEvents
        #endregion Dispatchers

        #region Table Specific Methods

        #region Table LaborHed
        #region GetNewLaborHed
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewLaborHed(ref LaborTableset ds)
        {
            CurrentFullTableset = ds;

            ttLaborHed = (LaborHedRow)InnerGetNew(
                ds.LaborHed,
                (LaborHedRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewLaborHed

        #region Events
        partial void LaborHedAfterCreate();
        partial void LaborHedAfterDelete();
        partial void LaborHedAfterGetNew();
        partial void LaborHedAfterGetRows();
        partial void LaborHedAfterUpdate();
        partial void LaborHedBeforeBI();
        partial void LaborHedBeforeCreate();
        partial void LaborHedBeforeDelete();
        partial void LaborHedBeforeGetNew();
        partial void LaborHedBeforeUpdate();
        partial void LaborHedSetDefaults(LaborHedRow row);
        #endregion Events

        #region LaborHed_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class LaborHedForeignQueryResult
        {
            public string EmployeeNumFirstName { get; set; }
            public string EmployeeNumName { get; set; }
            public string EmployeeNumLastName { get; set; }
            public string HCMStatusStatus { get; set; }
            public bool PRSystHCMEnabled { get; set; }
            public string ShiftDescription { get; set; }
        }

        private static Func<ErpContext, string, string, LaborHedForeignQueryResult> LaborHed_EmployeeNum_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborHedForeignQueryResult FindFirst_LaborHed_EmployeeNum_Foreign(string company, string employeeNum)
        {
            if (LaborHed_EmployeeNum_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborHedForeignQueryResult>> expression =
                    (dataContext, company_ex, employeeNum_ex) =>
                    (from row in dataContext.EmpBasic
                     where row.Company == company_ex
                     && row.EmpID == employeeNum_ex
                     select new LaborHedForeignQueryResult()
                     {
                         EmployeeNumFirstName = row.FirstName,
                         EmployeeNumName = row.Name,
                         EmployeeNumLastName = row.LastName
                     }
                    ).FirstOrDefault();

                LaborHed_EmployeeNum_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborHed_EmployeeNum_Foreign_Query(this.Db, company, employeeNum);
        }

        private static Func<ErpContext, string, Guid, LaborHedForeignQueryResult> LaborHed_HCMStatus_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborHedForeignQueryResult FindFirst_LaborHed_HCMStatus_Foreign(string company, Guid sysRowID)
        {
            if (LaborHed_HCMStatus_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, Guid, LaborHedForeignQueryResult>> expression =
                    (dataContext, company_ex, sysRowID_ex) =>
                    (from row in dataContext.HCMLaborDtlSync
                     where row.Company == company_ex
                     && row.LaborDtlSysRowID == sysRowID_ex
                     select new LaborHedForeignQueryResult()
                     {
                         HCMStatusStatus = row.Status
                     }
                    ).FirstOrDefault();

                LaborHed_HCMStatus_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborHed_HCMStatus_Foreign_Query(this.Db, company, sysRowID);
        }

        private static Func<ErpContext, string, LaborHedForeignQueryResult> LaborHed_PRSyst_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborHedForeignQueryResult FindFirst_LaborHed_PRSyst_Foreign(string company)
        {
            if (LaborHed_PRSyst_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, LaborHedForeignQueryResult>> expression =
                    (dataContext, company_ex) =>
                    (from row in dataContext.PRSyst
                     where row.Company == company_ex
                     select new LaborHedForeignQueryResult()
                     {
                         PRSystHCMEnabled = row.HCMEnabled
                     }
                    ).FirstOrDefault();

                LaborHed_PRSyst_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborHed_PRSyst_Foreign_Query(this.Db, company);
        }

        private static Func<ErpContext, string, int, LaborHedForeignQueryResult> LaborHed_Shift_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborHedForeignQueryResult FindFirst_LaborHed_Shift_Foreign(string company, int shift)
        {
            if (LaborHed_Shift_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, LaborHedForeignQueryResult>> expression =
                    (dataContext, company_ex, shift_ex) =>
                    (from row in dataContext.JCShift
                     where row.Company == company_ex
                     && row.Shift == shift_ex
                     select new LaborHedForeignQueryResult()
                     {
                         ShiftDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborHed_Shift_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborHed_Shift_Foreign_Query(this.Db, company, shift);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void LaborHed_Foreign_Link()
        {
            LaborHedForeignQueryResult LaborHed_EmployeeNum_Foreign_LinkResults;
            LaborHed_EmployeeNum_Foreign_LinkResults = FindFirst_LaborHed_EmployeeNum_Foreign(ttLaborHed.Company, ttLaborHed.EmployeeNum);
            if (LaborHed_EmployeeNum_Foreign_LinkResults != null)
            {
                ttLaborHed.EmployeeNumFirstName = LaborHed_EmployeeNum_Foreign_LinkResults.EmployeeNumFirstName;
                ttLaborHed.EmployeeNumName = LaborHed_EmployeeNum_Foreign_LinkResults.EmployeeNumName;
                ttLaborHed.EmployeeNumLastName = LaborHed_EmployeeNum_Foreign_LinkResults.EmployeeNumLastName;
            }
            else
            {
                ttLaborHed.EmployeeNumFirstName = string.Empty;
                ttLaborHed.EmployeeNumName = string.Empty;
                ttLaborHed.EmployeeNumLastName = string.Empty;
            }

            LaborHedForeignQueryResult LaborHed_HCMStatus_Foreign_LinkResults;
            LaborHed_HCMStatus_Foreign_LinkResults = FindFirst_LaborHed_HCMStatus_Foreign(ttLaborHed.Company, ttLaborHed.SysRowID);
            if (LaborHed_HCMStatus_Foreign_LinkResults != null)
            {
                ttLaborHed.HCMStatusStatus = LaborHed_HCMStatus_Foreign_LinkResults.HCMStatusStatus;
            }
            else
            {
                ttLaborHed.HCMStatusStatus = string.Empty;
            }

            LaborHedForeignQueryResult LaborHed_PRSyst_Foreign_LinkResults;
            LaborHed_PRSyst_Foreign_LinkResults = FindFirst_LaborHed_PRSyst_Foreign(ttLaborHed.Company);
            if (LaborHed_PRSyst_Foreign_LinkResults != null)
            {
                ttLaborHed.PRSystHCMEnabled = LaborHed_PRSyst_Foreign_LinkResults.PRSystHCMEnabled;
            }
            else
            {
                ttLaborHed.PRSystHCMEnabled = false;
            }

            LaborHedForeignQueryResult LaborHed_Shift_Foreign_LinkResults;
            LaborHed_Shift_Foreign_LinkResults = FindFirst_LaborHed_Shift_Foreign(ttLaborHed.Company, ttLaborHed.Shift);
            if (LaborHed_Shift_Foreign_LinkResults != null)
            {
                ttLaborHed.ShiftDescription = LaborHed_Shift_Foreign_LinkResults.ShiftDescription;
            }
            else
            {
                ttLaborHed.ShiftDescription = string.Empty;
            }
        }
        #endregion LaborHed_Foreign_Link
        #endregion Table LaborHed

        #region Table LaborDtl
        #region GetNewLaborDtl
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewLaborDtl(ref LaborTableset ds, int laborHedSeq)
        {
            CurrentFullTableset = ds;

            ttLaborDtl = (LaborDtlRow)InnerGetNew(
                ds.LaborDtl,
                (LaborDtlRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.LaborHedSeq = laborHedSeq;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewLaborDtl

        #region Events
        partial void LaborDtlAfterCreate();
        partial void LaborDtlAfterDelete();
        partial void LaborDtlAfterGetNew();
        partial void LaborDtlAfterGetRows();
        partial void LaborDtlAfterUpdate();
        partial void LaborDtlBeforeBI();
        partial void LaborDtlBeforeCreate();
        partial void LaborDtlBeforeDelete();
        partial void LaborDtlBeforeGetNew();
        partial void LaborDtlBeforeUpdate();
        partial void LaborDtlSetDefaults(LaborDtlRow row);
        #endregion Events

        #region LaborDtl_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class LaborDtlForeignQueryResult
        {
            public string DiscrpRsnDescription { get; set; }
            public string EmpBasicLastName { get; set; }
            public string EmpBasicFirstName { get; set; }
            public string EmpBasicName { get; set; }
            public string ExpenseCodeDescription { get; set; }
            public bool HCMIntregationHCMEnabled { get; set; }
            public string HCMStatusStatus { get; set; }
            public string IndirectDescription { get; set; }
            public string JCDeptDescription { get; set; }
            public string JobAsmblPartNum { get; set; }
            public string JobAsmblDescription { get; set; }
            public string MachineDescription { get; set; }
            public string OpCodeOpDesc { get; set; }
            public string OpDescOpDesc { get; set; }
            public int PayMethodType { get; set; }
            public bool PayMethodSummarizePerCustomer { get; set; }
            public string PayMethodName { get; set; }
            public string PhaseIDDescription { get; set; }
            public string ProjectDescription { get; set; }
            public string ResourceGrpDescription { get; set; }
            public string ResReasonDescription { get; set; }
            public string ReWorkReasonDescription { get; set; }
            public string RoleCdRoleDescription { get; set; }
            public string ScrapReasonDescription { get; set; }
            public string ShiftDescription { get; set; }
            public string TimeTypCdDescription { get; set; }
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_DiscrpRsn_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_DiscrpRsn_Foreign(string company, string discrpRsnCode)
        {
            if (LaborDtl_DiscrpRsn_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, discrpRsnCode_ex) =>
                    (from row in dataContext.Reason
                     where row.Company == company_ex
                     && row.ReasonType == "S"
                     && row.ReasonCode == discrpRsnCode_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         DiscrpRsnDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_DiscrpRsn_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_DiscrpRsn_Foreign_Query(this.Db, company, discrpRsnCode);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_EmpBasic_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_EmpBasic_Foreign(string company, string employeeNum)
        {
            if (LaborDtl_EmpBasic_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, employeeNum_ex) =>
                    (from row in dataContext.EmpBasic
                     where row.Company == company_ex
                     && row.EmpID == employeeNum_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         EmpBasicLastName = row.LastName,
                         EmpBasicFirstName = row.FirstName,
                         EmpBasicName = row.Name
                     }
                    ).FirstOrDefault();

                LaborDtl_EmpBasic_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_EmpBasic_Foreign_Query(this.Db, company, employeeNum);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_ExpenseCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_ExpenseCode_Foreign(string company, string expenseCode)
        {
            if (LaborDtl_ExpenseCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, expenseCode_ex) =>
                    (from row in dataContext.LabExpCd
                     where row.Company == company_ex
                     && row.ExpenseCode == expenseCode_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         ExpenseCodeDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_ExpenseCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_ExpenseCode_Foreign_Query(this.Db, company, expenseCode);
        }

        private static Func<ErpContext, string, LaborDtlForeignQueryResult> LaborDtl_HCMIntregation_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_HCMIntregation_Foreign(string company)
        {
            if (LaborDtl_HCMIntregation_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex) =>
                    (from row in dataContext.PRSyst
                     where row.Company == company_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         HCMIntregationHCMEnabled = row.HCMEnabled
                     }
                    ).FirstOrDefault();

                LaborDtl_HCMIntregation_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_HCMIntregation_Foreign_Query(this.Db, company);
        }

        private static Func<ErpContext, string, Guid, LaborDtlForeignQueryResult> LaborDtl_HCMStatus_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_HCMStatus_Foreign(string company, Guid sysRowID)
        {
            if (LaborDtl_HCMStatus_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, Guid, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, sysRowID_ex) =>
                    (from row in dataContext.HCMLaborDtlSync
                     where row.Company == company_ex
                     && row.LaborDtlSysRowID == sysRowID_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         HCMStatusStatus = row.Status
                     }
                    ).FirstOrDefault();

                LaborDtl_HCMStatus_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_HCMStatus_Foreign_Query(this.Db, company, sysRowID);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_Indirect_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_Indirect_Foreign(string company, string indirectCode)
        {
            if (LaborDtl_Indirect_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, indirectCode_ex) =>
                    (from row in dataContext.Indirect
                     where row.Company == company_ex
                     && row.IndirectCode == indirectCode_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         IndirectDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_Indirect_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_Indirect_Foreign_Query(this.Db, company, indirectCode);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_JCDept_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_JCDept_Foreign(string company, string jcDept)
        {
            if (LaborDtl_JCDept_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, jcDept_ex) =>
                    (from row in dataContext.JCDept
                     where row.Company == company_ex
                     && row.JCDept1 == jcDept_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         JCDeptDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_JCDept_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_JCDept_Foreign_Query(this.Db, company, jcDept);
        }

        private static Func<ErpContext, string, string, int, LaborDtlForeignQueryResult> LaborDtl_JobAsmbl_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_JobAsmbl_Foreign(string company, string jobNum, int assemblySeq)
        {
            if (LaborDtl_JobAsmbl_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, int, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, jobNum_ex, assemblySeq_ex) =>
                    (from row in dataContext.JobAsmbl
                     where row.Company == company_ex
                     && row.JobNum == jobNum_ex
                     && row.AssemblySeq == assemblySeq_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         JobAsmblPartNum = row.PartNum,
                         JobAsmblDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_JobAsmbl_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_JobAsmbl_Foreign_Query(this.Db, company, jobNum, assemblySeq);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_Machine_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_Machine_Foreign(string company, string resourceID)
        {
            if (LaborDtl_Machine_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, resourceID_ex) =>
                    (from row in dataContext.Resource
                     where row.Company == company_ex
                     && row.ResourceID == resourceID_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         MachineDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_Machine_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_Machine_Foreign_Query(this.Db, company, resourceID);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_OpCode_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_OpCode_Foreign(string company, string opCode)
        {
            if (LaborDtl_OpCode_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, opCode_ex) =>
                    (from row in dataContext.OpMaster
                     where row.Company == company_ex
                     && row.OpCode == opCode_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         OpCodeOpDesc = row.OpDesc
                     }
                    ).FirstOrDefault();

                LaborDtl_OpCode_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_OpCode_Foreign_Query(this.Db, company, opCode);
        }

        private static Func<ErpContext, string, string, int, int, LaborDtlForeignQueryResult> LaborDtl_OpDesc_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_OpDesc_Foreign(string company, string jobNum, int assemblySeq, int oprSeq)
        {
            if (LaborDtl_OpDesc_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, int, int, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, jobNum_ex, assemblySeq_ex, oprSeq_ex) =>
                    (from row in dataContext.JobOper
                     where row.Company == company_ex
                     && row.JobNum == jobNum_ex
                     && row.AssemblySeq == assemblySeq_ex
                     && row.OprSeq == oprSeq_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         OpDescOpDesc = row.OpDesc
                     }
                    ).FirstOrDefault();

                LaborDtl_OpDesc_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_OpDesc_Foreign_Query(this.Db, company, jobNum, assemblySeq, oprSeq);
        }

        private static Func<ErpContext, string, int, LaborDtlForeignQueryResult> LaborDtl_PayMethod_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_PayMethod_Foreign(string company, int pmUID)
        {
            if (LaborDtl_PayMethod_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, pmUID_ex) =>
                    (from row in dataContext.PayMethod
                     where row.Company == company_ex
                     && row.PMUID == pmUID_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         PayMethodType = row.Type,
                         PayMethodSummarizePerCustomer = row.SummarizePerCustomer,
                         PayMethodName = row.Name
                     }
                    ).FirstOrDefault();

                LaborDtl_PayMethod_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_PayMethod_Foreign_Query(this.Db, company, pmUID);
        }

        private static Func<ErpContext, string, string, string, LaborDtlForeignQueryResult> LaborDtl_PhaseID_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_PhaseID_Foreign(string company, string projectID, string phaseID)
        {
            if (LaborDtl_PhaseID_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, projectID_ex, phaseID_ex) =>
                    (from row in dataContext.ProjPhase
                     where row.Company == company_ex
                     && row.ProjectID == projectID_ex
                     && row.PhaseID == phaseID_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         PhaseIDDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_PhaseID_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_PhaseID_Foreign_Query(this.Db, company, projectID, phaseID);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_Project_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_Project_Foreign(string company, string projectID)
        {
            if (LaborDtl_Project_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, projectID_ex) =>
                    (from row in dataContext.Project
                     where row.Company == company_ex
                     && row.ProjectID == projectID_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         ProjectDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_Project_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_Project_Foreign_Query(this.Db, company, projectID);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_ResourceGrp_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_ResourceGrp_Foreign(string company, string resourceGrpID)
        {
            if (LaborDtl_ResourceGrp_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, resourceGrpID_ex) =>
                    (from row in dataContext.ResourceGroup
                     where row.Company == company_ex
                     && row.ResourceGrpID == resourceGrpID_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         ResourceGrpDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_ResourceGrp_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_ResourceGrp_Foreign_Query(this.Db, company, resourceGrpID);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_ResReason_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_ResReason_Foreign(string company, string resReasonCode)
        {
            if (LaborDtl_ResReason_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, resReasonCode_ex) =>
                    (from row in dataContext.Reason
                     where row.Company == company_ex
                     && row.ReasonType == "C"
                     && row.ReasonCode == resReasonCode_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         ResReasonDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_ResReason_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_ResReason_Foreign_Query(this.Db, company, resReasonCode);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_ReWorkReason_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_ReWorkReason_Foreign(string company, string reworkReasonCode)
        {
            if (LaborDtl_ReWorkReason_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, reworkReasonCode_ex) =>
                    (from row in dataContext.Reason
                     where row.Company == company_ex
                     && row.ReasonType == "R"
                     && row.ReasonCode == reworkReasonCode_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         ReWorkReasonDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_ReWorkReason_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_ReWorkReason_Foreign_Query(this.Db, company, reworkReasonCode);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_RoleCd_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_RoleCd_Foreign(string company, string roleCd)
        {
            if (LaborDtl_RoleCd_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, roleCd_ex) =>
                    (from row in dataContext.RoleCd
                     where row.Company == company_ex
                     && row.RoleCode == roleCd_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         RoleCdRoleDescription = row.RoleDescription
                     }
                    ).FirstOrDefault();

                LaborDtl_RoleCd_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_RoleCd_Foreign_Query(this.Db, company, roleCd);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_ScrapReason_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_ScrapReason_Foreign(string company, string scrapReasonCode)
        {
            if (LaborDtl_ScrapReason_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, scrapReasonCode_ex) =>
                    (from row in dataContext.Reason
                     where row.Company == company_ex
                     && row.ReasonType == "S"
                     && row.ReasonCode == scrapReasonCode_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         ScrapReasonDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_ScrapReason_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_ScrapReason_Foreign_Query(this.Db, company, scrapReasonCode);
        }

        private static Func<ErpContext, string, int, LaborDtlForeignQueryResult> LaborDtl_Shift_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_Shift_Foreign(string company, int shift)
        {
            if (LaborDtl_Shift_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, int, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, shift_ex) =>
                    (from row in dataContext.JCShift
                     where row.Company == company_ex
                     && row.Shift == shift_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         ShiftDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_Shift_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_Shift_Foreign_Query(this.Db, company, shift);
        }

        private static Func<ErpContext, string, string, LaborDtlForeignQueryResult> LaborDtl_TimeTypCd_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlForeignQueryResult FindFirst_LaborDtl_TimeTypCd_Foreign(string company, string timeTypCd)
        {
            if (LaborDtl_TimeTypCd_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlForeignQueryResult>> expression =
                    (dataContext, company_ex, timeTypCd_ex) =>
                    (from row in dataContext.TimeTypCd
                     where row.Company == company_ex
                     && row.TimeTypCd1 == timeTypCd_ex
                     select new LaborDtlForeignQueryResult()
                     {
                         TimeTypCdDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborDtl_TimeTypCd_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtl_TimeTypCd_Foreign_Query(this.Db, company, timeTypCd);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void LaborDtl_Foreign_Link()
        {
            LaborDtlForeignQueryResult LaborDtl_DiscrpRsn_Foreign_LinkResults;
            LaborDtl_DiscrpRsn_Foreign_LinkResults = FindFirst_LaborDtl_DiscrpRsn_Foreign(ttLaborDtl.Company, ttLaborDtl.DiscrpRsnCode);
            if (LaborDtl_DiscrpRsn_Foreign_LinkResults != null)
            {
                ttLaborDtl.DiscrpRsnDescription = LaborDtl_DiscrpRsn_Foreign_LinkResults.DiscrpRsnDescription;
            }
            else
            {
                ttLaborDtl.DiscrpRsnDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_EmpBasic_Foreign_LinkResults;
            LaborDtl_EmpBasic_Foreign_LinkResults = FindFirst_LaborDtl_EmpBasic_Foreign(ttLaborDtl.Company, ttLaborDtl.EmployeeNum);
            if (LaborDtl_EmpBasic_Foreign_LinkResults != null)
            {
                ttLaborDtl.EmpBasicLastName = LaborDtl_EmpBasic_Foreign_LinkResults.EmpBasicLastName;
                ttLaborDtl.EmpBasicFirstName = LaborDtl_EmpBasic_Foreign_LinkResults.EmpBasicFirstName;
                ttLaborDtl.EmpBasicName = LaborDtl_EmpBasic_Foreign_LinkResults.EmpBasicName;
            }
            else
            {
                ttLaborDtl.EmpBasicLastName = string.Empty;
                ttLaborDtl.EmpBasicFirstName = string.Empty;
                ttLaborDtl.EmpBasicName = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_ExpenseCode_Foreign_LinkResults;
            LaborDtl_ExpenseCode_Foreign_LinkResults = FindFirst_LaborDtl_ExpenseCode_Foreign(ttLaborDtl.Company, ttLaborDtl.ExpenseCode);
            if (LaborDtl_ExpenseCode_Foreign_LinkResults != null)
            {
                ttLaborDtl.ExpenseCodeDescription = LaborDtl_ExpenseCode_Foreign_LinkResults.ExpenseCodeDescription;
            }
            else
            {
                ttLaborDtl.ExpenseCodeDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_HCMIntregation_Foreign_LinkResults;
            LaborDtl_HCMIntregation_Foreign_LinkResults = FindFirst_LaborDtl_HCMIntregation_Foreign(ttLaborDtl.Company);
            if (LaborDtl_HCMIntregation_Foreign_LinkResults != null)
            {
                ttLaborDtl.HCMIntregationHCMEnabled = LaborDtl_HCMIntregation_Foreign_LinkResults.HCMIntregationHCMEnabled;
            }
            else
            {
                ttLaborDtl.HCMIntregationHCMEnabled = false;
            }

            LaborDtlForeignQueryResult LaborDtl_HCMStatus_Foreign_LinkResults;
            LaborDtl_HCMStatus_Foreign_LinkResults = FindFirst_LaborDtl_HCMStatus_Foreign(ttLaborDtl.Company, ttLaborDtl.SysRowID);
            if (LaborDtl_HCMStatus_Foreign_LinkResults != null)
            {
                ttLaborDtl.HCMStatusStatus = LaborDtl_HCMStatus_Foreign_LinkResults.HCMStatusStatus;
            }
            else
            {
                ttLaborDtl.HCMStatusStatus = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_Indirect_Foreign_LinkResults;
            LaborDtl_Indirect_Foreign_LinkResults = FindFirst_LaborDtl_Indirect_Foreign(ttLaborDtl.Company, ttLaborDtl.IndirectCode);
            if (LaborDtl_Indirect_Foreign_LinkResults != null)
            {
                ttLaborDtl.IndirectDescription = LaborDtl_Indirect_Foreign_LinkResults.IndirectDescription;
            }
            else
            {
                ttLaborDtl.IndirectDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_JCDept_Foreign_LinkResults;
            LaborDtl_JCDept_Foreign_LinkResults = FindFirst_LaborDtl_JCDept_Foreign(ttLaborDtl.Company, ttLaborDtl.JCDept);
            if (LaborDtl_JCDept_Foreign_LinkResults != null)
            {
                ttLaborDtl.JCDeptDescription = LaborDtl_JCDept_Foreign_LinkResults.JCDeptDescription;
            }
            else
            {
                ttLaborDtl.JCDeptDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_JobAsmbl_Foreign_LinkResults;
            LaborDtl_JobAsmbl_Foreign_LinkResults = FindFirst_LaborDtl_JobAsmbl_Foreign(ttLaborDtl.Company, ttLaborDtl.JobNum, ttLaborDtl.AssemblySeq);
            if (LaborDtl_JobAsmbl_Foreign_LinkResults != null)
            {
                ttLaborDtl.JobAsmblPartNum = LaborDtl_JobAsmbl_Foreign_LinkResults.JobAsmblPartNum;
                ttLaborDtl.JobAsmblDescription = LaborDtl_JobAsmbl_Foreign_LinkResults.JobAsmblDescription;
            }
            else
            {
                ttLaborDtl.JobAsmblPartNum = string.Empty;
                ttLaborDtl.JobAsmblDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_Machine_Foreign_LinkResults;
            LaborDtl_Machine_Foreign_LinkResults = FindFirst_LaborDtl_Machine_Foreign(ttLaborDtl.Company, ttLaborDtl.ResourceID);
            if (LaborDtl_Machine_Foreign_LinkResults != null)
            {
                ttLaborDtl.MachineDescription = LaborDtl_Machine_Foreign_LinkResults.MachineDescription;
            }
            else
            {
                ttLaborDtl.MachineDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_OpCode_Foreign_LinkResults;
            LaborDtl_OpCode_Foreign_LinkResults = FindFirst_LaborDtl_OpCode_Foreign(ttLaborDtl.Company, ttLaborDtl.OpCode);
            if (LaborDtl_OpCode_Foreign_LinkResults != null)
            {
                ttLaborDtl.OpCodeOpDesc = LaborDtl_OpCode_Foreign_LinkResults.OpCodeOpDesc;
            }
            else
            {
                ttLaborDtl.OpCodeOpDesc = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_OpDesc_Foreign_LinkResults;
            LaborDtl_OpDesc_Foreign_LinkResults = FindFirst_LaborDtl_OpDesc_Foreign(ttLaborDtl.Company, ttLaborDtl.JobNum, ttLaborDtl.AssemblySeq, ttLaborDtl.OprSeq);
            if (LaborDtl_OpDesc_Foreign_LinkResults != null)
            {
                ttLaborDtl.OpDescOpDesc = LaborDtl_OpDesc_Foreign_LinkResults.OpDescOpDesc;
            }
            else
            {
                ttLaborDtl.OpDescOpDesc = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_PayMethod_Foreign_LinkResults;
            LaborDtl_PayMethod_Foreign_LinkResults = FindFirst_LaborDtl_PayMethod_Foreign(ttLaborDtl.Company, ttLaborDtl.PMUID);
            if (LaborDtl_PayMethod_Foreign_LinkResults != null)
            {
                ttLaborDtl.PayMethodType = LaborDtl_PayMethod_Foreign_LinkResults.PayMethodType;
                ttLaborDtl.PayMethodSummarizePerCustomer = LaborDtl_PayMethod_Foreign_LinkResults.PayMethodSummarizePerCustomer;
                ttLaborDtl.PayMethodName = LaborDtl_PayMethod_Foreign_LinkResults.PayMethodName;
            }
            else
            {
                ttLaborDtl.PayMethodType = 0;
                ttLaborDtl.PayMethodSummarizePerCustomer = false;
                ttLaborDtl.PayMethodName = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_PhaseID_Foreign_LinkResults;
            LaborDtl_PhaseID_Foreign_LinkResults = FindFirst_LaborDtl_PhaseID_Foreign(ttLaborDtl.Company, ttLaborDtl.ProjectID, ttLaborDtl.PhaseID);
            if (LaborDtl_PhaseID_Foreign_LinkResults != null)
            {
                ttLaborDtl.PhaseIDDescription = LaborDtl_PhaseID_Foreign_LinkResults.PhaseIDDescription;
            }
            else
            {
                ttLaborDtl.PhaseIDDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_Project_Foreign_LinkResults;
            LaborDtl_Project_Foreign_LinkResults = FindFirst_LaborDtl_Project_Foreign(ttLaborDtl.Company, ttLaborDtl.ProjectID);
            if (LaborDtl_Project_Foreign_LinkResults != null)
            {
                ttLaborDtl.ProjectDescription = LaborDtl_Project_Foreign_LinkResults.ProjectDescription;
            }
            else
            {
                ttLaborDtl.ProjectDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_ResourceGrp_Foreign_LinkResults;
            LaborDtl_ResourceGrp_Foreign_LinkResults = FindFirst_LaborDtl_ResourceGrp_Foreign(ttLaborDtl.Company, ttLaborDtl.ResourceGrpID);
            if (LaborDtl_ResourceGrp_Foreign_LinkResults != null)
            {
                ttLaborDtl.ResourceGrpDescription = LaborDtl_ResourceGrp_Foreign_LinkResults.ResourceGrpDescription;
            }
            else
            {
                ttLaborDtl.ResourceGrpDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_ResReason_Foreign_LinkResults;
            LaborDtl_ResReason_Foreign_LinkResults = FindFirst_LaborDtl_ResReason_Foreign(ttLaborDtl.Company, ttLaborDtl.ResReasonCode);
            if (LaborDtl_ResReason_Foreign_LinkResults != null)
            {
                ttLaborDtl.ResReasonDescription = LaborDtl_ResReason_Foreign_LinkResults.ResReasonDescription;
            }
            else
            {
                ttLaborDtl.ResReasonDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_ReWorkReason_Foreign_LinkResults;
            LaborDtl_ReWorkReason_Foreign_LinkResults = FindFirst_LaborDtl_ReWorkReason_Foreign(ttLaborDtl.Company, ttLaborDtl.ReworkReasonCode);
            if (LaborDtl_ReWorkReason_Foreign_LinkResults != null)
            {
                ttLaborDtl.ReWorkReasonDescription = LaborDtl_ReWorkReason_Foreign_LinkResults.ReWorkReasonDescription;
            }
            else
            {
                ttLaborDtl.ReWorkReasonDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_RoleCd_Foreign_LinkResults;
            LaborDtl_RoleCd_Foreign_LinkResults = FindFirst_LaborDtl_RoleCd_Foreign(ttLaborDtl.Company, ttLaborDtl.RoleCd);
            if (LaborDtl_RoleCd_Foreign_LinkResults != null)
            {
                ttLaborDtl.RoleCdRoleDescription = LaborDtl_RoleCd_Foreign_LinkResults.RoleCdRoleDescription;
            }
            else
            {
                ttLaborDtl.RoleCdRoleDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_ScrapReason_Foreign_LinkResults;
            LaborDtl_ScrapReason_Foreign_LinkResults = FindFirst_LaborDtl_ScrapReason_Foreign(ttLaborDtl.Company, ttLaborDtl.ScrapReasonCode);
            if (LaborDtl_ScrapReason_Foreign_LinkResults != null)
            {
                ttLaborDtl.ScrapReasonDescription = LaborDtl_ScrapReason_Foreign_LinkResults.ScrapReasonDescription;
            }
            else
            {
                ttLaborDtl.ScrapReasonDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_Shift_Foreign_LinkResults;
            LaborDtl_Shift_Foreign_LinkResults = FindFirst_LaborDtl_Shift_Foreign(ttLaborDtl.Company, ttLaborDtl.Shift);
            if (LaborDtl_Shift_Foreign_LinkResults != null)
            {
                ttLaborDtl.ShiftDescription = LaborDtl_Shift_Foreign_LinkResults.ShiftDescription;
            }
            else
            {
                ttLaborDtl.ShiftDescription = string.Empty;
            }

            LaborDtlForeignQueryResult LaborDtl_TimeTypCd_Foreign_LinkResults;
            LaborDtl_TimeTypCd_Foreign_LinkResults = FindFirst_LaborDtl_TimeTypCd_Foreign(ttLaborDtl.Company, ttLaborDtl.TimeTypCd);
            if (LaborDtl_TimeTypCd_Foreign_LinkResults != null)
            {
                ttLaborDtl.TimeTypCdDescription = LaborDtl_TimeTypCd_Foreign_LinkResults.TimeTypCdDescription;
            }
            else
            {
                ttLaborDtl.TimeTypCdDescription = string.Empty;
            }
        }
        #endregion LaborDtl_Foreign_Link
        #endregion Table LaborDtl

        #region Table LaborDtlAttch
        #region GetNewLaborDtlAttch
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewLaborDtlAttch(ref LaborTableset ds, int laborHedSeq, int laborDtlSeq)
        {
            CurrentFullTableset = ds;

            ttLaborDtlAttch = (LaborDtlAttchRow)InnerGetNew(
                ds.LaborDtlAttch,
                (LaborDtlAttchRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.LaborHedSeq = laborHedSeq;
                    row.LaborDtlSeq = laborDtlSeq;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewLaborDtlAttch

        #region Events
        partial void LaborDtlAttchAfterCreate();
        partial void LaborDtlAttchAfterDelete();
        partial void LaborDtlAttchAfterGetNew();
        partial void LaborDtlAttchAfterGetRows();
        partial void LaborDtlAttchAfterUpdate();
        partial void LaborDtlAttchBeforeBI();
        partial void LaborDtlAttchBeforeCreate();
        partial void LaborDtlAttchBeforeDelete();
        partial void LaborDtlAttchBeforeGetNew();
        partial void LaborDtlAttchBeforeUpdate();
        partial void LaborDtlAttchSetDefaults(LaborDtlAttchRow row);
        #endregion Events

        #endregion Table LaborDtlAttch

        #region Table LaborDtlAction
        #region GetNewLaborDtlAction
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewLaborDtlAction(ref LaborTableset ds, int laborHedSeq, int laborDtlSeq)
        {
            CurrentFullTableset = ds;

            ttLaborDtlAction = (LaborDtlActionRow)InnerGetNew(
                ds.LaborDtlAction,
                (LaborDtlActionRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.LaborHedSeq = laborHedSeq;
                    row.LaborDtlSeq = laborDtlSeq;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewLaborDtlAction

        #region Events
        partial void LaborDtlActionAfterCreate();
        partial void LaborDtlActionAfterDelete();
        partial void LaborDtlActionAfterGetNew();
        partial void LaborDtlActionAfterGetRows();
        partial void LaborDtlActionAfterUpdate();
        partial void LaborDtlActionBeforeBI();
        partial void LaborDtlActionBeforeCreate();
        partial void LaborDtlActionBeforeDelete();
        partial void LaborDtlActionBeforeGetNew();
        partial void LaborDtlActionBeforeUpdate();
        partial void LaborDtlActionSetDefaults(LaborDtlActionRow row);
        #endregion Events

        #region LaborDtlAction_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class LaborDtlActionForeignQueryResult
        {
            public string EmpBasicName { get; set; }
        }

        private static Func<ErpContext, string, string, LaborDtlActionForeignQueryResult> LaborDtlAction_EmpBasic_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborDtlActionForeignQueryResult FindFirst_LaborDtlAction_EmpBasic_Foreign(string company, string completedBy)
        {
            if (LaborDtlAction_EmpBasic_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborDtlActionForeignQueryResult>> expression =
                    (dataContext, company_ex, completedBy_ex) =>
                    (from row in dataContext.EmpBasic
                     where row.Company == company_ex
                     && row.EmpID == completedBy_ex
                     select new LaborDtlActionForeignQueryResult()
                     {
                         EmpBasicName = row.Name
                     }
                    ).FirstOrDefault();

                LaborDtlAction_EmpBasic_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborDtlAction_EmpBasic_Foreign_Query(this.Db, company, completedBy);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void LaborDtlAction_Foreign_Link()
        {
            LaborDtlActionForeignQueryResult LaborDtlAction_EmpBasic_Foreign_LinkResults;
            LaborDtlAction_EmpBasic_Foreign_LinkResults = FindFirst_LaborDtlAction_EmpBasic_Foreign(ttLaborDtlAction.Company, ttLaborDtlAction.CompletedBy);
            if (LaborDtlAction_EmpBasic_Foreign_LinkResults != null)
            {
                ttLaborDtlAction.EmpBasicName = LaborDtlAction_EmpBasic_Foreign_LinkResults.EmpBasicName;
            }
            else
            {
                ttLaborDtlAction.EmpBasicName = string.Empty;
            }
        }
        #endregion LaborDtlAction_Foreign_Link
        #endregion Table LaborDtlAction

        #region Table LaborDtlComment
        #region GetNewLaborDtlComment
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewLaborDtlComment(ref LaborTableset ds, int laborHedSeq, int laborDtlSeq)
        {
            CurrentFullTableset = ds;

            ttLaborDtlComment = (LaborDtlCommentRow)InnerGetNew(
                ds.LaborDtlComment,
                (LaborDtlCommentRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.LaborHedSeq = laborHedSeq;
                    row.LaborDtlSeq = laborDtlSeq;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewLaborDtlComment

        #region Events
        partial void LaborDtlCommentAfterCreate();
        partial void LaborDtlCommentAfterDelete();
        partial void LaborDtlCommentAfterGetNew();
        partial void LaborDtlCommentAfterGetRows();
        partial void LaborDtlCommentAfterUpdate();
        partial void LaborDtlCommentBeforeBI();
        partial void LaborDtlCommentBeforeCreate();
        partial void LaborDtlCommentBeforeDelete();
        partial void LaborDtlCommentBeforeGetNew();
        partial void LaborDtlCommentBeforeUpdate();
        partial void LaborDtlCommentSetDefaults(LaborDtlCommentRow row);
        #endregion Events

        #endregion Table LaborDtlComment

        #region Table LaborEquip
        #region GetNewLaborEquip
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewLaborEquip(ref LaborTableset ds, int laborHedSeq, int laborDtlSeq)
        {
            CurrentFullTableset = ds;

            ttLaborEquip = (LaborEquipRow)InnerGetNew(
                ds.LaborEquip,
                (LaborEquipRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.LaborHedSeq = laborHedSeq;
                    row.LaborDtlSeq = laborDtlSeq;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewLaborEquip

        #region Events
        partial void LaborEquipAfterCreate();
        partial void LaborEquipAfterDelete();
        partial void LaborEquipAfterGetNew();
        partial void LaborEquipAfterGetRows();
        partial void LaborEquipAfterUpdate();
        partial void LaborEquipBeforeBI();
        partial void LaborEquipBeforeCreate();
        partial void LaborEquipBeforeDelete();
        partial void LaborEquipBeforeGetNew();
        partial void LaborEquipBeforeUpdate();
        partial void LaborEquipSetDefaults(LaborEquipRow row);
        #endregion Events

        #region LaborEquip_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class LaborEquipForeignQueryResult
        {
            public string EquipLaborMeterOpt { get; set; }
            public string EquipDescription { get; set; }
            public string EquipMeterUOM { get; set; }
        }

        private static Func<ErpContext, string, string, LaborEquipForeignQueryResult> LaborEquip_Equip_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborEquipForeignQueryResult FindFirst_LaborEquip_Equip_Foreign(string company, string equipID)
        {
            if (LaborEquip_Equip_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborEquipForeignQueryResult>> expression =
                    (dataContext, company_ex, equipID_ex) =>
                    (from row in dataContext.Equip
                     where row.Company == company_ex
                     && row.EquipID == equipID_ex
                     select new LaborEquipForeignQueryResult()
                     {
                         EquipLaborMeterOpt = row.LaborMeterOpt,
                         EquipDescription = row.Description,
                         EquipMeterUOM = row.MeterUOM
                     }
                    ).FirstOrDefault();

                LaborEquip_Equip_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborEquip_Equip_Foreign_Query(this.Db, company, equipID);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void LaborEquip_Foreign_Link()
        {
            LaborEquipForeignQueryResult LaborEquip_Equip_Foreign_LinkResults;
            LaborEquip_Equip_Foreign_LinkResults = FindFirst_LaborEquip_Equip_Foreign(ttLaborEquip.Company, ttLaborEquip.EquipID);
            if (LaborEquip_Equip_Foreign_LinkResults != null)
            {
                ttLaborEquip.EquipLaborMeterOpt = LaborEquip_Equip_Foreign_LinkResults.EquipLaborMeterOpt;
                ttLaborEquip.EquipDescription = LaborEquip_Equip_Foreign_LinkResults.EquipDescription;
                ttLaborEquip.EquipMeterUOM = LaborEquip_Equip_Foreign_LinkResults.EquipMeterUOM;
            }
            else
            {
                ttLaborEquip.EquipLaborMeterOpt = string.Empty;
                ttLaborEquip.EquipDescription = string.Empty;
                ttLaborEquip.EquipMeterUOM = string.Empty;
            }
        }
        #endregion LaborEquip_Foreign_Link
        #endregion Table LaborEquip

        #region Table LaborPart
        #region GetNewLaborPart
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewLaborPart(ref LaborTableset ds, int laborHedSeq, int laborDtlSeq)
        {
            CurrentFullTableset = ds;

            ttLaborPart = (LaborPartRow)InnerGetNew(
                ds.LaborPart,
                (LaborPartRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.LaborHedSeq = laborHedSeq;
                    row.LaborDtlSeq = laborDtlSeq;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewLaborPart

        #region Events
        partial void LaborPartAfterCreate();
        partial void LaborPartAfterDelete();
        partial void LaborPartAfterGetNew();
        partial void LaborPartAfterGetRows();
        partial void LaborPartAfterUpdate();
        partial void LaborPartBeforeBI();
        partial void LaborPartBeforeCreate();
        partial void LaborPartBeforeDelete();
        partial void LaborPartBeforeGetNew();
        partial void LaborPartBeforeUpdate();
        partial void LaborPartSetDefaults(LaborPartRow row);
        #endregion Events

        #region LaborPart_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        class LaborPartForeignQueryResult
        {
            public string DiscrpRsnDescription { get; set; }
            public string ScrapReasonDescription { get; set; }
        }

        private static Func<ErpContext, string, string, LaborPartForeignQueryResult> LaborPart_DiscrpRsn_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborPartForeignQueryResult FindFirst_LaborPart_DiscrpRsn_Foreign(string company, string discrpRsnCode)
        {
            if (LaborPart_DiscrpRsn_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborPartForeignQueryResult>> expression =
                    (dataContext, company_ex, discrpRsnCode_ex) =>
                    (from row in dataContext.Reason
                     where row.Company == company_ex
                     && row.ReasonType == "S"
                     && row.ReasonCode == discrpRsnCode_ex
                     select new LaborPartForeignQueryResult()
                     {
                         DiscrpRsnDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborPart_DiscrpRsn_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborPart_DiscrpRsn_Foreign_Query(this.Db, company, discrpRsnCode);
        }

        private static Func<ErpContext, string, string, LaborPartForeignQueryResult> LaborPart_ScrapReason_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private LaborPartForeignQueryResult FindFirst_LaborPart_ScrapReason_Foreign(string company, string scrapReasonCode)
        {
            if (LaborPart_ScrapReason_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, LaborPartForeignQueryResult>> expression =
                    (dataContext, company_ex, scrapReasonCode_ex) =>
                    (from row in dataContext.Reason
                     where row.Company == company_ex
                     && row.ReasonType == "S"
                     && row.ReasonCode == scrapReasonCode_ex
                     select new LaborPartForeignQueryResult()
                     {
                         ScrapReasonDescription = row.Description
                     }
                    ).FirstOrDefault();

                LaborPart_ScrapReason_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return LaborPart_ScrapReason_Foreign_Query(this.Db, company, scrapReasonCode);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        private void LaborPart_Foreign_Link()
        {
            LaborPartForeignQueryResult LaborPart_DiscrpRsn_Foreign_LinkResults;
            LaborPart_DiscrpRsn_Foreign_LinkResults = FindFirst_LaborPart_DiscrpRsn_Foreign(ttLaborPart.Company, ttLaborPart.DiscrpRsnCode);
            if (LaborPart_DiscrpRsn_Foreign_LinkResults != null)
            {
                ttLaborPart.DiscrpRsnDescription = LaborPart_DiscrpRsn_Foreign_LinkResults.DiscrpRsnDescription;
            }
            else
            {
                ttLaborPart.DiscrpRsnDescription = string.Empty;
            }

            LaborPartForeignQueryResult LaborPart_ScrapReason_Foreign_LinkResults;
            LaborPart_ScrapReason_Foreign_LinkResults = FindFirst_LaborPart_ScrapReason_Foreign(ttLaborPart.Company, ttLaborPart.ScrapReasonCode);
            if (LaborPart_ScrapReason_Foreign_LinkResults != null)
            {
                ttLaborPart.ScrapReasonDescription = LaborPart_ScrapReason_Foreign_LinkResults.ScrapReasonDescription;
            }
            else
            {
                ttLaborPart.ScrapReasonDescription = string.Empty;
            }
        }
        #endregion LaborPart_Foreign_Link
        #endregion Table LaborPart

        #region Table LaborDtlGroup
        #region GetNewLaborDtlGroup
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void GetNewLaborDtlGroup(ref LaborTableset ds, string employeeNum)
        {
            CurrentFullTableset = ds;

            ttLaborDtlGroup = (LaborDtlGroupRow)InnerGetNew(
                ds.LaborDtlGroup,
                (LaborDtlGroupRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.EmployeeNum = employeeNum;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewLaborDtlGroup

        #region Events
        partial void LaborDtlGroupAfterCreate();
        partial void LaborDtlGroupAfterDelete();
        partial void LaborDtlGroupAfterGetNew();
        partial void LaborDtlGroupAfterGetRows();
        partial void LaborDtlGroupAfterUpdate();
        partial void LaborDtlGroupBeforeBI();
        partial void LaborDtlGroupBeforeCreate();
        partial void LaborDtlGroupBeforeDelete();
        partial void LaborDtlGroupBeforeGetNew();
        partial void LaborDtlGroupBeforeUpdate();
        partial void LaborDtlGroupSetDefaults(LaborDtlGroupRow row);
        #endregion Events

        #endregion Table LaborDtlGroup
        #endregion Table Specific Methods

        #region DataSet Methods
        #region DeleteByID
        /// <summary>
        /// Deletes a row given its ID.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void DeleteByID(int laborHedSeq)
        {
            var dbRow = FindFirstLaborHedByZKey(Session.CompanyID, laborHedSeq);

            OnDeleteByID("LaborHed", dbRow);
        }
        #endregion DeleteByID

        #region GetByID
        /// <summary>
        /// Returns a DataSet given the primary key.
        /// </summary>
        /// <returns>The DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        [Ice.Hosting.Http.HttpGet]
        public LaborTableset GetByID(int laborHedSeq)
        {
            CurrentFullTableset = new LaborTableset();
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Company", CallContext.Session.CompanyID);
            parameters.Add("LaborHedSeq", laborHedSeq);

            InnerGetByID(Db, 0, 0, out bool morePages, CurrentFullTableset, parameters);
            return CurrentFullTableset;
        }
        #endregion GetByID

        #region OnBeforeGetByID
        /// <summary>
        /// Invokes the BeforeBOGetByID method with appropriate parameters.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        protected override void OnBeforeGetByID(LaborTableset ds, IEnumerable<KeyValuePair<string, object>> queryParameters)
        {
            BeforeBOGetByID(
                (int)queryParameters.ElementAt(1).Value //laborHedSeq
            );
        }
        #endregion OnBeforeGetByID

        #region GetList
        /// <summary>
        /// Returns a list of rows that satisfy the where clause.
        /// </summary>
        /// <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
        /// <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
        /// <param name="absolutePage">Page of rows to return.</param>
        /// <param name="morePages">Whether there are more pages of rows available.</param>
        /// <returns>The list DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        [Ice.Hosting.Http.HttpGet]
        public LaborHedListTableset GetList(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            CurrentListTableset = new LaborHedListTableset();
            InnerGetList(Db, whereClause, pageSize, absolutePage, CurrentListTableset, out morePages);
            return CurrentListTableset;
        }
        #endregion GetList

        #region GetRows
        /// <summary>
        /// Returns a dataset containing all rows that satisfy the where clauses.
        /// </summary>
        /// <returns>The full DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        [Ice.Hosting.Http.HttpGet]
        public LaborTableset GetRows(string whereClauseLaborHed, string whereClauseLaborDtl, string whereClauseLaborDtlAttch, string whereClauseLaborDtlAction, string whereClauseLaborDtlComment, string whereClauseLaborEquip, string whereClauseLaborPart, string whereClauseLbrScrapSerialNumbers, string whereClauseLaborDtlGroup, string whereClauseSelectedSerialNumbers, string whereClauseSNFormat, string whereClauseTimeWeeklyView, string whereClauseTimeWorkHours, int pageSize, int absolutePage, out bool morePages)
        {
            CurrentFullTableset = new LaborTableset();
            Dictionary<IIceTable, string> tableWhereClauses = new Dictionary<IIceTable, string>();
            tableWhereClauses.Add(CurrentFullTableset.LaborHed, whereClauseLaborHed);
            tableWhereClauses.Add(CurrentFullTableset.LaborDtl, whereClauseLaborDtl);
            tableWhereClauses.Add(CurrentFullTableset.LaborDtlAttch, whereClauseLaborDtlAttch);
            tableWhereClauses.Add(CurrentFullTableset.LaborDtlAction, whereClauseLaborDtlAction);
            tableWhereClauses.Add(CurrentFullTableset.LaborDtlComment, whereClauseLaborDtlComment);
            tableWhereClauses.Add(CurrentFullTableset.LaborEquip, whereClauseLaborEquip);
            tableWhereClauses.Add(CurrentFullTableset.LaborPart, whereClauseLaborPart);
            tableWhereClauses.Add(CurrentFullTableset.LbrScrapSerialNumbers, whereClauseLbrScrapSerialNumbers);
            tableWhereClauses.Add(CurrentFullTableset.LaborDtlGroup, whereClauseLaborDtlGroup);
            tableWhereClauses.Add(CurrentFullTableset.SelectedSerialNumbers, whereClauseSelectedSerialNumbers);
            tableWhereClauses.Add(CurrentFullTableset.SNFormat, whereClauseSNFormat);
            tableWhereClauses.Add(CurrentFullTableset.TimeWeeklyView, whereClauseTimeWeeklyView);
            tableWhereClauses.Add(CurrentFullTableset.TimeWorkHours, whereClauseTimeWorkHours);

            InnerGetRows(Db, pageSize, absolutePage, out morePages, CurrentFullTableset, tableWhereClauses);
            return CurrentFullTableset;
        }
        #endregion GetRows

        #region SysRowID methods

        /// <summary>
        /// </summary>
        [Ice.Hosting.Http.HttpGet]
        public LaborTableset GetBySysRowID(Guid id)
        {
            var whereClause = string.Format("SysRowID = '{0}'", id);

            bool morePages;
            var ds = GetRows(whereClause, "", "", "", "", "", "", "", "", "", "", "", "", 0, 0, out morePages);

            if (ds.Tables[0].Count <= 0)
            {
                throw new Ice.Common.RecordNotFoundException("Record not found.", ds.Tables[0].TableName, null);
            }

            return ds;
        }

        /// <summary>
        /// </summary>
        [Ice.Hosting.Http.HttpGet]
        public LaborTableset GetBySysRowIDs(System.Collections.Generic.List<Guid> ids)
        {
            if (ids.Count == 0)
                throw new ArgumentException("No IDs sent.");

            var whereClause = new System.Text.StringBuilder("SysRowID in (");
            bool first = true;
            foreach (var id in ids)
            {
                if (first)
                    first = false;
                else
                    whereClause.Append(", ");

                whereClause.AppendFormat("'{0}'", id);
            }

            whereClause.Append(")");

            bool morePages;
            return GetRows(whereClause.ToString(), "", "", "", "", "", "", "", "", "", "", "", "", 0, 0, out morePages);
        }

        #endregion

        #region Update
        /// <summary>
        /// Commits the DataSet changes to the data store.
        /// </summary>
        /// <param name="ds">The full DataSet.</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        public void Update(ref LaborTableset ds)
        {
            this.InnerUpdate<ILaborUpdater>(Db, ds);

            ds = MainTableSet;
        }
        #endregion Update

        #region UpdateExt
        /// <summary>
        /// Apply input data to service by calling GetByID/GetNew/Update methods.
        /// </summary>
        /// <returns>The dataset with list of errors occurred during update process.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
        [Ice.Services.MethodGenerationOptions(SparseCopy = true)]
        public BOUpdErrorTableset UpdateExt(ref UpdExtLaborTableset ds, bool continueProcessingOnError, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            errorsOccurred = false;
            var errors = new BOUpdErrorTableset();

            if (!OnUpdateExtMultipleHeadersAllowed(ds))
            {
                if (ds.LaborHed.Where(n => n.LaborHedSeq == 0).Count() > 1)
                {
                    errorsOccurred = true;
                    CreateValidationErrorForUpdateExt(errors, UpdateExtValidationErrorType.BusinessObjectDoesNotSupportMultipleNew, ds.LaborHed.TableName);
                    return errors;
                }
            }
            var returnDs = new UpdExtLaborTableset();
            var initializedTableset = new UpdExtLaborTableset();

            ds = (UpdExtLaborTableset)InnerUpdateExt(ds, returnDs, initializedTableset, continueProcessingOnError, rollbackParentOnChildError, errors, out errorsOccurred);
            return errors;
        }

        /// <inheritdoc />
        protected override IDisposable GetServiceForUpdateExt()
        {
            return Ice.Assemblies.ServiceRenderer.GetService<LaborSvcContract>(this.Db);
        }

        /// <inheritdoc />
        protected override LaborTableset GetByIdForUpdateExt(object serviceObject, IceRow originalParentRecord)
        {
            var service = (LaborSvcContract)serviceObject;
            return service?.GetByID((int)originalParentRecord["LaborHedSeq"]);
        }

        /// <inheritdoc />
        protected override void GetNewForUpdateExt(object serviceObject, string tableName, ref LaborTableset workingTs, IceRow currentRecord, IceRow updatedParentRecord)
        {
            var service = (LaborSvcContract)serviceObject;
            switch (tableName)
            {
                case "LaborHed":
                    service?.GetNewLaborHed(ref workingTs
                    );
                    break;
                case "LaborDtl":
                    service?.GetNewLaborDtl(ref workingTs
                     , (int)updatedParentRecord["LaborHedSeq"]
                    );
                    break;
                case "LaborDtlAttch":
                    service?.GetNewLaborDtlAttch(ref workingTs
                     , (int)updatedParentRecord["LaborHedSeq"], (int)updatedParentRecord["LaborDtlSeq"]
                    );
                    break;
                case "LaborDtlAction":
                    service?.GetNewLaborDtlAction(ref workingTs
                     , (int)updatedParentRecord["LaborHedSeq"], (int)updatedParentRecord["LaborDtlSeq"]
                    );
                    break;
                case "LaborDtlComment":
                    service?.GetNewLaborDtlComment(ref workingTs
                     , (int)updatedParentRecord["LaborHedSeq"], (int)updatedParentRecord["LaborDtlSeq"]
                    );
                    break;
                case "LaborEquip":
                    service?.GetNewLaborEquip(ref workingTs
                     , (int)updatedParentRecord["LaborHedSeq"], (int)updatedParentRecord["LaborDtlSeq"]
                    );
                    break;
                case "LaborPart":
                    service?.GetNewLaborPart(ref workingTs
                     , (int)updatedParentRecord["LaborHedSeq"], (int)updatedParentRecord["LaborDtlSeq"]
                    );
                    break;
                case "LaborDtlGroup":
                    service?.GetNewLaborDtlGroup(ref workingTs
                     , (string)currentRecord["EmployeeNum"]
                    );
                    break;
            }
        }

        /// <inheritdoc />
        protected override void UpdateForUpdateExt(object serviceObject, ref LaborTableset workingTs)
        {
            var service = (LaborSvcContract)serviceObject;
            service?.Update(ref workingTs);
        }

        /// <inheritdoc />
        protected override List<IceRow> GetChildRowsForUpdateExt(string tableName, IceRow originalParentRecord, Ice.Tableset.TableRelation parentToChildRelation)
        {
            var rows = new List<IceRow>();
            switch (tableName)
            {
                case "LaborHed":
                    rows = GetChildRowsForUpdateExt<LaborHedRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "LaborDtl":
                    rows = GetChildRowsForUpdateExt<LaborDtlRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "LaborDtlAttch":
                    rows = GetChildRowsForUpdateExt<LaborDtlAttchRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "LaborDtlAction":
                    rows = GetChildRowsForUpdateExt<LaborDtlActionRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "LaborDtlComment":
                    rows = GetChildRowsForUpdateExt<LaborDtlCommentRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "LaborEquip":
                    rows = GetChildRowsForUpdateExt<LaborEquipRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "LaborPart":
                    rows = GetChildRowsForUpdateExt<LaborPartRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "LbrScrapSerialNumbers":
                    rows = GetChildRowsForUpdateExt<LbrScrapSerialNumbersRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "LaborDtlGroup":
                    rows = GetChildRowsForUpdateExt<LaborDtlGroupRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "SelectedSerialNumbers":
                    rows = GetChildRowsForUpdateExt<SelectedSerialNumbersRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "SNFormat":
                    rows = GetChildRowsForUpdateExt<SNFormatRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "TimeWeeklyView":
                    rows = GetChildRowsForUpdateExt<TimeWeeklyViewRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "TimeWorkHours":
                    rows = GetChildRowsForUpdateExt<TimeWorkHoursRow>(parentToChildRelation, originalParentRecord);
                    break;
            }
            return rows;
        }

        #endregion UpdateExt
        #endregion DataSet Methods

        #region Attachments

        partial void LaborDtlAttchBeforeGetNew()
        {
            Ice.Services.Attachment.AssertIsLicensed();
        }

        partial void LaborDtlAttchBeforeUpdate()
        {
            var parent = (from r in Db.LaborDtl where r.Company == ttLaborDtlAttch.Company && r.LaborHedSeq == ttLaborDtlAttch.LaborHedSeq && r.LaborDtlSeq == ttLaborDtlAttch.LaborDtlSeq select r).FirstOrDefault();

            Ice.Services.Attachment.BeforeUpdate(Db, LaborDtlAttch, parent, ttLaborDtlAttch, ttLaborDtlAttch.Company, ttLaborDtlAttch.LaborHedSeq.ToString(), ttLaborDtlAttch.LaborDtlSeq.ToString(), "", "", "", "");
        }

        #endregion
    }
}
