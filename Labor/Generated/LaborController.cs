//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

#pragma warning disable CS1572
#pragma warning disable CS1573
#pragma warning disable CS1591
#pragma warning disable CS1734

using Epicor.Cloud;
using Erp.Contracts;
using Erp.Models.BO.Labor;
using Erp.Tablesets;
using Ice.Hosting.AspNetCore.Controller;
using Microsoft.AspNetCore.Mvc;

namespace Erp.Controllers.BO
{
    /// <summary>
    /// ASP.NET Core API controller for the Erp.BO.Labor service.
    /// </summary>
    [Route("api/rpc/Erp.BO.[controller]")]
    [ApiController]
    public class LaborController : ApiControllerBase
    {
        #region Initialize

        private LaborSvcContract ___service;

        /// <summary>
        /// Initializes a new instance of the <see cref="LaborController"/> class.
        /// </summary>
        public LaborController(IOperationBoundClassProvider<LaborSvcContract> provider) : base(provider.ServiceAsOperationBoundClass)
        {
            this.___service = provider.Service;
        }

        #endregion

        /// <summary>
        /// This proc will return the whereclause for the role code combo
        /// Customers
        /// </summary>
        [Route("BuildJobOperPrjRoleList")]
        [HttpPost]
        public BuildJobOperPrjRoleList_OutputModel BuildJobOperPrjRoleList(BuildJobOperPrjRoleList_InputModel model)
        {
            string whereClause;

            var ___result = ___service.BuildJobOperPrjRoleList(model.IpJobNum, model.IpAssemblySeq, model.IpOprSeq, model.IpEmpID, out whereClause);

            return new BuildJobOperPrjRoleList_OutputModel
            {
                WhereClause = whereClause,
                _Return = ___result
            };
        }

        /// <summary>
        /// This method should call when EquipID is changed
        /// </summary>
        [Route("ChangeEquipID")]
        [HttpPost]
        public ChangeEquipID_OutputModel ChangeEquipID(ChangeEquipID_InputModel model)
        {
            ___service.ChangeEquipID(model.EquipID, ref model.Ds);

            return new ChangeEquipID_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method clears the JobNumber and Quantity fields when the LaborType changes to Indirect
        /// leaves the values as is if changed between Production and Setup
        /// </summary>
        [Route("ChangeIndirectCode")]
        [HttpPost]
        public ChangeIndirectCode_OutputModel ChangeIndirectCode(ChangeIndirectCode_InputModel model)
        {
            ___service.ChangeIndirectCode(ref model.Ds);

            return new ChangeIndirectCode_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method clears the JobNumber and Quantity fields when the LaborType changes to Indirect
        /// leaves the values as is if changed between Production and Setup
        /// </summary>
        [Route("ChangeLaborType")]
        [HttpPost]
        public ChangeLaborType_OutputModel ChangeLaborType(ChangeLaborType_InputModel model)
        {
            ___service.ChangeLaborType(ref model.Ds);

            return new ChangeLaborType_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Main logic from ChangeResourceId to validate the resource id assigned to a Job.
        /// This method does not depend on a tableset or LaborDtl record.
        /// </summary>
        [Route("CheckResourceId")]
        [HttpPost]
        public CheckResourceId_OutputModel CheckResourceId(CheckResourceId_InputModel model)
        {
            string pcMsg;

            ___service.CheckResourceId(model.ResourceGrpId, model.ProposedResId, out pcMsg);

            return new CheckResourceId_OutputModel
            {
                PcMsg = pcMsg
            };
        }

        /// <summary>
        /// For use with MES (ShopFloor) only.
        /// This method checks the Resource Group of the proposed Resource, and if it
        /// is different than the current Resource Group, provides a warning question
        /// suitable for presenting to the user.
        /// The UI code should place the user's answer to the question in the
        /// ttLaborDtl.OkToChangeResourceGrpID.
        /// This method should be called prior to calling the DefaultResourceID method.
        /// </summary>
        [Route("ChangeResourceId")]
        [HttpPost]
        public ChangeResourceId_OutputModel ChangeResourceId(ChangeResourceId_InputModel model)
        {
            string pcMsg;

            ___service.ChangeResourceId(ref model.Ds, model.PcResourceID, out pcMsg);

            return new ChangeResourceId_OutputModel
            {
                Ds = model.Ds,
                PcMsg = pcMsg
            };
        }

        /// <summary>
        /// This method checks if the current employee is already working on a Job/Asm/Opr/Resource combination
        /// If he/she is already working on it, the opMessage will be populated with an error message
        /// </summary>
        [Route("CheckEmployeeActivity")]
        [HttpPost]
        public CheckEmployeeActivity_OutputModel CheckEmployeeActivity(CheckEmployeeActivity_InputModel model)
        {
            string opMessage;

            ___service.CheckEmployeeActivity(model.IpEmpID, model.IpLaborHedSeq, model.IpJobNum, model.IpAsmSeq, model.IpOprSeq, model.IpResourceID, out opMessage);

            return new CheckEmployeeActivity_OutputModel
            {
                OpMessage = opMessage
            };
        }

        /// <summary>
        /// Check if there are NonConformance records, if they exists it will ask the user for his approval to delete them
        /// </summary>
        [Route("CheckNonConformance")]
        [HttpPost]
        public CheckNonConformance_OutputModel CheckNonConformance(CheckNonConformance_InputModel model)
        {
            string pcMsg;

            ___service.CheckNonConformance(model.JobNum, model.LaborHedSeq, model.LaborDtlSeq, out pcMsg);

            return new CheckNonConformance_OutputModel
            {
                PcMsg = pcMsg
            };
        }

        /// <summary>
        /// Performs all First Article Validations
        /// </summary>
        [Route("CheckFirstArticleWarning")]
        [HttpPost]
        public CheckFirstArticleWarning_OutputModel CheckFirstArticleWarning(CheckFirstArticleWarning_InputModel model)
        {
            string pcMsg;

            ___service.CheckFirstArticleWarning(ref model.Ds, out pcMsg);

            return new CheckFirstArticleWarning_OutputModel
            {
                Ds = model.Ds,
                PcMsg = pcMsg
            };
        }

        /// <summary>
        /// This method validates if InspResults has been entered when the Inspection Data is allowed for the current OprSeq.
        /// </summary>
        [Route("CheckInspResults")]
        [HttpPost]
        public CheckInspResults_OutputModel CheckInspResults(CheckInspResults_InputModel model)
        {
            bool inspectionOK;

            ___service.CheckInspResults(model.IpJobNum, model.IpAssemblySeq, model.IpOprSeq, out inspectionOK);

            return new CheckInspResults_OutputModel
            {
                InspectionOK = inspectionOK
            };
        }

        /// <summary>
        /// This method checks to see if the new resource is in the current resource group.
        /// This needs to be run right before the DefaultResourceID.  If the user answers
        /// okay then the group will be changed in the DefaultResourceID method.
        /// </summary>
        [Route("CheckResourceGroup")]
        [HttpPost]
        public CheckResourceGroup_OutputModel CheckResourceGroup(CheckResourceGroup_InputModel model)
        {
            string vMessage;

            ___service.CheckResourceGroup(ref model.Ds, model.ProposedResourceID, out vMessage);

            return new CheckResourceGroup_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// This method runs the labor warning routine and returns any warnings the user needs
        /// to be aware of.  This needs to be run right before the update method.  If the user answers
        /// okay to all of the questions, then the update method can be run.  Otherwise the labor record
        /// needs to be corrected
        /// </summary>
        [Route("CheckWarnings")]
        [HttpPost]
        public CheckWarnings_OutputModel CheckWarnings(CheckWarnings_InputModel model)
        {
            string vMessage;

            ___service.CheckWarnings(ref model.Ds, out vMessage);

            return new CheckWarnings_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// </summary>
        [Route("chkReportQtyShopWarn")]
        [HttpPost]
        public chkReportQtyShopWarn_OutputModel chkReportQtyShopWarn(chkReportQtyShopWarn_InputModel model)
        {
            string pcMsg;

            ___service.chkReportQtyShopWarn(model.Company, model.JobNum, model.AssemblySeq, model.OprSeq, model.EmpID, model.ActiveTrans, out pcMsg);

            return new chkReportQtyShopWarn_OutputModel
            {
                PcMsg = pcMsg
            };
        }

        /// <summary>
        /// Method to copy the vales from one Labor record to a new Labor record.
        /// </summary>
        [Route("CopyLaborDetail")]
        [HttpPost]
        public CopyLaborDetail_OutputModel CopyLaborDetail(CopyLaborDetail_InputModel model)
        {
            string cMessageText;

            ___service.CopyLaborDetail(ref model.Ds, out cMessageText);

            return new CopyLaborDetail_OutputModel
            {
                Ds = model.Ds,
                CMessageText = cMessageText
            };
        }

        /// <summary>
        /// Method to copy the vales from one Weekly Time record to a new Weekly Time record.
        /// </summary>
        [Route("CopyTimeWeeklyView")]
        [HttpPost]
        public CopyTimeWeeklyView_OutputModel CopyTimeWeeklyView(CopyTimeWeeklyView_InputModel model)
        {
            string cMessageText;

            ___service.CopyTimeWeeklyView(ref model.Ds, out cMessageText);

            return new CopyTimeWeeklyView_OutputModel
            {
                Ds = model.Ds,
                CMessageText = cMessageText
            };
        }

        /// <summary>
        /// This method sets dataset fields when the AssemblySeq field changes
        /// </summary>
        [Route("DefaultAssemblySeq")]
        [HttpPost]
        public DefaultAssemblySeq_OutputModel DefaultAssemblySeq(DefaultAssemblySeq_InputModel model)
        {
            ___service.DefaultAssemblySeq(ref model.Ds, model.AssemblySeq);

            return new DefaultAssemblySeq_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method updates the dataset after complete flag is set
        /// </summary>
        [Route("DefaultComplete")]
        [HttpPost]
        public DefaultComplete_OutputModel DefaultComplete(DefaultComplete_InputModel model)
        {
            string vMessage;

            ___service.DefaultComplete(ref model.Ds, model.Cmplete, out vMessage);

            return new DefaultComplete_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// This method updates the clock in and clock out dates for the LaborHed and LaborDtl
        /// tables when the payroll date has changed.
        /// </summary>
        [Route("DefaultDate")]
        [HttpPost]
        public DefaultDate_OutputModel DefaultDate(DefaultDate_InputModel model)
        {
            ___service.DefaultDate(ref model.Ds, model.PayrollDate);

            return new DefaultDate_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method defaults fields when the discrepancy reason code field changes.
        /// Also checks for any warnings the user needs to be aware of
        /// </summary>
        [Route("DefaultDiscrpRsnCode")]
        [HttpPost]
        public DefaultDiscrpRsnCode_OutputModel DefaultDiscrpRsnCode(DefaultDiscrpRsnCode_InputModel model)
        {
            ___service.DefaultDiscrpRsnCode(ref model.Ds, model.ProposedDiscrpRsnCode);

            return new DefaultDiscrpRsnCode_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method defaults fields when the discrepancy reason code field changes.
        /// Also checks for any warnings the user needs to be aware of
        /// </summary>
        [Route("DefaultReworkReasonCode")]
        [HttpPost]
        public DefaultReworkReasonCode_OutputModel DefaultReworkReasonCode(DefaultReworkReasonCode_InputModel model)
        {
            ___service.DefaultReworkReasonCode(ref model.Ds, model.ProposedReworkReasonCode);

            return new DefaultReworkReasonCode_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method updates the hours when a time field changes
        /// </summary>
        [Route("DefaultDtlTime")]
        [HttpPost]
        public DefaultDtlTime_OutputModel DefaultDtlTime(DefaultDtlTime_InputModel model)
        {
            ___service.DefaultDtlTime(ref model.Ds);

            return new DefaultDtlTime_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method defaults the expense code when the indirect code has changed
        /// </summary>
        [Route("DefaultIndirect")]
        [HttpPost]
        public DefaultIndirect_OutputModel DefaultIndirect(DefaultIndirect_InputModel model)
        {
            ___service.DefaultIndirect(ref model.Ds, model.IndirectCode);

            return new DefaultIndirect_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method will take the selected rows from the work queue and process them in one server call.
        /// GetNewLaborDtlOnSelectForWork is called for each work queue row, after that SelectForWork will be called filling required information in all the added LaborDtl rows
        /// If there is any warning that needs user input the method will finish before calling Update and the prompts will be shown to the user, after the UI will call Update to finish.
        /// </summary>
        [Route("SelectAllForWork")]
        [HttpPost]
        public SelectAllForWork_OutputModel SelectAllForWork(SelectAllForWork_InputModel model)
        {
            string warningsMsg;

            ___service.SelectAllForWork(ref model.LaborDS, model.SelectedWorkQueueRows, model.EmpID, model.ResourceGrpID, model.ResourceID, model.LaborType, out warningsMsg);

            return new SelectAllForWork_OutputModel
            {
                LaborDS = model.LaborDS,
                WarningsMsg = warningsMsg
            };
        }

        /// <summary>
        /// This method defaults dataset fields when the JobNum field changes
        /// </summary>
        [Route("DefaultJobNum")]
        [HttpPost]
        public DefaultJobNum_OutputModel DefaultJobNum(DefaultJobNum_InputModel model)
        {
            ___service.DefaultJobNum(ref model.Ds, model.JobNum);

            return new DefaultJobNum_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method updates the tot hours display field when the labor hours clock in/out
        /// time changes
        /// </summary>
        [Route("DefaultLaborHrs")]
        [HttpPost]
        public DefaultLaborHrs_OutputModel DefaultLaborHrs(DefaultLaborHrs_InputModel model)
        {
            ___service.DefaultLaborHrs(ref model.Ds, model.LaborHrs);

            return new DefaultLaborHrs_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method defaults fields when the labor qty fields changes.  Also checks
        /// for any labor warnings the user needs to be aware of
        /// </summary>
        [Route("DefaultLaborQty")]
        [HttpPost]
        public DefaultLaborQty_OutputModel DefaultLaborQty(DefaultLaborQty_InputModel model)
        {
            string vMessage;

            ___service.DefaultLaborQty(ref model.Ds, model.LaborQty, out vMessage);

            return new DefaultLaborQty_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// This method defaults fields when the labor qty fields changes.  Also checks
        /// for any labor warnings the user needs to be aware of
        /// </summary>
        [Route("DefaultNonConformanceQty")]
        [HttpPost]
        public DefaultNonConformanceQty_OutputModel DefaultNonConformanceQty(DefaultNonConformanceQty_InputModel model)
        {
            ___service.DefaultNonConformanceQty(ref model.Ds, model.NonConformanceQty);

            return new DefaultNonConformanceQty_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method defaults fields when the scrap qty field changes.  Also checks
        /// for any labor warnings the user needs to be aware of
        /// </summary>
        [Route("VerifyScrapQty")]
        [HttpPost]
        public VerifyScrapQty_OutputModel VerifyScrapQty(VerifyScrapQty_InputModel model)
        {
            string vMessage;

            ___service.VerifyScrapQty(ref model.Ds, model.ScrapQty, out vMessage);

            return new VerifyScrapQty_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// This method sets Complete checkbox when part qty field changes in End Activity.
        /// </summary>
        [Route("OnChangePartQty")]
        [HttpPost]
        public OnChangePartQty_OutputModel OnChangePartQty(OnChangePartQty_InputModel model)
        {
            string vMessage;

            ___service.OnChangePartQty(ref model.Ds, model.PartQty, model.SysRowID, out vMessage);

            return new OnChangePartQty_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// This method defaults dataset fields when the LaborType field changes.
        /// </summary>
        [Route("DefaultLaborType")]
        [HttpPost]
        public DefaultLaborType_OutputModel DefaultLaborType(DefaultLaborType_InputModel model)
        {
            ___service.DefaultLaborType(ref model.Ds, model.IpLaborType);

            return new DefaultLaborType_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method defaults the Lunch Time fields when the Lunch Break field changes.
        /// </summary>
        [Route("DefaultLunchBreak")]
        [HttpPost]
        public DefaultLunchBreak_OutputModel DefaultLunchBreak(DefaultLunchBreak_InputModel model)
        {
            ___service.DefaultLunchBreak(ref model.Ds);

            return new DefaultLunchBreak_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method updates the dataset after next operation seq is set
        /// </summary>
        [Route("DefaultNextOprSeq")]
        [HttpPost]
        public DefaultNextOprSeq_OutputModel DefaultNextOprSeq(DefaultNextOprSeq_InputModel model)
        {
            ___service.DefaultNextOprSeq(ref model.Ds, model.ProposedNextOprSeq);

            return new DefaultNextOprSeq_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method checks for any warnings user needs to know on change of OpCode
        /// </summary>
        [Route("DefaultOpCode")]
        [HttpPost]
        public DefaultOpCode_OutputModel DefaultOpCode(DefaultOpCode_InputModel model)
        {
            string vMessage;

            ___service.DefaultOpCode(ref model.Ds, model.OpCode, out vMessage);

            return new DefaultOpCode_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// This method defaults fields when Operation sequence changes.  Also returns any
        /// warnings user needs to know.
        /// </summary>
        [Route("DefaultOprSeq")]
        [HttpPost]
        public DefaultOprSeq_OutputModel DefaultOprSeq(DefaultOprSeq_InputModel model)
        {
            string vMessage;

            ___service.DefaultOprSeq(ref model.Ds, model.OprSeq, out vMessage);

            return new DefaultOprSeq_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// Call GetNewLaborDtl base method then assign selected values and default values for MES/Work Queue/Select for Work.
        /// ResourceID is defaulted the same way than for MES- Start Production Activity. ResourceID must be required only if Company Configuration MachinePrompt is true, otherwise is optional.
        /// </summary>
        [Route("GetNewLaborDtlOnSelectForWork")]
        [HttpPost]
        public GetNewLaborDtlOnSelectForWork_OutputModel GetNewLaborDtlOnSelectForWork(GetNewLaborDtlOnSelectForWork_InputModel model)
        {
            bool bMachinePrompt;

            ___service.GetNewLaborDtlOnSelectForWork(ref model.Ds, model.LaborHedSeq, model.SJobNum, model.IAssemblySeq, model.IOprSeq, model.SResourceGrpID, model.SetupOrProd, out bMachinePrompt);

            return new GetNewLaborDtlOnSelectForWork_OutputModel
            {
                Ds = model.Ds,
                BMachinePrompt = bMachinePrompt
            };
        }

        /// <summary>
        /// This method defaults dataset fields when the PhaseID field changes.
        /// </summary>
        [Route("DefaultPhaseID")]
        [HttpPost]
        public DefaultPhaseID_OutputModel DefaultPhaseID(DefaultPhaseID_InputModel model)
        {
            ___service.DefaultPhaseID(ref model.Ds, model.IpPhaseID);

            return new DefaultPhaseID_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method defaults dataset fields when the PhaseOprSeq field changes.
        /// </summary>
        [Route("DefaultPhaseOprSeq")]
        [HttpPost]
        public DefaultPhaseOprSeq_OutputModel DefaultPhaseOprSeq(DefaultPhaseOprSeq_InputModel model)
        {
            string vMessage;

            ___service.DefaultPhaseOprSeq(ref model.Ds, model.IpPhaseOprSeq, out vMessage);

            return new DefaultPhaseOprSeq_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// This method defaults dataset fields when the ProjectID field changes.
        /// </summary>
        [Route("DefaultProjectID")]
        [HttpPost]
        public DefaultProjectID_OutputModel DefaultProjectID(DefaultProjectID_InputModel model)
        {
            ___service.DefaultProjectID(ref model.Ds, model.IpProjectID);

            return new DefaultProjectID_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method updates dataset fields when the ResourceID field changes.
        /// </summary>
        [Route("DefaultResourceID")]
        [HttpPost]
        public DefaultResourceID_OutputModel DefaultResourceID(DefaultResourceID_InputModel model)
        {
            ___service.DefaultResourceID(ref model.Ds, model.ProposedResourceID);

            return new DefaultResourceID_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method defaults dataset fields when the RoleCd field changes.
        /// </summary>
        [Route("DefaultRoleCd")]
        [HttpPost]
        public DefaultRoleCd_OutputModel DefaultRoleCd(DefaultRoleCd_InputModel model)
        {
            ___service.DefaultRoleCd(ref model.Ds, model.IpRoleCd);

            return new DefaultRoleCd_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method defaults fields when the scrap reason code fields changes.  Also checks
        /// for any labor warnings the user needs to be aware of
        /// </summary>
        [Route("DefaultScrapReasonCode")]
        [HttpPost]
        public DefaultScrapReasonCode_OutputModel DefaultScrapReasonCode(DefaultScrapReasonCode_InputModel model)
        {
            string vMessage;

            ___service.DefaultScrapReasonCode(ref model.Ds, model.ProposedScrapReasonCode, out vMessage);

            return new DefaultScrapReasonCode_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// This method validates and reassigns the setup percent complete field.
        /// </summary>
        [Route("DefaultSetupPctComplete")]
        [HttpPost]
        public DefaultSetupPctComplete_OutputModel DefaultSetupPctComplete(DefaultSetupPctComplete_InputModel model)
        {
            ___service.DefaultSetupPctComplete(ref model.Ds, model.PercentComplete);

            return new DefaultSetupPctComplete_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method updates clock in/out and lunch in/out fields after shift field changes
        /// </summary>
        [Route("DefaultShift")]
        [HttpPost]
        public DefaultShift_OutputModel DefaultShift(DefaultShift_InputModel model)
        {
            ___service.DefaultShift(ref model.Ds, model.Shift);

            return new DefaultShift_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method updates time and pay hours when a time field changes
        /// </summary>
        [Route("DefaultTime")]
        [HttpPost]
        public DefaultTime_OutputModel DefaultTime(DefaultTime_InputModel model)
        {
            ___service.DefaultTime(ref model.Ds, model.CFieldName, model.TimeValue);

            return new DefaultTime_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method defaults dataset fields when the TimeTypCd field changes.
        /// </summary>
        [Route("DefaultTimeTypCd")]
        [HttpPost]
        public DefaultTimeTypCd_OutputModel DefaultTimeTypCd(DefaultTimeTypCd_InputModel model)
        {
            string vMessage;

            ___service.DefaultTimeTypCd(ref model.Ds, model.IpTimeTypCd, out vMessage);

            return new DefaultTimeTypCd_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// This method updates dataset fields when the ResourceGroup field changes.  Also checks
        /// for any warning the user needs to know
        /// </summary>
        [Route("DefaultWCCode")]
        [HttpPost]
        public DefaultWCCode_OutputModel DefaultWCCode(DefaultWCCode_InputModel model)
        {
            string vMessage;

            ___service.DefaultWCCode(ref model.Ds, model.WcCode, out vMessage);

            return new DefaultWCCode_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// This method delete records related to HCM PTO.
        /// </summary>
        [Route("DeleteLaborDtl")]
        [HttpPost]
        public DeleteLaborDtl_OutputModel DeleteLaborDtl(DeleteLaborDtl_InputModel model)
        {
            string vMessage;

            var ___result = ___service.DeleteLaborDtl(model.LaborHedSeq, model.LaborDtlSeq, model.CallFrom, out vMessage);

            return new DeleteLaborDtl_OutputModel
            {
                VMessage = vMessage,
                _Return = ___result
            };
        }

        /// <summary>
        /// Method to call to end an activity in Shop Floor.  This method will mark
        /// the EndActivity flag in LaborDtl so when the Update method is run, special
        /// end activity processing can occur.  It will also default values in other
        /// fields that apply to the end activity.  Before this method is called, the
        /// LaborDtl.RowMod value needs to be set to 'U'.
        /// </summary>
        [Route("EndActivity")]
        [HttpPost]
        public EndActivity_OutputModel EndActivity(EndActivity_InputModel model)
        {
            ___service.EndActivity(ref model.Ds);

            return new EndActivity_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method checks for any necessary labor warning when the complete flag is checked in MES End Activity
        /// </summary>
        [Route("EndActivityComplete")]
        [HttpPost]
        public EndActivityComplete_OutputModel EndActivityComplete(EndActivityComplete_InputModel model)
        {
            string vMessage;

            ___service.EndActivityComplete(ref model.Ds, model.Cmplete, out vMessage);

            return new EndActivityComplete_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// Method to retrieve the active Labor Details and header records by employee.
        /// </summary>
        [Route("GetActiveLaborDtl")]
        [HttpPost]
        public GetActiveLaborDtl_OutputModel GetActiveLaborDtl(GetActiveLaborDtl_InputModel model)
        {
            var ___result = ___service.GetActiveLaborDtl(model.EmployeeNum);

            return new GetActiveLaborDtl_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Method to Begin Downtime for Kinetic MES
        /// </summary>
        [Route("InitiateDowntime")]
        [HttpPost]
        public void InitiateDowntime(InitiateDowntime_InputModel model)
        {
            ___service.InitiateDowntime(model.EmployeeNum, model.IndirectCode, model.IndirectNote);
        }

        /// <summary>
        /// Method to End Downtime for Kinetic MES
        /// </summary>
        [Route("EndDowntime")]
        [HttpPost]
        public void EndDowntime(EndDowntime_InputModel model)
        {
            ___service.EndDowntime(model.EmployeeNum);
        }

        /// <summary>
        /// Method to call to retrieve the Labor dataset with just the header
        /// and a specific detail record.
        /// </summary>
        [Route("GetDetail")]
        [HttpPost]
        public GetDetail_OutputModel GetDetail(GetDetail_InputModel model)
        {
            var ___result = ___service.GetDetail(model.ILaborHedSeq, model.ILaborDtlSeq);

            return new GetDetail_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// This method gets the elapsed time from a start date-startTime until now
        /// </summary>
        [Route("getElapsedTime")]
        [HttpPost]
        public getElapsedTime_OutputModel getElapsedTime(getElapsedTime_InputModel model)
        {
            var ___result = ___service.getElapsedTime(model.StartDate, model.StartTime);

            return new getElapsedTime_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// This method is called to add a new labor detail without having a
        /// labor header record available
        /// </summary>
        [Route("GetNewLaborDtlNoHdr")]
        [HttpPost]
        public GetNewLaborDtlNoHdr_OutputModel GetNewLaborDtlNoHdr(GetNewLaborDtlNoHdr_InputModel model)
        {
            ___service.GetNewLaborDtlNoHdr(ref model.Ds, model.EmployeeNum, model.ShopFloor, model.ClockInDate, model.ClockInTime, model.ClockOutDate, model.ClockOutTime);

            return new GetNewLaborDtlNoHdr_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method is called to add a new labor detail without having a
        /// labor header record available
        /// </summary>
        [Route("GetNewLaborDtlWithHdr")]
        [HttpPost]
        public GetNewLaborDtlWithHdr_OutputModel GetNewLaborDtlWithHdr(GetNewLaborDtlWithHdr_InputModel model)
        {
            ___service.GetNewLaborDtlWithHdr(ref model.Ds, model.IpClockInDate, model.IpClockInTime, model.IpClockOutDate, model.IpClockOutTime, model.IpLaborHedSeq);

            return new GetNewLaborDtlWithHdr_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method to be used in place of GetNewLaborHed.  This method asks for an
        /// employee number to default fields based on the employee.
        /// </summary>
        [Route("GetNewLaborHed1")]
        [HttpPost]
        public GetNewLaborHed1_OutputModel GetNewLaborHed1(GetNewLaborHed1_InputModel model)
        {
            ___service.GetNewLaborHed1(ref model.Ds, model.EmployeeNum, model.ShopFloor, model.PayrollDate);

            return new GetNewLaborHed1_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Gets a new LbrScrapSerialNumbers record for current LaborDtl
        /// </summary>
        [Route("GetNewLbrScrapSerialNumbers")]
        [HttpPost]
        public GetNewLbrScrapSerialNumbers_OutputModel GetNewLbrScrapSerialNumbers(GetNewLbrScrapSerialNumbers_InputModel model)
        {
            ___service.GetNewLbrScrapSerialNumbers(ref model.Ds);

            return new GetNewLbrScrapSerialNumbers_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Gets a new TimeWeeklyView record for the current week
        /// </summary>
        [Route("GetNewTimeWeeklyView")]
        [HttpPost]
        public GetNewTimeWeeklyView_OutputModel GetNewTimeWeeklyView(GetNewTimeWeeklyView_InputModel model)
        {
            ___service.GetNewTimeWeeklyView(ref model.Ds, model.IpEmployeeNum, model.IpDateInWeek);

            return new GetNewTimeWeeklyView_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// </summary>
        [Route("GetRowsCalendarView")]
        [HttpPost]
        public GetRowsCalendarView_OutputModel GetRowsCalendarView(GetRowsCalendarView_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetRowsCalendarView(model.WhereClauseLaborHed, model.WhereClauseLaborDtl, model.WhereClauseLaborDtlAttach, model.WhereClauseLaborDtlAction, model.WhereClauseLaborDtlCom, model.WhereClauseLaborEquip, model.WhereClauseLaborPart, model.WhereClauseLbrScrapSerialNumbers, model.WhereClauseTimeWorkHours, model.WhereClauseTimeWeeklyView, model.WhereClauseLaborDtlGroup, model.WhereClauseSelectedSerialNumbers, model.WhereClauseSNFormat, model.PageSize, model.AbsolutePage, model.IpEmployeeNum, model.IpCalendarStartDate, model.IpCalendarEndDate, out morePages);

            return new GetRowsCalendarView_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// </summary>
        [Route("GetRowsWhoIsHere")]
        [HttpPost]
        public GetRowsWhoIsHere_OutputModel GetRowsWhoIsHere(GetRowsWhoIsHere_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetRowsWhoIsHere(model.WhereClauseLaborHed, model.WhereClauseLaborDtl, model.WhereClauseLaborDtlCom, model.WhereClauseLaborEquip, model.WhereClauseLaborPart, model.WhereClauseLbrScrapSerialNumbers, model.WhereClauseTimeWorkHours, model.WhereClauseTimeWeeklyView, model.WhereClauseLaborDtlGroup, model.WhereClauseSelectedSerialNumbers, model.WhereClauseSNFormat, model.PageSize, model.AbsolutePage, model.IpSupervisorID, out morePages);

            return new GetRowsWhoIsHere_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// Method to get the value UserFile.TERetrieveApproved
        /// </summary>
        [Route("GetTERetrieveApproved")]
        [HttpPost]
        public GetTERetrieveApproved_OutputModel GetTERetrieveApproved()
        {
            bool opTERetrieveApproved;

            ___service.GetTERetrieveApproved(out opTERetrieveApproved);

            return new GetTERetrieveApproved_OutputModel
            {
                OpTERetrieveApproved = opTERetrieveApproved
            };
        }

        /// <summary>
        /// Method to get retrieve by options
        /// </summary>
        [Route("GetTERetrieveByOption")]
        [HttpPost]
        public GetTERetrieveByOption_OutputModel GetTERetrieveByOption()
        {
            bool opTERetrieveByDay;
            bool opTERetrieveByWeek;
            bool opTERetrieveByMonth;

            ___service.GetTERetrieveByOption(out opTERetrieveByDay, out opTERetrieveByWeek, out opTERetrieveByMonth);

            return new GetTERetrieveByOption_OutputModel
            {
                OpTERetrieveByDay = opTERetrieveByDay,
                OpTERetrieveByWeek = opTERetrieveByWeek,
                OpTERetrieveByMonth = opTERetrieveByMonth
            };
        }

        /// <summary>
        /// Method to get the value UserFile.TERetrieveEntered
        /// </summary>
        [Route("GetTERetrieveEntered")]
        [HttpPost]
        public GetTERetrieveEntered_OutputModel GetTERetrieveEntered()
        {
            bool opTERetrieveEntered;

            ___service.GetTERetrieveEntered(out opTERetrieveEntered);

            return new GetTERetrieveEntered_OutputModel
            {
                OpTERetrieveEntered = opTERetrieveEntered
            };
        }

        /// <summary>
        /// Method to get the value UserFile.TERetrievePartiallyApproved
        /// </summary>
        [Route("GetTERetrievePartiallyApproved")]
        [HttpPost]
        public GetTERetrievePartiallyApproved_OutputModel GetTERetrievePartiallyApproved()
        {
            bool opTERetrievePartiallyApproved;

            ___service.GetTERetrievePartiallyApproved(out opTERetrievePartiallyApproved);

            return new GetTERetrievePartiallyApproved_OutputModel
            {
                OpTERetrievePartiallyApproved = opTERetrievePartiallyApproved
            };
        }

        /// <summary>
        /// Method to get the value UserFile.TERetrieveRejected
        /// </summary>
        [Route("GetTERetrieveRejected")]
        [HttpPost]
        public GetTERetrieveRejected_OutputModel GetTERetrieveRejected()
        {
            bool opTERetrieveRejected;

            ___service.GetTERetrieveRejected(out opTERetrieveRejected);

            return new GetTERetrieveRejected_OutputModel
            {
                OpTERetrieveRejected = opTERetrieveRejected
            };
        }

        /// <summary>
        /// Method to get the value UserFile.TERetrieveSubmitted
        /// </summary>
        [Route("GetTERetrieveSubmitted")]
        [HttpPost]
        public GetTERetrieveSubmitted_OutputModel GetTERetrieveSubmitted()
        {
            bool opTERetrieveSubmitted;

            ___service.GetTERetrieveSubmitted(out opTERetrieveSubmitted);

            return new GetTERetrieveSubmitted_OutputModel
            {
                OpTERetrieveSubmitted = opTERetrieveSubmitted
            };
        }

        /// <summary>
        /// Validate if an assembly is valid for a job. if not returns false,
        /// otherwise returns true.
        /// </summary>
        [Route("IsValidAssembly")]
        [HttpPost]
        public IsValidAssembly_OutputModel IsValidAssembly(IsValidAssembly_InputModel model)
        {
            bool plFound;

            ___service.IsValidAssembly(model.PcJobNum, model.PiAssemblySeq, out plFound);

            return new IsValidAssembly_OutputModel
            {
                PlFound = plFound
            };
        }

        /// <summary>
        /// Calls LaborDtlAfterGetRows for the passed in LaborDtl row
        /// </summary>
        [Route("LaborDtlAfterGetRowsWrapper")]
        [HttpPost]
        public LaborDtlAfterGetRowsWrapper_OutputModel LaborDtlAfterGetRowsWrapper(LaborDtlAfterGetRowsWrapper_InputModel model)
        {
            ___service.LaborDtlAfterGetRowsWrapper(ref model.LaborDtlRow);

            return new LaborDtlAfterGetRowsWrapper_OutputModel
            {
                LaborDtlRow = model.LaborDtlRow
            };
        }

        /// <summary>
        /// </summary>
        [Route("LaborRateCalc")]
        [HttpPost]
        public LaborRateCalc_OutputModel LaborRateCalc(LaborRateCalc_InputModel model)
        {
            ___service.LaborRateCalc(ref model.Ds);

            return new LaborRateCalc_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this procedure when LaborDtl.ClockInDate changes
        /// </summary>
        [Route("OnChangeClockInDate")]
        [HttpPost]
        public OnChangeClockInDate_OutputModel OnChangeClockInDate(OnChangeClockInDate_InputModel model)
        {
            ___service.OnChangeClockInDate(ref model.Ds, model.IpClockInDate);

            return new OnChangeClockInDate_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method validates the PCID
        /// </summary>
        [Route("OnChangePCID")]
        [HttpPost]
        public OnChangePCID_OutputModel OnChangePCID(OnChangePCID_InputModel model)
        {
            ___service.OnChangePCID(model.Pcid, model.IsNonConformance, ref model.Ds);

            return new OnChangePCID_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method validates field QuickEntryCode, and if it is valid, uses the
        /// values from the QuickEntry record to populate the LaborDtl values.
        /// </summary>
        [Route("OnChangeQuickEntryCode")]
        [HttpPost]
        public OnChangeQuickEntryCode_OutputModel OnChangeQuickEntryCode(OnChangeQuickEntryCode_InputModel model)
        {
            ___service.OnChangeQuickEntryCode(model.IpEmpID, model.IpQuickEntryCode, ref model.Ds);

            return new OnChangeQuickEntryCode_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this procedure when TimeWeeklyView.ResourceGrpID changes
        /// </summary>
        [Route("OnChangeResourceGrpID")]
        [HttpPost]
        public OnChangeResourceGrpID_OutputModel OnChangeResourceGrpID(OnChangeResourceGrpID_InputModel model)
        {
            ___service.OnChangeResourceGrpID(ref model.Ds, model.IpResourceGrpID);

            return new OnChangeResourceGrpID_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when loading end activity on Kinetic-MES.
        /// </summary>
        [Route("OnLoadEndActivity")]
        [HttpPost]
        public OnLoadEndActivity_OutputModel OnLoadEndActivity(OnLoadEndActivity_InputModel model)
        {
            var ___result = ___service.OnLoadEndActivity(model.ILaborHedSeq, model.ILaborDtlSeq);

            return new OnLoadEndActivity_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Call this procedure to override the Resource Group and Operation Code in a
        /// job.
        /// </summary>
        [Route("Overrides")]
        [HttpPost]
        public Overrides_OutputModel Overrides(Overrides_InputModel model)
        {
            ___service.Overrides(ref model.Ds, model.InOpCode, model.InResGrpID);

            return new Overrides_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this procedure to override the Resource in a LaborDtl record
        /// </summary>
        [Route("OverridesResource")]
        [HttpPost]
        public OverridesResource_OutputModel OverridesResource(OverridesResource_InputModel model)
        {
            ___service.OverridesResource(ref model.Ds, model.ProposedResourceID);

            return new OverridesResource_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Method to recall Labor for Approval.
        /// </summary>
        [Route("RecallFromApproval")]
        [HttpPost]
        public RecallFromApproval_OutputModel RecallFromApproval(RecallFromApproval_InputModel model)
        {
            string cMessageText;

            ___service.RecallFromApproval(ref model.Ds, model.LWeeklyView, out cMessageText);

            return new RecallFromApproval_OutputModel
            {
                Ds = model.Ds,
                CMessageText = cMessageText
            };
        }

        /// <summary>
        /// This method is intended to be used when the MES/ShopFloor user selects an
        /// operation from the WorkQueue to work on.  Use this method in place of the
        /// Update method in this situation.
        ///
        /// This method expects a LaborDataSet containing a single LaborHed with a
        /// RowMod indicating a changed row, and a LaborDtl row with a RowMod indicating
        /// a changed row.  This can be obtained with a call to Labor.GetRows() with a
        /// whereClauseLaborHed of
        /// ActiveTrans = YES and EmployeeNum = xxxx
        /// substituting the desired employeeNum for the xxxx.
        /// followed by a call to LaborDtlGetNew.
        ///
        /// After validating the given Job, Assembly, Operation, ResourceID, ResourceGrpID
        /// and LaborType, and additional validations are applied, the LaborDtl is updated.
        ///
        /// An exception is thrown if:
        /// - a changed Laborhed row is not found.
        /// - the given Job, Assembly and Operation is not valid
        /// - the LaborHed.ActiveTrans = no.  This method is for MES (ShopFloor) use only.
        /// - the given LaborType is not "S" or "P"
        /// </summary>
        [Route("SelectForWork")]
        [HttpPost]
        public SelectForWork_OutputModel SelectForWork(SelectForWork_InputModel model)
        {
            ___service.SelectForWork(ref model.Ds, model.PcResourceGrpId, model.PcResourceId, model.PcLaborType);

            return new SelectForWork_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method runs the shop warning routine and returns any warnings the user needs
        /// to be aware of.  This needs to be run right before the SelectForWork method.  If the user answers
        /// okay to all of the questions, then the SelectForWork method can be run.  Otherwise the labor record
        /// needs to be corrected
        /// </summary>
        [Route("SelectForWorkCheckWarnings")]
        [HttpPost]
        public SelectForWorkCheckWarnings_OutputModel SelectForWorkCheckWarnings(SelectForWorkCheckWarnings_InputModel model)
        {
            string vMessage;

            ___service.SelectForWorkCheckWarnings(ref model.Ds, out vMessage);

            return new SelectForWorkCheckWarnings_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// Sets the Time Stamp in which the Employee Starts his/her activity and
        /// also populates the field that displays the time correctly.
        /// </summary>
        [Route("SetClockInAndDisplayTimeMES")]
        [HttpPost]
        public SetClockInAndDisplayTimeMES_OutputModel SetClockInAndDisplayTimeMES(SetClockInAndDisplayTimeMES_InputModel model)
        {
            ___service.SetClockInAndDisplayTimeMES(ref model.Ds);

            return new SetClockInAndDisplayTimeMES_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Method to set the value UserFile.TERetrieveApproved
        /// </summary>
        [Route("SetTERetrieveApproved")]
        [HttpPost]
        public void SetTERetrieveApproved(SetTERetrieveApproved_InputModel model)
        {
            ___service.SetTERetrieveApproved(model.IpTERetrieveApproved);
        }

        /// <summary>
        /// Method to set the value for retrieve by day
        /// </summary>
        [Route("SetTERetrieveByDay")]
        [HttpPost]
        public void SetTERetrieveByDay(SetTERetrieveByDay_InputModel model)
        {
            ___service.SetTERetrieveByDay(model.IpTERetrieveByDay);
        }

        /// <summary>
        /// Method to set the value for retrieve by month
        /// </summary>
        [Route("SetTERetrieveByMonth")]
        [HttpPost]
        public void SetTERetrieveByMonth(SetTERetrieveByMonth_InputModel model)
        {
            ___service.SetTERetrieveByMonth(model.IpTERetrieveByMonth);
        }

        /// <summary>
        /// Method to set the value for retrieve by week
        /// </summary>
        [Route("SetTERetrieveByWeek")]
        [HttpPost]
        public void SetTERetrieveByWeek(SetTERetrieveByWeek_InputModel model)
        {
            ___service.SetTERetrieveByWeek(model.IpTERetrieveByWeek);
        }

        /// <summary>
        /// Method to set the value UserFile.TERetrieveEntered
        /// </summary>
        [Route("SetTERetrieveEntered")]
        [HttpPost]
        public void SetTERetrieveEntered(SetTERetrieveEntered_InputModel model)
        {
            ___service.SetTERetrieveEntered(model.IpTERetrieveEntered);
        }

        /// <summary>
        /// Method to set the value UserFile.TERetrievePartiallyApproved
        /// </summary>
        [Route("SetTERetrievePartiallyApproved")]
        [HttpPost]
        public void SetTERetrievePartiallyApproved(SetTERetrievePartiallyApproved_InputModel model)
        {
            ___service.SetTERetrievePartiallyApproved(model.IpTERetrievePartiallyApproved);
        }

        /// <summary>
        /// Method to set the value UserFile.TERetrieveRejected
        /// </summary>
        [Route("SetTERetrieveRejected")]
        [HttpPost]
        public void SetTERetrieveRejected(SetTERetrieveRejected_InputModel model)
        {
            ___service.SetTERetrieveRejected(model.IpTERetrieveRejected);
        }

        /// <summary>
        /// Method to set the value UserFile.TERetrieveSubmitted
        /// </summary>
        [Route("SetTERetrieveSubmitted")]
        [HttpPost]
        public void SetTERetrieveSubmitted(SetTERetrieveSubmitted_InputModel model)
        {
            ___service.SetTERetrieveSubmitted(model.IpTERetrieveSubmitted);
        }

        /// <summary>
        /// Method to call to start an activity in Shop Floor.
        /// </summary>
        [Route("StartActivity")]
        [HttpPost]
        public StartActivity_OutputModel StartActivity(StartActivity_InputModel model)
        {
            ___service.StartActivity(model.LaborHedSeq, model.StartType, ref model.Ds);

            return new StartActivity_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Method to call to start an activity in Shop Floor by Employee.
        /// </summary>
        [Route("StartActivityByEmp")]
        [HttpPost]
        public StartActivityByEmp_OutputModel StartActivityByEmp(StartActivityByEmp_InputModel model)
        {
            ___service.StartActivityByEmp(model.EmployeeID, model.StartType, ref model.Ds);

            return new StartActivityByEmp_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Method to submit Labor for Approval.
        /// </summary>
        [Route("SubmitForApproval")]
        [HttpPost]
        public SubmitForApproval_OutputModel SubmitForApproval(SubmitForApproval_InputModel model)
        {
            string cMessageText;

            ___service.SubmitForApproval(ref model.Ds, model.LWeeklyView, out cMessageText);

            return new SubmitForApproval_OutputModel
            {
                Ds = model.Ds,
                CMessageText = cMessageText
            };
        }

        /// <summary>
        /// This method validates the IndirectCode is marked as Downtime
        /// </summary>
        [Route("ValidateIndirectCodeIsDowntime")]
        [HttpPost]
        public void ValidateIndirectCodeIsDowntime(ValidateIndirectCodeIsDowntime_InputModel model)
        {
            ___service.ValidateIndirectCodeIsDowntime(model.IndirectCode);
        }

        /// <summary>
        /// This method validates the Non Conformance value and validates if it has already been processed
        /// </summary>
        [Route("validateNonConfProcessed")]
        [HttpPost]
        public validateNonConfProcessed_OutputModel validateNonConfProcessed(validateNonConfProcessed_InputModel model)
        {
            string vMessage;

            ___service.validateNonConfProcessed(ref model.Ds, model.LaborHedSeq, model.LaborDtlSeq, model.VDiscrepQty, out vMessage);

            return new validateNonConfProcessed_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// this method validates if the Project linked to the Job in Labor Detail is closed.
        /// </summary>
        [Route("ValidateProjectClosed")]
        [HttpPost]
        public ValidateProjectClosed_OutputModel ValidateProjectClosed(ValidateProjectClosed_InputModel model)
        {
            var ___result = ___service.ValidateProjectClosed(model.ProjectID, model.JobNum, model.LaborTypePseudo);

            return new ValidateProjectClosed_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Validates after calling SN selection screen
        /// </summary>
        [Route("ValidateSerialAfterSelect")]
        [HttpPost]
        public ValidateSerialAfterSelect_OutputModel ValidateSerialAfterSelect(ValidateSerialAfterSelect_InputModel model)
        {
            ___service.ValidateSerialAfterSelect(ref model.Ds);

            return new ValidateSerialAfterSelect_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Validates if serial number is valid after selecting SN on scan interface kinetic MES
        /// </summary>
        [Route("ValidateSerialScanInterface")]
        [HttpPost]
        public void ValidateSerialScanInterface(ValidateSerialScanInterface_InputModel model)
        {
            ___service.ValidateSerialScanInterface(model.JobNum, model.AssemblySeq, model.PartNum, model.ProposedSN, model.OprSeq, model.LaborHedSeq, model.LaborDtlSeq, model.Rework);
        }

        /// <summary>
        /// Call before allowing the select of serial numbers
        /// </summary>
        [Route("ValidateSerialBeforeSelect")]
        [HttpPost]
        public ValidateSerialBeforeSelect_OutputModel ValidateSerialBeforeSelect(ValidateSerialBeforeSelect_InputModel model)
        {
            string notEnoughSerials;
            System.Decimal totSNReq;
            System.Decimal totNewSNReq;

            ___service.ValidateSerialBeforeSelect(ref model.Ds, out notEnoughSerials, out totSNReq, out totNewSNReq);

            return new ValidateSerialBeforeSelect_OutputModel
            {
                Ds = model.Ds,
                NotEnoughSerials = notEnoughSerials,
                TotSNReq = totSNReq,
                TotNewSNReq = totNewSNReq
            };
        }

        /// <summary>
        /// Verifies if the user should enter child serial numbers for the serial numbers
        /// being received depending on the setting of the Serial Number Matching before save.
        /// </summary>
        [Route("VerifySerialMatch")]
        [HttpPost]
        public VerifySerialMatch_OutputModel VerifySerialMatch(VerifySerialMatch_InputModel model)
        {
            string pcMsg;
            int piMsgType;

            ___service.VerifySerialMatch(ref model.Ds, out pcMsg, out piMsgType);

            return new VerifySerialMatch_OutputModel
            {
                Ds = model.Ds,
                PcMsg = pcMsg,
                PiMsgType = piMsgType
            };
        }

        /// <summary>
        /// This method is called to update the values of the Display columns
        /// DspClockInTime and DspClockOutTime
        /// </summary>
        [Route("GetClockTime")]
        [HttpPost]
        public GetClockTime_OutputModel GetClockTime(GetClockTime_InputModel model)
        {
            System.Decimal clckTm;

            ___service.GetClockTime(model.DspClckTm, out clckTm);

            return new GetClockTime_OutputModel
            {
                ClckTm = clckTm
            };
        }

        /// <summary>
        /// </summary>
        [Route("GetCodeDescList")]
        [HttpPost]
        public GetCodeDescList_OutputModel GetCodeDescList(GetCodeDescList_InputModel model)
        {
            var ___result = ___service.GetCodeDescList(model.TableName, model.FieldName);

            return new GetCodeDescList_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// This method is called to update the values of the Display columns
        /// DspClockInTime and DspClockOutTime
        /// </summary>
        [Route("GetDspClockTime")]
        [HttpPost]
        public GetDspClockTime_OutputModel GetDspClockTime(GetDspClockTime_InputModel model)
        {
            string dspClckTm;

            ___service.GetDspClockTime(model.ClckTm, out dspClckTm);

            return new GetDspClockTime_OutputModel
            {
                DspClckTm = dspClckTm
            };
        }

        /// <summary>
        /// Returns TRUE if Part Quantity Reporting is allowed for a given operation.
        /// </summary>
        [Route("ReportPartQtyAllowed")]
        [HttpPost]
        public ReportPartQtyAllowed_OutputModel ReportPartQtyAllowed(ReportPartQtyAllowed_InputModel model)
        {
            var ___result = ___service.ReportPartQtyAllowed(model.Ip_JobNum, model.Ip_AssemblySeq, model.Ip_OprSeq);

            return new ReportPartQtyAllowed_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Methods updates Downtime codes
        /// </summary>
        [Route("ExternalMESDowntime")]
        [HttpPost]
        public void ExternalMESDowntime(ExternalMESDowntime_InputModel model)
        {
            ___service.ExternalMESDowntime(model.Ds, model.IndirectCode, model.DowntimeNote);
        }

        /// <summary>
        /// Methods updates Downtime codes
        /// </summary>
        [Route("ExternalMESEndDowntime")]
        [HttpPost]
        public ExternalMESEndDowntime_OutputModel ExternalMESEndDowntime(ExternalMESEndDowntime_InputModel model)
        {
            ___service.ExternalMESEndDowntime(ref model.Ds);

            return new ExternalMESEndDowntime_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Description: Public method which retrieves the labor information HCM third party requires.
        /// </summary>
        [Route("HCMGetLaborRecords")]
        [HttpPost]
        public HCMGetLaborRecords_OutputModel HCMGetLaborRecords(HCMGetLaborRecords_InputModel model)
        {
            var ___result = ___service.HCMGetLaborRecords(model.EmployeeNum, model.StartDate, model.EndDate, model.IncludeStatus);

            return new HCMGetLaborRecords_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// </summary>
        [Route("HCMSetLaborStatus")]
        [HttpPost]
        public void HCMSetLaborStatus(HCMSetLaborStatus_InputModel model)
        {
            ___service.HCMSetLaborStatus(model.HcmDs);
        }

        /// <summary>
        /// Validates if there is no valid Charge Rate according to selected Time Type.
        /// This validation can also be found on BO/LaborApproval.
        /// </summary>
        [Route("ValidateChargeRateForTimeType")]
        [HttpPost]
        public ValidateChargeRateForTimeType_OutputModel ValidateChargeRateForTimeType(ValidateChargeRateForTimeType_InputModel model)
        {
            string vMessage;

            ___service.ValidateChargeRateForTimeType(ref model.Ds, out vMessage);

            return new ValidateChargeRateForTimeType_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// Review if the document is Lock when user tries to recall the record from UI
        /// </summary>
        [Route("ReviewIsDocumentLock")]
        [HttpPost]
        public ReviewIsDocumentLock_OutputModel ReviewIsDocumentLock(ReviewIsDocumentLock_InputModel model)
        {
            string vMessage;

            ___service.ReviewIsDocumentLock(model.LaborHedSeq, model.LaborDtlSeq, out vMessage);

            return new ReviewIsDocumentLock_OutputModel
            {
                VMessage = vMessage
            };
        }

        /// <summary>
        /// Returns true if HCM is enable at company level.
        /// </summary>
        [Route("IsHCMEnabledAtCompany")]
        [HttpPost]
        public IsHCMEnabledAtCompany_OutputModel IsHCMEnabledAtCompany()
        {
            var ___result = ___service.IsHCMEnabledAtCompany();

            return new IsHCMEnabledAtCompany_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Called when Time Weekly View Week Begin Date is changing
        /// </summary>
        [Route("ChangeTimeWeeklyViewWeekBeginDate")]
        [HttpPost]
        public ChangeTimeWeeklyViewWeekBeginDate_OutputModel ChangeTimeWeeklyViewWeekBeginDate(ChangeTimeWeeklyViewWeekBeginDate_InputModel model)
        {
            ___service.ChangeTimeWeeklyViewWeekBeginDate(ref model.Ds, model.WeekBeginDate);

            return new ChangeTimeWeeklyViewWeekBeginDate_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method defaults LaborDtl fields when Operation sequence changes.  Also returns any
        /// warnings user needs to know.
        /// </summary>
        [Route("ChangeLaborDtlOprSeq")]
        [HttpPost]
        public ChangeLaborDtlOprSeq_OutputModel ChangeLaborDtlOprSeq(ChangeLaborDtlOprSeq_InputModel model)
        {
            string message;

            ___service.ChangeLaborDtlOprSeq(ref model.Ds, model.OprSeq, out message);

            return new ChangeLaborDtlOprSeq_OutputModel
            {
                Ds = model.Ds,
                Message = message
            };
        }

        /// <summary>
        /// This method defaults fields when the scrap qty field changes.
        /// </summary>
        [Route("ChangeLaborDtlScrapQty")]
        [HttpPost]
        public ChangeLaborDtlScrapQty_OutputModel ChangeLaborDtlScrapQty(ChangeLaborDtlScrapQty_InputModel model)
        {
            ___service.ChangeLaborDtlScrapQty(ref model.Ds, model.ScrapQty);

            return new ChangeLaborDtlScrapQty_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method updates the revision field when the attribute ID field changes.
        /// </summary>
        [Route("ChangeLaborDtlAttributeSetID")]
        [HttpPost]
        public ChangeLaborDtlAttributeSetID_OutputModel ChangeLaborDtlAttributeSetID(ChangeLaborDtlAttributeSetID_InputModel model)
        {
            ___service.ChangeLaborDtlAttributeSetID(ref model.Ds, model.AttributeSetID, model.Type);

            return new ChangeLaborDtlAttributeSetID_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Called after LaborDtl.DiscrepQty has been changed.
        /// </summary>
        [Route("AfterChangeLaborDtlDiscrepQty")]
        [HttpPost]
        public AfterChangeLaborDtlDiscrepQty_OutputModel AfterChangeLaborDtlDiscrepQty(AfterChangeLaborDtlDiscrepQty_InputModel model)
        {
            string message;

            ___service.AfterChangeLaborDtlDiscrepQty(ref model.Ds, out message);

            return new AfterChangeLaborDtlDiscrepQty_OutputModel
            {
                Ds = model.Ds,
                Message = message
            };
        }

        /// <summary>
        /// Called when labor clock in or clock out time is changing
        /// </summary>
        [Route("ChangeLaborDtlTimeField")]
        [HttpPost]
        public ChangeLaborDtlTimeField_OutputModel ChangeLaborDtlTimeField(ChangeLaborDtlTimeField_InputModel model)
        {
            ___service.ChangeLaborDtlTimeField(model.FieldName, model.TimeValue, ref model.Ds);

            return new ChangeLaborDtlTimeField_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Called when labor display clock in or clock out time is changing
        /// </summary>
        [Route("ChangeLaborDtlDspTimeField")]
        [HttpPost]
        public ChangeLaborDtlDspTimeField_OutputModel ChangeLaborDtlDspTimeField(ChangeLaborDtlDspTimeField_InputModel model)
        {
            ___service.ChangeLaborDtlDspTimeField(model.FieldName, model.TimeValue, ref model.Ds);

            return new ChangeLaborDtlDspTimeField_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Returns company job production settings for Advance Labor Rate, Clock Format
        /// </summary>
        [Route("GetJobProductionCompanySettings")]
        [HttpPost]
        public GetJobProductionCompanySettings_OutputModel GetJobProductionCompanySettings()
        {
            bool advanceLaborRate;
            string clockFormat;

            ___service.GetJobProductionCompanySettings(out advanceLaborRate, out clockFormat);

            return new GetJobProductionCompanySettings_OutputModel
            {
                AdvanceLaborRate = advanceLaborRate,
                ClockFormat = clockFormat
            };
        }

        /// <summary>
        /// Method to submit Labor for Approval using RowSelected flag.
        /// </summary>
        [Route("SubmitForApprovalBySelected")]
        [HttpPost]
        public SubmitForApprovalBySelected_OutputModel SubmitForApprovalBySelected(SubmitForApprovalBySelected_InputModel model)
        {
            string messageText;

            ___service.SubmitForApprovalBySelected(ref model.Ds, model.WeeklyView, out messageText);

            return new SubmitForApprovalBySelected_OutputModel
            {
                Ds = model.Ds,
                MessageText = messageText
            };
        }

        /// <summary>
        /// Method to recall Labor for Approval using RowSelected flag.
        /// </summary>
        [Route("RecallFromApprovalBySelected")]
        [HttpPost]
        public RecallFromApprovalBySelected_OutputModel RecallFromApprovalBySelected(RecallFromApprovalBySelected_InputModel model)
        {
            string messageText;

            ___service.RecallFromApprovalBySelected(ref model.Ds, model.WeeklyView, out messageText);

            return new RecallFromApprovalBySelected_OutputModel
            {
                Ds = model.Ds,
                MessageText = messageText
            };
        }

        /// <summary>
        /// Method to copy Labor detail record(s) using RowSelected flag.
        /// </summary>
        [Route("CopyLaborDtlBySelected")]
        [HttpPost]
        public CopyLaborDtlBySelected_OutputModel CopyLaborDtlBySelected(CopyLaborDtlBySelected_InputModel model)
        {
            string messageText;

            ___service.CopyLaborDtlBySelected(ref model.Ds, out messageText);

            return new CopyLaborDtlBySelected_OutputModel
            {
                Ds = model.Ds,
                MessageText = messageText
            };
        }

        /// <summary>
        /// Method to copy TimeWeeklyView record(s) using RowSelected flag.
        /// </summary>
        [Route("CopyTimeWeeklyViewBySelected")]
        [HttpPost]
        public CopyTimeWeeklyViewBySelected_OutputModel CopyTimeWeeklyViewBySelected(CopyTimeWeeklyViewBySelected_InputModel model)
        {
            string messageText;

            ___service.CopyTimeWeeklyViewBySelected(ref model.Ds, out messageText);

            return new CopyTimeWeeklyViewBySelected_OutputModel
            {
                Ds = model.Ds,
                MessageText = messageText
            };
        }

        /// <summary>
        /// Get rows for Time Entry.  This method will consider user time retrieval options for retrieving approved, entered, partially approved, rejected, and submitted records.
        /// </summary>
        [Route("GetRowsTimeEntry")]
        [HttpPost]
        public GetRowsTimeEntry_OutputModel GetRowsTimeEntry(GetRowsTimeEntry_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetRowsTimeEntry(model.WhereClauseLaborHed, model.WhereClauseLaborDtl, model.WhereClauseLaborDtlAttach, model.WhereClauseLaborDtlAction, model.WhereClauseLaborDtlCom, model.WhereClauseLaborEquip, model.WhereClauseLaborPart, model.WhereClauseLbrScrapSerialNumbers, model.WhereClauseTimeWorkHours, model.WhereClauseTimeWeeklyView, model.WhereClauseLaborDtlGroup, model.WhereClauseSelectedSerialNumbers, model.WhereClauseSNFormat, model.PageSize, model.AbsolutePage, model.EmployeeNum, model.CalendarStartDate, model.CalendarEndDate, out morePages);

            return new GetRowsTimeEntry_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// Returns valid labor types based on the employee
        /// </summary>
        [Route("GetLaborTypeList")]
        [HttpPost]
        public GetLaborTypeList_OutputModel GetLaborTypeList(GetLaborTypeList_InputModel model)
        {
            string laborTypeList;

            ___service.GetLaborTypeList(model.EmployeeNum, out laborTypeList);

            return new GetLaborTypeList_OutputModel
            {
                LaborTypeList = laborTypeList
            };
        }

        /// <summary>
        /// Create LbrScrapSerialNumbers dataset records from a list of selected serial numbers
        /// </summary>
        [Route("CreateLbrScrapSerialNumbersFromList")]
        [HttpPost]
        public CreateLbrScrapSerialNumbersFromList_OutputModel CreateLbrScrapSerialNumbersFromList(CreateLbrScrapSerialNumbersFromList_InputModel model)
        {
            ___service.CreateLbrScrapSerialNumbersFromList(model.SerialNumberList, model.PartNumList, ref model.Ds);

            return new CreateLbrScrapSerialNumbersFromList_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Called when LaborHed Payroll Date is changing
        /// </summary>
        [Route("LaborHedPayrollDateChanging")]
        [HttpPost]
        public LaborHedPayrollDateChanging_OutputModel LaborHedPayrollDateChanging(LaborHedPayrollDateChanging_InputModel model)
        {
            ___service.LaborHedPayrollDateChanging(model.PayrollDate, ref model.Ds);

            return new LaborHedPayrollDateChanging_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Return values for a new labor record that is added via a calendar.  Parses the date and time from the calendar data parameters and
        /// returns the LaborHedSeq value of the first LaborHed record that exists for the calendarStartDateTime if one exists.  Returns zero
        /// if a LaborHed record does not exist.
        /// </summary>
        [Route("GetDefaultsAddLaborDtlFromCalendar")]
        [HttpPost]
        public GetDefaultsAddLaborDtlFromCalendar_OutputModel GetDefaultsAddLaborDtlFromCalendar(GetDefaultsAddLaborDtlFromCalendar_InputModel model)
        {
            int laborHedSeq;
            System.DateTime? startDate;
            System.Decimal startTime;
            System.DateTime? endDate;
            System.Decimal endTime;

            ___service.GetDefaultsAddLaborDtlFromCalendar(model.EmpID, model.CalendarStartDateTime, model.CalendarEndDateTime, out laborHedSeq, out startDate, out startTime, out endDate, out endTime);

            return new GetDefaultsAddLaborDtlFromCalendar_OutputModel
            {
                LaborHedSeq = laborHedSeq,
                StartDate = startDate,
                StartTime = startTime,
                EndDate = endDate,
                EndTime = endTime
            };
        }

        /// <summary>
        /// This method sets Complete checkbox when scrap qty field changes in End Activity.
        /// </summary>
        [Route("OnChangeLaborPartScrapQty")]
        [HttpPost]
        public OnChangeLaborPartScrapQty_OutputModel OnChangeLaborPartScrapQty(OnChangeLaborPartScrapQty_InputModel model)
        {
            string vMessage;

            ___service.OnChangeLaborPartScrapQty(ref model.Ds, model.ScrapQty, model.SysRowID, out vMessage);

            return new OnChangeLaborPartScrapQty_OutputModel
            {
                Ds = model.Ds,
                VMessage = vMessage
            };
        }

        /// <summary>
        /// This method updates the revision field when the attribute ID field changes.
        /// </summary>
        [Route("ChangeLaborPartAttributeSetID")]
        [HttpPost]
        public ChangeLaborPartAttributeSetID_OutputModel ChangeLaborPartAttributeSetID(ChangeLaborPartAttributeSetID_InputModel model)
        {
            ___service.ChangeLaborPartAttributeSetID(ref model.Ds, model.AttributeSetID, model.Type);

            return new ChangeLaborPartAttributeSetID_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Called after LaborDtl.DiscrepQty has been changed.
        /// </summary>
        [Route("AfterChangeLaborPartDiscrepQty")]
        [HttpPost]
        public AfterChangeLaborPartDiscrepQty_OutputModel AfterChangeLaborPartDiscrepQty(AfterChangeLaborPartDiscrepQty_InputModel model)
        {
            string message;

            ___service.AfterChangeLaborPartDiscrepQty(ref model.Ds, out message);

            return new AfterChangeLaborPartDiscrepQty_OutputModel
            {
                Ds = model.Ds,
                Message = message
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewLaborHed")]
        [HttpPost]
        public GetNewLaborHed_OutputModel GetNewLaborHed(GetNewLaborHed_InputModel model)
        {
            ___service.GetNewLaborHed(ref model.Ds);

            return new GetNewLaborHed_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewLaborDtl")]
        [HttpPost]
        public GetNewLaborDtl_OutputModel GetNewLaborDtl(GetNewLaborDtl_InputModel model)
        {
            ___service.GetNewLaborDtl(ref model.Ds, model.LaborHedSeq);

            return new GetNewLaborDtl_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewLaborDtlAttch")]
        [HttpPost]
        public GetNewLaborDtlAttch_OutputModel GetNewLaborDtlAttch(GetNewLaborDtlAttch_InputModel model)
        {
            ___service.GetNewLaborDtlAttch(ref model.Ds, model.LaborHedSeq, model.LaborDtlSeq);

            return new GetNewLaborDtlAttch_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewLaborDtlAction")]
        [HttpPost]
        public GetNewLaborDtlAction_OutputModel GetNewLaborDtlAction(GetNewLaborDtlAction_InputModel model)
        {
            ___service.GetNewLaborDtlAction(ref model.Ds, model.LaborHedSeq, model.LaborDtlSeq);

            return new GetNewLaborDtlAction_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewLaborDtlComment")]
        [HttpPost]
        public GetNewLaborDtlComment_OutputModel GetNewLaborDtlComment(GetNewLaborDtlComment_InputModel model)
        {
            ___service.GetNewLaborDtlComment(ref model.Ds, model.LaborHedSeq, model.LaborDtlSeq);

            return new GetNewLaborDtlComment_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewLaborEquip")]
        [HttpPost]
        public GetNewLaborEquip_OutputModel GetNewLaborEquip(GetNewLaborEquip_InputModel model)
        {
            ___service.GetNewLaborEquip(ref model.Ds, model.LaborHedSeq, model.LaborDtlSeq);

            return new GetNewLaborEquip_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewLaborPart")]
        [HttpPost]
        public GetNewLaborPart_OutputModel GetNewLaborPart(GetNewLaborPart_InputModel model)
        {
            ___service.GetNewLaborPart(ref model.Ds, model.LaborHedSeq, model.LaborDtlSeq);

            return new GetNewLaborPart_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewLaborDtlGroup")]
        [HttpPost]
        public GetNewLaborDtlGroup_OutputModel GetNewLaborDtlGroup(GetNewLaborDtlGroup_InputModel model)
        {
            ___service.GetNewLaborDtlGroup(ref model.Ds, model.EmployeeNum);

            return new GetNewLaborDtlGroup_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Deletes a row given its ID.
        /// </summary>
        [Route("DeleteByID")]
        [HttpPost]
        public void DeleteByID(DeleteByID_InputModel model)
        {
            ___service.DeleteByID(model.LaborHedSeq);
        }

        /// <summary>
        /// Returns a DataSet given the primary key.
        /// </summary>
        [Route("GetByID")]
        [HttpPost]
        public GetByID_OutputModel GetByID(GetByID_InputModel model)
        {
            var ___result = ___service.GetByID(model.LaborHedSeq);

            return new GetByID_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Returns a list of rows that satisfy the where clause.
        /// </summary>
        [Route("GetList")]
        [HttpPost]
        public GetList_OutputModel GetList(GetList_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetList(model.WhereClause, model.PageSize, model.AbsolutePage, out morePages);

            return new GetList_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// Returns a dataset containing all rows that satisfy the where clauses.
        /// </summary>
        [Route("GetRows")]
        [HttpPost]
        public GetRows_OutputModel GetRows(GetRows_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetRows(model.WhereClauseLaborHed, model.WhereClauseLaborDtl, model.WhereClauseLaborDtlAttch, model.WhereClauseLaborDtlAction, model.WhereClauseLaborDtlComment, model.WhereClauseLaborEquip, model.WhereClauseLaborPart, model.WhereClauseLbrScrapSerialNumbers, model.WhereClauseLaborDtlGroup, model.WhereClauseSelectedSerialNumbers, model.WhereClauseSNFormat, model.WhereClauseTimeWeeklyView, model.WhereClauseTimeWorkHours, model.PageSize, model.AbsolutePage, out morePages);

            return new GetRows_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// </summary>
        [Route("GetBySysRowID")]
        [HttpPost]
        public GetBySysRowID_OutputModel GetBySysRowID(GetBySysRowID_InputModel model)
        {
            var ___result = ___service.GetBySysRowID(model.Id);

            return new GetBySysRowID_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// </summary>
        [Route("GetBySysRowIDs")]
        [HttpPost]
        public GetBySysRowIDs_OutputModel GetBySysRowIDs(GetBySysRowIDs_InputModel model)
        {
            var ___result = ___service.GetBySysRowIDs(model.Ids);

            return new GetBySysRowIDs_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Commits the DataSet changes to the data store.
        /// </summary>
        [Route("Update")]
        [HttpPost]
        public Update_OutputModel Update(Update_InputModel model)
        {
            ___service.Update(ref model.Ds);

            return new Update_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Apply input data to service by calling GetByID/GetNew/Update methods.
        /// </summary>
        [Route("UpdateExt")]
        [HttpPost]
        public UpdateExt_OutputModel UpdateExt(UpdateExt_InputModel model)
        {
            bool errorsOccurred;

            var ___result = ___service.UpdateExt(ref model.Ds, model.ContinueProcessingOnError, model.RollbackParentOnChildError, out errorsOccurred);

            return new UpdateExt_OutputModel
            {
                Ds = model.Ds,
                ErrorsOccurred = errorsOccurred,
                _Return = ___result
            };
        }
    }
}

namespace Erp.Models.BO.Labor
{
    public class BuildJobOperPrjRoleList_InputModel
    {
        public string IpJobNum;
        public int IpAssemblySeq;
        public int IpOprSeq;
        public string IpEmpID;
    }

    public class BuildJobOperPrjRoleList_OutputModel
    {
        public string WhereClause;
        public string _Return;
    }

    public class ChangeEquipID_InputModel
    {
        public string EquipID;
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ChangeEquipID_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ChangeIndirectCode_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ChangeIndirectCode_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ChangeLaborType_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ChangeLaborType_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class CheckResourceId_InputModel
    {
        public string ResourceGrpId;
        public string ProposedResId;
    }

    public class CheckResourceId_OutputModel
    {
        public string PcMsg;
    }

    public class ChangeResourceId_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string PcResourceID;
    }

    public class ChangeResourceId_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string PcMsg;
    }

    public class CheckEmployeeActivity_InputModel
    {
        public string IpEmpID;
        public int IpLaborHedSeq;
        public string IpJobNum;
        public int IpAsmSeq;
        public int IpOprSeq;
        public string IpResourceID;
    }

    public class CheckEmployeeActivity_OutputModel
    {
        public string OpMessage;
    }

    public class CheckNonConformance_InputModel
    {
        public string JobNum;
        public int LaborHedSeq;
        public int LaborDtlSeq;
    }

    public class CheckNonConformance_OutputModel
    {
        public string PcMsg;
    }

    public class CheckFirstArticleWarning_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class CheckFirstArticleWarning_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string PcMsg;
    }

    public class CheckInspResults_InputModel
    {
        public string IpJobNum;
        public int IpAssemblySeq;
        public int IpOprSeq;
    }

    public class CheckInspResults_OutputModel
    {
        public bool InspectionOK;
    }

    public class CheckResourceGroup_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string ProposedResourceID;
    }

    public class CheckResourceGroup_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class CheckWarnings_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class CheckWarnings_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class chkReportQtyShopWarn_InputModel
    {
        public string Company;
        public string JobNum;
        public int AssemblySeq;
        public int OprSeq;
        public string EmpID;
        public bool ActiveTrans;
    }

    public class chkReportQtyShopWarn_OutputModel
    {
        public string PcMsg;
    }

    public class CopyLaborDetail_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class CopyLaborDetail_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string CMessageText;
    }

    public class CopyTimeWeeklyView_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class CopyTimeWeeklyView_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string CMessageText;
    }

    public class DefaultAssemblySeq_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int AssemblySeq;
    }

    public class DefaultAssemblySeq_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultComplete_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public bool Cmplete;
    }

    public class DefaultComplete_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class DefaultDate_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.DateTime? PayrollDate;
    }

    public class DefaultDate_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultDiscrpRsnCode_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string ProposedDiscrpRsnCode;
    }

    public class DefaultDiscrpRsnCode_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultReworkReasonCode_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string ProposedReworkReasonCode;
    }

    public class DefaultReworkReasonCode_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultDtlTime_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultDtlTime_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultIndirect_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string IndirectCode;
    }

    public class DefaultIndirect_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class SelectAllForWork_InputModel
    {
        public Erp.Tablesets.LaborTableset LaborDS;
        public Erp.Tablesets.WorkQueueTable SelectedWorkQueueRows;
        public string EmpID;
        public string ResourceGrpID;
        public string ResourceID;
        public string LaborType;
    }

    public class SelectAllForWork_OutputModel
    {
        public Erp.Tablesets.LaborTableset LaborDS;
        public string WarningsMsg;
    }

    public class DefaultJobNum_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string JobNum;
    }

    public class DefaultJobNum_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultLaborHrs_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.Decimal LaborHrs;
    }

    public class DefaultLaborHrs_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultLaborQty_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.Decimal LaborQty;
    }

    public class DefaultLaborQty_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class DefaultNonConformanceQty_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.Decimal NonConformanceQty;
    }

    public class DefaultNonConformanceQty_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class VerifyScrapQty_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.Decimal ScrapQty;
    }

    public class VerifyScrapQty_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class OnChangePartQty_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.Decimal PartQty;
        public System.Guid SysRowID;
    }

    public class OnChangePartQty_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class DefaultLaborType_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string IpLaborType;
    }

    public class DefaultLaborType_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultLunchBreak_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultLunchBreak_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultNextOprSeq_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int ProposedNextOprSeq;
    }

    public class DefaultNextOprSeq_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultOpCode_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string OpCode;
    }

    public class DefaultOpCode_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class DefaultOprSeq_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int OprSeq;
    }

    public class DefaultOprSeq_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class GetNewLaborDtlOnSelectForWork_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int LaborHedSeq;
        public string SJobNum;
        public int IAssemblySeq;
        public int IOprSeq;
        public string SResourceGrpID;
        public string SetupOrProd;
    }

    public class GetNewLaborDtlOnSelectForWork_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public bool BMachinePrompt;
    }

    public class DefaultPhaseID_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string IpPhaseID;
    }

    public class DefaultPhaseID_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultPhaseOprSeq_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int IpPhaseOprSeq;
    }

    public class DefaultPhaseOprSeq_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class DefaultProjectID_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string IpProjectID;
    }

    public class DefaultProjectID_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultResourceID_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string ProposedResourceID;
    }

    public class DefaultResourceID_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultRoleCd_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string IpRoleCd;
    }

    public class DefaultRoleCd_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultScrapReasonCode_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string ProposedScrapReasonCode;
    }

    public class DefaultScrapReasonCode_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class DefaultSetupPctComplete_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.Decimal PercentComplete;
    }

    public class DefaultSetupPctComplete_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultShift_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int Shift;
    }

    public class DefaultShift_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultTime_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string CFieldName;
        public System.Decimal TimeValue;
    }

    public class DefaultTime_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DefaultTimeTypCd_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string IpTimeTypCd;
    }

    public class DefaultTimeTypCd_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class DefaultWCCode_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string WcCode;
    }

    public class DefaultWCCode_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class DeleteLaborDtl_InputModel
    {
        public int LaborHedSeq;
        public int LaborDtlSeq;
        public string CallFrom;
    }

    public class DeleteLaborDtl_OutputModel
    {
        public string VMessage;
        public bool _Return;
    }

    public class EndActivity_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class EndActivity_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class EndActivityComplete_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public bool Cmplete;
    }

    public class EndActivityComplete_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class GetActiveLaborDtl_InputModel
    {
        public string EmployeeNum;
    }

    public class GetActiveLaborDtl_OutputModel
    {
        public Erp.Tablesets.LaborTableset _Return;
    }

    public class InitiateDowntime_InputModel
    {
        public string EmployeeNum;
        public string IndirectCode;
        public string IndirectNote;
    }

    public class EndDowntime_InputModel
    {
        public string EmployeeNum;
    }

    public class GetDetail_InputModel
    {
        public int ILaborHedSeq;
        public int ILaborDtlSeq;
    }

    public class GetDetail_OutputModel
    {
        public Erp.Tablesets.LaborTableset _Return;
    }

    public class getElapsedTime_InputModel
    {
        public System.DateTime StartDate;
        public System.Decimal StartTime;
    }

    public class getElapsedTime_OutputModel
    {
        public System.Decimal _Return;
    }

    public class GetNewLaborDtlNoHdr_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string EmployeeNum;
        public bool ShopFloor;
        public System.DateTime? ClockInDate;
        public System.Decimal ClockInTime;
        public System.DateTime? ClockOutDate;
        public System.Decimal ClockOutTime;
    }

    public class GetNewLaborDtlNoHdr_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLaborDtlWithHdr_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.DateTime? IpClockInDate;
        public System.Decimal IpClockInTime;
        public System.DateTime? IpClockOutDate;
        public System.Decimal IpClockOutTime;
        public int IpLaborHedSeq;
    }

    public class GetNewLaborDtlWithHdr_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLaborHed1_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string EmployeeNum;
        public bool ShopFloor;
        public System.DateTime? PayrollDate;
    }

    public class GetNewLaborHed1_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLbrScrapSerialNumbers_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLbrScrapSerialNumbers_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewTimeWeeklyView_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string IpEmployeeNum;
        public System.DateTime? IpDateInWeek;
    }

    public class GetNewTimeWeeklyView_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetRowsCalendarView_InputModel
    {
        public string WhereClauseLaborHed;
        public string WhereClauseLaborDtl;
        public string WhereClauseLaborDtlAttach;
        public string WhereClauseLaborDtlAction;
        public string WhereClauseLaborDtlCom;
        public string WhereClauseLaborEquip;
        public string WhereClauseLaborPart;
        public string WhereClauseLbrScrapSerialNumbers;
        public string WhereClauseTimeWorkHours;
        public string WhereClauseTimeWeeklyView;
        public string WhereClauseLaborDtlGroup;
        public string WhereClauseSelectedSerialNumbers;
        public string WhereClauseSNFormat;
        public int PageSize;
        public int AbsolutePage;
        public string IpEmployeeNum;
        public System.DateTime? IpCalendarStartDate;
        public System.DateTime? IpCalendarEndDate;
    }

    public class GetRowsCalendarView_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.LaborTableset _Return;
    }

    public class GetRowsWhoIsHere_InputModel
    {
        public string WhereClauseLaborHed;
        public string WhereClauseLaborDtl;
        public string WhereClauseLaborDtlCom;
        public string WhereClauseLaborEquip;
        public string WhereClauseLaborPart;
        public string WhereClauseLbrScrapSerialNumbers;
        public string WhereClauseTimeWorkHours;
        public string WhereClauseTimeWeeklyView;
        public string WhereClauseLaborDtlGroup;
        public string WhereClauseSelectedSerialNumbers;
        public string WhereClauseSNFormat;
        public int PageSize;
        public int AbsolutePage;
        public string IpSupervisorID;
    }

    public class GetRowsWhoIsHere_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.LaborTableset _Return;
    }

    public class GetTERetrieveApproved_OutputModel
    {
        public bool OpTERetrieveApproved;
    }

    public class GetTERetrieveByOption_OutputModel
    {
        public bool OpTERetrieveByDay;
        public bool OpTERetrieveByWeek;
        public bool OpTERetrieveByMonth;
    }

    public class GetTERetrieveEntered_OutputModel
    {
        public bool OpTERetrieveEntered;
    }

    public class GetTERetrievePartiallyApproved_OutputModel
    {
        public bool OpTERetrievePartiallyApproved;
    }

    public class GetTERetrieveRejected_OutputModel
    {
        public bool OpTERetrieveRejected;
    }

    public class GetTERetrieveSubmitted_OutputModel
    {
        public bool OpTERetrieveSubmitted;
    }

    public class IsValidAssembly_InputModel
    {
        public string PcJobNum;
        public int PiAssemblySeq;
    }

    public class IsValidAssembly_OutputModel
    {
        public bool PlFound;
    }

    public class LaborDtlAfterGetRowsWrapper_InputModel
    {
        public Erp.Tablesets.LaborDtlRow LaborDtlRow;
    }

    public class LaborDtlAfterGetRowsWrapper_OutputModel
    {
        public Erp.Tablesets.LaborDtlRow LaborDtlRow;
    }

    public class LaborRateCalc_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class LaborRateCalc_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class OnChangeClockInDate_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.DateTime? IpClockInDate;
    }

    public class OnChangeClockInDate_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class OnChangePCID_InputModel
    {
        public string Pcid;
        public bool IsNonConformance;
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class OnChangePCID_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class OnChangeQuickEntryCode_InputModel
    {
        public string IpEmpID;
        public string IpQuickEntryCode;
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class OnChangeQuickEntryCode_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class OnChangeResourceGrpID_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string IpResourceGrpID;
    }

    public class OnChangeResourceGrpID_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class OnLoadEndActivity_InputModel
    {
        public int ILaborHedSeq;
        public int ILaborDtlSeq;
    }

    public class OnLoadEndActivity_OutputModel
    {
        public Erp.Tablesets.LaborTableset _Return;
    }

    public class Overrides_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string InOpCode;
        public string InResGrpID;
    }

    public class Overrides_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class OverridesResource_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string ProposedResourceID;
    }

    public class OverridesResource_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class RecallFromApproval_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public bool LWeeklyView;
    }

    public class RecallFromApproval_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string CMessageText;
    }

    public class SelectForWork_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string PcResourceGrpId;
        public string PcResourceId;
        public string PcLaborType;
    }

    public class SelectForWork_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class SelectForWorkCheckWarnings_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class SelectForWorkCheckWarnings_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class SetClockInAndDisplayTimeMES_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class SetClockInAndDisplayTimeMES_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class SetTERetrieveApproved_InputModel
    {
        public bool IpTERetrieveApproved;
    }

    public class SetTERetrieveByDay_InputModel
    {
        public bool IpTERetrieveByDay;
    }

    public class SetTERetrieveByMonth_InputModel
    {
        public bool IpTERetrieveByMonth;
    }

    public class SetTERetrieveByWeek_InputModel
    {
        public bool IpTERetrieveByWeek;
    }

    public class SetTERetrieveEntered_InputModel
    {
        public bool IpTERetrieveEntered;
    }

    public class SetTERetrievePartiallyApproved_InputModel
    {
        public bool IpTERetrievePartiallyApproved;
    }

    public class SetTERetrieveRejected_InputModel
    {
        public bool IpTERetrieveRejected;
    }

    public class SetTERetrieveSubmitted_InputModel
    {
        public bool IpTERetrieveSubmitted;
    }

    public class StartActivity_InputModel
    {
        public int LaborHedSeq;
        public string StartType;
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class StartActivity_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class StartActivityByEmp_InputModel
    {
        public string EmployeeID;
        public string StartType;
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class StartActivityByEmp_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class SubmitForApproval_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public bool LWeeklyView;
    }

    public class SubmitForApproval_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string CMessageText;
    }

    public class ValidateIndirectCodeIsDowntime_InputModel
    {
        public string IndirectCode;
    }

    public class validateNonConfProcessed_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int LaborHedSeq;
        public int LaborDtlSeq;
        public System.Decimal VDiscrepQty;
    }

    public class validateNonConfProcessed_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class ValidateProjectClosed_InputModel
    {
        public string ProjectID;
        public string JobNum;
        public string LaborTypePseudo;
    }

    public class ValidateProjectClosed_OutputModel
    {
        public bool _Return;
    }

    public class ValidateSerialAfterSelect_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ValidateSerialAfterSelect_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ValidateSerialScanInterface_InputModel
    {
        public string JobNum;
        public int AssemblySeq;
        public string PartNum;
        public string ProposedSN;
        public int OprSeq;
        public int LaborHedSeq;
        public int LaborDtlSeq;
        public bool Rework;
    }

    public class ValidateSerialBeforeSelect_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ValidateSerialBeforeSelect_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string NotEnoughSerials;
        public System.Decimal TotSNReq;
        public System.Decimal TotNewSNReq;
    }

    public class VerifySerialMatch_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class VerifySerialMatch_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string PcMsg;
        public int PiMsgType;
    }

    public class GetClockTime_InputModel
    {
        public string DspClckTm;
    }

    public class GetClockTime_OutputModel
    {
        public System.Decimal ClckTm;
    }

    public class GetCodeDescList_InputModel
    {
        public string TableName;
        public string FieldName;
    }

    public class GetCodeDescList_OutputModel
    {
        public string _Return;
    }

    public class GetDspClockTime_InputModel
    {
        public System.Decimal ClckTm;
    }

    public class GetDspClockTime_OutputModel
    {
        public string DspClckTm;
    }

    public class ReportPartQtyAllowed_InputModel
    {
        public string Ip_JobNum;
        public int Ip_AssemblySeq;
        public int Ip_OprSeq;
    }

    public class ReportPartQtyAllowed_OutputModel
    {
        public bool _Return;
    }

    public class ExternalMESDowntime_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string IndirectCode;
        public string DowntimeNote;
    }

    public class ExternalMESEndDowntime_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ExternalMESEndDowntime_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class HCMGetLaborRecords_InputModel
    {
        public string EmployeeNum;
        public System.DateTime? StartDate;
        public System.DateTime? EndDate;
        public string IncludeStatus;
    }

    public class HCMGetLaborRecords_OutputModel
    {
        public Erp.Tablesets.HCMLaborDtlTableset _Return;
    }

    public class HCMSetLaborStatus_InputModel
    {
        public Erp.Tablesets.HCMLaborDtlTableset HcmDs;
    }

    public class ValidateChargeRateForTimeType_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ValidateChargeRateForTimeType_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class ReviewIsDocumentLock_InputModel
    {
        public string LaborHedSeq;
        public string LaborDtlSeq;
    }

    public class ReviewIsDocumentLock_OutputModel
    {
        public string VMessage;
    }

    public class IsHCMEnabledAtCompany_OutputModel
    {
        public bool _Return;
    }

    public class ChangeTimeWeeklyViewWeekBeginDate_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.DateTime WeekBeginDate;
    }

    public class ChangeTimeWeeklyViewWeekBeginDate_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ChangeLaborDtlOprSeq_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int OprSeq;
    }

    public class ChangeLaborDtlOprSeq_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string Message;
    }

    public class ChangeLaborDtlScrapQty_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.Decimal ScrapQty;
    }

    public class ChangeLaborDtlScrapQty_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ChangeLaborDtlAttributeSetID_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int AttributeSetID;
        public string Type;
    }

    public class ChangeLaborDtlAttributeSetID_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class AfterChangeLaborDtlDiscrepQty_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class AfterChangeLaborDtlDiscrepQty_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string Message;
    }

    public class ChangeLaborDtlTimeField_InputModel
    {
        public string FieldName;
        public System.Decimal TimeValue;
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ChangeLaborDtlTimeField_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ChangeLaborDtlDspTimeField_InputModel
    {
        public string FieldName;
        public string TimeValue;
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class ChangeLaborDtlDspTimeField_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetJobProductionCompanySettings_OutputModel
    {
        public bool AdvanceLaborRate;
        public string ClockFormat;
    }

    public class SubmitForApprovalBySelected_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public bool WeeklyView;
    }

    public class SubmitForApprovalBySelected_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string MessageText;
    }

    public class RecallFromApprovalBySelected_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public bool WeeklyView;
    }

    public class RecallFromApprovalBySelected_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string MessageText;
    }

    public class CopyLaborDtlBySelected_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class CopyLaborDtlBySelected_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string MessageText;
    }

    public class CopyTimeWeeklyViewBySelected_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class CopyTimeWeeklyViewBySelected_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string MessageText;
    }

    public class GetRowsTimeEntry_InputModel
    {
        public string WhereClauseLaborHed;
        public string WhereClauseLaborDtl;
        public string WhereClauseLaborDtlAttach;
        public string WhereClauseLaborDtlAction;
        public string WhereClauseLaborDtlCom;
        public string WhereClauseLaborEquip;
        public string WhereClauseLaborPart;
        public string WhereClauseLbrScrapSerialNumbers;
        public string WhereClauseTimeWorkHours;
        public string WhereClauseTimeWeeklyView;
        public string WhereClauseLaborDtlGroup;
        public string WhereClauseSelectedSerialNumbers;
        public string WhereClauseSNFormat;
        public int PageSize;
        public int AbsolutePage;
        public string EmployeeNum;
        public System.DateTime? CalendarStartDate;
        public System.DateTime? CalendarEndDate;
    }

    public class GetRowsTimeEntry_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.LaborTableset _Return;
    }

    public class GetLaborTypeList_InputModel
    {
        public string EmployeeNum;
    }

    public class GetLaborTypeList_OutputModel
    {
        public string LaborTypeList;
    }

    public class CreateLbrScrapSerialNumbersFromList_InputModel
    {
        public string SerialNumberList;
        public string PartNumList;
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class CreateLbrScrapSerialNumbersFromList_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class LaborHedPayrollDateChanging_InputModel
    {
        public System.DateTime? PayrollDate;
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class LaborHedPayrollDateChanging_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetDefaultsAddLaborDtlFromCalendar_InputModel
    {
        public string EmpID;
        public System.DateTime? CalendarStartDateTime;
        public System.DateTime? CalendarEndDateTime;
    }

    public class GetDefaultsAddLaborDtlFromCalendar_OutputModel
    {
        public int LaborHedSeq;
        public System.DateTime? StartDate;
        public System.Decimal StartTime;
        public System.DateTime? EndDate;
        public System.Decimal EndTime;
    }

    public class OnChangeLaborPartScrapQty_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public System.Decimal ScrapQty;
        public System.Guid SysRowID;
    }

    public class OnChangeLaborPartScrapQty_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string VMessage;
    }

    public class ChangeLaborPartAttributeSetID_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int AttributeSetID;
        public string Type;
    }

    public class ChangeLaborPartAttributeSetID_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class AfterChangeLaborPartDiscrepQty_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class AfterChangeLaborPartDiscrepQty_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string Message;
    }

    public class GetNewLaborHed_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLaborHed_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLaborDtl_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int LaborHedSeq;
    }

    public class GetNewLaborDtl_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLaborDtlAttch_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int LaborHedSeq;
        public int LaborDtlSeq;
    }

    public class GetNewLaborDtlAttch_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLaborDtlAction_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int LaborHedSeq;
        public int LaborDtlSeq;
    }

    public class GetNewLaborDtlAction_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLaborDtlComment_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int LaborHedSeq;
        public int LaborDtlSeq;
    }

    public class GetNewLaborDtlComment_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLaborEquip_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int LaborHedSeq;
        public int LaborDtlSeq;
    }

    public class GetNewLaborEquip_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLaborPart_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public int LaborHedSeq;
        public int LaborDtlSeq;
    }

    public class GetNewLaborPart_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class GetNewLaborDtlGroup_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
        public string EmployeeNum;
    }

    public class GetNewLaborDtlGroup_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class DeleteByID_InputModel
    {
        public int LaborHedSeq;
    }

    public class GetByID_InputModel
    {
        public int LaborHedSeq;
    }

    public class GetByID_OutputModel
    {
        public Erp.Tablesets.LaborTableset _Return;
    }

    public class GetList_InputModel
    {
        public string WhereClause;
        public int PageSize;
        public int AbsolutePage;
    }

    public class GetList_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.LaborHedListTableset _Return;
    }

    public class GetRows_InputModel
    {
        public string WhereClauseLaborHed;
        public string WhereClauseLaborDtl;
        public string WhereClauseLaborDtlAttch;
        public string WhereClauseLaborDtlAction;
        public string WhereClauseLaborDtlComment;
        public string WhereClauseLaborEquip;
        public string WhereClauseLaborPart;
        public string WhereClauseLbrScrapSerialNumbers;
        public string WhereClauseLaborDtlGroup;
        public string WhereClauseSelectedSerialNumbers;
        public string WhereClauseSNFormat;
        public string WhereClauseTimeWeeklyView;
        public string WhereClauseTimeWorkHours;
        public int PageSize;
        public int AbsolutePage;
    }

    public class GetRows_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.LaborTableset _Return;
    }

    public class GetBySysRowID_InputModel
    {
        public System.Guid Id;
    }

    public class GetBySysRowID_OutputModel
    {
        public Erp.Tablesets.LaborTableset _Return;
    }

    public class GetBySysRowIDs_InputModel
    {
        public System.Collections.Generic.List<System.Guid> Ids;
    }

    public class GetBySysRowIDs_OutputModel
    {
        public Erp.Tablesets.LaborTableset _Return;
    }

    public class Update_InputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class Update_OutputModel
    {
        public Erp.Tablesets.LaborTableset Ds;
    }

    public class UpdateExt_InputModel
    {
        public Erp.Tablesets.UpdExtLaborTableset Ds;
        public bool ContinueProcessingOnError;
        public bool RollbackParentOnChildError;
    }

    public class UpdateExt_OutputModel
    {
        public Erp.Tablesets.UpdExtLaborTableset Ds;
        public bool ErrorsOccurred;
        public Ice.BOUpdErrorTableset _Return;
    }
}
