#pragma warning disable 1591    // Disable XML comment warnings for this file.

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;

using Epicor.Data;
using Epicor.Hosting;

using Ice;

#region Service related namespaces

using Erp.Contracts;
using Erp.Tablesets;

#endregion // Service related namespaces

namespace Erp.Services.BO
{
    [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.400.0")]
    public sealed class LaborSvcFacade : Epicor.Customization.Bpm.SvcFacadeBase<ErpContext, LaborSvcContract, LaborSvc>, LaborSvcContract
    {
        #region Data members

        #endregion // Data members

        public LaborSvcFacade()
            : base("Erp:BO:Labor")
        {
        }

        public LaborSvcFacade(ErpContext ctx)
            : base("Erp:BO:Labor", ctx)
        {
        }

        #region LaborSvcContract Members

        public string BuildJobOperPrjRoleList(string ipJobNum, int ipAssemblySeq, int ipOprSeq, string ipEmpID, out string whereClause)
        {
            try
            {
                using (var adapter = this.GetImplementation("BuildJobOperPrjRoleList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipJobNum", ipJobNum);
                        extension___parameters.Add("ipAssemblySeq", ipAssemblySeq);
                        extension___parameters.Add("ipOprSeq", ipOprSeq);
                        extension___parameters.Add("ipEmpID", ipEmpID);
                        extension___implementation.BeforeMethod("BuildJobOperPrjRoleList", extension___parameters);
                    }

                    var _return = adapter.Impl.BuildJobOperPrjRoleList(ipJobNum, ipAssemblySeq, ipOprSeq, ipEmpID, out whereClause);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipJobNum", ipJobNum);
                        extension___parameters.Add("ipAssemblySeq", ipAssemblySeq);
                        extension___parameters.Add("ipOprSeq", ipOprSeq);
                        extension___parameters.Add("ipEmpID", ipEmpID);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___implementation.AfterMethod("BuildJobOperPrjRoleList", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeEquipID(string equipID, ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeEquipID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("equipID", equipID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeEquipID", extension___parameters);
                    }

                    adapter.Impl.ChangeEquipID(equipID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("equipID", equipID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeEquipID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeIndirectCode(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeIndirectCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeIndirectCode", extension___parameters);
                    }

                    adapter.Impl.ChangeIndirectCode(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeIndirectCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeLaborType(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeLaborType"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeLaborType", extension___parameters);
                    }

                    adapter.Impl.ChangeLaborType(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeLaborType", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckResourceId(string resourceGrpId, string proposedResId, out string pcMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckResourceId"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("resourceGrpId", resourceGrpId);
                        extension___parameters.Add("proposedResId", proposedResId);
                        extension___implementation.BeforeMethod("CheckResourceId", extension___parameters);
                    }

                    adapter.Impl.CheckResourceId(resourceGrpId, proposedResId, out pcMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("resourceGrpId", resourceGrpId);
                        extension___parameters.Add("proposedResId", proposedResId);
                        extension___parameters.Add("pcMsg", pcMsg);
                        extension___implementation.AfterMethod("CheckResourceId", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeResourceId(ref Erp.Tablesets.LaborTableset ds, string pcResourceID, out string pcMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeResourceId"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pcResourceID", pcResourceID);
                        extension___implementation.BeforeMethod("ChangeResourceId", extension___parameters);
                    }

                    adapter.Impl.ChangeResourceId(ref ds, pcResourceID, out pcMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pcResourceID", pcResourceID);
                        extension___parameters.Add("pcMsg", pcMsg);
                        extension___implementation.AfterMethod("ChangeResourceId", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckEmployeeActivity(string ipEmpID, int ipLaborHedSeq, string ipJobNum, int ipAsmSeq, int ipOprSeq, string ipResourceID, out string opMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckEmployeeActivity"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipEmpID", ipEmpID);
                        extension___parameters.Add("ipLaborHedSeq", ipLaborHedSeq);
                        extension___parameters.Add("ipJobNum", ipJobNum);
                        extension___parameters.Add("ipAsmSeq", ipAsmSeq);
                        extension___parameters.Add("ipOprSeq", ipOprSeq);
                        extension___parameters.Add("ipResourceID", ipResourceID);
                        extension___implementation.BeforeMethod("CheckEmployeeActivity", extension___parameters);
                    }

                    adapter.Impl.CheckEmployeeActivity(ipEmpID, ipLaborHedSeq, ipJobNum, ipAsmSeq, ipOprSeq, ipResourceID, out opMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipEmpID", ipEmpID);
                        extension___parameters.Add("ipLaborHedSeq", ipLaborHedSeq);
                        extension___parameters.Add("ipJobNum", ipJobNum);
                        extension___parameters.Add("ipAsmSeq", ipAsmSeq);
                        extension___parameters.Add("ipOprSeq", ipOprSeq);
                        extension___parameters.Add("ipResourceID", ipResourceID);
                        extension___parameters.Add("opMessage", opMessage);
                        extension___implementation.AfterMethod("CheckEmployeeActivity", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckNonConformance(string jobNum, int laborHedSeq, int laborDtlSeq, out string pcMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckNonConformance"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.BeforeMethod("CheckNonConformance", extension___parameters);
                    }

                    adapter.Impl.CheckNonConformance(jobNum, laborHedSeq, laborDtlSeq, out pcMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___parameters.Add("pcMsg", pcMsg);
                        extension___implementation.AfterMethod("CheckNonConformance", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckFirstArticleWarning(ref Erp.Tablesets.LaborTableset ds, out string pcMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckFirstArticleWarning"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CheckFirstArticleWarning", extension___parameters);
                    }

                    adapter.Impl.CheckFirstArticleWarning(ref ds, out pcMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pcMsg", pcMsg);
                        extension___implementation.AfterMethod("CheckFirstArticleWarning", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckInspResults(string ipJobNum, int ipAssemblySeq, int ipOprSeq, out bool inspectionOK)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckInspResults"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipJobNum", ipJobNum);
                        extension___parameters.Add("ipAssemblySeq", ipAssemblySeq);
                        extension___parameters.Add("ipOprSeq", ipOprSeq);
                        extension___implementation.BeforeMethod("CheckInspResults", extension___parameters);
                    }

                    adapter.Impl.CheckInspResults(ipJobNum, ipAssemblySeq, ipOprSeq, out inspectionOK);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipJobNum", ipJobNum);
                        extension___parameters.Add("ipAssemblySeq", ipAssemblySeq);
                        extension___parameters.Add("ipOprSeq", ipOprSeq);
                        extension___parameters.Add("inspectionOK", inspectionOK);
                        extension___implementation.AfterMethod("CheckInspResults", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckResourceGroup(ref Erp.Tablesets.LaborTableset ds, string ProposedResourceID, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckResourceGroup"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedResourceID", ProposedResourceID);
                        extension___implementation.BeforeMethod("CheckResourceGroup", extension___parameters);
                    }

                    adapter.Impl.CheckResourceGroup(ref ds, ProposedResourceID, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedResourceID", ProposedResourceID);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("CheckResourceGroup", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckWarnings(ref Erp.Tablesets.LaborTableset ds, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckWarnings"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CheckWarnings", extension___parameters);
                    }

                    adapter.Impl.CheckWarnings(ref ds, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("CheckWarnings", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void chkReportQtyShopWarn(string company, string jobNum, int assemblySeq, int oprSeq, string empID, bool activeTrans, out string pcMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("chkReportQtyShopWarn"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("company", company);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___parameters.Add("assemblySeq", assemblySeq);
                        extension___parameters.Add("oprSeq", oprSeq);
                        extension___parameters.Add("empID", empID);
                        extension___parameters.Add("activeTrans", activeTrans);
                        extension___implementation.BeforeMethod("chkReportQtyShopWarn", extension___parameters);
                    }

                    adapter.Impl.chkReportQtyShopWarn(company, jobNum, assemblySeq, oprSeq, empID, activeTrans, out pcMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("company", company);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___parameters.Add("assemblySeq", assemblySeq);
                        extension___parameters.Add("oprSeq", oprSeq);
                        extension___parameters.Add("empID", empID);
                        extension___parameters.Add("activeTrans", activeTrans);
                        extension___parameters.Add("pcMsg", pcMsg);
                        extension___implementation.AfterMethod("chkReportQtyShopWarn", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CopyLaborDetail(ref Erp.Tablesets.LaborTableset ds, out string cMessageText)
        {
            try
            {
                using (var adapter = this.GetImplementation("CopyLaborDetail"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CopyLaborDetail", extension___parameters);
                    }

                    adapter.Impl.CopyLaborDetail(ref ds, out cMessageText);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cMessageText", cMessageText);
                        extension___implementation.AfterMethod("CopyLaborDetail", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CopyTimeWeeklyView(ref Erp.Tablesets.LaborTableset ds, out string cMessageText)
        {
            try
            {
                using (var adapter = this.GetImplementation("CopyTimeWeeklyView"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CopyTimeWeeklyView", extension___parameters);
                    }

                    adapter.Impl.CopyTimeWeeklyView(ref ds, out cMessageText);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cMessageText", cMessageText);
                        extension___implementation.AfterMethod("CopyTimeWeeklyView", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultAssemblySeq(ref Erp.Tablesets.LaborTableset ds, int assemblySeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultAssemblySeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("assemblySeq", assemblySeq);
                        extension___implementation.BeforeMethod("DefaultAssemblySeq", extension___parameters);
                    }

                    adapter.Impl.DefaultAssemblySeq(ref ds, assemblySeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("assemblySeq", assemblySeq);
                        extension___implementation.AfterMethod("DefaultAssemblySeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultComplete(ref Erp.Tablesets.LaborTableset ds, bool cmplete, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultComplete"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cmplete", cmplete);
                        extension___implementation.BeforeMethod("DefaultComplete", extension___parameters);
                    }

                    adapter.Impl.DefaultComplete(ref ds, cmplete, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cmplete", cmplete);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("DefaultComplete", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultDate(ref Erp.Tablesets.LaborTableset ds, System.DateTime? payrollDate)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultDate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("payrollDate", payrollDate);
                        extension___implementation.BeforeMethod("DefaultDate", extension___parameters);
                    }

                    adapter.Impl.DefaultDate(ref ds, payrollDate);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("payrollDate", payrollDate);
                        extension___implementation.AfterMethod("DefaultDate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultDiscrpRsnCode(ref Erp.Tablesets.LaborTableset ds, string ProposedDiscrpRsnCode)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultDiscrpRsnCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedDiscrpRsnCode", ProposedDiscrpRsnCode);
                        extension___implementation.BeforeMethod("DefaultDiscrpRsnCode", extension___parameters);
                    }

                    adapter.Impl.DefaultDiscrpRsnCode(ref ds, ProposedDiscrpRsnCode);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedDiscrpRsnCode", ProposedDiscrpRsnCode);
                        extension___implementation.AfterMethod("DefaultDiscrpRsnCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultReworkReasonCode(ref Erp.Tablesets.LaborTableset ds, string ProposedReworkReasonCode)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultReworkReasonCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedReworkReasonCode", ProposedReworkReasonCode);
                        extension___implementation.BeforeMethod("DefaultReworkReasonCode", extension___parameters);
                    }

                    adapter.Impl.DefaultReworkReasonCode(ref ds, ProposedReworkReasonCode);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedReworkReasonCode", ProposedReworkReasonCode);
                        extension___implementation.AfterMethod("DefaultReworkReasonCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultDtlTime(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultDtlTime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("DefaultDtlTime", extension___parameters);
                    }

                    adapter.Impl.DefaultDtlTime(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("DefaultDtlTime", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultIndirect(ref Erp.Tablesets.LaborTableset ds, string indirectCode)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultIndirect"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("indirectCode", indirectCode);
                        extension___implementation.BeforeMethod("DefaultIndirect", extension___parameters);
                    }

                    adapter.Impl.DefaultIndirect(ref ds, indirectCode);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("indirectCode", indirectCode);
                        extension___implementation.AfterMethod("DefaultIndirect", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SelectAllForWork(ref Erp.Tablesets.LaborTableset laborDS, Erp.Tablesets.WorkQueueTable selectedWorkQueueRows, string empID, string resourceGrpID, string resourceID, string laborType, out string warningsMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("SelectAllForWork"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("laborDS", laborDS);
                        extension___parameters.Add("selectedWorkQueueRows", selectedWorkQueueRows);
                        extension___parameters.Add("empID", empID);
                        extension___parameters.Add("resourceGrpID", resourceGrpID);
                        extension___parameters.Add("resourceID", resourceID);
                        extension___parameters.Add("laborType", laborType);
                        extension___implementation.BeforeMethod("SelectAllForWork", extension___parameters);
                    }

                    adapter.Impl.SelectAllForWork(ref laborDS, selectedWorkQueueRows, empID, resourceGrpID, resourceID, laborType, out warningsMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("laborDS", laborDS);
                        extension___parameters.Add("selectedWorkQueueRows", selectedWorkQueueRows);
                        extension___parameters.Add("empID", empID);
                        extension___parameters.Add("resourceGrpID", resourceGrpID);
                        extension___parameters.Add("resourceID", resourceID);
                        extension___parameters.Add("laborType", laborType);
                        extension___parameters.Add("warningsMsg", warningsMsg);
                        extension___implementation.AfterMethod("SelectAllForWork", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(laborDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultJobNum(ref Erp.Tablesets.LaborTableset ds, string jobNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultJobNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___implementation.BeforeMethod("DefaultJobNum", extension___parameters);
                    }

                    adapter.Impl.DefaultJobNum(ref ds, jobNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___implementation.AfterMethod("DefaultJobNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultLaborHrs(ref Erp.Tablesets.LaborTableset ds, decimal laborHrs)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultLaborHrs"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHrs", laborHrs);
                        extension___implementation.BeforeMethod("DefaultLaborHrs", extension___parameters);
                    }

                    adapter.Impl.DefaultLaborHrs(ref ds, laborHrs);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHrs", laborHrs);
                        extension___implementation.AfterMethod("DefaultLaborHrs", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultLaborQty(ref Erp.Tablesets.LaborTableset ds, decimal laborQty, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultLaborQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborQty", laborQty);
                        extension___implementation.BeforeMethod("DefaultLaborQty", extension___parameters);
                    }

                    adapter.Impl.DefaultLaborQty(ref ds, laborQty, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborQty", laborQty);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("DefaultLaborQty", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultNonConformanceQty(ref Erp.Tablesets.LaborTableset ds, decimal nonConformanceQty)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultNonConformanceQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("nonConformanceQty", nonConformanceQty);
                        extension___implementation.BeforeMethod("DefaultNonConformanceQty", extension___parameters);
                    }

                    adapter.Impl.DefaultNonConformanceQty(ref ds, nonConformanceQty);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("nonConformanceQty", nonConformanceQty);
                        extension___implementation.AfterMethod("DefaultNonConformanceQty", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void VerifyScrapQty(ref Erp.Tablesets.LaborTableset ds, decimal scrapQty, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("VerifyScrapQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("scrapQty", scrapQty);
                        extension___implementation.BeforeMethod("VerifyScrapQty", extension___parameters);
                    }

                    adapter.Impl.VerifyScrapQty(ref ds, scrapQty, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("scrapQty", scrapQty);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("VerifyScrapQty", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangePartQty(ref Erp.Tablesets.LaborTableset ds, decimal partQty, System.Guid sysRowID, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangePartQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("partQty", partQty);
                        extension___parameters.Add("sysRowID", sysRowID);
                        extension___implementation.BeforeMethod("OnChangePartQty", extension___parameters);
                    }

                    adapter.Impl.OnChangePartQty(ref ds, partQty, sysRowID, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("partQty", partQty);
                        extension___parameters.Add("sysRowID", sysRowID);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("OnChangePartQty", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultLaborType(ref Erp.Tablesets.LaborTableset ds, string ipLaborType)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultLaborType"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipLaborType", ipLaborType);
                        extension___implementation.BeforeMethod("DefaultLaborType", extension___parameters);
                    }

                    adapter.Impl.DefaultLaborType(ref ds, ipLaborType);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipLaborType", ipLaborType);
                        extension___implementation.AfterMethod("DefaultLaborType", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultLunchBreak(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultLunchBreak"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("DefaultLunchBreak", extension___parameters);
                    }

                    adapter.Impl.DefaultLunchBreak(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("DefaultLunchBreak", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultNextOprSeq(ref Erp.Tablesets.LaborTableset ds, int ProposedNextOprSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultNextOprSeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedNextOprSeq", ProposedNextOprSeq);
                        extension___implementation.BeforeMethod("DefaultNextOprSeq", extension___parameters);
                    }

                    adapter.Impl.DefaultNextOprSeq(ref ds, ProposedNextOprSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedNextOprSeq", ProposedNextOprSeq);
                        extension___implementation.AfterMethod("DefaultNextOprSeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultOpCode(ref Erp.Tablesets.LaborTableset ds, string opCode, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultOpCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("opCode", opCode);
                        extension___implementation.BeforeMethod("DefaultOpCode", extension___parameters);
                    }

                    adapter.Impl.DefaultOpCode(ref ds, opCode, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("opCode", opCode);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("DefaultOpCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultOprSeq(ref Erp.Tablesets.LaborTableset ds, int oprSeq, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultOprSeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("oprSeq", oprSeq);
                        extension___implementation.BeforeMethod("DefaultOprSeq", extension___parameters);
                    }

                    adapter.Impl.DefaultOprSeq(ref ds, oprSeq, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("oprSeq", oprSeq);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("DefaultOprSeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborDtlOnSelectForWork(ref Erp.Tablesets.LaborTableset ds, int laborHedSeq, string sJobNum, int iAssemblySeq, int iOprSeq, string sResourceGrpID, string setupOrProd, out bool bMachinePrompt)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborDtlOnSelectForWork"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("sJobNum", sJobNum);
                        extension___parameters.Add("iAssemblySeq", iAssemblySeq);
                        extension___parameters.Add("iOprSeq", iOprSeq);
                        extension___parameters.Add("sResourceGrpID", sResourceGrpID);
                        extension___parameters.Add("setupOrProd", setupOrProd);
                        extension___implementation.BeforeMethod("GetNewLaborDtlOnSelectForWork", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborDtlOnSelectForWork(ref ds, laborHedSeq, sJobNum, iAssemblySeq, iOprSeq, sResourceGrpID, setupOrProd, out bMachinePrompt);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("sJobNum", sJobNum);
                        extension___parameters.Add("iAssemblySeq", iAssemblySeq);
                        extension___parameters.Add("iOprSeq", iOprSeq);
                        extension___parameters.Add("sResourceGrpID", sResourceGrpID);
                        extension___parameters.Add("setupOrProd", setupOrProd);
                        extension___parameters.Add("bMachinePrompt", bMachinePrompt);
                        extension___implementation.AfterMethod("GetNewLaborDtlOnSelectForWork", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultPhaseID(ref Erp.Tablesets.LaborTableset ds, string ipPhaseID)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultPhaseID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipPhaseID", ipPhaseID);
                        extension___implementation.BeforeMethod("DefaultPhaseID", extension___parameters);
                    }

                    adapter.Impl.DefaultPhaseID(ref ds, ipPhaseID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipPhaseID", ipPhaseID);
                        extension___implementation.AfterMethod("DefaultPhaseID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultPhaseOprSeq(ref Erp.Tablesets.LaborTableset ds, int ipPhaseOprSeq, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultPhaseOprSeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipPhaseOprSeq", ipPhaseOprSeq);
                        extension___implementation.BeforeMethod("DefaultPhaseOprSeq", extension___parameters);
                    }

                    adapter.Impl.DefaultPhaseOprSeq(ref ds, ipPhaseOprSeq, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipPhaseOprSeq", ipPhaseOprSeq);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("DefaultPhaseOprSeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultProjectID(ref Erp.Tablesets.LaborTableset ds, string ipProjectID)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultProjectID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipProjectID", ipProjectID);
                        extension___implementation.BeforeMethod("DefaultProjectID", extension___parameters);
                    }

                    adapter.Impl.DefaultProjectID(ref ds, ipProjectID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipProjectID", ipProjectID);
                        extension___implementation.AfterMethod("DefaultProjectID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultResourceID(ref Erp.Tablesets.LaborTableset ds, string ProposedResourceID)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultResourceID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedResourceID", ProposedResourceID);
                        extension___implementation.BeforeMethod("DefaultResourceID", extension___parameters);
                    }

                    adapter.Impl.DefaultResourceID(ref ds, ProposedResourceID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedResourceID", ProposedResourceID);
                        extension___implementation.AfterMethod("DefaultResourceID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultRoleCd(ref Erp.Tablesets.LaborTableset ds, string ipRoleCd)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultRoleCd"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipRoleCd", ipRoleCd);
                        extension___implementation.BeforeMethod("DefaultRoleCd", extension___parameters);
                    }

                    adapter.Impl.DefaultRoleCd(ref ds, ipRoleCd);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipRoleCd", ipRoleCd);
                        extension___implementation.AfterMethod("DefaultRoleCd", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultScrapReasonCode(ref Erp.Tablesets.LaborTableset ds, string ProposedScrapReasonCode, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultScrapReasonCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedScrapReasonCode", ProposedScrapReasonCode);
                        extension___implementation.BeforeMethod("DefaultScrapReasonCode", extension___parameters);
                    }

                    adapter.Impl.DefaultScrapReasonCode(ref ds, ProposedScrapReasonCode, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedScrapReasonCode", ProposedScrapReasonCode);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("DefaultScrapReasonCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultSetupPctComplete(ref Erp.Tablesets.LaborTableset ds, decimal PercentComplete)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultSetupPctComplete"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("PercentComplete", PercentComplete);
                        extension___implementation.BeforeMethod("DefaultSetupPctComplete", extension___parameters);
                    }

                    adapter.Impl.DefaultSetupPctComplete(ref ds, PercentComplete);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("PercentComplete", PercentComplete);
                        extension___implementation.AfterMethod("DefaultSetupPctComplete", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultShift(ref Erp.Tablesets.LaborTableset ds, int shift)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultShift"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("shift", shift);
                        extension___implementation.BeforeMethod("DefaultShift", extension___parameters);
                    }

                    adapter.Impl.DefaultShift(ref ds, shift);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("shift", shift);
                        extension___implementation.AfterMethod("DefaultShift", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultTime(ref Erp.Tablesets.LaborTableset ds, string cFieldName, decimal timeValue)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultTime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cFieldName", cFieldName);
                        extension___parameters.Add("timeValue", timeValue);
                        extension___implementation.BeforeMethod("DefaultTime", extension___parameters);
                    }

                    adapter.Impl.DefaultTime(ref ds, cFieldName, timeValue);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cFieldName", cFieldName);
                        extension___parameters.Add("timeValue", timeValue);
                        extension___implementation.AfterMethod("DefaultTime", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultTimeTypCd(ref Erp.Tablesets.LaborTableset ds, string ipTimeTypCd, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultTimeTypCd"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipTimeTypCd", ipTimeTypCd);
                        extension___implementation.BeforeMethod("DefaultTimeTypCd", extension___parameters);
                    }

                    adapter.Impl.DefaultTimeTypCd(ref ds, ipTimeTypCd, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipTimeTypCd", ipTimeTypCd);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("DefaultTimeTypCd", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DefaultWCCode(ref Erp.Tablesets.LaborTableset ds, string wcCode, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("DefaultWCCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("wcCode", wcCode);
                        extension___implementation.BeforeMethod("DefaultWCCode", extension___parameters);
                    }

                    adapter.Impl.DefaultWCCode(ref ds, wcCode, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("wcCode", wcCode);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("DefaultWCCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool DeleteLaborDtl(int LaborHedSeq, int LaborDtlSeq, string CallFrom, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeleteLaborDtl"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("LaborHedSeq", LaborHedSeq);
                        extension___parameters.Add("LaborDtlSeq", LaborDtlSeq);
                        extension___parameters.Add("CallFrom", CallFrom);
                        extension___implementation.BeforeMethod("DeleteLaborDtl", extension___parameters);
                    }

                    var _return = adapter.Impl.DeleteLaborDtl(LaborHedSeq, LaborDtlSeq, CallFrom, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("LaborHedSeq", LaborHedSeq);
                        extension___parameters.Add("LaborDtlSeq", LaborDtlSeq);
                        extension___parameters.Add("CallFrom", CallFrom);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("DeleteLaborDtl", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void EndActivity(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("EndActivity"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("EndActivity", extension___parameters);
                    }

                    adapter.Impl.EndActivity(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("EndActivity", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void EndActivityComplete(ref Erp.Tablesets.LaborTableset ds, bool cmplete, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("EndActivityComplete"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cmplete", cmplete);
                        extension___implementation.BeforeMethod("EndActivityComplete", extension___parameters);
                    }

                    adapter.Impl.EndActivityComplete(ref ds, cmplete, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("cmplete", cmplete);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("EndActivityComplete", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.LaborTableset GetActiveLaborDtl(string employeeNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetActiveLaborDtl"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___implementation.BeforeMethod("GetActiveLaborDtl", extension___parameters);
                    }

                    var _return = adapter.Impl.GetActiveLaborDtl(employeeNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___implementation.AfterMethod("GetActiveLaborDtl", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void InitiateDowntime(string employeeNum, string indirectCode, string indirectNote)
        {
            try
            {
                using (var adapter = this.GetImplementation("InitiateDowntime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___parameters.Add("indirectCode", indirectCode);
                        extension___parameters.Add("indirectNote", indirectNote);
                        extension___implementation.BeforeMethod("InitiateDowntime", extension___parameters);
                    }

                    adapter.Impl.InitiateDowntime(employeeNum, indirectCode, indirectNote);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___parameters.Add("indirectCode", indirectCode);
                        extension___parameters.Add("indirectNote", indirectNote);
                        extension___implementation.AfterMethod("InitiateDowntime", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void EndDowntime(string employeeNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("EndDowntime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___implementation.BeforeMethod("EndDowntime", extension___parameters);
                    }

                    adapter.Impl.EndDowntime(employeeNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___implementation.AfterMethod("EndDowntime", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.LaborTableset GetDetail(int iLaborHedSeq, int iLaborDtlSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetDetail"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("iLaborHedSeq", iLaborHedSeq);
                        extension___parameters.Add("iLaborDtlSeq", iLaborDtlSeq);
                        extension___implementation.BeforeMethod("GetDetail", extension___parameters);
                    }

                    var _return = adapter.Impl.GetDetail(iLaborHedSeq, iLaborDtlSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("iLaborHedSeq", iLaborHedSeq);
                        extension___parameters.Add("iLaborDtlSeq", iLaborDtlSeq);
                        extension___implementation.AfterMethod("GetDetail", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public decimal getElapsedTime(System.DateTime startDate, decimal startTime)
        {
            try
            {
                using (var adapter = this.GetImplementation("getElapsedTime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("startDate", startDate);
                        extension___parameters.Add("startTime", startTime);
                        extension___implementation.BeforeMethod("getElapsedTime", extension___parameters);
                    }

                    var _return = adapter.Impl.getElapsedTime(startDate, startTime);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("startDate", startDate);
                        extension___parameters.Add("startTime", startTime);
                        extension___implementation.AfterMethod("getElapsedTime", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborDtlNoHdr(ref Erp.Tablesets.LaborTableset ds, string EmployeeNum, bool ShopFloor, System.DateTime? ClockInDate, decimal ClockInTime, System.DateTime? ClockOutDate, decimal ClockOutTime)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborDtlNoHdr"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("EmployeeNum", EmployeeNum);
                        extension___parameters.Add("ShopFloor", ShopFloor);
                        extension___parameters.Add("ClockInDate", ClockInDate);
                        extension___parameters.Add("ClockInTime", ClockInTime);
                        extension___parameters.Add("ClockOutDate", ClockOutDate);
                        extension___parameters.Add("ClockOutTime", ClockOutTime);
                        extension___implementation.BeforeMethod("GetNewLaborDtlNoHdr", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborDtlNoHdr(ref ds, EmployeeNum, ShopFloor, ClockInDate, ClockInTime, ClockOutDate, ClockOutTime);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("EmployeeNum", EmployeeNum);
                        extension___parameters.Add("ShopFloor", ShopFloor);
                        extension___parameters.Add("ClockInDate", ClockInDate);
                        extension___parameters.Add("ClockInTime", ClockInTime);
                        extension___parameters.Add("ClockOutDate", ClockOutDate);
                        extension___parameters.Add("ClockOutTime", ClockOutTime);
                        extension___implementation.AfterMethod("GetNewLaborDtlNoHdr", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborDtlWithHdr(ref Erp.Tablesets.LaborTableset ds, System.DateTime? ipClockInDate, decimal ipClockInTime, System.DateTime? ipClockOutDate, decimal ipClockOutTime, int ipLaborHedSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborDtlWithHdr"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipClockInDate", ipClockInDate);
                        extension___parameters.Add("ipClockInTime", ipClockInTime);
                        extension___parameters.Add("ipClockOutDate", ipClockOutDate);
                        extension___parameters.Add("ipClockOutTime", ipClockOutTime);
                        extension___parameters.Add("ipLaborHedSeq", ipLaborHedSeq);
                        extension___implementation.BeforeMethod("GetNewLaborDtlWithHdr", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborDtlWithHdr(ref ds, ipClockInDate, ipClockInTime, ipClockOutDate, ipClockOutTime, ipLaborHedSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipClockInDate", ipClockInDate);
                        extension___parameters.Add("ipClockInTime", ipClockInTime);
                        extension___parameters.Add("ipClockOutDate", ipClockOutDate);
                        extension___parameters.Add("ipClockOutTime", ipClockOutTime);
                        extension___parameters.Add("ipLaborHedSeq", ipLaborHedSeq);
                        extension___implementation.AfterMethod("GetNewLaborDtlWithHdr", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborHed1(ref Erp.Tablesets.LaborTableset ds, string EmployeeNum, bool ShopFloor, System.DateTime? payrollDate)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborHed1"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("EmployeeNum", EmployeeNum);
                        extension___parameters.Add("ShopFloor", ShopFloor);
                        extension___parameters.Add("payrollDate", payrollDate);
                        extension___implementation.BeforeMethod("GetNewLaborHed1", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborHed1(ref ds, EmployeeNum, ShopFloor, payrollDate);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("EmployeeNum", EmployeeNum);
                        extension___parameters.Add("ShopFloor", ShopFloor);
                        extension___parameters.Add("payrollDate", payrollDate);
                        extension___implementation.AfterMethod("GetNewLaborHed1", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLbrScrapSerialNumbers(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLbrScrapSerialNumbers"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewLbrScrapSerialNumbers", extension___parameters);
                    }

                    adapter.Impl.GetNewLbrScrapSerialNumbers(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewLbrScrapSerialNumbers", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewTimeWeeklyView(ref Erp.Tablesets.LaborTableset ds, string ipEmployeeNum, System.DateTime? ipDateInWeek)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewTimeWeeklyView"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipEmployeeNum", ipEmployeeNum);
                        extension___parameters.Add("ipDateInWeek", ipDateInWeek);
                        extension___implementation.BeforeMethod("GetNewTimeWeeklyView", extension___parameters);
                    }

                    adapter.Impl.GetNewTimeWeeklyView(ref ds, ipEmployeeNum, ipDateInWeek);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipEmployeeNum", ipEmployeeNum);
                        extension___parameters.Add("ipDateInWeek", ipDateInWeek);
                        extension___implementation.AfterMethod("GetNewTimeWeeklyView", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.LaborTableset GetRowsCalendarView(string whereClauseLaborHed, string whereClauseLaborDtl, string whereClauseLaborDtlAttach, string whereClauseLaborDtlAction, string whereClauseLaborDtlCom, string whereClauseLaborEquip, string whereClauseLaborPart, string whereClauseLbrScrapSerialNumbers, string whereClauseTimeWorkHours, string whereClauseTimeWeeklyView, string whereClauseLaborDtlGroup, string whereClauseSelectedSerialNumbers, string whereClauseSNFormat, int pageSize, int absolutePage, string ipEmployeeNum, System.DateTime? ipCalendarStartDate, System.DateTime? ipCalendarEndDate, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRowsCalendarView"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseLaborHed", whereClauseLaborHed);
                        extension___parameters.Add("whereClauseLaborDtl", whereClauseLaborDtl);
                        extension___parameters.Add("whereClauseLaborDtlAttach", whereClauseLaborDtlAttach);
                        extension___parameters.Add("whereClauseLaborDtlAction", whereClauseLaborDtlAction);
                        extension___parameters.Add("whereClauseLaborDtlCom", whereClauseLaborDtlCom);
                        extension___parameters.Add("whereClauseLaborEquip", whereClauseLaborEquip);
                        extension___parameters.Add("whereClauseLaborPart", whereClauseLaborPart);
                        extension___parameters.Add("whereClauseLbrScrapSerialNumbers", whereClauseLbrScrapSerialNumbers);
                        extension___parameters.Add("whereClauseTimeWorkHours", whereClauseTimeWorkHours);
                        extension___parameters.Add("whereClauseTimeWeeklyView", whereClauseTimeWeeklyView);
                        extension___parameters.Add("whereClauseLaborDtlGroup", whereClauseLaborDtlGroup);
                        extension___parameters.Add("whereClauseSelectedSerialNumbers", whereClauseSelectedSerialNumbers);
                        extension___parameters.Add("whereClauseSNFormat", whereClauseSNFormat);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("ipEmployeeNum", ipEmployeeNum);
                        extension___parameters.Add("ipCalendarStartDate", ipCalendarStartDate);
                        extension___parameters.Add("ipCalendarEndDate", ipCalendarEndDate);
                        extension___implementation.BeforeMethod("GetRowsCalendarView", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRowsCalendarView(whereClauseLaborHed, whereClauseLaborDtl, whereClauseLaborDtlAttach, whereClauseLaborDtlAction, whereClauseLaborDtlCom, whereClauseLaborEquip, whereClauseLaborPart, whereClauseLbrScrapSerialNumbers, whereClauseTimeWorkHours, whereClauseTimeWeeklyView, whereClauseLaborDtlGroup, whereClauseSelectedSerialNumbers, whereClauseSNFormat, pageSize, absolutePage, ipEmployeeNum, ipCalendarStartDate, ipCalendarEndDate, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseLaborHed", whereClauseLaborHed);
                        extension___parameters.Add("whereClauseLaborDtl", whereClauseLaborDtl);
                        extension___parameters.Add("whereClauseLaborDtlAttach", whereClauseLaborDtlAttach);
                        extension___parameters.Add("whereClauseLaborDtlAction", whereClauseLaborDtlAction);
                        extension___parameters.Add("whereClauseLaborDtlCom", whereClauseLaborDtlCom);
                        extension___parameters.Add("whereClauseLaborEquip", whereClauseLaborEquip);
                        extension___parameters.Add("whereClauseLaborPart", whereClauseLaborPart);
                        extension___parameters.Add("whereClauseLbrScrapSerialNumbers", whereClauseLbrScrapSerialNumbers);
                        extension___parameters.Add("whereClauseTimeWorkHours", whereClauseTimeWorkHours);
                        extension___parameters.Add("whereClauseTimeWeeklyView", whereClauseTimeWeeklyView);
                        extension___parameters.Add("whereClauseLaborDtlGroup", whereClauseLaborDtlGroup);
                        extension___parameters.Add("whereClauseSelectedSerialNumbers", whereClauseSelectedSerialNumbers);
                        extension___parameters.Add("whereClauseSNFormat", whereClauseSNFormat);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("ipEmployeeNum", ipEmployeeNum);
                        extension___parameters.Add("ipCalendarStartDate", ipCalendarStartDate);
                        extension___parameters.Add("ipCalendarEndDate", ipCalendarEndDate);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetRowsCalendarView", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.LaborTableset GetRowsWhoIsHere(string whereClauseLaborHed, string whereClauseLaborDtl, string whereClauseLaborDtlCom, string whereClauseLaborEquip, string whereClauseLaborPart, string whereClauseLbrScrapSerialNumbers, string whereClauseTimeWorkHours, string whereClauseTimeWeeklyView, string whereClauseLaborDtlGroup, string whereClauseSelectedSerialNumbers, string whereClauseSNFormat, int pageSize, int absolutePage, string ipSupervisorID, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRowsWhoIsHere"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseLaborHed", whereClauseLaborHed);
                        extension___parameters.Add("whereClauseLaborDtl", whereClauseLaborDtl);
                        extension___parameters.Add("whereClauseLaborDtlCom", whereClauseLaborDtlCom);
                        extension___parameters.Add("whereClauseLaborEquip", whereClauseLaborEquip);
                        extension___parameters.Add("whereClauseLaborPart", whereClauseLaborPart);
                        extension___parameters.Add("whereClauseLbrScrapSerialNumbers", whereClauseLbrScrapSerialNumbers);
                        extension___parameters.Add("whereClauseTimeWorkHours", whereClauseTimeWorkHours);
                        extension___parameters.Add("whereClauseTimeWeeklyView", whereClauseTimeWeeklyView);
                        extension___parameters.Add("whereClauseLaborDtlGroup", whereClauseLaborDtlGroup);
                        extension___parameters.Add("whereClauseSelectedSerialNumbers", whereClauseSelectedSerialNumbers);
                        extension___parameters.Add("whereClauseSNFormat", whereClauseSNFormat);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("ipSupervisorID", ipSupervisorID);
                        extension___implementation.BeforeMethod("GetRowsWhoIsHere", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRowsWhoIsHere(whereClauseLaborHed, whereClauseLaborDtl, whereClauseLaborDtlCom, whereClauseLaborEquip, whereClauseLaborPart, whereClauseLbrScrapSerialNumbers, whereClauseTimeWorkHours, whereClauseTimeWeeklyView, whereClauseLaborDtlGroup, whereClauseSelectedSerialNumbers, whereClauseSNFormat, pageSize, absolutePage, ipSupervisorID, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseLaborHed", whereClauseLaborHed);
                        extension___parameters.Add("whereClauseLaborDtl", whereClauseLaborDtl);
                        extension___parameters.Add("whereClauseLaborDtlCom", whereClauseLaborDtlCom);
                        extension___parameters.Add("whereClauseLaborEquip", whereClauseLaborEquip);
                        extension___parameters.Add("whereClauseLaborPart", whereClauseLaborPart);
                        extension___parameters.Add("whereClauseLbrScrapSerialNumbers", whereClauseLbrScrapSerialNumbers);
                        extension___parameters.Add("whereClauseTimeWorkHours", whereClauseTimeWorkHours);
                        extension___parameters.Add("whereClauseTimeWeeklyView", whereClauseTimeWeeklyView);
                        extension___parameters.Add("whereClauseLaborDtlGroup", whereClauseLaborDtlGroup);
                        extension___parameters.Add("whereClauseSelectedSerialNumbers", whereClauseSelectedSerialNumbers);
                        extension___parameters.Add("whereClauseSNFormat", whereClauseSNFormat);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("ipSupervisorID", ipSupervisorID);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetRowsWhoIsHere", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetTERetrieveApproved(out bool opTERetrieveApproved)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetTERetrieveApproved"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetTERetrieveApproved", extension___parameters);
                    }

                    adapter.Impl.GetTERetrieveApproved(out opTERetrieveApproved);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("opTERetrieveApproved", opTERetrieveApproved);
                        extension___implementation.AfterMethod("GetTERetrieveApproved", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetTERetrieveByOption(out bool opTERetrieveByDay, out bool opTERetrieveByWeek, out bool opTERetrieveByMonth)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetTERetrieveByOption"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetTERetrieveByOption", extension___parameters);
                    }

                    adapter.Impl.GetTERetrieveByOption(out opTERetrieveByDay, out opTERetrieveByWeek, out opTERetrieveByMonth);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("opTERetrieveByDay", opTERetrieveByDay);
                        extension___parameters.Add("opTERetrieveByWeek", opTERetrieveByWeek);
                        extension___parameters.Add("opTERetrieveByMonth", opTERetrieveByMonth);
                        extension___implementation.AfterMethod("GetTERetrieveByOption", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetTERetrieveEntered(out bool opTERetrieveEntered)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetTERetrieveEntered"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetTERetrieveEntered", extension___parameters);
                    }

                    adapter.Impl.GetTERetrieveEntered(out opTERetrieveEntered);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("opTERetrieveEntered", opTERetrieveEntered);
                        extension___implementation.AfterMethod("GetTERetrieveEntered", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetTERetrievePartiallyApproved(out bool opTERetrievePartiallyApproved)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetTERetrievePartiallyApproved"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetTERetrievePartiallyApproved", extension___parameters);
                    }

                    adapter.Impl.GetTERetrievePartiallyApproved(out opTERetrievePartiallyApproved);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("opTERetrievePartiallyApproved", opTERetrievePartiallyApproved);
                        extension___implementation.AfterMethod("GetTERetrievePartiallyApproved", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetTERetrieveRejected(out bool opTERetrieveRejected)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetTERetrieveRejected"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetTERetrieveRejected", extension___parameters);
                    }

                    adapter.Impl.GetTERetrieveRejected(out opTERetrieveRejected);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("opTERetrieveRejected", opTERetrieveRejected);
                        extension___implementation.AfterMethod("GetTERetrieveRejected", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetTERetrieveSubmitted(out bool opTERetrieveSubmitted)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetTERetrieveSubmitted"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetTERetrieveSubmitted", extension___parameters);
                    }

                    adapter.Impl.GetTERetrieveSubmitted(out opTERetrieveSubmitted);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("opTERetrieveSubmitted", opTERetrieveSubmitted);
                        extension___implementation.AfterMethod("GetTERetrieveSubmitted", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void IsValidAssembly(string pcJobNum, int piAssemblySeq, out bool plFound)
        {
            try
            {
                using (var adapter = this.GetImplementation("IsValidAssembly"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcJobNum", pcJobNum);
                        extension___parameters.Add("piAssemblySeq", piAssemblySeq);
                        extension___implementation.BeforeMethod("IsValidAssembly", extension___parameters);
                    }

                    adapter.Impl.IsValidAssembly(pcJobNum, piAssemblySeq, out plFound);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcJobNum", pcJobNum);
                        extension___parameters.Add("piAssemblySeq", piAssemblySeq);
                        extension___parameters.Add("plFound", plFound);
                        extension___implementation.AfterMethod("IsValidAssembly", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void LaborDtlAfterGetRowsWrapper(ref Erp.Tablesets.LaborDtlRow laborDtlRow)
        {
            try
            {
                using (var adapter = this.GetImplementation("LaborDtlAfterGetRowsWrapper"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("laborDtlRow", laborDtlRow);
                        extension___implementation.BeforeMethod("LaborDtlAfterGetRowsWrapper", extension___parameters);
                    }

                    adapter.Impl.LaborDtlAfterGetRowsWrapper(ref laborDtlRow);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("laborDtlRow", laborDtlRow);
                        extension___implementation.AfterMethod("LaborDtlAfterGetRowsWrapper", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void LaborRateCalc(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("LaborRateCalc"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("LaborRateCalc", extension___parameters);
                    }

                    adapter.Impl.LaborRateCalc(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("LaborRateCalc", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeClockInDate(ref Erp.Tablesets.LaborTableset ds, System.DateTime? ipClockInDate)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeClockInDate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipClockInDate", ipClockInDate);
                        extension___implementation.BeforeMethod("OnChangeClockInDate", extension___parameters);
                    }

                    adapter.Impl.OnChangeClockInDate(ref ds, ipClockInDate);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipClockInDate", ipClockInDate);
                        extension___implementation.AfterMethod("OnChangeClockInDate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangePCID(string pcid, bool isNonConformance, ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangePCID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcid", pcid);
                        extension___parameters.Add("isNonConformance", isNonConformance);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangePCID", extension___parameters);
                    }

                    adapter.Impl.OnChangePCID(pcid, isNonConformance, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcid", pcid);
                        extension___parameters.Add("isNonConformance", isNonConformance);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangePCID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeQuickEntryCode(string ipEmpID, string ipQuickEntryCode, ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeQuickEntryCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipEmpID", ipEmpID);
                        extension___parameters.Add("ipQuickEntryCode", ipQuickEntryCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeQuickEntryCode", extension___parameters);
                    }

                    adapter.Impl.OnChangeQuickEntryCode(ipEmpID, ipQuickEntryCode, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipEmpID", ipEmpID);
                        extension___parameters.Add("ipQuickEntryCode", ipQuickEntryCode);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeQuickEntryCode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeResourceGrpID(ref Erp.Tablesets.LaborTableset ds, string ipResourceGrpID)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeResourceGrpID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipResourceGrpID", ipResourceGrpID);
                        extension___implementation.BeforeMethod("OnChangeResourceGrpID", extension___parameters);
                    }

                    adapter.Impl.OnChangeResourceGrpID(ref ds, ipResourceGrpID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ipResourceGrpID", ipResourceGrpID);
                        extension___implementation.AfterMethod("OnChangeResourceGrpID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.LaborTableset OnLoadEndActivity(int iLaborHedSeq, int iLaborDtlSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnLoadEndActivity"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("iLaborHedSeq", iLaborHedSeq);
                        extension___parameters.Add("iLaborDtlSeq", iLaborDtlSeq);
                        extension___implementation.BeforeMethod("OnLoadEndActivity", extension___parameters);
                    }

                    var _return = adapter.Impl.OnLoadEndActivity(iLaborHedSeq, iLaborDtlSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("iLaborHedSeq", iLaborHedSeq);
                        extension___parameters.Add("iLaborDtlSeq", iLaborDtlSeq);
                        extension___implementation.AfterMethod("OnLoadEndActivity", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void Overrides(ref Erp.Tablesets.LaborTableset ds, string inOpCode, string inResGrpID)
        {
            try
            {
                using (var adapter = this.GetImplementation("Overrides"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("inOpCode", inOpCode);
                        extension___parameters.Add("inResGrpID", inResGrpID);
                        extension___implementation.BeforeMethod("Overrides", extension___parameters);
                    }

                    adapter.Impl.Overrides(ref ds, inOpCode, inResGrpID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("inOpCode", inOpCode);
                        extension___parameters.Add("inResGrpID", inResGrpID);
                        extension___implementation.AfterMethod("Overrides", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OverridesResource(ref Erp.Tablesets.LaborTableset ds, string ProposedResourceID)
        {
            try
            {
                using (var adapter = this.GetImplementation("OverridesResource"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedResourceID", ProposedResourceID);
                        extension___implementation.BeforeMethod("OverridesResource", extension___parameters);
                    }

                    adapter.Impl.OverridesResource(ref ds, ProposedResourceID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ProposedResourceID", ProposedResourceID);
                        extension___implementation.AfterMethod("OverridesResource", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void RecallFromApproval(ref Erp.Tablesets.LaborTableset ds, bool lWeeklyView, out string cMessageText)
        {
            try
            {
                using (var adapter = this.GetImplementation("RecallFromApproval"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("lWeeklyView", lWeeklyView);
                        extension___implementation.BeforeMethod("RecallFromApproval", extension___parameters);
                    }

                    adapter.Impl.RecallFromApproval(ref ds, lWeeklyView, out cMessageText);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("lWeeklyView", lWeeklyView);
                        extension___parameters.Add("cMessageText", cMessageText);
                        extension___implementation.AfterMethod("RecallFromApproval", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SelectForWork(ref Erp.Tablesets.LaborTableset ds, string pcResourceGrpId, string pcResourceId, string pcLaborType)
        {
            try
            {
                using (var adapter = this.GetImplementation("SelectForWork"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pcResourceGrpId", pcResourceGrpId);
                        extension___parameters.Add("pcResourceId", pcResourceId);
                        extension___parameters.Add("pcLaborType", pcLaborType);
                        extension___implementation.BeforeMethod("SelectForWork", extension___parameters);
                    }

                    adapter.Impl.SelectForWork(ref ds, pcResourceGrpId, pcResourceId, pcLaborType);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pcResourceGrpId", pcResourceGrpId);
                        extension___parameters.Add("pcResourceId", pcResourceId);
                        extension___parameters.Add("pcLaborType", pcLaborType);
                        extension___implementation.AfterMethod("SelectForWork", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SelectForWorkCheckWarnings(ref Erp.Tablesets.LaborTableset ds, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("SelectForWorkCheckWarnings"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("SelectForWorkCheckWarnings", extension___parameters);
                    }

                    adapter.Impl.SelectForWorkCheckWarnings(ref ds, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("SelectForWorkCheckWarnings", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SetClockInAndDisplayTimeMES(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("SetClockInAndDisplayTimeMES"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("SetClockInAndDisplayTimeMES", extension___parameters);
                    }

                    adapter.Impl.SetClockInAndDisplayTimeMES(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("SetClockInAndDisplayTimeMES", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SetTERetrieveApproved(bool ipTERetrieveApproved)
        {
            try
            {
                using (var adapter = this.GetImplementation("SetTERetrieveApproved"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveApproved", ipTERetrieveApproved);
                        extension___implementation.BeforeMethod("SetTERetrieveApproved", extension___parameters);
                    }

                    adapter.Impl.SetTERetrieveApproved(ipTERetrieveApproved);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveApproved", ipTERetrieveApproved);
                        extension___implementation.AfterMethod("SetTERetrieveApproved", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SetTERetrieveByDay(bool ipTERetrieveByDay)
        {
            try
            {
                using (var adapter = this.GetImplementation("SetTERetrieveByDay"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveByDay", ipTERetrieveByDay);
                        extension___implementation.BeforeMethod("SetTERetrieveByDay", extension___parameters);
                    }

                    adapter.Impl.SetTERetrieveByDay(ipTERetrieveByDay);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveByDay", ipTERetrieveByDay);
                        extension___implementation.AfterMethod("SetTERetrieveByDay", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SetTERetrieveByMonth(bool ipTERetrieveByMonth)
        {
            try
            {
                using (var adapter = this.GetImplementation("SetTERetrieveByMonth"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveByMonth", ipTERetrieveByMonth);
                        extension___implementation.BeforeMethod("SetTERetrieveByMonth", extension___parameters);
                    }

                    adapter.Impl.SetTERetrieveByMonth(ipTERetrieveByMonth);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveByMonth", ipTERetrieveByMonth);
                        extension___implementation.AfterMethod("SetTERetrieveByMonth", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SetTERetrieveByWeek(bool ipTERetrieveByWeek)
        {
            try
            {
                using (var adapter = this.GetImplementation("SetTERetrieveByWeek"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveByWeek", ipTERetrieveByWeek);
                        extension___implementation.BeforeMethod("SetTERetrieveByWeek", extension___parameters);
                    }

                    adapter.Impl.SetTERetrieveByWeek(ipTERetrieveByWeek);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveByWeek", ipTERetrieveByWeek);
                        extension___implementation.AfterMethod("SetTERetrieveByWeek", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SetTERetrieveEntered(bool ipTERetrieveEntered)
        {
            try
            {
                using (var adapter = this.GetImplementation("SetTERetrieveEntered"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveEntered", ipTERetrieveEntered);
                        extension___implementation.BeforeMethod("SetTERetrieveEntered", extension___parameters);
                    }

                    adapter.Impl.SetTERetrieveEntered(ipTERetrieveEntered);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveEntered", ipTERetrieveEntered);
                        extension___implementation.AfterMethod("SetTERetrieveEntered", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SetTERetrievePartiallyApproved(bool ipTERetrievePartiallyApproved)
        {
            try
            {
                using (var adapter = this.GetImplementation("SetTERetrievePartiallyApproved"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrievePartiallyApproved", ipTERetrievePartiallyApproved);
                        extension___implementation.BeforeMethod("SetTERetrievePartiallyApproved", extension___parameters);
                    }

                    adapter.Impl.SetTERetrievePartiallyApproved(ipTERetrievePartiallyApproved);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrievePartiallyApproved", ipTERetrievePartiallyApproved);
                        extension___implementation.AfterMethod("SetTERetrievePartiallyApproved", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SetTERetrieveRejected(bool ipTERetrieveRejected)
        {
            try
            {
                using (var adapter = this.GetImplementation("SetTERetrieveRejected"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveRejected", ipTERetrieveRejected);
                        extension___implementation.BeforeMethod("SetTERetrieveRejected", extension___parameters);
                    }

                    adapter.Impl.SetTERetrieveRejected(ipTERetrieveRejected);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveRejected", ipTERetrieveRejected);
                        extension___implementation.AfterMethod("SetTERetrieveRejected", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SetTERetrieveSubmitted(bool ipTERetrieveSubmitted)
        {
            try
            {
                using (var adapter = this.GetImplementation("SetTERetrieveSubmitted"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveSubmitted", ipTERetrieveSubmitted);
                        extension___implementation.BeforeMethod("SetTERetrieveSubmitted", extension___parameters);
                    }

                    adapter.Impl.SetTERetrieveSubmitted(ipTERetrieveSubmitted);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipTERetrieveSubmitted", ipTERetrieveSubmitted);
                        extension___implementation.AfterMethod("SetTERetrieveSubmitted", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void StartActivity(int LaborHedSeq, string StartType, ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("StartActivity"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("LaborHedSeq", LaborHedSeq);
                        extension___parameters.Add("StartType", StartType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("StartActivity", extension___parameters);
                    }

                    adapter.Impl.StartActivity(LaborHedSeq, StartType, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("LaborHedSeq", LaborHedSeq);
                        extension___parameters.Add("StartType", StartType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("StartActivity", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void StartActivityByEmp(string employeeID, string startType, ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("StartActivityByEmp"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeID", employeeID);
                        extension___parameters.Add("startType", startType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("StartActivityByEmp", extension___parameters);
                    }

                    adapter.Impl.StartActivityByEmp(employeeID, startType, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeID", employeeID);
                        extension___parameters.Add("startType", startType);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("StartActivityByEmp", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SubmitForApproval(ref Erp.Tablesets.LaborTableset ds, bool lWeeklyView, out string cMessageText)
        {
            try
            {
                using (var adapter = this.GetImplementation("SubmitForApproval"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("lWeeklyView", lWeeklyView);
                        extension___implementation.BeforeMethod("SubmitForApproval", extension___parameters);
                    }

                    adapter.Impl.SubmitForApproval(ref ds, lWeeklyView, out cMessageText);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("lWeeklyView", lWeeklyView);
                        extension___parameters.Add("cMessageText", cMessageText);
                        extension___implementation.AfterMethod("SubmitForApproval", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateIndirectCodeIsDowntime(string indirectCode)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateIndirectCodeIsDowntime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("indirectCode", indirectCode);
                        extension___implementation.BeforeMethod("ValidateIndirectCodeIsDowntime", extension___parameters);
                    }

                    adapter.Impl.ValidateIndirectCodeIsDowntime(indirectCode);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("indirectCode", indirectCode);
                        extension___implementation.AfterMethod("ValidateIndirectCodeIsDowntime", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void validateNonConfProcessed(ref Erp.Tablesets.LaborTableset ds, int laborHedSeq, int laborDtlSeq, decimal vDiscrepQty, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("validateNonConfProcessed"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___parameters.Add("vDiscrepQty", vDiscrepQty);
                        extension___implementation.BeforeMethod("validateNonConfProcessed", extension___parameters);
                    }

                    adapter.Impl.validateNonConfProcessed(ref ds, laborHedSeq, laborDtlSeq, vDiscrepQty, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___parameters.Add("vDiscrepQty", vDiscrepQty);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("validateNonConfProcessed", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool ValidateProjectClosed(string projectID, string jobNum, string laborTypePseudo)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateProjectClosed"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("projectID", projectID);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___parameters.Add("laborTypePseudo", laborTypePseudo);
                        extension___implementation.BeforeMethod("ValidateProjectClosed", extension___parameters);
                    }

                    var _return = adapter.Impl.ValidateProjectClosed(projectID, jobNum, laborTypePseudo);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("projectID", projectID);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___parameters.Add("laborTypePseudo", laborTypePseudo);
                        extension___implementation.AfterMethod("ValidateProjectClosed", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateSerialAfterSelect(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateSerialAfterSelect"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ValidateSerialAfterSelect", extension___parameters);
                    }

                    adapter.Impl.ValidateSerialAfterSelect(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ValidateSerialAfterSelect", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateSerialScanInterface(string jobNum, int assemblySeq, string partNum, string proposedSN, int oprSeq, int laborHedSeq, int laborDtlSeq, bool rework)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateSerialScanInterface"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___parameters.Add("assemblySeq", assemblySeq);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("proposedSN", proposedSN);
                        extension___parameters.Add("oprSeq", oprSeq);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___parameters.Add("rework", rework);
                        extension___implementation.BeforeMethod("ValidateSerialScanInterface", extension___parameters);
                    }

                    adapter.Impl.ValidateSerialScanInterface(jobNum, assemblySeq, partNum, proposedSN, oprSeq, laborHedSeq, laborDtlSeq, rework);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("jobNum", jobNum);
                        extension___parameters.Add("assemblySeq", assemblySeq);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("proposedSN", proposedSN);
                        extension___parameters.Add("oprSeq", oprSeq);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___parameters.Add("rework", rework);
                        extension___implementation.AfterMethod("ValidateSerialScanInterface", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateSerialBeforeSelect(ref Erp.Tablesets.LaborTableset ds, out string notEnoughSerials, out decimal totSNReq, out decimal totNewSNReq)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateSerialBeforeSelect"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ValidateSerialBeforeSelect", extension___parameters);
                    }

                    adapter.Impl.ValidateSerialBeforeSelect(ref ds, out notEnoughSerials, out totSNReq, out totNewSNReq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("notEnoughSerials", notEnoughSerials);
                        extension___parameters.Add("totSNReq", totSNReq);
                        extension___parameters.Add("totNewSNReq", totNewSNReq);
                        extension___implementation.AfterMethod("ValidateSerialBeforeSelect", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void VerifySerialMatch(ref Erp.Tablesets.LaborTableset ds, out string pcMsg, out int piMsgType)
        {
            try
            {
                using (var adapter = this.GetImplementation("VerifySerialMatch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("VerifySerialMatch", extension___parameters);
                    }

                    adapter.Impl.VerifySerialMatch(ref ds, out pcMsg, out piMsgType);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pcMsg", pcMsg);
                        extension___parameters.Add("piMsgType", piMsgType);
                        extension___implementation.AfterMethod("VerifySerialMatch", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetClockTime(string dspClckTm, out decimal clckTm)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetClockTime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("dspClckTm", dspClckTm);
                        extension___implementation.BeforeMethod("GetClockTime", extension___parameters);
                    }

                    adapter.Impl.GetClockTime(dspClckTm, out clckTm);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("dspClckTm", dspClckTm);
                        extension___parameters.Add("clckTm", clckTm);
                        extension___implementation.AfterMethod("GetClockTime", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string GetCodeDescList(string tableName, string fieldName)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetCodeDescList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("tableName", tableName);
                        extension___parameters.Add("fieldName", fieldName);
                        extension___implementation.BeforeMethod("GetCodeDescList", extension___parameters);
                    }

                    var _return = adapter.Impl.GetCodeDescList(tableName, fieldName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("tableName", tableName);
                        extension___parameters.Add("fieldName", fieldName);
                        extension___implementation.AfterMethod("GetCodeDescList", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetDspClockTime(decimal clckTm, out string dspClckTm)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetDspClockTime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("clckTm", clckTm);
                        extension___implementation.BeforeMethod("GetDspClockTime", extension___parameters);
                    }

                    adapter.Impl.GetDspClockTime(clckTm, out dspClckTm);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("clckTm", clckTm);
                        extension___parameters.Add("dspClckTm", dspClckTm);
                        extension___implementation.AfterMethod("GetDspClockTime", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool ReportPartQtyAllowed(string ip_JobNum, int ip_AssemblySeq, int ip_OprSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("ReportPartQtyAllowed"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ip_JobNum", ip_JobNum);
                        extension___parameters.Add("ip_AssemblySeq", ip_AssemblySeq);
                        extension___parameters.Add("ip_OprSeq", ip_OprSeq);
                        extension___implementation.BeforeMethod("ReportPartQtyAllowed", extension___parameters);
                    }

                    var _return = adapter.Impl.ReportPartQtyAllowed(ip_JobNum, ip_AssemblySeq, ip_OprSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ip_JobNum", ip_JobNum);
                        extension___parameters.Add("ip_AssemblySeq", ip_AssemblySeq);
                        extension___parameters.Add("ip_OprSeq", ip_OprSeq);
                        extension___implementation.AfterMethod("ReportPartQtyAllowed", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ExternalMESDowntime(Erp.Tablesets.LaborTableset ds, string indirectCode, string downtimeNote)
        {
            try
            {
                using (var adapter = this.GetImplementation("ExternalMESDowntime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("indirectCode", indirectCode);
                        extension___parameters.Add("downtimeNote", downtimeNote);
                        extension___implementation.BeforeMethod("ExternalMESDowntime", extension___parameters);
                    }

                    adapter.Impl.ExternalMESDowntime(ds, indirectCode, downtimeNote);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("indirectCode", indirectCode);
                        extension___parameters.Add("downtimeNote", downtimeNote);
                        extension___implementation.AfterMethod("ExternalMESDowntime", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ExternalMESEndDowntime(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ExternalMESEndDowntime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ExternalMESEndDowntime", extension___parameters);
                    }

                    adapter.Impl.ExternalMESEndDowntime(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ExternalMESEndDowntime", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.HCMLaborDtlTableset HCMGetLaborRecords(string employeeNum, System.DateTime? startDate, System.DateTime? endDate, string includeStatus)
        {
            try
            {
                using (var adapter = this.GetImplementation("HCMGetLaborRecords"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___parameters.Add("startDate", startDate);
                        extension___parameters.Add("endDate", endDate);
                        extension___parameters.Add("includeStatus", includeStatus);
                        extension___implementation.BeforeMethod("HCMGetLaborRecords", extension___parameters);
                    }

                    var _return = adapter.Impl.HCMGetLaborRecords(employeeNum, startDate, endDate, includeStatus);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___parameters.Add("startDate", startDate);
                        extension___parameters.Add("endDate", endDate);
                        extension___parameters.Add("includeStatus", includeStatus);
                        extension___implementation.AfterMethod("HCMGetLaborRecords", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void HCMSetLaborStatus(Erp.Tablesets.HCMLaborDtlTableset hcmDs)
        {
            try
            {
                using (var adapter = this.GetImplementation("HCMSetLaborStatus"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("hcmDs", hcmDs);
                        extension___implementation.BeforeMethod("HCMSetLaborStatus", extension___parameters);
                    }

                    adapter.Impl.HCMSetLaborStatus(hcmDs);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("hcmDs", hcmDs);
                        extension___implementation.AfterMethod("HCMSetLaborStatus", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateChargeRateForTimeType(ref Erp.Tablesets.LaborTableset ds, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateChargeRateForTimeType"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ValidateChargeRateForTimeType", extension___parameters);
                    }

                    adapter.Impl.ValidateChargeRateForTimeType(ref ds, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("ValidateChargeRateForTimeType", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ReviewIsDocumentLock(string laborHedSeq, string laborDtlSeq, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("ReviewIsDocumentLock"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.BeforeMethod("ReviewIsDocumentLock", extension___parameters);
                    }

                    adapter.Impl.ReviewIsDocumentLock(laborHedSeq, laborDtlSeq, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("ReviewIsDocumentLock", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool IsHCMEnabledAtCompany()
        {
            try
            {
                using (var adapter = this.GetImplementation("IsHCMEnabledAtCompany"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("IsHCMEnabledAtCompany", extension___parameters);
                    }

                    var _return = adapter.Impl.IsHCMEnabledAtCompany();

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.AfterMethod("IsHCMEnabledAtCompany", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeTimeWeeklyViewWeekBeginDate(ref Erp.Tablesets.LaborTableset ds, System.DateTime weekBeginDate)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeTimeWeeklyViewWeekBeginDate"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("weekBeginDate", weekBeginDate);
                        extension___implementation.BeforeMethod("ChangeTimeWeeklyViewWeekBeginDate", extension___parameters);
                    }

                    adapter.Impl.ChangeTimeWeeklyViewWeekBeginDate(ref ds, weekBeginDate);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("weekBeginDate", weekBeginDate);
                        extension___implementation.AfterMethod("ChangeTimeWeeklyViewWeekBeginDate", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeLaborDtlOprSeq(ref Erp.Tablesets.LaborTableset ds, int oprSeq, out string message)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeLaborDtlOprSeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("oprSeq", oprSeq);
                        extension___implementation.BeforeMethod("ChangeLaborDtlOprSeq", extension___parameters);
                    }

                    adapter.Impl.ChangeLaborDtlOprSeq(ref ds, oprSeq, out message);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("oprSeq", oprSeq);
                        extension___parameters.Add("message", message);
                        extension___implementation.AfterMethod("ChangeLaborDtlOprSeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeLaborDtlScrapQty(ref Erp.Tablesets.LaborTableset ds, decimal scrapQty)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeLaborDtlScrapQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("scrapQty", scrapQty);
                        extension___implementation.BeforeMethod("ChangeLaborDtlScrapQty", extension___parameters);
                    }

                    adapter.Impl.ChangeLaborDtlScrapQty(ref ds, scrapQty);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("scrapQty", scrapQty);
                        extension___implementation.AfterMethod("ChangeLaborDtlScrapQty", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeLaborDtlAttributeSetID(ref Erp.Tablesets.LaborTableset ds, int attributeSetID, string type)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeLaborDtlAttributeSetID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("type", type);
                        extension___implementation.BeforeMethod("ChangeLaborDtlAttributeSetID", extension___parameters);
                    }

                    adapter.Impl.ChangeLaborDtlAttributeSetID(ref ds, attributeSetID, type);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("type", type);
                        extension___implementation.AfterMethod("ChangeLaborDtlAttributeSetID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AfterChangeLaborDtlDiscrepQty(ref Erp.Tablesets.LaborTableset ds, out string message)
        {
            try
            {
                using (var adapter = this.GetImplementation("AfterChangeLaborDtlDiscrepQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("AfterChangeLaborDtlDiscrepQty", extension___parameters);
                    }

                    adapter.Impl.AfterChangeLaborDtlDiscrepQty(ref ds, out message);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("message", message);
                        extension___implementation.AfterMethod("AfterChangeLaborDtlDiscrepQty", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeLaborDtlTimeField(string fieldName, decimal timeValue, ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeLaborDtlTimeField"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("fieldName", fieldName);
                        extension___parameters.Add("timeValue", timeValue);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeLaborDtlTimeField", extension___parameters);
                    }

                    adapter.Impl.ChangeLaborDtlTimeField(fieldName, timeValue, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("fieldName", fieldName);
                        extension___parameters.Add("timeValue", timeValue);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeLaborDtlTimeField", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeLaborDtlDspTimeField(string fieldName, string timeValue, ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeLaborDtlDspTimeField"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("fieldName", fieldName);
                        extension___parameters.Add("timeValue", timeValue);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("ChangeLaborDtlDspTimeField", extension___parameters);
                    }

                    adapter.Impl.ChangeLaborDtlDspTimeField(fieldName, timeValue, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("fieldName", fieldName);
                        extension___parameters.Add("timeValue", timeValue);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("ChangeLaborDtlDspTimeField", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetJobProductionCompanySettings(out bool advanceLaborRate, out string clockFormat)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetJobProductionCompanySettings"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetJobProductionCompanySettings", extension___parameters);
                    }

                    adapter.Impl.GetJobProductionCompanySettings(out advanceLaborRate, out clockFormat);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("advanceLaborRate", advanceLaborRate);
                        extension___parameters.Add("clockFormat", clockFormat);
                        extension___implementation.AfterMethod("GetJobProductionCompanySettings", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SubmitForApprovalBySelected(ref Erp.Tablesets.LaborTableset ds, bool weeklyView, out string messageText)
        {
            try
            {
                using (var adapter = this.GetImplementation("SubmitForApprovalBySelected"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("weeklyView", weeklyView);
                        extension___implementation.BeforeMethod("SubmitForApprovalBySelected", extension___parameters);
                    }

                    adapter.Impl.SubmitForApprovalBySelected(ref ds, weeklyView, out messageText);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("weeklyView", weeklyView);
                        extension___parameters.Add("messageText", messageText);
                        extension___implementation.AfterMethod("SubmitForApprovalBySelected", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void RecallFromApprovalBySelected(ref Erp.Tablesets.LaborTableset ds, bool weeklyView, out string messageText)
        {
            try
            {
                using (var adapter = this.GetImplementation("RecallFromApprovalBySelected"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("weeklyView", weeklyView);
                        extension___implementation.BeforeMethod("RecallFromApprovalBySelected", extension___parameters);
                    }

                    adapter.Impl.RecallFromApprovalBySelected(ref ds, weeklyView, out messageText);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("weeklyView", weeklyView);
                        extension___parameters.Add("messageText", messageText);
                        extension___implementation.AfterMethod("RecallFromApprovalBySelected", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CopyLaborDtlBySelected(ref Erp.Tablesets.LaborTableset ds, out string messageText)
        {
            try
            {
                using (var adapter = this.GetImplementation("CopyLaborDtlBySelected"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CopyLaborDtlBySelected", extension___parameters);
                    }

                    adapter.Impl.CopyLaborDtlBySelected(ref ds, out messageText);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("messageText", messageText);
                        extension___implementation.AfterMethod("CopyLaborDtlBySelected", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CopyTimeWeeklyViewBySelected(ref Erp.Tablesets.LaborTableset ds, out string messageText)
        {
            try
            {
                using (var adapter = this.GetImplementation("CopyTimeWeeklyViewBySelected"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CopyTimeWeeklyViewBySelected", extension___parameters);
                    }

                    adapter.Impl.CopyTimeWeeklyViewBySelected(ref ds, out messageText);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("messageText", messageText);
                        extension___implementation.AfterMethod("CopyTimeWeeklyViewBySelected", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.LaborTableset GetRowsTimeEntry(string whereClauseLaborHed, string whereClauseLaborDtl, string whereClauseLaborDtlAttach, string whereClauseLaborDtlAction, string whereClauseLaborDtlCom, string whereClauseLaborEquip, string whereClauseLaborPart, string whereClauseLbrScrapSerialNumbers, string whereClauseTimeWorkHours, string whereClauseTimeWeeklyView, string whereClauseLaborDtlGroup, string whereClauseSelectedSerialNumbers, string whereClauseSNFormat, int pageSize, int absolutePage, string employeeNum, System.DateTime? calendarStartDate, System.DateTime? calendarEndDate, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRowsTimeEntry"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseLaborHed", whereClauseLaborHed);
                        extension___parameters.Add("whereClauseLaborDtl", whereClauseLaborDtl);
                        extension___parameters.Add("whereClauseLaborDtlAttach", whereClauseLaborDtlAttach);
                        extension___parameters.Add("whereClauseLaborDtlAction", whereClauseLaborDtlAction);
                        extension___parameters.Add("whereClauseLaborDtlCom", whereClauseLaborDtlCom);
                        extension___parameters.Add("whereClauseLaborEquip", whereClauseLaborEquip);
                        extension___parameters.Add("whereClauseLaborPart", whereClauseLaborPart);
                        extension___parameters.Add("whereClauseLbrScrapSerialNumbers", whereClauseLbrScrapSerialNumbers);
                        extension___parameters.Add("whereClauseTimeWorkHours", whereClauseTimeWorkHours);
                        extension___parameters.Add("whereClauseTimeWeeklyView", whereClauseTimeWeeklyView);
                        extension___parameters.Add("whereClauseLaborDtlGroup", whereClauseLaborDtlGroup);
                        extension___parameters.Add("whereClauseSelectedSerialNumbers", whereClauseSelectedSerialNumbers);
                        extension___parameters.Add("whereClauseSNFormat", whereClauseSNFormat);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___parameters.Add("calendarStartDate", calendarStartDate);
                        extension___parameters.Add("calendarEndDate", calendarEndDate);
                        extension___implementation.BeforeMethod("GetRowsTimeEntry", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRowsTimeEntry(whereClauseLaborHed, whereClauseLaborDtl, whereClauseLaborDtlAttach, whereClauseLaborDtlAction, whereClauseLaborDtlCom, whereClauseLaborEquip, whereClauseLaborPart, whereClauseLbrScrapSerialNumbers, whereClauseTimeWorkHours, whereClauseTimeWeeklyView, whereClauseLaborDtlGroup, whereClauseSelectedSerialNumbers, whereClauseSNFormat, pageSize, absolutePage, employeeNum, calendarStartDate, calendarEndDate, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseLaborHed", whereClauseLaborHed);
                        extension___parameters.Add("whereClauseLaborDtl", whereClauseLaborDtl);
                        extension___parameters.Add("whereClauseLaborDtlAttach", whereClauseLaborDtlAttach);
                        extension___parameters.Add("whereClauseLaborDtlAction", whereClauseLaborDtlAction);
                        extension___parameters.Add("whereClauseLaborDtlCom", whereClauseLaborDtlCom);
                        extension___parameters.Add("whereClauseLaborEquip", whereClauseLaborEquip);
                        extension___parameters.Add("whereClauseLaborPart", whereClauseLaborPart);
                        extension___parameters.Add("whereClauseLbrScrapSerialNumbers", whereClauseLbrScrapSerialNumbers);
                        extension___parameters.Add("whereClauseTimeWorkHours", whereClauseTimeWorkHours);
                        extension___parameters.Add("whereClauseTimeWeeklyView", whereClauseTimeWeeklyView);
                        extension___parameters.Add("whereClauseLaborDtlGroup", whereClauseLaborDtlGroup);
                        extension___parameters.Add("whereClauseSelectedSerialNumbers", whereClauseSelectedSerialNumbers);
                        extension___parameters.Add("whereClauseSNFormat", whereClauseSNFormat);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___parameters.Add("calendarStartDate", calendarStartDate);
                        extension___parameters.Add("calendarEndDate", calendarEndDate);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetRowsTimeEntry", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetLaborTypeList(string employeeNum, out string laborTypeList)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetLaborTypeList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___implementation.BeforeMethod("GetLaborTypeList", extension___parameters);
                    }

                    adapter.Impl.GetLaborTypeList(employeeNum, out laborTypeList);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___parameters.Add("laborTypeList", laborTypeList);
                        extension___implementation.AfterMethod("GetLaborTypeList", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CreateLbrScrapSerialNumbersFromList(string serialNumberList, string partNumList, ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("CreateLbrScrapSerialNumbersFromList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("serialNumberList", serialNumberList);
                        extension___parameters.Add("partNumList", partNumList);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("CreateLbrScrapSerialNumbersFromList", extension___parameters);
                    }

                    adapter.Impl.CreateLbrScrapSerialNumbersFromList(serialNumberList, partNumList, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("serialNumberList", serialNumberList);
                        extension___parameters.Add("partNumList", partNumList);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("CreateLbrScrapSerialNumbersFromList", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void LaborHedPayrollDateChanging(System.DateTime? payrollDate, ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("LaborHedPayrollDateChanging"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("payrollDate", payrollDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("LaborHedPayrollDateChanging", extension___parameters);
                    }

                    adapter.Impl.LaborHedPayrollDateChanging(payrollDate, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("payrollDate", payrollDate);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("LaborHedPayrollDateChanging", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetDefaultsAddLaborDtlFromCalendar(string empID, System.DateTime? calendarStartDateTime, System.DateTime? calendarEndDateTime, out int laborHedSeq, out System.DateTime? startDate, out decimal startTime, out System.DateTime? endDate, out decimal endTime)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetDefaultsAddLaborDtlFromCalendar"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("empID", empID);
                        extension___parameters.Add("calendarStartDateTime", calendarStartDateTime);
                        extension___parameters.Add("calendarEndDateTime", calendarEndDateTime);
                        extension___implementation.BeforeMethod("GetDefaultsAddLaborDtlFromCalendar", extension___parameters);
                    }

                    adapter.Impl.GetDefaultsAddLaborDtlFromCalendar(empID, calendarStartDateTime, calendarEndDateTime, out laborHedSeq, out startDate, out startTime, out endDate, out endTime);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("empID", empID);
                        extension___parameters.Add("calendarStartDateTime", calendarStartDateTime);
                        extension___parameters.Add("calendarEndDateTime", calendarEndDateTime);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("startDate", startDate);
                        extension___parameters.Add("startTime", startTime);
                        extension___parameters.Add("endDate", endDate);
                        extension___parameters.Add("endTime", endTime);
                        extension___implementation.AfterMethod("GetDefaultsAddLaborDtlFromCalendar", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeLaborPartScrapQty(ref Erp.Tablesets.LaborTableset ds, decimal scrapQty, System.Guid sysRowID, out string vMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeLaborPartScrapQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("scrapQty", scrapQty);
                        extension___parameters.Add("sysRowID", sysRowID);
                        extension___implementation.BeforeMethod("OnChangeLaborPartScrapQty", extension___parameters);
                    }

                    adapter.Impl.OnChangeLaborPartScrapQty(ref ds, scrapQty, sysRowID, out vMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("scrapQty", scrapQty);
                        extension___parameters.Add("sysRowID", sysRowID);
                        extension___parameters.Add("vMessage", vMessage);
                        extension___implementation.AfterMethod("OnChangeLaborPartScrapQty", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeLaborPartAttributeSetID(ref Erp.Tablesets.LaborTableset ds, int attributeSetID, string type)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeLaborPartAttributeSetID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("type", type);
                        extension___implementation.BeforeMethod("ChangeLaborPartAttributeSetID", extension___parameters);
                    }

                    adapter.Impl.ChangeLaborPartAttributeSetID(ref ds, attributeSetID, type);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("type", type);
                        extension___implementation.AfterMethod("ChangeLaborPartAttributeSetID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AfterChangeLaborPartDiscrepQty(ref Erp.Tablesets.LaborTableset ds, out string message)
        {
            try
            {
                using (var adapter = this.GetImplementation("AfterChangeLaborPartDiscrepQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("AfterChangeLaborPartDiscrepQty", extension___parameters);
                    }

                    adapter.Impl.AfterChangeLaborPartDiscrepQty(ref ds, out message);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("message", message);
                        extension___implementation.AfterMethod("AfterChangeLaborPartDiscrepQty", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborHed(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborHed"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewLaborHed", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborHed(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewLaborHed", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborDtl(ref Erp.Tablesets.LaborTableset ds, int laborHedSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborDtl"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___implementation.BeforeMethod("GetNewLaborDtl", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborDtl(ref ds, laborHedSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___implementation.AfterMethod("GetNewLaborDtl", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborDtlAttch(ref Erp.Tablesets.LaborTableset ds, int laborHedSeq, int laborDtlSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborDtlAttch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.BeforeMethod("GetNewLaborDtlAttch", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborDtlAttch(ref ds, laborHedSeq, laborDtlSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.AfterMethod("GetNewLaborDtlAttch", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborDtlAction(ref Erp.Tablesets.LaborTableset ds, int laborHedSeq, int laborDtlSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborDtlAction"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.BeforeMethod("GetNewLaborDtlAction", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborDtlAction(ref ds, laborHedSeq, laborDtlSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.AfterMethod("GetNewLaborDtlAction", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborDtlComment(ref Erp.Tablesets.LaborTableset ds, int laborHedSeq, int laborDtlSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborDtlComment"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.BeforeMethod("GetNewLaborDtlComment", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborDtlComment(ref ds, laborHedSeq, laborDtlSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.AfterMethod("GetNewLaborDtlComment", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborEquip(ref Erp.Tablesets.LaborTableset ds, int laborHedSeq, int laborDtlSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborEquip"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.BeforeMethod("GetNewLaborEquip", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborEquip(ref ds, laborHedSeq, laborDtlSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.AfterMethod("GetNewLaborEquip", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborPart(ref Erp.Tablesets.LaborTableset ds, int laborHedSeq, int laborDtlSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborPart"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.BeforeMethod("GetNewLaborPart", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborPart(ref ds, laborHedSeq, laborDtlSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___parameters.Add("laborDtlSeq", laborDtlSeq);
                        extension___implementation.AfterMethod("GetNewLaborPart", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewLaborDtlGroup(ref Erp.Tablesets.LaborTableset ds, string employeeNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewLaborDtlGroup"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___implementation.BeforeMethod("GetNewLaborDtlGroup", extension___parameters);
                    }

                    adapter.Impl.GetNewLaborDtlGroup(ref ds, employeeNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("employeeNum", employeeNum);
                        extension___implementation.AfterMethod("GetNewLaborDtlGroup", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeleteByID(int laborHedSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeleteByID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___implementation.BeforeMethod("DeleteByID", extension___parameters);
                    }

                    adapter.Impl.DeleteByID(laborHedSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___implementation.AfterMethod("DeleteByID", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.LaborTableset GetByID(int laborHedSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetByID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___implementation.BeforeMethod("GetByID", extension___parameters);
                    }

                    var _return = adapter.Impl.GetByID(laborHedSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("laborHedSeq", laborHedSeq);
                        extension___implementation.AfterMethod("GetByID", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.LaborHedListTableset GetList(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetList", extension___parameters);
                    }

                    var _return = adapter.Impl.GetList(whereClause, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetList", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.LaborTableset GetRows(string whereClauseLaborHed, string whereClauseLaborDtl, string whereClauseLaborDtlAttch, string whereClauseLaborDtlAction, string whereClauseLaborDtlComment, string whereClauseLaborEquip, string whereClauseLaborPart, string whereClauseLbrScrapSerialNumbers, string whereClauseLaborDtlGroup, string whereClauseSelectedSerialNumbers, string whereClauseSNFormat, string whereClauseTimeWeeklyView, string whereClauseTimeWorkHours, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRows"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseLaborHed", whereClauseLaborHed);
                        extension___parameters.Add("whereClauseLaborDtl", whereClauseLaborDtl);
                        extension___parameters.Add("whereClauseLaborDtlAttch", whereClauseLaborDtlAttch);
                        extension___parameters.Add("whereClauseLaborDtlAction", whereClauseLaborDtlAction);
                        extension___parameters.Add("whereClauseLaborDtlComment", whereClauseLaborDtlComment);
                        extension___parameters.Add("whereClauseLaborEquip", whereClauseLaborEquip);
                        extension___parameters.Add("whereClauseLaborPart", whereClauseLaborPart);
                        extension___parameters.Add("whereClauseLbrScrapSerialNumbers", whereClauseLbrScrapSerialNumbers);
                        extension___parameters.Add("whereClauseLaborDtlGroup", whereClauseLaborDtlGroup);
                        extension___parameters.Add("whereClauseSelectedSerialNumbers", whereClauseSelectedSerialNumbers);
                        extension___parameters.Add("whereClauseSNFormat", whereClauseSNFormat);
                        extension___parameters.Add("whereClauseTimeWeeklyView", whereClauseTimeWeeklyView);
                        extension___parameters.Add("whereClauseTimeWorkHours", whereClauseTimeWorkHours);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetRows", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRows(whereClauseLaborHed, whereClauseLaborDtl, whereClauseLaborDtlAttch, whereClauseLaborDtlAction, whereClauseLaborDtlComment, whereClauseLaborEquip, whereClauseLaborPart, whereClauseLbrScrapSerialNumbers, whereClauseLaborDtlGroup, whereClauseSelectedSerialNumbers, whereClauseSNFormat, whereClauseTimeWeeklyView, whereClauseTimeWorkHours, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseLaborHed", whereClauseLaborHed);
                        extension___parameters.Add("whereClauseLaborDtl", whereClauseLaborDtl);
                        extension___parameters.Add("whereClauseLaborDtlAttch", whereClauseLaborDtlAttch);
                        extension___parameters.Add("whereClauseLaborDtlAction", whereClauseLaborDtlAction);
                        extension___parameters.Add("whereClauseLaborDtlComment", whereClauseLaborDtlComment);
                        extension___parameters.Add("whereClauseLaborEquip", whereClauseLaborEquip);
                        extension___parameters.Add("whereClauseLaborPart", whereClauseLaborPart);
                        extension___parameters.Add("whereClauseLbrScrapSerialNumbers", whereClauseLbrScrapSerialNumbers);
                        extension___parameters.Add("whereClauseLaborDtlGroup", whereClauseLaborDtlGroup);
                        extension___parameters.Add("whereClauseSelectedSerialNumbers", whereClauseSelectedSerialNumbers);
                        extension___parameters.Add("whereClauseSNFormat", whereClauseSNFormat);
                        extension___parameters.Add("whereClauseTimeWeeklyView", whereClauseTimeWeeklyView);
                        extension___parameters.Add("whereClauseTimeWorkHours", whereClauseTimeWorkHours);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetRows", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.LaborTableset GetBySysRowID(System.Guid id)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetBySysRowID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("id", id);
                        extension___implementation.BeforeMethod("GetBySysRowID", extension___parameters);
                    }

                    var _return = adapter.Impl.GetBySysRowID(id);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("id", id);
                        extension___implementation.AfterMethod("GetBySysRowID", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.LaborTableset GetBySysRowIDs(System.Collections.Generic.List<System.Guid> ids)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetBySysRowIDs"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ids", ids);
                        extension___implementation.BeforeMethod("GetBySysRowIDs", extension___parameters);
                    }

                    var _return = adapter.Impl.GetBySysRowIDs(ids);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ids", ids);
                        extension___implementation.AfterMethod("GetBySysRowIDs", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void Update(ref Erp.Tablesets.LaborTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("Update"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("Update", extension___parameters);
                    }

                    adapter.Impl.Update(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("Update", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Ice.BOUpdErrorTableset UpdateExt(ref Erp.Tablesets.UpdExtLaborTableset ds, bool continueProcessingOnError, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            try
            {
                using (var adapter = this.GetImplementation("UpdateExt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<ILaborExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___implementation.BeforeMethod("UpdateExt", extension___parameters);
                    }

                    var _return = adapter.Impl.UpdateExt(ref ds, continueProcessingOnError, rollbackParentOnChildError, out errorsOccurred);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___parameters.Add("errorsOccurred", errorsOccurred);
                        extension___implementation.AfterMethod("UpdateExt", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        #endregion // LaborSvcContract Members
    }

    #region Extensions

    [Epicor.Extensions.ExtensionExport]
    public interface ILaborExtender : Ice.Extensions.IServiceExtender
    {
    }

    [Epicor.Extensions.ExtensionExport]
    public interface ILaborUpdater : Ice.Extensions.IUpdater
    {
    }

    #endregion
}
