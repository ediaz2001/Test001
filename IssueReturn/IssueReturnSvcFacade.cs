#pragma warning disable 1591    // Disable XML comment warnings for this file.

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;

using Epicor.Data;
using Epicor.Hosting;

using Ice;

#region Service related namespaces

using Erp.Contracts;
using Erp.Tablesets;

#endregion // Service related namespaces

namespace Erp.Services.BO
{
    [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
    public sealed class IssueReturnSvcFacade : Epicor.Customization.Bpm.SvcFacadeBase<ErpContext, IssueReturnSvcContract, IssueReturnSvc>, IssueReturnSvcContract
    {
        #region Data members

        #endregion // Data members

        public IssueReturnSvcFacade()
            : base("Erp:BO:IssueReturn")
        {
        }

        public IssueReturnSvcFacade(ErpContext ctx)
            : base("Erp:BO:IssueReturn", ctx)
        {
        }

        #region IssueReturnSvcContract Members

        public void _History07_08()
        {
            try
            {
                using (var adapter = this.GetImplementation("_History07_08"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("_History07_08", extension___parameters);
                    }

                    adapter.Impl._History07_08();

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.AfterMethod("_History07_08", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.IssueReturnJobAsmblTableset GetList(string whereClauseJobHead, string whereClauseJobAsmbl, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseJobHead", whereClauseJobHead);
                        extension___parameters.Add("whereClauseJobAsmbl", whereClauseJobAsmbl);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetList", extension___parameters);
                    }

                    var _return = adapter.Impl.GetList(whereClauseJobHead, whereClauseJobAsmbl, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseJobHead", whereClauseJobHead);
                        extension___parameters.Add("whereClauseJobAsmbl", whereClauseJobAsmbl);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetList", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.IssueReturnJobListTableset GetListJobs(string whereClauseJobHead, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetListJobs"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseJobHead", whereClauseJobHead);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetListJobs", extension___parameters);
                    }

                    var _return = adapter.Impl.GetListJobs(whereClauseJobHead, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseJobHead", whereClauseJobHead);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetListJobs", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewIssueReturn(string pcTranType, System.Guid pcMtlQueueRowID, string pCallProcess, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewIssueReturn"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewIssueReturn", extension___parameters);
                    }

                    adapter.Impl.GetNewIssueReturn(pcTranType, pcMtlQueueRowID, pCallProcess, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewIssueReturn", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewIssueReturnFromJob(string pcFromJobNum, int piFromAssemblySeq, string pcTranType, System.Guid pcMtlQueueRowID, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewIssueReturnFromJob"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcFromJobNum", pcFromJobNum);
                        extension___parameters.Add("piFromAssemblySeq", piFromAssemblySeq);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewIssueReturnFromJob", extension___parameters);
                    }

                    adapter.Impl.GetNewIssueReturnFromJob(pcFromJobNum, piFromAssemblySeq, pcTranType, pcMtlQueueRowID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcFromJobNum", pcFromJobNum);
                        extension___parameters.Add("piFromAssemblySeq", piFromAssemblySeq);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewIssueReturnFromJob", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewIssueReturnToJob(string pcToJobNum, int piToAssemblySeq, string pcTranType, System.Guid pcMtlQueueRowID, out string pcMessage, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewIssueReturnToJob"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcToJobNum", pcToJobNum);
                        extension___parameters.Add("piToAssemblySeq", piToAssemblySeq);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewIssueReturnToJob", extension___parameters);
                    }

                    adapter.Impl.GetNewIssueReturnToJob(pcToJobNum, piToAssemblySeq, pcTranType, pcMtlQueueRowID, out pcMessage, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcToJobNum", pcToJobNum);
                        extension___parameters.Add("piToAssemblySeq", piToAssemblySeq);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("pcMessage", pcMessage);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewIssueReturnToJob", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.IssueReturnTableset GetNewJobAsmblMultiple(string pcTranType, System.Guid pcMtlQueueRowID, string pCallProcess, ref Erp.Tablesets.SelectedJobAsmblTableset ds, out string pcMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewJobAsmblMultiple"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewJobAsmblMultiple", extension___parameters);
                    }

                    var _return = adapter.Impl.GetNewJobAsmblMultiple(pcTranType, pcMtlQueueRowID, pCallProcess, ref ds, out pcMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pcMessage", pcMessage);
                        extension___implementation.AfterMethod("GetNewJobAsmblMultiple", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewJobAsmblSearch(ref Erp.Tablesets.SelectedJobAsmblTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewJobAsmblSearch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewJobAsmblSearch", extension___parameters);
                    }

                    adapter.Impl.GetNewJobAsmblSearch(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewJobAsmblSearch", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.IssueReturnTableset GetNewPartMultiple(string pcTranType, System.Guid pcMtlQueueRowID, ref Erp.Tablesets.SelectedPartTableset ds, out string pcMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPartMultiple"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewPartMultiple", extension___parameters);
                    }

                    var _return = adapter.Impl.GetNewPartMultiple(pcTranType, pcMtlQueueRowID, ref ds, out pcMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pcMessage", pcMessage);
                        extension___implementation.AfterMethod("GetNewPartMultiple", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPartNum(string pcPartNum, string pcTranType, System.Guid pcMtlQueueRowID, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPartNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcPartNum", pcPartNum);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewPartNum", extension___parameters);
                    }

                    adapter.Impl.GetNewPartNum(pcPartNum, pcTranType, pcMtlQueueRowID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcPartNum", pcPartNum);
                        extension___parameters.Add("pcTranType", pcTranType);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewPartNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPartSearch(ref Erp.Tablesets.SelectedPartTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPartSearch"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewPartSearch", extension___parameters);
                    }

                    adapter.Impl.GetNewPartSearch(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewPartSearch", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.IssueReturnJobAsmblTableset GetRows(string whereClauseJobHead, string whereClauseJobAsmbl, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRows"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseJobHead", whereClauseJobHead);
                        extension___parameters.Add("whereClauseJobAsmbl", whereClauseJobAsmbl);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetRows", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRows(whereClauseJobHead, whereClauseJobAsmbl, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClauseJobHead", whereClauseJobHead);
                        extension___parameters.Add("whereClauseJobAsmbl", whereClauseJobAsmbl);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetRows", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.IssueReturnJobAsmblTableset GetRowsJobAssemblies(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRowsJobAssemblies"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetRowsJobAssemblies", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRowsJobAssemblies(whereClause, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetRowsJobAssemblies", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.IssueReturnJobAsmblTableset GetRowsWIP(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRowsWIP"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetRowsWIP", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRowsWIP(whereClause, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetRowsWIP", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.SelectSerialNumbersParamsTableset GetSelectSerialNumbersParams(ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetSelectSerialNumbersParams"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetSelectSerialNumbersParams", extension___parameters);
                    }

                    var _return = adapter.Impl.GetSelectSerialNumbersParams(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetSelectSerialNumbersParams", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetUnissuedQty(ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetUnissuedQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetUnissuedQty", extension___parameters);
                    }

                    adapter.Impl.GetUnissuedQty(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetUnissuedQty", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetUnpickSettings(ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetUnpickSettings"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetUnpickSettings", extension___parameters);
                    }

                    adapter.Impl.GetUnpickSettings(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetUnpickSettings", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void IsValidAssembly(string pcJobNum, int piAssemblySeq, out bool plFound)
        {
            try
            {
                using (var adapter = this.GetImplementation("IsValidAssembly"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcJobNum", pcJobNum);
                        extension___parameters.Add("piAssemblySeq", piAssemblySeq);
                        extension___implementation.BeforeMethod("IsValidAssembly", extension___parameters);
                    }

                    adapter.Impl.IsValidAssembly(pcJobNum, piAssemblySeq, out plFound);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcJobNum", pcJobNum);
                        extension___parameters.Add("piAssemblySeq", piAssemblySeq);
                        extension___parameters.Add("plFound", plFound);
                        extension___implementation.AfterMethod("IsValidAssembly", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeFromPCID(string fromPCID, bool allowDiffPartAndUM, bool questionCheck, string pCallProcess, out string questionMsg, ref Erp.Tablesets.IssueReturnTableset ds, out string pcMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeFromPCID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("fromPCID", fromPCID);
                        extension___parameters.Add("allowDiffPartAndUM", allowDiffPartAndUM);
                        extension___parameters.Add("questionCheck", questionCheck);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeFromPCID", extension___parameters);
                    }

                    adapter.Impl.OnChangeFromPCID(fromPCID, allowDiffPartAndUM, questionCheck, pCallProcess, out questionMsg, ref ds, out pcMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("fromPCID", fromPCID);
                        extension___parameters.Add("allowDiffPartAndUM", allowDiffPartAndUM);
                        extension___parameters.Add("questionCheck", questionCheck);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___parameters.Add("questionMsg", questionMsg);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pcMessage", pcMessage);
                        extension___implementation.AfterMethod("OnChangeFromPCID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void JobExists(string ipJobNum, out bool opJobReleased, out bool opJobClosed, out bool opJobExists)
        {
            try
            {
                using (var adapter = this.GetImplementation("JobExists"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipJobNum", ipJobNum);
                        extension___implementation.BeforeMethod("JobExists", extension___parameters);
                    }

                    adapter.Impl.JobExists(ipJobNum, out opJobReleased, out opJobClosed, out opJobExists);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipJobNum", ipJobNum);
                        extension___parameters.Add("opJobReleased", opJobReleased);
                        extension___parameters.Add("opJobClosed", opJobClosed);
                        extension___parameters.Add("opJobExists", opJobExists);
                        extension___implementation.AfterMethod("JobExists", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeToPCID(string ipPCID, ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeToPCID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipPCID", ipPCID);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("OnChangeToPCID", extension___parameters);
                    }

                    adapter.Impl.OnChangeToPCID(ipPCID, ref ds, pCallProcess);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipPCID", ipPCID);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.AfterMethod("OnChangeToPCID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeFromAssemblySeq(int piFromAssemblySeq, ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeFromAssemblySeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("piFromAssemblySeq", piFromAssemblySeq);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("OnChangeFromAssemblySeq", extension___parameters);
                    }

                    adapter.Impl.OnChangeFromAssemblySeq(piFromAssemblySeq, ref ds, pCallProcess);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("piFromAssemblySeq", piFromAssemblySeq);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.AfterMethod("OnChangeFromAssemblySeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeFromBinNum(ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeFromBinNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeFromBinNum", extension___parameters);
                    }

                    adapter.Impl.OnChangeFromBinNum(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeFromBinNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeFromJobNum(string pcFromJobNum, ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeFromJobNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcFromJobNum", pcFromJobNum);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("OnChangeFromJobNum", extension___parameters);
                    }

                    adapter.Impl.OnChangeFromJobNum(pcFromJobNum, ref ds, pCallProcess);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcFromJobNum", pcFromJobNum);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.AfterMethod("OnChangeFromJobNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeFromJobSeq(ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess, out string pcMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeFromJobSeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("OnChangeFromJobSeq", extension___parameters);
                    }

                    adapter.Impl.OnChangeFromJobSeq(ref ds, pCallProcess, out pcMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___parameters.Add("pcMessage", pcMessage);
                        extension___implementation.AfterMethod("OnChangeFromJobSeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeFromWarehouse(ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeFromWarehouse"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("OnChangeFromWarehouse", extension___parameters);
                    }

                    adapter.Impl.OnChangeFromWarehouse(ref ds, pCallProcess);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.AfterMethod("OnChangeFromWarehouse", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeFromWarehouseDefaultBin(ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeFromWarehouseDefaultBin"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("ChangeFromWarehouseDefaultBin", extension___parameters);
                    }

                    adapter.Impl.ChangeFromWarehouseDefaultBin(ref ds, pCallProcess);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.AfterMethod("ChangeFromWarehouseDefaultBin", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeLotNum(string pcLotNum, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeLotNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcLotNum", pcLotNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeLotNum", extension___parameters);
                    }

                    adapter.Impl.OnChangeLotNum(pcLotNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcLotNum", pcLotNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeLotNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangePartNum(ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangePartNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("OnChangePartNum", extension___parameters);
                    }

                    adapter.Impl.OnChangePartNum(ref ds, pCallProcess);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.AfterMethod("OnChangePartNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeToAssemblySeq(ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeToAssemblySeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("OnChangeToAssemblySeq", extension___parameters);
                    }

                    adapter.Impl.OnChangeToAssemblySeq(ref ds, pCallProcess);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.AfterMethod("OnChangeToAssemblySeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeToJobNum(ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess, out string pcMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeToJobNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("OnChangeToJobNum", extension___parameters);
                    }

                    adapter.Impl.OnChangeToJobNum(ref ds, pCallProcess, out pcMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___parameters.Add("pcMessage", pcMessage);
                        extension___implementation.AfterMethod("OnChangeToJobNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeToJobSeq(ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess, out string pcMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeToJobSeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("OnChangeToJobSeq", extension___parameters);
                    }

                    adapter.Impl.OnChangeToJobSeq(ref ds, pCallProcess, out pcMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___parameters.Add("pcMessage", pcMessage);
                        extension___implementation.AfterMethod("OnChangeToJobSeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeToWarehouse(ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeToWarehouse"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("OnChangeToWarehouse", extension___parameters);
                    }

                    adapter.Impl.OnChangeToWarehouse(ref ds, pCallProcess);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.AfterMethod("OnChangeToWarehouse", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ChangeToWarehouseDefaultBin(ref Erp.Tablesets.IssueReturnTableset ds, string pCallProcess)
        {
            try
            {
                using (var adapter = this.GetImplementation("ChangeToWarehouseDefaultBin"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.BeforeMethod("ChangeToWarehouseDefaultBin", extension___parameters);
                    }

                    adapter.Impl.ChangeToWarehouseDefaultBin(ref ds, pCallProcess);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___implementation.AfterMethod("ChangeToWarehouseDefaultBin", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangingNumberOfPieces(decimal numberOfPieces, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangingNumberOfPieces"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("numberOfPieces", numberOfPieces);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangingNumberOfPieces", extension___parameters);
                    }

                    adapter.Impl.OnChangingNumberOfPieces(numberOfPieces, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("numberOfPieces", numberOfPieces);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangingNumberOfPieces", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangingAttributeSet(int attributeSetID, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangingAttributeSet"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangingAttributeSet", extension___parameters);
                    }

                    adapter.Impl.OnChangingAttributeSet(attributeSetID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangingAttributeSet", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangingAttributeSetAdjustments(int attributeSetID, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangingAttributeSetAdjustments"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangingAttributeSetAdjustments", extension___parameters);
                    }

                    adapter.Impl.OnChangingAttributeSetAdjustments(attributeSetID, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangingAttributeSetAdjustments", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangingRevisionNum(string revisionNum, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangingRevisionNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangingRevisionNum", extension___parameters);
                    }

                    adapter.Impl.OnChangingRevisionNum(revisionNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangingRevisionNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangingRevisionNumAdjustments(string revisionNum, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangingRevisionNumAdjustments"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangingRevisionNumAdjustments", extension___parameters);
                    }

                    adapter.Impl.OnChangingRevisionNumAdjustments(revisionNum, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangingRevisionNumAdjustments", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeTranQty(decimal pdTranQty, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeTranQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pdTranQty", pdTranQty);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeTranQty", extension___parameters);
                    }

                    adapter.Impl.OnChangeTranQty(pdTranQty, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pdTranQty", pdTranQty);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeTranQty", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeUM(string pUM, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeUM"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pUM", pUM);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeUM", extension___parameters);
                    }

                    adapter.Impl.OnChangeUM(pUM, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pUM", pUM);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeUM", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangeASTUom(string pUM, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangeASTUom"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pUM", pUM);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangeASTUom", extension___parameters);
                    }

                    adapter.Impl.OnChangeASTUom(pUM, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pUM", pUM);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangeASTUom", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangingFromBinNum(ref Erp.Tablesets.IssueReturnTableset ds, out string pcMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangingFromBinNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangingFromBinNum", extension___parameters);
                    }

                    adapter.Impl.OnChangingFromBinNum(ref ds, out pcMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pcMessage", pcMessage);
                        extension___implementation.AfterMethod("OnChangingFromBinNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangingJobSeq(int piJobSeq, string pcDirection, string pCallProcess, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangingJobSeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("piJobSeq", piJobSeq);
                        extension___parameters.Add("pcDirection", pcDirection);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangingJobSeq", extension___parameters);
                    }

                    adapter.Impl.OnChangingJobSeq(piJobSeq, pcDirection, pCallProcess, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("piJobSeq", piJobSeq);
                        extension___parameters.Add("pcDirection", pcDirection);
                        extension___parameters.Add("pCallProcess", pCallProcess);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangingJobSeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void OnChangingToJobSeq(int piToJobSeq, ref Erp.Tablesets.IssueReturnTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("OnChangingToJobSeq"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("piToJobSeq", piToJobSeq);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("OnChangingToJobSeq", extension___parameters);
                    }

                    adapter.Impl.OnChangingToJobSeq(piToJobSeq, ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("piToJobSeq", piToJobSeq);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("OnChangingToJobSeq", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void PerformMaterialMovement(bool plNegQtyAction, ref Erp.Tablesets.IssueReturnTableset ds, out string legalNumberMessage, out string partTranPKs)
        {
            try
            {
                using (var adapter = this.GetImplementation("PerformMaterialMovement"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("plNegQtyAction", plNegQtyAction);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("PerformMaterialMovement", extension___parameters);
                    }

                    adapter.Impl.PerformMaterialMovement(plNegQtyAction, ref ds, out legalNumberMessage, out partTranPKs);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("plNegQtyAction", plNegQtyAction);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("legalNumberMessage", legalNumberMessage);
                        extension___parameters.Add("partTranPKs", partTranPKs);
                        extension___implementation.AfterMethod("PerformMaterialMovement", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void PerformMaterialMovement2(bool plNegQtyAction, ref Erp.Tablesets.IssueReturnTableset ds, out string legalNumberMessage, out string message, out string partTranPKs)
        {
            try
            {
                using (var adapter = this.GetImplementation("PerformMaterialMovement2"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("plNegQtyAction", plNegQtyAction);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("PerformMaterialMovement2", extension___parameters);
                    }

                    adapter.Impl.PerformMaterialMovement2(plNegQtyAction, ref ds, out legalNumberMessage, out message, out partTranPKs);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("plNegQtyAction", plNegQtyAction);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("legalNumberMessage", legalNumberMessage);
                        extension___parameters.Add("message", message);
                        extension___parameters.Add("partTranPKs", partTranPKs);
                        extension___implementation.AfterMethod("PerformMaterialMovement2", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void PerformMaterialMovementWithLegalNum(bool plNegQtyAction, ref Erp.Tablesets.IssueReturnTableset ds, out string legalNumberMessage, out string partTranPKs, string legalNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("PerformMaterialMovementWithLegalNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("plNegQtyAction", plNegQtyAction);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("legalNum", legalNum);
                        extension___implementation.BeforeMethod("PerformMaterialMovementWithLegalNum", extension___parameters);
                    }

                    adapter.Impl.PerformMaterialMovementWithLegalNum(plNegQtyAction, ref ds, out legalNumberMessage, out partTranPKs, legalNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("plNegQtyAction", plNegQtyAction);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("legalNumberMessage", legalNumberMessage);
                        extension___parameters.Add("partTranPKs", partTranPKs);
                        extension___parameters.Add("legalNum", legalNum);
                        extension___implementation.AfterMethod("PerformMaterialMovementWithLegalNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void MassUnpickByPCID(string pcid, string whse, string bin, string partNum, ref Erp.Tablesets.IssueReturnTableset ds, out string legalNumMsg)
        {
            try
            {
                using (var adapter = this.GetImplementation("MassUnpickByPCID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcid", pcid);
                        extension___parameters.Add("whse", whse);
                        extension___parameters.Add("bin", bin);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("MassUnpickByPCID", extension___parameters);
                    }

                    adapter.Impl.MassUnpickByPCID(pcid, whse, bin, partNum, ref ds, out legalNumMsg);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcid", pcid);
                        extension___parameters.Add("whse", whse);
                        extension___parameters.Add("bin", bin);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("legalNumMsg", legalNumMsg);
                        extension___implementation.AfterMethod("MassUnpickByPCID", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string GenerateDynamicPCID(string pkgControlID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GenerateDynamicPCID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pkgControlID", pkgControlID);
                        extension___implementation.BeforeMethod("GenerateDynamicPCID", extension___parameters);
                    }

                    var _return = adapter.Impl.GenerateDynamicPCID(pkgControlID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pkgControlID", pkgControlID);
                        extension___implementation.AfterMethod("GenerateDynamicPCID", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool SuppressPrintMessages(string empID)
        {
            try
            {
                using (var adapter = this.GetImplementation("SuppressPrintMessages"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("empID", empID);
                        extension___implementation.BeforeMethod("SuppressPrintMessages", extension___parameters);
                    }

                    var _return = adapter.Impl.SuppressPrintMessages(empID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("empID", empID);
                        extension___implementation.AfterMethod("SuppressPrintMessages", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool IsAutoPrintSetup(bool ipWriteToStaged)
        {
            try
            {
                using (var adapter = this.GetImplementation("IsAutoPrintSetup"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipWriteToStaged", ipWriteToStaged);
                        extension___implementation.BeforeMethod("IsAutoPrintSetup", extension___parameters);
                    }

                    var _return = adapter.Impl.IsAutoPrintSetup(ipWriteToStaged);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipWriteToStaged", ipWriteToStaged);
                        extension___implementation.AfterMethod("IsAutoPrintSetup", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidatePkgControlID(string pkgControlIDCode)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidatePkgControlID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pkgControlIDCode", pkgControlIDCode);
                        extension___implementation.BeforeMethod("ValidatePkgControlID", extension___parameters);
                    }

                    adapter.Impl.ValidatePkgControlID(pkgControlIDCode);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pkgControlIDCode", pkgControlIDCode);
                        extension___implementation.AfterMethod("ValidatePkgControlID", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void PreGetNewIssueReturn(System.Guid pcMtlQueueRowID, out string pcAction, out string pcMessage, out decimal pdQtyAvailable)
        {
            try
            {
                using (var adapter = this.GetImplementation("PreGetNewIssueReturn"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___implementation.BeforeMethod("PreGetNewIssueReturn", extension___parameters);
                    }

                    adapter.Impl.PreGetNewIssueReturn(pcMtlQueueRowID, out pcAction, out pcMessage, out pdQtyAvailable);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcMtlQueueRowID", pcMtlQueueRowID);
                        extension___parameters.Add("pcAction", pcAction);
                        extension___parameters.Add("pcMessage", pcMessage);
                        extension___parameters.Add("pdQtyAvailable", pdQtyAvailable);
                        extension___implementation.AfterMethod("PreGetNewIssueReturn", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void PrePerformMaterialMovement(ref Erp.Tablesets.IssueReturnTableset ds, out bool requiresUserInput)
        {
            try
            {
                using (var adapter = this.GetImplementation("PrePerformMaterialMovement"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("PrePerformMaterialMovement", extension___parameters);
                    }

                    adapter.Impl.PrePerformMaterialMovement(ref ds, out requiresUserInput);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("requiresUserInput", requiresUserInput);
                        extension___implementation.AfterMethod("PrePerformMaterialMovement", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SetQuantity()
        {
            try
            {
                using (var adapter = this.GetImplementation("SetQuantity"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("SetQuantity", extension___parameters);
                    }

                    adapter.Impl.SetQuantity();

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.AfterMethod("SetQuantity", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ValidateSN(ref Erp.Tablesets.IssueReturnTableset ds, string serialNumber, out bool isVoided)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidateSN"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("serialNumber", serialNumber);
                        extension___implementation.BeforeMethod("ValidateSN", extension___parameters);
                    }

                    adapter.Impl.ValidateSN(ref ds, serialNumber, out isVoided);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("serialNumber", serialNumber);
                        extension___parameters.Add("isVoided", isVoided);
                        extension___implementation.AfterMethod("ValidateSN", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void validateToBinNum(ref Erp.Tablesets.IssueReturnTableset ds, string binNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("validateToBinNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("binNum", binNum);
                        extension___implementation.BeforeMethod("validateToBinNum", extension___parameters);
                    }

                    adapter.Impl.validateToBinNum(ref ds, binNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("binNum", binNum);
                        extension___implementation.AfterMethod("validateToBinNum", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.InventoryQtyAdjBrwTableset GetInventoryQtyAdjBrw(string partNum, int attributeSetID, string wareHouseCode, out string primaryBin)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetInventoryQtyAdjBrw"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("wareHouseCode", wareHouseCode);
                        extension___implementation.BeforeMethod("GetInventoryQtyAdjBrw", extension___parameters);
                    }

                    var _return = adapter.Impl.GetInventoryQtyAdjBrw(partNum, attributeSetID, wareHouseCode, out primaryBin);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("wareHouseCode", wareHouseCode);
                        extension___parameters.Add("primaryBin", primaryBin);
                        extension___implementation.AfterMethod("GetInventoryQtyAdjBrw", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.InventoryQtyAdjBrwTableset GetInventoryQtyAdjBrwInventoryTracking(string partNum, string revisionNum, int attributeSetID, string wareHouseCode, out string primaryBin)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetInventoryQtyAdjBrwInventoryTracking"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("wareHouseCode", wareHouseCode);
                        extension___implementation.BeforeMethod("GetInventoryQtyAdjBrwInventoryTracking", extension___parameters);
                    }

                    var _return = adapter.Impl.GetInventoryQtyAdjBrwInventoryTracking(partNum, revisionNum, attributeSetID, wareHouseCode, out primaryBin);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("wareHouseCode", wareHouseCode);
                        extension___parameters.Add("primaryBin", primaryBin);
                        extension___implementation.AfterMethod("GetInventoryQtyAdjBrwInventoryTracking", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [System.ObsoleteAttribute("This method is has been obsoleted, please use GetInventoryQtyAdjBrwInventoryTracking")]
        public Erp.Tablesets.InventoryQtyAdjBrwTableset GetInventoryQtyAdjBrwForWeb(string partNum, int attributeSetID, string wareHouseCode, out string primaryBin)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetInventoryQtyAdjBrwForWeb"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("wareHouseCode", wareHouseCode);
                        extension___implementation.BeforeMethod("GetInventoryQtyAdjBrwForWeb", extension___parameters);
                    }

                    var _return = adapter.Impl.GetInventoryQtyAdjBrwForWeb(partNum, attributeSetID, wareHouseCode, out primaryBin);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("attributeSetID", attributeSetID);
                        extension___parameters.Add("wareHouseCode", wareHouseCode);
                        extension___parameters.Add("primaryBin", primaryBin);
                        extension___implementation.AfterMethod("GetInventoryQtyAdjBrwForWeb", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetPartXRefInfo(ref string partNum, string sysRowID, string rowType, ref string uomCode, ref decimal qty, out string serialWarning, out string questionString, out bool multipleMatch)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetPartXRefInfo"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("sysRowID", sysRowID);
                        extension___parameters.Add("rowType", rowType);
                        extension___parameters.Add("uomCode", uomCode);
                        extension___parameters.Add("qty", qty);
                        extension___implementation.BeforeMethod("GetPartXRefInfo", extension___parameters);
                    }

                    adapter.Impl.GetPartXRefInfo(ref partNum, sysRowID, rowType, ref uomCode, ref qty, out serialWarning, out questionString, out multipleMatch);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("sysRowID", sysRowID);
                        extension___parameters.Add("rowType", rowType);
                        extension___parameters.Add("uomCode", uomCode);
                        extension___parameters.Add("qty", qty);
                        extension___parameters.Add("serialWarning", serialWarning);
                        extension___parameters.Add("questionString", questionString);
                        extension___parameters.Add("multipleMatch", multipleMatch);
                        extension___implementation.AfterMethod("GetPartXRefInfo", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool ValidUOM(string iPartNum, string iUOM)
        {
            try
            {
                using (var adapter = this.GetImplementation("ValidUOM"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("iPartNum", iPartNum);
                        extension___parameters.Add("iUOM", iUOM);
                        extension___implementation.BeforeMethod("ValidUOM", extension___parameters);
                    }

                    var _return = adapter.Impl.ValidUOM(iPartNum, iUOM);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("iPartNum", iPartNum);
                        extension___parameters.Add("iUOM", iUOM);
                        extension___implementation.AfterMethod("ValidUOM", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetAvailTranDocTypes(out string AvailTypes)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAvailTranDocTypes"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___implementation.BeforeMethod("GetAvailTranDocTypes", extension___parameters);
                    }

                    adapter.Impl.GetAvailTranDocTypes(out AvailTypes);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("AvailTypes", AvailTypes);
                        extension___implementation.AfterMethod("GetAvailTranDocTypes", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void NegativeInventoryTestTran(string pcPartNum, string pcWhseCode, string pcBinNum, string pcLotNum, int pcAttributeSetID, string pcPCID, string pcDimCode, decimal pdDimConvFactor, System.Guid pgTranRowId, decimal ipSellingQuantity, out string pcNeqQtyAction, out string pcMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("NegativeInventoryTestTran"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcPartNum", pcPartNum);
                        extension___parameters.Add("pcWhseCode", pcWhseCode);
                        extension___parameters.Add("pcBinNum", pcBinNum);
                        extension___parameters.Add("pcLotNum", pcLotNum);
                        extension___parameters.Add("pcAttributeSetID", pcAttributeSetID);
                        extension___parameters.Add("pcPCID", pcPCID);
                        extension___parameters.Add("pcDimCode", pcDimCode);
                        extension___parameters.Add("pdDimConvFactor", pdDimConvFactor);
                        extension___parameters.Add("pgTranRowId", pgTranRowId);
                        extension___parameters.Add("ipSellingQuantity", ipSellingQuantity);
                        extension___implementation.BeforeMethod("NegativeInventoryTestTran", extension___parameters);
                    }

                    adapter.Impl.NegativeInventoryTestTran(pcPartNum, pcWhseCode, pcBinNum, pcLotNum, pcAttributeSetID, pcPCID, pcDimCode, pdDimConvFactor, pgTranRowId, ipSellingQuantity, out pcNeqQtyAction, out pcMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcPartNum", pcPartNum);
                        extension___parameters.Add("pcWhseCode", pcWhseCode);
                        extension___parameters.Add("pcBinNum", pcBinNum);
                        extension___parameters.Add("pcLotNum", pcLotNum);
                        extension___parameters.Add("pcAttributeSetID", pcAttributeSetID);
                        extension___parameters.Add("pcPCID", pcPCID);
                        extension___parameters.Add("pcDimCode", pcDimCode);
                        extension___parameters.Add("pdDimConvFactor", pdDimConvFactor);
                        extension___parameters.Add("pgTranRowId", pgTranRowId);
                        extension___parameters.Add("ipSellingQuantity", ipSellingQuantity);
                        extension___parameters.Add("pcNeqQtyAction", pcNeqQtyAction);
                        extension___parameters.Add("pcMessage", pcMessage);
                        extension___implementation.AfterMethod("NegativeInventoryTestTran", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void NegativeInventoryTest(string pcPartNum, string pcWhseCode, string pcBinNum, string pcLotNum, int pcAttributeSetID, string pcPCID, string pcDimCode, decimal pdDimConvFactor, decimal ipSellingQuantity, out string pcNeqQtyAction, out string pcMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("NegativeInventoryTest"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcPartNum", pcPartNum);
                        extension___parameters.Add("pcWhseCode", pcWhseCode);
                        extension___parameters.Add("pcBinNum", pcBinNum);
                        extension___parameters.Add("pcLotNum", pcLotNum);
                        extension___parameters.Add("pcAttributeSetID", pcAttributeSetID);
                        extension___parameters.Add("pcPCID", pcPCID);
                        extension___parameters.Add("pcDimCode", pcDimCode);
                        extension___parameters.Add("pdDimConvFactor", pdDimConvFactor);
                        extension___parameters.Add("ipSellingQuantity", ipSellingQuantity);
                        extension___implementation.BeforeMethod("NegativeInventoryTest", extension___parameters);
                    }

                    adapter.Impl.NegativeInventoryTest(pcPartNum, pcWhseCode, pcBinNum, pcLotNum, pcAttributeSetID, pcPCID, pcDimCode, pdDimConvFactor, ipSellingQuantity, out pcNeqQtyAction, out pcMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcPartNum", pcPartNum);
                        extension___parameters.Add("pcWhseCode", pcWhseCode);
                        extension___parameters.Add("pcBinNum", pcBinNum);
                        extension___parameters.Add("pcLotNum", pcLotNum);
                        extension___parameters.Add("pcAttributeSetID", pcAttributeSetID);
                        extension___parameters.Add("pcPCID", pcPCID);
                        extension___parameters.Add("pcDimCode", pcDimCode);
                        extension___parameters.Add("pdDimConvFactor", pdDimConvFactor);
                        extension___parameters.Add("ipSellingQuantity", ipSellingQuantity);
                        extension___parameters.Add("pcNeqQtyAction", pcNeqQtyAction);
                        extension___parameters.Add("pcMessage", pcMessage);
                        extension___implementation.AfterMethod("NegativeInventoryTest", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void MasterInventoryBinTests(ref Erp.Tablesets.IssueReturnTableset ds, out string pcNeqQtyAction, out string pcNeqQtyMessage, out string pcPCBinAction, out string pcPCBinMessage, out string pcOutBinAction, out string pcOutBinMessage)
        {
            try
            {
                using (var adapter = this.GetImplementation("MasterInventoryBinTests"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("MasterInventoryBinTests", extension___parameters);
                    }

                    adapter.Impl.MasterInventoryBinTests(ref ds, out pcNeqQtyAction, out pcNeqQtyMessage, out pcPCBinAction, out pcPCBinMessage, out pcOutBinAction, out pcOutBinMessage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("pcNeqQtyAction", pcNeqQtyAction);
                        extension___parameters.Add("pcNeqQtyMessage", pcNeqQtyMessage);
                        extension___parameters.Add("pcPCBinAction", pcPCBinAction);
                        extension___parameters.Add("pcPCBinMessage", pcPCBinMessage);
                        extension___parameters.Add("pcOutBinAction", pcOutBinAction);
                        extension___parameters.Add("pcOutBinMessage", pcOutBinMessage);
                        extension___implementation.AfterMethod("MasterInventoryBinTests", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void checkWhseBin(Erp.Tablesets.IssueReturnRow ttIssueReturn)
        {
            try
            {
                using (var adapter = this.GetImplementation("checkWhseBin"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ttIssueReturn", ttIssueReturn);
                        extension___implementation.BeforeMethod("checkWhseBin", extension___parameters);
                    }

                    adapter.Impl.checkWhseBin(ttIssueReturn);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ttIssueReturn", ttIssueReturn);
                        extension___implementation.AfterMethod("checkWhseBin", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void FillForeignFields(Erp.Tablesets.IssueReturnRow ttIssueReturn)
        {
            try
            {
                using (var adapter = this.GetImplementation("FillForeignFields"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ttIssueReturn", ttIssueReturn);
                        extension___implementation.BeforeMethod("FillForeignFields", extension___parameters);
                    }

                    adapter.Impl.FillForeignFields(ttIssueReturn);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ttIssueReturn", ttIssueReturn);
                        extension___implementation.AfterMethod("FillForeignFields", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckPackageCodeAllocNegQty(string ipcalledFrom, string ipPCID, decimal ipQty, out string opWarning, out string opAction, out string opAllocWarning, out string opAllocAction)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckPackageCodeAllocNegQty"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipcalledFrom", ipcalledFrom);
                        extension___parameters.Add("ipPCID", ipPCID);
                        extension___parameters.Add("ipQty", ipQty);
                        extension___implementation.BeforeMethod("CheckPackageCodeAllocNegQty", extension___parameters);
                    }

                    adapter.Impl.CheckPackageCodeAllocNegQty(ipcalledFrom, ipPCID, ipQty, out opWarning, out opAction, out opAllocWarning, out opAllocAction);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipcalledFrom", ipcalledFrom);
                        extension___parameters.Add("ipPCID", ipPCID);
                        extension___parameters.Add("ipQty", ipQty);
                        extension___parameters.Add("opWarning", opWarning);
                        extension___parameters.Add("opAction", opAction);
                        extension___parameters.Add("opAllocWarning", opAllocWarning);
                        extension___parameters.Add("opAllocAction", opAllocAction);
                        extension___implementation.AfterMethod("CheckPackageCodeAllocNegQty", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool AreSNumsAllocated(string companyID, string partNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("AreSNumsAllocated"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("companyID", companyID);
                        extension___parameters.Add("partNum", partNum);
                        extension___implementation.BeforeMethod("AreSNumsAllocated", extension___parameters);
                    }

                    var _return = adapter.Impl.AreSNumsAllocated(companyID, partNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("companyID", companyID);
                        extension___parameters.Add("partNum", partNum);
                        extension___implementation.AfterMethod("AreSNumsAllocated", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetToBinNumWhereClause(string tranType, string toWarehouseCode, string toBinNum, out string toBinNumWhereClause)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetToBinNumWhereClause"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IIssueReturnExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("tranType", tranType);
                        extension___parameters.Add("toWarehouseCode", toWarehouseCode);
                        extension___parameters.Add("toBinNum", toBinNum);
                        extension___implementation.BeforeMethod("GetToBinNumWhereClause", extension___parameters);
                    }

                    adapter.Impl.GetToBinNumWhereClause(tranType, toWarehouseCode, toBinNum, out toBinNumWhereClause);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("tranType", tranType);
                        extension___parameters.Add("toWarehouseCode", toWarehouseCode);
                        extension___parameters.Add("toBinNum", toBinNum);
                        extension___parameters.Add("toBinNumWhereClause", toBinNumWhereClause);
                        extension___implementation.AfterMethod("GetToBinNumWhereClause", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        #endregion // IssueReturnSvcContract Members
    }

    #region Extensions

    [Epicor.Extensions.ExtensionExport]
    public interface IIssueReturnExtender : Ice.Extensions.IServiceExtender
    {
    }

    #endregion
}
