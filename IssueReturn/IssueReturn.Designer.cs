//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Epicor.Data;
using Epicor.Hosting;
using Erp.Contracts;
using Erp.Tablesets;
using Ice;
using Ice.ExtendedData;

namespace Erp.Services.BO
{
    [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
    public partial class IssueReturnSvc : ContextBoundBase<ErpContext>, IssueReturnSvcContract
    {
        #region Constructor
        /// <summary>
        /// Service Constructor
        /// </summary>
        /// <param name="ctx">Context</param>
        public IssueReturnSvc(ErpContext ctx)
            : base(ctx)
        {
            this.UseCurrentCompany = true;
            this.UseCurrentTenant = false;
        }
        #endregion Constructor
        // Temp-table rows
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected InventoryQtyAdjBrwRow ttInventoryQtyAdjBrw;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected IssueReturnRow ttIssueReturn;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected LegalNumGenOptsRow ttLegalNumGenOpts;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected SelectedSerialNumbersRow ttSelectedSerialNumbers;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected SNFormatRow ttSNFormat;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected IssueReturnJobAsmblRow ttIssueReturnJobAsmbl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected JobHeadRow ttJobHead;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected SelectedJobAsmblRow ttSelectedJobAsmbl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected SelectedPartsRow ttSelectedParts;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected SelectSerialNumbersParamsRow ttSelectSerialNumbersParams;

        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected InventoryQtyAdjBrwTableset ttInventoryQtyAdjBrwTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected IssueReturnJobAsmblTableset ttIssueReturnJobAsmblTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected IssueReturnJobListTableset ttIssueReturnJobListTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected SelectedJobAsmblTableset ttSelectedJobAsmblTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected SelectedPartTableset ttSelectedPartTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected SelectSerialNumbersParamsTableset ttSelectSerialNumbersParamsTablesetDS;
        #region SNFormat_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        class SNFormatForeignQueryResult
        {
            public string PartPricePerCode { get; set; }
            public bool PartTrackLots { get; set; }
            public bool PartTrackSerialNum { get; set; }
            public bool PartTrackDimension { get; set; }
            public string PartSalesUM { get; set; }
            public string PartIUM { get; set; }
            public decimal PartSellingFactor { get; set; }
            public string PartPartDescription { get; set; }
            public int SerialMaskMaskType { get; set; }
            public string SerialMaskMask { get; set; }
            public string SerialMaskExample { get; set; }
            public string SerialMaskDescription { get; set; }
        }

        private static Func<ErpContext, string, string, SNFormatForeignQueryResult> SNFormat_Part_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        private SNFormatForeignQueryResult FindFirst_SNFormat_Part_Foreign(string company, string partNum)
        {
            if (SNFormat_Part_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, SNFormatForeignQueryResult>> expression =
                    (dataContext, company_ex, partNum_ex) =>
                    (from row in dataContext.Part
                     where row.Company == company_ex
                     && row.PartNum == partNum_ex
                     select new SNFormatForeignQueryResult()
                     {
                         PartPricePerCode = row.PricePerCode,
                         PartTrackLots = row.TrackLots,
                         PartTrackSerialNum = row.TrackSerialNum,
                         PartTrackDimension = row.TrackDimension,
                         PartSalesUM = row.SalesUM,
                         PartIUM = row.IUM,
                         PartSellingFactor = row.SellingFactor,
                         PartPartDescription = row.PartDescription
                     }
                    ).FirstOrDefault();

                SNFormat_Part_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return SNFormat_Part_Foreign_Query(this.Db, company, partNum);
        }

        private static Func<ErpContext, string, string, SNFormatForeignQueryResult> SNFormat_SerialMask_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        private SNFormatForeignQueryResult FindFirst_SNFormat_SerialMask_Foreign(string company, string snMask)
        {
            if (SNFormat_SerialMask_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, SNFormatForeignQueryResult>> expression =
                    (dataContext, company_ex, snMask_ex) =>
                    (from row in dataContext.SerialMask
                     where row.Company == company_ex
                     && row.SerialMaskID == snMask_ex
                     select new SNFormatForeignQueryResult()
                     {
                         SerialMaskMaskType = row.MaskType,
                         SerialMaskMask = row.Mask,
                         SerialMaskExample = row.Example,
                         SerialMaskDescription = row.Description
                     }
                    ).FirstOrDefault();

                SNFormat_SerialMask_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return SNFormat_SerialMask_Foreign_Query(this.Db, company, snMask);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        private void SNFormat_Foreign_Link()
        {
            SNFormatForeignQueryResult SNFormat_Part_Foreign_LinkResults;
            SNFormat_Part_Foreign_LinkResults = FindFirst_SNFormat_Part_Foreign(ttSNFormat.Company, ttSNFormat.PartNum);
            if (SNFormat_Part_Foreign_LinkResults != null)
            {
                ttSNFormat.PartPricePerCode = SNFormat_Part_Foreign_LinkResults.PartPricePerCode;
                ttSNFormat.PartTrackLots = SNFormat_Part_Foreign_LinkResults.PartTrackLots;
                ttSNFormat.PartTrackSerialNum = SNFormat_Part_Foreign_LinkResults.PartTrackSerialNum;
                ttSNFormat.PartTrackDimension = SNFormat_Part_Foreign_LinkResults.PartTrackDimension;
                ttSNFormat.PartSalesUM = SNFormat_Part_Foreign_LinkResults.PartSalesUM;
                ttSNFormat.PartIUM = SNFormat_Part_Foreign_LinkResults.PartIUM;
                ttSNFormat.PartSellingFactor = SNFormat_Part_Foreign_LinkResults.PartSellingFactor;
                ttSNFormat.PartPartDescription = SNFormat_Part_Foreign_LinkResults.PartPartDescription;
            }
            else
            {
                ttSNFormat.PartPricePerCode = string.Empty;
                ttSNFormat.PartTrackLots = false;
                ttSNFormat.PartTrackSerialNum = false;
                ttSNFormat.PartTrackDimension = false;
                ttSNFormat.PartSalesUM = string.Empty;
                ttSNFormat.PartIUM = string.Empty;
                ttSNFormat.PartSellingFactor = 0m;
                ttSNFormat.PartPartDescription = string.Empty;
            }

            SNFormatForeignQueryResult SNFormat_SerialMask_Foreign_LinkResults;
            SNFormat_SerialMask_Foreign_LinkResults = FindFirst_SNFormat_SerialMask_Foreign(ttSNFormat.Company, ttSNFormat.SNMask);
            if (SNFormat_SerialMask_Foreign_LinkResults != null)
            {
                ttSNFormat.SerialMaskMaskType = SNFormat_SerialMask_Foreign_LinkResults.SerialMaskMaskType;
                ttSNFormat.SerialMaskMask = SNFormat_SerialMask_Foreign_LinkResults.SerialMaskMask;
                ttSNFormat.SerialMaskExample = SNFormat_SerialMask_Foreign_LinkResults.SerialMaskExample;
                ttSNFormat.SerialMaskDescription = SNFormat_SerialMask_Foreign_LinkResults.SerialMaskDescription;
            }
            else
            {
                ttSNFormat.SerialMaskMaskType = 0;
                ttSNFormat.SerialMaskMask = string.Empty;
                ttSNFormat.SerialMaskExample = string.Empty;
                ttSNFormat.SerialMaskDescription = string.Empty;
            }
        }
        #endregion SNFormat_Foreign_Link

        #region Licensing

        private static readonly Guid[] requiredLicenseModules = { new Guid("00000003-04A4-44A7-992B-6B25CC15DC22") };
        private static readonly IReadOnlyDictionary<Guid, Ice.Licensing.AccessLevel> licenseTypeAccess = new Dictionary<Guid, Ice.Licensing.AccessLevel>
        {
        };

        /// <summary>
        /// Get licensing information for this service.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override (Guid[], IReadOnlyDictionary<Guid, Ice.Licensing.AccessLevel>, Ice.Licensing.AccessLevel) GetLicenseInformation()
        {
            return (requiredLicenseModules, licenseTypeAccess, Ice.Licensing.AccessLevel.Full);
        }

        #endregion
    }
}
