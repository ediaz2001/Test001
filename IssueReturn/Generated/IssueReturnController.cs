//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

#pragma warning disable CS1572
#pragma warning disable CS1573
#pragma warning disable CS1591
#pragma warning disable CS1734

using Epicor.Cloud;
using Erp.Contracts;
using Erp.Models.BO.IssueReturn;
using Erp.Tablesets;
using Ice.Hosting.AspNetCore.Controller;
using Microsoft.AspNetCore.Mvc;

namespace Erp.Controllers.BO
{
    /// <summary>
    /// ASP.NET Core API controller for the Erp.BO.IssueReturn service.
    /// </summary>
    [Route("api/rpc/Erp.BO.[controller]")]
    [ApiController]
    public class IssueReturnController : ApiControllerBase
    {
        #region Initialize

        private IssueReturnSvcContract ___service;

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueReturnController"/> class.
        /// </summary>
        public IssueReturnController(IOperationBoundClassProvider<IssueReturnSvcContract> provider) : base(provider.ServiceAsOperationBoundClass)
        {
            this.___service = provider.Service;
        }

        #endregion

        /// <summary>
        ///
        /// </summary>
        [Route("_History07_08")]
        [HttpPost]
        public void _History07_08()
        {
            ___service._History07_08();
        }

        /// <summary>
        /// List of jobs that can be selected for Mass Issue.
        /// </summary>
        [Route("GetList")]
        [HttpPost]
        public GetList_OutputModel GetList(GetList_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetList(model.WhereClauseJobHead, model.WhereClauseJobAsmbl, model.PageSize, model.AbsolutePage, out morePages);

            return new GetList_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// List of jobs that can be selected for Mass Issue.
        /// </summary>
        [Route("GetListJobs")]
        [HttpPost]
        public GetListJobs_OutputModel GetListJobs(GetListJobs_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetListJobs(model.WhereClauseJobHead, model.PageSize, model.AbsolutePage, out morePages);

            return new GetListJobs_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// Call this method to create a new Epicor.Mfg.BO.IssueReturnDataSet with
        /// default values.
        /// </summary>
        [Route("GetNewIssueReturn")]
        [HttpPost]
        public GetNewIssueReturn_OutputModel GetNewIssueReturn(GetNewIssueReturn_InputModel model)
        {
            ___service.GetNewIssueReturn(model.PcTranType, model.PcMtlQueueRowID, model.PCallProcess, ref model.Ds);

            return new GetNewIssueReturn_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method to create a new Epicor.Mfg.BO.IssueReturnDataSet with
        /// default values.
        /// </summary>
        [Route("GetNewIssueReturnFromJob")]
        [HttpPost]
        public GetNewIssueReturnFromJob_OutputModel GetNewIssueReturnFromJob(GetNewIssueReturnFromJob_InputModel model)
        {
            ___service.GetNewIssueReturnFromJob(model.PcFromJobNum, model.PiFromAssemblySeq, model.PcTranType, model.PcMtlQueueRowID, ref model.Ds);

            return new GetNewIssueReturnFromJob_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method to create a new Epicor.Mfg.BO.IssueReturnDataSet with
        /// default values.
        /// </summary>
        [Route("GetNewIssueReturnToJob")]
        [HttpPost]
        public GetNewIssueReturnToJob_OutputModel GetNewIssueReturnToJob(GetNewIssueReturnToJob_InputModel model)
        {
            string pcMessage;

            ___service.GetNewIssueReturnToJob(model.PcToJobNum, model.PiToAssemblySeq, model.PcTranType, model.PcMtlQueueRowID, out pcMessage, ref model.Ds);

            return new GetNewIssueReturnToJob_OutputModel
            {
                PcMessage = pcMessage,
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method creates multiple IssueReturnJobs rows using IssueReturnJobSearch dataset.
        /// </summary>
        [Route("GetNewJobAsmblMultiple")]
        [HttpPost]
        public GetNewJobAsmblMultiple_OutputModel GetNewJobAsmblMultiple(GetNewJobAsmblMultiple_InputModel model)
        {
            string pcMessage;

            var ___result = ___service.GetNewJobAsmblMultiple(model.PcTranType, model.PcMtlQueueRowID, model.PCallProcess, ref model.Ds, out pcMessage);

            return new GetNewJobAsmblMultiple_OutputModel
            {
                Ds = model.Ds,
                PcMessage = pcMessage,
                _Return = ___result
            };
        }

        /// <summary>
        /// This method creates a new ttSelectedJobAsmbl row entry.
        /// </summary>
        [Route("GetNewJobAsmblSearch")]
        [HttpPost]
        public GetNewJobAsmblSearch_OutputModel GetNewJobAsmblSearch(GetNewJobAsmblSearch_InputModel model)
        {
            ___service.GetNewJobAsmblSearch(ref model.Ds);

            return new GetNewJobAsmblSearch_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method creates multiple IssueReturnJobs rows using IssueReturnJobSearch dataset.
        /// </summary>
        [Route("GetNewPartMultiple")]
        [HttpPost]
        public GetNewPartMultiple_OutputModel GetNewPartMultiple(GetNewPartMultiple_InputModel model)
        {
            string pcMessage;

            var ___result = ___service.GetNewPartMultiple(model.PcTranType, model.PcMtlQueueRowID, ref model.Ds, out pcMessage);

            return new GetNewPartMultiple_OutputModel
            {
                Ds = model.Ds,
                PcMessage = pcMessage,
                _Return = ___result
            };
        }

        /// <summary>
        /// Call this method to create a new Epicor.Mfg.BO.IssueReturnDataSet with
        /// Part#.
        /// </summary>
        [Route("GetNewPartNum")]
        [HttpPost]
        public GetNewPartNum_OutputModel GetNewPartNum(GetNewPartNum_InputModel model)
        {
            ___service.GetNewPartNum(model.PcPartNum, model.PcTranType, model.PcMtlQueueRowID, ref model.Ds);

            return new GetNewPartNum_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// This method creates a new ttSelectedParts row entry.
        /// </summary>
        [Route("GetNewPartSearch")]
        [HttpPost]
        public GetNewPartSearch_OutputModel GetNewPartSearch(GetNewPartSearch_InputModel model)
        {
            ___service.GetNewPartSearch(ref model.Ds);

            return new GetNewPartSearch_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// List of jobs that can be selected for Mass Issue.
        /// </summary>
        [Route("GetRows")]
        [HttpPost]
        public GetRows_OutputModel GetRows(GetRows_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetRows(model.WhereClauseJobHead, model.WhereClauseJobAsmbl, model.PageSize, model.AbsolutePage, out morePages);

            return new GetRows_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// List of jobs/assemblies that can be selected for Mass Issue.
        /// </summary>
        [Route("GetRowsJobAssemblies")]
        [HttpPost]
        public GetRowsJobAssemblies_OutputModel GetRowsJobAssemblies(GetRowsJobAssemblies_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetRowsJobAssemblies(model.WhereClause, model.PageSize, model.AbsolutePage, out morePages);

            return new GetRowsJobAssemblies_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// List of jobs/assemblies that can be selected for Move WIP and Move Material.
        /// </summary>
        [Route("GetRowsWIP")]
        [HttpPost]
        public GetRowsWIP_OutputModel GetRowsWIP(GetRowsWIP_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetRowsWIP(model.WhereClause, model.PageSize, model.AbsolutePage, out morePages);

            return new GetRowsWIP_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// Gets parameters required for launching Select Serial Numbers
        /// </summary>
        [Route("GetSelectSerialNumbersParams")]
        [HttpPost]
        public GetSelectSerialNumbersParams_OutputModel GetSelectSerialNumbersParams(GetSelectSerialNumbersParams_InputModel model)
        {
            var ___result = ___service.GetSelectSerialNumbersParams(ref model.Ds);

            return new GetSelectSerialNumbersParams_OutputModel
            {
                Ds = model.Ds,
                _Return = ___result
            };
        }

        /// <summary>
        /// Call this method to set the Qty to the remaining unissued amount.
        /// </summary>
        [Route("GetUnissuedQty")]
        [HttpPost]
        public GetUnissuedQty_OutputModel GetUnissuedQty(GetUnissuedQty_InputModel model)
        {
            ___service.GetUnissuedQty(ref model.Ds);

            return new GetUnissuedQty_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Sets ttIssueReturn fields for Unpick
        /// </summary>
        [Route("GetUnpickSettings")]
        [HttpPost]
        public GetUnpickSettings_OutputModel GetUnpickSettings(GetUnpickSettings_InputModel model)
        {
            ___service.GetUnpickSettings(ref model.Ds);

            return new GetUnpickSettings_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Validate if an assembly is valid for a job. if not returns false,
        /// otherwise returns true.
        /// </summary>
        [Route("IsValidAssembly")]
        [HttpPost]
        public IsValidAssembly_OutputModel IsValidAssembly(IsValidAssembly_InputModel model)
        {
            bool plFound;

            ___service.IsValidAssembly(model.PcJobNum, model.PiAssemblySeq, out plFound);

            return new IsValidAssembly_OutputModel
            {
                PlFound = plFound
            };
        }

        /// <summary>
        /// Validate if FromPCID change is valid
        /// otherwise returns true.
        /// </summary>
        [Route("OnChangeFromPCID")]
        [HttpPost]
        public OnChangeFromPCID_OutputModel OnChangeFromPCID(OnChangeFromPCID_InputModel model)
        {
            string questionMsg;
            string pcMessage;

            ___service.OnChangeFromPCID(model.FromPCID, model.AllowDiffPartAndUM, model.QuestionCheck, model.PCallProcess, out questionMsg, ref model.Ds, out pcMessage);

            return new OnChangeFromPCID_OutputModel
            {
                QuestionMsg = questionMsg,
                Ds = model.Ds,
                PcMessage = pcMessage
            };
        }

        /// <summary>
        /// Check JobNum and return JobRelease and JobClosed
        /// </summary>
        [Route("JobExists")]
        [HttpPost]
        public JobExists_OutputModel JobExists(JobExists_InputModel model)
        {
            bool opJobReleased;
            bool opJobClosed;
            bool opJobExists;

            ___service.JobExists(model.IpJobNum, out opJobReleased, out opJobClosed, out opJobExists);

            return new JobExists_OutputModel
            {
                OpJobReleased = opJobReleased,
                OpJobClosed = opJobClosed,
                OpJobExists = opJobExists
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.ToPCID changes (this is for ToPCID, for FromPCID use OnChangeFromPCID method).
        /// </summary>
        [Route("OnChangeToPCID")]
        [HttpPost]
        public OnChangeToPCID_OutputModel OnChangeToPCID(OnChangeToPCID_InputModel model)
        {
            ___service.OnChangeToPCID(model.IpPCID, ref model.Ds, model.PCallProcess);

            return new OnChangeToPCID_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.FromAssemblySeq changes.
        /// </summary>
        [Route("OnChangeFromAssemblySeq")]
        [HttpPost]
        public OnChangeFromAssemblySeq_OutputModel OnChangeFromAssemblySeq(OnChangeFromAssemblySeq_InputModel model)
        {
            ___service.OnChangeFromAssemblySeq(model.PiFromAssemblySeq, ref model.Ds, model.PCallProcess);

            return new OnChangeFromAssemblySeq_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.FromBinNum changes.
        /// </summary>
        [Route("OnChangeFromBinNum")]
        [HttpPost]
        public OnChangeFromBinNum_OutputModel OnChangeFromBinNum(OnChangeFromBinNum_InputModel model)
        {
            ___service.OnChangeFromBinNum(ref model.Ds);

            return new OnChangeFromBinNum_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.FromJobNum changes.
        /// </summary>
        [Route("OnChangeFromJobNum")]
        [HttpPost]
        public OnChangeFromJobNum_OutputModel OnChangeFromJobNum(OnChangeFromJobNum_InputModel model)
        {
            ___service.OnChangeFromJobNum(model.PcFromJobNum, ref model.Ds, model.PCallProcess);

            return new OnChangeFromJobNum_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.FromJobNum changes.
        /// </summary>
        [Route("OnChangeFromJobSeq")]
        [HttpPost]
        public OnChangeFromJobSeq_OutputModel OnChangeFromJobSeq(OnChangeFromJobSeq_InputModel model)
        {
            string pcMessage;

            ___service.OnChangeFromJobSeq(ref model.Ds, model.PCallProcess, out pcMessage);

            return new OnChangeFromJobSeq_OutputModel
            {
                Ds = model.Ds,
                PcMessage = pcMessage
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.PartNum changes.
        /// </summary>
        [Route("OnChangeFromWarehouse")]
        [HttpPost]
        public OnChangeFromWarehouse_OutputModel OnChangeFromWarehouse(OnChangeFromWarehouse_InputModel model)
        {
            ___service.OnChangeFromWarehouse(ref model.Ds, model.PCallProcess);

            return new OnChangeFromWarehouse_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call when from warehouse changes.  This method will also reset the bin to the default value for the warehouse
        /// </summary>
        [Route("ChangeFromWarehouseDefaultBin")]
        [HttpPost]
        public ChangeFromWarehouseDefaultBin_OutputModel ChangeFromWarehouseDefaultBin(ChangeFromWarehouseDefaultBin_InputModel model)
        {
            ___service.ChangeFromWarehouseDefaultBin(ref model.Ds, model.PCallProcess);

            return new ChangeFromWarehouseDefaultBin_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.LotNum changes.
        /// </summary>
        [Route("OnChangeLotNum")]
        [HttpPost]
        public OnChangeLotNum_OutputModel OnChangeLotNum(OnChangeLotNum_InputModel model)
        {
            ___service.OnChangeLotNum(model.PcLotNum, ref model.Ds);

            return new OnChangeLotNum_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.PartNum changes.
        /// </summary>
        [Route("OnChangePartNum")]
        [HttpPost]
        public OnChangePartNum_OutputModel OnChangePartNum(OnChangePartNum_InputModel model)
        {
            ___service.OnChangePartNum(ref model.Ds, model.PCallProcess);

            return new OnChangePartNum_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.ToAssemblySeq changes.
        /// </summary>
        [Route("OnChangeToAssemblySeq")]
        [HttpPost]
        public OnChangeToAssemblySeq_OutputModel OnChangeToAssemblySeq(OnChangeToAssemblySeq_InputModel model)
        {
            ___service.OnChangeToAssemblySeq(ref model.Ds, model.PCallProcess);

            return new OnChangeToAssemblySeq_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.ToJobNum changes.
        /// </summary>
        [Route("OnChangeToJobNum")]
        [HttpPost]
        public OnChangeToJobNum_OutputModel OnChangeToJobNum(OnChangeToJobNum_InputModel model)
        {
            string pcMessage;

            ___service.OnChangeToJobNum(ref model.Ds, model.PCallProcess, out pcMessage);

            return new OnChangeToJobNum_OutputModel
            {
                Ds = model.Ds,
                PcMessage = pcMessage
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.ToJobSeq changes.
        /// </summary>
        [Route("OnChangeToJobSeq")]
        [HttpPost]
        public OnChangeToJobSeq_OutputModel OnChangeToJobSeq(OnChangeToJobSeq_InputModel model)
        {
            string pcMessage;

            ___service.OnChangeToJobSeq(ref model.Ds, model.PCallProcess, out pcMessage);

            return new OnChangeToJobSeq_OutputModel
            {
                Ds = model.Ds,
                PcMessage = pcMessage
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.PartNum changes.
        /// </summary>
        [Route("OnChangeToWarehouse")]
        [HttpPost]
        public OnChangeToWarehouse_OutputModel OnChangeToWarehouse(OnChangeToWarehouse_InputModel model)
        {
            ___service.OnChangeToWarehouse(ref model.Ds, model.PCallProcess);

            return new OnChangeToWarehouse_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call when to warehouse changes.  This method will also reset the bin to the default value for the warehouse
        /// </summary>
        [Route("ChangeToWarehouseDefaultBin")]
        [HttpPost]
        public ChangeToWarehouseDefaultBin_OutputModel ChangeToWarehouseDefaultBin(ChangeToWarehouseDefaultBin_InputModel model)
        {
            ___service.ChangeToWarehouseDefaultBin(ref model.Ds, model.PCallProcess);

            return new ChangeToWarehouseDefaultBin_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the Nbr Of Pieces changes to calculate a new tran qty
        /// </summary>
        [Route("OnChangingNumberOfPieces")]
        [HttpPost]
        public OnChangingNumberOfPieces_OutputModel OnChangingNumberOfPieces(OnChangingNumberOfPieces_InputModel model)
        {
            ___service.OnChangingNumberOfPieces(model.NumberOfPieces, ref model.Ds);

            return new OnChangingNumberOfPieces_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the attribute set changes
        /// </summary>
        [Route("OnChangingAttributeSet")]
        [HttpPost]
        public OnChangingAttributeSet_OutputModel OnChangingAttributeSet(OnChangingAttributeSet_InputModel model)
        {
            ___service.OnChangingAttributeSet(model.AttributeSetID, ref model.Ds);

            return new OnChangingAttributeSet_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the attribute set changes for adjustment transactions (Issue Misc, Return Misc) to maintain inventory tracking
        /// </summary>
        [Route("OnChangingAttributeSetAdjustments")]
        [HttpPost]
        public OnChangingAttributeSetAdjustments_OutputModel OnChangingAttributeSetAdjustments(OnChangingAttributeSetAdjustments_InputModel model)
        {
            ___service.OnChangingAttributeSetAdjustments(model.AttributeSetID, ref model.Ds);

            return new OnChangingAttributeSetAdjustments_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the Revision changes to maintain inventory tracking
        /// </summary>
        [Route("OnChangingRevisionNum")]
        [HttpPost]
        public OnChangingRevisionNum_OutputModel OnChangingRevisionNum(OnChangingRevisionNum_InputModel model)
        {
            ___service.OnChangingRevisionNum(model.RevisionNum, ref model.Ds);

            return new OnChangingRevisionNum_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the Revision changes for adjustment transactions (Issue Misc, Return Misc) to maintain inventory tracking
        /// </summary>
        [Route("OnChangingRevisionNumAdjustments")]
        [HttpPost]
        public OnChangingRevisionNumAdjustments_OutputModel OnChangingRevisionNumAdjustments(OnChangingRevisionNumAdjustments_InputModel model)
        {
            ___service.OnChangingRevisionNumAdjustments(model.RevisionNum, ref model.Ds);

            return new OnChangingRevisionNumAdjustments_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.TranQty changes.
        /// This method performs validation on TranQty and sets the Issued Complete flag.
        /// </summary>
        [Route("OnChangeTranQty")]
        [HttpPost]
        public OnChangeTranQty_OutputModel OnChangeTranQty(OnChangeTranQty_InputModel model)
        {
            ___service.OnChangeTranQty(model.PdTranQty, ref model.Ds);

            return new OnChangeTranQty_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.UM changes.
        /// </summary>
        [Route("OnChangeUM")]
        [HttpPost]
        public OnChangeUM_OutputModel OnChangeUM(OnChangeUM_InputModel model)
        {
            ___service.OnChangeUM(model.PUM, ref model.Ds);

            return new OnChangeUM_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.FromBinNum is changing.
        /// </summary>
        [Route("OnChangeASTUom")]
        [HttpPost]
        public OnChangeASTUom_OutputModel OnChangeASTUom(OnChangeASTUom_InputModel model)
        {
            ___service.OnChangeASTUom(model.PUM, ref model.Ds);

            return new OnChangeASTUom_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.FromBinNum is changing.
        /// </summary>
        [Route("OnChangingFromBinNum")]
        [HttpPost]
        public OnChangingFromBinNum_OutputModel OnChangingFromBinNum(OnChangingFromBinNum_InputModel model)
        {
            string pcMessage;

            ___service.OnChangingFromBinNum(ref model.Ds, out pcMessage);

            return new OnChangingFromBinNum_OutputModel
            {
                Ds = model.Ds,
                PcMessage = pcMessage
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSetjobseq (either to or from is changing)
        /// </summary>
        [Route("OnChangingJobSeq")]
        [HttpPost]
        public OnChangingJobSeq_OutputModel OnChangingJobSeq(OnChangingJobSeq_InputModel model)
        {
            ___service.OnChangingJobSeq(model.PiJobSeq, model.PcDirection, model.PCallProcess, ref model.Ds);

            return new OnChangingJobSeq_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Call this method when the value of Epicor.Mfg.BO.IssueReturnDataSet.ToJobSeq is changing.
        /// </summary>
        [Route("OnChangingToJobSeq")]
        [HttpPost]
        public OnChangingToJobSeq_OutputModel OnChangingToJobSeq(OnChangingToJobSeq_InputModel model)
        {
            ___service.OnChangingToJobSeq(model.PiToJobSeq, ref model.Ds);

            return new OnChangingToJobSeq_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Perform Material Movement.
        /// </summary>
        [Route("PerformMaterialMovement")]
        [HttpPost]
        public PerformMaterialMovement_OutputModel PerformMaterialMovement(PerformMaterialMovement_InputModel model)
        {
            string legalNumberMessage;
            string partTranPKs;

            ___service.PerformMaterialMovement(model.PlNegQtyAction, ref model.Ds, out legalNumberMessage, out partTranPKs);

            return new PerformMaterialMovement_OutputModel
            {
                Ds = model.Ds,
                LegalNumberMessage = legalNumberMessage,
                PartTranPKs = partTranPKs
            };
        }

        /// <summary>
        /// Perform Material Movement.
        /// </summary>
        [Route("PerformMaterialMovement2")]
        [HttpPost]
        public PerformMaterialMovement2_OutputModel PerformMaterialMovement2(PerformMaterialMovement2_InputModel model)
        {
            string legalNumberMessage;
            string message;
            string partTranPKs;

            ___service.PerformMaterialMovement2(model.PlNegQtyAction, ref model.Ds, out legalNumberMessage, out message, out partTranPKs);

            return new PerformMaterialMovement2_OutputModel
            {
                Ds = model.Ds,
                LegalNumberMessage = legalNumberMessage,
                Message = message,
                PartTranPKs = partTranPKs
            };
        }

        /// <summary>
        /// Perform Material Movement.
        /// </summary>
        [Route("PerformMaterialMovementWithLegalNum")]
        [HttpPost]
        public PerformMaterialMovementWithLegalNum_OutputModel PerformMaterialMovementWithLegalNum(PerformMaterialMovementWithLegalNum_InputModel model)
        {
            string legalNumberMessage;
            string partTranPKs;

            ___service.PerformMaterialMovementWithLegalNum(model.PlNegQtyAction, ref model.Ds, out legalNumberMessage, out partTranPKs, model.LegalNum);

            return new PerformMaterialMovementWithLegalNum_OutputModel
            {
                Ds = model.Ds,
                LegalNumberMessage = legalNumberMessage,
                PartTranPKs = partTranPKs
            };
        }

        /// <summary>
        /// Performs a mass unpick by PCID - this handles the actual inventory movement - everything else is handled by UnpickTransaction BO
        /// </summary>
        [Route("MassUnpickByPCID")]
        [HttpPost]
        public MassUnpickByPCID_OutputModel MassUnpickByPCID(MassUnpickByPCID_InputModel model)
        {
            string legalNumMsg;

            ___service.MassUnpickByPCID(model.Pcid, model.Whse, model.Bin, model.PartNum, ref model.Ds, out legalNumMsg);

            return new MassUnpickByPCID_OutputModel
            {
                Ds = model.Ds,
                LegalNumMsg = legalNumMsg
            };
        }

        /// <summary>
        /// Generate a dynamic PCID
        /// </summary>
        [Route("GenerateDynamicPCID")]
        [HttpPost]
        public GenerateDynamicPCID_OutputModel GenerateDynamicPCID(GenerateDynamicPCID_InputModel model)
        {
            var ___result = ___service.GenerateDynamicPCID(model.PkgControlID);

            return new GenerateDynamicPCID_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Returns if the employee has the 'Suppress Print Messages' flag on
        /// </summary>
        [Route("SuppressPrintMessages")]
        [HttpPost]
        public SuppressPrintMessages_OutputModel SuppressPrintMessages(SuppressPrintMessages_InputModel model)
        {
            var ___result = ___service.SuppressPrintMessages(model.EmpID);

            return new SuppressPrintMessages_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// To verify if autoprint is setup
        /// </summary>
        [Route("IsAutoPrintSetup")]
        [HttpPost]
        public IsAutoPrintSetup_OutputModel IsAutoPrintSetup(IsAutoPrintSetup_InputModel model)
        {
            var ___result = ___service.IsAutoPrintSetup(model.IpWriteToStaged);

            return new IsAutoPrintSetup_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Validates a pkg control ID code
        /// </summary>
        [Route("ValidatePkgControlID")]
        [HttpPost]
        public void ValidatePkgControlID(ValidatePkgControlID_InputModel model)
        {
            ___service.ValidatePkgControlID(model.PkgControlIDCode);
        }

        /// <summary>
        /// This method will check, depending on the Tran Type, if the available quantity
        /// has been reduced before the creation of the issue return.
        /// </summary>
        [Route("PreGetNewIssueReturn")]
        [HttpPost]
        public PreGetNewIssueReturn_OutputModel PreGetNewIssueReturn(PreGetNewIssueReturn_InputModel model)
        {
            string pcAction;
            string pcMessage;
            System.Decimal pdQtyAvailable;

            ___service.PreGetNewIssueReturn(model.PcMtlQueueRowID, out pcAction, out pcMessage, out pdQtyAvailable);

            return new PreGetNewIssueReturn_OutputModel
            {
                PcAction = pcAction,
                PcMessage = pcMessage,
                PdQtyAvailable = pdQtyAvailable
            };
        }

        /// <summary>
        /// This method performs multiple functions:
        /// It will return a record in the LegalNumGenOpts datatable if
        /// a legal number is required for this transaction.  The RequiresUserInput
        /// flag will indicate if this legal number requires input from the user.  If
        /// it does, the LegalNumberPrompt business objects needs to be called to
        /// gather that information.  This method should be called when the user
        /// saves the record but before the Update method is called.
        ///
        /// It will also auto populate ttSelectedSerialNumbers table under some conditions for eligible types of IR transactions
        /// </summary>
        [Route("PrePerformMaterialMovement")]
        [HttpPost]
        public PrePerformMaterialMovement_OutputModel PrePerformMaterialMovement(PrePerformMaterialMovement_InputModel model)
        {
            bool requiresUserInput;

            ___service.PrePerformMaterialMovement(ref model.Ds, out requiresUserInput);

            return new PrePerformMaterialMovement_OutputModel
            {
                Ds = model.Ds,
                RequiresUserInput = requiresUserInput
            };
        }

        /// <summary>
        /// Purpose:  Gets the PartWip
        /// sets the "From quantity" (ttIssueReturn.QtyPrevioulsyIssued)
        /// and "TO Quantity" (ttIssueReturn.TranQty) to the PartWip.
        /// Notes:This is called when the from fields are changed. (FromJobNum, FromAssemblySeq, FromJobSeq, FromWarehouseCode, FromBinNum)
        /// Currently this is only for a WIP-WIP transaction
        /// Created as part of scr57730
        /// </summary>
        [Route("SetQuantity")]
        [HttpPost]
        public void SetQuantity()
        {
            ___service.SetQuantity();
        }

        /// <summary>
        /// Validates that a single serial number is valid for this transaction
        /// </summary>
        [Route("ValidateSN")]
        [HttpPost]
        public ValidateSN_OutputModel ValidateSN(ValidateSN_InputModel model)
        {
            bool isVoided;

            ___service.ValidateSN(ref model.Ds, model.SerialNumber, out isVoided);

            return new ValidateSN_OutputModel
            {
                Ds = model.Ds,
                IsVoided = isVoided
            };
        }

        /// <summary>
        /// Validates To Location, Bin Number exists
        /// </summary>
        [Route("validateToBinNum")]
        [HttpPost]
        public validateToBinNum_OutputModel validateToBinNum(validateToBinNum_InputModel model)
        {
            ___service.validateToBinNum(ref model.Ds, model.BinNum);

            return new validateToBinNum_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Gets the default values for the browse section of the adjustment screen
        /// </summary>
        [Route("GetInventoryQtyAdjBrw")]
        [HttpPost]
        public GetInventoryQtyAdjBrw_OutputModel GetInventoryQtyAdjBrw(GetInventoryQtyAdjBrw_InputModel model)
        {
            string primaryBin;

            var ___result = ___service.GetInventoryQtyAdjBrw(model.PartNum, model.AttributeSetID, model.WareHouseCode, out primaryBin);

            return new GetInventoryQtyAdjBrw_OutputModel
            {
                PrimaryBin = primaryBin,
                _Return = ___result
            };
        }

        /// <summary>
        /// Gets the default values for the browse section of the adjustment screen
        /// </summary>
        [Route("GetInventoryQtyAdjBrwInventoryTracking")]
        [HttpPost]
        public GetInventoryQtyAdjBrwInventoryTracking_OutputModel GetInventoryQtyAdjBrwInventoryTracking(GetInventoryQtyAdjBrwInventoryTracking_InputModel model)
        {
            string primaryBin;

            var ___result = ___service.GetInventoryQtyAdjBrwInventoryTracking(model.PartNum, model.RevisionNum, model.AttributeSetID, model.WareHouseCode, out primaryBin);

            return new GetInventoryQtyAdjBrwInventoryTracking_OutputModel
            {
                PrimaryBin = primaryBin,
                _Return = ___result
            };
        }

        /// <summary>
        /// Gets the default values for the browse section of the adjustment screen
        /// Copy of the same method of BO InventoryQtyAdj
        /// Specific for web (client) use.
        /// </summary>
        [Route("GetInventoryQtyAdjBrwForWeb")]
        [HttpPost]
        [System.ObsoleteAttribute("This method is has been obsoleted, please use GetInventoryQtyAdjBrwInventoryTracking")]
        public GetInventoryQtyAdjBrwForWeb_OutputModel GetInventoryQtyAdjBrwForWeb(GetInventoryQtyAdjBrwForWeb_InputModel model)
        {
            string primaryBin;

            var ___result = ___service.GetInventoryQtyAdjBrwForWeb(model.PartNum, model.AttributeSetID, model.WareHouseCode, out primaryBin);

            return new GetInventoryQtyAdjBrwForWeb_OutputModel
            {
                PrimaryBin = primaryBin,
                _Return = ___result
            };
        }

        /// <summary>
        /// This method defaults PartAdvisor fields when the PartNum field changes
        /// </summary>
        [Route("GetPartXRefInfo")]
        [HttpPost]
        public GetPartXRefInfo_OutputModel GetPartXRefInfo(GetPartXRefInfo_InputModel model)
        {
            string serialWarning;
            string questionString;
            bool multipleMatch;

            ___service.GetPartXRefInfo(ref model.PartNum, model.SysRowID, model.RowType, ref model.UomCode, ref model.Qty, out serialWarning, out questionString, out multipleMatch);

            return new GetPartXRefInfo_OutputModel
            {
                PartNum = model.PartNum,
                UomCode = model.UomCode,
                Qty = model.Qty,
                SerialWarning = serialWarning,
                QuestionString = questionString,
                MultipleMatch = multipleMatch
            };
        }

        /// <summary>
        ///
        /// </summary>
        [Route("ValidUOM")]
        [HttpPost]
        public ValidUOM_OutputModel ValidUOM(ValidUOM_InputModel model)
        {
            var ___result = ___service.ValidUOM(model.IPartNum, model.IUOM);

            return new ValidUOM_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Method to call to get available tran doc types.
        /// </summary>
        [Route("GetAvailTranDocTypes")]
        [HttpPost]
        public GetAvailTranDocTypes_OutputModel GetAvailTranDocTypes()
        {
            string AvailTypes;

            ___service.GetAvailTranDocTypes(out AvailTypes);

            return new GetAvailTranDocTypes_OutputModel
            {
                AvailTypes = AvailTypes
            };
        }

        /// <summary>
        ///
        /// </summary>
        [Route("NegativeInventoryTestTran")]
        [HttpPost]
        public NegativeInventoryTestTran_OutputModel NegativeInventoryTestTran(NegativeInventoryTestTran_InputModel model)
        {
            string pcNeqQtyAction;
            string pcMessage;

            ___service.NegativeInventoryTestTran(model.PcPartNum, model.PcWhseCode, model.PcBinNum, model.PcLotNum, model.PcAttributeSetID, model.PcPCID, model.PcDimCode, model.PdDimConvFactor, model.PgTranRowId, model.IpSellingQuantity, out pcNeqQtyAction, out pcMessage);

            return new NegativeInventoryTestTran_OutputModel
            {
                PcNeqQtyAction = pcNeqQtyAction,
                PcMessage = pcMessage
            };
        }

        /// <summary>
        ///
        /// </summary>
        [Route("NegativeInventoryTest")]
        [HttpPost]
        public NegativeInventoryTest_OutputModel NegativeInventoryTest(NegativeInventoryTest_InputModel model)
        {
            string pcNeqQtyAction;
            string pcMessage;

            ___service.NegativeInventoryTest(model.PcPartNum, model.PcWhseCode, model.PcBinNum, model.PcLotNum, model.PcAttributeSetID, model.PcPCID, model.PcDimCode, model.PdDimConvFactor, model.IpSellingQuantity, out pcNeqQtyAction, out pcMessage);

            return new NegativeInventoryTest_OutputModel
            {
                PcNeqQtyAction = pcNeqQtyAction,
                PcMessage = pcMessage
            };
        }

        /// <summary>
        /// Methods to check Negative Inventory and Contract bin.
        /// Planning Contract Bin Actions.
        /// </summary>
        [Route("MasterInventoryBinTests")]
        [HttpPost]
        public MasterInventoryBinTests_OutputModel MasterInventoryBinTests(MasterInventoryBinTests_InputModel model)
        {
            string pcNeqQtyAction;
            string pcNeqQtyMessage;
            string pcPCBinAction;
            string pcPCBinMessage;
            string pcOutBinAction;
            string pcOutBinMessage;

            ___service.MasterInventoryBinTests(ref model.Ds, out pcNeqQtyAction, out pcNeqQtyMessage, out pcPCBinAction, out pcPCBinMessage, out pcOutBinAction, out pcOutBinMessage);

            return new MasterInventoryBinTests_OutputModel
            {
                Ds = model.Ds,
                PcNeqQtyAction = pcNeqQtyAction,
                PcNeqQtyMessage = pcNeqQtyMessage,
                PcPCBinAction = pcPCBinAction,
                PcPCBinMessage = pcPCBinMessage,
                PcOutBinAction = pcOutBinAction,
                PcOutBinMessage = pcOutBinMessage
            };
        }

        /// <summary>
        /// Method to check values for whsebin.
        /// </summary>
        [Route("checkWhseBin")]
        [HttpPost]
        public void checkWhseBin(checkWhseBin_InputModel model)
        {
            ___service.checkWhseBin(model.TtIssueReturn);
        }

        /// <summary>
        ///
        /// </summary>
        [Route("FillForeignFields")]
        [HttpPost]
        public void FillForeignFields(FillForeignFields_InputModel model)
        {
            ___service.FillForeignFields(model.TtIssueReturn);
        }

        /// <summary>
        ///
        /// </summary>
        [Route("CheckPackageCodeAllocNegQty")]
        [HttpPost]
        public CheckPackageCodeAllocNegQty_OutputModel CheckPackageCodeAllocNegQty(CheckPackageCodeAllocNegQty_InputModel model)
        {
            string opWarning;
            string opAction;
            string opAllocWarning;
            string opAllocAction;

            ___service.CheckPackageCodeAllocNegQty(model.IpcalledFrom, model.IpPCID, model.IpQty, out opWarning, out opAction, out opAllocWarning, out opAllocAction);

            return new CheckPackageCodeAllocNegQty_OutputModel
            {
                OpWarning = opWarning,
                OpAction = opAction,
                OpAllocWarning = opAllocWarning,
                OpAllocAction = opAllocAction
            };
        }

        /// <summary>
        /// Returns true if there are any PartAllocSerial records for the company/part, consistent with InvTransfer.
        /// </summary>
        [Route("AreSNumsAllocated")]
        [HttpPost]
        public AreSNumsAllocated_OutputModel AreSNumsAllocated(AreSNumsAllocated_InputModel model)
        {
            var ___result = ___service.AreSNumsAllocated(model.CompanyID, model.PartNum);

            return new AreSNumsAllocated_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Returns a whereclause for To Bin Num searches
        /// </summary>
        [Route("GetToBinNumWhereClause")]
        [HttpPost]
        public GetToBinNumWhereClause_OutputModel GetToBinNumWhereClause(GetToBinNumWhereClause_InputModel model)
        {
            string toBinNumWhereClause;

            ___service.GetToBinNumWhereClause(model.TranType, model.ToWarehouseCode, model.ToBinNum, out toBinNumWhereClause);

            return new GetToBinNumWhereClause_OutputModel
            {
                ToBinNumWhereClause = toBinNumWhereClause
            };
        }
    }
}

namespace Erp.Models.BO.IssueReturn
{
    public class GetList_InputModel
    {
        public string WhereClauseJobHead;
        public string WhereClauseJobAsmbl;
        public int PageSize;
        public int AbsolutePage;
    }

    public class GetList_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.IssueReturnJobAsmblTableset _Return;
    }

    public class GetListJobs_InputModel
    {
        public string WhereClauseJobHead;
        public int PageSize;
        public int AbsolutePage;
    }

    public class GetListJobs_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.IssueReturnJobListTableset _Return;
    }

    public class GetNewIssueReturn_InputModel
    {
        public string PcTranType;
        public System.Guid PcMtlQueueRowID;
        public string PCallProcess;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetNewIssueReturn_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetNewIssueReturnFromJob_InputModel
    {
        public string PcFromJobNum;
        public int PiFromAssemblySeq;
        public string PcTranType;
        public System.Guid PcMtlQueueRowID;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetNewIssueReturnFromJob_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetNewIssueReturnToJob_InputModel
    {
        public string PcToJobNum;
        public int PiToAssemblySeq;
        public string PcTranType;
        public System.Guid PcMtlQueueRowID;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetNewIssueReturnToJob_OutputModel
    {
        public string PcMessage;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetNewJobAsmblMultiple_InputModel
    {
        public string PcTranType;
        public System.Guid PcMtlQueueRowID;
        public string PCallProcess;
        public Erp.Tablesets.SelectedJobAsmblTableset Ds;
    }

    public class GetNewJobAsmblMultiple_OutputModel
    {
        public Erp.Tablesets.SelectedJobAsmblTableset Ds;
        public string PcMessage;
        public Erp.Tablesets.IssueReturnTableset _Return;
    }

    public class GetNewJobAsmblSearch_InputModel
    {
        public Erp.Tablesets.SelectedJobAsmblTableset Ds;
    }

    public class GetNewJobAsmblSearch_OutputModel
    {
        public Erp.Tablesets.SelectedJobAsmblTableset Ds;
    }

    public class GetNewPartMultiple_InputModel
    {
        public string PcTranType;
        public System.Guid PcMtlQueueRowID;
        public Erp.Tablesets.SelectedPartTableset Ds;
    }

    public class GetNewPartMultiple_OutputModel
    {
        public Erp.Tablesets.SelectedPartTableset Ds;
        public string PcMessage;
        public Erp.Tablesets.IssueReturnTableset _Return;
    }

    public class GetNewPartNum_InputModel
    {
        public string PcPartNum;
        public string PcTranType;
        public System.Guid PcMtlQueueRowID;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetNewPartNum_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetNewPartSearch_InputModel
    {
        public Erp.Tablesets.SelectedPartTableset Ds;
    }

    public class GetNewPartSearch_OutputModel
    {
        public Erp.Tablesets.SelectedPartTableset Ds;
    }

    public class GetRows_InputModel
    {
        public string WhereClauseJobHead;
        public string WhereClauseJobAsmbl;
        public int PageSize;
        public int AbsolutePage;
    }

    public class GetRows_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.IssueReturnJobAsmblTableset _Return;
    }

    public class GetRowsJobAssemblies_InputModel
    {
        public string WhereClause;
        public int PageSize;
        public int AbsolutePage;
    }

    public class GetRowsJobAssemblies_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.IssueReturnJobAsmblTableset _Return;
    }

    public class GetRowsWIP_InputModel
    {
        public string WhereClause;
        public int PageSize;
        public int AbsolutePage;
    }

    public class GetRowsWIP_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.IssueReturnJobAsmblTableset _Return;
    }

    public class GetSelectSerialNumbersParams_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetSelectSerialNumbersParams_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public Erp.Tablesets.SelectSerialNumbersParamsTableset _Return;
    }

    public class GetUnissuedQty_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetUnissuedQty_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetUnpickSettings_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetUnpickSettings_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class IsValidAssembly_InputModel
    {
        public string PcJobNum;
        public int PiAssemblySeq;
    }

    public class IsValidAssembly_OutputModel
    {
        public bool PlFound;
    }

    public class OnChangeFromPCID_InputModel
    {
        public string FromPCID;
        public bool AllowDiffPartAndUM;
        public bool QuestionCheck;
        public string PCallProcess;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeFromPCID_OutputModel
    {
        public string QuestionMsg;
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PcMessage;
    }

    public class JobExists_InputModel
    {
        public string IpJobNum;
    }

    public class JobExists_OutputModel
    {
        public bool OpJobReleased;
        public bool OpJobClosed;
        public bool OpJobExists;
    }

    public class OnChangeToPCID_InputModel
    {
        public string IpPCID;
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class OnChangeToPCID_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeFromAssemblySeq_InputModel
    {
        public int PiFromAssemblySeq;
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class OnChangeFromAssemblySeq_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeFromBinNum_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeFromBinNum_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeFromJobNum_InputModel
    {
        public string PcFromJobNum;
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class OnChangeFromJobNum_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeFromJobSeq_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class OnChangeFromJobSeq_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PcMessage;
    }

    public class OnChangeFromWarehouse_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class OnChangeFromWarehouse_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class ChangeFromWarehouseDefaultBin_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class ChangeFromWarehouseDefaultBin_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeLotNum_InputModel
    {
        public string PcLotNum;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeLotNum_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangePartNum_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class OnChangePartNum_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeToAssemblySeq_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class OnChangeToAssemblySeq_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeToJobNum_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class OnChangeToJobNum_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PcMessage;
    }

    public class OnChangeToJobSeq_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class OnChangeToJobSeq_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PcMessage;
    }

    public class OnChangeToWarehouse_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class OnChangeToWarehouse_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class ChangeToWarehouseDefaultBin_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PCallProcess;
    }

    public class ChangeToWarehouseDefaultBin_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingNumberOfPieces_InputModel
    {
        public System.Decimal NumberOfPieces;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingNumberOfPieces_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingAttributeSet_InputModel
    {
        public int AttributeSetID;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingAttributeSet_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingAttributeSetAdjustments_InputModel
    {
        public int AttributeSetID;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingAttributeSetAdjustments_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingRevisionNum_InputModel
    {
        public string RevisionNum;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingRevisionNum_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingRevisionNumAdjustments_InputModel
    {
        public string RevisionNum;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingRevisionNumAdjustments_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeTranQty_InputModel
    {
        public System.Decimal PdTranQty;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeTranQty_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeUM_InputModel
    {
        public string PUM;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeUM_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeASTUom_InputModel
    {
        public string PUM;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangeASTUom_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingFromBinNum_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingFromBinNum_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PcMessage;
    }

    public class OnChangingJobSeq_InputModel
    {
        public int PiJobSeq;
        public string PcDirection;
        public string PCallProcess;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingJobSeq_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingToJobSeq_InputModel
    {
        public int PiToJobSeq;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class OnChangingToJobSeq_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class PerformMaterialMovement_InputModel
    {
        public bool PlNegQtyAction;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class PerformMaterialMovement_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string LegalNumberMessage;
        public string PartTranPKs;
    }

    public class PerformMaterialMovement2_InputModel
    {
        public bool PlNegQtyAction;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class PerformMaterialMovement2_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string LegalNumberMessage;
        public string Message;
        public string PartTranPKs;
    }

    public class PerformMaterialMovementWithLegalNum_InputModel
    {
        public bool PlNegQtyAction;
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string LegalNum;
    }

    public class PerformMaterialMovementWithLegalNum_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string LegalNumberMessage;
        public string PartTranPKs;
    }

    public class MassUnpickByPCID_InputModel
    {
        public string Pcid;
        public string Whse;
        public string Bin;
        public string PartNum;
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class MassUnpickByPCID_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string LegalNumMsg;
    }

    public class GenerateDynamicPCID_InputModel
    {
        public string PkgControlID;
    }

    public class GenerateDynamicPCID_OutputModel
    {
        public string _Return;
    }

    public class SuppressPrintMessages_InputModel
    {
        public string EmpID;
    }

    public class SuppressPrintMessages_OutputModel
    {
        public bool _Return;
    }

    public class IsAutoPrintSetup_InputModel
    {
        public bool IpWriteToStaged;
    }

    public class IsAutoPrintSetup_OutputModel
    {
        public bool _Return;
    }

    public class ValidatePkgControlID_InputModel
    {
        public string PkgControlIDCode;
    }

    public class PreGetNewIssueReturn_InputModel
    {
        public System.Guid PcMtlQueueRowID;
    }

    public class PreGetNewIssueReturn_OutputModel
    {
        public string PcAction;
        public string PcMessage;
        public System.Decimal PdQtyAvailable;
    }

    public class PrePerformMaterialMovement_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class PrePerformMaterialMovement_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public bool RequiresUserInput;
    }

    public class ValidateSN_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string SerialNumber;
    }

    public class ValidateSN_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public bool IsVoided;
    }

    public class validateToBinNum_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string BinNum;
    }

    public class validateToBinNum_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class GetInventoryQtyAdjBrw_InputModel
    {
        public string PartNum;
        public int AttributeSetID;
        public string WareHouseCode;
    }

    public class GetInventoryQtyAdjBrw_OutputModel
    {
        public string PrimaryBin;
        public Erp.Tablesets.InventoryQtyAdjBrwTableset _Return;
    }

    public class GetInventoryQtyAdjBrwInventoryTracking_InputModel
    {
        public string PartNum;
        public string RevisionNum;
        public int AttributeSetID;
        public string WareHouseCode;
    }

    public class GetInventoryQtyAdjBrwInventoryTracking_OutputModel
    {
        public string PrimaryBin;
        public Erp.Tablesets.InventoryQtyAdjBrwTableset _Return;
    }

    public class GetInventoryQtyAdjBrwForWeb_InputModel
    {
        public string PartNum;
        public int AttributeSetID;
        public string WareHouseCode;
    }

    public class GetInventoryQtyAdjBrwForWeb_OutputModel
    {
        public string PrimaryBin;
        public Erp.Tablesets.InventoryQtyAdjBrwTableset _Return;
    }

    public class GetPartXRefInfo_InputModel
    {
        public string PartNum;
        public string SysRowID;
        public string RowType;
        public string UomCode;
        public System.Decimal Qty;
    }

    public class GetPartXRefInfo_OutputModel
    {
        public string PartNum;
        public string UomCode;
        public System.Decimal Qty;
        public string SerialWarning;
        public string QuestionString;
        public bool MultipleMatch;
    }

    public class ValidUOM_InputModel
    {
        public string IPartNum;
        public string IUOM;
    }

    public class ValidUOM_OutputModel
    {
        public bool _Return;
    }

    public class GetAvailTranDocTypes_OutputModel
    {
        public string AvailTypes;
    }

    public class NegativeInventoryTestTran_InputModel
    {
        public string PcPartNum;
        public string PcWhseCode;
        public string PcBinNum;
        public string PcLotNum;
        public int PcAttributeSetID;
        public string PcPCID;
        public string PcDimCode;
        public System.Decimal PdDimConvFactor;
        public System.Guid PgTranRowId;
        public System.Decimal IpSellingQuantity;
    }

    public class NegativeInventoryTestTran_OutputModel
    {
        public string PcNeqQtyAction;
        public string PcMessage;
    }

    public class NegativeInventoryTest_InputModel
    {
        public string PcPartNum;
        public string PcWhseCode;
        public string PcBinNum;
        public string PcLotNum;
        public int PcAttributeSetID;
        public string PcPCID;
        public string PcDimCode;
        public System.Decimal PdDimConvFactor;
        public System.Decimal IpSellingQuantity;
    }

    public class NegativeInventoryTest_OutputModel
    {
        public string PcNeqQtyAction;
        public string PcMessage;
    }

    public class MasterInventoryBinTests_InputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
    }

    public class MasterInventoryBinTests_OutputModel
    {
        public Erp.Tablesets.IssueReturnTableset Ds;
        public string PcNeqQtyAction;
        public string PcNeqQtyMessage;
        public string PcPCBinAction;
        public string PcPCBinMessage;
        public string PcOutBinAction;
        public string PcOutBinMessage;
    }

    public class checkWhseBin_InputModel
    {
        public Erp.Tablesets.IssueReturnRow TtIssueReturn;
    }

    public class FillForeignFields_InputModel
    {
        public Erp.Tablesets.IssueReturnRow TtIssueReturn;
    }

    public class CheckPackageCodeAllocNegQty_InputModel
    {
        public string IpcalledFrom;
        public string IpPCID;
        public System.Decimal IpQty;
    }

    public class CheckPackageCodeAllocNegQty_OutputModel
    {
        public string OpWarning;
        public string OpAction;
        public string OpAllocWarning;
        public string OpAllocAction;
    }

    public class AreSNumsAllocated_InputModel
    {
        public string CompanyID;
        public string PartNum;
    }

    public class AreSNumsAllocated_OutputModel
    {
        public bool _Return;
    }

    public class GetToBinNumWhereClause_InputModel
    {
        public string TranType;
        public string ToWarehouseCode;
        public string ToBinNum;
    }

    public class GetToBinNumWhereClause_OutputModel
    {
        public string ToBinNumWhereClause;
    }
}
