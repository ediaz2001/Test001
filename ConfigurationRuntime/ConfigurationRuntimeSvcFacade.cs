#pragma warning disable 1591    // Disable XML comment warnings for this file.

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;

using Epicor.Data;
using Epicor.Hosting;

using Ice;

#region Service related namespaces

using Erp.Contracts;
using Erp.Tablesets;

#endregion // Service related namespaces

namespace Erp.Services.BO
{
    [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
    public sealed class ConfigurationRuntimeSvcFacade : Epicor.Customization.Bpm.SvcFacadeBase<ErpContext, ConfigurationRuntimeSvcContract, ConfigurationRuntimeSvc>, ConfigurationRuntimeSvcContract
    {
        #region Data members

        #endregion // Data members

        public ConfigurationRuntimeSvcFacade()
            : base("Erp:BO:ConfigurationRuntime")
        {
        }

        public ConfigurationRuntimeSvcFacade(ErpContext ctx)
            : base("Erp:BO:ConfigurationRuntime", ctx)
        {
        }

        #region ConfigurationRuntimeSvcContract Members

        public byte[] GetGeneratedClient(string configID, System.Guid TestID, bool IsTestPlan, string SpecID, string SpecRevNum, Erp.Shared.Lib.Configurator.ClientCheckSyntaxArgs clientCheckSyntaxArgs)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetGeneratedClient"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("TestID", TestID);
                        extension___parameters.Add("IsTestPlan", IsTestPlan);
                        extension___parameters.Add("SpecID", SpecID);
                        extension___parameters.Add("SpecRevNum", SpecRevNum);
                        extension___parameters.Add("clientCheckSyntaxArgs", clientCheckSyntaxArgs);
                        extension___implementation.BeforeMethod("GetGeneratedClient", extension___parameters);
                    }

                    var _return = adapter.Impl.GetGeneratedClient(configID, TestID, IsTestPlan, SpecID, SpecRevNum, clientCheckSyntaxArgs);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("TestID", TestID);
                        extension___parameters.Add("IsTestPlan", IsTestPlan);
                        extension___parameters.Add("SpecID", SpecID);
                        extension___parameters.Add("SpecRevNum", SpecRevNum);
                        extension___parameters.Add("clientCheckSyntaxArgs", clientCheckSyntaxArgs);
                        extension___implementation.AfterMethod("GetGeneratedClient", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.ConfigurationSequenceTableset PreStartConfiguration(ref Erp.Tablesets.ConfigurationRuntimeTableset configurationRuntimeDS, ref Erp.Tablesets.ConfigurationSummaryTableset configurationSummaryTS)
        {
            try
            {
                using (var adapter = this.GetImplementation("PreStartConfiguration"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationRuntimeDS", configurationRuntimeDS);
                        extension___parameters.Add("configurationSummaryTS", configurationSummaryTS);
                        extension___implementation.BeforeMethod("PreStartConfiguration", extension___parameters);
                    }

                    var _return = adapter.Impl.PreStartConfiguration(ref configurationRuntimeDS, ref configurationSummaryTS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationRuntimeDS", configurationRuntimeDS);
                        extension___parameters.Add("configurationSummaryTS", configurationSummaryTS);
                        extension___implementation.AfterMethod("PreStartConfiguration", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(configurationRuntimeDS);
                        Ice.Manager.Security.CensorColumns(configurationSummaryTS);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.PcValueTableset StartPcValueConfiguration(ref Erp.Tablesets.ConfigurationRuntimeTableset ds, Erp.Tablesets.ConfigurationSequenceTableset ds2)
        {
            try
            {
                using (var adapter = this.GetImplementation("StartPcValueConfiguration"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ds2", ds2);
                        extension___implementation.BeforeMethod("StartPcValueConfiguration", extension___parameters);
                    }

                    var _return = adapter.Impl.StartPcValueConfiguration(ref ds, ds2);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ds2", ds2);
                        extension___implementation.AfterMethod("StartPcValueConfiguration", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public byte[] StartConfiguration(ref Erp.Tablesets.ConfigurationRuntimeTableset ds, Erp.Tablesets.ConfigurationSequenceTableset ds2)
        {
            try
            {
                using (var adapter = this.GetImplementation("StartConfiguration"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ds2", ds2);
                        extension___implementation.BeforeMethod("StartConfiguration", extension___parameters);
                    }

                    var _return = adapter.Impl.StartConfiguration(ref ds, ds2);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("ds2", ds2);
                        extension___implementation.AfterMethod("StartConfiguration", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool SavePcValueConfiguration(Erp.Tablesets.ConfigurationSequenceTableset configurationSequenceDS, ref Erp.Tablesets.ConfigurationRuntimeTableset configurationRuntimeDS, Erp.Tablesets.PcValueTableset pcValueDS, out bool testPassed, out string failText, ref Erp.Tablesets.PcTestResultsTableset testResultsDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("SavePcValueConfiguration"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationSequenceDS", configurationSequenceDS);
                        extension___parameters.Add("configurationRuntimeDS", configurationRuntimeDS);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___parameters.Add("testResultsDS", testResultsDS);
                        extension___implementation.BeforeMethod("SavePcValueConfiguration", extension___parameters);
                    }

                    var _return = adapter.Impl.SavePcValueConfiguration(configurationSequenceDS, ref configurationRuntimeDS, pcValueDS, out testPassed, out failText, ref testResultsDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationSequenceDS", configurationSequenceDS);
                        extension___parameters.Add("configurationRuntimeDS", configurationRuntimeDS);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___parameters.Add("testPassed", testPassed);
                        extension___parameters.Add("failText", failText);
                        extension___parameters.Add("testResultsDS", testResultsDS);
                        extension___implementation.AfterMethod("SavePcValueConfiguration", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(configurationRuntimeDS);
                        Ice.Manager.Security.CensorColumns(testResultsDS);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool SavePcValueConfigurationMulti(Erp.Tablesets.ConfigurationSequenceTableset configSequenceDS, ref Erp.Tablesets.ConfigurationRuntimeTableset configRuntimeDS, System.Collections.Generic.Dictionary<string, Erp.Tablesets.PcValueTableset[]> pcValueDsArray, out bool testPassed, out string failText, ref Erp.Tablesets.PcTestResultsTableset testResultsDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("SavePcValueConfigurationMulti"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configSequenceDS", configSequenceDS);
                        extension___parameters.Add("configRuntimeDS", configRuntimeDS);
                        extension___parameters.Add("pcValueDsArray", pcValueDsArray);
                        extension___parameters.Add("testResultsDS", testResultsDS);
                        extension___implementation.BeforeMethod("SavePcValueConfigurationMulti", extension___parameters);
                    }

                    var _return = adapter.Impl.SavePcValueConfigurationMulti(configSequenceDS, ref configRuntimeDS, pcValueDsArray, out testPassed, out failText, ref testResultsDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configSequenceDS", configSequenceDS);
                        extension___parameters.Add("configRuntimeDS", configRuntimeDS);
                        extension___parameters.Add("pcValueDsArray", pcValueDsArray);
                        extension___parameters.Add("testPassed", testPassed);
                        extension___parameters.Add("failText", failText);
                        extension___parameters.Add("testResultsDS", testResultsDS);
                        extension___implementation.AfterMethod("SavePcValueConfigurationMulti", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(configRuntimeDS);
                        Ice.Manager.Security.CensorColumns(testResultsDS);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool SaveConfiguration(Erp.Tablesets.ConfigurationSequenceTableset configurationSequenceDS, ref Erp.Tablesets.ConfigurationRuntimeTableset configurationRuntimeDS, byte[] pcValueDS, out bool testPassed, out string failText, ref Erp.Tablesets.PcTestResultsTableset testResultsDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("SaveConfiguration"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationSequenceDS", configurationSequenceDS);
                        extension___parameters.Add("configurationRuntimeDS", configurationRuntimeDS);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___parameters.Add("testResultsDS", testResultsDS);
                        extension___implementation.BeforeMethod("SaveConfiguration", extension___parameters);
                    }

                    var _return = adapter.Impl.SaveConfiguration(configurationSequenceDS, ref configurationRuntimeDS, pcValueDS, out testPassed, out failText, ref testResultsDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationSequenceDS", configurationSequenceDS);
                        extension___parameters.Add("configurationRuntimeDS", configurationRuntimeDS);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___parameters.Add("testPassed", testPassed);
                        extension___parameters.Add("failText", failText);
                        extension___parameters.Add("testResultsDS", testResultsDS);
                        extension___implementation.AfterMethod("SaveConfiguration", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(configurationRuntimeDS);
                        Ice.Manager.Security.CensorColumns(testResultsDS);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool SaveMultiConfiguration(ref Erp.Tablesets.ConfigurationSequenceTableset configSequenceDS, ref Erp.Tablesets.ConfigurationRuntimeTableset configRuntimeDS, byte[] serializedData, ref Erp.Tablesets.PcTestResultsTableset testResultsDS, out bool testPassed, out string failText)
        {
            try
            {
                using (var adapter = this.GetImplementation("SaveMultiConfiguration"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configSequenceDS", configSequenceDS);
                        extension___parameters.Add("configRuntimeDS", configRuntimeDS);
                        extension___parameters.Add("serializedData", serializedData);
                        extension___parameters.Add("testResultsDS", testResultsDS);
                        extension___implementation.BeforeMethod("SaveMultiConfiguration", extension___parameters);
                    }

                    var _return = adapter.Impl.SaveMultiConfiguration(ref configSequenceDS, ref configRuntimeDS, serializedData, ref testResultsDS, out testPassed, out failText);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configSequenceDS", configSequenceDS);
                        extension___parameters.Add("configRuntimeDS", configRuntimeDS);
                        extension___parameters.Add("serializedData", serializedData);
                        extension___parameters.Add("testResultsDS", testResultsDS);
                        extension___parameters.Add("testPassed", testPassed);
                        extension___parameters.Add("failText", failText);
                        extension___implementation.AfterMethod("SaveMultiConfiguration", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(configSequenceDS);
                        Ice.Manager.Security.CensorColumns(configRuntimeDS);
                        Ice.Manager.Security.CensorColumns(testResultsDS);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeleteAssembliesInTestMode(ref Erp.Tablesets.ConfigurationSequenceTableset configSequenceDS, System.Guid testID)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeleteAssembliesInTestMode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configSequenceDS", configSequenceDS);
                        extension___parameters.Add("testID", testID);
                        extension___implementation.BeforeMethod("DeleteAssembliesInTestMode", extension___parameters);
                    }

                    adapter.Impl.DeleteAssembliesInTestMode(ref configSequenceDS, testID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configSequenceDS", configSequenceDS);
                        extension___parameters.Add("testID", testID);
                        extension___implementation.AfterMethod("DeleteAssembliesInTestMode", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(configSequenceDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ProcessNoInputsConfigurator(string relatedToTable, System.Guid relatedToSysRowID, string partNum, string revisionNum, string altMethod, string configID, string foreignTableName, System.Guid foreignSysRowID)
        {
            try
            {
                using (var adapter = this.GetImplementation("ProcessNoInputsConfigurator"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("relatedToTable", relatedToTable);
                        extension___parameters.Add("relatedToSysRowID", relatedToSysRowID);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("altMethod", altMethod);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("foreignTableName", foreignTableName);
                        extension___parameters.Add("foreignSysRowID", foreignSysRowID);
                        extension___implementation.BeforeMethod("ProcessNoInputsConfigurator", extension___parameters);
                    }

                    adapter.Impl.ProcessNoInputsConfigurator(relatedToTable, relatedToSysRowID, partNum, revisionNum, altMethod, configID, foreignTableName, foreignSysRowID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("relatedToTable", relatedToTable);
                        extension___parameters.Add("relatedToSysRowID", relatedToSysRowID);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("altMethod", altMethod);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("foreignTableName", foreignTableName);
                        extension___parameters.Add("foreignSysRowID", foreignSysRowID);
                        extension___implementation.AfterMethod("ProcessNoInputsConfigurator", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ProcessNICDocumentRules(ref Erp.Tablesets.ConfigurationSequenceTableset configSequenceDS, ref Erp.Tablesets.ConfigurationRuntimeTableset configRuntimeDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("ProcessNICDocumentRules"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configSequenceDS", configSequenceDS);
                        extension___parameters.Add("configRuntimeDS", configRuntimeDS);
                        extension___implementation.BeforeMethod("ProcessNICDocumentRules", extension___parameters);
                    }

                    adapter.Impl.ProcessNICDocumentRules(ref configSequenceDS, ref configRuntimeDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configSequenceDS", configSequenceDS);
                        extension___parameters.Add("configRuntimeDS", configRuntimeDS);
                        extension___implementation.AfterMethod("ProcessNICDocumentRules", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(configSequenceDS);
                        Ice.Manager.Security.CensorColumns(configRuntimeDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ProcessDocumentRules(ref Erp.Tablesets.ConfigurationSequenceTableset configSequenceDS, ref Erp.Tablesets.ConfigurationRuntimeTableset configRuntimeDS, Erp.Tablesets.PcValueTableset pcValueDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("ProcessDocumentRules"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configSequenceDS", configSequenceDS);
                        extension___parameters.Add("configRuntimeDS", configRuntimeDS);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.BeforeMethod("ProcessDocumentRules", extension___parameters);
                    }

                    adapter.Impl.ProcessDocumentRules(ref configSequenceDS, ref configRuntimeDS, pcValueDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configSequenceDS", configSequenceDS);
                        extension___parameters.Add("configRuntimeDS", configRuntimeDS);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.AfterMethod("ProcessDocumentRules", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(configSequenceDS);
                        Ice.Manager.Security.CensorColumns(configRuntimeDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ProcessKeepWhen(ref Erp.Tablesets.ConfigurationSequenceTableset configurationSequenceDS, ref Erp.Tablesets.ConfigurationRuntimeTableset configRuntimeDS, Erp.Tablesets.PcValueTableset pcValueDS, string parAltMethod, bool checkNextCfg, ref bool enableNextPage)
        {
            try
            {
                using (var adapter = this.GetImplementation("ProcessKeepWhen"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationSequenceDS", configurationSequenceDS);
                        extension___parameters.Add("configRuntimeDS", configRuntimeDS);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___parameters.Add("parAltMethod", parAltMethod);
                        extension___parameters.Add("checkNextCfg", checkNextCfg);
                        extension___parameters.Add("enableNextPage", enableNextPage);
                        extension___implementation.BeforeMethod("ProcessKeepWhen", extension___parameters);
                    }

                    adapter.Impl.ProcessKeepWhen(ref configurationSequenceDS, ref configRuntimeDS, pcValueDS, parAltMethod, checkNextCfg, ref enableNextPage);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationSequenceDS", configurationSequenceDS);
                        extension___parameters.Add("configRuntimeDS", configRuntimeDS);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___parameters.Add("parAltMethod", parAltMethod);
                        extension___parameters.Add("checkNextCfg", checkNextCfg);
                        extension___parameters.Add("enableNextPage", enableNextPage);
                        extension___implementation.AfterMethod("ProcessKeepWhen", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(configurationSequenceDS);
                        Ice.Manager.Security.CensorColumns(configRuntimeDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeleteSubConfiguration(Erp.Tablesets.PcValueGrpRow ttPcValueGrpRow, Erp.Tablesets.PcStructRow ttPcStructRow)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeleteSubConfiguration"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ttPcValueGrpRow", ttPcValueGrpRow);
                        extension___parameters.Add("ttPcStructRow", ttPcStructRow);
                        extension___implementation.BeforeMethod("DeleteSubConfiguration", extension___parameters);
                    }

                    adapter.Impl.DeleteSubConfiguration(ttPcValueGrpRow, ttPcStructRow);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ttPcValueGrpRow", ttPcValueGrpRow);
                        extension___parameters.Add("ttPcStructRow", ttPcStructRow);
                        extension___implementation.AfterMethod("DeleteSubConfiguration", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void CheckServerSyntax(string configID, Erp.Shared.Lib.Configurator.DocRuleCheckSyntaxArgs docRuleCheckSyntaxArgs, Erp.Shared.Lib.Configurator.ServerEventCheckSyntaxArgs serverEventCheckSyntaxArgs, Erp.Shared.Lib.Configurator.MethodRuleCheckSyntaxArgs methodRuleCheckSyntaxArgs, out string syntaxErrors)
        {
            try
            {
                using (var adapter = this.GetImplementation("CheckServerSyntax"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("docRuleCheckSyntaxArgs", docRuleCheckSyntaxArgs);
                        extension___parameters.Add("serverEventCheckSyntaxArgs", serverEventCheckSyntaxArgs);
                        extension___parameters.Add("methodRuleCheckSyntaxArgs", methodRuleCheckSyntaxArgs);
                        extension___implementation.BeforeMethod("CheckServerSyntax", extension___parameters);
                    }

                    adapter.Impl.CheckServerSyntax(configID, docRuleCheckSyntaxArgs, serverEventCheckSyntaxArgs, methodRuleCheckSyntaxArgs, out syntaxErrors);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("docRuleCheckSyntaxArgs", docRuleCheckSyntaxArgs);
                        extension___parameters.Add("serverEventCheckSyntaxArgs", serverEventCheckSyntaxArgs);
                        extension___parameters.Add("methodRuleCheckSyntaxArgs", methodRuleCheckSyntaxArgs);
                        extension___parameters.Add("syntaxErrors", syntaxErrors);
                        extension___implementation.AfterMethod("CheckServerSyntax", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void TestNICRules(string configID, string partNum, string revisionNum, ref Erp.Tablesets.PcTestResultsTableset ts)
        {
            try
            {
                using (var adapter = this.GetImplementation("TestNICRules"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("ts", ts);
                        extension___implementation.BeforeMethod("TestNICRules", extension___parameters);
                    }

                    adapter.Impl.TestNICRules(configID, partNum, revisionNum, ref ts);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("ts", ts);
                        extension___implementation.AfterMethod("TestNICRules", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ts);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void EWCTestRules(string partNum, string revisionNum, string configID, ref Erp.Tablesets.PcTestResultsTableset testRulesResultsDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("EWCTestRules"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testRulesResultsDS", testRulesResultsDS);
                        extension___implementation.BeforeMethod("EWCTestRules", extension___parameters);
                    }

                    adapter.Impl.EWCTestRules(partNum, revisionNum, configID, ref testRulesResultsDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testRulesResultsDS", testRulesResultsDS);
                        extension___implementation.AfterMethod("EWCTestRules", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(testRulesResultsDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void EDIDemandConfiguration(string parentMfgCompID, int iDemandContractNum, int iDemandHeadSeq, int iDemandDtlSeq, string iSmartString)
        {
            try
            {
                using (var adapter = this.GetImplementation("EDIDemandConfiguration"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("parentMfgCompID", parentMfgCompID);
                        extension___parameters.Add("iDemandContractNum", iDemandContractNum);
                        extension___parameters.Add("iDemandHeadSeq", iDemandHeadSeq);
                        extension___parameters.Add("iDemandDtlSeq", iDemandDtlSeq);
                        extension___parameters.Add("iSmartString", iSmartString);
                        extension___implementation.BeforeMethod("EDIDemandConfiguration", extension___parameters);
                    }

                    adapter.Impl.EDIDemandConfiguration(parentMfgCompID, iDemandContractNum, iDemandHeadSeq, iDemandDtlSeq, iSmartString);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("parentMfgCompID", parentMfgCompID);
                        extension___parameters.Add("iDemandContractNum", iDemandContractNum);
                        extension___parameters.Add("iDemandHeadSeq", iDemandHeadSeq);
                        extension___parameters.Add("iDemandDtlSeq", iDemandDtlSeq);
                        extension___parameters.Add("iSmartString", iSmartString);
                        extension___implementation.AfterMethod("EDIDemandConfiguration", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool EDIValidateSmartString(string partNum, string revisionNum, string ipSmartString, out string ssLogText)
        {
            try
            {
                using (var adapter = this.GetImplementation("EDIValidateSmartString"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("ipSmartString", ipSmartString);
                        extension___implementation.BeforeMethod("EDIValidateSmartString", extension___parameters);
                    }

                    var _return = adapter.Impl.EDIValidateSmartString(partNum, revisionNum, ipSmartString, out ssLogText);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("revisionNum", revisionNum);
                        extension___parameters.Add("ipSmartString", ipSmartString);
                        extension___parameters.Add("ssLogText", ssLogText);
                        extension___implementation.AfterMethod("EDIValidateSmartString", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void PartExists(string configID, string targetEntity, int groupSeq, string basePartNum, string baseRevisionNum, string newPartNum, int mtlSeq, string ruleTag, out bool partExists, out bool notUnique, out bool sIValues)
        {
            try
            {
                using (var adapter = this.GetImplementation("PartExists"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("targetEntity", targetEntity);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___parameters.Add("basePartNum", basePartNum);
                        extension___parameters.Add("baseRevisionNum", baseRevisionNum);
                        extension___parameters.Add("newPartNum", newPartNum);
                        extension___parameters.Add("mtlSeq", mtlSeq);
                        extension___parameters.Add("ruleTag", ruleTag);
                        extension___implementation.BeforeMethod("PartExists", extension___parameters);
                    }

                    adapter.Impl.PartExists(configID, targetEntity, groupSeq, basePartNum, baseRevisionNum, newPartNum, mtlSeq, ruleTag, out partExists, out notUnique, out sIValues);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("targetEntity", targetEntity);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___parameters.Add("basePartNum", basePartNum);
                        extension___parameters.Add("baseRevisionNum", baseRevisionNum);
                        extension___parameters.Add("newPartNum", newPartNum);
                        extension___parameters.Add("mtlSeq", mtlSeq);
                        extension___parameters.Add("ruleTag", ruleTag);
                        extension___parameters.Add("partExists", partExists);
                        extension___parameters.Add("notUnique", notUnique);
                        extension___parameters.Add("sIValues", sIValues);
                        extension___implementation.AfterMethod("PartExists", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public bool PartRevExists(string ipPartNum, string ipRevisionNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("PartRevExists"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipPartNum", ipPartNum);
                        extension___parameters.Add("ipRevisionNum", ipRevisionNum);
                        extension___implementation.BeforeMethod("PartRevExists", extension___parameters);
                    }

                    var _return = adapter.Impl.PartRevExists(ipPartNum, ipRevisionNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ipPartNum", ipPartNum);
                        extension___parameters.Add("ipRevisionNum", ipRevisionNum);
                        extension___implementation.AfterMethod("PartRevExists", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetTargetEntityValues(string configID, string relatedToTableName, out bool allowRecordCreation, out bool useInSmartString)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetTargetEntityValues"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("relatedToTableName", relatedToTableName);
                        extension___implementation.BeforeMethod("GetTargetEntityValues", extension___parameters);
                    }

                    adapter.Impl.GetTargetEntityValues(configID, relatedToTableName, out allowRecordCreation, out useInSmartString);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("relatedToTableName", relatedToTableName);
                        extension___parameters.Add("allowRecordCreation", allowRecordCreation);
                        extension___parameters.Add("useInSmartString", useInSmartString);
                        extension___implementation.AfterMethod("GetTargetEntityValues", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SuggestSmartString(string configID, bool testMode, ref Erp.Tablesets.ConfigurationSequenceTableset ts, string ipRelatedToTable, System.Guid ipRelatedToSysRowID, System.Collections.Generic.List<Erp.Shared.Lib.Configurator.PCKeyValuePair<string, string>> smartStringValues, out string outSmartString, string structTag, int structID)
        {
            try
            {
                using (var adapter = this.GetImplementation("SuggestSmartString"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testMode", testMode);
                        extension___parameters.Add("ts", ts);
                        extension___parameters.Add("ipRelatedToTable", ipRelatedToTable);
                        extension___parameters.Add("ipRelatedToSysRowID", ipRelatedToSysRowID);
                        extension___parameters.Add("smartStringValues", smartStringValues);
                        extension___parameters.Add("structTag", structTag);
                        extension___parameters.Add("structID", structID);
                        extension___implementation.BeforeMethod("SuggestSmartString", extension___parameters);
                    }

                    adapter.Impl.SuggestSmartString(configID, testMode, ref ts, ipRelatedToTable, ipRelatedToSysRowID, smartStringValues, out outSmartString, structTag, structID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testMode", testMode);
                        extension___parameters.Add("ts", ts);
                        extension___parameters.Add("ipRelatedToTable", ipRelatedToTable);
                        extension___parameters.Add("ipRelatedToSysRowID", ipRelatedToSysRowID);
                        extension___parameters.Add("smartStringValues", smartStringValues);
                        extension___parameters.Add("outSmartString", outSmartString);
                        extension___parameters.Add("structTag", structTag);
                        extension___parameters.Add("structID", structID);
                        extension___implementation.AfterMethod("SuggestSmartString", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ts);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void EWCSuggestSmartString(string configID, bool testMode, string ipRelatedToTable, System.Guid ipRelatedToSysRowID, System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> smartStringValues, out string outSmartString, string subPartNum, string basePartNum, string partNum, string subBasePartNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("EWCSuggestSmartString"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testMode", testMode);
                        extension___parameters.Add("ipRelatedToTable", ipRelatedToTable);
                        extension___parameters.Add("ipRelatedToSysRowID", ipRelatedToSysRowID);
                        extension___parameters.Add("smartStringValues", smartStringValues);
                        extension___parameters.Add("subPartNum", subPartNum);
                        extension___parameters.Add("basePartNum", basePartNum);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("subBasePartNum", subBasePartNum);
                        extension___implementation.BeforeMethod("EWCSuggestSmartString", extension___parameters);
                    }

                    adapter.Impl.EWCSuggestSmartString(configID, testMode, ipRelatedToTable, ipRelatedToSysRowID, smartStringValues, out outSmartString, subPartNum, basePartNum, partNum, subBasePartNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testMode", testMode);
                        extension___parameters.Add("ipRelatedToTable", ipRelatedToTable);
                        extension___parameters.Add("ipRelatedToSysRowID", ipRelatedToSysRowID);
                        extension___parameters.Add("smartStringValues", smartStringValues);
                        extension___parameters.Add("outSmartString", outSmartString);
                        extension___parameters.Add("subPartNum", subPartNum);
                        extension___parameters.Add("basePartNum", basePartNum);
                        extension___parameters.Add("partNum", partNum);
                        extension___parameters.Add("subBasePartNum", subBasePartNum);
                        extension___implementation.AfterMethod("EWCSuggestSmartString", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AddUserDenfinedParameterString(string methodName, string parameterName, string configID, int paramSeq, string newValue, ref Erp.Tablesets.PcValueTableset pcValueDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("AddUserDenfinedParameterString"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("parameterName", parameterName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("paramSeq", paramSeq);
                        extension___parameters.Add("newValue", newValue);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.BeforeMethod("AddUserDenfinedParameterString", extension___parameters);
                    }

                    adapter.Impl.AddUserDenfinedParameterString(methodName, parameterName, configID, paramSeq, newValue, ref pcValueDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("parameterName", parameterName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("paramSeq", paramSeq);
                        extension___parameters.Add("newValue", newValue);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.AfterMethod("AddUserDenfinedParameterString", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(pcValueDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AddUserDenfinedParameterInt(string methodName, string parameterName, string configID, int paramSeq, int newValue, ref Erp.Tablesets.PcValueTableset pcValueDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("AddUserDenfinedParameterInt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("parameterName", parameterName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("paramSeq", paramSeq);
                        extension___parameters.Add("newValue", newValue);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.BeforeMethod("AddUserDenfinedParameterInt", extension___parameters);
                    }

                    adapter.Impl.AddUserDenfinedParameterInt(methodName, parameterName, configID, paramSeq, newValue, ref pcValueDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("parameterName", parameterName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("paramSeq", paramSeq);
                        extension___parameters.Add("newValue", newValue);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.AfterMethod("AddUserDenfinedParameterInt", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(pcValueDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AddUserDenfinedParameterDecimal(string methodName, string parameterName, string configID, int paramSeq, decimal newValue, ref Erp.Tablesets.PcValueTableset pcValueDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("AddUserDenfinedParameterDecimal"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("parameterName", parameterName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("paramSeq", paramSeq);
                        extension___parameters.Add("newValue", newValue);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.BeforeMethod("AddUserDenfinedParameterDecimal", extension___parameters);
                    }

                    adapter.Impl.AddUserDenfinedParameterDecimal(methodName, parameterName, configID, paramSeq, newValue, ref pcValueDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("parameterName", parameterName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("paramSeq", paramSeq);
                        extension___parameters.Add("newValue", newValue);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.AfterMethod("AddUserDenfinedParameterDecimal", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(pcValueDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AddUserDenfinedParameterDateTime(string methodName, string parameterName, string configID, int paramSeq, System.DateTime? newValue, ref Erp.Tablesets.PcValueTableset pcValueDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("AddUserDenfinedParameterDateTime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("parameterName", parameterName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("paramSeq", paramSeq);
                        extension___parameters.Add("newValue", newValue);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.BeforeMethod("AddUserDenfinedParameterDateTime", extension___parameters);
                    }

                    adapter.Impl.AddUserDenfinedParameterDateTime(methodName, parameterName, configID, paramSeq, newValue, ref pcValueDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("parameterName", parameterName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("paramSeq", paramSeq);
                        extension___parameters.Add("newValue", newValue);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.AfterMethod("AddUserDenfinedParameterDateTime", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(pcValueDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void AddUserDenfinedParameterBool(string methodName, string parameterName, string configID, int paramSeq, bool newValue, ref Erp.Tablesets.PcValueTableset pcValueDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("AddUserDenfinedParameterBool"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("parameterName", parameterName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("paramSeq", paramSeq);
                        extension___parameters.Add("newValue", newValue);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.BeforeMethod("AddUserDenfinedParameterBool", extension___parameters);
                    }

                    adapter.Impl.AddUserDenfinedParameterBool(methodName, parameterName, configID, paramSeq, newValue, ref pcValueDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("parameterName", parameterName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("paramSeq", paramSeq);
                        extension___parameters.Add("newValue", newValue);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.AfterMethod("AddUserDenfinedParameterBool", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(pcValueDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ClearUDMethodParams(ref Erp.Tablesets.PcValueTableset pcValueDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("ClearUDMethodParams"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.BeforeMethod("ClearUDMethodParams", extension___parameters);
                    }

                    adapter.Impl.ClearUDMethodParams(ref pcValueDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.AfterMethod("ClearUDMethodParams", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(pcValueDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string ExecuteGenerateImageLayerScriptCode(string imageLayerID)
        {
            try
            {
                using (var adapter = this.GetImplementation("ExecuteGenerateImageLayerScriptCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("imageLayerID", imageLayerID);
                        extension___implementation.BeforeMethod("ExecuteGenerateImageLayerScriptCode", extension___parameters);
                    }

                    var _return = adapter.Impl.ExecuteGenerateImageLayerScriptCode(imageLayerID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("imageLayerID", imageLayerID);
                        extension___implementation.AfterMethod("ExecuteGenerateImageLayerScriptCode", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string ExecuteGenerateSingleImageLayerScriptCode(string imageLayerID, int zIndex, string imageValue, int layerSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("ExecuteGenerateSingleImageLayerScriptCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("imageLayerID", imageLayerID);
                        extension___parameters.Add("zIndex", zIndex);
                        extension___parameters.Add("imageValue", imageValue);
                        extension___parameters.Add("layerSeq", layerSeq);
                        extension___implementation.BeforeMethod("ExecuteGenerateSingleImageLayerScriptCode", extension___parameters);
                    }

                    var _return = adapter.Impl.ExecuteGenerateSingleImageLayerScriptCode(imageLayerID, zIndex, imageValue, layerSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("imageLayerID", imageLayerID);
                        extension___parameters.Add("zIndex", zIndex);
                        extension___parameters.Add("imageValue", imageValue);
                        extension___parameters.Add("layerSeq", layerSeq);
                        extension___implementation.AfterMethod("ExecuteGenerateSingleImageLayerScriptCode", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string ExecuteGenerateFullImageLayerScriptCode(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> imageLayersInfo)
        {
            try
            {
                using (var adapter = this.GetImplementation("ExecuteGenerateFullImageLayerScriptCode"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("imageLayersInfo", imageLayersInfo);
                        extension___implementation.BeforeMethod("ExecuteGenerateFullImageLayerScriptCode", extension___parameters);
                    }

                    var _return = adapter.Impl.ExecuteGenerateFullImageLayerScriptCode(imageLayersInfo);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("imageLayersInfo", imageLayersInfo);
                        extension___implementation.AfterMethod("ExecuteGenerateFullImageLayerScriptCode", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public object[] ExecuteUserDefinedWithArrayReturn(string methodName, string configID, System.Guid testID, ref Erp.Tablesets.PcValueTableset pcValueDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("ExecuteUserDefinedWithArrayReturn"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testID", testID);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.BeforeMethod("ExecuteUserDefinedWithArrayReturn", extension___parameters);
                    }

                    var _return = adapter.Impl.ExecuteUserDefinedWithArrayReturn(methodName, configID, testID, ref pcValueDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testID", testID);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.AfterMethod("ExecuteUserDefinedWithArrayReturn", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(pcValueDS);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public object ExecuteUserDefined(string methodName, string configID, System.Guid testID, ref Erp.Tablesets.PcValueTableset pcValueDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("ExecuteUserDefined"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testID", testID);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.BeforeMethod("ExecuteUserDefined", extension___parameters);
                    }

                    var _return = adapter.Impl.ExecuteUserDefined(methodName, configID, testID, ref pcValueDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testID", testID);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.AfterMethod("ExecuteUserDefined", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(pcValueDS);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [System.ObsoleteAttribute]
        public string ExecuteDataLookup(string methodName, string configId, System.Guid testId, string[] inParams)
        {
            try
            {
                using (var adapter = this.GetImplementation("ExecuteDataLookup"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("inParams", inParams);
                        extension___implementation.BeforeMethod("ExecuteDataLookup", extension___parameters);
                    }

                    var _return = adapter.Impl.ExecuteDataLookup(methodName, configId, testId, inParams);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("methodName", methodName);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("inParams", inParams);
                        extension___implementation.AfterMethod("ExecuteDataLookup", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void ExecutePageOnLoadEvents(string pageLoadEvent, string configID, System.Guid testID, ref Erp.Tablesets.PcValueTableset pcValueDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("ExecutePageOnLoadEvents"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pageLoadEvent", pageLoadEvent);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testID", testID);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.BeforeMethod("ExecutePageOnLoadEvents", extension___parameters);
                    }

                    adapter.Impl.ExecutePageOnLoadEvents(pageLoadEvent, configID, testID, ref pcValueDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("pageLoadEvent", pageLoadEvent);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("testID", testID);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___implementation.AfterMethod("ExecutePageOnLoadEvents", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(pcValueDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public byte[] GetPictureBoxImage(string fileName, string inputName)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetPictureBoxImage"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("fileName", fileName);
                        extension___parameters.Add("inputName", inputName);
                        extension___implementation.BeforeMethod("GetPictureBoxImage", extension___parameters);
                    }

                    var _return = adapter.Impl.GetPictureBoxImage(fileName, inputName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("fileName", fileName);
                        extension___parameters.Add("inputName", inputName);
                        extension___implementation.AfterMethod("GetPictureBoxImage", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.PcImagesTableset GetAllImages(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> inputImageList, string ConfigID, int GroupSeq, int HeadNum)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAllImages"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inputImageList", inputImageList);
                        extension___parameters.Add("ConfigID", ConfigID);
                        extension___parameters.Add("GroupSeq", GroupSeq);
                        extension___parameters.Add("HeadNum", HeadNum);
                        extension___implementation.BeforeMethod("GetAllImages", extension___parameters);
                    }

                    var _return = adapter.Impl.GetAllImages(inputImageList, ConfigID, GroupSeq, HeadNum);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inputImageList", inputImageList);
                        extension___parameters.Add("ConfigID", ConfigID);
                        extension___parameters.Add("GroupSeq", GroupSeq);
                        extension___parameters.Add("HeadNum", HeadNum);
                        extension___implementation.AfterMethod("GetAllImages", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, byte[]>> GetAllPictureBoxImages(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> inputImageList)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetAllPictureBoxImages"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inputImageList", inputImageList);
                        extension___implementation.BeforeMethod("GetAllPictureBoxImages", extension___parameters);
                    }

                    var _return = adapter.Impl.GetAllPictureBoxImages(inputImageList);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("inputImageList", inputImageList);
                        extension___implementation.AfterMethod("GetAllPictureBoxImages", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPcConfigParams(ref Erp.Tablesets.ConfigurationRuntimeTableset RuntimeDS, string configID, string uniqueID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPcConfigParams"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("RuntimeDS", RuntimeDS);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("uniqueID", uniqueID);
                        extension___implementation.BeforeMethod("GetNewPcConfigParams", extension___parameters);
                    }

                    adapter.Impl.GetNewPcConfigParams(ref RuntimeDS, configID, uniqueID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("RuntimeDS", RuntimeDS);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("uniqueID", uniqueID);
                        extension___implementation.AfterMethod("GetNewPcConfigParams", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(RuntimeDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPcInputsPublishToDoc(ref Erp.Tablesets.ConfigurationRuntimeTableset RuntimeDS, string key)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPcInputsPublishToDoc"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("RuntimeDS", RuntimeDS);
                        extension___parameters.Add("key", key);
                        extension___implementation.BeforeMethod("GetNewPcInputsPublishToDoc", extension___parameters);
                    }

                    adapter.Impl.GetNewPcInputsPublishToDoc(ref RuntimeDS, key);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("RuntimeDS", RuntimeDS);
                        extension___parameters.Add("key", key);
                        extension___implementation.AfterMethod("GetNewPcInputsPublishToDoc", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(RuntimeDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string DataColumnLookupList(string configId, System.Guid testId, string lookupTblID, string colName, string searchValue)
        {
            try
            {
                using (var adapter = this.GetImplementation("DataColumnLookupList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTblID", lookupTblID);
                        extension___parameters.Add("colName", colName);
                        extension___parameters.Add("searchValue", searchValue);
                        extension___implementation.BeforeMethod("DataColumnLookupList", extension___parameters);
                    }

                    var _return = adapter.Impl.DataColumnLookupList(configId, testId, lookupTblID, colName, searchValue);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTblID", lookupTblID);
                        extension___parameters.Add("colName", colName);
                        extension___parameters.Add("searchValue", searchValue);
                        extension___implementation.AfterMethod("DataColumnLookupList", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string DataColumnList(string configId, System.Guid testId, string lookupTableID, string colName)
        {
            try
            {
                using (var adapter = this.GetImplementation("DataColumnList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("colName", colName);
                        extension___implementation.BeforeMethod("DataColumnList", extension___parameters);
                    }

                    var _return = adapter.Impl.DataColumnList(configId, testId, lookupTableID, colName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("colName", colName);
                        extension___implementation.AfterMethod("DataColumnList", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string DataColumnListNum(string configId, System.Guid testId, string lookupTableID, string colName)
        {
            try
            {
                using (var adapter = this.GetImplementation("DataColumnListNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("colName", colName);
                        extension___implementation.BeforeMethod("DataColumnListNum", extension___parameters);
                    }

                    var _return = adapter.Impl.DataColumnListNum(configId, testId, lookupTableID, colName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("colName", colName);
                        extension___implementation.AfterMethod("DataColumnListNum", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string DataColumnRange(string configId, System.Guid testId, string lookupTableID, string colName, string startRow, string endRow)
        {
            try
            {
                using (var adapter = this.GetImplementation("DataColumnRange"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("colName", colName);
                        extension___parameters.Add("startRow", startRow);
                        extension___parameters.Add("endRow", endRow);
                        extension___implementation.BeforeMethod("DataColumnRange", extension___parameters);
                    }

                    var _return = adapter.Impl.DataColumnRange(configId, testId, lookupTableID, colName, startRow, endRow);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("colName", colName);
                        extension___parameters.Add("startRow", startRow);
                        extension___parameters.Add("endRow", endRow);
                        extension___implementation.AfterMethod("DataColumnRange", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string DataRowList(string configId, System.Guid testId, string lookupTableID, string rowName)
        {
            try
            {
                using (var adapter = this.GetImplementation("DataRowList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("rowName", rowName);
                        extension___implementation.BeforeMethod("DataRowList", extension___parameters);
                    }

                    var _return = adapter.Impl.DataRowList(configId, testId, lookupTableID, rowName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("rowName", rowName);
                        extension___implementation.AfterMethod("DataRowList", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string DataRowListNum(string configId, System.Guid testId, string lookupTableID, string rowName)
        {
            try
            {
                using (var adapter = this.GetImplementation("DataRowListNum"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("rowName", rowName);
                        extension___implementation.BeforeMethod("DataRowListNum", extension___parameters);
                    }

                    var _return = adapter.Impl.DataRowListNum(configId, testId, lookupTableID, rowName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("rowName", rowName);
                        extension___implementation.AfterMethod("DataRowListNum", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string DataRowRange(string configId, System.Guid testId, string lookupTableID, string rowName, string startCol, string endCol)
        {
            try
            {
                using (var adapter = this.GetImplementation("DataRowRange"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("rowName", rowName);
                        extension___parameters.Add("startCol", startCol);
                        extension___parameters.Add("endCol", endCol);
                        extension___implementation.BeforeMethod("DataRowRange", extension___parameters);
                    }

                    var _return = adapter.Impl.DataRowRange(configId, testId, lookupTableID, rowName, startCol, endCol);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTableID", lookupTableID);
                        extension___parameters.Add("rowName", rowName);
                        extension___parameters.Add("startCol", startCol);
                        extension___parameters.Add("endCol", endCol);
                        extension___implementation.AfterMethod("DataRowRange", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string DataRowLookup(string configId, System.Guid testId, string lookupTblID, string rowName, string searchValue)
        {
            try
            {
                using (var adapter = this.GetImplementation("DataRowLookup"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTblID", lookupTblID);
                        extension___parameters.Add("rowName", rowName);
                        extension___parameters.Add("searchValue", searchValue);
                        extension___implementation.BeforeMethod("DataRowLookup", extension___parameters);
                    }

                    var _return = adapter.Impl.DataRowLookup(configId, testId, lookupTblID, rowName, searchValue);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTblID", lookupTblID);
                        extension___parameters.Add("rowName", rowName);
                        extension___parameters.Add("searchValue", searchValue);
                        extension___implementation.AfterMethod("DataRowLookup", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string DataLookup(string configId, System.Guid testId, string lookupTblID, string rowName, string colName)
        {
            try
            {
                using (var adapter = this.GetImplementation("DataLookup"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTblID", lookupTblID);
                        extension___parameters.Add("rowName", rowName);
                        extension___parameters.Add("colName", colName);
                        extension___implementation.BeforeMethod("DataLookup", extension___parameters);
                    }

                    var _return = adapter.Impl.DataLookup(configId, testId, lookupTblID, rowName, colName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configId", configId);
                        extension___parameters.Add("testId", testId);
                        extension___parameters.Add("lookupTblID", lookupTblID);
                        extension___parameters.Add("rowName", rowName);
                        extension___parameters.Add("colName", colName);
                        extension___implementation.AfterMethod("DataLookup", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string EWCInitializeRuntime(string ConfigId, string RelatedToTable, System.Guid RelatedToRowID, string PartNum, string PartRev, string ECCUser, string ECCPwd, string ReturnURL, bool TestInputMode, out string AccessToken, out int ExpiresIn)
        {
            try
            {
                using (var adapter = this.GetImplementation("EWCInitializeRuntime"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ConfigId", ConfigId);
                        extension___parameters.Add("RelatedToTable", RelatedToTable);
                        extension___parameters.Add("RelatedToRowID", RelatedToRowID);
                        extension___parameters.Add("PartNum", PartNum);
                        extension___parameters.Add("PartRev", PartRev);
                        extension___parameters.Add("ECCUser", ECCUser);
                        extension___parameters.Add("ECCPwd", ECCPwd);
                        extension___parameters.Add("ReturnURL", ReturnURL);
                        extension___parameters.Add("TestInputMode", TestInputMode);
                        extension___implementation.BeforeMethod("EWCInitializeRuntime", extension___parameters);
                    }

                    var _return = adapter.Impl.EWCInitializeRuntime(ConfigId, RelatedToTable, RelatedToRowID, PartNum, PartRev, ECCUser, ECCPwd, ReturnURL, TestInputMode, out AccessToken, out ExpiresIn);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ConfigId", ConfigId);
                        extension___parameters.Add("RelatedToTable", RelatedToTable);
                        extension___parameters.Add("RelatedToRowID", RelatedToRowID);
                        extension___parameters.Add("PartNum", PartNum);
                        extension___parameters.Add("PartRev", PartRev);
                        extension___parameters.Add("ECCUser", ECCUser);
                        extension___parameters.Add("ECCPwd", ECCPwd);
                        extension___parameters.Add("ReturnURL", ReturnURL);
                        extension___parameters.Add("TestInputMode", TestInputMode);
                        extension___parameters.Add("AccessToken", AccessToken);
                        extension___parameters.Add("ExpiresIn", ExpiresIn);
                        extension___implementation.AfterMethod("EWCInitializeRuntime", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public byte[] EWCReadAllBytesIfNewer(string FileName, System.DateTime LastModifiedUTCDateTime)
        {
            try
            {
                using (var adapter = this.GetImplementation("EWCReadAllBytesIfNewer"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("FileName", FileName);
                        extension___parameters.Add("LastModifiedUTCDateTime", LastModifiedUTCDateTime);
                        extension___implementation.BeforeMethod("EWCReadAllBytesIfNewer", extension___parameters);
                    }

                    var _return = adapter.Impl.EWCReadAllBytesIfNewer(FileName, LastModifiedUTCDateTime);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("FileName", FileName);
                        extension___parameters.Add("LastModifiedUTCDateTime", LastModifiedUTCDateTime);
                        extension___implementation.AfterMethod("EWCReadAllBytesIfNewer", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string GetTenantID(string company)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetTenantID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("company", company);
                        extension___implementation.BeforeMethod("GetTenantID", extension___parameters);
                    }

                    var _return = adapter.Impl.GetTenantID(company);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("company", company);
                        extension___implementation.AfterMethod("GetTenantID", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void EWCWriteOrCreateAllBytes(string FileName, byte[] Bytes)
        {
            try
            {
                using (var adapter = this.GetImplementation("EWCWriteOrCreateAllBytes"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("FileName", FileName);
                        extension___parameters.Add("Bytes", Bytes);
                        extension___implementation.BeforeMethod("EWCWriteOrCreateAllBytes", extension___parameters);
                    }

                    adapter.Impl.EWCWriteOrCreateAllBytes(FileName, Bytes);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("FileName", FileName);
                        extension___parameters.Add("Bytes", Bytes);
                        extension___implementation.AfterMethod("EWCWriteOrCreateAllBytes", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Erp.Tablesets.PcValueTableset GetPCTransportTableset(ref Erp.Tablesets.ConfigurationRuntimeTableset configurationRuntime, ref Erp.Tablesets.ConfigurationSequenceTableset configurationSequenceTableSet)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetPCTransportTableset"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationRuntime", configurationRuntime);
                        extension___parameters.Add("configurationSequenceTableSet", configurationSequenceTableSet);
                        extension___implementation.BeforeMethod("GetPCTransportTableset", extension___parameters);
                    }

                    var _return = adapter.Impl.GetPCTransportTableset(ref configurationRuntime, ref configurationSequenceTableSet);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationRuntime", configurationRuntime);
                        extension___parameters.Add("configurationSequenceTableSet", configurationSequenceTableSet);
                        extension___implementation.AfterMethod("GetPCTransportTableset", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(configurationRuntime);
                        Ice.Manager.Security.CensorColumns(configurationSequenceTableSet);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void SavePCTransportConfiguration(Erp.Tablesets.ConfigurationSequenceTableset configurationSequenceDS, ref Erp.Tablesets.ConfigurationRuntimeTableset configurationRuntimeDS, Erp.Tablesets.PcValueTableset pcValueDS, ref Erp.Tablesets.PcTestResultsTableset testResultsDS)
        {
            try
            {
                using (var adapter = this.GetImplementation("SavePCTransportConfiguration"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationSequenceDS", configurationSequenceDS);
                        extension___parameters.Add("configurationRuntimeDS", configurationRuntimeDS);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___parameters.Add("testResultsDS", testResultsDS);
                        extension___implementation.BeforeMethod("SavePCTransportConfiguration", extension___parameters);
                    }

                    adapter.Impl.SavePCTransportConfiguration(configurationSequenceDS, ref configurationRuntimeDS, pcValueDS, ref testResultsDS);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configurationSequenceDS", configurationSequenceDS);
                        extension___parameters.Add("configurationRuntimeDS", configurationRuntimeDS);
                        extension___parameters.Add("pcValueDS", pcValueDS);
                        extension___parameters.Add("testResultsDS", testResultsDS);
                        extension___implementation.AfterMethod("SavePCTransportConfiguration", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(configurationRuntimeDS);
                        Ice.Manager.Security.CensorColumns(testResultsDS);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeleteTestInputsFileStoreEntry(string testInputsFileName)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeleteTestInputsFileStoreEntry"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("testInputsFileName", testInputsFileName);
                        extension___implementation.BeforeMethod("DeleteTestInputsFileStoreEntry", extension___parameters);
                    }

                    adapter.Impl.DeleteTestInputsFileStoreEntry(testInputsFileName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("testInputsFileName", testInputsFileName);
                        extension___implementation.AfterMethod("DeleteTestInputsFileStoreEntry", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void PrepareEWCRequirements(string configID, out string accessToken, out int expiresIn)
        {
            try
            {
                using (var adapter = this.GetImplementation("PrepareEWCRequirements"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___implementation.BeforeMethod("PrepareEWCRequirements", extension___parameters);
                    }

                    adapter.Impl.PrepareEWCRequirements(configID, out accessToken, out expiresIn);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("accessToken", accessToken);
                        extension___parameters.Add("expiresIn", expiresIn);
                        extension___implementation.AfterMethod("PrepareEWCRequirements", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public string GetECCConfigurator(object eccConfigSetup)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetECCConfigurator"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("eccConfigSetup", eccConfigSetup);
                        extension___implementation.BeforeMethod("GetECCConfigurator", extension___parameters);
                    }

                    var _return = adapter.Impl.GetECCConfigurator(eccConfigSetup);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("eccConfigSetup", eccConfigSetup);
                        extension___implementation.AfterMethod("GetECCConfigurator", _return, extension___parameters);
                    }

                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPcValueGrp(ref Erp.Tablesets.ConfigurationRuntimeTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPcValueGrp"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewPcValueGrp", extension___parameters);
                    }

                    adapter.Impl.GetNewPcValueGrp(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewPcValueGrp", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPcValueHead(ref Erp.Tablesets.ConfigurationRuntimeTableset ds, int groupSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPcValueHead"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___implementation.BeforeMethod("GetNewPcValueHead", extension___parameters);
                    }

                    adapter.Impl.GetNewPcValueHead(ref ds, groupSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___implementation.AfterMethod("GetNewPcValueHead", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPcInputsLayerDetail(ref Erp.Tablesets.ConfigurationRuntimeTableset ds, string configID, string inputName, string imageLayerID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPcInputsLayerDetail"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("inputName", inputName);
                        extension___parameters.Add("imageLayerID", imageLayerID);
                        extension___implementation.BeforeMethod("GetNewPcInputsLayerDetail", extension___parameters);
                    }

                    adapter.Impl.GetNewPcInputsLayerDetail(ref ds, configID, inputName, imageLayerID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("inputName", inputName);
                        extension___parameters.Add("imageLayerID", imageLayerID);
                        extension___implementation.AfterMethod("GetNewPcInputsLayerDetail", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPcInputsLayerHeader(ref Erp.Tablesets.ConfigurationRuntimeTableset ds, string configID, string inputName)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPcInputsLayerHeader"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("inputName", inputName);
                        extension___implementation.BeforeMethod("GetNewPcInputsLayerHeader", extension___parameters);
                    }

                    adapter.Impl.GetNewPcInputsLayerHeader(ref ds, configID, inputName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("inputName", inputName);
                        extension___implementation.AfterMethod("GetNewPcInputsLayerHeader", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPcInputVar(ref Erp.Tablesets.ConfigurationRuntimeTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPcInputVar"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("GetNewPcInputVar", extension___parameters);
                    }

                    adapter.Impl.GetNewPcInputVar(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("GetNewPcInputVar", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPcValueInputLayerDetail(ref Erp.Tablesets.ConfigurationRuntimeTableset ds, int groupSeq, int headNum, string configID, string inputName, string imageLayerID)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPcValueInputLayerDetail"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___parameters.Add("headNum", headNum);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("inputName", inputName);
                        extension___parameters.Add("imageLayerID", imageLayerID);
                        extension___implementation.BeforeMethod("GetNewPcValueInputLayerDetail", extension___parameters);
                    }

                    adapter.Impl.GetNewPcValueInputLayerDetail(ref ds, groupSeq, headNum, configID, inputName, imageLayerID);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___parameters.Add("headNum", headNum);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("inputName", inputName);
                        extension___parameters.Add("imageLayerID", imageLayerID);
                        extension___implementation.AfterMethod("GetNewPcValueInputLayerDetail", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewPcValueInputLayerHeader(ref Erp.Tablesets.ConfigurationRuntimeTableset ds, int groupSeq, int headNum, string configID, string inputName)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewPcValueInputLayerHeader"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___parameters.Add("headNum", headNum);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("inputName", inputName);
                        extension___implementation.BeforeMethod("GetNewPcValueInputLayerHeader", extension___parameters);
                    }

                    adapter.Impl.GetNewPcValueInputLayerHeader(ref ds, groupSeq, headNum, configID, inputName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___parameters.Add("headNum", headNum);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("inputName", inputName);
                        extension___implementation.AfterMethod("GetNewPcValueInputLayerHeader", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void GetNewQBuildMapping(ref Erp.Tablesets.ConfigurationRuntimeTableset ds, string configID, string inputName, string objName)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetNewQBuildMapping"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("inputName", inputName);
                        extension___parameters.Add("objName", objName);
                        extension___implementation.BeforeMethod("GetNewQBuildMapping", extension___parameters);
                    }

                    adapter.Impl.GetNewQBuildMapping(ref ds, configID, inputName, objName);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("configID", configID);
                        extension___parameters.Add("inputName", inputName);
                        extension___parameters.Add("objName", objName);
                        extension___implementation.AfterMethod("GetNewQBuildMapping", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void DeleteByID(int groupSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("DeleteByID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___implementation.BeforeMethod("DeleteByID", extension___parameters);
                    }

                    adapter.Impl.DeleteByID(groupSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___implementation.AfterMethod("DeleteByID", null, extension___parameters);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.ConfigurationRuntimeTableset GetByID(int groupSeq)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetByID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___implementation.BeforeMethod("GetByID", extension___parameters);
                    }

                    var _return = adapter.Impl.GetByID(groupSeq);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("groupSeq", groupSeq);
                        extension___implementation.AfterMethod("GetByID", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.ConfigurationRuntimeListTableset GetList(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetList"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetList", extension___parameters);
                    }

                    var _return = adapter.Impl.GetList(whereClause, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClause", whereClause);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetList", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.ConfigurationRuntimeTableset GetRows(string whereClausePcValueGrp, string whereClausePcValueHead, string whereClausePcConfigurationParams, string whereClausePcConfiguredDrawings, string whereClausePcContextProperties, string whereClausePcInputsLayerDetail, string whereClausePcInputsLayerHeader, string whereClausePcInputsPublishToDocParams, string whereClausePcInputVar, string whereClausePcValueInputLayerDetail, string whereClausePcValueInputLayerHeader, string whereClauseQBuildMapping, int pageSize, int absolutePage, out bool morePages)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetRows"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClausePcValueGrp", whereClausePcValueGrp);
                        extension___parameters.Add("whereClausePcValueHead", whereClausePcValueHead);
                        extension___parameters.Add("whereClausePcConfigurationParams", whereClausePcConfigurationParams);
                        extension___parameters.Add("whereClausePcConfiguredDrawings", whereClausePcConfiguredDrawings);
                        extension___parameters.Add("whereClausePcContextProperties", whereClausePcContextProperties);
                        extension___parameters.Add("whereClausePcInputsLayerDetail", whereClausePcInputsLayerDetail);
                        extension___parameters.Add("whereClausePcInputsLayerHeader", whereClausePcInputsLayerHeader);
                        extension___parameters.Add("whereClausePcInputsPublishToDocParams", whereClausePcInputsPublishToDocParams);
                        extension___parameters.Add("whereClausePcInputVar", whereClausePcInputVar);
                        extension___parameters.Add("whereClausePcValueInputLayerDetail", whereClausePcValueInputLayerDetail);
                        extension___parameters.Add("whereClausePcValueInputLayerHeader", whereClausePcValueInputLayerHeader);
                        extension___parameters.Add("whereClauseQBuildMapping", whereClauseQBuildMapping);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___implementation.BeforeMethod("GetRows", extension___parameters);
                    }

                    var _return = adapter.Impl.GetRows(whereClausePcValueGrp, whereClausePcValueHead, whereClausePcConfigurationParams, whereClausePcConfiguredDrawings, whereClausePcContextProperties, whereClausePcInputsLayerDetail, whereClausePcInputsLayerHeader, whereClausePcInputsPublishToDocParams, whereClausePcInputVar, whereClausePcValueInputLayerDetail, whereClausePcValueInputLayerHeader, whereClauseQBuildMapping, pageSize, absolutePage, out morePages);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("whereClausePcValueGrp", whereClausePcValueGrp);
                        extension___parameters.Add("whereClausePcValueHead", whereClausePcValueHead);
                        extension___parameters.Add("whereClausePcConfigurationParams", whereClausePcConfigurationParams);
                        extension___parameters.Add("whereClausePcConfiguredDrawings", whereClausePcConfiguredDrawings);
                        extension___parameters.Add("whereClausePcContextProperties", whereClausePcContextProperties);
                        extension___parameters.Add("whereClausePcInputsLayerDetail", whereClausePcInputsLayerDetail);
                        extension___parameters.Add("whereClausePcInputsLayerHeader", whereClausePcInputsLayerHeader);
                        extension___parameters.Add("whereClausePcInputsPublishToDocParams", whereClausePcInputsPublishToDocParams);
                        extension___parameters.Add("whereClausePcInputVar", whereClausePcInputVar);
                        extension___parameters.Add("whereClausePcValueInputLayerDetail", whereClausePcValueInputLayerDetail);
                        extension___parameters.Add("whereClausePcValueInputLayerHeader", whereClausePcValueInputLayerHeader);
                        extension___parameters.Add("whereClauseQBuildMapping", whereClauseQBuildMapping);
                        extension___parameters.Add("pageSize", pageSize);
                        extension___parameters.Add("absolutePage", absolutePage);
                        extension___parameters.Add("morePages", morePages);
                        extension___implementation.AfterMethod("GetRows", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.ConfigurationRuntimeTableset GetBySysRowID(System.Guid id)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetBySysRowID"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("id", id);
                        extension___implementation.BeforeMethod("GetBySysRowID", extension___parameters);
                    }

                    var _return = adapter.Impl.GetBySysRowID(id);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("id", id);
                        extension___implementation.AfterMethod("GetBySysRowID", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        [Ice.Hosting.Http.HttpGet]
        public Erp.Tablesets.ConfigurationRuntimeTableset GetBySysRowIDs(System.Collections.Generic.List<System.Guid> ids)
        {
            try
            {
                using (var adapter = this.GetImplementation("GetBySysRowIDs"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ids", ids);
                        extension___implementation.BeforeMethod("GetBySysRowIDs", extension___parameters);
                    }

                    var _return = adapter.Impl.GetBySysRowIDs(ids);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ids", ids);
                        extension___implementation.AfterMethod("GetBySysRowIDs", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public void Update(ref Erp.Tablesets.ConfigurationRuntimeTableset ds)
        {
            try
            {
                using (var adapter = this.GetImplementation("Update"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.BeforeMethod("Update", extension___parameters);
                    }

                    adapter.Impl.Update(ref ds);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___implementation.AfterMethod("Update", null, extension___parameters);
                    }
                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                    }
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        public Ice.BOUpdErrorTableset UpdateExt(ref Erp.Tablesets.UpdExtConfigurationRuntimeTableset ds, bool continueProcessingOnError, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            try
            {
                using (var adapter = this.GetImplementation("UpdateExt"))
                {
                    var extension___implementation = Resolver.GetExtensionOrNull<IConfigurationRuntimeExtender>();

                    // Extension handle Before.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___implementation.BeforeMethod("UpdateExt", extension___parameters);
                    }

                    var _return = adapter.Impl.UpdateExt(ref ds, continueProcessingOnError, rollbackParentOnChildError, out errorsOccurred);

                    // Extension handle After.
                    if (extension___implementation != null)
                    {
                        var extension___parameters = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
                        extension___parameters.Add("ds", ds);
                        extension___parameters.Add("continueProcessingOnError", continueProcessingOnError);
                        extension___parameters.Add("rollbackParentOnChildError", rollbackParentOnChildError);
                        extension___parameters.Add("errorsOccurred", errorsOccurred);
                        extension___implementation.AfterMethod("UpdateExt", _return, extension___parameters);
                    }

                    if (this.IsRoot)
                    {
                        Ice.Manager.Security.CensorColumns(ds);
                        Ice.Manager.Security.CensorColumns(_return);
                    }
                    return _return;
                }
            }
            catch (Exception ex)
            {
                this.ProcessException(ex);
                throw;
            }
        }

        #endregion // ConfigurationRuntimeSvcContract Members
    }

    #region Extensions

    [Epicor.Extensions.ExtensionExport]
    public interface IConfigurationRuntimeExtender : Ice.Extensions.IServiceExtender
    {
    }

    [Epicor.Extensions.ExtensionExport]
    public interface IConfigurationRuntimeUpdater : Ice.Extensions.IUpdater
    {
    }

    #endregion
}
