//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Epicor.Data;
using Epicor.Hosting;
using Erp.Contracts;
using Erp.Tablesets;
using Ice;
using Ice.ExtendedData;

namespace Erp.Services.BO
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1063:ImplementIDisposableCorrectly", Justification = "False positive. IDisposable is implemented in the base class. See http://stackoverflow.com/questions/8925925/code-analysis-ca1063-fires-when-deriving-from-idisposable-and-providing-implemen for details.")]
    public partial class ConfigurationRuntimeSvc : TablesetBound<Erp.ErpContext, ConfigurationRuntimeTableset, ConfigurationRuntimeListTableset>, ConfigurationRuntimeSvcContract
    {
        #region Declarations

        // Database rows
        private Erp.Tables.PcValueGrp PcValueGrp;
        private Erp.Tables.PcValueHead PcValueHead;
        private Erp.Tables.PcInputsLayerDetail PcInputsLayerDetail;
        private Erp.Tables.PcInputsLayerHeader PcInputsLayerHeader;
        private Erp.Tables.PcInputVar PcInputVar;
        private Erp.Tables.PcValueInputLayerDetail PcValueInputLayerDetail;
        private Erp.Tables.PcValueInputLayerHeader PcValueInputLayerHeader;
        private Erp.Tables.QBuildMapping QBuildMapping;

        // Temp-table rows
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcValueGrpRow ttPcValueGrp;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcValueHeadRow ttPcValueHead;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcConfigurationParamsRow ttPcConfigurationParams;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcConfiguredDrawingsRow ttPcConfiguredDrawings;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcContextPropertiesRow ttPcContextProperties;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcInputsLayerDetailRow ttPcInputsLayerDetail;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcInputsLayerHeaderRow ttPcInputsLayerHeader;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcInputsPublishToDocParamsRow ttPcInputsPublishToDocParams;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcInputVarRow ttPcInputVar;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcValueInputLayerDetailRow ttPcValueInputLayerDetail;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcValueInputLayerHeaderRow ttPcValueInputLayerHeader;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected QBuildMappingRow ttQBuildMapping;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcValueGrpListRow ttPcValueGrpList;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcStructRow ttPcStruct;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcConfigSmartStringRow ttPcConfigSmartString;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcStrCompRow ttPcStrComp;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected ConfigurationSummaryRow ttConfigurationSummary;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcInputValueRow ttPcInputValue;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcImagesRow ttPcImages;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcTestResultRow ttPcTestResult;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcAsmResultRow ttPcAsmResult;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcMtlResultRow ttPcMtlResult;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcOprResultRow ttPcOprResult;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcOpDtlResultRow ttPcOpDtlResult;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcRuleSetResultRow ttPcRuleSetResult;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcRulesResultRow ttPcRulesResult;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcActionResultRow ttPcActionResult;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected MethodsListRow ttMethodsList;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcJobAsmblRow ttPcJobAsmbl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcJobHeadRow ttPcJobHead;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcJobMtlRow ttPcJobMtl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcJobOpDtlRow ttPcJobOpDtl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcJobOperRow ttPcJobOper;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcKitCompResultRow ttPcKitCompResult;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcQuoteAsmRow ttPcQuoteAsm;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcQuoteDtlRow ttPcQuoteDtl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcQuoteHedRow ttPcQuoteHed;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcQuoteMtlRow ttPcQuoteMtl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcQuoteOpDtlRow ttPcQuoteOpDtl;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcQuoteOprRow ttPcQuoteOpr;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcFieldPropertiesTransportRow ttPcFieldPropertiesTransport;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcUserDefinedMethodParametersRow ttPcUserDefinedMethodParameters;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcValueTransportRow ttPcValueTransport;
        /// <summary>
        /// Current row being acted upon by the framework
        /// </summary>
        protected PcVariableTransportRow ttPcVariableTransport;

        // Before-image rows
        private PcValueGrpRow BIttPcValueGrp;
        private PcValueHeadRow BIttPcValueHead;
        private PcInputsLayerDetailRow BIttPcInputsLayerDetail;
        private PcInputsLayerHeaderRow BIttPcInputsLayerHeader;
        private PcInputVarRow BIttPcInputVar;
        private PcValueInputLayerDetailRow BIttPcValueInputLayerDetail;
        private PcValueInputLayerHeaderRow BIttPcValueInputLayerHeader;
        private QBuildMappingRow BIttQBuildMapping;

        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected ConfigurationSequenceTableset ttConfigurationSequenceTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected ConfigurationSummaryTableset ttConfigurationSummaryTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected PcFieldTableset ttPcFieldTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected PcImagesTableset ttPcImagesTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected PcTestResultsTableset ttPcTestResultsTablesetDS;
        // Tableset
        /// <summary>
        /// Custom Tableset defined for serializing payloads between client and server
        /// </summary>
        protected PcValueTableset ttPcValueTablesetDS;

        /// <summary>
        /// The well known Name of this Service
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override string Name
        {
            get
            {
                return "ConfigurationRuntime";
            }
        }

        #endregion Declarations

        #region Constructor

        /// <summary>
        /// Service Constructor
        /// </summary>
        /// <param name="ctx">Context</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        public ConfigurationRuntimeSvc(ErpContext ctx)
            : base(ctx)
        {
            this.HasColumnCompanyID = true;
            this.UseCurrentCompany = true;
            this.UseCurrentTenant = false;
        }

        #endregion Constructor

        /// <summary>
        /// Determines whether a table should be read by the framework.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override bool CanRead(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return true;
                case 1:
                    return true;
                case 2:
                    return false;
                case 3:
                    return false;
                case 4:
                    return false;
                case 5:
                    return true;
                case 6:
                    return true;
                case 7:
                    return false;
                case 8:
                    return true;
                case 9:
                    return true;
                case 10:
                    return true;
                case 11:
                    return true;
                default:
                    throw new ArgumentException();
            }
        }

        /// <summary>
        /// Determines whether a table should be updated by the framework.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override bool CanWrite(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return true;
                case 1:
                    return true;
                case 2:
                    return false;
                case 3:
                    return false;
                case 4:
                    return false;
                case 5:
                    return true;
                case 6:
                    return true;
                case 7:
                    return false;
                case 8:
                    return true;
                case 9:
                    return true;
                case 10:
                    return true;
                case 11:
                    return true;
                default:
                    throw new ArgumentException();
            }
        }

        /// <summary>
        /// Create a new typed database row (LinqRow)
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override LinqRow CreateDBRow(int tableNumber)
        {
            switch (tableNumber)
            {
                case 0:
                    return new Erp.Tables.PcValueGrp();
                case 1:
                    return new Erp.Tables.PcValueHead();
                case 5:
                    return new Erp.Tables.PcInputsLayerDetail();
                case 6:
                    return new Erp.Tables.PcInputsLayerHeader();
                case 8:
                    return new Erp.Tables.PcInputVar();
                case 9:
                    return new Erp.Tables.PcValueInputLayerDetail();
                case 10:
                    return new Erp.Tables.PcValueInputLayerHeader();
                case 11:
                    return new Erp.Tables.QBuildMapping();
                default:
                    throw new ArgumentException();
            }
        }

        #region FindFirstByZKey

        private static Func<ErpContext, string, int, Erp.Tables.PcValueGrp> findFirstPcValueGrpByZKeyQuery;
        private Erp.Tables.PcValueGrp FindFirstPcValueGrpByZKey(string company, int groupSeq)
        {
            if (findFirstPcValueGrpByZKeyQuery == null)
            {
                Expression<Func<ErpContext, string, int, Erp.Tables.PcValueGrp>> expression =
                    (context, company_ex, groupSeq_ex) =>
                    (from row in context.PcValueGrp
                     where row.Company == company_ex
                     && row.GroupSeq == groupSeq_ex
                     select row)
                    .FirstOrDefault();
                findFirstPcValueGrpByZKeyQuery = DBExpressionCompiler.Compile(expression);
            }

            return findFirstPcValueGrpByZKeyQuery(this.Db, company, groupSeq);
        }

        #endregion

        /// <summary>
        /// Get a database row by row ID
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override LinqRow GetDBRowWithUpdLock(int tableNumber, Guid rowID)
        {
            switch (tableNumber)
            {
                case 0:
                    return Erp.Tables.PcValueGrp.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 1:
                    return Erp.Tables.PcValueHead.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 5:
                    return Erp.Tables.PcInputsLayerDetail.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 6:
                    return Erp.Tables.PcInputsLayerHeader.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 8:
                    return Erp.Tables.PcInputVar.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 9:
                    return Erp.Tables.PcValueInputLayerDetail.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 10:
                    return Erp.Tables.PcValueInputLayerHeader.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                case 11:
                    return Erp.Tables.QBuildMapping.FindFirstBySysRowIDWithUpdLock(Db, rowID);
                default:
                    throw new ArgumentException();
            }
        }

        #region Dispatchers

        /// <summary>
        /// Dispatch service events to the appropriate partial method.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override void OnTablesetEvent(DatasetEventType type)
        {
            switch (type)
            {
                case DatasetEventType.AfterGetList:
                    AfterGetList();
                    break;
                case DatasetEventType.AfterGetRows:
                    AfterGetRows();
                    break;
                case DatasetEventType.AfterUpdate:
                    AfterUpdate();
                    break;
                case DatasetEventType.AfterUpdatePostTrans:
                    AfterUpdatePostTrans();
                    break;
                case DatasetEventType.BeforeUpdate:
                    BeforeUpdate();
                    break;
            }
        }

        /// <summary>
        /// Dispatch row events to the appropriate partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override void OnRowEvent(DataTableEventType type, string tableName, IceRow row)
        {
            switch (type)
            {
                case DataTableEventType.AfterCreate:
                    switch (tableName)
                    {
                        case "PcValueGrp":
                            PcValueGrpAfterCreate();
                            break;

                        case "PcValueHead":
                            PcValueHeadAfterCreate();
                            break;

                        case "PcInputsLayerDetail":
                            PcInputsLayerDetailAfterCreate();
                            break;

                        case "PcInputsLayerHeader":
                            PcInputsLayerHeaderAfterCreate();
                            break;

                        case "PcInputVar":
                            PcInputVarAfterCreate();
                            break;

                        case "PcValueInputLayerDetail":
                            PcValueInputLayerDetailAfterCreate();
                            break;

                        case "PcValueInputLayerHeader":
                            PcValueInputLayerHeaderAfterCreate();
                            break;

                        case "QBuildMapping":
                            QBuildMappingAfterCreate();
                            break;

                    }
                    break;

                case DataTableEventType.AfterDelete:
                    switch (tableName)
                    {
                        case "PcValueGrp":
                            PcValueGrpAfterDelete();
                            break;

                        case "PcValueHead":
                            PcValueHeadAfterDelete();
                            break;

                        case "PcInputsLayerDetail":
                            PcInputsLayerDetailAfterDelete();
                            break;

                        case "PcInputsLayerHeader":
                            PcInputsLayerHeaderAfterDelete();
                            break;

                        case "PcInputVar":
                            PcInputVarAfterDelete();
                            break;

                        case "PcValueInputLayerDetail":
                            PcValueInputLayerDetailAfterDelete();
                            break;

                        case "PcValueInputLayerHeader":
                            PcValueInputLayerHeaderAfterDelete();
                            break;

                        case "QBuildMapping":
                            QBuildMappingAfterDelete();
                            break;

                    }
                    break;

                case DataTableEventType.AfterGetNew:
                    switch (tableName)
                    {
                        case "PcValueGrp":
                            PcValueGrpAfterGetNew();
                            break;

                        case "PcValueHead":
                            PcValueHeadAfterGetNew();
                            break;

                        case "PcInputsLayerDetail":
                            PcInputsLayerDetailAfterGetNew();
                            break;

                        case "PcInputsLayerHeader":
                            PcInputsLayerHeaderAfterGetNew();
                            break;

                        case "PcInputVar":
                            PcInputVarAfterGetNew();
                            break;

                        case "PcValueInputLayerDetail":
                            PcValueInputLayerDetailAfterGetNew();
                            break;

                        case "PcValueInputLayerHeader":
                            PcValueInputLayerHeaderAfterGetNew();
                            break;

                        case "QBuildMapping":
                            QBuildMappingAfterGetNew();
                            break;

                    }
                    break;

                case DataTableEventType.AfterGetRows:
                    switch (tableName)
                    {
                        case "PcValueGrp":
                            PcValueGrpAfterGetRows();
                            break;

                        case "PcValueHead":
                            PcValueHeadAfterGetRows();
                            break;

                        case "PcInputsLayerDetail":
                            PcInputsLayerDetailAfterGetRows();
                            break;

                        case "PcInputsLayerHeader":
                            PcInputsLayerHeaderAfterGetRows();
                            break;

                        case "PcInputVar":
                            PcInputVarAfterGetRows();
                            break;

                        case "PcValueInputLayerDetail":
                            PcValueInputLayerDetailAfterGetRows();
                            break;

                        case "PcValueInputLayerHeader":
                            PcValueInputLayerHeaderAfterGetRows();
                            break;

                        case "QBuildMapping":
                            QBuildMappingAfterGetRows();
                            break;

                    }
                    break;

                case DataTableEventType.AfterUpdate:
                    switch (tableName)
                    {
                        case "PcValueGrp":
                            PcValueGrpAfterUpdate();
                            break;

                        case "PcValueHead":
                            PcValueHeadAfterUpdate();
                            break;

                        case "PcInputsLayerDetail":
                            PcInputsLayerDetailAfterUpdate();
                            break;

                        case "PcInputsLayerHeader":
                            PcInputsLayerHeaderAfterUpdate();
                            break;

                        case "PcInputVar":
                            PcInputVarAfterUpdate();
                            break;

                        case "PcValueInputLayerDetail":
                            PcValueInputLayerDetailAfterUpdate();
                            break;

                        case "PcValueInputLayerHeader":
                            PcValueInputLayerHeaderAfterUpdate();
                            break;

                        case "QBuildMapping":
                            QBuildMappingAfterUpdate();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeBI:
                    switch (tableName)
                    {
                        case "PcValueGrp":
                            PcValueGrpBeforeBI();
                            break;

                        case "PcValueHead":
                            PcValueHeadBeforeBI();
                            break;

                        case "PcInputsLayerDetail":
                            PcInputsLayerDetailBeforeBI();
                            break;

                        case "PcInputsLayerHeader":
                            PcInputsLayerHeaderBeforeBI();
                            break;

                        case "PcInputVar":
                            PcInputVarBeforeBI();
                            break;

                        case "PcValueInputLayerDetail":
                            PcValueInputLayerDetailBeforeBI();
                            break;

                        case "PcValueInputLayerHeader":
                            PcValueInputLayerHeaderBeforeBI();
                            break;

                        case "QBuildMapping":
                            QBuildMappingBeforeBI();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeCreate:
                    switch (tableName)
                    {
                        case "PcValueGrp":
                            PcValueGrpBeforeCreate();
                            break;

                        case "PcValueHead":
                            PcValueHeadBeforeCreate();
                            break;

                        case "PcInputsLayerDetail":
                            PcInputsLayerDetailBeforeCreate();
                            break;

                        case "PcInputsLayerHeader":
                            PcInputsLayerHeaderBeforeCreate();
                            break;

                        case "PcInputVar":
                            PcInputVarBeforeCreate();
                            break;

                        case "PcValueInputLayerDetail":
                            PcValueInputLayerDetailBeforeCreate();
                            break;

                        case "PcValueInputLayerHeader":
                            PcValueInputLayerHeaderBeforeCreate();
                            break;

                        case "QBuildMapping":
                            QBuildMappingBeforeCreate();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeDelete:
                    switch (tableName)
                    {
                        case "PcValueGrp":
                            PcValueGrpBeforeDelete();
                            break;

                        case "PcValueHead":
                            PcValueHeadBeforeDelete();
                            break;

                        case "PcInputsLayerDetail":
                            PcInputsLayerDetailBeforeDelete();
                            break;

                        case "PcInputsLayerHeader":
                            PcInputsLayerHeaderBeforeDelete();
                            break;

                        case "PcInputVar":
                            PcInputVarBeforeDelete();
                            break;

                        case "PcValueInputLayerDetail":
                            PcValueInputLayerDetailBeforeDelete();
                            break;

                        case "PcValueInputLayerHeader":
                            PcValueInputLayerHeaderBeforeDelete();
                            break;

                        case "QBuildMapping":
                            QBuildMappingBeforeDelete();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeGetNew:
                    switch (tableName)
                    {
                        case "PcValueGrp":
                            PcValueGrpBeforeGetNew();
                            break;

                        case "PcValueHead":
                            PcValueHeadBeforeGetNew();
                            break;

                        case "PcInputsLayerDetail":
                            PcInputsLayerDetailBeforeGetNew();
                            break;

                        case "PcInputsLayerHeader":
                            PcInputsLayerHeaderBeforeGetNew();
                            break;

                        case "PcInputVar":
                            PcInputVarBeforeGetNew();
                            break;

                        case "PcValueInputLayerDetail":
                            PcValueInputLayerDetailBeforeGetNew();
                            break;

                        case "PcValueInputLayerHeader":
                            PcValueInputLayerHeaderBeforeGetNew();
                            break;

                        case "QBuildMapping":
                            QBuildMappingBeforeGetNew();
                            break;

                    }
                    break;

                case DataTableEventType.BeforeUpdate:
                    switch (tableName)
                    {
                        case "PcValueGrp":
                            PcValueGrpBeforeUpdate();
                            break;

                        case "PcValueHead":
                            PcValueHeadBeforeUpdate();
                            break;

                        case "PcInputsLayerDetail":
                            PcInputsLayerDetailBeforeUpdate();
                            break;

                        case "PcInputsLayerHeader":
                            PcInputsLayerHeaderBeforeUpdate();
                            break;

                        case "PcInputVar":
                            PcInputVarBeforeUpdate();
                            break;

                        case "PcValueInputLayerDetail":
                            PcValueInputLayerDetailBeforeUpdate();
                            break;

                        case "PcValueInputLayerHeader":
                            PcValueInputLayerHeaderBeforeUpdate();
                            break;

                        case "QBuildMapping":
                            QBuildMappingBeforeUpdate();
                            break;

                    }
                    break;

                case DataTableEventType.SetDefaults:
                    switch (tableName)
                    {
                        case "PcValueGrp":
                            PcValueGrpSetDefaults((PcValueGrpRow)row);
                            break;

                        case "PcValueHead":
                            PcValueHeadSetDefaults((PcValueHeadRow)row);
                            break;

                        case "PcInputsLayerDetail":
                            PcInputsLayerDetailSetDefaults((PcInputsLayerDetailRow)row);
                            break;

                        case "PcInputsLayerHeader":
                            PcInputsLayerHeaderSetDefaults((PcInputsLayerHeaderRow)row);
                            break;

                        case "PcInputVar":
                            PcInputVarSetDefaults((PcInputVarRow)row);
                            break;

                        case "PcValueInputLayerDetail":
                            PcValueInputLayerDetailSetDefaults((PcValueInputLayerDetailRow)row);
                            break;

                        case "PcValueInputLayerHeader":
                            PcValueInputLayerHeaderSetDefaults((PcValueInputLayerHeaderRow)row);
                            break;

                        case "QBuildMapping":
                            QBuildMappingSetDefaults((QBuildMappingRow)row);
                            break;

                    }
                    break;

                case DataTableEventType.GetListRowLoaded:
                    GetListRowLoaded();
                    break;

                case DataTableEventType.ForeignLink:
                    switch (tableName)
                    {
                        case "QBuildMapping":
                            QBuildMapping_Foreign_Link();
                            break;

                    }
                    break;

            }
        }

        /// <summary>
        /// Sets current row being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="row">The current row</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override void PrepareForRowEvent(string tableName, IceRow row)
        {
            switch (tableName)
            {
                case "PcValueGrp":
                    ttPcValueGrp = (PcValueGrpRow)row;
                    break;
                case "PcValueHead":
                    ttPcValueHead = (PcValueHeadRow)row;
                    break;
                case "PcConfigurationParams":
                    ttPcConfigurationParams = (PcConfigurationParamsRow)row;
                    break;
                case "PcConfiguredDrawings":
                    ttPcConfiguredDrawings = (PcConfiguredDrawingsRow)row;
                    break;
                case "PcContextProperties":
                    ttPcContextProperties = (PcContextPropertiesRow)row;
                    break;
                case "PcInputsLayerDetail":
                    ttPcInputsLayerDetail = (PcInputsLayerDetailRow)row;
                    break;
                case "PcInputsLayerHeader":
                    ttPcInputsLayerHeader = (PcInputsLayerHeaderRow)row;
                    break;
                case "PcInputsPublishToDocParams":
                    ttPcInputsPublishToDocParams = (PcInputsPublishToDocParamsRow)row;
                    break;
                case "PcInputVar":
                    ttPcInputVar = (PcInputVarRow)row;
                    break;
                case "PcValueInputLayerDetail":
                    ttPcValueInputLayerDetail = (PcValueInputLayerDetailRow)row;
                    break;
                case "PcValueInputLayerHeader":
                    ttPcValueInputLayerHeader = (PcValueInputLayerHeaderRow)row;
                    break;
                case "QBuildMapping":
                    ttQBuildMapping = (QBuildMappingRow)row;
                    break;
                case "PcValueGrpList":
                    ttPcValueGrpList = (PcValueGrpListRow)row;
                    break;
            }
        }

        /// <summary>
        /// Sets current dbrow being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="dbRow">The current dbRow</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override void PrepareForRowEvent(string tableName, LinqRow dbRow)
        {
            switch (tableName)
            {
                case "PcValueGrp":
                    PcValueGrp = (Erp.Tables.PcValueGrp)dbRow;
                    break;
                case "PcValueHead":
                    PcValueHead = (Erp.Tables.PcValueHead)dbRow;
                    break;
                case "PcInputsLayerDetail":
                    PcInputsLayerDetail = (Erp.Tables.PcInputsLayerDetail)dbRow;
                    break;
                case "PcInputsLayerHeader":
                    PcInputsLayerHeader = (Erp.Tables.PcInputsLayerHeader)dbRow;
                    break;
                case "PcInputVar":
                    PcInputVar = (Erp.Tables.PcInputVar)dbRow;
                    break;
                case "PcValueInputLayerDetail":
                    PcValueInputLayerDetail = (Erp.Tables.PcValueInputLayerDetail)dbRow;
                    break;
                case "PcValueInputLayerHeader":
                    PcValueInputLayerHeader = (Erp.Tables.PcValueInputLayerHeader)dbRow;
                    break;
                case "QBuildMapping":
                    QBuildMapping = (Erp.Tables.QBuildMapping)dbRow;
                    break;
            }
        }

        /// <summary>
        /// Sets current rows being worked upon
        /// </summary>
        /// <param name="tableName">The current table</param>
        /// <param name="row">The current row</param>
        /// <param name="bittRow">The current bittRow</param>
        /// <param name="dbRow">The current dbRow</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override void PrepareForRowEvent(string tableName, IceRow row, IceRow bittRow, LinqRow dbRow)
        {
            switch (tableName)
            {
                case "PcValueGrp":
                    this.ttPcValueGrp = (PcValueGrpRow)row;
                    this.BIttPcValueGrp = (PcValueGrpRow)bittRow;
                    this.PcValueGrp = (Erp.Tables.PcValueGrp)dbRow;
                    break;
                case "PcValueHead":
                    this.ttPcValueHead = (PcValueHeadRow)row;
                    this.BIttPcValueHead = (PcValueHeadRow)bittRow;
                    this.PcValueHead = (Erp.Tables.PcValueHead)dbRow;
                    break;
                case "PcInputsLayerDetail":
                    this.ttPcInputsLayerDetail = (PcInputsLayerDetailRow)row;
                    this.BIttPcInputsLayerDetail = (PcInputsLayerDetailRow)bittRow;
                    this.PcInputsLayerDetail = (Erp.Tables.PcInputsLayerDetail)dbRow;
                    break;
                case "PcInputsLayerHeader":
                    this.ttPcInputsLayerHeader = (PcInputsLayerHeaderRow)row;
                    this.BIttPcInputsLayerHeader = (PcInputsLayerHeaderRow)bittRow;
                    this.PcInputsLayerHeader = (Erp.Tables.PcInputsLayerHeader)dbRow;
                    break;
                case "PcInputVar":
                    this.ttPcInputVar = (PcInputVarRow)row;
                    this.BIttPcInputVar = (PcInputVarRow)bittRow;
                    this.PcInputVar = (Erp.Tables.PcInputVar)dbRow;
                    break;
                case "PcValueInputLayerDetail":
                    this.ttPcValueInputLayerDetail = (PcValueInputLayerDetailRow)row;
                    this.BIttPcValueInputLayerDetail = (PcValueInputLayerDetailRow)bittRow;
                    this.PcValueInputLayerDetail = (Erp.Tables.PcValueInputLayerDetail)dbRow;
                    break;
                case "PcValueInputLayerHeader":
                    this.ttPcValueInputLayerHeader = (PcValueInputLayerHeaderRow)row;
                    this.BIttPcValueInputLayerHeader = (PcValueInputLayerHeaderRow)bittRow;
                    this.PcValueInputLayerHeader = (Erp.Tables.PcValueInputLayerHeader)dbRow;
                    break;
                case "QBuildMapping":
                    this.ttQBuildMapping = (QBuildMappingRow)row;
                    this.BIttQBuildMapping = (QBuildMappingRow)bittRow;
                    this.QBuildMapping = (Erp.Tables.QBuildMapping)dbRow;
                    break;
            }
        }

        /// <summary>
        /// Call the BeforeGetRows() partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override void OnBeforeGetRows(Dictionary<IIceTable, QueryModifier> queryModifiers)
        {
            BeforeGetRows(queryModifiers);
        }

        /// <summary>
        /// Call the BeforeGetList() partial method
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override void OnBeforeGetList(QueryModifier queryModifier)
        {
            BeforeGetList(queryModifier);
        }

        #region DataSetEvents
        partial void AfterGetList();
        partial void AfterGetRows();
        partial void AfterUpdate();
        partial void AfterUpdatePostTrans();
        partial void BeforeBOGetByID(int groupSeq);
        partial void BeforeGetList(QueryModifier queryModifier);
        partial void BeforeGetRows(Dictionary<IIceTable, QueryModifier> queryModifiers);
        partial void BeforeUpdate();
        partial void GetListRowLoaded();
        #endregion DataSetEvents
        #endregion Dispatchers

        #region Table Specific Methods

        #region Table PcValueGrp
        #region GetNewPcValueGrp
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        public void GetNewPcValueGrp(ref ConfigurationRuntimeTableset ds)
        {
            CurrentFullTableset = ds;

            ttPcValueGrp = (PcValueGrpRow)InnerGetNew(
                ds.PcValueGrp,
                (PcValueGrpRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewPcValueGrp

        #region Events
        partial void PcValueGrpAfterCreate();
        partial void PcValueGrpAfterDelete();
        partial void PcValueGrpAfterGetNew();
        partial void PcValueGrpAfterGetRows();
        partial void PcValueGrpAfterUpdate();
        partial void PcValueGrpBeforeBI();
        partial void PcValueGrpBeforeCreate();
        partial void PcValueGrpBeforeDelete();
        partial void PcValueGrpBeforeGetNew();
        partial void PcValueGrpBeforeUpdate();
        partial void PcValueGrpSetDefaults(PcValueGrpRow row);
        #endregion Events

        #endregion Table PcValueGrp

        #region Table PcValueHead
        #region GetNewPcValueHead
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        public void GetNewPcValueHead(ref ConfigurationRuntimeTableset ds, int groupSeq)
        {
            CurrentFullTableset = ds;

            ttPcValueHead = (PcValueHeadRow)InnerGetNew(
                ds.PcValueHead,
                (PcValueHeadRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.GroupSeq = groupSeq;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewPcValueHead

        #region Events
        partial void PcValueHeadAfterCreate();
        partial void PcValueHeadAfterDelete();
        partial void PcValueHeadAfterGetNew();
        partial void PcValueHeadAfterGetRows();
        partial void PcValueHeadAfterUpdate();
        partial void PcValueHeadBeforeBI();
        partial void PcValueHeadBeforeCreate();
        partial void PcValueHeadBeforeDelete();
        partial void PcValueHeadBeforeGetNew();
        partial void PcValueHeadBeforeUpdate();
        partial void PcValueHeadSetDefaults(PcValueHeadRow row);
        #endregion Events

        #endregion Table PcValueHead

        #region Table PcInputsLayerDetail
        #region GetNewPcInputsLayerDetail
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        public void GetNewPcInputsLayerDetail(ref ConfigurationRuntimeTableset ds, string configID, string inputName, string imageLayerID)
        {
            CurrentFullTableset = ds;

            ttPcInputsLayerDetail = (PcInputsLayerDetailRow)InnerGetNew(
                ds.PcInputsLayerDetail,
                (PcInputsLayerDetailRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.ConfigID = configID;
                    row.InputName = inputName;
                    row.ImageLayerID = imageLayerID;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewPcInputsLayerDetail

        #region Events
        partial void PcInputsLayerDetailAfterCreate();
        partial void PcInputsLayerDetailAfterDelete();
        partial void PcInputsLayerDetailAfterGetNew();
        partial void PcInputsLayerDetailAfterGetRows();
        partial void PcInputsLayerDetailAfterUpdate();
        partial void PcInputsLayerDetailBeforeBI();
        partial void PcInputsLayerDetailBeforeCreate();
        partial void PcInputsLayerDetailBeforeDelete();
        partial void PcInputsLayerDetailBeforeGetNew();
        partial void PcInputsLayerDetailBeforeUpdate();
        partial void PcInputsLayerDetailSetDefaults(PcInputsLayerDetailRow row);
        #endregion Events

        #endregion Table PcInputsLayerDetail

        #region Table PcInputsLayerHeader
        #region GetNewPcInputsLayerHeader
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        public void GetNewPcInputsLayerHeader(ref ConfigurationRuntimeTableset ds, string configID, string inputName)
        {
            CurrentFullTableset = ds;

            ttPcInputsLayerHeader = (PcInputsLayerHeaderRow)InnerGetNew(
                ds.PcInputsLayerHeader,
                (PcInputsLayerHeaderRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.ConfigID = configID;
                    row.InputName = inputName;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewPcInputsLayerHeader

        #region Events
        partial void PcInputsLayerHeaderAfterCreate();
        partial void PcInputsLayerHeaderAfterDelete();
        partial void PcInputsLayerHeaderAfterGetNew();
        partial void PcInputsLayerHeaderAfterGetRows();
        partial void PcInputsLayerHeaderAfterUpdate();
        partial void PcInputsLayerHeaderBeforeBI();
        partial void PcInputsLayerHeaderBeforeCreate();
        partial void PcInputsLayerHeaderBeforeDelete();
        partial void PcInputsLayerHeaderBeforeGetNew();
        partial void PcInputsLayerHeaderBeforeUpdate();
        partial void PcInputsLayerHeaderSetDefaults(PcInputsLayerHeaderRow row);
        #endregion Events

        #endregion Table PcInputsLayerHeader

        #region Table PcInputVar
        #region GetNewPcInputVar
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        public void GetNewPcInputVar(ref ConfigurationRuntimeTableset ds)
        {
            CurrentFullTableset = ds;

            ttPcInputVar = (PcInputVarRow)InnerGetNew(
                ds.PcInputVar,
                (PcInputVarRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewPcInputVar

        #region Events
        partial void PcInputVarAfterCreate();
        partial void PcInputVarAfterDelete();
        partial void PcInputVarAfterGetNew();
        partial void PcInputVarAfterGetRows();
        partial void PcInputVarAfterUpdate();
        partial void PcInputVarBeforeBI();
        partial void PcInputVarBeforeCreate();
        partial void PcInputVarBeforeDelete();
        partial void PcInputVarBeforeGetNew();
        partial void PcInputVarBeforeUpdate();
        partial void PcInputVarSetDefaults(PcInputVarRow row);
        #endregion Events

        #endregion Table PcInputVar

        #region Table PcValueInputLayerDetail
        #region GetNewPcValueInputLayerDetail
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        public void GetNewPcValueInputLayerDetail(ref ConfigurationRuntimeTableset ds, int groupSeq, int headNum, string configID, string inputName, string imageLayerID)
        {
            CurrentFullTableset = ds;

            ttPcValueInputLayerDetail = (PcValueInputLayerDetailRow)InnerGetNew(
                ds.PcValueInputLayerDetail,
                (PcValueInputLayerDetailRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.GroupSeq = groupSeq;
                    row.HeadNum = headNum;
                    row.ConfigID = configID;
                    row.InputName = inputName;
                    row.ImageLayerID = imageLayerID;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewPcValueInputLayerDetail

        #region Events
        partial void PcValueInputLayerDetailAfterCreate();
        partial void PcValueInputLayerDetailAfterDelete();
        partial void PcValueInputLayerDetailAfterGetNew();
        partial void PcValueInputLayerDetailAfterGetRows();
        partial void PcValueInputLayerDetailAfterUpdate();
        partial void PcValueInputLayerDetailBeforeBI();
        partial void PcValueInputLayerDetailBeforeCreate();
        partial void PcValueInputLayerDetailBeforeDelete();
        partial void PcValueInputLayerDetailBeforeGetNew();
        partial void PcValueInputLayerDetailBeforeUpdate();
        partial void PcValueInputLayerDetailSetDefaults(PcValueInputLayerDetailRow row);
        #endregion Events

        #endregion Table PcValueInputLayerDetail

        #region Table PcValueInputLayerHeader
        #region GetNewPcValueInputLayerHeader
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        public void GetNewPcValueInputLayerHeader(ref ConfigurationRuntimeTableset ds, int groupSeq, int headNum, string configID, string inputName)
        {
            CurrentFullTableset = ds;

            ttPcValueInputLayerHeader = (PcValueInputLayerHeaderRow)InnerGetNew(
                ds.PcValueInputLayerHeader,
                (PcValueInputLayerHeaderRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.GroupSeq = groupSeq;
                    row.HeadNum = headNum;
                    row.ConfigID = configID;
                    row.InputName = inputName;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewPcValueInputLayerHeader

        #region Events
        partial void PcValueInputLayerHeaderAfterCreate();
        partial void PcValueInputLayerHeaderAfterDelete();
        partial void PcValueInputLayerHeaderAfterGetNew();
        partial void PcValueInputLayerHeaderAfterGetRows();
        partial void PcValueInputLayerHeaderAfterUpdate();
        partial void PcValueInputLayerHeaderBeforeBI();
        partial void PcValueInputLayerHeaderBeforeCreate();
        partial void PcValueInputLayerHeaderBeforeDelete();
        partial void PcValueInputLayerHeaderBeforeGetNew();
        partial void PcValueInputLayerHeaderBeforeUpdate();
        partial void PcValueInputLayerHeaderSetDefaults(PcValueInputLayerHeaderRow row);
        #endregion Events

        #endregion Table PcValueInputLayerHeader

        #region Table QBuildMapping
        #region GetNewQBuildMapping
        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        public void GetNewQBuildMapping(ref ConfigurationRuntimeTableset ds, string configID, string inputName, string objName)
        {
            CurrentFullTableset = ds;

            ttQBuildMapping = (QBuildMappingRow)InnerGetNew(
                ds.QBuildMapping,
                (QBuildMappingRow row) =>
                {
                    row.Company = CallContext.Session.CompanyID;
                    row.ConfigID = configID;
                    row.InputName = inputName;
                    row.ObjName = objName;

                });

            ds = CurrentFullTableset;
        }
        #endregion GetNewQBuildMapping

        #region Events
        partial void QBuildMappingAfterCreate();
        partial void QBuildMappingAfterDelete();
        partial void QBuildMappingAfterGetNew();
        partial void QBuildMappingAfterGetRows();
        partial void QBuildMappingAfterUpdate();
        partial void QBuildMappingBeforeBI();
        partial void QBuildMappingBeforeCreate();
        partial void QBuildMappingBeforeDelete();
        partial void QBuildMappingBeforeGetNew();
        partial void QBuildMappingBeforeUpdate();
        partial void QBuildMappingSetDefaults(QBuildMappingRow row);
        #endregion Events

        #region QBuildMapping_Foreign_Link
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        class QBuildMappingForeignQueryResult
        {
            public string QBuildObjObjType { get; set; }
        }

        private static Func<ErpContext, string, string, string, string, QBuildMappingForeignQueryResult> QBuildMapping_QBuildObj_Foreign_Query;

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        private QBuildMappingForeignQueryResult FindFirst_QBuildMapping_QBuildObj_Foreign(string company, string configID, string inputName, string objName)
        {
            if (QBuildMapping_QBuildObj_Foreign_Query == null)
            {
                Expression<Func<ErpContext, string, string, string, string, QBuildMappingForeignQueryResult>> expression =
                    (dataContext, company_ex, configID_ex, inputName_ex, objName_ex) =>
                    (from row in dataContext.QBuildObj
                     where row.Company == company_ex
                     && row.ConfigID == configID_ex
                     && row.InputName == inputName_ex
                     && row.ObjName == objName_ex
                     select new QBuildMappingForeignQueryResult()
                     {
                         QBuildObjObjType = row.ObjType
                     }
                    ).FirstOrDefault();

                QBuildMapping_QBuildObj_Foreign_Query = DBExpressionCompiler.Compile(expression);
            }

            return QBuildMapping_QBuildObj_Foreign_Query(this.Db, company, configID, inputName, objName);
        }

        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        private void QBuildMapping_Foreign_Link()
        {
            QBuildMappingForeignQueryResult QBuildMapping_QBuildObj_Foreign_LinkResults;
            QBuildMapping_QBuildObj_Foreign_LinkResults = FindFirst_QBuildMapping_QBuildObj_Foreign(ttQBuildMapping.Company, ttQBuildMapping.ConfigID, ttQBuildMapping.InputName, ttQBuildMapping.ObjName);
            if (QBuildMapping_QBuildObj_Foreign_LinkResults != null)
            {
                ttQBuildMapping.QBuildObjObjType = QBuildMapping_QBuildObj_Foreign_LinkResults.QBuildObjObjType;
            }
            else
            {
                ttQBuildMapping.QBuildObjObjType = string.Empty;
            }
        }
        #endregion QBuildMapping_Foreign_Link
        #endregion Table QBuildMapping
        #endregion Table Specific Methods

        #region DataSet Methods
        #region DeleteByID
        /// <summary>
        /// Deletes a row given its ID.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        public void DeleteByID(int groupSeq)
        {
            var dbRow = FindFirstPcValueGrpByZKey(Session.CompanyID, groupSeq);

            OnDeleteByID("PcValueGrp", dbRow);
        }
        #endregion DeleteByID

        #region GetByID
        /// <summary>
        /// Returns a DataSet given the primary key.
        /// </summary>
        /// <returns>The DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        [Ice.Hosting.Http.HttpGet]
        public ConfigurationRuntimeTableset GetByID(int groupSeq)
        {
            CurrentFullTableset = new ConfigurationRuntimeTableset();
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Company", CallContext.Session.CompanyID);
            parameters.Add("GroupSeq", groupSeq);

            InnerGetByID(Db, 0, 0, out bool morePages, CurrentFullTableset, parameters);
            return CurrentFullTableset;
        }
        #endregion GetByID

        #region OnBeforeGetByID
        /// <summary>
        /// Invokes the BeforeBOGetByID method with appropriate parameters.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        protected override void OnBeforeGetByID(ConfigurationRuntimeTableset ds, IEnumerable<KeyValuePair<string, object>> queryParameters)
        {
            BeforeBOGetByID(
                (int)queryParameters.ElementAt(1).Value //groupSeq
            );
        }
        #endregion OnBeforeGetByID

        #region GetList
        /// <summary>
        /// Returns a list of rows that satisfy the where clause.
        /// </summary>
        /// <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
        /// <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
        /// <param name="absolutePage">Page of rows to return.</param>
        /// <param name="morePages">Whether there are more pages of rows available.</param>
        /// <returns>The list DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        [Ice.Hosting.Http.HttpGet]
        public ConfigurationRuntimeListTableset GetList(string whereClause, int pageSize, int absolutePage, out bool morePages)
        {
            CurrentListTableset = new ConfigurationRuntimeListTableset();
            InnerGetList(Db, whereClause, pageSize, absolutePage, CurrentListTableset, out morePages);
            return CurrentListTableset;
        }
        #endregion GetList

        #region GetRows
        /// <summary>
        /// Returns a dataset containing all rows that satisfy the where clauses.
        /// </summary>
        /// <returns>The full DataSet.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        [Ice.Hosting.Http.HttpGet]
        public ConfigurationRuntimeTableset GetRows(string whereClausePcValueGrp, string whereClausePcValueHead, string whereClausePcConfigurationParams, string whereClausePcConfiguredDrawings, string whereClausePcContextProperties, string whereClausePcInputsLayerDetail, string whereClausePcInputsLayerHeader, string whereClausePcInputsPublishToDocParams, string whereClausePcInputVar, string whereClausePcValueInputLayerDetail, string whereClausePcValueInputLayerHeader, string whereClauseQBuildMapping, int pageSize, int absolutePage, out bool morePages)
        {
            CurrentFullTableset = new ConfigurationRuntimeTableset();
            Dictionary<IIceTable, string> tableWhereClauses = new Dictionary<IIceTable, string>();
            tableWhereClauses.Add(CurrentFullTableset.PcValueGrp, whereClausePcValueGrp);
            tableWhereClauses.Add(CurrentFullTableset.PcValueHead, whereClausePcValueHead);
            tableWhereClauses.Add(CurrentFullTableset.PcConfigurationParams, whereClausePcConfigurationParams);
            tableWhereClauses.Add(CurrentFullTableset.PcConfiguredDrawings, whereClausePcConfiguredDrawings);
            tableWhereClauses.Add(CurrentFullTableset.PcContextProperties, whereClausePcContextProperties);
            tableWhereClauses.Add(CurrentFullTableset.PcInputsLayerDetail, whereClausePcInputsLayerDetail);
            tableWhereClauses.Add(CurrentFullTableset.PcInputsLayerHeader, whereClausePcInputsLayerHeader);
            tableWhereClauses.Add(CurrentFullTableset.PcInputsPublishToDocParams, whereClausePcInputsPublishToDocParams);
            tableWhereClauses.Add(CurrentFullTableset.PcInputVar, whereClausePcInputVar);
            tableWhereClauses.Add(CurrentFullTableset.PcValueInputLayerDetail, whereClausePcValueInputLayerDetail);
            tableWhereClauses.Add(CurrentFullTableset.PcValueInputLayerHeader, whereClausePcValueInputLayerHeader);
            tableWhereClauses.Add(CurrentFullTableset.QBuildMapping, whereClauseQBuildMapping);

            InnerGetRows(Db, pageSize, absolutePage, out morePages, CurrentFullTableset, tableWhereClauses);
            return CurrentFullTableset;
        }
        #endregion GetRows

        #region SysRowID methods

        /// <summary>
        /// </summary>
        [Ice.Hosting.Http.HttpGet]
        public ConfigurationRuntimeTableset GetBySysRowID(Guid id)
        {
            var whereClause = string.Format("SysRowID = '{0}'", id);

            bool morePages;
            var ds = GetRows(whereClause, "", "", "", "", "", "", "", "", "", "", "", 0, 0, out morePages);

            if (ds.Tables[0].Count <= 0)
            {
                throw new Ice.Common.RecordNotFoundException("Record not found.", ds.Tables[0].TableName, null);
            }

            return ds;
        }

        /// <summary>
        /// </summary>
        [Ice.Hosting.Http.HttpGet]
        public ConfigurationRuntimeTableset GetBySysRowIDs(System.Collections.Generic.List<Guid> ids)
        {
            if (ids.Count == 0)
                throw new ArgumentException("No IDs sent.");

            var whereClause = new System.Text.StringBuilder("SysRowID in (");
            bool first = true;
            foreach (var id in ids)
            {
                if (first)
                    first = false;
                else
                    whereClause.Append(", ");

                whereClause.AppendFormat("'{0}'", id);
            }

            whereClause.Append(")");

            bool morePages;
            return GetRows(whereClause.ToString(), "", "", "", "", "", "", "", "", "", "", "", 0, 0, out morePages);
        }

        #endregion

        #region Update
        /// <summary>
        /// Commits the DataSet changes to the data store.
        /// </summary>
        /// <param name="ds">The full DataSet.</param>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        public void Update(ref ConfigurationRuntimeTableset ds)
        {
            this.InnerUpdate<IConfigurationRuntimeUpdater>(Db, ds);

            ds = MainTableSet;
        }
        #endregion Update

        #region UpdateExt
        /// <summary>
        /// Apply input data to service by calling GetByID/GetNew/Update methods.
        /// </summary>
        /// <returns>The dataset with list of errors occurred during update process.</returns>
        [System.CodeDom.Compiler.GeneratedCode("ServiceGenerator", "4.2.300.0")]
        [Ice.Services.MethodGenerationOptions(SparseCopy = true)]
        public BOUpdErrorTableset UpdateExt(ref UpdExtConfigurationRuntimeTableset ds, bool continueProcessingOnError, bool rollbackParentOnChildError, out bool errorsOccurred)
        {
            errorsOccurred = false;
            var errors = new BOUpdErrorTableset();

            if (!OnUpdateExtMultipleHeadersAllowed(ds))
            {
                if (ds.PcValueGrp.Where(n => n.GroupSeq == 0).Count() > 1)
                {
                    errorsOccurred = true;
                    CreateValidationErrorForUpdateExt(errors, UpdateExtValidationErrorType.BusinessObjectDoesNotSupportMultipleNew, ds.PcValueGrp.TableName);
                    return errors;
                }
            }
            var returnDs = new UpdExtConfigurationRuntimeTableset();
            var initializedTableset = new UpdExtConfigurationRuntimeTableset();

            ds = (UpdExtConfigurationRuntimeTableset)InnerUpdateExt(ds, returnDs, initializedTableset, continueProcessingOnError, rollbackParentOnChildError, errors, out errorsOccurred);
            return errors;
        }

        /// <inheritdoc />
        protected override IDisposable GetServiceForUpdateExt()
        {
            return Ice.Assemblies.ServiceRenderer.GetService<ConfigurationRuntimeSvcContract>(this.Db);
        }

        /// <inheritdoc />
        protected override ConfigurationRuntimeTableset GetByIdForUpdateExt(object serviceObject, IceRow originalParentRecord)
        {
            var service = (ConfigurationRuntimeSvcContract)serviceObject;
            return service?.GetByID((int)originalParentRecord["GroupSeq"]);
        }

        /// <inheritdoc />
        protected override void GetNewForUpdateExt(object serviceObject, string tableName, ref ConfigurationRuntimeTableset workingTs, IceRow currentRecord, IceRow updatedParentRecord)
        {
            var service = (ConfigurationRuntimeSvcContract)serviceObject;
            switch (tableName)
            {
                case "PcValueGrp":
                    service?.GetNewPcValueGrp(ref workingTs
                    );
                    break;
                case "PcValueHead":
                    service?.GetNewPcValueHead(ref workingTs
                     , (int)updatedParentRecord["GroupSeq"]
                    );
                    break;
                case "PcInputsLayerDetail":
                    service?.GetNewPcInputsLayerDetail(ref workingTs
                     , (string)currentRecord["ConfigID"], (string)currentRecord["InputName"], (string)currentRecord["ImageLayerID"]
                    );
                    break;
                case "PcInputsLayerHeader":
                    service?.GetNewPcInputsLayerHeader(ref workingTs
                     , (string)currentRecord["ConfigID"], (string)currentRecord["InputName"]
                    );
                    break;
                case "PcInputVar":
                    service?.GetNewPcInputVar(ref workingTs
                    );
                    break;
                case "PcValueInputLayerDetail":
                    service?.GetNewPcValueInputLayerDetail(ref workingTs
                     , (int)currentRecord["GroupSeq"], (int)currentRecord["HeadNum"], (string)currentRecord["ConfigID"], (string)currentRecord["InputName"], (string)currentRecord["ImageLayerID"]
                    );
                    break;
                case "PcValueInputLayerHeader":
                    service?.GetNewPcValueInputLayerHeader(ref workingTs
                     , (int)currentRecord["GroupSeq"], (int)currentRecord["HeadNum"], (string)currentRecord["ConfigID"], (string)currentRecord["InputName"]
                    );
                    break;
                case "QBuildMapping":
                    service?.GetNewQBuildMapping(ref workingTs
                     , (string)currentRecord["ConfigID"], (string)currentRecord["InputName"], (string)currentRecord["ObjName"]
                    );
                    break;
            }
        }

        /// <inheritdoc />
        protected override void UpdateForUpdateExt(object serviceObject, ref ConfigurationRuntimeTableset workingTs)
        {
            var service = (ConfigurationRuntimeSvcContract)serviceObject;
            service?.Update(ref workingTs);
        }

        /// <inheritdoc />
        protected override List<IceRow> GetChildRowsForUpdateExt(string tableName, IceRow originalParentRecord, Ice.Tableset.TableRelation parentToChildRelation)
        {
            var rows = new List<IceRow>();
            switch (tableName)
            {
                case "PcValueGrp":
                    rows = GetChildRowsForUpdateExt<PcValueGrpRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PcValueHead":
                    rows = GetChildRowsForUpdateExt<PcValueHeadRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PcConfigurationParams":
                    rows = GetChildRowsForUpdateExt<PcConfigurationParamsRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PcConfiguredDrawings":
                    rows = GetChildRowsForUpdateExt<PcConfiguredDrawingsRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PcContextProperties":
                    rows = GetChildRowsForUpdateExt<PcContextPropertiesRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PcInputsLayerDetail":
                    rows = GetChildRowsForUpdateExt<PcInputsLayerDetailRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PcInputsLayerHeader":
                    rows = GetChildRowsForUpdateExt<PcInputsLayerHeaderRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PcInputsPublishToDocParams":
                    rows = GetChildRowsForUpdateExt<PcInputsPublishToDocParamsRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PcInputVar":
                    rows = GetChildRowsForUpdateExt<PcInputVarRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PcValueInputLayerDetail":
                    rows = GetChildRowsForUpdateExt<PcValueInputLayerDetailRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "PcValueInputLayerHeader":
                    rows = GetChildRowsForUpdateExt<PcValueInputLayerHeaderRow>(parentToChildRelation, originalParentRecord);
                    break;
                case "QBuildMapping":
                    rows = GetChildRowsForUpdateExt<QBuildMappingRow>(parentToChildRelation, originalParentRecord);
                    break;
            }
            return rows;
        }

        #endregion UpdateExt
        #endregion DataSet Methods
    }
}
