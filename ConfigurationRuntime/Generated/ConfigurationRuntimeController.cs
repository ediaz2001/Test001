//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file will be lost when regenerated
// </autogenerated>
//------------------------------------------------------------------------------

#pragma warning disable CS1572
#pragma warning disable CS1573
#pragma warning disable CS1591
#pragma warning disable CS1734

using Epicor.Cloud;
using Erp.Contracts;
using Erp.Models.BO.ConfigurationRuntime;
using Erp.Tablesets;
using Ice.Hosting.AspNetCore.Controller;
using Microsoft.AspNetCore.Mvc;

namespace Erp.Controllers.BO
{
    /// <summary>
    /// ASP.NET Core API controller for the Erp.BO.ConfigurationRuntime service.
    /// </summary>
    [Route("api/rpc/Erp.BO.[controller]")]
    [ApiController]
    public class ConfigurationRuntimeController : ApiControllerBase
    {
        #region Initialize

        private ConfigurationRuntimeSvcContract ___service;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationRuntimeController"/> class.
        /// </summary>
        public ConfigurationRuntimeController(IOperationBoundClassProvider<ConfigurationRuntimeSvcContract> provider) : base(provider.ServiceAsOperationBoundClass)
        {
            this.___service = provider.Service;
        }

        #endregion

        /// <summary>
        /// Returns the generated source code to compile the client code of a configuration
        /// </summary>
        [Route("GetGeneratedClient")]
        [HttpPost]
        public GetGeneratedClient_OutputModel GetGeneratedClient(GetGeneratedClient_InputModel model)
        {
            var ___result = ___service.GetGeneratedClient(model.ConfigID, model.TestID, model.IsTestPlan, model.SpecID, model.SpecRevNum, model.ClientCheckSyntaxArgs);

            return new GetGeneratedClient_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Perform any logic that needs to be executed before starting a configuration
        /// </summary>
        [Route("PreStartConfiguration")]
        [HttpPost]
        public PreStartConfiguration_OutputModel PreStartConfiguration(PreStartConfiguration_InputModel model)
        {
            var ___result = ___service.PreStartConfiguration(ref model.ConfigurationRuntimeDS, ref model.ConfigurationSummaryTS);

            return new PreStartConfiguration_OutputModel
            {
                ConfigurationRuntimeDS = model.ConfigurationRuntimeDS,
                ConfigurationSummaryTS = model.ConfigurationSummaryTS,
                _Return = ___result
            };
        }

        /// <summary>
        /// Starts a configuration given a configuration sequence (PcStruct) record and the source and target information.
        /// For Keep When process:
        /// * If PcValueHead does not exists State will be Added
        /// </summary>
        [Route("StartPcValueConfiguration")]
        [HttpPost]
        public StartPcValueConfiguration_OutputModel StartPcValueConfiguration(StartPcValueConfiguration_InputModel model)
        {
            var ___result = ___service.StartPcValueConfiguration(ref model.Ds, model.Ds2);

            return new StartPcValueConfiguration_OutputModel
            {
                Ds = model.Ds,
                _Return = ___result
            };
        }

        /// <summary>
        /// Starts a configuration given a configuration sequence (PcStruct) record and the source and target information.
        /// For Keep When process:
        /// * If PcValueHead does not exists State will be Added
        /// </summary>
        [Route("StartConfiguration")]
        [HttpPost]
        public StartConfiguration_OutputModel StartConfiguration(StartConfiguration_InputModel model)
        {
            var ___result = ___service.StartConfiguration(ref model.Ds, model.Ds2);

            return new StartConfiguration_OutputModel
            {
                Ds = model.Ds,
                _Return = ___result
            };
        }

        /// <summary>
        /// Saves a single level configuration.
        /// </summary>
        [Route("SavePcValueConfiguration")]
        [HttpPost]
        public SavePcValueConfiguration_OutputModel SavePcValueConfiguration(SavePcValueConfiguration_InputModel model)
        {
            bool testPassed;
            string failText;

            var ___result = ___service.SavePcValueConfiguration(model.ConfigurationSequenceDS, ref model.ConfigurationRuntimeDS, model.PcValueDS, out testPassed, out failText, ref model.TestResultsDS);

            return new SavePcValueConfiguration_OutputModel
            {
                ConfigurationRuntimeDS = model.ConfigurationRuntimeDS,
                TestPassed = testPassed,
                FailText = failText,
                TestResultsDS = model.TestResultsDS,
                _Return = ___result
            };
        }

        /// <summary>
        /// Saves a multi level configuration from kinetic.
        /// </summary>
        [Route("SavePcValueConfigurationMulti")]
        [HttpPost]
        public SavePcValueConfigurationMulti_OutputModel SavePcValueConfigurationMulti(SavePcValueConfigurationMulti_InputModel model)
        {
            bool testPassed;
            string failText;

            var ___result = ___service.SavePcValueConfigurationMulti(model.ConfigSequenceDS, ref model.ConfigRuntimeDS, model.PcValueDsArray, out testPassed, out failText, ref model.TestResultsDS);

            return new SavePcValueConfigurationMulti_OutputModel
            {
                ConfigRuntimeDS = model.ConfigRuntimeDS,
                TestPassed = testPassed,
                FailText = failText,
                TestResultsDS = model.TestResultsDS,
                _Return = ___result
            };
        }

        /// <summary>
        /// Saves a single level configuration.
        /// </summary>
        [Route("SaveConfiguration")]
        [HttpPost]
        public SaveConfiguration_OutputModel SaveConfiguration(SaveConfiguration_InputModel model)
        {
            bool testPassed;
            string failText;

            var ___result = ___service.SaveConfiguration(model.ConfigurationSequenceDS, ref model.ConfigurationRuntimeDS, model.PcValueDS, out testPassed, out failText, ref model.TestResultsDS);

            return new SaveConfiguration_OutputModel
            {
                ConfigurationRuntimeDS = model.ConfigurationRuntimeDS,
                TestPassed = testPassed,
                FailText = failText,
                TestResultsDS = model.TestResultsDS,
                _Return = ___result
            };
        }

        /// <summary>
        /// Saves a multi-level configuration.
        /// For Keep When process:
        /// * For all configurators that KeepIt are false will not be saved
        /// * Identify all configurators KeepIt are false to delete PcValueHead and PcValueSet
        /// </summary>
        [Route("SaveMultiConfiguration")]
        [HttpPost]
        public SaveMultiConfiguration_OutputModel SaveMultiConfiguration(SaveMultiConfiguration_InputModel model)
        {
            bool testPassed;
            string failText;

            var ___result = ___service.SaveMultiConfiguration(ref model.ConfigSequenceDS, ref model.ConfigRuntimeDS, model.SerializedData, ref model.TestResultsDS, out testPassed, out failText);

            return new SaveMultiConfiguration_OutputModel
            {
                ConfigSequenceDS = model.ConfigSequenceDS,
                ConfigRuntimeDS = model.ConfigRuntimeDS,
                TestResultsDS = model.TestResultsDS,
                TestPassed = testPassed,
                FailText = failText,
                _Return = ___result
            };
        }

        /// <summary>
        /// Method is executed when the customer X-es out of the configurator instead of pressing save and they are in test mode
        /// </summary>
        [Route("DeleteAssembliesInTestMode")]
        [HttpPost]
        public DeleteAssembliesInTestMode_OutputModel DeleteAssembliesInTestMode(DeleteAssembliesInTestMode_InputModel model)
        {
            ___service.DeleteAssembliesInTestMode(ref model.ConfigSequenceDS, model.TestID);

            return new DeleteAssembliesInTestMode_OutputModel
            {
                ConfigSequenceDS = model.ConfigSequenceDS
            };
        }

        /// <summary>
        /// Process the no inputs configurator for Kinetic screens.
        /// The method uses the parameters to build the Tablesets needed to invoke the ProcessNICDocumentRules.
        /// </summary>
        [Route("ProcessNoInputsConfigurator")]
        [HttpPost]
        public void ProcessNoInputsConfigurator(ProcessNoInputsConfigurator_InputModel model)
        {
            ___service.ProcessNoInputsConfigurator(model.RelatedToTable, model.RelatedToSysRowID, model.PartNum, model.RevisionNum, model.AltMethod, model.ConfigID, model.ForeignTableName, model.ForeignSysRowID);
        }

        /// <summary>
        /// Process NIC  document rules
        /// </summary>
        [Route("ProcessNICDocumentRules")]
        [HttpPost]
        public ProcessNICDocumentRules_OutputModel ProcessNICDocumentRules(ProcessNICDocumentRules_InputModel model)
        {
            ___service.ProcessNICDocumentRules(ref model.ConfigSequenceDS, ref model.ConfigRuntimeDS);

            return new ProcessNICDocumentRules_OutputModel
            {
                ConfigSequenceDS = model.ConfigSequenceDS,
                ConfigRuntimeDS = model.ConfigRuntimeDS
            };
        }

        /// <summary>
        /// Process document rules
        /// </summary>
        [Route("ProcessDocumentRules")]
        [HttpPost]
        public ProcessDocumentRules_OutputModel ProcessDocumentRules(ProcessDocumentRules_InputModel model)
        {
            ___service.ProcessDocumentRules(ref model.ConfigSequenceDS, ref model.ConfigRuntimeDS, model.PcValueDS);

            return new ProcessDocumentRules_OutputModel
            {
                ConfigSequenceDS = model.ConfigSequenceDS,
                ConfigRuntimeDS = model.ConfigRuntimeDS
            };
        }

        /// <summary>
        /// Objective: Run methods rules to determine if assemblies should be keep it or not to hide or show the corresponding configuration.
        /// This process will be executed when:
        /// * When is clicked next page and changes to next configurator
        /// * Is multiconfigurator
        /// * If current part revision has rules set(OPR or ASM)
        /// </summary>
        [Route("ProcessKeepWhen")]
        [HttpPost]
        public ProcessKeepWhen_OutputModel ProcessKeepWhen(ProcessKeepWhen_InputModel model)
        {
            ___service.ProcessKeepWhen(ref model.ConfigurationSequenceDS, ref model.ConfigRuntimeDS, model.PcValueDS, model.ParAltMethod, model.CheckNextCfg, ref model.EnableNextPage);

            return new ProcessKeepWhen_OutputModel
            {
                ConfigurationSequenceDS = model.ConfigurationSequenceDS,
                ConfigRuntimeDS = model.ConfigRuntimeDS,
                EnableNextPage = model.EnableNextPage
            };
        }

        /// <summary>
        /// DeleteSubConfiguration
        /// </summary>
        [Route("DeleteSubConfiguration")]
        [HttpPost]
        public void DeleteSubConfiguration(DeleteSubConfiguration_InputModel model)
        {
            ___service.DeleteSubConfiguration(model.TtPcValueGrpRow, model.TtPcStructRow);
        }

        /// <summary>
        /// Provides ability to check server side syntax
        /// </summary>
        [Route("CheckServerSyntax")]
        [HttpPost]
        public CheckServerSyntax_OutputModel CheckServerSyntax(CheckServerSyntax_InputModel model)
        {
            string syntaxErrors;

            ___service.CheckServerSyntax(model.ConfigID, model.DocRuleCheckSyntaxArgs, model.ServerEventCheckSyntaxArgs, model.MethodRuleCheckSyntaxArgs, out syntaxErrors);

            return new CheckServerSyntax_OutputModel
            {
                SyntaxErrors = syntaxErrors
            };
        }

        /// <summary>
        /// Call this method when you want to test the rules of a No Inputs Configurator
        /// </summary>
        [Route("TestNICRules")]
        [HttpPost]
        public TestNICRules_OutputModel TestNICRules(TestNICRules_InputModel model)
        {
            ___service.TestNICRules(model.ConfigID, model.PartNum, model.RevisionNum, ref model.Ts);

            return new TestNICRules_OutputModel
            {
                Ts = model.Ts
            };
        }

        /// <summary>
        /// Call this method to retrieve the Test Rules results dataset that is temporarily stored in the FileStore for EWC configurators.
        /// </summary>
        [Route("EWCTestRules")]
        [HttpPost]
        public EWCTestRules_OutputModel EWCTestRules(EWCTestRules_InputModel model)
        {
            ___service.EWCTestRules(model.PartNum, model.RevisionNum, model.ConfigID, ref model.TestRulesResultsDS);

            return new EWCTestRules_OutputModel
            {
                TestRulesResultsDS = model.TestRulesResultsDS
            };
        }

        /// <summary>
        /// Receives configuration values on a smart string and processes it completely.
        /// </summary>
        [Route("EDIDemandConfiguration")]
        [HttpPost]
        public void EDIDemandConfiguration(EDIDemandConfiguration_InputModel model)
        {
            ___service.EDIDemandConfiguration(model.ParentMfgCompID, model.IDemandContractNum, model.IDemandHeadSeq, model.IDemandDtlSeq, model.ISmartString);
        }

        /// <summary>
        /// Validate the smart string against inputs
        /// </summary>
        [Route("EDIValidateSmartString")]
        [HttpPost]
        public EDIValidateSmartString_OutputModel EDIValidateSmartString(EDIValidateSmartString_InputModel model)
        {
            string ssLogText;

            var ___result = ___service.EDIValidateSmartString(model.PartNum, model.RevisionNum, model.IpSmartString, out ssLogText);

            return new EDIValidateSmartString_OutputModel
            {
                SsLogText = ssLogText,
                _Return = ___result
            };
        }

        /// <summary>
        /// Part exists.
        /// </summary>
        [Route("PartExists")]
        [HttpPost]
        public PartExists_OutputModel PartExists(PartExists_InputModel model)
        {
            bool partExists;
            bool notUnique;
            bool sIValues;

            ___service.PartExists(model.ConfigID, model.TargetEntity, model.GroupSeq, model.BasePartNum, model.BaseRevisionNum, model.NewPartNum, model.MtlSeq, model.RuleTag, out partExists, out notUnique, out sIValues);

            return new PartExists_OutputModel
            {
                PartExists = partExists,
                NotUnique = notUnique,
                SIValues = sIValues
            };
        }

        /// <summary>
        /// Determines if the part rev exists
        /// </summary>
        [Route("PartRevExists")]
        [HttpPost]
        public PartRevExists_OutputModel PartRevExists(PartRevExists_InputModel model)
        {
            var ___result = ___service.PartRevExists(model.IpPartNum, model.IpRevisionNum);

            return new PartRevExists_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Get AllowRecordCreation and IncomingSmartString columns to process before the configuration is saved for the first time.
        /// These values were obtained but only after the configuration was saved for the first time.
        /// </summary>
        [Route("GetTargetEntityValues")]
        [HttpPost]
        public GetTargetEntityValues_OutputModel GetTargetEntityValues(GetTargetEntityValues_InputModel model)
        {
            bool allowRecordCreation;
            bool useInSmartString;

            ___service.GetTargetEntityValues(model.ConfigID, model.RelatedToTableName, out allowRecordCreation, out useInSmartString);

            return new GetTargetEntityValues_OutputModel
            {
                AllowRecordCreation = allowRecordCreation,
                UseInSmartString = useInSmartString
            };
        }

        /// <summary>
        /// Original logic to suggest a smart string.  This is called from Win client and EWA.  It cannot be called from EWC.
        /// </summary>
        [Route("SuggestSmartString")]
        [HttpPost]
        public SuggestSmartString_OutputModel SuggestSmartString(SuggestSmartString_InputModel model)
        {
            string outSmartString;

            ___service.SuggestSmartString(model.ConfigID, model.TestMode, ref model.Ts, model.IpRelatedToTable, model.IpRelatedToSysRowID, model.SmartStringValues, out outSmartString, model.StructTag, model.StructID);

            return new SuggestSmartString_OutputModel
            {
                Ts = model.Ts,
                OutSmartString = outSmartString
            };
        }

        /// <summary>
        /// Call this method when you need to suggest a smart string value and you are not calling from EWA or your ConfigType is EWC.
        /// </summary>
        [Route("EWCSuggestSmartString")]
        [HttpPost]
        public EWCSuggestSmartString_OutputModel EWCSuggestSmartString(EWCSuggestSmartString_InputModel model)
        {
            string outSmartString;

            ___service.EWCSuggestSmartString(model.ConfigID, model.TestMode, model.IpRelatedToTable, model.IpRelatedToSysRowID, model.SmartStringValues, out outSmartString, model.SubPartNum, model.BasePartNum, model.PartNum, model.SubBasePartNum);

            return new EWCSuggestSmartString_OutputModel
            {
                OutSmartString = outSmartString
            };
        }

        /// <summary>
        /// Purpose: Adds a row and populates the string value in the User Defined Table used to pass parameters
        /// from the client to the server for Server Side UDMethods.
        /// <param name="methodName">The name of the server side UDmethod the parameter is being added for.</param>
        /// <param name="parameterName">The name of the Parameter being added.</param>
        /// <param name="configID">The ID of the configurator the UDmethod is tied to.</param>
        /// <param name="paramSeq">The position the parameter is in the signature of the UDMethod.</param>
        /// <param name="newValue">This holds the string value being passed for string parameters.</param>
        /// <param name="pcValueDS">The name of the server side UDmethod parameter is being added for.</param>
        /// </summary>
        [Route("AddUserDenfinedParameterString")]
        [HttpPost]
        public AddUserDenfinedParameterString_OutputModel AddUserDenfinedParameterString(AddUserDenfinedParameterString_InputModel model)
        {
            ___service.AddUserDenfinedParameterString(model.MethodName, model.ParameterName, model.ConfigID, model.ParamSeq, model.NewValue, ref model.PcValueDS);

            return new AddUserDenfinedParameterString_OutputModel
            {
                PcValueDS = model.PcValueDS
            };
        }

        /// <summary>
        /// Purpose: Adds a row and populates the int value in the User Defined Table used to pass parameters
        /// from the client to the server for Server Side UDMethods.
        /// <param name="methodName">The name of the server side UDmethod the parameter is being added for.</param>
        /// <param name="parameterName">The name of the Parameter being added.</param>
        /// <param name="configID">The ID of the configurator the UDmethod is tied to.</param>
        /// <param name="paramSeq">The position the parameter is in the signature of the UDMethod.</param>
        /// <param name="newValue">This holds the int value being passed for string parameters.</param>
        /// <param name="pcValueDS">The name of the server side UDmethod parameter is being added for.</param>
        /// </summary>
        [Route("AddUserDenfinedParameterInt")]
        [HttpPost]
        public AddUserDenfinedParameterInt_OutputModel AddUserDenfinedParameterInt(AddUserDenfinedParameterInt_InputModel model)
        {
            ___service.AddUserDenfinedParameterInt(model.MethodName, model.ParameterName, model.ConfigID, model.ParamSeq, model.NewValue, ref model.PcValueDS);

            return new AddUserDenfinedParameterInt_OutputModel
            {
                PcValueDS = model.PcValueDS
            };
        }

        /// <summary>
        /// Purpose: Adds a row and populates the decimal value in the User Defined Table used to pass parameters
        /// from the client to the server for Server Side UDMethods.
        /// <param name="methodName">The name of the server side UDmethod the parameter is being added for.</param>
        /// <param name="parameterName">The name of the Parameter being added.</param>
        /// <param name="configID">The ID of the configurator the UDmethod is tied to.</param>
        /// <param name="paramSeq">The position the parameter is in the signature of the UDMethod.</param>
        /// <param name="newValue">This holds the decimal value being passed for string parameters.</param>
        /// <param name="pcValueDS">The name of the server side UDmethod parameter is being added for.</param>
        /// </summary>
        [Route("AddUserDenfinedParameterDecimal")]
        [HttpPost]
        public AddUserDenfinedParameterDecimal_OutputModel AddUserDenfinedParameterDecimal(AddUserDenfinedParameterDecimal_InputModel model)
        {
            ___service.AddUserDenfinedParameterDecimal(model.MethodName, model.ParameterName, model.ConfigID, model.ParamSeq, model.NewValue, ref model.PcValueDS);

            return new AddUserDenfinedParameterDecimal_OutputModel
            {
                PcValueDS = model.PcValueDS
            };
        }

        /// <summary>
        /// Purpose: Adds a row and populates the DateTime value in the User Defined Table used to pass parameters
        /// from the client to the server for Server Side UDMethods.
        /// <param name="methodName">The name of the server side UDmethod the parameter is being added for.</param>
        /// <param name="parameterName">The name of the Parameter being added.</param>
        /// <param name="configID">The ID of the configurator the UDmethod is tied to.</param>
        /// <param name="paramSeq">The position the parameter is in the signature of the UDMethod.</param>
        /// <param name="newValue">This holds the DateTime value being passed for string parameters.</param>
        /// <param name="pcValueDS">The name of the server side UDmethod parameter is being added for.</param>
        /// </summary>
        [Route("AddUserDenfinedParameterDateTime")]
        [HttpPost]
        public AddUserDenfinedParameterDateTime_OutputModel AddUserDenfinedParameterDateTime(AddUserDenfinedParameterDateTime_InputModel model)
        {
            ___service.AddUserDenfinedParameterDateTime(model.MethodName, model.ParameterName, model.ConfigID, model.ParamSeq, model.NewValue, ref model.PcValueDS);

            return new AddUserDenfinedParameterDateTime_OutputModel
            {
                PcValueDS = model.PcValueDS
            };
        }

        /// <summary>
        /// Purpose: Adds a row and populates the bool value in the User Defined Table used to pass parameters
        /// from the client to the server for Server Side UDMethods.
        /// <param name="methodName">The name of the server side UDmethod the parameter is being added for.</param>
        /// <param name="parameterName">The name of the Parameter being added.</param>
        /// <param name="configID">The ID of the configurator the UDmethod is tied to.</param>
        /// <param name="paramSeq">The position the parameter is in the signature of the UDMethod.</param>
        /// <param name="newValue">This holds the bool value being passed for string parameters.</param>
        /// <param name="pcValueDS">The name of the server side UDmethod parameter is being added for.</param>
        /// </summary>
        [Route("AddUserDenfinedParameterBool")]
        [HttpPost]
        public AddUserDenfinedParameterBool_OutputModel AddUserDenfinedParameterBool(AddUserDenfinedParameterBool_InputModel model)
        {
            ___service.AddUserDenfinedParameterBool(model.MethodName, model.ParameterName, model.ConfigID, model.ParamSeq, model.NewValue, ref model.PcValueDS);

            return new AddUserDenfinedParameterBool_OutputModel
            {
                PcValueDS = model.PcValueDS
            };
        }

        /// <summary>
        /// Purpose: Clears the Rows in PcUserDefinedMethodParameters.  Rows should be cleared before and after calling
        /// a server side UDMethod.
        /// </summary>
        [Route("ClearUDMethodParams")]
        [HttpPost]
        public ClearUDMethodParams_OutputModel ClearUDMethodParams(ClearUDMethodParams_InputModel model)
        {
            ___service.ClearUDMethodParams(ref model.PcValueDS);

            return new ClearUDMethodParams_OutputModel
            {
                PcValueDS = model.PcValueDS
            };
        }

        /// <summary>
        /// Used to generate Image Layer script code for the given Image Layer ID
        /// </summary>
        [Route("ExecuteGenerateImageLayerScriptCode")]
        [HttpPost]
        public ExecuteGenerateImageLayerScriptCode_OutputModel ExecuteGenerateImageLayerScriptCode(ExecuteGenerateImageLayerScriptCode_InputModel model)
        {
            var ___result = ___service.ExecuteGenerateImageLayerScriptCode(model.ImageLayerID);

            return new ExecuteGenerateImageLayerScriptCode_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Used to generate Image Layer script code for the given Image Layer ID
        /// </summary>
        [Route("ExecuteGenerateSingleImageLayerScriptCode")]
        [HttpPost]
        public ExecuteGenerateSingleImageLayerScriptCode_OutputModel ExecuteGenerateSingleImageLayerScriptCode(ExecuteGenerateSingleImageLayerScriptCode_InputModel model)
        {
            var ___result = ___service.ExecuteGenerateSingleImageLayerScriptCode(model.ImageLayerID, model.ZIndex, model.ImageValue, model.LayerSeq);

            return new ExecuteGenerateSingleImageLayerScriptCode_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        ///
        /// </summary>
        [Route("ExecuteGenerateFullImageLayerScriptCode")]
        [HttpPost]
        public ExecuteGenerateFullImageLayerScriptCode_OutputModel ExecuteGenerateFullImageLayerScriptCode(ExecuteGenerateFullImageLayerScriptCode_InputModel model)
        {
            var ___result = ___service.ExecuteGenerateFullImageLayerScriptCode(model.ImageLayersInfo);

            return new ExecuteGenerateFullImageLayerScriptCode_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Need to execute this method to execute server-side UDmethods that will return an array of objects.
        /// </summary>
        [Route("ExecuteUserDefinedWithArrayReturn")]
        [HttpPost]
        public ExecuteUserDefinedWithArrayReturn_OutputModel ExecuteUserDefinedWithArrayReturn(ExecuteUserDefinedWithArrayReturn_InputModel model)
        {
            var ___result = ___service.ExecuteUserDefinedWithArrayReturn(model.MethodName, model.ConfigID, model.TestID, ref model.PcValueDS);

            return new ExecuteUserDefinedWithArrayReturn_OutputModel
            {
                PcValueDS = model.PcValueDS,
                _Return = ___result
            };
        }

        /// <summary>
        /// Need to execute this method to execute server side UDmethods from the client out other API.
        /// <param name="methodName">The name of the server-side UDmethod to execute.</param>
        /// <param name="configID">The ID of the configurator the UDmethod is tied to.</param>
        /// <param name="testID">When executing under a test (Test Inputs/Rules) this parameter should contain a valid <see cref="System.Guid"/>, otherwise it can be <see cref="F:System.Guid.Empty"/></param>
        /// <param name="pcValueDS">Values from  current configurator.</param>
        /// </summary>
        [Route("ExecuteUserDefined")]
        [HttpPost]
        public ExecuteUserDefined_OutputModel ExecuteUserDefined(ExecuteUserDefined_InputModel model)
        {
            var ___result = ___service.ExecuteUserDefined(model.MethodName, model.ConfigID, model.TestID, ref model.PcValueDS);

            return new ExecuteUserDefined_OutputModel
            {
                PcValueDS = model.PcValueDS,
                _Return = ___result
            };
        }

        /// <summary>
        /// Purpose: Executes DataLookup functiosn from the client side.
        /// </summary>
        [Route("ExecuteDataLookup")]
        [HttpPost]
        [System.ObsoleteAttribute]
        public ExecuteDataLookup_OutputModel ExecuteDataLookup(ExecuteDataLookup_InputModel model)
        {
            var ___result = ___service.ExecuteDataLookup(model.MethodName, model.ConfigId, model.TestId, model.InParams);

            return new ExecuteDataLookup_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Purpose: Call from the client to execute Page OnLoad events.
        /// <param name="pageLoadEvent">The name of the page load event wanting to execute.</param>
        /// <param name="configID">The ID of the configurator the UDmethod is tied to.</param>
        /// <param name="testID"></param>
        /// <param name="pcValueDS"></param>
        /// </summary>
        [Route("ExecutePageOnLoadEvents")]
        [HttpPost]
        public ExecutePageOnLoadEvents_OutputModel ExecutePageOnLoadEvents(ExecutePageOnLoadEvents_InputModel model)
        {
            ___service.ExecutePageOnLoadEvents(model.PageLoadEvent, model.ConfigID, model.TestID, ref model.PcValueDS);

            return new ExecutePageOnLoadEvents_OutputModel
            {
                PcValueDS = model.PcValueDS
            };
        }

        /// <summary>
        /// GetPictureBoxImage
        /// </summary>
        [Route("GetPictureBoxImage")]
        [HttpPost]
        public GetPictureBoxImage_OutputModel GetPictureBoxImage(GetPictureBoxImage_InputModel model)
        {
            var ___result = ___service.GetPictureBoxImage(model.FileName, model.InputName);

            return new GetPictureBoxImage_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Retrieve all picture box images and 2D Viewer drawings in one trip to the server and send the data back in a tableset
        /// </summary>
        [Route("GetAllImages")]
        [HttpPost]
        public GetAllImages_OutputModel GetAllImages(GetAllImages_InputModel model)
        {
            var ___result = ___service.GetAllImages(model.InputImageList, model.ConfigID, model.GroupSeq, model.HeadNum);

            return new GetAllImages_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Retrieves the images for a page in a configurator
        /// </summary>
        [Route("GetAllPictureBoxImages")]
        [HttpPost]
        public GetAllPictureBoxImages_OutputModel GetAllPictureBoxImages(GetAllPictureBoxImages_InputModel model)
        {
            var ___result = ___service.GetAllPictureBoxImages(model.InputImageList);

            return new GetAllPictureBoxImages_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// GetNewPcConfigParams
        /// </summary>
        [Route("GetNewPcConfigParams")]
        [HttpPost]
        public GetNewPcConfigParams_OutputModel GetNewPcConfigParams(GetNewPcConfigParams_InputModel model)
        {
            ___service.GetNewPcConfigParams(ref model.RuntimeDS, model.ConfigID, model.UniqueID);

            return new GetNewPcConfigParams_OutputModel
            {
                RuntimeDS = model.RuntimeDS
            };
        }

        /// <summary>
        /// GetNewPcInputsPublishToDoc
        /// </summary>
        [Route("GetNewPcInputsPublishToDoc")]
        [HttpPost]
        public GetNewPcInputsPublishToDoc_OutputModel GetNewPcInputsPublishToDoc(GetNewPcInputsPublishToDoc_InputModel model)
        {
            ___service.GetNewPcInputsPublishToDoc(ref model.RuntimeDS, model.Key);

            return new GetNewPcInputsPublishToDoc_OutputModel
            {
                RuntimeDS = model.RuntimeDS
            };
        }

        /// <summary>
        /// DataColumnLookupList
        /// </summary>
        [Route("DataColumnLookupList")]
        [HttpPost]
        public DataColumnLookupList_OutputModel DataColumnLookupList(DataColumnLookupList_InputModel model)
        {
            var ___result = ___service.DataColumnLookupList(model.ConfigId, model.TestId, model.LookupTblID, model.ColName, model.SearchValue);

            return new DataColumnLookupList_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// DataColumnList
        /// </summary>
        [Route("DataColumnList")]
        [HttpPost]
        public DataColumnList_OutputModel DataColumnList(DataColumnList_InputModel model)
        {
            var ___result = ___service.DataColumnList(model.ConfigId, model.TestId, model.LookupTableID, model.ColName);

            return new DataColumnList_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// DataColumnListNum
        /// </summary>
        [Route("DataColumnListNum")]
        [HttpPost]
        public DataColumnListNum_OutputModel DataColumnListNum(DataColumnListNum_InputModel model)
        {
            var ___result = ___service.DataColumnListNum(model.ConfigId, model.TestId, model.LookupTableID, model.ColName);

            return new DataColumnListNum_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// DataColumnRange
        /// </summary>
        [Route("DataColumnRange")]
        [HttpPost]
        public DataColumnRange_OutputModel DataColumnRange(DataColumnRange_InputModel model)
        {
            var ___result = ___service.DataColumnRange(model.ConfigId, model.TestId, model.LookupTableID, model.ColName, model.StartRow, model.EndRow);

            return new DataColumnRange_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// DataRowList
        /// </summary>
        [Route("DataRowList")]
        [HttpPost]
        public DataRowList_OutputModel DataRowList(DataRowList_InputModel model)
        {
            var ___result = ___service.DataRowList(model.ConfigId, model.TestId, model.LookupTableID, model.RowName);

            return new DataRowList_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// DataRowListNum
        /// </summary>
        [Route("DataRowListNum")]
        [HttpPost]
        public DataRowListNum_OutputModel DataRowListNum(DataRowListNum_InputModel model)
        {
            var ___result = ___service.DataRowListNum(model.ConfigId, model.TestId, model.LookupTableID, model.RowName);

            return new DataRowListNum_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// DataRowRange
        /// </summary>
        [Route("DataRowRange")]
        [HttpPost]
        public DataRowRange_OutputModel DataRowRange(DataRowRange_InputModel model)
        {
            var ___result = ___service.DataRowRange(model.ConfigId, model.TestId, model.LookupTableID, model.RowName, model.StartCol, model.EndCol);

            return new DataRowRange_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// DataRowLookup
        /// </summary>
        [Route("DataRowLookup")]
        [HttpPost]
        public DataRowLookup_OutputModel DataRowLookup(DataRowLookup_InputModel model)
        {
            var ___result = ___service.DataRowLookup(model.ConfigId, model.TestId, model.LookupTblID, model.RowName, model.SearchValue);

            return new DataRowLookup_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// DataLookup
        /// </summary>
        [Route("DataLookup")]
        [HttpPost]
        public DataLookup_OutputModel DataLookup(DataLookup_InputModel model)
        {
            var ___result = ___service.DataLookup(model.ConfigId, model.TestId, model.LookupTblID, model.RowName, model.ColName);

            return new DataLookup_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Method to initialize the EWC runtime site files for the specific config ID.
        /// </summary>
        [Route("EWCInitializeRuntime")]
        [HttpPost]
        public EWCInitializeRuntime_OutputModel EWCInitializeRuntime(EWCInitializeRuntime_InputModel model)
        {
            string AccessToken;
            int ExpiresIn;

            var ___result = ___service.EWCInitializeRuntime(model.ConfigId, model.RelatedToTable, model.RelatedToRowID, model.PartNum, model.PartRev, model.ECCUser, model.ECCPwd, model.ReturnURL, model.TestInputMode, out AccessToken, out ExpiresIn);

            return new EWCInitializeRuntime_OutputModel
            {
                AccessToken = AccessToken,
                ExpiresIn = ExpiresIn,
                _Return = ___result
            };
        }

        /// <summary>
        /// Return the EWC Runtime files from the FileStore ConfigID.zip for the current Tenant and Company.
        /// </summary>
        [Route("EWCReadAllBytesIfNewer")]
        [HttpPost]
        public EWCReadAllBytesIfNewer_OutputModel EWCReadAllBytesIfNewer(EWCReadAllBytesIfNewer_InputModel model)
        {
            var ___result = ___service.EWCReadAllBytesIfNewer(model.FileName, model.LastModifiedUTCDateTime);

            return new EWCReadAllBytesIfNewer_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Return the Tenant ID from the current Company.
        /// </summary>
        [Route("GetTenantID")]
        [HttpPost]
        public GetTenantID_OutputModel GetTenantID(GetTenantID_InputModel model)
        {
            var ___result = ___service.GetTenantID(model.Company);

            return new GetTenantID_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Write or create the byte array to the FileStore for the current company, tenant.
        /// </summary>
        [Route("EWCWriteOrCreateAllBytes")]
        [HttpPost]
        public void EWCWriteOrCreateAllBytes(EWCWriteOrCreateAllBytes_InputModel model)
        {
            ___service.EWCWriteOrCreateAllBytes(model.FileName, model.Bytes);
        }

        /// <summary>
        /// Returns the configuration specific data in the transport table for use in Question and Answer sessions not controlled by the
        /// E10 client side run time engine.  This must be called once for every configurator involved in a configuration session.
        /// </summary>
        [Route("GetPCTransportTableset")]
        [HttpPost]
        public GetPCTransportTableset_OutputModel GetPCTransportTableset(GetPCTransportTableset_InputModel model)
        {
            var ___result = ___service.GetPCTransportTableset(ref model.ConfigurationRuntime, ref model.ConfigurationSequenceTableSet);

            return new GetPCTransportTableset_OutputModel
            {
                ConfigurationRuntime = model.ConfigurationRuntime,
                ConfigurationSequenceTableSet = model.ConfigurationSequenceTableSet,
                _Return = ___result
            };
        }

        /// <summary>
        /// Method to save a configuration session to be used by Epicor Web
        /// </summary>
        [Route("SavePCTransportConfiguration")]
        [HttpPost]
        public SavePCTransportConfiguration_OutputModel SavePCTransportConfiguration(SavePCTransportConfiguration_InputModel model)
        {
            ___service.SavePCTransportConfiguration(model.ConfigurationSequenceDS, ref model.ConfigurationRuntimeDS, model.PcValueDS, ref model.TestResultsDS);

            return new SavePCTransportConfiguration_OutputModel
            {
                ConfigurationRuntimeDS = model.ConfigurationRuntimeDS,
                TestResultsDS = model.TestResultsDS
            };
        }

        /// <summary>
        /// Remove the temporary file storeS entry for Test Inputs
        /// </summary>
        [Route("DeleteTestInputsFileStoreEntry")]
        [HttpPost]
        public void DeleteTestInputsFileStoreEntry(DeleteTestInputsFileStoreEntry_InputModel model)
        {
            ___service.DeleteTestInputsFileStoreEntry(model.TestInputsFileName);
        }

        /// <summary>
        /// This method retrieves the token and for enterprise configurators when in the sales company verifies the configurator has been deployed to EWC in that company and if not
        /// executes the deploy logic so the end user is able to configure.
        /// </summary>
        [Route("PrepareEWCRequirements")]
        [HttpPost]
        public PrepareEWCRequirements_OutputModel PrepareEWCRequirements(PrepareEWCRequirements_InputModel model)
        {
            string accessToken;
            int expiresIn;

            ___service.PrepareEWCRequirements(model.ConfigID, out accessToken, out expiresIn);

            return new PrepareEWCRequirements_OutputModel
            {
                AccessToken = accessToken,
                ExpiresIn = expiresIn
            };
        }

        /// <summary>
        /// Get ECC Part configurator initial data and process to return configuration setup to display Kinetic Configurator
        /// </summary>
        [Route("GetECCConfigurator")]
        [HttpPost]
        public GetECCConfigurator_OutputModel GetECCConfigurator(GetECCConfigurator_InputModel model)
        {
            var ___result = ___service.GetECCConfigurator(model.EccConfigSetup);

            return new GetECCConfigurator_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewPcValueGrp")]
        [HttpPost]
        public GetNewPcValueGrp_OutputModel GetNewPcValueGrp(GetNewPcValueGrp_InputModel model)
        {
            ___service.GetNewPcValueGrp(ref model.Ds);

            return new GetNewPcValueGrp_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewPcValueHead")]
        [HttpPost]
        public GetNewPcValueHead_OutputModel GetNewPcValueHead(GetNewPcValueHead_InputModel model)
        {
            ___service.GetNewPcValueHead(ref model.Ds, model.GroupSeq);

            return new GetNewPcValueHead_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewPcInputsLayerDetail")]
        [HttpPost]
        public GetNewPcInputsLayerDetail_OutputModel GetNewPcInputsLayerDetail(GetNewPcInputsLayerDetail_InputModel model)
        {
            ___service.GetNewPcInputsLayerDetail(ref model.Ds, model.ConfigID, model.InputName, model.ImageLayerID);

            return new GetNewPcInputsLayerDetail_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewPcInputsLayerHeader")]
        [HttpPost]
        public GetNewPcInputsLayerHeader_OutputModel GetNewPcInputsLayerHeader(GetNewPcInputsLayerHeader_InputModel model)
        {
            ___service.GetNewPcInputsLayerHeader(ref model.Ds, model.ConfigID, model.InputName);

            return new GetNewPcInputsLayerHeader_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewPcInputVar")]
        [HttpPost]
        public GetNewPcInputVar_OutputModel GetNewPcInputVar(GetNewPcInputVar_InputModel model)
        {
            ___service.GetNewPcInputVar(ref model.Ds);

            return new GetNewPcInputVar_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewPcValueInputLayerDetail")]
        [HttpPost]
        public GetNewPcValueInputLayerDetail_OutputModel GetNewPcValueInputLayerDetail(GetNewPcValueInputLayerDetail_InputModel model)
        {
            ___service.GetNewPcValueInputLayerDetail(ref model.Ds, model.GroupSeq, model.HeadNum, model.ConfigID, model.InputName, model.ImageLayerID);

            return new GetNewPcValueInputLayerDetail_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewPcValueInputLayerHeader")]
        [HttpPost]
        public GetNewPcValueInputLayerHeader_OutputModel GetNewPcValueInputLayerHeader(GetNewPcValueInputLayerHeader_InputModel model)
        {
            ___service.GetNewPcValueInputLayerHeader(ref model.Ds, model.GroupSeq, model.HeadNum, model.ConfigID, model.InputName);

            return new GetNewPcValueInputLayerHeader_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Inserts a new row in the DataSet with defaults populated.
        /// </summary>
        [Route("GetNewQBuildMapping")]
        [HttpPost]
        public GetNewQBuildMapping_OutputModel GetNewQBuildMapping(GetNewQBuildMapping_InputModel model)
        {
            ___service.GetNewQBuildMapping(ref model.Ds, model.ConfigID, model.InputName, model.ObjName);

            return new GetNewQBuildMapping_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Deletes a row given its ID.
        /// </summary>
        [Route("DeleteByID")]
        [HttpPost]
        public void DeleteByID(DeleteByID_InputModel model)
        {
            ___service.DeleteByID(model.GroupSeq);
        }

        /// <summary>
        /// Returns a DataSet given the primary key.
        /// </summary>
        [Route("GetByID")]
        [HttpPost]
        public GetByID_OutputModel GetByID(GetByID_InputModel model)
        {
            var ___result = ___service.GetByID(model.GroupSeq);

            return new GetByID_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Returns a list of rows that satisfy the where clause.
        /// </summary>
        [Route("GetList")]
        [HttpPost]
        public GetList_OutputModel GetList(GetList_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetList(model.WhereClause, model.PageSize, model.AbsolutePage, out morePages);

            return new GetList_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// Returns a dataset containing all rows that satisfy the where clauses.
        /// </summary>
        [Route("GetRows")]
        [HttpPost]
        public GetRows_OutputModel GetRows(GetRows_InputModel model)
        {
            bool morePages;

            var ___result = ___service.GetRows(model.WhereClausePcValueGrp, model.WhereClausePcValueHead, model.WhereClausePcConfigurationParams, model.WhereClausePcConfiguredDrawings, model.WhereClausePcContextProperties, model.WhereClausePcInputsLayerDetail, model.WhereClausePcInputsLayerHeader, model.WhereClausePcInputsPublishToDocParams, model.WhereClausePcInputVar, model.WhereClausePcValueInputLayerDetail, model.WhereClausePcValueInputLayerHeader, model.WhereClauseQBuildMapping, model.PageSize, model.AbsolutePage, out morePages);

            return new GetRows_OutputModel
            {
                MorePages = morePages,
                _Return = ___result
            };
        }

        /// <summary>
        /// </summary>
        [Route("GetBySysRowID")]
        [HttpPost]
        public GetBySysRowID_OutputModel GetBySysRowID(GetBySysRowID_InputModel model)
        {
            var ___result = ___service.GetBySysRowID(model.Id);

            return new GetBySysRowID_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// </summary>
        [Route("GetBySysRowIDs")]
        [HttpPost]
        public GetBySysRowIDs_OutputModel GetBySysRowIDs(GetBySysRowIDs_InputModel model)
        {
            var ___result = ___service.GetBySysRowIDs(model.Ids);

            return new GetBySysRowIDs_OutputModel
            {
                _Return = ___result
            };
        }

        /// <summary>
        /// Commits the DataSet changes to the data store.
        /// </summary>
        [Route("Update")]
        [HttpPost]
        public Update_OutputModel Update(Update_InputModel model)
        {
            ___service.Update(ref model.Ds);

            return new Update_OutputModel
            {
                Ds = model.Ds
            };
        }

        /// <summary>
        /// Apply input data to service by calling GetByID/GetNew/Update methods.
        /// </summary>
        [Route("UpdateExt")]
        [HttpPost]
        public UpdateExt_OutputModel UpdateExt(UpdateExt_InputModel model)
        {
            bool errorsOccurred;

            var ___result = ___service.UpdateExt(ref model.Ds, model.ContinueProcessingOnError, model.RollbackParentOnChildError, out errorsOccurred);

            return new UpdateExt_OutputModel
            {
                Ds = model.Ds,
                ErrorsOccurred = errorsOccurred,
                _Return = ___result
            };
        }
    }
}

namespace Erp.Models.BO.ConfigurationRuntime
{
    public class GetGeneratedClient_InputModel
    {
        public string ConfigID;
        public System.Guid TestID;
        public bool IsTestPlan;
        public string SpecID;
        public string SpecRevNum;
        public Erp.Shared.Lib.Configurator.ClientCheckSyntaxArgs ClientCheckSyntaxArgs;
    }

    public class GetGeneratedClient_OutputModel
    {
        public System.Byte[] _Return;
    }

    public class PreStartConfiguration_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigurationRuntimeDS;
        public Erp.Tablesets.ConfigurationSummaryTableset ConfigurationSummaryTS;
    }

    public class PreStartConfiguration_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigurationRuntimeDS;
        public Erp.Tablesets.ConfigurationSummaryTableset ConfigurationSummaryTS;
        public Erp.Tablesets.ConfigurationSequenceTableset _Return;
    }

    public class StartPcValueConfiguration_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
        public Erp.Tablesets.ConfigurationSequenceTableset Ds2;
    }

    public class StartPcValueConfiguration_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
        public Erp.Tablesets.PcValueTableset _Return;
    }

    public class StartConfiguration_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
        public Erp.Tablesets.ConfigurationSequenceTableset Ds2;
    }

    public class StartConfiguration_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
        public System.Byte[] _Return;
    }

    public class SavePcValueConfiguration_InputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigurationSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigurationRuntimeDS;
        public Erp.Tablesets.PcValueTableset PcValueDS;
        public Erp.Tablesets.PcTestResultsTableset TestResultsDS;
    }

    public class SavePcValueConfiguration_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigurationRuntimeDS;
        public bool TestPassed;
        public string FailText;
        public Erp.Tablesets.PcTestResultsTableset TestResultsDS;
        public bool _Return;
    }

    public class SavePcValueConfigurationMulti_InputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigRuntimeDS;
        public System.Collections.Generic.Dictionary<string, Erp.Tablesets.PcValueTableset[]> PcValueDsArray;
        public Erp.Tablesets.PcTestResultsTableset TestResultsDS;
    }

    public class SavePcValueConfigurationMulti_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigRuntimeDS;
        public bool TestPassed;
        public string FailText;
        public Erp.Tablesets.PcTestResultsTableset TestResultsDS;
        public bool _Return;
    }

    public class SaveConfiguration_InputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigurationSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigurationRuntimeDS;
        public System.Byte[] PcValueDS;
        public Erp.Tablesets.PcTestResultsTableset TestResultsDS;
    }

    public class SaveConfiguration_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigurationRuntimeDS;
        public bool TestPassed;
        public string FailText;
        public Erp.Tablesets.PcTestResultsTableset TestResultsDS;
        public bool _Return;
    }

    public class SaveMultiConfiguration_InputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigRuntimeDS;
        public System.Byte[] SerializedData;
        public Erp.Tablesets.PcTestResultsTableset TestResultsDS;
    }

    public class SaveMultiConfiguration_OutputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigRuntimeDS;
        public Erp.Tablesets.PcTestResultsTableset TestResultsDS;
        public bool TestPassed;
        public string FailText;
        public bool _Return;
    }

    public class DeleteAssembliesInTestMode_InputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigSequenceDS;
        public System.Guid TestID;
    }

    public class DeleteAssembliesInTestMode_OutputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigSequenceDS;
    }

    public class ProcessNoInputsConfigurator_InputModel
    {
        public string RelatedToTable;
        public System.Guid RelatedToSysRowID;
        public string PartNum;
        public string RevisionNum;
        public string AltMethod;
        public string ConfigID;
        public string ForeignTableName;
        public System.Guid ForeignSysRowID;
    }

    public class ProcessNICDocumentRules_InputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigRuntimeDS;
    }

    public class ProcessNICDocumentRules_OutputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigRuntimeDS;
    }

    public class ProcessDocumentRules_InputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigRuntimeDS;
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class ProcessDocumentRules_OutputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigRuntimeDS;
    }

    public class ProcessKeepWhen_InputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigurationSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigRuntimeDS;
        public Erp.Tablesets.PcValueTableset PcValueDS;
        public string ParAltMethod;
        public bool CheckNextCfg;
        public bool EnableNextPage;
    }

    public class ProcessKeepWhen_OutputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigurationSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigRuntimeDS;
        public bool EnableNextPage;
    }

    public class DeleteSubConfiguration_InputModel
    {
        public Erp.Tablesets.PcValueGrpRow TtPcValueGrpRow;
        public Erp.Tablesets.PcStructRow TtPcStructRow;
    }

    public class CheckServerSyntax_InputModel
    {
        public string ConfigID;
        public Erp.Shared.Lib.Configurator.DocRuleCheckSyntaxArgs DocRuleCheckSyntaxArgs;
        public Erp.Shared.Lib.Configurator.ServerEventCheckSyntaxArgs ServerEventCheckSyntaxArgs;
        public Erp.Shared.Lib.Configurator.MethodRuleCheckSyntaxArgs MethodRuleCheckSyntaxArgs;
    }

    public class CheckServerSyntax_OutputModel
    {
        public string SyntaxErrors;
    }

    public class TestNICRules_InputModel
    {
        public string ConfigID;
        public string PartNum;
        public string RevisionNum;
        public Erp.Tablesets.PcTestResultsTableset Ts;
    }

    public class TestNICRules_OutputModel
    {
        public Erp.Tablesets.PcTestResultsTableset Ts;
    }

    public class EWCTestRules_InputModel
    {
        public string PartNum;
        public string RevisionNum;
        public string ConfigID;
        public Erp.Tablesets.PcTestResultsTableset TestRulesResultsDS;
    }

    public class EWCTestRules_OutputModel
    {
        public Erp.Tablesets.PcTestResultsTableset TestRulesResultsDS;
    }

    public class EDIDemandConfiguration_InputModel
    {
        public string ParentMfgCompID;
        public int IDemandContractNum;
        public int IDemandHeadSeq;
        public int IDemandDtlSeq;
        public string ISmartString;
    }

    public class EDIValidateSmartString_InputModel
    {
        public string PartNum;
        public string RevisionNum;
        public string IpSmartString;
    }

    public class EDIValidateSmartString_OutputModel
    {
        public string SsLogText;
        public bool _Return;
    }

    public class PartExists_InputModel
    {
        public string ConfigID;
        public string TargetEntity;
        public int GroupSeq;
        public string BasePartNum;
        public string BaseRevisionNum;
        public string NewPartNum;
        public int MtlSeq;
        public string RuleTag;
    }

    public class PartExists_OutputModel
    {
        public bool PartExists;
        public bool NotUnique;
        public bool SIValues;
    }

    public class PartRevExists_InputModel
    {
        public string IpPartNum;
        public string IpRevisionNum;
    }

    public class PartRevExists_OutputModel
    {
        public bool _Return;
    }

    public class GetTargetEntityValues_InputModel
    {
        public string ConfigID;
        public string RelatedToTableName;
    }

    public class GetTargetEntityValues_OutputModel
    {
        public bool AllowRecordCreation;
        public bool UseInSmartString;
    }

    public class SuggestSmartString_InputModel
    {
        public string ConfigID;
        public bool TestMode;
        public Erp.Tablesets.ConfigurationSequenceTableset Ts;
        public string IpRelatedToTable;
        public System.Guid IpRelatedToSysRowID;
        public System.Collections.Generic.List<Erp.Shared.Lib.Configurator.PCKeyValuePair<string, string>> SmartStringValues;
        public string StructTag;
        public int StructID;
    }

    public class SuggestSmartString_OutputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset Ts;
        public string OutSmartString;
    }

    public class EWCSuggestSmartString_InputModel
    {
        public string ConfigID;
        public bool TestMode;
        public string IpRelatedToTable;
        public System.Guid IpRelatedToSysRowID;
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> SmartStringValues;
        public string SubPartNum;
        public string BasePartNum;
        public string PartNum;
        public string SubBasePartNum;
    }

    public class EWCSuggestSmartString_OutputModel
    {
        public string OutSmartString;
    }

    public class AddUserDenfinedParameterString_InputModel
    {
        public string MethodName;
        public string ParameterName;
        public string ConfigID;
        public int ParamSeq;
        public string NewValue;
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class AddUserDenfinedParameterString_OutputModel
    {
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class AddUserDenfinedParameterInt_InputModel
    {
        public string MethodName;
        public string ParameterName;
        public string ConfigID;
        public int ParamSeq;
        public int NewValue;
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class AddUserDenfinedParameterInt_OutputModel
    {
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class AddUserDenfinedParameterDecimal_InputModel
    {
        public string MethodName;
        public string ParameterName;
        public string ConfigID;
        public int ParamSeq;
        public System.Decimal NewValue;
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class AddUserDenfinedParameterDecimal_OutputModel
    {
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class AddUserDenfinedParameterDateTime_InputModel
    {
        public string MethodName;
        public string ParameterName;
        public string ConfigID;
        public int ParamSeq;
        public System.DateTime? NewValue;
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class AddUserDenfinedParameterDateTime_OutputModel
    {
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class AddUserDenfinedParameterBool_InputModel
    {
        public string MethodName;
        public string ParameterName;
        public string ConfigID;
        public int ParamSeq;
        public bool NewValue;
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class AddUserDenfinedParameterBool_OutputModel
    {
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class ClearUDMethodParams_InputModel
    {
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class ClearUDMethodParams_OutputModel
    {
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class ExecuteGenerateImageLayerScriptCode_InputModel
    {
        public string ImageLayerID;
    }

    public class ExecuteGenerateImageLayerScriptCode_OutputModel
    {
        public string _Return;
    }

    public class ExecuteGenerateSingleImageLayerScriptCode_InputModel
    {
        public string ImageLayerID;
        public int ZIndex;
        public string ImageValue;
        public int LayerSeq;
    }

    public class ExecuteGenerateSingleImageLayerScriptCode_OutputModel
    {
        public string _Return;
    }

    public class ExecuteGenerateFullImageLayerScriptCode_InputModel
    {
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> ImageLayersInfo;
    }

    public class ExecuteGenerateFullImageLayerScriptCode_OutputModel
    {
        public string _Return;
    }

    public class ExecuteUserDefinedWithArrayReturn_InputModel
    {
        public string MethodName;
        public string ConfigID;
        public System.Guid TestID;
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class ExecuteUserDefinedWithArrayReturn_OutputModel
    {
        public Erp.Tablesets.PcValueTableset PcValueDS;
        public System.Object[] _Return;
    }

    public class ExecuteUserDefined_InputModel
    {
        public string MethodName;
        public string ConfigID;
        public System.Guid TestID;
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class ExecuteUserDefined_OutputModel
    {
        public Erp.Tablesets.PcValueTableset PcValueDS;
        public System.Object _Return;
    }

    public class ExecuteDataLookup_InputModel
    {
        public string MethodName;
        public string ConfigId;
        public System.Guid TestId;
        public System.String[] InParams;
    }

    public class ExecuteDataLookup_OutputModel
    {
        public string _Return;
    }

    public class ExecutePageOnLoadEvents_InputModel
    {
        public string PageLoadEvent;
        public string ConfigID;
        public System.Guid TestID;
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class ExecutePageOnLoadEvents_OutputModel
    {
        public Erp.Tablesets.PcValueTableset PcValueDS;
    }

    public class GetPictureBoxImage_InputModel
    {
        public string FileName;
        public string InputName;
    }

    public class GetPictureBoxImage_OutputModel
    {
        public System.Byte[] _Return;
    }

    public class GetAllImages_InputModel
    {
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> InputImageList;
        public string ConfigID;
        public int GroupSeq;
        public int HeadNum;
    }

    public class GetAllImages_OutputModel
    {
        public Erp.Tablesets.PcImagesTableset _Return;
    }

    public class GetAllPictureBoxImages_InputModel
    {
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> InputImageList;
    }

    public class GetAllPictureBoxImages_OutputModel
    {
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, byte[]>> _Return;
    }

    public class GetNewPcConfigParams_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset RuntimeDS;
        public string ConfigID;
        public string UniqueID;
    }

    public class GetNewPcConfigParams_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset RuntimeDS;
    }

    public class GetNewPcInputsPublishToDoc_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset RuntimeDS;
        public string Key;
    }

    public class GetNewPcInputsPublishToDoc_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset RuntimeDS;
    }

    public class DataColumnLookupList_InputModel
    {
        public string ConfigId;
        public System.Guid TestId;
        public string LookupTblID;
        public string ColName;
        public string SearchValue;
    }

    public class DataColumnLookupList_OutputModel
    {
        public string _Return;
    }

    public class DataColumnList_InputModel
    {
        public string ConfigId;
        public System.Guid TestId;
        public string LookupTableID;
        public string ColName;
    }

    public class DataColumnList_OutputModel
    {
        public string _Return;
    }

    public class DataColumnListNum_InputModel
    {
        public string ConfigId;
        public System.Guid TestId;
        public string LookupTableID;
        public string ColName;
    }

    public class DataColumnListNum_OutputModel
    {
        public string _Return;
    }

    public class DataColumnRange_InputModel
    {
        public string ConfigId;
        public System.Guid TestId;
        public string LookupTableID;
        public string ColName;
        public string StartRow;
        public string EndRow;
    }

    public class DataColumnRange_OutputModel
    {
        public string _Return;
    }

    public class DataRowList_InputModel
    {
        public string ConfigId;
        public System.Guid TestId;
        public string LookupTableID;
        public string RowName;
    }

    public class DataRowList_OutputModel
    {
        public string _Return;
    }

    public class DataRowListNum_InputModel
    {
        public string ConfigId;
        public System.Guid TestId;
        public string LookupTableID;
        public string RowName;
    }

    public class DataRowListNum_OutputModel
    {
        public string _Return;
    }

    public class DataRowRange_InputModel
    {
        public string ConfigId;
        public System.Guid TestId;
        public string LookupTableID;
        public string RowName;
        public string StartCol;
        public string EndCol;
    }

    public class DataRowRange_OutputModel
    {
        public string _Return;
    }

    public class DataRowLookup_InputModel
    {
        public string ConfigId;
        public System.Guid TestId;
        public string LookupTblID;
        public string RowName;
        public string SearchValue;
    }

    public class DataRowLookup_OutputModel
    {
        public string _Return;
    }

    public class DataLookup_InputModel
    {
        public string ConfigId;
        public System.Guid TestId;
        public string LookupTblID;
        public string RowName;
        public string ColName;
    }

    public class DataLookup_OutputModel
    {
        public string _Return;
    }

    public class EWCInitializeRuntime_InputModel
    {
        public string ConfigId;
        public string RelatedToTable;
        public System.Guid RelatedToRowID;
        public string PartNum;
        public string PartRev;
        public string ECCUser;
        public string ECCPwd;
        public string ReturnURL;
        public bool TestInputMode;
    }

    public class EWCInitializeRuntime_OutputModel
    {
        public string AccessToken;
        public int ExpiresIn;
        public string _Return;
    }

    public class EWCReadAllBytesIfNewer_InputModel
    {
        public string FileName;
        public System.DateTime LastModifiedUTCDateTime;
    }

    public class EWCReadAllBytesIfNewer_OutputModel
    {
        public System.Byte[] _Return;
    }

    public class GetTenantID_InputModel
    {
        public string Company;
    }

    public class GetTenantID_OutputModel
    {
        public string _Return;
    }

    public class EWCWriteOrCreateAllBytes_InputModel
    {
        public string FileName;
        public System.Byte[] Bytes;
    }

    public class GetPCTransportTableset_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigurationRuntime;
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigurationSequenceTableSet;
    }

    public class GetPCTransportTableset_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigurationRuntime;
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigurationSequenceTableSet;
        public Erp.Tablesets.PcValueTableset _Return;
    }

    public class SavePCTransportConfiguration_InputModel
    {
        public Erp.Tablesets.ConfigurationSequenceTableset ConfigurationSequenceDS;
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigurationRuntimeDS;
        public Erp.Tablesets.PcValueTableset PcValueDS;
        public Erp.Tablesets.PcTestResultsTableset TestResultsDS;
    }

    public class SavePCTransportConfiguration_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset ConfigurationRuntimeDS;
        public Erp.Tablesets.PcTestResultsTableset TestResultsDS;
    }

    public class DeleteTestInputsFileStoreEntry_InputModel
    {
        public string TestInputsFileName;
    }

    public class PrepareEWCRequirements_InputModel
    {
        public string ConfigID;
    }

    public class PrepareEWCRequirements_OutputModel
    {
        public string AccessToken;
        public int ExpiresIn;
    }

    public class GetECCConfigurator_InputModel
    {
        public System.Object EccConfigSetup;
    }

    public class GetECCConfigurator_OutputModel
    {
        public string _Return;
    }

    public class GetNewPcValueGrp_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class GetNewPcValueGrp_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class GetNewPcValueHead_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
        public int GroupSeq;
    }

    public class GetNewPcValueHead_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class GetNewPcInputsLayerDetail_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
        public string ConfigID;
        public string InputName;
        public string ImageLayerID;
    }

    public class GetNewPcInputsLayerDetail_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class GetNewPcInputsLayerHeader_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
        public string ConfigID;
        public string InputName;
    }

    public class GetNewPcInputsLayerHeader_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class GetNewPcInputVar_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class GetNewPcInputVar_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class GetNewPcValueInputLayerDetail_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
        public int GroupSeq;
        public int HeadNum;
        public string ConfigID;
        public string InputName;
        public string ImageLayerID;
    }

    public class GetNewPcValueInputLayerDetail_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class GetNewPcValueInputLayerHeader_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
        public int GroupSeq;
        public int HeadNum;
        public string ConfigID;
        public string InputName;
    }

    public class GetNewPcValueInputLayerHeader_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class GetNewQBuildMapping_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
        public string ConfigID;
        public string InputName;
        public string ObjName;
    }

    public class GetNewQBuildMapping_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class DeleteByID_InputModel
    {
        public int GroupSeq;
    }

    public class GetByID_InputModel
    {
        public int GroupSeq;
    }

    public class GetByID_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset _Return;
    }

    public class GetList_InputModel
    {
        public string WhereClause;
        public int PageSize;
        public int AbsolutePage;
    }

    public class GetList_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.ConfigurationRuntimeListTableset _Return;
    }

    public class GetRows_InputModel
    {
        public string WhereClausePcValueGrp;
        public string WhereClausePcValueHead;
        public string WhereClausePcConfigurationParams;
        public string WhereClausePcConfiguredDrawings;
        public string WhereClausePcContextProperties;
        public string WhereClausePcInputsLayerDetail;
        public string WhereClausePcInputsLayerHeader;
        public string WhereClausePcInputsPublishToDocParams;
        public string WhereClausePcInputVar;
        public string WhereClausePcValueInputLayerDetail;
        public string WhereClausePcValueInputLayerHeader;
        public string WhereClauseQBuildMapping;
        public int PageSize;
        public int AbsolutePage;
    }

    public class GetRows_OutputModel
    {
        public bool MorePages;
        public Erp.Tablesets.ConfigurationRuntimeTableset _Return;
    }

    public class GetBySysRowID_InputModel
    {
        public System.Guid Id;
    }

    public class GetBySysRowID_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset _Return;
    }

    public class GetBySysRowIDs_InputModel
    {
        public System.Collections.Generic.List<System.Guid> Ids;
    }

    public class GetBySysRowIDs_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset _Return;
    }

    public class Update_InputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class Update_OutputModel
    {
        public Erp.Tablesets.ConfigurationRuntimeTableset Ds;
    }

    public class UpdateExt_InputModel
    {
        public Erp.Tablesets.UpdExtConfigurationRuntimeTableset Ds;
        public bool ContinueProcessingOnError;
        public bool RollbackParentOnChildError;
    }

    public class UpdateExt_OutputModel
    {
        public Erp.Tablesets.UpdExtConfigurationRuntimeTableset Ds;
        public bool ErrorsOccurred;
        public Ice.BOUpdErrorTableset _Return;
    }
}
